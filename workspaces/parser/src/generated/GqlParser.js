// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';
import GqlParserListener from './GqlParserListener.js';
const serializedATN = [4,1,462,5311,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,2,579,7,579,
2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,
2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,
2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,
2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,7,615,
2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,2,621,7,621,
2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,2,627,7,627,
2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,2,633,7,633,
2,634,7,634,2,635,7,635,1,0,1,0,5,0,1275,8,0,10,0,12,0,1278,9,0,1,0,3,0,
1281,8,0,1,0,1,0,1,1,1,1,1,1,5,1,1288,8,1,10,1,12,1,1291,9,1,1,2,3,2,1294,
8,2,1,2,1,2,1,3,1,3,3,3,1300,8,3,1,3,1,3,3,3,1304,8,3,5,3,1306,8,3,10,3,
12,3,1309,9,3,1,3,3,3,1312,8,3,1,3,3,3,1315,8,3,1,4,1,4,5,4,1319,8,4,10,
4,12,4,1322,9,4,1,4,4,4,1325,8,4,11,4,12,4,1326,3,4,1329,8,4,1,5,1,5,3,5,
1333,8,5,1,6,1,6,1,6,3,6,1338,8,6,1,6,1,6,1,6,1,6,3,6,1344,8,6,1,7,1,7,1,
7,5,7,1349,8,7,10,7,12,7,1352,9,7,1,8,1,8,1,8,1,8,1,8,3,8,1359,8,8,3,8,1361,
8,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,1371,8,10,1,10,1,10,1,11,
1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,3,15,1386,8,15,1,15,1,
15,3,15,1390,8,15,1,16,1,16,1,17,3,17,1395,8,17,1,17,1,17,1,18,3,18,1400,
8,18,1,18,1,18,1,18,3,18,1405,8,18,1,19,3,19,1408,8,19,1,19,1,19,1,20,3,
20,1413,8,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,3,22,1422,8,22,1,23,1,23,
1,23,5,23,1427,8,23,10,23,12,23,1430,9,23,1,24,1,24,3,24,1434,8,24,1,25,
1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
30,3,30,1452,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,39,3,
39,1479,8,39,1,39,3,39,1482,8,39,1,39,1,39,1,40,4,40,1487,8,40,11,40,12,
40,1488,1,41,4,41,1492,8,41,11,41,12,41,1493,1,42,1,42,4,42,1498,8,42,11,
42,12,42,1499,3,42,1502,8,42,1,43,1,43,3,43,1506,8,43,1,43,1,43,1,44,1,44,
1,44,3,44,1513,8,44,1,45,3,45,1516,8,45,1,45,1,45,1,45,1,45,1,45,1,46,1,
46,1,46,3,46,1526,8,46,1,46,1,46,1,46,3,46,1531,8,46,1,47,1,47,1,47,1,47,
1,47,1,48,1,48,1,48,3,48,1541,8,48,1,48,3,48,1544,8,48,1,48,1,48,1,48,3,
48,1549,8,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,3,50,1559,8,50,1,50,
1,50,1,50,3,50,1564,8,50,1,51,1,51,1,51,5,51,1569,8,51,10,51,12,51,1572,
9,51,1,52,1,52,3,52,1576,8,52,1,53,1,53,1,53,3,53,1581,8,53,1,54,1,54,1,
54,5,54,1586,8,54,10,54,12,54,1589,9,54,1,55,1,55,3,55,1593,8,55,1,56,1,
56,1,56,5,56,1598,8,56,10,56,12,56,1601,9,56,1,57,1,57,1,57,1,57,1,58,1,
58,1,58,5,58,1610,8,58,10,58,12,58,1613,9,58,1,59,1,59,1,59,3,59,1618,8,
59,1,60,1,60,1,60,3,60,1623,8,60,1,61,3,61,1626,8,61,1,61,1,61,1,61,1,61,
1,62,3,62,1633,8,62,1,62,1,62,1,62,1,62,1,62,1,63,3,63,1641,8,63,1,63,1,
63,1,63,3,63,1646,8,63,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,65,1,65,
3,65,1658,8,65,1,66,3,66,1661,8,66,1,66,1,66,1,66,1,66,1,67,3,67,1668,8,
67,1,67,1,67,1,67,1,67,1,67,1,68,3,68,1676,8,68,1,68,1,68,1,68,3,68,1681,
8,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,3,70,1693,8,70,1,
71,1,71,1,71,3,71,1698,8,71,1,72,1,72,1,72,3,72,1703,8,72,1,72,1,72,1,73,
1,73,1,73,3,73,1710,8,73,1,73,3,73,1713,8,73,1,73,1,73,1,74,1,74,1,74,1,
74,1,74,3,74,1722,8,74,1,75,1,75,3,75,1726,8,75,1,76,1,76,1,76,3,76,1731,
8,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,1741,8,78,1,79,1,79,1,
79,1,79,1,79,3,79,1748,8,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,
1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1766,8,82,1,83,1,83,1,83,1,84,1,
84,1,84,1,84,3,84,1775,8,84,1,85,1,85,1,86,1,86,3,86,1781,8,86,1,87,3,87,
1784,8,87,1,87,1,87,1,87,1,88,3,88,1790,8,88,1,88,1,88,1,88,1,89,1,89,1,
89,1,90,1,90,1,90,1,90,3,90,1802,8,90,1,91,1,91,3,91,1806,8,91,1,92,1,92,
3,92,1810,8,92,1,93,1,93,1,93,1,93,1,94,1,94,1,95,1,95,3,95,1820,8,95,1,
96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1832,8,96,1,97,1,97,
3,97,1836,8,97,1,98,1,98,1,98,3,98,1841,8,98,1,99,1,99,1,99,1,99,1,99,3,
99,1848,8,99,1,100,1,100,3,100,1852,8,100,1,101,1,101,3,101,1856,8,101,1,
102,1,102,3,102,1860,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,
1869,8,103,1,104,5,104,1872,8,104,10,104,12,104,1875,9,104,1,105,1,105,1,
105,1,105,3,105,1881,8,105,1,106,1,106,1,106,1,106,3,106,1887,8,106,1,107,
1,107,1,107,3,107,1892,8,107,1,107,3,107,1895,8,107,1,107,1,107,1,107,3,
107,1900,8,107,1,107,1,107,3,107,1904,8,107,1,108,1,108,1,108,1,109,3,109,
1910,8,109,1,109,1,109,1,109,3,109,1915,8,109,1,110,1,110,1,111,1,111,1,
112,1,112,1,112,1,112,3,112,1925,8,112,1,113,1,113,1,113,3,113,1930,8,113,
1,113,3,113,1933,8,113,1,113,1,113,1,113,1,113,3,113,1939,8,113,1,113,1,
113,1,114,1,114,1,114,3,114,1946,8,114,1,115,3,115,1949,8,115,1,115,1,115,
1,115,1,115,1,116,1,116,1,116,1,116,1,117,1,117,1,118,1,118,1,118,5,118,
1964,8,118,10,118,12,118,1967,9,118,1,119,1,119,3,119,1971,8,119,1,120,1,
120,3,120,1975,8,120,1,120,3,120,1978,8,120,1,120,1,120,1,120,1,120,1,120,
1,120,3,120,1986,8,120,1,121,1,121,1,121,1,121,1,121,3,121,1993,8,121,1,
122,1,122,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,
124,3,124,2008,8,124,1,125,1,125,1,125,1,125,1,125,3,125,2015,8,125,1,126,
1,126,1,127,1,127,1,128,1,128,1,128,3,128,2024,8,128,1,129,1,129,1,129,1,
129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,
132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,1,135,3,135,2051,8,135,
1,135,3,135,2054,8,135,1,136,1,136,1,136,3,136,2059,8,136,1,137,1,137,1,
137,1,137,1,138,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,140,1,140,1,
140,1,140,1,140,1,140,3,140,2079,8,140,1,140,3,140,2082,8,140,1,141,1,141,
1,141,1,141,1,141,1,141,3,141,2090,8,141,1,141,3,141,2093,8,141,1,142,1,
142,1,143,1,143,1,143,1,144,1,144,1,144,1,144,3,144,2104,8,144,1,145,1,145,
1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,146,1,147,1,147,
1,147,1,147,1,147,1,147,1,148,1,148,1,149,1,149,1,150,1,150,1,150,1,150,
1,150,3,150,2133,8,150,1,151,1,151,3,151,2137,8,151,1,151,1,151,1,152,1,
152,1,152,5,152,2144,8,152,10,152,12,152,2147,9,152,1,153,1,153,1,153,1,
154,1,154,3,154,2154,8,154,1,154,1,154,1,154,1,154,3,154,2160,8,154,1,155,
1,155,1,155,3,155,2165,8,155,1,155,1,155,1,155,1,155,3,155,2171,8,155,1,
155,1,155,1,156,1,156,1,156,1,156,3,156,2179,8,156,1,157,1,157,1,157,3,157,
2184,8,157,1,157,1,157,1,157,1,157,3,157,2190,8,157,1,157,1,157,1,158,1,
158,1,158,1,158,3,158,2198,8,158,1,159,1,159,1,159,3,159,2203,8,159,1,159,
1,159,1,159,1,159,3,159,2209,8,159,1,159,1,159,1,160,1,160,1,160,1,160,3,
160,2217,8,160,1,161,1,161,1,162,1,162,3,162,2223,8,162,1,163,1,163,4,163,
2227,8,163,11,163,12,163,2228,1,164,1,164,1,164,1,164,5,164,2235,8,164,10,
164,12,164,2238,9,164,1,164,1,164,1,164,1,164,1,164,5,164,2245,8,164,10,
164,12,164,2248,9,164,1,164,1,164,1,164,3,164,2253,8,164,1,165,1,165,1,165,
1,165,1,165,1,165,3,165,2261,8,165,1,166,4,166,2264,8,166,11,166,12,166,
2265,1,166,3,166,2269,8,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,3,
167,2278,8,167,1,168,1,168,1,168,1,169,1,169,1,169,1,170,1,170,1,170,1,171,
1,171,1,171,1,171,1,171,1,171,3,171,2295,8,171,3,171,2297,8,171,1,172,1,
172,1,172,1,173,1,173,1,173,3,173,2305,8,173,1,174,1,174,1,174,5,174,2310,
8,174,10,174,12,174,2313,9,174,1,175,1,175,1,175,3,175,2318,8,175,1,176,
1,176,1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,177,1,178,1,178,1,179,
1,179,4,179,2334,8,179,11,179,12,179,2335,1,179,1,179,4,179,2340,8,179,11,
179,12,179,2341,5,179,2344,8,179,10,179,12,179,2347,9,179,1,180,1,180,1,
180,3,180,2352,8,180,1,181,1,181,1,181,5,181,2357,8,181,10,181,12,181,2360,
9,181,1,182,1,182,3,182,2364,8,182,1,183,1,183,1,183,1,183,1,184,1,184,1,
184,1,184,1,185,3,185,2375,8,185,1,185,1,185,1,185,3,185,2380,8,185,1,186,
1,186,1,186,5,186,2385,8,186,10,186,12,186,2388,9,186,1,187,1,187,1,188,
4,188,2393,8,188,11,188,12,188,2394,1,188,3,188,2398,8,188,1,189,1,189,1,
189,1,189,1,189,1,189,1,189,3,189,2407,8,189,1,190,1,190,1,190,1,191,1,191,
1,191,1,191,1,191,1,191,1,191,5,191,2419,8,191,10,191,12,191,2422,9,191,
1,192,1,192,3,192,2426,8,192,1,193,1,193,3,193,2430,8,193,1,193,1,193,3,
193,2434,8,193,1,193,1,193,3,193,2438,8,193,3,193,2440,8,193,1,194,1,194,
3,194,2444,8,194,1,195,1,195,1,195,1,195,1,195,1,195,3,195,2452,8,195,1,
196,1,196,1,196,1,196,3,196,2458,8,196,1,197,1,197,1,197,1,197,5,197,2464,
8,197,10,197,12,197,2467,9,197,1,197,1,197,1,197,3,197,2472,8,197,1,198,
1,198,1,199,3,199,2477,8,199,1,199,1,199,1,199,1,200,1,200,1,201,1,201,1,
201,1,202,1,202,1,202,1,203,1,203,1,203,3,203,2493,8,203,1,204,1,204,1,204,
1,204,1,204,1,204,1,204,3,204,2502,8,204,1,205,1,205,1,205,1,205,1,206,3,
206,2509,8,206,1,206,1,206,1,206,3,206,2514,8,206,1,206,3,206,2517,8,206,
1,207,1,207,1,207,5,207,2522,8,207,10,207,12,207,2525,9,207,1,208,1,208,
1,208,1,209,1,209,1,209,1,210,1,210,1,210,3,210,2536,8,210,1,211,1,211,1,
211,3,211,2541,8,211,3,211,2543,8,211,3,211,2545,8,211,1,211,1,211,3,211,
2549,8,211,3,211,2551,8,211,1,211,3,211,2554,8,211,1,212,1,212,1,213,1,213,
1,213,3,213,2561,8,213,1,213,1,213,3,213,2565,8,213,1,214,1,214,1,214,1,
215,3,215,2571,8,215,1,215,1,215,3,215,2575,8,215,1,215,3,215,2578,8,215,
1,216,1,216,1,216,5,216,2583,8,216,10,216,12,216,2586,9,216,1,217,1,217,
3,217,2590,8,217,1,218,1,218,1,218,1,219,1,219,3,219,2597,8,219,1,219,1,
219,1,219,3,219,2602,8,219,1,219,3,219,2605,8,219,1,219,3,219,2608,8,219,
1,219,3,219,2611,8,219,1,219,1,219,3,219,2615,8,219,3,219,2617,8,219,1,220,
1,220,1,220,5,220,2622,8,220,10,220,12,220,2625,9,220,1,221,1,221,3,221,
2629,8,221,1,222,1,222,1,222,1,223,1,223,1,223,1,224,1,224,1,224,3,224,2640,
8,224,1,225,1,225,1,225,5,225,2645,8,225,10,225,12,225,2648,9,225,1,226,
1,226,1,226,1,227,1,227,1,227,1,227,1,227,3,227,2658,8,227,1,228,1,228,1,
228,1,229,1,229,1,229,1,230,1,230,1,230,1,231,1,231,1,231,1,232,1,232,1,
232,3,232,2675,8,232,1,233,1,233,1,233,1,233,3,233,2681,8,233,1,234,1,234,
1,234,1,234,1,235,1,235,1,235,3,235,2690,8,235,3,235,2692,8,235,1,235,3,
235,2695,8,235,1,236,1,236,1,237,1,237,1,237,1,238,1,238,1,238,5,238,2705,
8,238,10,238,12,238,2708,9,238,1,239,1,239,1,239,1,240,1,240,1,240,5,240,
2716,8,240,10,240,12,240,2719,9,240,1,241,1,241,1,241,1,242,1,242,1,243,
1,243,1,244,1,244,1,244,3,244,2731,8,244,1,244,3,244,2734,8,244,3,244,2736,
8,244,1,245,1,245,1,245,5,245,2741,8,245,10,245,12,245,2744,9,245,1,246,
1,246,1,246,3,246,2749,8,246,1,246,1,246,1,246,1,247,1,247,1,247,1,248,1,
248,1,248,1,249,1,249,1,249,3,249,2763,8,249,1,250,1,250,1,250,1,250,1,250,
5,250,2770,8,250,10,250,12,250,2773,9,250,1,251,1,251,1,251,1,251,1,251,
5,251,2780,8,251,10,251,12,251,2783,9,251,1,252,1,252,1,252,1,252,1,252,
5,252,2790,8,252,10,252,12,252,2793,9,252,1,253,1,253,1,253,3,253,2798,8,
253,1,254,1,254,1,254,1,255,1,255,1,255,1,256,1,256,1,256,3,256,2809,8,256,
1,257,1,257,3,257,2813,8,257,1,258,1,258,1,258,1,258,1,259,3,259,2820,8,
259,1,259,3,259,2823,8,259,1,259,3,259,2826,8,259,1,259,3,259,2829,8,259,
1,260,1,260,1,260,3,260,2834,8,260,1,261,1,261,3,261,2838,8,261,1,262,1,
262,1,262,1,263,1,263,1,263,1,263,1,264,1,264,1,264,5,264,2850,8,264,10,
264,12,264,2853,9,264,1,265,1,265,1,265,1,265,1,266,1,266,1,267,1,267,1,
267,1,267,3,267,2865,8,267,1,268,1,268,3,268,2869,8,268,1,269,1,269,1,269,
1,269,1,269,1,269,1,269,3,269,2878,8,269,1,270,1,270,1,270,1,270,1,271,1,
271,1,271,1,271,1,272,1,272,1,272,1,272,1,273,1,273,1,273,1,273,1,273,1,
274,1,274,1,274,1,274,1,274,1,274,1,275,1,275,1,275,1,275,1,275,1,276,1,
276,1,276,1,276,1,277,1,277,1,278,1,278,1,278,1,278,3,278,2918,8,278,1,279,
1,279,1,279,1,279,1,280,1,280,3,280,2926,8,280,1,280,1,280,3,280,2930,8,
280,1,280,1,280,1,281,1,281,3,281,2936,8,281,1,281,3,281,2939,8,281,1,281,
3,281,2942,8,281,1,281,3,281,2945,8,281,1,281,3,281,2948,8,281,1,281,1,281,
1,281,3,281,2953,8,281,1,281,3,281,2956,8,281,1,281,3,281,2959,8,281,1,281,
3,281,2962,8,281,1,281,3,281,2965,8,281,1,281,3,281,2968,8,281,1,282,1,282,
1,282,1,283,1,283,1,283,1,284,1,284,3,284,2978,8,284,1,285,1,285,3,285,2982,
8,285,1,286,1,286,1,286,3,286,2987,8,286,1,287,1,287,3,287,2991,8,287,1,
287,3,287,2994,8,287,1,288,1,288,3,288,2998,8,288,1,288,3,288,3001,8,288,
1,288,3,288,3004,8,288,1,289,1,289,1,289,1,289,3,289,3010,8,289,1,290,1,
290,1,290,3,290,3015,8,290,1,290,3,290,3018,8,290,1,291,1,291,1,291,3,291,
3023,8,291,1,291,3,291,3026,8,291,1,292,1,292,1,292,3,292,3031,8,292,1,292,
3,292,3034,8,292,1,293,1,293,1,293,3,293,3039,8,293,1,293,3,293,3042,8,293,
1,293,1,293,1,294,1,294,1,295,1,295,1,295,5,295,3051,8,295,10,295,12,295,
3054,9,295,1,296,1,296,1,297,1,297,1,297,1,297,1,297,1,297,5,297,3064,8,
297,10,297,12,297,3067,9,297,1,298,1,298,1,298,1,298,1,298,1,298,5,298,3075,
8,298,10,298,12,298,3078,9,298,1,299,1,299,1,299,3,299,3083,8,299,1,300,
1,300,1,300,1,300,1,300,1,300,1,300,1,300,3,300,3093,8,300,1,301,1,301,1,
301,1,301,1,301,1,301,1,301,3,301,3102,8,301,1,302,1,302,1,302,1,302,1,303,
1,303,1,303,1,303,1,304,1,304,1,304,1,304,1,304,1,304,1,305,1,305,1,305,
1,305,1,305,1,306,1,306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,1,307,
1,308,1,308,1,308,1,308,1,308,1,309,1,309,1,309,3,309,3141,8,309,1,310,1,
310,1,310,5,310,3146,8,310,10,310,12,310,3149,9,310,1,311,1,311,1,311,5,
311,3154,8,311,10,311,12,311,3157,9,311,1,312,1,312,1,312,1,312,1,312,5,
312,3164,8,312,10,312,12,312,3167,9,312,1,313,1,313,1,313,1,313,1,313,1,
313,5,313,3175,8,313,10,313,12,313,3178,9,313,1,314,1,314,1,314,3,314,3183,
8,314,1,315,1,315,1,315,1,316,1,316,1,316,1,317,1,317,3,317,3193,8,317,1,
318,1,318,1,318,1,318,1,318,1,318,1,318,3,318,3202,8,318,1,319,1,319,1,319,
1,319,1,320,1,320,1,320,1,320,1,321,1,321,1,321,1,321,1,321,1,322,1,322,
1,322,1,322,1,322,1,323,1,323,1,323,1,323,1,323,1,324,1,324,1,324,1,324,
1,324,1,325,1,325,1,325,1,325,1,325,1,326,1,326,3,326,3239,8,326,1,327,1,
327,1,327,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,3253,
8,328,1,329,1,329,1,329,1,330,1,330,3,330,3260,8,330,1,331,1,331,1,331,1,
331,1,331,1,331,1,332,1,332,1,332,5,332,3271,8,332,10,332,12,332,3274,9,
332,1,333,1,333,1,334,1,334,1,334,1,335,1,335,1,335,5,335,3284,8,335,10,
335,12,335,3287,9,335,1,336,1,336,1,336,1,336,1,337,1,337,1,337,1,337,1,
338,1,338,1,338,5,338,3300,8,338,10,338,12,338,3303,9,338,1,338,3,338,3306,
8,338,1,339,1,339,1,339,1,340,1,340,1,340,1,340,1,341,1,341,1,341,1,341,
1,341,1,341,3,341,3321,8,341,1,342,1,342,1,342,1,342,1,342,1,342,1,343,1,
343,1,343,1,343,1,343,1,343,1,343,1,344,1,344,1,345,1,345,1,346,1,346,1,
347,1,347,1,347,1,348,1,348,1,349,1,349,1,349,5,349,3350,8,349,10,349,12,
349,3353,9,349,1,350,1,350,1,350,1,350,1,351,1,351,1,351,1,351,3,351,3363,
8,351,1,352,1,352,1,352,1,353,1,353,1,353,1,354,1,354,1,354,3,354,3374,8,
354,1,355,1,355,1,355,1,355,1,355,1,355,1,355,3,355,3383,8,355,1,356,1,356,
3,356,3387,8,356,1,357,1,357,1,357,1,357,1,357,1,358,1,358,1,358,3,358,3397,
8,358,1,359,1,359,1,359,1,359,3,359,3403,8,359,1,360,1,360,1,360,1,360,1,
360,1,360,1,360,1,360,1,361,1,361,1,361,1,361,1,361,1,361,1,362,1,362,3,
362,3421,8,362,1,363,1,363,1,363,1,363,1,363,1,363,1,364,1,364,3,364,3431,
8,364,1,365,1,365,1,365,1,365,3,365,3437,8,365,1,366,1,366,1,366,1,366,1,
366,1,366,1,366,1,366,1,367,1,367,1,367,1,367,1,367,1,367,1,368,1,368,3,
368,3455,8,368,1,369,1,369,1,369,1,369,1,369,1,370,1,370,1,370,3,370,3465,
8,370,1,371,1,371,1,371,1,371,3,371,3471,8,371,1,372,1,372,1,372,1,372,1,
372,1,372,1,372,1,372,1,373,1,373,1,374,1,374,1,374,1,374,1,374,1,374,1,
375,1,375,1,375,3,375,3492,8,375,1,376,1,376,3,376,3496,8,376,1,377,1,377,
1,377,1,377,3,377,3502,8,377,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,
378,1,379,1,379,1,380,1,380,1,380,1,380,1,380,1,380,1,381,1,381,1,381,1,
382,1,382,3,382,3525,8,382,1,383,1,383,1,383,1,383,3,383,3531,8,383,1,384,
1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,385,1,385,1,385,1,385,1,385,
1,385,1,386,1,386,1,386,1,387,1,387,3,387,3552,8,387,1,388,1,388,1,388,1,
388,3,388,3558,8,388,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,390,
1,390,1,390,1,390,1,390,1,390,1,391,1,391,1,392,1,392,1,392,1,393,1,393,
1,393,3,393,3582,8,393,1,394,1,394,1,394,1,394,1,394,1,395,1,395,1,395,3,
395,3592,8,395,1,396,1,396,1,396,1,396,1,396,1,396,1,397,1,397,1,397,1,397,
1,397,1,397,1,397,1,397,1,397,1,397,1,397,3,397,3611,8,397,1,398,1,398,1,
398,1,398,1,398,1,398,1,399,1,399,1,399,1,399,1,399,1,399,1,400,1,400,1,
401,1,401,1,401,1,402,1,402,1,402,1,402,1,402,1,403,1,403,1,404,1,404,1,
405,1,405,1,406,1,406,1,407,1,407,1,408,1,408,1,408,1,408,1,408,1,408,1,
408,1,408,1,408,3,408,3654,8,408,1,409,1,409,1,409,1,410,1,410,1,410,1,411,
1,411,1,411,1,411,1,411,1,411,3,411,3668,8,411,1,412,1,412,1,412,1,413,1,
413,3,413,3675,8,413,1,413,1,413,1,414,1,414,1,414,1,415,1,415,3,415,3684,
8,415,1,415,3,415,3687,8,415,1,415,1,415,1,416,1,416,1,416,1,417,3,417,3695,
8,417,1,417,1,417,1,418,1,418,1,418,1,419,3,419,3703,8,419,1,419,1,419,1,
419,1,420,1,420,1,420,1,420,1,420,1,420,3,420,3714,8,420,1,421,1,421,3,421,
3718,8,421,1,421,1,421,3,421,3722,8,421,1,421,1,421,1,422,1,422,3,422,3728,
8,422,1,422,1,422,3,422,3732,8,422,1,422,1,422,1,423,1,423,1,423,1,423,1,
423,1,423,1,423,5,423,3743,8,423,10,423,12,423,3746,9,423,1,423,1,423,1,
424,1,424,1,424,1,424,1,424,1,424,1,424,5,424,3757,8,424,10,424,12,424,3760,
9,424,1,424,1,424,1,425,1,425,3,425,3766,8,425,1,426,1,426,3,426,3770,8,
426,1,427,1,427,3,427,3774,8,427,1,428,1,428,3,428,3778,8,428,1,429,1,429,
1,429,3,429,3783,8,429,1,430,1,430,3,430,3787,8,430,1,431,1,431,1,432,1,
432,1,433,1,433,1,434,1,434,3,434,3797,8,434,1,435,1,435,3,435,3801,8,435,
1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,3,436,3811,8,436,1,437,1,
437,3,437,3815,8,437,1,438,1,438,1,438,1,438,3,438,3821,8,438,1,439,1,439,
1,440,1,440,1,441,1,441,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,
1,442,5,442,3838,8,442,10,442,12,442,3841,9,442,1,443,1,443,1,443,1,443,
1,443,1,443,5,443,3849,8,443,10,443,12,443,3852,9,443,1,444,3,444,3855,8,
444,1,444,1,444,1,445,1,445,1,445,3,445,3862,8,445,1,445,1,445,3,445,3866,
8,445,1,445,3,445,3869,8,445,1,446,1,446,3,446,3873,8,446,1,447,1,447,1,
447,1,447,1,447,3,447,3880,8,447,1,448,1,448,1,448,1,448,1,448,1,448,1,448,
1,448,1,448,5,448,3891,8,448,10,448,12,448,3894,9,448,1,449,1,449,1,449,
1,449,1,449,1,449,1,449,1,449,1,449,5,449,3905,8,449,10,449,12,449,3908,
9,449,1,450,3,450,3911,8,450,1,450,1,450,1,451,1,451,3,451,3917,8,451,1,
452,1,452,1,452,1,452,1,452,3,452,3924,8,452,1,453,1,453,1,453,1,453,1,453,
1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,3940,8,453,1,
454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,
454,1,454,3,454,3956,8,454,1,455,1,455,1,455,3,455,3961,8,455,1,456,1,456,
1,456,1,456,1,456,1,457,1,457,1,457,1,457,1,457,1,458,1,458,1,458,1,458,
1,458,1,459,1,459,1,459,1,459,1,459,1,460,1,460,1,460,1,460,1,460,1,460,
1,460,1,461,1,461,1,461,1,461,1,461,1,462,1,462,1,462,1,462,1,462,1,462,
1,462,1,463,1,463,1,463,1,463,1,463,1,464,1,464,1,464,1,464,1,464,1,465,
1,465,1,465,1,465,1,465,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,467,
1,467,1,467,1,467,1,467,1,468,1,468,1,468,1,468,1,468,1,469,1,469,1,469,
1,469,1,469,1,470,1,470,1,470,1,470,1,470,1,471,1,471,1,471,1,471,1,471,
1,472,1,472,3,472,4051,8,472,1,473,1,473,1,473,1,473,1,473,1,473,5,473,4059,
8,473,10,473,12,473,4062,9,473,1,474,1,474,3,474,4066,8,474,1,475,1,475,
1,475,1,475,1,475,1,475,5,475,4074,8,475,10,475,12,475,4077,9,475,1,476,
1,476,3,476,4081,8,476,1,477,1,477,3,477,4085,8,477,1,478,1,478,1,478,1,
478,3,478,4091,8,478,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,4100,
8,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,
1,479,1,479,1,479,1,479,1,479,3,479,4118,8,479,1,480,1,480,1,480,1,480,1,
480,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,4132,8,481,3,481,4134,
8,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,
1,481,3,481,4148,8,481,1,482,1,482,1,482,1,482,1,482,3,482,4155,8,482,1,
482,1,482,1,483,1,483,1,484,1,484,3,484,4163,8,484,1,485,1,485,1,485,1,485,
1,485,1,485,1,485,3,485,4172,8,485,1,485,1,485,1,485,1,485,1,485,1,485,1,
485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,3,485,4190,8,485,
1,486,1,486,1,486,1,486,1,486,1,486,1,486,3,486,4199,8,486,3,486,4201,8,
486,1,486,1,486,1,486,1,486,1,486,1,486,1,486,1,486,1,486,1,486,1,486,1,
486,3,486,4215,8,486,1,487,1,487,1,488,1,488,1,489,1,489,1,489,1,489,1,489,
1,489,3,489,4227,8,489,1,489,1,489,1,489,1,489,1,489,1,489,5,489,4235,8,
489,10,489,12,489,4238,9,489,1,490,1,490,3,490,4242,8,490,1,491,1,491,1,
491,1,491,1,491,3,491,4249,8,491,1,492,1,492,1,492,1,492,3,492,4255,8,492,
1,492,3,492,4258,8,492,1,493,1,493,1,493,1,493,3,493,4264,8,493,1,493,3,
493,4267,8,493,1,494,1,494,1,494,1,494,3,494,4273,8,494,1,494,3,494,4276,
8,494,1,495,1,495,1,495,1,495,3,495,4282,8,495,1,495,3,495,4285,8,495,1,
496,1,496,1,496,1,496,3,496,4291,8,496,1,496,3,496,4294,8,496,1,497,1,497,
3,497,4298,8,497,1,498,1,498,3,498,4302,8,498,1,499,1,499,3,499,4306,8,499,
1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,3,500,4316,8,500,1,500,1,
500,1,500,1,500,1,500,1,500,5,500,4324,8,500,10,500,12,500,4327,9,500,1,
501,1,501,1,501,1,501,1,501,1,501,3,501,4335,8,501,1,501,1,501,1,501,1,501,
1,501,1,501,5,501,4343,8,501,10,501,12,501,4346,9,501,1,502,3,502,4349,8,
502,1,502,1,502,1,503,1,503,3,503,4355,8,503,1,504,1,504,3,504,4359,8,504,
1,505,1,505,1,505,1,505,1,505,1,506,1,506,3,506,4368,8,506,1,507,1,507,1,
507,1,507,1,507,1,508,1,508,3,508,4377,8,508,1,509,1,509,1,509,1,509,1,509,
1,510,1,510,1,510,1,510,1,510,1,511,1,511,1,511,1,511,1,511,3,511,4394,8,
511,1,512,1,512,1,512,1,512,1,512,1,512,5,512,4402,8,512,10,512,12,512,4405,
9,512,1,513,1,513,3,513,4409,8,513,1,514,1,514,3,514,4413,8,514,1,515,1,
515,1,515,1,515,1,515,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,517,1,
517,1,518,1,518,1,518,1,518,1,518,1,519,1,519,1,519,5,519,4437,8,519,10,
519,12,519,4440,9,519,1,520,1,520,1,520,1,520,1,520,1,520,1,520,3,520,4449,
8,520,1,520,1,520,1,520,1,520,1,520,3,520,4456,8,520,1,520,5,520,4459,8,
520,10,520,12,520,4462,9,520,1,521,1,521,1,521,1,521,1,521,1,521,1,521,3,
521,4471,8,521,1,521,5,521,4474,8,521,10,521,12,521,4477,9,521,1,522,1,522,
3,522,4481,8,522,1,523,1,523,1,523,1,523,1,523,1,524,1,524,1,524,1,524,1,
524,1,525,1,525,1,525,5,525,4496,8,525,10,525,12,525,4499,9,525,1,526,1,
526,1,527,1,527,1,527,1,527,1,527,1,528,1,528,1,528,5,528,4511,8,528,10,
528,12,528,4514,9,528,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,
529,1,529,1,529,1,529,1,529,1,529,3,529,4530,8,529,1,530,1,530,1,530,5,530,
4535,8,530,10,530,12,530,4538,9,530,1,531,1,531,1,532,1,532,1,532,1,532,
1,532,1,533,1,533,1,533,5,533,4550,8,533,10,533,12,533,4553,9,533,1,534,
1,534,1,534,1,535,1,535,1,535,1,536,1,536,3,536,4563,8,536,1,537,1,537,1,
537,1,537,1,537,1,537,1,537,1,537,1,537,3,537,4574,8,537,1,538,1,538,1,538,
5,538,4579,8,538,10,538,12,538,4582,9,538,1,539,1,539,1,539,1,540,1,540,
1,541,1,541,1,541,3,541,4592,8,541,1,542,1,542,1,542,1,542,1,542,1,542,1,
542,1,542,1,542,1,542,1,542,1,542,5,542,4606,8,542,10,542,12,542,4609,9,
542,1,542,1,542,3,542,4613,8,542,1,543,1,543,1,543,5,543,4618,8,543,10,543,
12,543,4621,9,543,1,543,3,543,4624,8,543,1,543,1,543,1,544,1,544,5,544,4630,
8,544,10,544,12,544,4633,9,544,1,544,3,544,4636,8,544,1,544,1,544,1,545,
1,545,1,545,1,545,1,545,1,546,1,546,1,546,1,546,1,546,1,547,1,547,1,547,
1,548,1,548,3,548,4655,8,548,1,549,1,549,1,549,5,549,4660,8,549,10,549,12,
549,4663,9,549,1,550,1,550,1,550,1,550,1,550,1,550,1,550,3,550,4672,8,550,
1,551,1,551,3,551,4676,8,551,1,552,1,552,1,552,1,552,3,552,4682,8,552,1,
552,1,552,1,552,1,552,1,553,1,553,1,553,1,553,1,553,1,554,1,554,1,554,1,
554,1,554,1,555,1,555,3,555,4700,8,555,1,556,1,556,1,556,1,556,1,556,1,556,
1,556,3,556,4709,8,556,1,557,1,557,1,557,1,557,1,557,1,557,3,557,4717,8,
557,1,558,1,558,3,558,4721,8,558,1,559,1,559,3,559,4725,8,559,1,560,1,560,
3,560,4729,8,560,1,561,1,561,1,561,1,561,5,561,4735,8,561,10,561,12,561,
4738,9,561,1,562,1,562,1,562,1,562,5,562,4744,8,562,10,562,12,562,4747,9,
562,1,563,1,563,5,563,4751,8,563,10,563,12,563,4754,9,563,1,563,1,563,1,
564,1,564,5,564,4760,8,564,10,564,12,564,4763,9,564,1,564,1,564,1,565,1,
565,5,565,4769,8,565,10,565,12,565,4772,9,565,1,565,1,565,1,566,1,566,1,
567,1,567,1,567,5,567,4781,8,567,10,567,12,567,4784,9,567,1,567,1,567,5,
567,4788,8,567,10,567,12,567,4791,9,567,1,567,1,567,5,567,4795,8,567,10,
567,12,567,4798,9,567,5,567,4800,8,567,10,567,12,567,4803,9,567,1,567,1,
567,1,567,1,567,5,567,4809,8,567,10,567,12,567,4812,9,567,1,567,1,567,5,
567,4816,8,567,10,567,12,567,4819,9,567,1,567,1,567,5,567,4823,8,567,10,
567,12,567,4826,9,567,5,567,4828,8,567,10,567,12,567,4831,9,567,1,567,1,
567,5,567,4835,8,567,10,567,12,567,4838,9,567,1,568,1,568,3,568,4842,8,568,
1,569,3,569,4845,8,569,1,569,1,569,1,570,1,570,3,570,4851,8,570,1,571,1,
571,1,571,1,571,3,571,4857,8,571,1,571,1,571,3,571,4861,8,571,1,572,1,572,
1,573,1,573,1,573,1,573,3,573,4869,8,573,1,574,1,574,3,574,4873,8,574,1,
574,5,574,4876,8,574,10,574,12,574,4879,9,574,1,575,1,575,3,575,4883,8,575,
1,575,5,575,4886,8,575,10,575,12,575,4889,9,575,1,576,1,576,3,576,4893,8,
576,1,576,5,576,4896,8,576,10,576,12,576,4899,9,576,1,577,1,577,3,577,4903,
8,577,1,577,5,577,4906,8,577,10,577,12,577,4909,9,577,1,578,3,578,4912,8,
578,1,578,1,578,1,579,1,579,1,579,1,579,1,580,1,580,1,580,3,580,4923,8,580,
1,581,1,581,1,581,1,582,1,582,1,582,1,583,1,583,1,583,1,584,1,584,1,585,
1,585,1,586,1,586,1,587,1,587,1,587,3,587,4943,8,587,1,588,4,588,4946,8,
588,11,588,12,588,4947,1,588,4,588,4951,8,588,11,588,12,588,4952,1,588,1,
588,3,588,4957,8,588,1,589,4,589,4960,8,589,11,589,12,589,4961,1,589,4,589,
4965,8,589,11,589,12,589,4966,1,589,1,589,1,590,4,590,4972,8,590,11,590,
12,590,4973,1,590,4,590,4977,8,590,11,590,12,590,4978,1,590,1,590,3,590,
4983,8,590,1,591,1,591,4,591,4987,8,591,11,591,12,591,4988,1,592,1,592,1,
593,1,593,1,594,1,594,1,595,1,595,1,596,1,596,1,597,1,597,1,598,1,598,1,
599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,3,599,5014,8,599,1,599,
1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,5,599,5025,8,599,10,599,
12,599,5028,9,599,1,600,3,600,5031,8,600,1,600,1,600,1,601,1,601,1,601,1,
601,1,601,3,601,5040,8,601,1,602,1,602,1,602,1,602,1,602,3,602,5047,8,602,
1,603,1,603,1,603,1,603,1,603,3,603,5054,8,603,1,603,1,603,1,603,3,603,5059,
8,603,1,603,1,603,1,603,1,603,1,603,3,603,5066,8,603,1,603,1,603,1,603,1,
603,1,603,3,603,5073,8,603,3,603,5075,8,603,1,604,1,604,3,604,5079,8,604,
1,605,1,605,3,605,5083,8,605,1,606,1,606,3,606,5087,8,606,1,607,1,607,1,
607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,3,607,5101,8,607,
1,607,1,607,3,607,5105,8,607,1,607,3,607,5108,8,607,1,608,1,608,1,608,1,
608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,5123,8,608,
1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,3,609,
5136,8,609,1,610,1,610,1,610,1,610,1,610,3,610,5143,8,610,1,610,1,610,1,
611,1,611,1,611,1,611,1,611,1,611,1,611,1,611,1,611,1,611,3,611,5157,8,611,
1,611,1,611,1,611,1,611,1,611,3,611,5164,8,611,1,612,1,612,1,613,1,613,1,
614,1,614,1,615,1,615,1,615,1,615,1,615,1,615,1,615,1,616,1,616,1,617,1,
617,1,617,3,617,5184,8,617,1,617,1,617,1,618,1,618,1,618,5,618,5191,8,618,
10,618,12,618,5194,9,618,1,619,1,619,3,619,5198,8,619,1,619,1,619,1,620,
1,620,1,620,1,621,1,621,3,621,5207,8,621,1,622,1,622,3,622,5211,8,622,1,
623,1,623,3,623,5215,8,623,1,624,1,624,1,624,1,624,1,624,1,624,3,624,5223,
8,624,1,625,1,625,3,625,5227,8,625,1,626,1,626,5,626,5231,8,626,10,626,12,
626,5234,9,626,1,627,4,627,5237,8,627,11,627,12,627,5238,1,628,1,628,1,628,
1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,
1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,
1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,3,628,5278,8,
628,1,629,1,629,3,629,5282,8,629,1,630,1,630,4,630,5286,8,630,11,630,12,
630,5287,1,631,1,631,3,631,5292,8,631,1,632,1,632,5,632,5296,8,632,10,632,
12,632,5299,9,632,1,632,1,632,1,633,1,633,1,633,1,633,1,634,1,634,1,635,
1,635,1,635,0,19,382,504,594,596,624,626,884,886,896,898,946,950,978,1000,
1002,1024,1040,1042,1198,636,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,
266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,
374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,
446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,
482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,
518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,
554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,
590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,
626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,
662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,
698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,
734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,
770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,
806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,
842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,
878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,
914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,
950,952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,
986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,
1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,
1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,
1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,
1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,
1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,
1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,
1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,
1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,
1258,1260,1262,1264,1266,1268,1270,0,36,1,0,130,131,1,0,107,108,2,0,21,21,
389,389,2,0,18,18,393,393,2,0,148,148,298,298,1,0,184,185,2,0,62,62,395,
395,2,0,35,35,395,395,2,0,214,214,225,225,2,0,263,263,293,294,6,0,12,12,
23,24,35,35,52,52,63,63,73,73,2,0,158,158,285,285,7,0,258,258,280,280,295,
296,316,316,323,323,328,328,439,440,1,0,195,196,1,0,441,442,2,0,314,314,
343,343,2,0,264,264,287,287,2,0,334,334,373,373,3,0,331,332,352,353,371,
372,3,0,252,253,351,351,354,354,1,0,403,404,2,0,319,319,415,415,3,0,247,
247,299,299,448,449,1,0,218,221,6,0,6,6,16,16,41,41,43,43,76,76,451,451,
1,0,11,12,1,0,116,117,1,0,430,431,1,0,432,435,1,0,126,127,1,0,340,341,3,
0,114,116,118,118,301,302,2,0,120,121,124,125,2,0,13,13,34,34,1,0,120,121,
1,0,124,125,5426,0,1280,1,0,0,0,2,1284,1,0,0,0,4,1293,1,0,0,0,6,1314,1,0,
0,0,8,1328,1,0,0,0,10,1332,1,0,0,0,12,1343,1,0,0,0,14,1345,1,0,0,0,16,1360,
1,0,0,0,18,1362,1,0,0,0,20,1364,1,0,0,0,22,1374,1,0,0,0,24,1377,1,0,0,0,
26,1379,1,0,0,0,28,1382,1,0,0,0,30,1385,1,0,0,0,32,1391,1,0,0,0,34,1394,
1,0,0,0,36,1399,1,0,0,0,38,1407,1,0,0,0,40,1412,1,0,0,0,42,1416,1,0,0,0,
44,1421,1,0,0,0,46,1423,1,0,0,0,48,1433,1,0,0,0,50,1435,1,0,0,0,52,1437,
1,0,0,0,54,1439,1,0,0,0,56,1441,1,0,0,0,58,1443,1,0,0,0,60,1451,1,0,0,0,
62,1453,1,0,0,0,64,1457,1,0,0,0,66,1459,1,0,0,0,68,1463,1,0,0,0,70,1465,
1,0,0,0,72,1469,1,0,0,0,74,1471,1,0,0,0,76,1475,1,0,0,0,78,1478,1,0,0,0,
80,1486,1,0,0,0,82,1491,1,0,0,0,84,1495,1,0,0,0,86,1503,1,0,0,0,88,1512,
1,0,0,0,90,1515,1,0,0,0,92,1530,1,0,0,0,94,1532,1,0,0,0,96,1548,1,0,0,0,
98,1550,1,0,0,0,100,1563,1,0,0,0,102,1565,1,0,0,0,104,1575,1,0,0,0,106,1580,
1,0,0,0,108,1582,1,0,0,0,110,1592,1,0,0,0,112,1594,1,0,0,0,114,1602,1,0,
0,0,116,1606,1,0,0,0,118,1617,1,0,0,0,120,1622,1,0,0,0,122,1625,1,0,0,0,
124,1632,1,0,0,0,126,1640,1,0,0,0,128,1650,1,0,0,0,130,1657,1,0,0,0,132,
1660,1,0,0,0,134,1667,1,0,0,0,136,1675,1,0,0,0,138,1685,1,0,0,0,140,1692,
1,0,0,0,142,1694,1,0,0,0,144,1699,1,0,0,0,146,1706,1,0,0,0,148,1721,1,0,
0,0,150,1725,1,0,0,0,152,1730,1,0,0,0,154,1732,1,0,0,0,156,1740,1,0,0,0,
158,1747,1,0,0,0,160,1749,1,0,0,0,162,1753,1,0,0,0,164,1765,1,0,0,0,166,
1767,1,0,0,0,168,1774,1,0,0,0,170,1776,1,0,0,0,172,1780,1,0,0,0,174,1783,
1,0,0,0,176,1789,1,0,0,0,178,1794,1,0,0,0,180,1797,1,0,0,0,182,1805,1,0,
0,0,184,1809,1,0,0,0,186,1811,1,0,0,0,188,1815,1,0,0,0,190,1819,1,0,0,0,
192,1831,1,0,0,0,194,1835,1,0,0,0,196,1840,1,0,0,0,198,1847,1,0,0,0,200,
1851,1,0,0,0,202,1855,1,0,0,0,204,1859,1,0,0,0,206,1868,1,0,0,0,208,1873,
1,0,0,0,210,1876,1,0,0,0,212,1882,1,0,0,0,214,1891,1,0,0,0,216,1905,1,0,
0,0,218,1909,1,0,0,0,220,1916,1,0,0,0,222,1918,1,0,0,0,224,1920,1,0,0,0,
226,1929,1,0,0,0,228,1945,1,0,0,0,230,1948,1,0,0,0,232,1954,1,0,0,0,234,
1958,1,0,0,0,236,1960,1,0,0,0,238,1970,1,0,0,0,240,1985,1,0,0,0,242,1992,
1,0,0,0,244,1994,1,0,0,0,246,1996,1,0,0,0,248,2007,1,0,0,0,250,2014,1,0,
0,0,252,2016,1,0,0,0,254,2018,1,0,0,0,256,2023,1,0,0,0,258,2025,1,0,0,0,
260,2029,1,0,0,0,262,2033,1,0,0,0,264,2037,1,0,0,0,266,2041,1,0,0,0,268,
2045,1,0,0,0,270,2050,1,0,0,0,272,2058,1,0,0,0,274,2060,1,0,0,0,276,2064,
1,0,0,0,278,2068,1,0,0,0,280,2081,1,0,0,0,282,2092,1,0,0,0,284,2094,1,0,
0,0,286,2096,1,0,0,0,288,2103,1,0,0,0,290,2105,1,0,0,0,292,2111,1,0,0,0,
294,2117,1,0,0,0,296,2123,1,0,0,0,298,2125,1,0,0,0,300,2132,1,0,0,0,302,
2134,1,0,0,0,304,2140,1,0,0,0,306,2148,1,0,0,0,308,2151,1,0,0,0,310,2164,
1,0,0,0,312,2174,1,0,0,0,314,2183,1,0,0,0,316,2193,1,0,0,0,318,2202,1,0,
0,0,320,2212,1,0,0,0,322,2218,1,0,0,0,324,2222,1,0,0,0,326,2224,1,0,0,0,
328,2252,1,0,0,0,330,2260,1,0,0,0,332,2263,1,0,0,0,334,2277,1,0,0,0,336,
2279,1,0,0,0,338,2282,1,0,0,0,340,2285,1,0,0,0,342,2296,1,0,0,0,344,2298,
1,0,0,0,346,2301,1,0,0,0,348,2306,1,0,0,0,350,2317,1,0,0,0,352,2319,1,0,
0,0,354,2325,1,0,0,0,356,2329,1,0,0,0,358,2331,1,0,0,0,360,2348,1,0,0,0,
362,2353,1,0,0,0,364,2363,1,0,0,0,366,2365,1,0,0,0,368,2369,1,0,0,0,370,
2374,1,0,0,0,372,2381,1,0,0,0,374,2389,1,0,0,0,376,2392,1,0,0,0,378,2406,
1,0,0,0,380,2408,1,0,0,0,382,2411,1,0,0,0,384,2425,1,0,0,0,386,2439,1,0,
0,0,388,2443,1,0,0,0,390,2451,1,0,0,0,392,2457,1,0,0,0,394,2471,1,0,0,0,
396,2473,1,0,0,0,398,2476,1,0,0,0,400,2481,1,0,0,0,402,2483,1,0,0,0,404,
2486,1,0,0,0,406,2489,1,0,0,0,408,2501,1,0,0,0,410,2503,1,0,0,0,412,2508,
1,0,0,0,414,2518,1,0,0,0,416,2526,1,0,0,0,418,2529,1,0,0,0,420,2532,1,0,
0,0,422,2553,1,0,0,0,424,2555,1,0,0,0,426,2564,1,0,0,0,428,2566,1,0,0,0,
430,2570,1,0,0,0,432,2579,1,0,0,0,434,2587,1,0,0,0,436,2591,1,0,0,0,438,
2594,1,0,0,0,440,2618,1,0,0,0,442,2626,1,0,0,0,444,2630,1,0,0,0,446,2633,
1,0,0,0,448,2639,1,0,0,0,450,2641,1,0,0,0,452,2649,1,0,0,0,454,2657,1,0,
0,0,456,2659,1,0,0,0,458,2662,1,0,0,0,460,2665,1,0,0,0,462,2668,1,0,0,0,
464,2674,1,0,0,0,466,2676,1,0,0,0,468,2682,1,0,0,0,470,2694,1,0,0,0,472,
2696,1,0,0,0,474,2698,1,0,0,0,476,2701,1,0,0,0,478,2709,1,0,0,0,480,2712,
1,0,0,0,482,2720,1,0,0,0,484,2723,1,0,0,0,486,2725,1,0,0,0,488,2727,1,0,
0,0,490,2737,1,0,0,0,492,2748,1,0,0,0,494,2753,1,0,0,0,496,2756,1,0,0,0,
498,2762,1,0,0,0,500,2764,1,0,0,0,502,2774,1,0,0,0,504,2784,1,0,0,0,506,
2797,1,0,0,0,508,2799,1,0,0,0,510,2802,1,0,0,0,512,2808,1,0,0,0,514,2812,
1,0,0,0,516,2814,1,0,0,0,518,2819,1,0,0,0,520,2833,1,0,0,0,522,2837,1,0,
0,0,524,2839,1,0,0,0,526,2842,1,0,0,0,528,2846,1,0,0,0,530,2854,1,0,0,0,
532,2858,1,0,0,0,534,2860,1,0,0,0,536,2868,1,0,0,0,538,2877,1,0,0,0,540,
2879,1,0,0,0,542,2883,1,0,0,0,544,2887,1,0,0,0,546,2891,1,0,0,0,548,2896,
1,0,0,0,550,2902,1,0,0,0,552,2907,1,0,0,0,554,2911,1,0,0,0,556,2917,1,0,
0,0,558,2919,1,0,0,0,560,2923,1,0,0,0,562,2967,1,0,0,0,564,2969,1,0,0,0,
566,2972,1,0,0,0,568,2977,1,0,0,0,570,2979,1,0,0,0,572,2986,1,0,0,0,574,
2988,1,0,0,0,576,2995,1,0,0,0,578,3009,1,0,0,0,580,3011,1,0,0,0,582,3019,
1,0,0,0,584,3027,1,0,0,0,586,3035,1,0,0,0,588,3045,1,0,0,0,590,3047,1,0,
0,0,592,3055,1,0,0,0,594,3057,1,0,0,0,596,3068,1,0,0,0,598,3082,1,0,0,0,
600,3092,1,0,0,0,602,3101,1,0,0,0,604,3103,1,0,0,0,606,3107,1,0,0,0,608,
3111,1,0,0,0,610,3117,1,0,0,0,612,3122,1,0,0,0,614,3127,1,0,0,0,616,3132,
1,0,0,0,618,3140,1,0,0,0,620,3142,1,0,0,0,622,3150,1,0,0,0,624,3158,1,0,
0,0,626,3168,1,0,0,0,628,3182,1,0,0,0,630,3184,1,0,0,0,632,3187,1,0,0,0,
634,3192,1,0,0,0,636,3201,1,0,0,0,638,3203,1,0,0,0,640,3207,1,0,0,0,642,
3211,1,0,0,0,644,3216,1,0,0,0,646,3221,1,0,0,0,648,3226,1,0,0,0,650,3231,
1,0,0,0,652,3238,1,0,0,0,654,3240,1,0,0,0,656,3252,1,0,0,0,658,3254,1,0,
0,0,660,3259,1,0,0,0,662,3261,1,0,0,0,664,3267,1,0,0,0,666,3275,1,0,0,0,
668,3277,1,0,0,0,670,3280,1,0,0,0,672,3288,1,0,0,0,674,3292,1,0,0,0,676,
3305,1,0,0,0,678,3307,1,0,0,0,680,3310,1,0,0,0,682,3320,1,0,0,0,684,3322,
1,0,0,0,686,3328,1,0,0,0,688,3335,1,0,0,0,690,3337,1,0,0,0,692,3339,1,0,
0,0,694,3341,1,0,0,0,696,3344,1,0,0,0,698,3346,1,0,0,0,700,3354,1,0,0,0,
702,3362,1,0,0,0,704,3364,1,0,0,0,706,3367,1,0,0,0,708,3373,1,0,0,0,710,
3382,1,0,0,0,712,3386,1,0,0,0,714,3388,1,0,0,0,716,3396,1,0,0,0,718,3402,
1,0,0,0,720,3404,1,0,0,0,722,3412,1,0,0,0,724,3420,1,0,0,0,726,3422,1,0,
0,0,728,3430,1,0,0,0,730,3436,1,0,0,0,732,3438,1,0,0,0,734,3446,1,0,0,0,
736,3454,1,0,0,0,738,3456,1,0,0,0,740,3464,1,0,0,0,742,3470,1,0,0,0,744,
3472,1,0,0,0,746,3480,1,0,0,0,748,3482,1,0,0,0,750,3491,1,0,0,0,752,3495,
1,0,0,0,754,3501,1,0,0,0,756,3503,1,0,0,0,758,3511,1,0,0,0,760,3513,1,0,
0,0,762,3519,1,0,0,0,764,3524,1,0,0,0,766,3530,1,0,0,0,768,3532,1,0,0,0,
770,3540,1,0,0,0,772,3546,1,0,0,0,774,3551,1,0,0,0,776,3557,1,0,0,0,778,
3559,1,0,0,0,780,3567,1,0,0,0,782,3573,1,0,0,0,784,3575,1,0,0,0,786,3581,
1,0,0,0,788,3583,1,0,0,0,790,3591,1,0,0,0,792,3593,1,0,0,0,794,3610,1,0,
0,0,796,3612,1,0,0,0,798,3618,1,0,0,0,800,3624,1,0,0,0,802,3626,1,0,0,0,
804,3629,1,0,0,0,806,3634,1,0,0,0,808,3636,1,0,0,0,810,3638,1,0,0,0,812,
3640,1,0,0,0,814,3642,1,0,0,0,816,3653,1,0,0,0,818,3655,1,0,0,0,820,3658,
1,0,0,0,822,3661,1,0,0,0,824,3669,1,0,0,0,826,3672,1,0,0,0,828,3678,1,0,
0,0,830,3681,1,0,0,0,832,3690,1,0,0,0,834,3694,1,0,0,0,836,3698,1,0,0,0,
838,3702,1,0,0,0,840,3713,1,0,0,0,842,3715,1,0,0,0,844,3725,1,0,0,0,846,
3735,1,0,0,0,848,3749,1,0,0,0,850,3765,1,0,0,0,852,3769,1,0,0,0,854,3773,
1,0,0,0,856,3777,1,0,0,0,858,3782,1,0,0,0,860,3786,1,0,0,0,862,3788,1,0,
0,0,864,3790,1,0,0,0,866,3792,1,0,0,0,868,3794,1,0,0,0,870,3800,1,0,0,0,
872,3810,1,0,0,0,874,3814,1,0,0,0,876,3820,1,0,0,0,878,3822,1,0,0,0,880,
3824,1,0,0,0,882,3826,1,0,0,0,884,3828,1,0,0,0,886,3842,1,0,0,0,888,3854,
1,0,0,0,890,3858,1,0,0,0,892,3872,1,0,0,0,894,3879,1,0,0,0,896,3881,1,0,
0,0,898,3895,1,0,0,0,900,3910,1,0,0,0,902,3916,1,0,0,0,904,3923,1,0,0,0,
906,3939,1,0,0,0,908,3955,1,0,0,0,910,3960,1,0,0,0,912,3962,1,0,0,0,914,
3967,1,0,0,0,916,3972,1,0,0,0,918,3977,1,0,0,0,920,3982,1,0,0,0,922,3989,
1,0,0,0,924,3994,1,0,0,0,926,4001,1,0,0,0,928,4006,1,0,0,0,930,4011,1,0,
0,0,932,4016,1,0,0,0,934,4023,1,0,0,0,936,4028,1,0,0,0,938,4033,1,0,0,0,
940,4038,1,0,0,0,942,4043,1,0,0,0,944,4050,1,0,0,0,946,4052,1,0,0,0,948,
4065,1,0,0,0,950,4067,1,0,0,0,952,4080,1,0,0,0,954,4084,1,0,0,0,956,4090,
1,0,0,0,958,4117,1,0,0,0,960,4119,1,0,0,0,962,4147,1,0,0,0,964,4149,1,0,
0,0,966,4158,1,0,0,0,968,4162,1,0,0,0,970,4189,1,0,0,0,972,4214,1,0,0,0,
974,4216,1,0,0,0,976,4218,1,0,0,0,978,4226,1,0,0,0,980,4241,1,0,0,0,982,
4248,1,0,0,0,984,4257,1,0,0,0,986,4266,1,0,0,0,988,4275,1,0,0,0,990,4284,
1,0,0,0,992,4293,1,0,0,0,994,4297,1,0,0,0,996,4301,1,0,0,0,998,4305,1,0,
0,0,1000,4315,1,0,0,0,1002,4334,1,0,0,0,1004,4348,1,0,0,0,1006,4354,1,0,
0,0,1008,4358,1,0,0,0,1010,4360,1,0,0,0,1012,4367,1,0,0,0,1014,4369,1,0,
0,0,1016,4376,1,0,0,0,1018,4378,1,0,0,0,1020,4383,1,0,0,0,1022,4393,1,0,
0,0,1024,4395,1,0,0,0,1026,4408,1,0,0,0,1028,4412,1,0,0,0,1030,4414,1,0,
0,0,1032,4419,1,0,0,0,1034,4426,1,0,0,0,1036,4428,1,0,0,0,1038,4433,1,0,
0,0,1040,4441,1,0,0,0,1042,4463,1,0,0,0,1044,4480,1,0,0,0,1046,4482,1,0,
0,0,1048,4487,1,0,0,0,1050,4492,1,0,0,0,1052,4500,1,0,0,0,1054,4502,1,0,
0,0,1056,4507,1,0,0,0,1058,4529,1,0,0,0,1060,4531,1,0,0,0,1062,4539,1,0,
0,0,1064,4541,1,0,0,0,1066,4546,1,0,0,0,1068,4554,1,0,0,0,1070,4557,1,0,
0,0,1072,4562,1,0,0,0,1074,4573,1,0,0,0,1076,4575,1,0,0,0,1078,4583,1,0,
0,0,1080,4586,1,0,0,0,1082,4591,1,0,0,0,1084,4612,1,0,0,0,1086,4614,1,0,
0,0,1088,4627,1,0,0,0,1090,4639,1,0,0,0,1092,4644,1,0,0,0,1094,4649,1,0,
0,0,1096,4654,1,0,0,0,1098,4656,1,0,0,0,1100,4671,1,0,0,0,1102,4675,1,0,
0,0,1104,4677,1,0,0,0,1106,4687,1,0,0,0,1108,4692,1,0,0,0,1110,4699,1,0,
0,0,1112,4708,1,0,0,0,1114,4716,1,0,0,0,1116,4720,1,0,0,0,1118,4724,1,0,
0,0,1120,4728,1,0,0,0,1122,4730,1,0,0,0,1124,4739,1,0,0,0,1126,4748,1,0,
0,0,1128,4757,1,0,0,0,1130,4766,1,0,0,0,1132,4775,1,0,0,0,1134,4777,1,0,
0,0,1136,4841,1,0,0,0,1138,4844,1,0,0,0,1140,4850,1,0,0,0,1142,4860,1,0,
0,0,1144,4862,1,0,0,0,1146,4868,1,0,0,0,1148,4870,1,0,0,0,1150,4880,1,0,
0,0,1152,4890,1,0,0,0,1154,4900,1,0,0,0,1156,4911,1,0,0,0,1158,4915,1,0,
0,0,1160,4922,1,0,0,0,1162,4924,1,0,0,0,1164,4927,1,0,0,0,1166,4930,1,0,
0,0,1168,4933,1,0,0,0,1170,4935,1,0,0,0,1172,4937,1,0,0,0,1174,4942,1,0,
0,0,1176,4945,1,0,0,0,1178,4959,1,0,0,0,1180,4971,1,0,0,0,1182,4984,1,0,
0,0,1184,4990,1,0,0,0,1186,4992,1,0,0,0,1188,4994,1,0,0,0,1190,4996,1,0,
0,0,1192,4998,1,0,0,0,1194,5000,1,0,0,0,1196,5002,1,0,0,0,1198,5013,1,0,
0,0,1200,5030,1,0,0,0,1202,5039,1,0,0,0,1204,5041,1,0,0,0,1206,5074,1,0,
0,0,1208,5078,1,0,0,0,1210,5082,1,0,0,0,1212,5086,1,0,0,0,1214,5107,1,0,
0,0,1216,5122,1,0,0,0,1218,5135,1,0,0,0,1220,5137,1,0,0,0,1222,5163,1,0,
0,0,1224,5165,1,0,0,0,1226,5167,1,0,0,0,1228,5169,1,0,0,0,1230,5171,1,0,
0,0,1232,5178,1,0,0,0,1234,5180,1,0,0,0,1236,5187,1,0,0,0,1238,5195,1,0,
0,0,1240,5201,1,0,0,0,1242,5206,1,0,0,0,1244,5210,1,0,0,0,1246,5214,1,0,
0,0,1248,5222,1,0,0,0,1250,5226,1,0,0,0,1252,5228,1,0,0,0,1254,5236,1,0,
0,0,1256,5277,1,0,0,0,1258,5281,1,0,0,0,1260,5285,1,0,0,0,1262,5291,1,0,
0,0,1264,5293,1,0,0,0,1266,5302,1,0,0,0,1268,5306,1,0,0,0,1270,5308,1,0,
0,0,1272,1276,5,27,0,0,1273,1275,3,2,1,0,1274,1273,1,0,0,0,1275,1278,1,0,
0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1276,1,0,
0,0,1279,1281,5,28,0,0,1280,1272,1,0,0,0,1280,1281,1,0,0,0,1281,1282,1,0,
0,0,1282,1283,3,4,2,0,1283,1,1,0,0,0,1284,1289,3,120,60,0,1285,1286,5,19,
0,0,1286,1288,3,120,60,0,1287,1285,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,
0,0,0,1289,1290,1,0,0,0,1290,3,1,0,0,0,1291,1289,1,0,0,0,1292,1294,3,14,
7,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1295,1,0,0,0,1295,1296,3,6,
3,0,1296,5,1,0,0,0,1297,1315,3,8,4,0,1298,1300,3,8,4,0,1299,1298,1,0,0,0,
1299,1300,1,0,0,0,1300,1307,1,0,0,0,1301,1303,3,12,6,0,1302,1304,3,8,4,0,
1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1306,1,0,0,0,1305,1301,1,0,0,0,
1306,1309,1,0,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,1311,1,0,0,0,
1309,1307,1,0,0,0,1310,1312,3,40,20,0,1311,1310,1,0,0,0,1311,1312,1,0,0,
0,1312,1315,1,0,0,0,1313,1315,3,40,20,0,1314,1297,1,0,0,0,1314,1299,1,0,
0,0,1314,1313,1,0,0,0,1315,7,1,0,0,0,1316,1320,3,38,19,0,1317,1319,3,10,
5,0,1318,1317,1,0,0,0,1319,1322,1,0,0,0,1320,1318,1,0,0,0,1320,1321,1,0,
0,0,1321,1329,1,0,0,0,1322,1320,1,0,0,0,1323,1325,3,10,5,0,1324,1323,1,0,
0,0,1325,1326,1,0,0,0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,1329,1,0,
0,0,1328,1316,1,0,0,0,1328,1324,1,0,0,0,1329,9,1,0,0,0,1330,1333,3,20,10,
0,1331,1333,3,36,18,0,1332,1330,1,0,0,0,1332,1331,1,0,0,0,1333,11,1,0,0,
0,1334,1335,3,42,21,0,1335,1337,3,60,30,0,1336,1338,3,44,22,0,1337,1336,
1,0,0,0,1337,1338,1,0,0,0,1338,1344,1,0,0,0,1339,1340,3,60,30,0,1340,1341,
3,44,22,0,1341,1344,1,0,0,0,1342,1344,3,44,22,0,1343,1334,1,0,0,0,1343,1339,
1,0,0,0,1343,1342,1,0,0,0,1344,13,1,0,0,0,1345,1350,3,16,8,0,1346,1347,5,
19,0,0,1347,1349,3,16,8,0,1348,1346,1,0,0,0,1349,1352,1,0,0,0,1350,1348,
1,0,0,0,1350,1351,1,0,0,0,1351,15,1,0,0,0,1352,1350,1,0,0,0,1353,1361,5,
156,0,0,1354,1361,5,157,0,0,1355,1358,3,18,9,0,1356,1357,5,21,0,0,1357,1359,
3,1110,555,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,0,0,0,1360,
1353,1,0,0,0,1360,1354,1,0,0,0,1360,1355,1,0,0,0,1361,17,1,0,0,0,1362,1363,
3,1242,621,0,1363,19,1,0,0,0,1364,1365,5,95,0,0,1365,1370,5,25,0,0,1366,
1371,3,22,11,0,1367,1371,3,24,12,0,1368,1371,3,26,13,0,1369,1371,3,30,15,
0,1370,1366,1,0,0,0,1370,1367,1,0,0,0,1370,1368,1,0,0,0,1370,1369,1,0,0,
0,1371,1372,1,0,0,0,1372,1373,5,26,0,0,1373,21,1,0,0,0,1374,1375,5,96,0,
0,1375,1376,3,708,354,0,1376,23,1,0,0,0,1377,1378,3,714,357,0,1378,25,1,
0,0,0,1379,1380,5,97,0,0,1380,1381,3,28,14,0,1381,27,1,0,0,0,1382,1383,3,
944,472,0,1383,29,1,0,0,0,1384,1386,3,32,16,0,1385,1384,1,0,0,0,1385,1386,
1,0,0,0,1386,1387,1,0,0,0,1387,1389,3,34,17,0,1388,1390,5,103,0,0,1389,1388,
1,0,0,0,1389,1390,1,0,0,0,1390,31,1,0,0,0,1391,1392,7,0,0,0,1392,33,1,0,
0,0,1393,1395,5,98,0,0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,1396,1,0,
0,0,1396,1397,3,120,60,0,1397,35,1,0,0,0,1398,1400,5,93,0,0,1399,1398,1,
0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1402,5,99,0,0,1402,1404,3,
1242,621,0,1403,1405,5,102,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,
37,1,0,0,0,1406,1408,5,93,0,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1409,
1,0,0,0,1409,1410,5,104,0,0,1410,39,1,0,0,0,1411,1413,5,93,0,0,1412,1411,
1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1415,5,322,0,0,1415,41,
1,0,0,0,1416,1417,5,105,0,0,1417,1418,3,46,23,0,1418,43,1,0,0,0,1419,1422,
3,56,28,0,1420,1422,3,54,27,0,1421,1419,1,0,0,0,1421,1420,1,0,0,0,1422,45,
1,0,0,0,1423,1428,3,48,24,0,1424,1425,5,19,0,0,1425,1427,3,48,24,0,1426,
1424,1,0,0,0,1427,1430,1,0,0,0,1428,1426,1,0,0,0,1428,1429,1,0,0,0,1429,
47,1,0,0,0,1430,1428,1,0,0,0,1431,1434,3,50,25,0,1432,1434,3,52,26,0,1433,
1431,1,0,0,0,1433,1432,1,0,0,0,1434,49,1,0,0,0,1435,1436,7,1,0,0,1436,51,
1,0,0,0,1437,1438,1,0,0,0,1438,53,1,0,0,0,1439,1440,5,109,0,0,1440,55,1,
0,0,0,1441,1442,5,110,0,0,1442,57,1,0,0,0,1443,1444,5,25,0,0,1444,1445,3,
60,30,0,1445,1446,5,26,0,0,1446,59,1,0,0,0,1447,1452,3,64,32,0,1448,1452,
3,68,34,0,1449,1452,3,72,36,0,1450,1452,3,76,38,0,1451,1447,1,0,0,0,1451,
1448,1,0,0,0,1451,1449,1,0,0,0,1451,1450,1,0,0,0,1452,61,1,0,0,0,1453,1454,
5,25,0,0,1454,1455,3,64,32,0,1455,1456,5,26,0,0,1456,63,1,0,0,0,1457,1458,
3,78,39,0,1458,65,1,0,0,0,1459,1460,5,25,0,0,1460,1461,3,68,34,0,1461,1462,
5,26,0,0,1462,67,1,0,0,0,1463,1464,3,78,39,0,1464,69,1,0,0,0,1465,1466,5,
25,0,0,1466,1467,3,72,36,0,1467,1468,5,26,0,0,1468,71,1,0,0,0,1469,1470,
3,78,39,0,1470,73,1,0,0,0,1471,1472,5,25,0,0,1472,1473,3,76,38,0,1473,1474,
5,26,0,0,1474,75,1,0,0,0,1475,1476,3,78,39,0,1476,77,1,0,0,0,1477,1479,3,
80,40,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,0,1480,1482,
3,82,41,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,1484,
3,84,42,0,1484,79,1,0,0,0,1485,1487,3,88,44,0,1486,1485,1,0,0,0,1487,1488,
1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,81,1,0,0,0,1490,1492,3,
118,59,0,1491,1490,1,0,0,0,1492,1493,1,0,0,0,1493,1491,1,0,0,0,1493,1494,
1,0,0,0,1494,83,1,0,0,0,1495,1501,3,180,90,0,1496,1498,3,86,43,0,1497,1496,
1,0,0,0,1498,1499,1,0,0,0,1499,1497,1,0,0,0,1499,1500,1,0,0,0,1500,1502,
1,0,0,0,1501,1497,1,0,0,0,1501,1502,1,0,0,0,1502,85,1,0,0,0,1503,1505,5,
144,0,0,1504,1506,3,668,334,0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,
1,0,0,0,1507,1508,3,180,90,0,1508,87,1,0,0,0,1509,1513,3,90,45,0,1510,1513,
3,94,47,0,1511,1513,3,98,49,0,1512,1509,1,0,0,0,1512,1510,1,0,0,0,1512,1511,
1,0,0,0,1513,89,1,0,0,0,1514,1516,5,132,0,0,1515,1514,1,0,0,0,1515,1516,
1,0,0,0,1516,1517,1,0,0,0,1517,1518,5,133,0,0,1518,1519,3,1242,621,0,1519,
1520,3,464,232,0,1520,1521,3,92,46,0,1521,91,1,0,0,0,1522,1523,5,399,0,0,
1523,1531,3,750,375,0,1524,1526,5,389,0,0,1525,1524,1,0,0,0,1525,1526,1,
0,0,0,1526,1527,1,0,0,0,1527,1531,3,58,29,0,1528,1529,5,17,0,0,1529,1531,
3,752,376,0,1530,1522,1,0,0,0,1530,1525,1,0,0,0,1530,1528,1,0,0,0,1531,93,
1,0,0,0,1532,1533,5,134,0,0,1533,1534,3,1242,621,0,1534,1535,3,464,232,0,
1535,1536,3,96,48,0,1536,95,1,0,0,0,1537,1540,5,399,0,0,1538,1541,3,762,
381,0,1539,1541,3,770,385,0,1540,1538,1,0,0,0,1540,1539,1,0,0,0,1541,1549,
1,0,0,0,1542,1544,5,389,0,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,1545,
1,0,0,0,1545,1549,3,70,35,0,1546,1547,5,17,0,0,1547,1549,3,764,382,0,1548,
1537,1,0,0,0,1548,1543,1,0,0,0,1548,1546,1,0,0,0,1549,97,1,0,0,0,1550,1551,
5,143,0,0,1551,1552,3,1252,626,0,1552,1553,3,464,232,0,1553,1554,3,100,50,
0,1554,99,1,0,0,0,1555,1558,7,2,0,0,1556,1559,3,772,386,0,1557,1559,3,780,
390,0,1558,1556,1,0,0,0,1558,1557,1,0,0,0,1559,1564,1,0,0,0,1560,1564,3,
74,37,0,1561,1562,5,17,0,0,1562,1564,3,774,387,0,1563,1555,1,0,0,0,1563,
1560,1,0,0,0,1563,1561,1,0,0,0,1564,101,1,0,0,0,1565,1570,3,104,52,0,1566,
1567,5,19,0,0,1567,1569,3,104,52,0,1568,1566,1,0,0,0,1569,1572,1,0,0,0,1570,
1568,1,0,0,0,1570,1571,1,0,0,0,1571,103,1,0,0,0,1572,1570,1,0,0,0,1573,1576,
3,106,53,0,1574,1576,3,1252,626,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,
105,1,0,0,0,1577,1581,3,122,61,0,1578,1581,3,132,66,0,1579,1581,3,142,71,
0,1580,1577,1,0,0,0,1580,1578,1,0,0,0,1580,1579,1,0,0,0,1581,107,1,0,0,0,
1582,1587,3,110,55,0,1583,1584,5,19,0,0,1584,1586,3,110,55,0,1585,1583,1,
0,0,0,1586,1589,1,0,0,0,1587,1585,1,0,0,0,1587,1588,1,0,0,0,1588,109,1,0,
0,0,1589,1587,1,0,0,0,1590,1593,3,114,57,0,1591,1593,3,118,59,0,1592,1590,
1,0,0,0,1592,1591,1,0,0,0,1593,111,1,0,0,0,1594,1599,3,114,57,0,1595,1596,
5,19,0,0,1596,1598,3,114,57,0,1597,1595,1,0,0,0,1598,1601,1,0,0,0,1599,1597,
1,0,0,0,1599,1600,1,0,0,0,1600,113,1,0,0,0,1601,1599,1,0,0,0,1602,1603,3,
1252,626,0,1603,1604,5,21,0,0,1604,1605,3,868,434,0,1605,115,1,0,0,0,1606,
1611,3,118,59,0,1607,1608,5,19,0,0,1608,1610,3,118,59,0,1609,1607,1,0,0,
0,1610,1613,1,0,0,0,1611,1609,1,0,0,0,1611,1612,1,0,0,0,1612,117,1,0,0,0,
1613,1611,1,0,0,0,1614,1618,3,124,62,0,1615,1618,3,134,67,0,1616,1618,3,
144,72,0,1617,1614,1,0,0,0,1617,1615,1,0,0,0,1617,1616,1,0,0,0,1618,119,
1,0,0,0,1619,1623,3,126,63,0,1620,1623,3,136,68,0,1621,1623,3,146,73,0,1622,
1619,1,0,0,0,1622,1620,1,0,0,0,1622,1621,1,0,0,0,1623,121,1,0,0,0,1624,1626,
5,139,0,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,1626,1627,1,0,0,0,1627,1628,
5,135,0,0,1628,1629,3,128,64,0,1629,1630,3,164,82,0,1630,123,1,0,0,0,1631,
1633,5,139,0,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,
1635,5,135,0,0,1635,1636,3,128,64,0,1636,1637,3,164,82,0,1637,1638,3,130,
65,0,1638,125,1,0,0,0,1639,1641,5,139,0,0,1640,1639,1,0,0,0,1640,1641,1,
0,0,0,1641,1642,1,0,0,0,1642,1643,5,135,0,0,1643,1645,3,1240,620,0,1644,
1646,5,103,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,
1648,3,164,82,0,1648,1649,3,130,65,0,1649,127,1,0,0,0,1650,1651,3,1252,626,
0,1651,129,1,0,0,0,1652,1653,7,2,0,0,1653,1658,3,152,76,0,1654,1658,3,220,
110,0,1655,1656,5,17,0,0,1656,1658,3,716,358,0,1657,1652,1,0,0,0,1657,1654,
1,0,0,0,1657,1655,1,0,0,0,1658,131,1,0,0,0,1659,1661,5,206,0,0,1660,1659,
1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1663,5,136,0,0,1663,1664,
3,138,69,0,1664,1665,3,168,84,0,1665,133,1,0,0,0,1666,1668,5,206,0,0,1667,
1666,1,0,0,0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,1670,5,136,0,0,1670,
1671,3,138,69,0,1671,1672,3,168,84,0,1672,1673,3,140,70,0,1673,135,1,0,0,
0,1674,1676,5,206,0,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,
0,0,1677,1678,5,136,0,0,1678,1680,3,1242,621,0,1679,1681,5,103,0,0,1680,
1679,1,0,0,0,1680,1681,1,0,0,0,1681,1682,1,0,0,0,1682,1683,3,168,84,0,1683,
1684,3,140,70,0,1684,137,1,0,0,0,1685,1686,3,1252,626,0,1686,139,1,0,0,0,
1687,1688,7,2,0,0,1688,1693,3,736,368,0,1689,1693,3,70,35,0,1690,1691,5,
17,0,0,1691,1693,3,740,370,0,1692,1687,1,0,0,0,1692,1689,1,0,0,0,1692,1690,
1,0,0,0,1693,141,1,0,0,0,1694,1695,5,199,0,0,1695,1697,3,1252,626,0,1696,
1698,3,1200,600,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,143,1,0,0,0,1699,
1700,5,199,0,0,1700,1702,3,1252,626,0,1701,1703,3,1200,600,0,1702,1701,1,
0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,1705,3,148,74,0,1705,145,
1,0,0,0,1706,1707,5,199,0,0,1707,1709,3,1242,621,0,1708,1710,5,103,0,0,1709,
1708,1,0,0,0,1709,1710,1,0,0,0,1710,1712,1,0,0,0,1711,1713,3,1200,600,0,
1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,3,148,74,
0,1715,147,1,0,0,0,1716,1717,7,2,0,0,1717,1722,3,868,434,0,1718,1722,3,74,
37,0,1719,1720,5,17,0,0,1720,1722,3,782,391,0,1721,1716,1,0,0,0,1721,1718,
1,0,0,0,1721,1719,1,0,0,0,1722,149,1,0,0,0,1723,1726,3,152,76,0,1724,1726,
3,736,368,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,1726,151,1,0,0,0,1727,1731,
3,154,77,0,1728,1731,3,218,109,0,1729,1731,3,712,356,0,1730,1727,1,0,0,0,
1730,1728,1,0,0,0,1730,1729,1,0,0,0,1731,153,1,0,0,0,1732,1733,5,327,0,0,
1733,1734,5,393,0,0,1734,1735,3,152,76,0,1735,155,1,0,0,0,1736,1741,3,160,
80,0,1737,1741,3,162,81,0,1738,1741,3,230,115,0,1739,1741,3,724,362,0,1740,
1736,1,0,0,0,1740,1737,1,0,0,0,1740,1738,1,0,0,0,1740,1739,1,0,0,0,1741,
157,1,0,0,0,1742,1743,5,399,0,0,1743,1748,3,156,78,0,1744,1748,3,166,83,
0,1745,1746,5,389,0,0,1746,1748,3,232,116,0,1747,1742,1,0,0,0,1747,1744,
1,0,0,0,1747,1745,1,0,0,0,1748,159,1,0,0,0,1749,1750,5,327,0,0,1750,1751,
5,393,0,0,1751,1752,3,724,362,0,1752,161,1,0,0,0,1753,1754,5,139,0,0,1754,
1755,5,135,0,0,1755,1756,5,140,0,0,1756,1757,3,166,83,0,1757,163,1,0,0,0,
1758,1759,3,170,85,0,1759,1760,3,156,78,0,1760,1766,1,0,0,0,1761,1766,3,
166,83,0,1762,1763,3,170,85,0,1763,1764,3,232,116,0,1764,1766,1,0,0,0,1765,
1758,1,0,0,0,1765,1761,1,0,0,0,1765,1762,1,0,0,0,1766,165,1,0,0,0,1767,1768,
5,304,0,0,1768,1769,3,152,76,0,1769,167,1,0,0,0,1770,1771,3,170,85,0,1771,
1772,3,172,86,0,1772,1775,1,0,0,0,1773,1775,3,178,89,0,1774,1770,1,0,0,0,
1774,1773,1,0,0,0,1775,169,1,0,0,0,1776,1777,7,3,0,0,1777,171,1,0,0,0,1778,
1781,3,174,87,0,1779,1781,3,176,88,0,1780,1778,1,0,0,0,1780,1779,1,0,0,0,
1781,173,1,0,0,0,1782,1784,5,206,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,
1784,1785,1,0,0,0,1785,1786,5,136,0,0,1786,1787,3,1234,617,0,1787,175,1,
0,0,0,1788,1790,5,206,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,
1,0,0,0,1791,1792,5,136,0,0,1792,1793,3,178,89,0,1793,177,1,0,0,0,1794,1795,
5,304,0,0,1795,1796,3,736,368,0,1796,179,1,0,0,0,1797,1801,3,462,231,0,1798,
1802,3,208,104,0,1799,1802,3,182,91,0,1800,1802,3,184,92,0,1801,1798,1,0,
0,0,1801,1799,1,0,0,0,1801,1800,1,0,0,0,1802,181,1,0,0,0,1803,1806,3,332,
166,0,1804,1806,3,324,162,0,1805,1803,1,0,0,0,1805,1804,1,0,0,0,1806,183,
1,0,0,0,1807,1810,3,382,191,0,1808,1810,3,376,188,0,1809,1807,1,0,0,0,1809,
1808,1,0,0,0,1810,185,1,0,0,0,1811,1812,3,188,94,0,1812,1813,5,318,0,0,1813,
1814,3,660,330,0,1814,187,1,0,0,0,1815,1816,7,4,0,0,1816,189,1,0,0,0,1817,
1820,3,192,96,0,1818,1820,3,322,161,0,1819,1817,1,0,0,0,1819,1818,1,0,0,
0,1820,191,1,0,0,0,1821,1832,3,214,107,0,1822,1832,3,226,113,0,1823,1832,
3,310,155,0,1824,1832,3,314,157,0,1825,1832,3,318,159,0,1826,1832,3,224,
112,0,1827,1832,3,308,154,0,1828,1832,3,312,156,0,1829,1832,3,316,158,0,
1830,1832,3,320,160,0,1831,1821,1,0,0,0,1831,1822,1,0,0,0,1831,1823,1,0,
0,0,1831,1824,1,0,0,0,1831,1825,1,0,0,0,1831,1826,1,0,0,0,1831,1827,1,0,
0,0,1831,1828,1,0,0,0,1831,1829,1,0,0,0,1831,1830,1,0,0,0,1832,193,1,0,0,
0,1833,1836,3,200,100,0,1834,1836,3,196,98,0,1835,1833,1,0,0,0,1835,1834,
1,0,0,0,1836,195,1,0,0,0,1837,1841,3,198,99,0,1838,1841,3,340,170,0,1839,
1841,3,186,93,0,1840,1837,1,0,0,0,1840,1838,1,0,0,0,1840,1839,1,0,0,0,1841,
197,1,0,0,0,1842,1848,3,342,171,0,1843,1848,3,344,172,0,1844,1848,3,346,
173,0,1845,1848,3,360,180,0,1846,1848,3,370,185,0,1847,1842,1,0,0,0,1847,
1843,1,0,0,0,1847,1844,1,0,0,0,1847,1845,1,0,0,0,1847,1846,1,0,0,0,1848,
199,1,0,0,0,1849,1852,3,204,102,0,1850,1852,3,202,101,0,1851,1849,1,0,0,
0,1851,1850,1,0,0,0,1852,201,1,0,0,0,1853,1856,3,398,199,0,1854,1856,3,400,
200,0,1855,1853,1,0,0,0,1855,1854,1,0,0,0,1856,203,1,0,0,0,1857,1860,3,206,
103,0,1858,1860,3,424,212,0,1859,1857,1,0,0,0,1859,1858,1,0,0,0,1860,205,
1,0,0,0,1861,1869,3,404,202,0,1862,1869,3,402,201,0,1863,1869,3,408,204,
0,1864,1869,3,412,206,0,1865,1869,3,410,205,0,1866,1869,3,406,203,0,1867,
1869,3,422,211,0,1868,1861,1,0,0,0,1868,1862,1,0,0,0,1868,1863,1,0,0,0,1868,
1864,1,0,0,0,1868,1865,1,0,0,0,1868,1866,1,0,0,0,1868,1867,1,0,0,0,1869,
207,1,0,0,0,1870,1872,3,190,95,0,1871,1870,1,0,0,0,1872,1875,1,0,0,0,1873,
1871,1,0,0,0,1873,1874,1,0,0,0,1874,209,1,0,0,0,1875,1873,1,0,0,0,1876,1877,
5,338,0,0,1877,1878,5,96,0,0,1878,1880,3,710,355,0,1879,1881,5,103,0,0,1880,
1879,1,0,0,0,1880,1881,1,0,0,0,1881,211,1,0,0,0,1882,1883,5,348,0,0,1883,
1884,5,96,0,0,1884,1886,3,710,355,0,1885,1887,5,102,0,0,1886,1885,1,0,0,
0,1886,1887,1,0,0,0,1887,213,1,0,0,0,1888,1892,5,338,0,0,1889,1890,5,394,
0,0,1890,1892,5,138,0,0,1891,1888,1,0,0,0,1891,1889,1,0,0,0,1892,1894,1,
0,0,0,1893,1895,5,139,0,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,
1,0,0,0,1896,1897,5,135,0,0,1897,1899,3,718,359,0,1898,1900,5,103,0,0,1899,
1898,1,0,0,0,1899,1900,1,0,0,0,1900,1903,1,0,0,0,1901,1904,3,164,82,0,1902,
1904,3,216,108,0,1903,1901,1,0,0,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,
215,1,0,0,0,1905,1906,5,389,0,0,1906,1907,3,154,77,0,1907,217,1,0,0,0,1908,
1910,5,139,0,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,
1914,5,135,0,0,1912,1915,3,220,110,0,1913,1915,3,222,111,0,1914,1912,1,0,
0,0,1914,1913,1,0,0,0,1915,219,1,0,0,0,1916,1917,3,70,35,0,1917,221,1,0,
0,0,1918,1919,3,66,33,0,1919,223,1,0,0,0,1920,1921,5,348,0,0,1921,1922,5,
135,0,0,1922,1924,3,718,359,0,1923,1925,5,102,0,0,1924,1923,1,0,0,0,1924,
1925,1,0,0,0,1925,225,1,0,0,0,1926,1930,5,338,0,0,1927,1928,5,394,0,0,1928,
1930,5,138,0,0,1929,1926,1,0,0,0,1929,1927,1,0,0,0,1930,1932,1,0,0,0,1931,
1933,5,139,0,0,1932,1931,1,0,0,0,1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,
1935,5,135,0,0,1935,1936,5,140,0,0,1936,1938,3,730,365,0,1937,1939,5,103,
0,0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1941,3,228,
114,0,1941,227,1,0,0,0,1942,1946,3,158,79,0,1943,1944,5,17,0,0,1944,1946,
3,728,364,0,1945,1942,1,0,0,0,1945,1943,1,0,0,0,1946,229,1,0,0,0,1947,1949,
5,139,0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,1951,
5,135,0,0,1951,1952,5,140,0,0,1952,1953,3,232,116,0,1953,231,1,0,0,0,1954,
1955,5,25,0,0,1955,1956,3,234,117,0,1956,1957,5,26,0,0,1957,233,1,0,0,0,
1958,1959,3,236,118,0,1959,235,1,0,0,0,1960,1965,3,238,119,0,1961,1962,5,
19,0,0,1962,1964,3,238,119,0,1963,1961,1,0,0,0,1964,1967,1,0,0,0,1965,1963,
1,0,0,0,1965,1966,1,0,0,0,1966,237,1,0,0,0,1967,1965,1,0,0,0,1968,1971,3,
240,120,0,1969,1971,3,248,124,0,1970,1968,1,0,0,0,1970,1969,1,0,0,0,1971,
239,1,0,0,0,1972,1974,5,29,0,0,1973,1975,3,1242,621,0,1974,1973,1,0,0,0,
1974,1975,1,0,0,0,1975,1977,1,0,0,0,1976,1978,3,242,121,0,1977,1976,1,0,
0,0,1977,1978,1,0,0,0,1978,1979,1,0,0,0,1979,1986,5,30,0,0,1980,1981,3,1270,
635,0,1981,1982,5,140,0,0,1982,1983,3,1242,621,0,1983,1984,3,242,121,0,1984,
1986,1,0,0,0,1985,1972,1,0,0,0,1985,1980,1,0,0,0,1986,241,1,0,0,0,1987,1993,
3,244,122,0,1988,1993,3,246,123,0,1989,1990,3,244,122,0,1990,1991,3,246,
123,0,1991,1993,1,0,0,0,1992,1987,1,0,0,0,1992,1988,1,0,0,0,1992,1989,1,
0,0,0,1993,243,1,0,0,0,1994,1995,3,300,150,0,1995,245,1,0,0,0,1996,1997,
3,302,151,0,1997,247,1,0,0,0,1998,2008,3,256,128,0,1999,2008,3,272,136,0,
2000,2001,3,284,142,0,2001,2002,3,1268,634,0,2002,2003,5,140,0,0,2003,2004,
3,1242,621,0,2004,2005,3,250,125,0,2005,2006,3,286,143,0,2006,2008,1,0,0,
0,2007,1998,1,0,0,0,2007,1999,1,0,0,0,2007,2000,1,0,0,0,2008,249,1,0,0,0,
2009,2015,3,252,126,0,2010,2015,3,254,127,0,2011,2012,3,252,126,0,2012,2013,
3,254,127,0,2013,2015,1,0,0,0,2014,2009,1,0,0,0,2014,2010,1,0,0,0,2014,2011,
1,0,0,0,2015,251,1,0,0,0,2016,2017,3,300,150,0,2017,253,1,0,0,0,2018,2019,
3,302,151,0,2019,255,1,0,0,0,2020,2024,3,258,129,0,2021,2024,3,260,130,0,
2022,2024,3,262,131,0,2023,2020,1,0,0,0,2023,2021,1,0,0,0,2023,2022,1,0,
0,0,2024,257,1,0,0,0,2025,2026,3,280,140,0,2026,2027,3,264,132,0,2027,2028,
3,282,141,0,2028,259,1,0,0,0,2029,2030,3,282,141,0,2030,2031,3,266,133,0,
2031,2032,3,280,140,0,2032,261,1,0,0,0,2033,2034,3,280,140,0,2034,2035,3,
268,134,0,2035,2036,3,282,141,0,2036,263,1,0,0,0,2037,2038,5,51,0,0,2038,
2039,3,270,135,0,2039,2040,5,62,0,0,2040,265,1,0,0,0,2041,2042,5,51,0,0,
2042,2043,3,270,135,0,2043,2044,5,62,0,0,2044,267,1,0,0,0,2045,2046,5,72,
0,0,2046,2047,3,270,135,0,2047,2048,5,67,0,0,2048,269,1,0,0,0,2049,2051,
3,1242,621,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,2051,2053,1,0,0,0,2052,
2054,3,250,125,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,271,1,0,0,0,2055,
2059,3,274,137,0,2056,2059,3,276,138,0,2057,2059,3,278,139,0,2058,2055,1,
0,0,0,2058,2056,1,0,0,0,2058,2057,1,0,0,0,2059,273,1,0,0,0,2060,2061,3,280,
140,0,2061,2062,5,62,0,0,2062,2063,3,282,141,0,2063,275,1,0,0,0,2064,2065,
3,282,141,0,2065,2066,5,51,0,0,2066,2067,3,280,140,0,2067,277,1,0,0,0,2068,
2069,3,280,140,0,2069,2070,5,35,0,0,2070,2071,3,282,141,0,2071,279,1,0,0,
0,2072,2073,5,29,0,0,2073,2074,3,1242,621,0,2074,2075,5,30,0,0,2075,2082,
1,0,0,0,2076,2078,5,29,0,0,2077,2079,3,242,121,0,2078,2077,1,0,0,0,2078,
2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,5,30,0,0,2081,2072,1,0,0,0,2081,
2076,1,0,0,0,2082,281,1,0,0,0,2083,2084,5,29,0,0,2084,2085,3,1242,621,0,
2085,2086,5,30,0,0,2086,2093,1,0,0,0,2087,2089,5,29,0,0,2088,2090,3,242,
121,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,2091,1,0,0,0,2091,2093,5,
30,0,0,2092,2083,1,0,0,0,2092,2087,1,0,0,0,2093,283,1,0,0,0,2094,2095,7,
5,0,0,2095,285,1,0,0,0,2096,2097,5,186,0,0,2097,2098,3,288,144,0,2098,287,
1,0,0,0,2099,2104,3,290,145,0,2100,2104,3,292,146,0,2101,2104,3,294,147,
0,2102,2104,3,272,136,0,2103,2099,1,0,0,0,2103,2100,1,0,0,0,2103,2101,1,
0,0,0,2103,2102,1,0,0,0,2104,289,1,0,0,0,2105,2106,5,29,0,0,2106,2107,3,
1242,621,0,2107,2108,3,296,148,0,2108,2109,3,1242,621,0,2109,2110,5,30,0,
0,2110,291,1,0,0,0,2111,2112,5,29,0,0,2112,2113,3,1242,621,0,2113,2114,5,
51,0,0,2114,2115,3,1242,621,0,2115,2116,5,30,0,0,2116,293,1,0,0,0,2117,2118,
5,29,0,0,2118,2119,3,1242,621,0,2119,2120,3,298,149,0,2120,2121,3,1242,621,
0,2121,2122,5,30,0,0,2122,295,1,0,0,0,2123,2124,7,6,0,0,2124,297,1,0,0,0,
2125,2126,7,7,0,0,2126,299,1,0,0,0,2127,2128,5,141,0,0,2128,2133,3,1242,
621,0,2129,2130,5,142,0,0,2130,2133,3,594,297,0,2131,2133,3,520,260,0,2132,
2127,1,0,0,0,2132,2129,1,0,0,0,2132,2131,1,0,0,0,2133,301,1,0,0,0,2134,2136,
5,25,0,0,2135,2137,3,304,152,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,
2138,1,0,0,0,2138,2139,5,26,0,0,2139,303,1,0,0,0,2140,2145,3,306,153,0,2141,
2142,5,19,0,0,2142,2144,3,306,153,0,2143,2141,1,0,0,0,2144,2147,1,0,0,0,
2145,2143,1,0,0,0,2145,2146,1,0,0,0,2146,305,1,0,0,0,2147,2145,1,0,0,0,2148,
2149,3,1242,621,0,2149,2150,3,1242,621,0,2150,307,1,0,0,0,2151,2153,5,348,
0,0,2152,2154,5,139,0,0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,2155,1,
0,0,0,2155,2156,5,135,0,0,2156,2157,5,140,0,0,2157,2159,3,730,365,0,2158,
2160,5,102,0,0,2159,2158,1,0,0,0,2159,2160,1,0,0,0,2160,309,1,0,0,0,2161,
2165,5,338,0,0,2162,2163,5,394,0,0,2163,2165,5,138,0,0,2164,2161,1,0,0,0,
2164,2162,1,0,0,0,2165,2166,1,0,0,0,2166,2167,5,133,0,0,2167,2168,3,754,
377,0,2168,2170,3,464,232,0,2169,2171,5,103,0,0,2170,2169,1,0,0,0,2170,2171,
1,0,0,0,2171,2172,1,0,0,0,2172,2173,3,92,46,0,2173,311,1,0,0,0,2174,2175,
5,348,0,0,2175,2176,5,133,0,0,2176,2178,3,754,377,0,2177,2179,5,102,0,0,
2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,313,1,0,0,0,2180,2184,5,338,0,0,
2181,2182,5,394,0,0,2182,2184,5,138,0,0,2183,2180,1,0,0,0,2183,2181,1,0,
0,0,2184,2185,1,0,0,0,2185,2186,5,134,0,0,2186,2187,3,766,383,0,2187,2189,
3,464,232,0,2188,2190,5,103,0,0,2189,2188,1,0,0,0,2189,2190,1,0,0,0,2190,
2191,1,0,0,0,2191,2192,3,96,48,0,2192,315,1,0,0,0,2193,2194,5,348,0,0,2194,
2195,5,134,0,0,2195,2197,3,766,383,0,2196,2198,5,102,0,0,2197,2196,1,0,0,
0,2197,2198,1,0,0,0,2198,317,1,0,0,0,2199,2203,5,338,0,0,2200,2201,5,394,
0,0,2201,2203,5,138,0,0,2202,2199,1,0,0,0,2202,2200,1,0,0,0,2203,2204,1,
0,0,0,2204,2205,5,143,0,0,2205,2206,3,776,388,0,2206,2208,3,464,232,0,2207,
2209,5,103,0,0,2208,2207,1,0,0,0,2208,2209,1,0,0,0,2209,2210,1,0,0,0,2210,
2211,3,100,50,0,2211,319,1,0,0,0,2212,2213,5,348,0,0,2213,2214,5,143,0,0,
2214,2216,3,776,388,0,2215,2217,5,102,0,0,2216,2215,1,0,0,0,2216,2217,1,
0,0,0,2217,321,1,0,0,0,2218,2219,3,186,93,0,2219,323,1,0,0,0,2220,2223,3,
326,163,0,2221,2223,3,330,165,0,2222,2220,1,0,0,0,2222,2221,1,0,0,0,2223,
325,1,0,0,0,2224,2226,3,460,230,0,2225,2227,3,328,164,0,2226,2225,1,0,0,
0,2227,2228,1,0,0,0,2228,2226,1,0,0,0,2228,2229,1,0,0,0,2229,327,1,0,0,0,
2230,2236,3,396,198,0,2231,2232,3,460,230,0,2232,2233,3,396,198,0,2233,2235,
1,0,0,0,2234,2231,1,0,0,0,2235,2238,1,0,0,0,2236,2234,1,0,0,0,2236,2237,
1,0,0,0,2237,2239,1,0,0,0,2238,2236,1,0,0,0,2239,2240,3,196,98,0,2240,2246,
3,194,97,0,2241,2242,3,460,230,0,2242,2243,3,194,97,0,2243,2245,1,0,0,0,
2244,2241,1,0,0,0,2245,2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,1,0,0,0,
2247,2249,1,0,0,0,2248,2246,1,0,0,0,2249,2250,3,426,213,0,2250,2253,1,0,
0,0,2251,2253,3,66,33,0,2252,2230,1,0,0,0,2252,2251,1,0,0,0,2253,329,1,0,
0,0,2254,2255,3,396,198,0,2255,2256,3,196,98,0,2256,2257,3,194,97,0,2257,
2258,3,426,213,0,2258,2261,1,0,0,0,2259,2261,3,66,33,0,2260,2254,1,0,0,0,
2260,2259,1,0,0,0,2261,331,1,0,0,0,2262,2264,3,334,167,0,2263,2262,1,0,0,
0,2264,2265,1,0,0,0,2265,2263,1,0,0,0,2265,2266,1,0,0,0,2266,2268,1,0,0,
0,2267,2269,3,336,168,0,2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,333,1,0,
0,0,2270,2271,3,338,169,0,2271,2272,5,144,0,0,2272,2273,3,324,162,0,2273,
2278,1,0,0,0,2274,2275,3,338,169,0,2275,2276,3,66,33,0,2276,2278,1,0,0,0,
2277,2270,1,0,0,0,2277,2274,1,0,0,0,2278,335,1,0,0,0,2279,2280,5,145,0,0,
2280,2281,3,324,162,0,2281,337,1,0,0,0,2282,2283,5,146,0,0,2283,2284,3,814,
407,0,2284,339,1,0,0,0,2285,2286,5,390,0,0,2286,2287,3,66,33,0,2287,341,
1,0,0,0,2288,2289,5,147,0,0,2289,2297,3,588,294,0,2290,2291,5,148,0,0,2291,
2292,5,147,0,0,2292,2294,3,588,294,0,2293,2295,3,338,169,0,2294,2293,1,0,
0,0,2294,2295,1,0,0,0,2295,2297,1,0,0,0,2296,2288,1,0,0,0,2296,2290,1,0,
0,0,2297,343,1,0,0,0,2298,2299,5,149,0,0,2299,2300,3,588,294,0,2300,345,
1,0,0,0,2301,2302,5,94,0,0,2302,2304,3,348,174,0,2303,2305,3,338,169,0,2304,
2303,1,0,0,0,2304,2305,1,0,0,0,2305,347,1,0,0,0,2306,2311,3,350,175,0,2307,
2308,5,19,0,0,2308,2310,3,350,175,0,2309,2307,1,0,0,0,2310,2313,1,0,0,0,
2311,2309,1,0,0,0,2311,2312,1,0,0,0,2312,349,1,0,0,0,2313,2311,1,0,0,0,2314,
2318,3,352,176,0,2315,2318,3,354,177,0,2316,2318,3,356,178,0,2317,2314,1,
0,0,0,2317,2315,1,0,0,0,2317,2316,1,0,0,0,2318,351,1,0,0,0,2319,2320,3,1242,
621,0,2320,2321,5,39,0,0,2321,2322,3,1242,621,0,2322,2323,5,21,0,0,2323,
2324,3,868,434,0,2324,353,1,0,0,0,2325,2326,3,1242,621,0,2326,2327,5,21,
0,0,2327,2328,3,868,434,0,2328,355,1,0,0,0,2329,2330,3,358,179,0,2330,357,
1,0,0,0,2331,2333,5,14,0,0,2332,2334,3,1242,621,0,2333,2332,1,0,0,0,2334,
2335,1,0,0,0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,2345,1,0,0,0,2337,
2339,5,14,0,0,2338,2340,3,1242,621,0,2339,2338,1,0,0,0,2340,2341,1,0,0,0,
2341,2339,1,0,0,0,2341,2342,1,0,0,0,2342,2344,1,0,0,0,2343,2337,1,0,0,0,
2344,2347,1,0,0,0,2345,2343,1,0,0,0,2345,2346,1,0,0,0,2346,359,1,0,0,0,2347,
2345,1,0,0,0,2348,2349,5,99,0,0,2349,2351,3,362,181,0,2350,2352,3,338,169,
0,2351,2350,1,0,0,0,2351,2352,1,0,0,0,2352,361,1,0,0,0,2353,2358,3,364,182,
0,2354,2355,5,19,0,0,2355,2357,3,364,182,0,2356,2354,1,0,0,0,2357,2360,1,
0,0,0,2358,2356,1,0,0,0,2358,2359,1,0,0,0,2359,363,1,0,0,0,2360,2358,1,0,
0,0,2361,2364,3,366,183,0,2362,2364,3,368,184,0,2363,2361,1,0,0,0,2363,2362,
1,0,0,0,2364,365,1,0,0,0,2365,2366,3,1242,621,0,2366,2367,5,39,0,0,2367,
2368,3,1242,621,0,2368,367,1,0,0,0,2369,2370,3,1242,621,0,2370,2371,5,17,
0,0,2371,2372,3,358,179,0,2372,369,1,0,0,0,2373,2375,5,137,0,0,2374,2373,
1,0,0,0,2374,2375,1,0,0,0,2375,2376,1,0,0,0,2376,2377,5,342,0,0,2377,2379,
3,372,186,0,2378,2380,3,338,169,0,2379,2378,1,0,0,0,2379,2380,1,0,0,0,2380,
371,1,0,0,0,2381,2386,3,868,434,0,2382,2383,5,19,0,0,2383,2385,3,868,434,
0,2384,2382,1,0,0,0,2385,2388,1,0,0,0,2386,2384,1,0,0,0,2386,2387,1,0,0,
0,2387,373,1,0,0,0,2388,2386,1,0,0,0,2389,2390,3,382,191,0,2390,375,1,0,
0,0,2391,2393,3,378,189,0,2392,2391,1,0,0,0,2393,2394,1,0,0,0,2394,2392,
1,0,0,0,2394,2395,1,0,0,0,2395,2397,1,0,0,0,2396,2398,3,380,190,0,2397,2396,
1,0,0,0,2397,2398,1,0,0,0,2398,377,1,0,0,0,2399,2400,3,338,169,0,2400,2401,
5,144,0,0,2401,2402,3,388,194,0,2402,2407,1,0,0,0,2403,2404,3,338,169,0,
2404,2405,3,70,35,0,2405,2407,1,0,0,0,2406,2399,1,0,0,0,2406,2403,1,0,0,
0,2407,379,1,0,0,0,2408,2409,5,145,0,0,2409,2410,3,388,194,0,2410,381,1,
0,0,0,2411,2412,6,191,-1,0,2412,2413,3,388,194,0,2413,2420,1,0,0,0,2414,
2415,10,2,0,0,2415,2416,3,384,192,0,2416,2417,3,388,194,0,2417,2419,1,0,
0,0,2418,2414,1,0,0,0,2419,2422,1,0,0,0,2420,2418,1,0,0,0,2420,2421,1,0,
0,0,2421,383,1,0,0,0,2422,2420,1,0,0,0,2423,2426,3,386,193,0,2424,2426,5,
150,0,0,2425,2423,1,0,0,0,2425,2424,1,0,0,0,2426,385,1,0,0,0,2427,2429,5,
151,0,0,2428,2430,3,690,345,0,2429,2428,1,0,0,0,2429,2430,1,0,0,0,2430,2440,
1,0,0,0,2431,2433,5,152,0,0,2432,2434,3,690,345,0,2433,2432,1,0,0,0,2433,
2434,1,0,0,0,2434,2440,1,0,0,0,2435,2437,5,153,0,0,2436,2438,3,690,345,0,
2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2440,1,0,0,0,2439,2427,1,0,0,0,
2439,2431,1,0,0,0,2439,2435,1,0,0,0,2440,387,1,0,0,0,2441,2444,3,392,196,
0,2442,2444,3,390,195,0,2443,2441,1,0,0,0,2443,2442,1,0,0,0,2444,389,1,0,
0,0,2445,2446,3,396,198,0,2446,2447,3,194,97,0,2447,2448,3,194,97,0,2448,
2449,3,426,213,0,2449,2452,1,0,0,0,2450,2452,3,70,35,0,2451,2445,1,0,0,0,
2451,2450,1,0,0,0,2452,391,1,0,0,0,2453,2454,3,458,229,0,2454,2455,3,394,
197,0,2455,2458,1,0,0,0,2456,2458,3,438,219,0,2457,2453,1,0,0,0,2457,2456,
1,0,0,0,2458,393,1,0,0,0,2459,2465,3,396,198,0,2460,2461,3,458,229,0,2461,
2462,3,396,198,0,2462,2464,1,0,0,0,2463,2460,1,0,0,0,2464,2467,1,0,0,0,2465,
2463,1,0,0,0,2465,2466,1,0,0,0,2466,2468,1,0,0,0,2467,2465,1,0,0,0,2468,
2469,3,426,213,0,2469,2472,1,0,0,0,2470,2472,3,70,35,0,2471,2459,1,0,0,0,
2471,2470,1,0,0,0,2472,395,1,0,0,0,2473,2474,3,200,100,0,2474,397,1,0,0,
0,2475,2477,3,188,94,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,
0,0,2478,2479,5,297,0,0,2479,2480,3,488,244,0,2480,399,1,0,0,0,2481,2482,
3,186,93,0,2482,401,1,0,0,0,2483,2484,5,298,0,0,2484,2485,3,660,330,0,2485,
403,1,0,0,0,2486,2487,5,148,0,0,2487,2488,3,660,330,0,2488,405,1,0,0,0,2489,
2492,5,356,0,0,2490,2493,3,658,329,0,2491,2493,3,814,407,0,2492,2490,1,0,
0,0,2492,2491,1,0,0,0,2493,407,1,0,0,0,2494,2495,5,306,0,0,2495,2502,3,108,
54,0,2496,2497,3,188,94,0,2497,2498,5,306,0,0,2498,2499,3,108,54,0,2499,
2500,3,658,329,0,2500,2502,1,0,0,0,2501,2494,1,0,0,0,2501,2496,1,0,0,0,2502,
409,1,0,0,0,2503,2504,5,311,0,0,2504,2505,3,112,56,0,2505,2506,3,658,329,
0,2506,411,1,0,0,0,2507,2509,3,188,94,0,2508,2507,1,0,0,0,2508,2509,1,0,
0,0,2509,2510,1,0,0,0,2510,2511,5,363,0,0,2511,2513,3,414,207,0,2512,2514,
3,420,210,0,2513,2512,1,0,0,0,2513,2514,1,0,0,0,2514,2516,1,0,0,0,2515,2517,
3,658,329,0,2516,2515,1,0,0,0,2516,2517,1,0,0,0,2517,413,1,0,0,0,2518,2523,
3,416,208,0,2519,2520,5,313,0,0,2520,2522,3,416,208,0,2521,2519,1,0,0,0,
2522,2525,1,0,0,0,2523,2521,1,0,0,0,2523,2524,1,0,0,0,2524,415,1,0,0,0,2525,
2523,1,0,0,0,2526,2527,3,418,209,0,2527,2528,3,876,438,0,2528,417,1,0,0,
0,2529,2530,3,1242,621,0,2530,2531,5,309,0,0,2531,419,1,0,0,0,2532,2533,
5,243,0,0,2533,2535,7,8,0,0,2534,2536,3,1242,621,0,2535,2534,1,0,0,0,2535,
2536,1,0,0,0,2536,421,1,0,0,0,2537,2542,3,680,340,0,2538,2540,3,706,353,
0,2539,2541,3,704,352,0,2540,2539,1,0,0,0,2540,2541,1,0,0,0,2541,2543,1,
0,0,0,2542,2538,1,0,0,0,2542,2543,1,0,0,0,2543,2545,1,0,0,0,2544,2537,1,
0,0,0,2544,2545,1,0,0,0,2545,2554,1,0,0,0,2546,2548,3,706,353,0,2547,2549,
3,704,352,0,2548,2547,1,0,0,0,2548,2549,1,0,0,0,2549,2551,1,0,0,0,2550,2546,
1,0,0,0,2550,2551,1,0,0,0,2551,2554,1,0,0,0,2552,2554,3,704,352,0,2553,2544,
1,0,0,0,2553,2550,1,0,0,0,2553,2552,1,0,0,0,2554,423,1,0,0,0,2555,2556,3,
186,93,0,2556,425,1,0,0,0,2557,2558,3,428,214,0,2558,2559,3,422,211,0,2559,
2561,1,0,0,0,2560,2557,1,0,0,0,2560,2561,1,0,0,0,2561,2565,1,0,0,0,2562,
2565,3,456,228,0,2563,2565,5,203,0,0,2564,2560,1,0,0,0,2564,2562,1,0,0,0,
2564,2563,1,0,0,0,2565,427,1,0,0,0,2566,2567,5,42,0,0,2567,2568,3,430,215,
0,2568,429,1,0,0,0,2569,2571,3,690,345,0,2570,2569,1,0,0,0,2570,2571,1,0,
0,0,2571,2574,1,0,0,0,2572,2575,5,15,0,0,2573,2575,3,432,216,0,2574,2572,
1,0,0,0,2574,2573,1,0,0,0,2575,2577,1,0,0,0,2576,2578,3,674,337,0,2577,2576,
1,0,0,0,2577,2578,1,0,0,0,2578,431,1,0,0,0,2579,2584,3,434,217,0,2580,2581,
5,19,0,0,2581,2583,3,434,217,0,2582,2580,1,0,0,0,2583,2586,1,0,0,0,2584,
2582,1,0,0,0,2584,2585,1,0,0,0,2585,433,1,0,0,0,2586,2584,1,0,0,0,2587,2589,
3,868,434,0,2588,2590,3,436,218,0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,
435,1,0,0,0,2591,2592,5,389,0,0,2592,2593,3,1242,621,0,2593,437,1,0,0,0,
2594,2596,5,265,0,0,2595,2597,3,690,345,0,2596,2595,1,0,0,0,2596,2597,1,
0,0,0,2597,2598,1,0,0,0,2598,2599,3,440,220,0,2599,2601,3,448,224,0,2600,
2602,3,658,329,0,2601,2600,1,0,0,0,2601,2602,1,0,0,0,2602,2604,1,0,0,0,2603,
2605,3,674,337,0,2604,2603,1,0,0,0,2604,2605,1,0,0,0,2605,2607,1,0,0,0,2606,
2608,3,446,223,0,2607,2606,1,0,0,0,2607,2608,1,0,0,0,2608,2610,1,0,0,0,2609,
2611,3,680,340,0,2610,2609,1,0,0,0,2610,2611,1,0,0,0,2611,2616,1,0,0,0,2612,
2614,3,706,353,0,2613,2615,3,704,352,0,2614,2613,1,0,0,0,2614,2615,1,0,0,
0,2615,2617,1,0,0,0,2616,2612,1,0,0,0,2616,2617,1,0,0,0,2617,439,1,0,0,0,
2618,2623,3,442,221,0,2619,2620,5,19,0,0,2620,2622,3,442,221,0,2621,2619,
1,0,0,0,2622,2625,1,0,0,0,2623,2621,1,0,0,0,2623,2624,1,0,0,0,2624,441,1,
0,0,0,2625,2623,1,0,0,0,2626,2628,3,868,434,0,2627,2629,3,444,222,0,2628,
2627,1,0,0,0,2628,2629,1,0,0,0,2629,443,1,0,0,0,2630,2631,5,389,0,0,2631,
2632,3,1242,621,0,2632,445,1,0,0,0,2633,2634,5,369,0,0,2634,2635,3,814,407,
0,2635,447,1,0,0,0,2636,2637,5,364,0,0,2637,2640,3,450,225,0,2638,2640,3,
454,227,0,2639,2636,1,0,0,0,2639,2638,1,0,0,0,2640,449,1,0,0,0,2641,2646,
3,452,226,0,2642,2643,5,19,0,0,2643,2645,3,452,226,0,2644,2642,1,0,0,0,2645,
2648,1,0,0,0,2646,2644,1,0,0,0,2646,2647,1,0,0,0,2647,451,1,0,0,0,2648,2646,
1,0,0,0,2649,2650,3,152,76,0,2650,2651,3,398,199,0,2651,453,1,0,0,0,2652,
2653,5,364,0,0,2653,2658,3,70,35,0,2654,2655,3,458,229,0,2655,2656,3,70,
35,0,2656,2658,1,0,0,0,2657,2652,1,0,0,0,2657,2654,1,0,0,0,2658,455,1,0,
0,0,2659,2660,5,279,0,0,2660,2661,3,868,434,0,2661,457,1,0,0,0,2662,2663,
5,364,0,0,2663,2664,3,152,76,0,2664,459,1,0,0,0,2665,2666,5,246,0,0,2666,
2667,3,152,76,0,2667,461,1,0,0,0,2668,2669,5,388,0,0,2669,2670,3,708,354,
0,2670,463,1,0,0,0,2671,2672,3,170,85,0,2672,2673,3,466,233,0,2673,2675,
1,0,0,0,2674,2671,1,0,0,0,2674,2675,1,0,0,0,2675,465,1,0,0,0,2676,2680,3,
468,234,0,2677,2678,3,170,85,0,2678,2679,3,486,243,0,2679,2681,1,0,0,0,2680,
2677,1,0,0,0,2680,2681,1,0,0,0,2681,467,1,0,0,0,2682,2683,5,29,0,0,2683,
2684,3,470,235,0,2684,2685,5,30,0,0,2685,469,1,0,0,0,2686,2689,3,472,236,
0,2687,2688,5,19,0,0,2688,2690,3,474,237,0,2689,2687,1,0,0,0,2689,2690,1,
0,0,0,2690,2692,1,0,0,0,2691,2686,1,0,0,0,2691,2692,1,0,0,0,2692,2695,1,
0,0,0,2693,2695,3,474,237,0,2694,2691,1,0,0,0,2694,2693,1,0,0,0,2695,471,
1,0,0,0,2696,2697,3,476,238,0,2697,473,1,0,0,0,2698,2699,5,148,0,0,2699,
2700,3,480,240,0,2700,475,1,0,0,0,2701,2706,3,478,239,0,2702,2703,5,19,0,
0,2703,2705,3,478,239,0,2704,2702,1,0,0,0,2705,2708,1,0,0,0,2706,2704,1,
0,0,0,2706,2707,1,0,0,0,2707,477,1,0,0,0,2708,2706,1,0,0,0,2709,2710,3,484,
242,0,2710,2711,3,104,52,0,2711,479,1,0,0,0,2712,2717,3,482,241,0,2713,2714,
5,19,0,0,2714,2716,3,482,241,0,2715,2713,1,0,0,0,2716,2719,1,0,0,0,2717,
2715,1,0,0,0,2717,2718,1,0,0,0,2718,481,1,0,0,0,2719,2717,1,0,0,0,2720,2721,
3,484,242,0,2721,2722,3,110,55,0,2722,483,1,0,0,0,2723,2724,7,9,0,0,2724,
485,1,0,0,0,2725,2726,3,1198,599,0,2726,487,1,0,0,0,2727,2735,3,490,245,
0,2728,2730,3,494,247,0,2729,2731,3,496,248,0,2730,2729,1,0,0,0,2730,2731,
1,0,0,0,2731,2733,1,0,0,0,2732,2734,3,668,334,0,2733,2732,1,0,0,0,2733,2734,
1,0,0,0,2734,2736,1,0,0,0,2735,2728,1,0,0,0,2735,2736,1,0,0,0,2736,489,1,
0,0,0,2737,2742,3,492,246,0,2738,2739,5,19,0,0,2739,2741,3,492,246,0,2740,
2738,1,0,0,0,2741,2744,1,0,0,0,2742,2740,1,0,0,0,2742,2743,1,0,0,0,2743,
491,1,0,0,0,2744,2742,1,0,0,0,2745,2746,3,1252,626,0,2746,2747,5,21,0,0,
2747,2749,1,0,0,0,2748,2745,1,0,0,0,2748,2749,1,0,0,0,2749,2750,1,0,0,0,
2750,2751,3,568,284,0,2751,2752,3,498,249,0,2752,493,1,0,0,0,2753,2754,5,
308,0,0,2754,2755,3,568,284,0,2755,495,1,0,0,0,2756,2757,5,244,0,0,2757,
2758,3,814,407,0,2758,497,1,0,0,0,2759,2763,3,504,252,0,2760,2763,3,500,
250,0,2761,2763,3,502,251,0,2762,2759,1,0,0,0,2762,2760,1,0,0,0,2762,2761,
1,0,0,0,2763,499,1,0,0,0,2764,2765,3,504,252,0,2765,2766,5,75,0,0,2766,2771,
3,504,252,0,2767,2768,5,75,0,0,2768,2770,3,504,252,0,2769,2767,1,0,0,0,2770,
2773,1,0,0,0,2771,2769,1,0,0,0,2771,2772,1,0,0,0,2772,501,1,0,0,0,2773,2771,
1,0,0,0,2774,2775,3,504,252,0,2775,2776,5,37,0,0,2776,2781,3,504,252,0,2777,
2778,5,37,0,0,2778,2780,3,504,252,0,2779,2777,1,0,0,0,2780,2783,1,0,0,0,
2781,2779,1,0,0,0,2781,2782,1,0,0,0,2782,503,1,0,0,0,2783,2781,1,0,0,0,2784,
2785,6,252,-1,0,2785,2786,3,506,253,0,2786,2791,1,0,0,0,2787,2788,10,1,0,
0,2788,2790,3,506,253,0,2789,2787,1,0,0,0,2790,2793,1,0,0,0,2791,2789,1,
0,0,0,2791,2792,1,0,0,0,2792,505,1,0,0,0,2793,2791,1,0,0,0,2794,2798,3,512,
256,0,2795,2798,3,508,254,0,2796,2798,3,510,255,0,2797,2794,1,0,0,0,2797,
2795,1,0,0,0,2797,2796,1,0,0,0,2798,507,1,0,0,0,2799,2800,3,512,256,0,2800,
2801,3,556,278,0,2801,509,1,0,0,0,2802,2803,3,512,256,0,2803,2804,5,31,0,
0,2804,511,1,0,0,0,2805,2809,3,514,257,0,2806,2809,3,562,281,0,2807,2809,
3,602,301,0,2808,2805,1,0,0,0,2808,2806,1,0,0,0,2808,2807,1,0,0,0,2809,513,
1,0,0,0,2810,2813,3,516,258,0,2811,2813,3,536,268,0,2812,2810,1,0,0,0,2812,
2811,1,0,0,0,2813,515,1,0,0,0,2814,2815,5,29,0,0,2815,2816,3,518,259,0,2816,
2817,5,30,0,0,2817,517,1,0,0,0,2818,2820,3,1252,626,0,2819,2818,1,0,0,0,
2819,2820,1,0,0,0,2820,2822,1,0,0,0,2821,2823,3,520,260,0,2822,2821,1,0,
0,0,2822,2823,1,0,0,0,2823,2825,1,0,0,0,2824,2826,3,522,261,0,2825,2824,
1,0,0,0,2825,2826,1,0,0,0,2826,2828,1,0,0,0,2827,2829,3,532,266,0,2828,2827,
1,0,0,0,2828,2829,1,0,0,0,2829,519,1,0,0,0,2830,2834,5,391,0,0,2831,2832,
5,17,0,0,2832,2834,3,594,297,0,2833,2830,1,0,0,0,2833,2831,1,0,0,0,2834,
521,1,0,0,0,2835,2838,3,524,262,0,2836,2838,3,526,263,0,2837,2835,1,0,0,
0,2837,2836,1,0,0,0,2838,523,1,0,0,0,2839,2840,5,244,0,0,2840,2841,3,814,
407,0,2841,525,1,0,0,0,2842,2843,5,25,0,0,2843,2844,3,528,264,0,2844,2845,
5,26,0,0,2845,527,1,0,0,0,2846,2851,3,530,265,0,2847,2848,5,19,0,0,2848,
2850,3,530,265,0,2849,2847,1,0,0,0,2850,2853,1,0,0,0,2851,2849,1,0,0,0,2851,
2852,1,0,0,0,2852,529,1,0,0,0,2853,2851,1,0,0,0,2854,2855,3,1242,621,0,2855,
2856,5,17,0,0,2856,2857,3,868,434,0,2857,531,1,0,0,0,2858,2859,3,534,267,
0,2859,533,1,0,0,0,2860,2861,5,154,0,0,2861,2864,3,868,434,0,2862,2863,5,
155,0,0,2863,2865,3,868,434,0,2864,2862,1,0,0,0,2864,2865,1,0,0,0,2865,535,
1,0,0,0,2866,2869,3,538,269,0,2867,2869,3,554,277,0,2868,2866,1,0,0,0,2868,
2867,1,0,0,0,2869,537,1,0,0,0,2870,2878,3,540,270,0,2871,2878,3,542,271,
0,2872,2878,3,544,272,0,2873,2878,3,546,273,0,2874,2878,3,548,274,0,2875,
2878,3,550,275,0,2876,2878,3,552,276,0,2877,2870,1,0,0,0,2877,2871,1,0,0,
0,2877,2872,1,0,0,0,2877,2873,1,0,0,0,2877,2874,1,0,0,0,2877,2875,1,0,0,
0,2877,2876,1,0,0,0,2878,539,1,0,0,0,2879,2880,5,54,0,0,2880,2881,3,518,
259,0,2881,2882,5,64,0,0,2882,541,1,0,0,0,2883,2884,5,72,0,0,2884,2885,3,
518,259,0,2885,2886,5,65,0,0,2886,543,1,0,0,0,2887,2888,5,60,0,0,2888,2889,
3,518,259,0,2889,2890,5,66,0,0,2890,545,1,0,0,0,2891,2892,5,52,0,0,2892,
2893,5,28,0,0,2893,2894,3,518,259,0,2894,2895,5,65,0,0,2895,547,1,0,0,0,
2896,2897,5,35,0,0,2897,2898,5,28,0,0,2898,2899,3,518,259,0,2899,2900,5,
28,0,0,2900,2901,5,73,0,0,2901,549,1,0,0,0,2902,2903,5,23,0,0,2903,2904,
5,27,0,0,2904,2905,3,518,259,0,2905,2906,5,66,0,0,2906,551,1,0,0,0,2907,
2908,5,60,0,0,2908,2909,3,518,259,0,2909,2910,5,64,0,0,2910,553,1,0,0,0,
2911,2912,7,10,0,0,2912,555,1,0,0,0,2913,2918,5,15,0,0,2914,2918,5,11,0,
0,2915,2918,3,558,279,0,2916,2918,3,560,280,0,2917,2913,1,0,0,0,2917,2914,
1,0,0,0,2917,2915,1,0,0,0,2917,2916,1,0,0,0,2918,557,1,0,0,0,2919,2920,5,
25,0,0,2920,2921,3,1146,573,0,2921,2922,5,26,0,0,2922,559,1,0,0,0,2923,2925,
5,25,0,0,2924,2926,3,1146,573,0,2925,2924,1,0,0,0,2925,2926,1,0,0,0,2926,
2927,1,0,0,0,2927,2929,5,19,0,0,2928,2930,3,1146,573,0,2929,2928,1,0,0,0,
2929,2930,1,0,0,0,2930,2931,1,0,0,0,2931,2932,5,26,0,0,2932,561,1,0,0,0,
2933,2935,5,29,0,0,2934,2936,3,564,282,0,2935,2934,1,0,0,0,2935,2936,1,0,
0,0,2936,2938,1,0,0,0,2937,2939,3,570,285,0,2938,2937,1,0,0,0,2938,2939,
1,0,0,0,2939,2941,1,0,0,0,2940,2942,3,498,249,0,2941,2940,1,0,0,0,2941,2942,
1,0,0,0,2942,2944,1,0,0,0,2943,2945,3,566,283,0,2944,2943,1,0,0,0,2944,2945,
1,0,0,0,2945,2947,1,0,0,0,2946,2948,3,534,267,0,2947,2946,1,0,0,0,2947,2948,
1,0,0,0,2948,2949,1,0,0,0,2949,2968,5,30,0,0,2950,2952,5,27,0,0,2951,2953,
3,564,282,0,2952,2951,1,0,0,0,2952,2953,1,0,0,0,2953,2955,1,0,0,0,2954,2956,
3,570,285,0,2955,2954,1,0,0,0,2955,2956,1,0,0,0,2956,2958,1,0,0,0,2957,2959,
3,498,249,0,2958,2957,1,0,0,0,2958,2959,1,0,0,0,2959,2961,1,0,0,0,2960,2962,
3,566,283,0,2961,2960,1,0,0,0,2961,2962,1,0,0,0,2962,2964,1,0,0,0,2963,2965,
3,534,267,0,2964,2963,1,0,0,0,2964,2965,1,0,0,0,2965,2966,1,0,0,0,2966,2968,
5,28,0,0,2967,2933,1,0,0,0,2967,2950,1,0,0,0,2968,563,1,0,0,0,2969,2970,
3,1252,626,0,2970,2971,5,21,0,0,2971,565,1,0,0,0,2972,2973,5,244,0,0,2973,
2974,3,814,407,0,2974,567,1,0,0,0,2975,2978,3,570,285,0,2976,2978,3,572,
286,0,2977,2975,1,0,0,0,2977,2976,1,0,0,0,2978,569,1,0,0,0,2979,2981,5,396,
0,0,2980,2982,5,158,0,0,2981,2980,1,0,0,0,2981,2982,1,0,0,0,2982,571,1,0,
0,0,2983,2987,3,574,287,0,2984,2987,3,576,288,0,2985,2987,3,578,289,0,2986,
2983,1,0,0,0,2986,2984,1,0,0,0,2986,2985,1,0,0,0,2987,573,1,0,0,0,2988,2990,
5,195,0,0,2989,2991,5,396,0,0,2990,2989,1,0,0,0,2990,2991,1,0,0,0,2991,2993,
1,0,0,0,2992,2994,5,158,0,0,2993,2992,1,0,0,0,2993,2994,1,0,0,0,2994,575,
1,0,0,0,2995,2997,5,170,0,0,2996,2998,3,854,427,0,2997,2996,1,0,0,0,2997,
2998,1,0,0,0,2998,3000,1,0,0,0,2999,3001,5,396,0,0,3000,2999,1,0,0,0,3000,
3001,1,0,0,0,3001,3003,1,0,0,0,3002,3004,5,158,0,0,3003,3002,1,0,0,0,3003,
3004,1,0,0,0,3004,577,1,0,0,0,3005,3010,3,580,290,0,3006,3010,3,582,291,
0,3007,3010,3,584,292,0,3008,3010,3,586,293,0,3009,3005,1,0,0,0,3009,3006,
1,0,0,0,3009,3007,1,0,0,0,3009,3008,1,0,0,0,3010,579,1,0,0,0,3011,3012,5,
195,0,0,3012,3014,5,238,0,0,3013,3015,5,396,0,0,3014,3013,1,0,0,0,3014,3015,
1,0,0,0,3015,3017,1,0,0,0,3016,3018,7,11,0,0,3017,3016,1,0,0,0,3017,3018,
1,0,0,0,3018,581,1,0,0,0,3019,3020,5,170,0,0,3020,3022,5,238,0,0,3021,3023,
5,396,0,0,3022,3021,1,0,0,0,3022,3023,1,0,0,0,3023,3025,1,0,0,0,3024,3026,
7,11,0,0,3025,3024,1,0,0,0,3025,3026,1,0,0,0,3026,583,1,0,0,0,3027,3028,
5,238,0,0,3028,3030,3,854,427,0,3029,3031,5,396,0,0,3030,3029,1,0,0,0,3030,
3031,1,0,0,0,3031,3033,1,0,0,0,3032,3034,5,158,0,0,3033,3032,1,0,0,0,3033,
3034,1,0,0,0,3034,585,1,0,0,0,3035,3036,5,238,0,0,3036,3038,3,854,427,0,
3037,3039,5,396,0,0,3038,3037,1,0,0,0,3038,3039,1,0,0,0,3039,3041,1,0,0,
0,3040,3042,5,158,0,0,3041,3040,1,0,0,0,3041,3042,1,0,0,0,3042,3043,1,0,
0,0,3043,3044,6,293,-1,0,3044,587,1,0,0,0,3045,3046,3,590,295,0,3046,589,
1,0,0,0,3047,3052,3,592,296,0,3048,3049,5,19,0,0,3049,3051,3,592,296,0,3050,
3048,1,0,0,0,3051,3054,1,0,0,0,3052,3050,1,0,0,0,3052,3053,1,0,0,0,3053,
591,1,0,0,0,3054,3052,1,0,0,0,3055,3056,3,498,249,0,3056,593,1,0,0,0,3057,
3058,6,297,-1,0,3058,3059,3,596,298,0,3059,3065,1,0,0,0,3060,3061,10,2,0,
0,3061,3062,5,37,0,0,3062,3064,3,596,298,0,3063,3060,1,0,0,0,3064,3067,1,
0,0,0,3065,3063,1,0,0,0,3065,3066,1,0,0,0,3066,595,1,0,0,0,3067,3065,1,0,
0,0,3068,3069,6,298,-1,0,3069,3070,3,598,299,0,3070,3076,1,0,0,0,3071,3072,
10,2,0,0,3072,3073,5,14,0,0,3073,3075,3,598,299,0,3074,3071,1,0,0,0,3075,
3078,1,0,0,0,3076,3074,1,0,0,0,3076,3077,1,0,0,0,3077,597,1,0,0,0,3078,3076,
1,0,0,0,3079,3083,3,1242,621,0,3080,3083,5,38,0,0,3081,3083,3,600,300,0,
3082,3079,1,0,0,0,3082,3080,1,0,0,0,3082,3081,1,0,0,0,3083,599,1,0,0,0,3084,
3085,5,29,0,0,3085,3086,3,594,297,0,3086,3087,5,30,0,0,3087,3093,1,0,0,0,
3088,3089,5,27,0,0,3089,3090,3,594,297,0,3090,3091,5,28,0,0,3091,3093,1,
0,0,0,3092,3084,1,0,0,0,3092,3088,1,0,0,0,3093,601,1,0,0,0,3094,3102,3,604,
302,0,3095,3102,3,606,303,0,3096,3102,3,608,304,0,3097,3102,3,610,305,0,
3098,3102,3,612,306,0,3099,3102,3,614,307,0,3100,3102,3,616,308,0,3101,3094,
1,0,0,0,3101,3095,1,0,0,0,3101,3096,1,0,0,0,3101,3097,1,0,0,0,3101,3098,
1,0,0,0,3101,3099,1,0,0,0,3101,3100,1,0,0,0,3102,603,1,0,0,0,3103,3104,5,
51,0,0,3104,3105,3,618,309,0,3105,3106,5,62,0,0,3106,605,1,0,0,0,3107,3108,
5,74,0,0,3108,3109,3,618,309,0,3109,3110,5,70,0,0,3110,607,1,0,0,0,3111,
3112,5,12,0,0,3112,3113,5,33,0,0,3113,3114,3,618,309,0,3114,3115,5,33,0,
0,3115,3116,5,12,0,0,3116,609,1,0,0,0,3117,3118,5,52,0,0,3118,3119,5,33,
0,0,3119,3120,3,618,309,0,3120,3121,5,70,0,0,3121,611,1,0,0,0,3122,3123,
5,74,0,0,3123,3124,3,618,309,0,3124,3125,5,70,0,0,3125,3126,5,12,0,0,3126,
613,1,0,0,0,3127,3128,5,52,0,0,3128,3129,5,33,0,0,3129,3130,3,618,309,0,
3130,3131,5,68,0,0,3131,615,1,0,0,0,3132,3133,5,12,0,0,3133,3134,5,33,0,
0,3134,3135,3,618,309,0,3135,3136,5,62,0,0,3136,617,1,0,0,0,3137,3141,3,
624,312,0,3138,3141,3,620,310,0,3139,3141,3,622,311,0,3140,3137,1,0,0,0,
3140,3138,1,0,0,0,3140,3139,1,0,0,0,3141,619,1,0,0,0,3142,3147,3,624,312,
0,3143,3144,5,37,0,0,3144,3146,3,624,312,0,3145,3143,1,0,0,0,3146,3149,1,
0,0,0,3147,3145,1,0,0,0,3147,3148,1,0,0,0,3148,621,1,0,0,0,3149,3147,1,0,
0,0,3150,3155,3,624,312,0,3151,3152,5,75,0,0,3152,3154,3,624,312,0,3153,
3151,1,0,0,0,3154,3157,1,0,0,0,3155,3153,1,0,0,0,3155,3156,1,0,0,0,3156,
623,1,0,0,0,3157,3155,1,0,0,0,3158,3159,6,312,-1,0,3159,3160,3,626,313,0,
3160,3165,1,0,0,0,3161,3162,10,2,0,0,3162,3164,3,626,313,0,3163,3161,1,0,
0,0,3164,3167,1,0,0,0,3165,3163,1,0,0,0,3165,3166,1,0,0,0,3166,625,1,0,0,
0,3167,3165,1,0,0,0,3168,3169,6,313,-1,0,3169,3170,3,628,314,0,3170,3176,
1,0,0,0,3171,3172,10,1,0,0,3172,3173,5,14,0,0,3173,3175,3,628,314,0,3174,
3171,1,0,0,0,3175,3178,1,0,0,0,3176,3174,1,0,0,0,3176,3177,1,0,0,0,3177,
627,1,0,0,0,3178,3176,1,0,0,0,3179,3183,3,634,317,0,3180,3183,3,630,315,
0,3181,3183,3,632,316,0,3182,3179,1,0,0,0,3182,3180,1,0,0,0,3182,3181,1,
0,0,0,3183,629,1,0,0,0,3184,3185,3,634,317,0,3185,3186,3,556,278,0,3186,
631,1,0,0,0,3187,3188,3,634,317,0,3188,3189,5,31,0,0,3189,633,1,0,0,0,3190,
3193,3,636,318,0,3191,3193,3,652,326,0,3192,3190,1,0,0,0,3192,3191,1,0,0,
0,3193,635,1,0,0,0,3194,3202,3,638,319,0,3195,3202,3,640,320,0,3196,3202,
3,642,321,0,3197,3202,3,644,322,0,3198,3202,3,646,323,0,3199,3202,3,648,
324,0,3200,3202,3,650,325,0,3201,3194,1,0,0,0,3201,3195,1,0,0,0,3201,3196,
1,0,0,0,3201,3197,1,0,0,0,3201,3198,1,0,0,0,3201,3199,1,0,0,0,3201,3200,
1,0,0,0,3202,637,1,0,0,0,3203,3204,5,51,0,0,3204,3205,3,652,326,0,3205,3206,
5,62,0,0,3206,639,1,0,0,0,3207,3208,5,74,0,0,3208,3209,3,652,326,0,3209,
3210,5,70,0,0,3210,641,1,0,0,0,3211,3212,5,12,0,0,3212,3213,5,33,0,0,3213,
3214,3,652,326,0,3214,3215,5,68,0,0,3215,643,1,0,0,0,3216,3217,5,52,0,0,
3217,3218,5,33,0,0,3218,3219,3,652,326,0,3219,3220,5,70,0,0,3220,645,1,0,
0,0,3221,3222,5,74,0,0,3222,3223,3,652,326,0,3223,3224,5,70,0,0,3224,3225,
5,12,0,0,3225,647,1,0,0,0,3226,3227,5,51,0,0,3227,3228,5,33,0,0,3228,3229,
3,652,326,0,3229,3230,5,68,0,0,3230,649,1,0,0,0,3231,3232,5,12,0,0,3232,
3233,5,33,0,0,3233,3234,3,652,326,0,3234,3235,5,62,0,0,3235,651,1,0,0,0,
3236,3239,3,656,328,0,3237,3239,3,654,327,0,3238,3236,1,0,0,0,3238,3237,
1,0,0,0,3239,653,1,0,0,0,3240,3241,5,22,0,0,3241,3242,3,656,328,0,3242,655,
1,0,0,0,3243,3253,3,1242,621,0,3244,3245,5,29,0,0,3245,3246,3,618,309,0,
3246,3247,5,30,0,0,3247,3253,1,0,0,0,3248,3249,5,27,0,0,3249,3250,3,618,
309,0,3250,3251,5,28,0,0,3251,3253,1,0,0,0,3252,3243,1,0,0,0,3252,3244,1,
0,0,0,3252,3248,1,0,0,0,3253,657,1,0,0,0,3254,3255,5,244,0,0,3255,3256,3,
814,407,0,3256,659,1,0,0,0,3257,3260,3,58,29,0,3258,3260,3,662,331,0,3259,
3257,1,0,0,0,3259,3258,1,0,0,0,3260,661,1,0,0,0,3261,3262,3,750,375,0,3262,
3263,5,29,0,0,3263,3264,3,664,332,0,3264,3265,5,30,0,0,3265,3266,3,668,334,
0,3266,663,1,0,0,0,3267,3272,3,666,333,0,3268,3269,5,19,0,0,3269,3271,3,
666,333,0,3270,3268,1,0,0,0,3271,3274,1,0,0,0,3272,3270,1,0,0,0,3272,3273,
1,0,0,0,3273,665,1,0,0,0,3274,3272,1,0,0,0,3275,3276,3,868,434,0,3276,667,
1,0,0,0,3277,3278,5,240,0,0,3278,3279,3,670,335,0,3279,669,1,0,0,0,3280,
3285,3,672,336,0,3281,3282,5,19,0,0,3282,3284,3,672,336,0,3283,3281,1,0,
0,0,3284,3287,1,0,0,0,3285,3283,1,0,0,0,3285,3286,1,0,0,0,3286,671,1,0,0,
0,3287,3285,1,0,0,0,3288,3289,3,1242,621,0,3289,3290,5,389,0,0,3290,3291,
3,1252,626,0,3291,673,1,0,0,0,3292,3293,5,368,0,0,3293,3294,5,317,0,0,3294,
3295,3,676,338,0,3295,675,1,0,0,0,3296,3301,3,1242,621,0,3297,3298,5,19,
0,0,3298,3300,3,1242,621,0,3299,3297,1,0,0,0,3300,3303,1,0,0,0,3301,3299,
1,0,0,0,3301,3302,1,0,0,0,3302,3306,1,0,0,0,3303,3301,1,0,0,0,3304,3306,
3,678,339,0,3305,3296,1,0,0,0,3305,3304,1,0,0,0,3306,677,1,0,0,0,3307,3308,
5,29,0,0,3308,3309,5,30,0,0,3309,679,1,0,0,0,3310,3311,5,286,0,0,3311,3312,
5,317,0,0,3312,3313,3,698,349,0,3313,681,1,0,0,0,3314,3315,5,328,0,0,3315,
3316,5,29,0,0,3316,3317,5,15,0,0,3317,3321,5,30,0,0,3318,3321,3,684,342,
0,3319,3321,3,686,343,0,3320,3314,1,0,0,0,3320,3318,1,0,0,0,3320,3319,1,
0,0,0,3321,683,1,0,0,0,3322,3323,3,688,344,0,3323,3324,5,29,0,0,3324,3325,
3,690,345,0,3325,3326,3,868,434,0,3326,3327,5,30,0,0,3327,685,1,0,0,0,3328,
3329,3,692,346,0,3329,3330,5,29,0,0,3330,3331,3,694,347,0,3331,3332,5,19,
0,0,3332,3333,3,696,348,0,3333,3334,5,30,0,0,3334,687,1,0,0,0,3335,3336,
7,12,0,0,3336,689,1,0,0,0,3337,3338,7,13,0,0,3338,691,1,0,0,0,3339,3340,
7,14,0,0,3340,693,1,0,0,0,3341,3342,3,690,345,0,3342,3343,3,896,448,0,3343,
695,1,0,0,0,3344,3345,3,896,448,0,3345,697,1,0,0,0,3346,3351,3,700,350,0,
3347,3348,5,19,0,0,3348,3350,3,700,350,0,3349,3347,1,0,0,0,3350,3353,1,0,
0,0,3351,3349,1,0,0,0,3351,3352,1,0,0,0,3352,699,1,0,0,0,3353,3351,1,0,0,
0,3354,3355,3,868,434,0,3355,3356,7,15,0,0,3356,3357,3,702,351,0,3357,701,
1,0,0,0,3358,3359,5,290,0,0,3359,3363,5,211,0,0,3360,3361,5,290,0,0,3361,
3363,5,215,0,0,3362,3358,1,0,0,0,3362,3360,1,0,0,0,3363,703,1,0,0,0,3364,
3365,5,303,0,0,3365,3366,3,854,427,0,3366,705,1,0,0,0,3367,3368,7,16,0,0,
3368,3369,3,854,427,0,3369,707,1,0,0,0,3370,3374,3,862,431,0,3371,3374,3,
710,355,0,3372,3374,3,808,404,0,3373,3370,1,0,0,0,3373,3371,1,0,0,0,3373,
3372,1,0,0,0,3374,709,1,0,0,0,3375,3376,5,27,0,0,3376,3377,3,788,394,0,3377,
3378,5,28,0,0,3378,3379,5,34,0,0,3379,3380,3,1242,621,0,3380,3383,1,0,0,
0,3381,3383,3,806,403,0,3382,3375,1,0,0,0,3382,3381,1,0,0,0,3383,711,1,0,
0,0,3384,3387,3,714,357,0,3385,3387,3,722,361,0,3386,3384,1,0,0,0,3386,3385,
1,0,0,0,3387,713,1,0,0,0,3388,3389,5,27,0,0,3389,3390,5,28,0,0,3390,3391,
5,135,0,0,3391,3392,3,716,358,0,3392,715,1,0,0,0,3393,3397,3,718,359,0,3394,
3397,3,864,432,0,3395,3397,3,808,404,0,3396,3393,1,0,0,0,3396,3394,1,0,0,
0,3396,3395,1,0,0,0,3397,717,1,0,0,0,3398,3399,3,720,360,0,3399,3400,3,1242,
621,0,3400,3403,1,0,0,0,3401,3403,3,806,403,0,3402,3398,1,0,0,0,3402,3401,
1,0,0,0,3403,719,1,0,0,0,3404,3405,5,27,0,0,3405,3406,3,784,392,0,3406,3407,
5,28,0,0,3407,3408,5,27,0,0,3408,3409,3,802,401,0,3409,3410,5,39,0,0,3410,
3411,5,28,0,0,3411,721,1,0,0,0,3412,3413,5,27,0,0,3413,3414,3,802,401,0,
3414,3415,5,39,0,0,3415,3416,5,28,0,0,3416,3417,3,1242,621,0,3417,723,1,
0,0,0,3418,3421,3,726,363,0,3419,3421,3,734,367,0,3420,3418,1,0,0,0,3420,
3419,1,0,0,0,3421,725,1,0,0,0,3422,3423,5,27,0,0,3423,3424,5,28,0,0,3424,
3425,5,135,0,0,3425,3426,5,140,0,0,3426,3427,3,728,364,0,3427,727,1,0,0,
0,3428,3431,3,730,365,0,3429,3431,3,808,404,0,3430,3428,1,0,0,0,3430,3429,
1,0,0,0,3431,729,1,0,0,0,3432,3433,3,732,366,0,3433,3434,3,1242,621,0,3434,
3437,1,0,0,0,3435,3437,3,806,403,0,3436,3432,1,0,0,0,3436,3435,1,0,0,0,3437,
731,1,0,0,0,3438,3439,5,27,0,0,3439,3440,3,784,392,0,3440,3441,5,28,0,0,
3441,3442,5,27,0,0,3442,3443,3,802,401,0,3443,3444,5,39,0,0,3444,3445,5,
28,0,0,3445,733,1,0,0,0,3446,3447,5,27,0,0,3447,3448,3,802,401,0,3448,3449,
5,39,0,0,3449,3450,5,28,0,0,3450,3451,3,1242,621,0,3451,735,1,0,0,0,3452,
3455,3,738,369,0,3453,3455,3,746,373,0,3454,3452,1,0,0,0,3454,3453,1,0,0,
0,3455,737,1,0,0,0,3456,3457,5,27,0,0,3457,3458,5,28,0,0,3458,3459,5,136,
0,0,3459,3460,3,740,370,0,3460,739,1,0,0,0,3461,3465,3,742,371,0,3462,3465,
3,866,433,0,3463,3465,3,808,404,0,3464,3461,1,0,0,0,3464,3462,1,0,0,0,3464,
3463,1,0,0,0,3465,741,1,0,0,0,3466,3467,3,744,372,0,3467,3468,3,1242,621,
0,3468,3471,1,0,0,0,3469,3471,3,806,403,0,3470,3466,1,0,0,0,3470,3469,1,
0,0,0,3471,743,1,0,0,0,3472,3473,5,27,0,0,3473,3474,3,784,392,0,3474,3475,
5,28,0,0,3475,3476,5,27,0,0,3476,3477,3,802,401,0,3477,3478,5,39,0,0,3478,
3479,5,28,0,0,3479,745,1,0,0,0,3480,3481,3,748,374,0,3481,747,1,0,0,0,3482,
3483,5,27,0,0,3483,3484,3,802,401,0,3484,3485,5,39,0,0,3485,3486,5,28,0,
0,3486,3487,3,1242,621,0,3487,749,1,0,0,0,3488,3489,5,133,0,0,3489,3492,
3,752,376,0,3490,3492,3,758,379,0,3491,3488,1,0,0,0,3491,3490,1,0,0,0,3492,
751,1,0,0,0,3493,3496,3,754,377,0,3494,3496,3,808,404,0,3495,3493,1,0,0,
0,3495,3494,1,0,0,0,3496,753,1,0,0,0,3497,3498,3,756,378,0,3498,3499,3,1242,
621,0,3499,3502,1,0,0,0,3500,3502,3,806,403,0,3501,3497,1,0,0,0,3501,3500,
1,0,0,0,3502,755,1,0,0,0,3503,3504,5,27,0,0,3504,3505,3,784,392,0,3505,3506,
5,28,0,0,3506,3507,5,27,0,0,3507,3508,3,802,401,0,3508,3509,5,39,0,0,3509,
3510,5,28,0,0,3510,757,1,0,0,0,3511,3512,3,760,380,0,3512,759,1,0,0,0,3513,
3514,5,27,0,0,3514,3515,3,802,401,0,3515,3516,5,39,0,0,3516,3517,5,28,0,
0,3517,3518,3,1242,621,0,3518,761,1,0,0,0,3519,3520,5,134,0,0,3520,3521,
3,764,382,0,3521,763,1,0,0,0,3522,3525,3,766,383,0,3523,3525,3,808,404,0,
3524,3522,1,0,0,0,3524,3523,1,0,0,0,3525,765,1,0,0,0,3526,3527,3,768,384,
0,3527,3528,3,1242,621,0,3528,3531,1,0,0,0,3529,3531,3,806,403,0,3530,3526,
1,0,0,0,3530,3529,1,0,0,0,3531,767,1,0,0,0,3532,3533,5,27,0,0,3533,3534,
3,784,392,0,3534,3535,5,28,0,0,3535,3536,5,27,0,0,3536,3537,3,802,401,0,
3537,3538,5,39,0,0,3538,3539,5,28,0,0,3539,769,1,0,0,0,3540,3541,5,27,0,
0,3541,3542,3,802,401,0,3542,3543,5,39,0,0,3543,3544,5,28,0,0,3544,3545,
3,1242,621,0,3545,771,1,0,0,0,3546,3547,5,143,0,0,3547,3548,3,774,387,0,
3548,773,1,0,0,0,3549,3552,3,776,388,0,3550,3552,3,808,404,0,3551,3549,1,
0,0,0,3551,3550,1,0,0,0,3552,775,1,0,0,0,3553,3554,3,778,389,0,3554,3555,
3,1242,621,0,3555,3558,1,0,0,0,3556,3558,3,806,403,0,3557,3553,1,0,0,0,3557,
3556,1,0,0,0,3558,777,1,0,0,0,3559,3560,5,27,0,0,3560,3561,3,784,392,0,3561,
3562,5,28,0,0,3562,3563,5,27,0,0,3563,3564,3,802,401,0,3564,3565,5,39,0,
0,3565,3566,5,28,0,0,3566,779,1,0,0,0,3567,3568,5,27,0,0,3568,3569,3,802,
401,0,3569,3570,5,39,0,0,3570,3571,5,28,0,0,3571,3572,3,1242,621,0,3572,
781,1,0,0,0,3573,3574,3,786,393,0,3574,783,1,0,0,0,3575,3576,3,782,391,0,
3576,3577,5,34,0,0,3577,785,1,0,0,0,3578,3582,3,788,394,0,3579,3582,3,790,
395,0,3580,3582,3,796,398,0,3581,3578,1,0,0,0,3581,3579,1,0,0,0,3581,3580,
1,0,0,0,3582,787,1,0,0,0,3583,3584,5,34,0,0,3584,3585,5,27,0,0,3585,3586,
3,798,399,0,3586,3587,5,28,0,0,3587,789,1,0,0,0,3588,3592,3,792,396,0,3589,
3592,3,794,397,0,3590,3592,5,39,0,0,3591,3588,1,0,0,0,3591,3589,1,0,0,0,
3591,3590,1,0,0,0,3592,791,1,0,0,0,3593,3594,3,860,430,0,3594,3595,5,34,
0,0,3595,3596,5,27,0,0,3596,3597,3,798,399,0,3597,3598,5,28,0,0,3598,793,
1,0,0,0,3599,3600,5,40,0,0,3600,3601,5,34,0,0,3601,3602,5,27,0,0,3602,3603,
5,40,0,0,3603,3604,5,28,0,0,3604,3605,5,34,0,0,3605,3606,5,27,0,0,3606,3607,
3,798,399,0,3607,3608,5,28,0,0,3608,3611,1,0,0,0,3609,3611,3,798,399,0,3610,
3599,1,0,0,0,3610,3609,1,0,0,0,3611,795,1,0,0,0,3612,3613,3,1242,621,0,3613,
3614,5,34,0,0,3614,3615,5,27,0,0,3615,3616,3,798,399,0,3616,3617,5,28,0,
0,3617,797,1,0,0,0,3618,3619,3,1242,621,0,3619,3620,5,34,0,0,3620,3621,5,
27,0,0,3621,3622,3,1242,621,0,3622,3623,5,28,0,0,3623,799,1,0,0,0,3624,3625,
3,1242,621,0,3625,801,1,0,0,0,3626,3627,3,804,402,0,3627,3628,3,1242,621,
0,3628,803,1,0,0,0,3629,3630,5,27,0,0,3630,3631,3,1242,621,0,3631,3632,5,
39,0,0,3632,3633,5,28,0,0,3633,805,1,0,0,0,3634,3635,3,1242,621,0,3635,807,
1,0,0,0,3636,3637,3,810,405,0,3637,809,1,0,0,0,3638,3639,1,0,0,0,3639,811,
1,0,0,0,3640,3641,3,1252,626,0,3641,813,1,0,0,0,3642,3643,3,884,442,0,3643,
815,1,0,0,0,3644,3654,3,818,409,0,3645,3654,3,822,411,0,3646,3654,3,824,
412,0,3647,3654,3,828,414,0,3648,3654,3,832,416,0,3649,3654,3,836,418,0,
3650,3654,3,840,420,0,3651,3654,3,846,423,0,3652,3654,3,848,424,0,3653,3644,
1,0,0,0,3653,3645,1,0,0,0,3653,3646,1,0,0,0,3653,3647,1,0,0,0,3653,3648,
1,0,0,0,3653,3649,1,0,0,0,3653,3650,1,0,0,0,3653,3651,1,0,0,0,3653,3652,
1,0,0,0,3654,817,1,0,0,0,3655,3656,3,906,453,0,3656,3657,3,820,410,0,3657,
819,1,0,0,0,3658,3659,5,5,0,0,3659,3660,3,906,453,0,3660,821,1,0,0,0,3661,
3667,5,101,0,0,3662,3663,5,29,0,0,3663,3664,3,488,244,0,3664,3665,5,30,0,
0,3665,3668,1,0,0,0,3666,3668,3,70,35,0,3667,3662,1,0,0,0,3667,3666,1,0,
0,0,3668,823,1,0,0,0,3669,3670,3,904,452,0,3670,3671,3,826,413,0,3671,825,
1,0,0,0,3672,3674,5,391,0,0,3673,3675,5,100,0,0,3674,3673,1,0,0,0,3674,3675,
1,0,0,0,3675,3676,1,0,0,0,3676,3677,5,119,0,0,3677,827,1,0,0,0,3678,3679,
3,944,472,0,3679,3680,3,830,415,0,3680,829,1,0,0,0,3681,3683,5,391,0,0,3682,
3684,5,100,0,0,3683,3682,1,0,0,0,3683,3684,1,0,0,0,3684,3686,1,0,0,0,3685,
3687,5,450,0,0,3686,3685,1,0,0,0,3686,3687,1,0,0,0,3687,3688,1,0,0,0,3688,
3689,5,188,0,0,3689,831,1,0,0,0,3690,3691,3,812,406,0,3691,3692,3,834,417,
0,3692,833,1,0,0,0,3693,3695,5,391,0,0,3694,3693,1,0,0,0,3694,3695,1,0,0,
0,3695,3696,1,0,0,0,3696,3697,5,184,0,0,3697,835,1,0,0,0,3698,3699,3,812,
406,0,3699,3700,3,838,419,0,3700,837,1,0,0,0,3701,3703,5,391,0,0,3702,3701,
1,0,0,0,3702,3703,1,0,0,0,3703,3704,1,0,0,0,3704,3705,5,187,0,0,3705,3706,
3,594,297,0,3706,839,1,0,0,0,3707,3708,3,812,406,0,3708,3709,3,842,421,0,
3709,3714,1,0,0,0,3710,3711,3,812,406,0,3711,3712,3,844,422,0,3712,3714,
1,0,0,0,3713,3707,1,0,0,0,3713,3710,1,0,0,0,3714,841,1,0,0,0,3715,3717,5,
391,0,0,3716,3718,5,100,0,0,3717,3716,1,0,0,0,3717,3718,1,0,0,0,3718,3719,
1,0,0,0,3719,3721,5,183,0,0,3720,3722,5,393,0,0,3721,3720,1,0,0,0,3721,3722,
1,0,0,0,3722,3723,1,0,0,0,3723,3724,3,812,406,0,3724,843,1,0,0,0,3725,3727,
5,391,0,0,3726,3728,5,100,0,0,3727,3726,1,0,0,0,3727,3728,1,0,0,0,3728,3729,
1,0,0,0,3729,3731,5,182,0,0,3730,3732,5,393,0,0,3731,3730,1,0,0,0,3731,3732,
1,0,0,0,3732,3733,1,0,0,0,3733,3734,3,812,406,0,3734,845,1,0,0,0,3735,3736,
5,189,0,0,3736,3737,5,29,0,0,3737,3738,3,812,406,0,3738,3739,5,19,0,0,3739,
3744,3,812,406,0,3740,3741,5,19,0,0,3741,3743,3,812,406,0,3742,3740,1,0,
0,0,3743,3746,1,0,0,0,3744,3742,1,0,0,0,3744,3745,1,0,0,0,3745,3747,1,0,
0,0,3746,3744,1,0,0,0,3747,3748,5,30,0,0,3748,847,1,0,0,0,3749,3750,5,190,
0,0,3750,3751,5,29,0,0,3751,3752,3,812,406,0,3752,3753,5,19,0,0,3753,3758,
3,812,406,0,3754,3755,5,19,0,0,3755,3757,3,812,406,0,3756,3754,1,0,0,0,3757,
3760,1,0,0,0,3758,3756,1,0,0,0,3758,3759,1,0,0,0,3759,3761,1,0,0,0,3760,
3758,1,0,0,0,3761,3762,5,30,0,0,3762,849,1,0,0,0,3763,3766,3,1110,555,0,
3764,3766,3,856,428,0,3765,3763,1,0,0,0,3765,3764,1,0,0,0,3766,851,1,0,0,
0,3767,3770,3,1116,558,0,3768,3770,3,856,428,0,3769,3767,1,0,0,0,3769,3768,
1,0,0,0,3770,853,1,0,0,0,3771,3774,3,1146,573,0,3772,3774,3,1242,621,0,3773,
3771,1,0,0,0,3773,3772,1,0,0,0,3774,855,1,0,0,0,3775,3778,3,1242,621,0,3776,
3778,3,858,429,0,3777,3775,1,0,0,0,3777,3776,1,0,0,0,3778,857,1,0,0,0,3779,
3783,3,860,430,0,3780,3783,3,866,433,0,3781,3783,5,337,0,0,3782,3779,1,0,
0,0,3782,3780,1,0,0,0,3782,3781,1,0,0,0,3783,859,1,0,0,0,3784,3787,3,862,
431,0,3785,3787,3,864,432,0,3786,3784,1,0,0,0,3786,3785,1,0,0,0,3787,861,
1,0,0,0,3788,3789,7,17,0,0,3789,863,1,0,0,0,3790,3791,7,18,0,0,3791,865,
1,0,0,0,3792,3793,7,19,0,0,3793,867,1,0,0,0,3794,3796,3,870,435,0,3795,3797,
3,1200,600,0,3796,3795,1,0,0,0,3796,3797,1,0,0,0,3797,869,1,0,0,0,3798,3801,
3,872,436,0,3799,3801,3,884,442,0,3800,3798,1,0,0,0,3800,3799,1,0,0,0,3801,
871,1,0,0,0,3802,3811,3,896,448,0,3803,3811,3,944,472,0,3804,3811,3,978,
489,0,3805,3811,3,1000,500,0,3806,3811,3,876,438,0,3807,3811,3,882,441,0,
3808,3811,3,904,452,0,3809,3811,3,874,437,0,3810,3802,1,0,0,0,3810,3803,
1,0,0,0,3810,3804,1,0,0,0,3810,3805,1,0,0,0,3810,3806,1,0,0,0,3810,3807,
1,0,0,0,3810,3808,1,0,0,0,3810,3809,1,0,0,0,3811,873,1,0,0,0,3812,3815,3,
150,75,0,3813,3815,3,1016,508,0,3814,3812,1,0,0,0,3814,3813,1,0,0,0,3815,
875,1,0,0,0,3816,3821,3,1024,512,0,3817,3821,3,1040,520,0,3818,3821,3,878,
439,0,3819,3821,3,880,440,0,3820,3816,1,0,0,0,3820,3817,1,0,0,0,3820,3818,
1,0,0,0,3820,3819,1,0,0,0,3821,877,1,0,0,0,3822,3823,3,904,452,0,3823,879,
1,0,0,0,3824,3825,3,904,452,0,3825,881,1,0,0,0,3826,3827,3,904,452,0,3827,
883,1,0,0,0,3828,3829,6,442,-1,0,3829,3830,3,886,443,0,3830,3839,1,0,0,0,
3831,3832,10,2,0,0,3832,3833,5,394,0,0,3833,3838,3,886,443,0,3834,3835,10,
1,0,0,3835,3836,5,241,0,0,3836,3838,3,886,443,0,3837,3831,1,0,0,0,3837,3834,
1,0,0,0,3838,3841,1,0,0,0,3839,3837,1,0,0,0,3839,3840,1,0,0,0,3840,885,1,
0,0,0,3841,3839,1,0,0,0,3842,3843,6,443,-1,0,3843,3844,3,888,444,0,3844,
3850,1,0,0,0,3845,3846,10,1,0,0,3846,3847,5,313,0,0,3847,3849,3,888,444,
0,3848,3845,1,0,0,0,3849,3852,1,0,0,0,3850,3848,1,0,0,0,3850,3851,1,0,0,
0,3851,887,1,0,0,0,3852,3850,1,0,0,0,3853,3855,5,100,0,0,3854,3853,1,0,0,
0,3854,3855,1,0,0,0,3855,3856,1,0,0,0,3856,3857,3,890,445,0,3857,889,1,0,
0,0,3858,3868,3,892,446,0,3859,3861,5,391,0,0,3860,3862,5,100,0,0,3861,3860,
1,0,0,0,3861,3862,1,0,0,0,3862,3866,1,0,0,0,3863,3866,5,21,0,0,3864,3866,
5,63,0,0,3865,3859,1,0,0,0,3865,3863,1,0,0,0,3865,3864,1,0,0,0,3866,3867,
1,0,0,0,3867,3869,5,400,0,0,3868,3865,1,0,0,0,3868,3869,1,0,0,0,3869,891,
1,0,0,0,3870,3873,3,816,408,0,3871,3873,3,894,447,0,3872,3870,1,0,0,0,3872,
3871,1,0,0,0,3873,893,1,0,0,0,3874,3875,5,29,0,0,3875,3876,3,884,442,0,3876,
3877,5,30,0,0,3877,3880,1,0,0,0,3878,3880,3,906,453,0,3879,3874,1,0,0,0,
3879,3878,1,0,0,0,3880,895,1,0,0,0,3881,3882,6,448,-1,0,3882,3883,3,898,
449,0,3883,3892,1,0,0,0,3884,3885,10,2,0,0,3885,3886,5,11,0,0,3886,3891,
3,898,449,0,3887,3888,10,1,0,0,3888,3889,5,12,0,0,3889,3891,3,898,449,0,
3890,3884,1,0,0,0,3890,3887,1,0,0,0,3891,3894,1,0,0,0,3892,3890,1,0,0,0,
3892,3893,1,0,0,0,3893,897,1,0,0,0,3894,3892,1,0,0,0,3895,3896,6,449,-1,
0,3896,3897,3,900,450,0,3897,3906,1,0,0,0,3898,3899,10,2,0,0,3899,3900,5,
15,0,0,3900,3905,3,900,450,0,3901,3902,10,1,0,0,3902,3903,5,33,0,0,3903,
3905,3,900,450,0,3904,3898,1,0,0,0,3904,3901,1,0,0,0,3905,3908,1,0,0,0,3906,
3904,1,0,0,0,3906,3907,1,0,0,0,3907,899,1,0,0,0,3908,3906,1,0,0,0,3909,3911,
3,1144,572,0,3910,3909,1,0,0,0,3910,3911,1,0,0,0,3911,3912,1,0,0,0,3912,
3913,3,902,451,0,3913,901,1,0,0,0,3914,3917,3,904,452,0,3915,3917,3,908,
454,0,3916,3914,1,0,0,0,3916,3915,1,0,0,0,3917,903,1,0,0,0,3918,3919,5,29,
0,0,3919,3920,3,868,434,0,3920,3921,5,30,0,0,3921,3924,1,0,0,0,3922,3924,
3,906,453,0,3923,3918,1,0,0,0,3923,3922,1,0,0,0,3924,905,1,0,0,0,3925,3926,
3,1016,508,0,3926,3927,5,39,0,0,3927,3928,3,1242,621,0,3928,3940,1,0,0,0,
3929,3940,3,1242,621,0,3930,3940,3,856,428,0,3931,3940,3,852,426,0,3932,
3940,3,682,341,0,3933,3940,3,1022,511,0,3934,3935,5,199,0,0,3935,3940,3,
70,35,0,3936,3940,3,1082,541,0,3937,3940,3,1104,552,0,3938,3940,3,1108,554,
0,3939,3925,1,0,0,0,3939,3929,1,0,0,0,3939,3930,1,0,0,0,3939,3931,1,0,0,
0,3939,3932,1,0,0,0,3939,3933,1,0,0,0,3939,3934,1,0,0,0,3939,3936,1,0,0,
0,3939,3937,1,0,0,0,3939,3938,1,0,0,0,3940,907,1,0,0,0,3941,3956,3,910,455,
0,3942,3956,3,918,459,0,3943,3956,3,920,460,0,3944,3956,3,922,461,0,3945,
3956,3,924,462,0,3946,3956,3,926,463,0,3947,3956,3,928,464,0,3948,3956,3,
930,465,0,3949,3956,3,932,466,0,3950,3956,3,934,467,0,3951,3956,3,936,468,
0,3952,3956,3,938,469,0,3953,3956,3,940,470,0,3954,3956,3,942,471,0,3955,
3941,1,0,0,0,3955,3942,1,0,0,0,3955,3943,1,0,0,0,3955,3944,1,0,0,0,3955,
3945,1,0,0,0,3955,3946,1,0,0,0,3955,3947,1,0,0,0,3955,3948,1,0,0,0,3955,
3949,1,0,0,0,3955,3950,1,0,0,0,3955,3951,1,0,0,0,3955,3952,1,0,0,0,3955,
3953,1,0,0,0,3955,3954,1,0,0,0,3956,909,1,0,0,0,3957,3961,3,912,456,0,3958,
3961,3,914,457,0,3959,3961,3,916,458,0,3960,3957,1,0,0,0,3960,3958,1,0,0,
0,3960,3959,1,0,0,0,3961,911,1,0,0,0,3962,3963,5,405,0,0,3963,3964,5,29,
0,0,3964,3965,3,946,473,0,3965,3966,5,30,0,0,3966,913,1,0,0,0,3967,3968,
7,20,0,0,3968,3969,5,29,0,0,3969,3970,3,944,472,0,3970,3971,5,30,0,0,3971,
915,1,0,0,0,3972,3973,5,402,0,0,3973,3974,5,29,0,0,3974,3975,3,1242,621,
0,3975,3976,5,30,0,0,3976,917,1,0,0,0,3977,3978,5,406,0,0,3978,3979,5,29,
0,0,3979,3980,3,896,448,0,3980,3981,5,30,0,0,3981,919,1,0,0,0,3982,3983,
5,407,0,0,3983,3984,5,29,0,0,3984,3985,3,896,448,0,3985,3986,5,19,0,0,3986,
3987,3,896,448,0,3987,3988,5,30,0,0,3988,921,1,0,0,0,3989,3990,5,92,0,0,
3990,3991,5,29,0,0,3991,3992,3,896,448,0,3992,3993,5,30,0,0,3993,923,1,0,
0,0,3994,3995,5,409,0,0,3995,3996,5,29,0,0,3996,3997,3,896,448,0,3997,3998,
5,19,0,0,3998,3999,3,896,448,0,3999,4000,5,30,0,0,4000,925,1,0,0,0,4001,
4002,5,408,0,0,4002,4003,5,29,0,0,4003,4004,3,896,448,0,4004,4005,5,30,0,
0,4005,927,1,0,0,0,4006,4007,5,410,0,0,4007,4008,5,29,0,0,4008,4009,3,896,
448,0,4009,4010,5,30,0,0,4010,929,1,0,0,0,4011,4012,5,411,0,0,4012,4013,
5,29,0,0,4013,4014,3,896,448,0,4014,4015,5,30,0,0,4015,931,1,0,0,0,4016,
4017,5,412,0,0,4017,4018,5,29,0,0,4018,4019,3,896,448,0,4019,4020,5,19,0,
0,4020,4021,3,896,448,0,4021,4022,5,30,0,0,4022,933,1,0,0,0,4023,4024,5,
413,0,0,4024,4025,5,29,0,0,4025,4026,3,896,448,0,4026,4027,5,30,0,0,4027,
935,1,0,0,0,4028,4029,5,414,0,0,4029,4030,5,29,0,0,4030,4031,3,896,448,0,
4031,4032,5,30,0,0,4032,937,1,0,0,0,4033,4034,7,21,0,0,4034,4035,5,29,0,
0,4035,4036,3,896,448,0,4036,4037,5,30,0,0,4037,939,1,0,0,0,4038,4039,5,
437,0,0,4039,4040,5,29,0,0,4040,4041,3,1242,621,0,4041,4042,5,30,0,0,4042,
941,1,0,0,0,4043,4044,5,438,0,0,4044,4045,5,29,0,0,4045,4046,3,1242,621,
0,4046,4047,5,30,0,0,4047,943,1,0,0,0,4048,4051,3,946,473,0,4049,4051,3,
950,475,0,4050,4048,1,0,0,0,4050,4049,1,0,0,0,4051,945,1,0,0,0,4052,4053,
6,473,-1,0,4053,4054,3,948,474,0,4054,4060,1,0,0,0,4055,4056,10,2,0,0,4056,
4057,5,48,0,0,4057,4059,3,948,474,0,4058,4055,1,0,0,0,4059,4062,1,0,0,0,
4060,4058,1,0,0,0,4060,4061,1,0,0,0,4061,947,1,0,0,0,4062,4060,1,0,0,0,4063,
4066,3,904,452,0,4064,4066,3,954,477,0,4065,4063,1,0,0,0,4065,4064,1,0,0,
0,4066,949,1,0,0,0,4067,4068,6,475,-1,0,4068,4069,3,952,476,0,4069,4075,
1,0,0,0,4070,4071,10,2,0,0,4071,4072,5,48,0,0,4072,4074,3,952,476,0,4073,
4070,1,0,0,0,4074,4077,1,0,0,0,4075,4073,1,0,0,0,4075,4076,1,0,0,0,4076,
951,1,0,0,0,4077,4075,1,0,0,0,4078,4081,3,904,452,0,4079,4081,3,954,477,
0,4080,4078,1,0,0,0,4080,4079,1,0,0,0,4081,953,1,0,0,0,4082,4085,3,956,478,
0,4083,4085,3,968,484,0,4084,4082,1,0,0,0,4084,4083,1,0,0,0,4085,955,1,0,
0,0,4086,4091,3,958,479,0,4087,4091,3,960,480,0,4088,4091,3,962,481,0,4089,
4091,3,964,482,0,4090,4086,1,0,0,0,4090,4087,1,0,0,0,4090,4088,1,0,0,0,4090,
4089,1,0,0,0,4091,957,1,0,0,0,4092,4093,5,259,0,0,4093,4094,5,29,0,0,4094,
4095,3,946,473,0,4095,4096,5,19,0,0,4096,4099,3,974,487,0,4097,4098,5,19,
0,0,4098,4100,3,976,488,0,4099,4097,1,0,0,0,4099,4100,1,0,0,0,4100,4101,
1,0,0,0,4101,4102,5,30,0,0,4102,4118,1,0,0,0,4103,4104,5,307,0,0,4104,4105,
5,29,0,0,4105,4106,3,946,473,0,4106,4107,5,19,0,0,4107,4108,3,976,488,0,
4108,4109,5,30,0,0,4109,4118,1,0,0,0,4110,4111,5,269,0,0,4111,4112,5,29,
0,0,4112,4113,3,946,473,0,4113,4114,5,19,0,0,4114,4115,3,976,488,0,4115,
4116,5,30,0,0,4116,4118,1,0,0,0,4117,4092,1,0,0,0,4117,4103,1,0,0,0,4117,
4110,1,0,0,0,4118,959,1,0,0,0,4119,4120,7,22,0,0,4120,4121,5,29,0,0,4121,
4122,3,946,473,0,4122,4123,5,30,0,0,4123,961,1,0,0,0,4124,4125,5,255,0,0,
4125,4126,5,29,0,0,4126,4133,3,946,473,0,4127,4128,5,19,0,0,4128,4131,5,
401,0,0,4129,4130,5,19,0,0,4130,4132,3,946,473,0,4131,4129,1,0,0,0,4131,
4132,1,0,0,0,4132,4134,1,0,0,0,4133,4127,1,0,0,0,4133,4134,1,0,0,0,4134,
4135,1,0,0,0,4135,4136,5,30,0,0,4136,4148,1,0,0,0,4137,4138,5,443,0,0,4138,
4139,5,29,0,0,4139,4140,3,946,473,0,4140,4141,5,30,0,0,4141,4148,1,0,0,0,
4142,4143,5,444,0,0,4143,4144,5,29,0,0,4144,4145,3,946,473,0,4145,4146,5,
30,0,0,4146,4148,1,0,0,0,4147,4124,1,0,0,0,4147,4137,1,0,0,0,4147,4142,1,
0,0,0,4148,963,1,0,0,0,4149,4150,5,291,0,0,4150,4151,5,29,0,0,4151,4154,
3,946,473,0,4152,4153,5,19,0,0,4153,4155,3,966,483,0,4154,4152,1,0,0,0,4154,
4155,1,0,0,0,4155,4156,1,0,0,0,4156,4157,5,30,0,0,4157,965,1,0,0,0,4158,
4159,7,23,0,0,4159,967,1,0,0,0,4160,4163,3,970,485,0,4161,4163,3,972,486,
0,4162,4160,1,0,0,0,4162,4161,1,0,0,0,4163,969,1,0,0,0,4164,4165,5,259,0,
0,4165,4166,5,29,0,0,4166,4167,3,950,475,0,4167,4168,5,19,0,0,4168,4171,
3,974,487,0,4169,4170,5,19,0,0,4170,4172,3,976,488,0,4171,4169,1,0,0,0,4171,
4172,1,0,0,0,4172,4173,1,0,0,0,4173,4174,5,30,0,0,4174,4190,1,0,0,0,4175,
4176,5,307,0,0,4176,4177,5,29,0,0,4177,4178,3,950,475,0,4178,4179,5,19,0,
0,4179,4180,3,976,488,0,4180,4181,5,30,0,0,4181,4190,1,0,0,0,4182,4183,5,
269,0,0,4183,4184,5,29,0,0,4184,4185,3,950,475,0,4185,4186,5,19,0,0,4186,
4187,3,976,488,0,4187,4188,5,30,0,0,4188,4190,1,0,0,0,4189,4164,1,0,0,0,
4189,4175,1,0,0,0,4189,4182,1,0,0,0,4190,971,1,0,0,0,4191,4192,5,255,0,0,
4192,4193,5,29,0,0,4193,4200,3,950,475,0,4194,4195,5,19,0,0,4195,4198,5,
401,0,0,4196,4197,5,19,0,0,4197,4199,3,950,475,0,4198,4196,1,0,0,0,4198,
4199,1,0,0,0,4199,4201,1,0,0,0,4200,4194,1,0,0,0,4200,4201,1,0,0,0,4201,
4202,1,0,0,0,4202,4203,5,30,0,0,4203,4215,1,0,0,0,4204,4205,5,443,0,0,4205,
4206,5,29,0,0,4206,4207,3,950,475,0,4207,4208,5,30,0,0,4208,4215,1,0,0,0,
4209,4210,5,444,0,0,4210,4211,5,29,0,0,4211,4212,3,950,475,0,4212,4213,5,
30,0,0,4213,4215,1,0,0,0,4214,4191,1,0,0,0,4214,4204,1,0,0,0,4214,4209,1,
0,0,0,4215,973,1,0,0,0,4216,4217,3,896,448,0,4217,975,1,0,0,0,4218,4219,
3,896,448,0,4219,977,1,0,0,0,4220,4221,6,489,-1,0,4221,4227,3,980,490,0,
4222,4223,3,1000,500,0,4223,4224,5,11,0,0,4224,4225,3,980,490,0,4225,4227,
1,0,0,0,4226,4220,1,0,0,0,4226,4222,1,0,0,0,4227,4236,1,0,0,0,4228,4229,
10,2,0,0,4229,4230,5,11,0,0,4230,4235,3,980,490,0,4231,4232,10,1,0,0,4232,
4233,5,12,0,0,4233,4235,3,980,490,0,4234,4228,1,0,0,0,4234,4231,1,0,0,0,
4235,4238,1,0,0,0,4236,4234,1,0,0,0,4236,4237,1,0,0,0,4237,979,1,0,0,0,4238,
4236,1,0,0,0,4239,4242,3,904,452,0,4240,4242,3,982,491,0,4241,4239,1,0,0,
0,4241,4240,1,0,0,0,4242,981,1,0,0,0,4243,4249,3,984,492,0,4244,4249,3,986,
493,0,4245,4249,3,990,495,0,4246,4249,3,988,494,0,4247,4249,3,992,496,0,
4248,4243,1,0,0,0,4248,4244,1,0,0,0,4248,4245,1,0,0,0,4248,4246,1,0,0,0,
4248,4247,1,0,0,0,4249,983,1,0,0,0,4250,4258,5,330,0,0,4251,4252,5,114,0,
0,4252,4254,5,29,0,0,4253,4255,3,994,497,0,4254,4253,1,0,0,0,4254,4255,1,
0,0,0,4255,4256,1,0,0,0,4256,4258,5,30,0,0,4257,4250,1,0,0,0,4257,4251,1,
0,0,0,4258,985,1,0,0,0,4259,4267,5,335,0,0,4260,4261,5,115,0,0,4261,4263,
5,29,0,0,4262,4264,3,996,498,0,4263,4262,1,0,0,0,4263,4264,1,0,0,0,4264,
4265,1,0,0,0,4265,4267,5,30,0,0,4266,4259,1,0,0,0,4266,4260,1,0,0,0,4267,
987,1,0,0,0,4268,4276,5,301,0,0,4269,4270,5,301,0,0,4270,4272,5,29,0,0,4271,
4273,3,996,498,0,4272,4271,1,0,0,0,4272,4273,1,0,0,0,4273,4274,1,0,0,0,4274,
4276,5,30,0,0,4275,4268,1,0,0,0,4275,4269,1,0,0,0,4276,989,1,0,0,0,4277,
4285,5,336,0,0,4278,4279,5,116,0,0,4279,4281,5,29,0,0,4280,4282,3,998,499,
0,4281,4280,1,0,0,0,4281,4282,1,0,0,0,4282,4283,1,0,0,0,4283,4285,5,30,0,
0,4284,4277,1,0,0,0,4284,4278,1,0,0,0,4285,991,1,0,0,0,4286,4294,5,300,0,
0,4287,4288,5,302,0,0,4288,4290,5,29,0,0,4289,4291,3,998,499,0,4290,4289,
1,0,0,0,4290,4291,1,0,0,0,4291,4292,1,0,0,0,4292,4294,5,30,0,0,4293,4286,
1,0,0,0,4293,4287,1,0,0,0,4294,993,1,0,0,0,4295,4298,3,1168,584,0,4296,4298,
3,1062,531,0,4297,4295,1,0,0,0,4297,4296,1,0,0,0,4298,995,1,0,0,0,4299,4302,
3,1170,585,0,4300,4302,3,1062,531,0,4301,4299,1,0,0,0,4301,4300,1,0,0,0,
4302,997,1,0,0,0,4303,4306,3,1172,586,0,4304,4306,3,1062,531,0,4305,4303,
1,0,0,0,4305,4304,1,0,0,0,4306,999,1,0,0,0,4307,4308,6,500,-1,0,4308,4316,
3,1002,501,0,4309,4310,5,29,0,0,4310,4311,3,978,489,0,4311,4312,5,12,0,0,
4312,4313,3,980,490,0,4313,4314,5,30,0,0,4314,4316,1,0,0,0,4315,4307,1,0,
0,0,4315,4309,1,0,0,0,4316,4325,1,0,0,0,4317,4318,10,3,0,0,4318,4319,5,11,
0,0,4319,4324,3,1002,501,0,4320,4321,10,2,0,0,4321,4322,5,12,0,0,4322,4324,
3,1002,501,0,4323,4317,1,0,0,0,4323,4320,1,0,0,0,4324,4327,1,0,0,0,4325,
4323,1,0,0,0,4325,4326,1,0,0,0,4326,1001,1,0,0,0,4327,4325,1,0,0,0,4328,
4329,6,501,-1,0,4329,4335,3,1004,502,0,4330,4331,3,898,449,0,4331,4332,5,
15,0,0,4332,4333,3,1004,502,0,4333,4335,1,0,0,0,4334,4328,1,0,0,0,4334,4330,
1,0,0,0,4335,4344,1,0,0,0,4336,4337,10,3,0,0,4337,4338,5,15,0,0,4338,4343,
3,900,450,0,4339,4340,10,2,0,0,4340,4341,5,33,0,0,4341,4343,3,900,450,0,
4342,4336,1,0,0,0,4342,4339,1,0,0,0,4343,4346,1,0,0,0,4344,4342,1,0,0,0,
4344,4345,1,0,0,0,4345,1003,1,0,0,0,4346,4344,1,0,0,0,4347,4349,5,436,0,
0,4348,4347,1,0,0,0,4348,4349,1,0,0,0,4349,4350,1,0,0,0,4350,4351,3,1006,
503,0,4351,1005,1,0,0,0,4352,4355,3,904,452,0,4353,4355,3,1008,504,0,4354,
4352,1,0,0,0,4354,4353,1,0,0,0,4355,1007,1,0,0,0,4356,4359,3,1010,505,0,
4357,4359,3,1014,507,0,4358,4356,1,0,0,0,4358,4357,1,0,0,0,4359,1009,1,0,
0,0,4360,4361,5,118,0,0,4361,4362,5,29,0,0,4362,4363,3,1012,506,0,4363,4364,
5,30,0,0,4364,1011,1,0,0,0,4365,4368,3,1184,592,0,4366,4368,3,1062,531,0,
4367,4365,1,0,0,0,4367,4366,1,0,0,0,4368,1013,1,0,0,0,4369,4370,5,406,0,
0,4370,4371,5,29,0,0,4371,4372,3,1000,500,0,4372,4373,5,30,0,0,4373,1015,
1,0,0,0,4374,4377,3,1018,509,0,4375,4377,3,1020,510,0,4376,4374,1,0,0,0,
4376,4375,1,0,0,0,4377,1017,1,0,0,0,4378,4379,5,445,0,0,4379,4380,5,29,0,
0,4380,4381,3,1242,621,0,4381,4382,5,30,0,0,4382,1019,1,0,0,0,4383,4384,
5,446,0,0,4384,4385,5,29,0,0,4385,4386,3,1242,621,0,4386,4387,5,30,0,0,4387,
1021,1,0,0,0,4388,4394,3,1034,517,0,4389,4394,3,1052,526,0,4390,4394,3,1058,
529,0,4391,4394,3,1062,531,0,4392,4394,3,1072,536,0,4393,4388,1,0,0,0,4393,
4389,1,0,0,0,4393,4390,1,0,0,0,4393,4391,1,0,0,0,4393,4392,1,0,0,0,4394,
1023,1,0,0,0,4395,4396,6,512,-1,0,4396,4397,3,1026,513,0,4397,4403,1,0,0,
0,4398,4399,10,2,0,0,4399,4400,5,48,0,0,4400,4402,3,1026,513,0,4401,4398,
1,0,0,0,4402,4405,1,0,0,0,4403,4401,1,0,0,0,4403,4404,1,0,0,0,4404,1025,
1,0,0,0,4405,4403,1,0,0,0,4406,4409,3,1028,514,0,4407,4409,3,904,452,0,4408,
4406,1,0,0,0,4408,4407,1,0,0,0,4409,1027,1,0,0,0,4410,4413,3,1030,515,0,
4411,4413,3,1032,516,0,4412,4410,1,0,0,0,4412,4411,1,0,0,0,4413,1029,1,0,
0,0,4414,4415,5,447,0,0,4415,4416,5,29,0,0,4416,4417,3,1024,512,0,4417,4418,
5,30,0,0,4418,1031,1,0,0,0,4419,4420,5,255,0,0,4420,4421,5,29,0,0,4421,4422,
3,1024,512,0,4422,4423,5,19,0,0,4423,4424,3,896,448,0,4424,4425,5,30,0,0,
4425,1033,1,0,0,0,4426,4427,3,1036,518,0,4427,1035,1,0,0,0,4428,4429,3,1228,
614,0,4429,4430,5,27,0,0,4430,4431,3,1038,519,0,4431,4432,5,28,0,0,4432,
1037,1,0,0,0,4433,4438,3,868,434,0,4434,4435,5,19,0,0,4435,4437,3,868,434,
0,4436,4434,1,0,0,0,4437,4440,1,0,0,0,4438,4436,1,0,0,0,4438,4439,1,0,0,
0,4439,1039,1,0,0,0,4440,4438,1,0,0,0,4441,4442,6,520,-1,0,4442,4443,3,1042,
521,0,4443,4460,1,0,0,0,4444,4445,10,2,0,0,4445,4446,5,194,0,0,4446,4448,
5,151,0,0,4447,4449,7,13,0,0,4448,4447,1,0,0,0,4448,4449,1,0,0,0,4449,4450,
1,0,0,0,4450,4459,3,1042,521,0,4451,4452,10,1,0,0,4452,4453,5,194,0,0,4453,
4455,5,152,0,0,4454,4456,7,13,0,0,4455,4454,1,0,0,0,4455,4456,1,0,0,0,4456,
4457,1,0,0,0,4457,4459,3,1042,521,0,4458,4444,1,0,0,0,4458,4451,1,0,0,0,
4459,4462,1,0,0,0,4460,4458,1,0,0,0,4460,4461,1,0,0,0,4461,1041,1,0,0,0,
4462,4460,1,0,0,0,4463,4464,6,521,-1,0,4464,4465,3,1044,522,0,4465,4475,
1,0,0,0,4466,4467,10,1,0,0,4467,4468,5,194,0,0,4468,4470,5,153,0,0,4469,
4471,7,13,0,0,4470,4469,1,0,0,0,4470,4471,1,0,0,0,4471,4472,1,0,0,0,4472,
4474,3,1044,522,0,4473,4466,1,0,0,0,4474,4477,1,0,0,0,4475,4473,1,0,0,0,
4475,4476,1,0,0,0,4476,1043,1,0,0,0,4477,4475,1,0,0,0,4478,4481,3,1046,523,
0,4479,4481,3,904,452,0,4480,4478,1,0,0,0,4480,4479,1,0,0,0,4481,1045,1,
0,0,0,4482,4483,5,94,0,0,4483,4484,5,29,0,0,4484,4485,3,1048,524,0,4485,
4486,5,30,0,0,4486,1047,1,0,0,0,4487,4488,5,194,0,0,4488,4489,5,25,0,0,4489,
4490,3,1050,525,0,4490,4491,5,26,0,0,4491,1049,1,0,0,0,4492,4497,3,868,434,
0,4493,4494,5,19,0,0,4494,4496,3,868,434,0,4495,4493,1,0,0,0,4496,4499,1,
0,0,0,4497,4495,1,0,0,0,4497,4498,1,0,0,0,4498,1051,1,0,0,0,4499,4497,1,
0,0,0,4500,4501,3,1054,527,0,4501,1053,1,0,0,0,4502,4503,5,94,0,0,4503,4504,
5,25,0,0,4504,4505,3,1056,528,0,4505,4506,5,26,0,0,4506,1055,1,0,0,0,4507,
4512,3,868,434,0,4508,4509,5,19,0,0,4509,4511,3,868,434,0,4510,4508,1,0,
0,0,4511,4514,1,0,0,0,4512,4510,1,0,0,0,4512,4513,1,0,0,0,4513,1057,1,0,
0,0,4514,4512,1,0,0,0,4515,4516,5,197,0,0,4516,4517,5,94,0,0,4517,4518,5,
25,0,0,4518,4519,3,1060,530,0,4519,4520,5,26,0,0,4520,4530,1,0,0,0,4521,
4522,5,25,0,0,4522,4523,3,1060,530,0,4523,4524,5,26,0,0,4524,4530,1,0,0,
0,4525,4526,5,27,0,0,4526,4527,3,1060,530,0,4527,4528,5,28,0,0,4528,4530,
1,0,0,0,4529,4515,1,0,0,0,4529,4521,1,0,0,0,4529,4525,1,0,0,0,4530,1059,
1,0,0,0,4531,4536,3,868,434,0,4532,4533,5,19,0,0,4533,4535,3,868,434,0,4534,
4532,1,0,0,0,4535,4538,1,0,0,0,4536,4534,1,0,0,0,4536,4537,1,0,0,0,4537,
1061,1,0,0,0,4538,4536,1,0,0,0,4539,4540,3,1064,532,0,4540,1063,1,0,0,0,
4541,4542,5,128,0,0,4542,4543,5,25,0,0,4543,4544,3,1066,533,0,4544,4545,
5,26,0,0,4545,1065,1,0,0,0,4546,4551,3,1068,534,0,4547,4548,5,19,0,0,4548,
4550,3,1068,534,0,4549,4547,1,0,0,0,4550,4553,1,0,0,0,4551,4549,1,0,0,0,
4551,4552,1,0,0,0,4552,1067,1,0,0,0,4553,4551,1,0,0,0,4554,4555,3,1070,535,
0,4555,4556,3,868,434,0,4556,1069,1,0,0,0,4557,4558,3,868,434,0,4558,4559,
5,17,0,0,4559,1071,1,0,0,0,4560,4563,3,1074,537,0,4561,4563,5,198,0,0,4562,
4560,1,0,0,0,4562,4561,1,0,0,0,4563,1073,1,0,0,0,4564,4565,5,129,0,0,4565,
4566,5,25,0,0,4566,4567,3,1076,538,0,4567,4568,5,26,0,0,4568,4574,1,0,0,
0,4569,4570,5,25,0,0,4570,4571,3,1076,538,0,4571,4572,5,26,0,0,4572,4574,
1,0,0,0,4573,4564,1,0,0,0,4573,4569,1,0,0,0,4574,1075,1,0,0,0,4575,4580,
3,1078,539,0,4576,4577,5,19,0,0,4577,4579,3,1078,539,0,4578,4576,1,0,0,0,
4579,4582,1,0,0,0,4580,4578,1,0,0,0,4580,4581,1,0,0,0,4581,1077,1,0,0,0,
4582,4580,1,0,0,0,4583,4584,3,1242,621,0,4584,4585,3,1080,540,0,4585,1079,
1,0,0,0,4586,4587,3,868,434,0,4587,1081,1,0,0,0,4588,4592,3,1084,542,0,4589,
4592,3,1086,543,0,4590,4592,3,1088,544,0,4591,4588,1,0,0,0,4591,4589,1,0,
0,0,4591,4590,1,0,0,0,4592,1083,1,0,0,0,4593,4594,5,200,0,0,4594,4595,5,
29,0,0,4595,4596,3,868,434,0,4596,4597,5,19,0,0,4597,4598,3,868,434,0,4598,
4599,5,30,0,0,4599,4613,1,0,0,0,4600,4601,5,201,0,0,4601,4602,5,29,0,0,4602,
4607,3,868,434,0,4603,4604,5,19,0,0,4604,4606,3,868,434,0,4605,4603,1,0,
0,0,4606,4609,1,0,0,0,4607,4605,1,0,0,0,4607,4608,1,0,0,0,4608,4610,1,0,
0,0,4609,4607,1,0,0,0,4610,4611,5,30,0,0,4611,4613,1,0,0,0,4612,4593,1,0,
0,0,4612,4600,1,0,0,0,4613,1085,1,0,0,0,4614,4615,5,202,0,0,4615,4619,3,
1096,548,0,4616,4618,3,1090,545,0,4617,4616,1,0,0,0,4618,4621,1,0,0,0,4619,
4617,1,0,0,0,4619,4620,1,0,0,0,4620,4623,1,0,0,0,4621,4619,1,0,0,0,4622,
4624,3,1094,547,0,4623,4622,1,0,0,0,4623,4624,1,0,0,0,4624,4625,1,0,0,0,
4625,4626,5,203,0,0,4626,1087,1,0,0,0,4627,4631,5,202,0,0,4628,4630,3,1092,
546,0,4629,4628,1,0,0,0,4630,4633,1,0,0,0,4631,4629,1,0,0,0,4631,4632,1,
0,0,0,4632,4635,1,0,0,0,4633,4631,1,0,0,0,4634,4636,3,1094,547,0,4635,4634,
1,0,0,0,4635,4636,1,0,0,0,4636,4637,1,0,0,0,4637,4638,5,203,0,0,4638,1089,
1,0,0,0,4639,4640,5,146,0,0,4640,4641,3,1098,549,0,4641,4642,5,144,0,0,4642,
4643,3,1102,551,0,4643,1091,1,0,0,0,4644,4645,5,146,0,0,4645,4646,3,814,
407,0,4646,4647,5,144,0,0,4647,4648,3,1102,551,0,4648,1093,1,0,0,0,4649,
4650,5,145,0,0,4650,4651,3,1102,551,0,4651,1095,1,0,0,0,4652,4655,3,906,
453,0,4653,4655,3,812,406,0,4654,4652,1,0,0,0,4654,4653,1,0,0,0,4655,1097,
1,0,0,0,4656,4661,3,1100,550,0,4657,4658,5,19,0,0,4658,4660,3,1100,550,0,
4659,4657,1,0,0,0,4660,4663,1,0,0,0,4661,4659,1,0,0,0,4661,4662,1,0,0,0,
4662,1099,1,0,0,0,4663,4661,1,0,0,0,4664,4672,3,906,453,0,4665,4672,3,820,
410,0,4666,4672,3,826,413,0,4667,4672,3,834,417,0,4668,4672,3,838,419,0,
4669,4672,3,842,421,0,4670,4672,3,844,422,0,4671,4664,1,0,0,0,4671,4665,
1,0,0,0,4671,4666,1,0,0,0,4671,4667,1,0,0,0,4671,4668,1,0,0,0,4671,4669,
1,0,0,0,4671,4670,1,0,0,0,4672,1101,1,0,0,0,4673,4676,3,868,434,0,4674,4676,
5,119,0,0,4675,4673,1,0,0,0,4675,4674,1,0,0,0,4676,1103,1,0,0,0,4677,4678,
5,204,0,0,4678,4681,5,29,0,0,4679,4682,3,868,434,0,4680,4682,5,119,0,0,4681,
4679,1,0,0,0,4681,4680,1,0,0,0,4682,4683,1,0,0,0,4683,4684,5,389,0,0,4684,
4685,3,1202,601,0,4685,4686,5,30,0,0,4686,1105,1,0,0,0,4687,4688,5,94,0,
0,4688,4689,5,29,0,0,4689,4690,3,1040,520,0,4690,4691,5,30,0,0,4691,1107,
1,0,0,0,4692,4693,5,205,0,0,4693,4694,5,29,0,0,4694,4695,3,812,406,0,4695,
4696,5,30,0,0,4696,1109,1,0,0,0,4697,4700,3,1138,569,0,4698,4700,3,1112,
556,0,4699,4697,1,0,0,0,4699,4698,1,0,0,0,4700,1111,1,0,0,0,4701,4709,3,
1114,557,0,4702,4709,3,1186,593,0,4703,4709,3,1188,594,0,4704,4709,3,1190,
595,0,4705,4709,3,1192,596,0,4706,4709,3,1194,597,0,4707,4709,3,1196,598,
0,4708,4701,1,0,0,0,4708,4702,1,0,0,0,4708,4703,1,0,0,0,4708,4704,1,0,0,
0,4708,4705,1,0,0,0,4708,4706,1,0,0,0,4708,4707,1,0,0,0,4709,1113,1,0,0,
0,4710,4717,5,400,0,0,4711,4717,3,1118,559,0,4712,4717,3,1134,567,0,4713,
4717,3,1160,580,0,4714,4717,3,1174,587,0,4715,4717,5,119,0,0,4716,4710,1,
0,0,0,4716,4711,1,0,0,0,4716,4712,1,0,0,0,4716,4713,1,0,0,0,4716,4714,1,
0,0,0,4716,4715,1,0,0,0,4717,1115,1,0,0,0,4718,4721,3,1140,570,0,4719,4721,
3,1112,556,0,4720,4718,1,0,0,0,4720,4719,1,0,0,0,4721,1117,1,0,0,0,4722,
4725,3,1122,561,0,4723,4725,3,1124,562,0,4724,4722,1,0,0,0,4724,4723,1,0,
0,0,4725,1119,1,0,0,0,4726,4729,3,1126,563,0,4727,4729,3,1128,564,0,4728,
4726,1,0,0,0,4728,4727,1,0,0,0,4729,1121,1,0,0,0,4730,4736,3,1126,563,0,
4731,4732,3,1260,630,0,4732,4733,3,1126,563,0,4733,4735,1,0,0,0,4734,4731,
1,0,0,0,4735,4738,1,0,0,0,4736,4734,1,0,0,0,4736,4737,1,0,0,0,4737,1123,
1,0,0,0,4738,4736,1,0,0,0,4739,4745,3,1128,564,0,4740,4741,3,1260,630,0,
4741,4742,3,1128,564,0,4742,4744,1,0,0,0,4743,4740,1,0,0,0,4744,4747,1,0,
0,0,4745,4743,1,0,0,0,4745,4746,1,0,0,0,4746,1125,1,0,0,0,4747,4745,1,0,
0,0,4748,4752,5,7,0,0,4749,4751,3,1132,566,0,4750,4749,1,0,0,0,4751,4754,
1,0,0,0,4752,4750,1,0,0,0,4752,4753,1,0,0,0,4753,4755,1,0,0,0,4754,4752,
1,0,0,0,4755,4756,5,7,0,0,4756,1127,1,0,0,0,4757,4761,5,8,0,0,4758,4760,
3,1132,566,0,4759,4758,1,0,0,0,4760,4763,1,0,0,0,4761,4759,1,0,0,0,4761,
4762,1,0,0,0,4762,4764,1,0,0,0,4763,4761,1,0,0,0,4764,4765,5,8,0,0,4765,
1129,1,0,0,0,4766,4770,5,9,0,0,4767,4769,3,1132,566,0,4768,4767,1,0,0,0,
4769,4772,1,0,0,0,4770,4768,1,0,0,0,4770,4771,1,0,0,0,4771,4773,1,0,0,0,
4772,4770,1,0,0,0,4773,4774,5,9,0,0,4774,1131,1,0,0,0,4775,4776,7,24,0,0,
4776,1133,1,0,0,0,4777,4778,5,457,0,0,4778,4782,5,7,0,0,4779,4781,5,6,0,
0,4780,4779,1,0,0,0,4781,4784,1,0,0,0,4782,4780,1,0,0,0,4782,4783,1,0,0,
0,4783,4801,1,0,0,0,4784,4782,1,0,0,0,4785,4789,5,458,0,0,4786,4788,5,6,
0,0,4787,4786,1,0,0,0,4788,4791,1,0,0,0,4789,4787,1,0,0,0,4789,4790,1,0,
0,0,4790,4792,1,0,0,0,4791,4789,1,0,0,0,4792,4796,5,458,0,0,4793,4795,5,
6,0,0,4794,4793,1,0,0,0,4795,4798,1,0,0,0,4796,4794,1,0,0,0,4796,4797,1,
0,0,0,4797,4800,1,0,0,0,4798,4796,1,0,0,0,4799,4785,1,0,0,0,4800,4803,1,
0,0,0,4801,4799,1,0,0,0,4801,4802,1,0,0,0,4802,4804,1,0,0,0,4803,4801,1,
0,0,0,4804,4836,5,7,0,0,4805,4806,3,1260,630,0,4806,4810,5,7,0,0,4807,4809,
5,6,0,0,4808,4807,1,0,0,0,4809,4812,1,0,0,0,4810,4808,1,0,0,0,4810,4811,
1,0,0,0,4811,4829,1,0,0,0,4812,4810,1,0,0,0,4813,4817,5,458,0,0,4814,4816,
5,6,0,0,4815,4814,1,0,0,0,4816,4819,1,0,0,0,4817,4815,1,0,0,0,4817,4818,
1,0,0,0,4818,4820,1,0,0,0,4819,4817,1,0,0,0,4820,4824,5,458,0,0,4821,4823,
5,6,0,0,4822,4821,1,0,0,0,4823,4826,1,0,0,0,4824,4822,1,0,0,0,4824,4825,
1,0,0,0,4825,4828,1,0,0,0,4826,4824,1,0,0,0,4827,4813,1,0,0,0,4828,4831,
1,0,0,0,4829,4827,1,0,0,0,4829,4830,1,0,0,0,4830,4832,1,0,0,0,4831,4829,
1,0,0,0,4832,4833,5,7,0,0,4833,4835,1,0,0,0,4834,4805,1,0,0,0,4835,4838,
1,0,0,0,4836,4834,1,0,0,0,4836,4837,1,0,0,0,4837,1135,1,0,0,0,4838,4836,
1,0,0,0,4839,4842,3,1138,569,0,4840,4842,3,1140,570,0,4841,4839,1,0,0,0,
4841,4840,1,0,0,0,4842,1137,1,0,0,0,4843,4845,3,1144,572,0,4844,4843,1,0,
0,0,4844,4845,1,0,0,0,4845,4846,1,0,0,0,4846,4847,3,1140,570,0,4847,1139,
1,0,0,0,4848,4851,3,1142,571,0,4849,4851,3,1158,579,0,4850,4848,1,0,0,0,
4850,4849,1,0,0,0,4851,1141,1,0,0,0,4852,4861,3,1146,573,0,4853,4854,3,1148,
574,0,4854,4856,5,39,0,0,4855,4857,3,1148,574,0,4856,4855,1,0,0,0,4856,4857,
1,0,0,0,4857,4861,1,0,0,0,4858,4859,5,39,0,0,4859,4861,3,1148,574,0,4860,
4852,1,0,0,0,4860,4853,1,0,0,0,4860,4858,1,0,0,0,4861,1143,1,0,0,0,4862,
4863,7,25,0,0,4863,1145,1,0,0,0,4864,4869,3,1148,574,0,4865,4869,3,1154,
577,0,4866,4869,3,1152,576,0,4867,4869,3,1150,575,0,4868,4864,1,0,0,0,4868,
4865,1,0,0,0,4868,4866,1,0,0,0,4868,4867,1,0,0,0,4869,1147,1,0,0,0,4870,
4877,5,459,0,0,4871,4873,5,36,0,0,4872,4871,1,0,0,0,4872,4873,1,0,0,0,4873,
4874,1,0,0,0,4874,4876,5,459,0,0,4875,4872,1,0,0,0,4876,4879,1,0,0,0,4877,
4875,1,0,0,0,4877,4878,1,0,0,0,4878,1149,1,0,0,0,4879,4877,1,0,0,0,4880,
4887,5,453,0,0,4881,4883,5,36,0,0,4882,4881,1,0,0,0,4882,4883,1,0,0,0,4883,
4884,1,0,0,0,4884,4886,5,461,0,0,4885,4882,1,0,0,0,4886,4889,1,0,0,0,4887,
4885,1,0,0,0,4887,4888,1,0,0,0,4888,1151,1,0,0,0,4889,4887,1,0,0,0,4890,
4897,5,454,0,0,4891,4893,5,36,0,0,4892,4891,1,0,0,0,4892,4893,1,0,0,0,4893,
4894,1,0,0,0,4894,4896,5,460,0,0,4895,4892,1,0,0,0,4896,4899,1,0,0,0,4897,
4895,1,0,0,0,4897,4898,1,0,0,0,4898,1153,1,0,0,0,4899,4897,1,0,0,0,4900,
4907,5,455,0,0,4901,4903,5,36,0,0,4902,4901,1,0,0,0,4902,4903,1,0,0,0,4903,
4904,1,0,0,0,4904,4906,5,458,0,0,4905,4902,1,0,0,0,4906,4909,1,0,0,0,4907,
4905,1,0,0,0,4907,4908,1,0,0,0,4908,1155,1,0,0,0,4909,4907,1,0,0,0,4910,
4912,3,1144,572,0,4911,4910,1,0,0,0,4911,4912,1,0,0,0,4912,4913,1,0,0,0,
4913,4914,3,1148,574,0,4914,1157,1,0,0,0,4915,4916,3,1142,571,0,4916,4917,
5,456,0,0,4917,4918,3,1156,578,0,4918,1159,1,0,0,0,4919,4923,3,1162,581,
0,4920,4923,3,1164,582,0,4921,4923,3,1166,583,0,4922,4919,1,0,0,0,4922,4920,
1,0,0,0,4922,4921,1,0,0,0,4923,1161,1,0,0,0,4924,4925,5,114,0,0,4925,4926,
3,1168,584,0,4926,1163,1,0,0,0,4927,4928,5,115,0,0,4928,4929,3,1170,585,
0,4929,1165,1,0,0,0,4930,4931,7,26,0,0,4931,4932,3,1172,586,0,4932,1167,
1,0,0,0,4933,4934,3,1120,560,0,4934,1169,1,0,0,0,4935,4936,3,1120,560,0,
4936,1171,1,0,0,0,4937,4938,3,1120,560,0,4938,1173,1,0,0,0,4939,4940,5,118,
0,0,4940,4943,3,1184,592,0,4941,4943,3,1176,588,0,4942,4939,1,0,0,0,4942,
4941,1,0,0,0,4943,1175,1,0,0,0,4944,4946,5,459,0,0,4945,4944,1,0,0,0,4946,
4947,1,0,0,0,4947,4945,1,0,0,0,4947,4948,1,0,0,0,4948,4950,1,0,0,0,4949,
4951,5,6,0,0,4950,4949,1,0,0,0,4951,4952,1,0,0,0,4952,4950,1,0,0,0,4952,
4953,1,0,0,0,4953,4956,1,0,0,0,4954,4957,3,1178,589,0,4955,4957,3,1180,590,
0,4956,4954,1,0,0,0,4956,4955,1,0,0,0,4957,1177,1,0,0,0,4958,4960,5,459,
0,0,4959,4958,1,0,0,0,4960,4961,1,0,0,0,4961,4959,1,0,0,0,4961,4962,1,0,
0,0,4962,4964,1,0,0,0,4963,4965,5,6,0,0,4964,4963,1,0,0,0,4965,4966,1,0,
0,0,4966,4964,1,0,0,0,4966,4967,1,0,0,0,4967,4968,1,0,0,0,4968,4969,7,27,
0,0,4969,1179,1,0,0,0,4970,4972,5,459,0,0,4971,4970,1,0,0,0,4972,4973,1,
0,0,0,4973,4971,1,0,0,0,4973,4974,1,0,0,0,4974,4976,1,0,0,0,4975,4977,5,
6,0,0,4976,4975,1,0,0,0,4977,4978,1,0,0,0,4978,4976,1,0,0,0,4978,4979,1,
0,0,0,4979,4980,1,0,0,0,4980,4982,7,28,0,0,4981,4983,3,1182,591,0,4982,4981,
1,0,0,0,4982,4983,1,0,0,0,4983,1181,1,0,0,0,4984,4986,5,39,0,0,4985,4987,
5,459,0,0,4986,4985,1,0,0,0,4987,4988,1,0,0,0,4988,4986,1,0,0,0,4988,4989,
1,0,0,0,4989,1183,1,0,0,0,4990,4991,3,1120,560,0,4991,1185,1,0,0,0,4992,
4993,3,1036,518,0,4993,1187,1,0,0,0,4994,4995,3,1054,527,0,4995,1189,1,0,
0,0,4996,4997,3,1048,524,0,4997,1191,1,0,0,0,4998,4999,3,1058,529,0,4999,
1193,1,0,0,0,5000,5001,3,1064,532,0,5001,1195,1,0,0,0,5002,5003,3,1074,537,
0,5003,1197,1,0,0,0,5004,5005,6,599,-1,0,5005,5014,5,170,0,0,5006,5014,3,
1202,601,0,5007,5014,3,1226,613,0,5008,5014,3,1230,615,0,5009,5014,3,1234,
617,0,5010,5014,3,156,78,0,5011,5014,3,172,86,0,5012,5014,5,171,0,0,5013,
5004,1,0,0,0,5013,5006,1,0,0,0,5013,5007,1,0,0,0,5013,5008,1,0,0,0,5013,
5009,1,0,0,0,5013,5010,1,0,0,0,5013,5011,1,0,0,0,5013,5012,1,0,0,0,5014,
5026,1,0,0,0,5015,5016,10,9,0,0,5016,5025,7,29,0,0,5017,5018,10,8,0,0,5018,
5025,5,194,0,0,5019,5020,10,7,0,0,5020,5025,5,94,0,0,5021,5022,10,6,0,0,
5022,5023,5,197,0,0,5023,5025,5,94,0,0,5024,5015,1,0,0,0,5024,5017,1,0,0,
0,5024,5019,1,0,0,0,5024,5021,1,0,0,0,5025,5028,1,0,0,0,5026,5024,1,0,0,
0,5026,5027,1,0,0,0,5027,1199,1,0,0,0,5028,5026,1,0,0,0,5029,5031,7,3,0,
0,5030,5029,1,0,0,0,5030,5031,1,0,0,0,5031,5032,1,0,0,0,5032,5033,3,1198,
599,0,5033,1201,1,0,0,0,5034,5040,5,397,0,0,5035,5040,3,1204,602,0,5036,
5040,3,1206,603,0,5037,5040,3,1208,604,0,5038,5040,3,1224,612,0,5039,5034,
1,0,0,0,5039,5035,1,0,0,0,5039,5036,1,0,0,0,5039,5037,1,0,0,0,5039,5038,
1,0,0,0,5040,1203,1,0,0,0,5041,5046,5,398,0,0,5042,5043,5,29,0,0,5043,5044,
3,1148,574,0,5044,5045,5,30,0,0,5045,5047,1,0,0,0,5046,5042,1,0,0,0,5046,
5047,1,0,0,0,5047,1205,1,0,0,0,5048,5058,5,167,0,0,5049,5053,5,29,0,0,5050,
5051,3,1148,574,0,5051,5052,5,19,0,0,5052,5054,1,0,0,0,5053,5050,1,0,0,0,
5053,5054,1,0,0,0,5054,5055,1,0,0,0,5055,5056,3,1148,574,0,5056,5057,5,30,
0,0,5057,5059,1,0,0,0,5058,5049,1,0,0,0,5058,5059,1,0,0,0,5059,5075,1,0,
0,0,5060,5065,5,168,0,0,5061,5062,5,29,0,0,5062,5063,3,1148,574,0,5063,5064,
5,30,0,0,5064,5066,1,0,0,0,5065,5061,1,0,0,0,5065,5066,1,0,0,0,5066,5075,
1,0,0,0,5067,5072,5,169,0,0,5068,5069,5,29,0,0,5069,5070,3,1148,574,0,5070,
5071,5,30,0,0,5071,5073,1,0,0,0,5072,5068,1,0,0,0,5072,5073,1,0,0,0,5073,
5075,1,0,0,0,5074,5048,1,0,0,0,5074,5060,1,0,0,0,5074,5067,1,0,0,0,5075,
1207,1,0,0,0,5076,5079,3,1210,605,0,5077,5079,3,1222,611,0,5078,5076,1,0,
0,0,5078,5077,1,0,0,0,5079,1209,1,0,0,0,5080,5083,3,1212,606,0,5081,5083,
3,1220,610,0,5082,5080,1,0,0,0,5082,5081,1,0,0,0,5083,1211,1,0,0,0,5084,
5087,3,1214,607,0,5085,5087,3,1216,608,0,5086,5084,1,0,0,0,5086,5085,1,0,
0,0,5087,1213,1,0,0,0,5088,5108,5,173,0,0,5089,5108,5,174,0,0,5090,5108,
5,175,0,0,5091,5108,5,176,0,0,5092,5108,5,177,0,0,5093,5108,5,178,0,0,5094,
5108,5,179,0,0,5095,5100,5,172,0,0,5096,5097,5,29,0,0,5097,5098,3,1148,574,
0,5098,5099,5,30,0,0,5099,5101,1,0,0,0,5100,5096,1,0,0,0,5100,5101,1,0,0,
0,5101,5108,1,0,0,0,5102,5108,5,180,0,0,5103,5105,5,181,0,0,5104,5103,1,
0,0,0,5104,5105,1,0,0,0,5105,5106,1,0,0,0,5106,5108,3,1218,609,0,5107,5088,
1,0,0,0,5107,5089,1,0,0,0,5107,5090,1,0,0,0,5107,5091,1,0,0,0,5107,5092,
1,0,0,0,5107,5093,1,0,0,0,5107,5094,1,0,0,0,5107,5095,1,0,0,0,5107,5102,
1,0,0,0,5107,5104,1,0,0,0,5108,1215,1,0,0,0,5109,5123,5,382,0,0,5110,5123,
5,383,0,0,5111,5123,5,384,0,0,5112,5123,5,385,0,0,5113,5123,5,386,0,0,5114,
5123,5,387,0,0,5115,5116,5,381,0,0,5116,5117,5,29,0,0,5117,5118,3,1148,574,
0,5118,5119,5,30,0,0,5119,5123,1,0,0,0,5120,5121,5,249,0,0,5121,5123,3,1218,
609,0,5122,5109,1,0,0,0,5122,5110,1,0,0,0,5122,5111,1,0,0,0,5122,5112,1,
0,0,0,5122,5113,1,0,0,0,5122,5114,1,0,0,0,5122,5115,1,0,0,0,5122,5120,1,
0,0,0,5123,1217,1,0,0,0,5124,5136,5,375,0,0,5125,5136,5,376,0,0,5126,5136,
5,377,0,0,5127,5136,5,378,0,0,5128,5136,5,379,0,0,5129,5136,5,380,0,0,5130,
5131,5,374,0,0,5131,5132,5,29,0,0,5132,5133,3,1148,574,0,5133,5134,5,30,
0,0,5134,5136,1,0,0,0,5135,5124,1,0,0,0,5135,5125,1,0,0,0,5135,5126,1,0,
0,0,5135,5127,1,0,0,0,5135,5128,1,0,0,0,5135,5129,1,0,0,0,5135,5130,1,0,
0,0,5136,1219,1,0,0,0,5137,5138,7,30,0,0,5138,5139,5,29,0,0,5139,5142,3,
1148,574,0,5140,5141,5,19,0,0,5141,5143,3,1148,574,0,5142,5140,1,0,0,0,5142,
5143,1,0,0,0,5143,5144,1,0,0,0,5144,5145,5,30,0,0,5145,1221,1,0,0,0,5146,
5164,5,358,0,0,5147,5164,5,359,0,0,5148,5164,5,360,0,0,5149,5164,5,361,0,
0,5150,5164,5,362,0,0,5151,5152,5,357,0,0,5152,5153,5,29,0,0,5153,5156,3,
1148,574,0,5154,5155,5,19,0,0,5155,5157,3,1148,574,0,5156,5154,1,0,0,0,5156,
5157,1,0,0,0,5157,5158,1,0,0,0,5158,5159,5,30,0,0,5159,5164,1,0,0,0,5160,
5164,5,277,0,0,5161,5162,5,347,0,0,5162,5164,5,282,0,0,5163,5146,1,0,0,0,
5163,5147,1,0,0,0,5163,5148,1,0,0,0,5163,5149,1,0,0,0,5163,5150,1,0,0,0,
5163,5151,1,0,0,0,5163,5160,1,0,0,0,5163,5161,1,0,0,0,5164,1223,1,0,0,0,
5165,5166,7,31,0,0,5166,1225,1,0,0,0,5167,5168,7,32,0,0,5168,1227,1,0,0,
0,5169,5170,7,29,0,0,5170,1229,1,0,0,0,5171,5172,5,128,0,0,5172,5173,5,23,
0,0,5173,5174,3,1232,616,0,5174,5175,5,19,0,0,5175,5176,3,1198,599,0,5176,
5177,5,24,0,0,5177,1231,1,0,0,0,5178,5179,3,1202,601,0,5179,1233,1,0,0,0,
5180,5181,5,129,0,0,5181,5183,5,25,0,0,5182,5184,3,1236,618,0,5183,5182,
1,0,0,0,5183,5184,1,0,0,0,5184,5185,1,0,0,0,5185,5186,5,26,0,0,5186,1235,
1,0,0,0,5187,5192,3,1238,619,0,5188,5189,5,19,0,0,5189,5191,3,1238,619,0,
5190,5188,1,0,0,0,5191,5194,1,0,0,0,5192,5190,1,0,0,0,5192,5193,1,0,0,0,
5193,1237,1,0,0,0,5194,5192,1,0,0,0,5195,5197,3,1242,621,0,5196,5198,3,170,
85,0,5197,5196,1,0,0,0,5197,5198,1,0,0,0,5198,5199,1,0,0,0,5199,5200,3,1198,
599,0,5200,1239,1,0,0,0,5201,5202,5,14,0,0,5202,5203,3,1244,622,0,5203,1241,
1,0,0,0,5204,5207,3,1252,626,0,5205,5207,3,1258,629,0,5206,5204,1,0,0,0,
5206,5205,1,0,0,0,5207,1243,1,0,0,0,5208,5211,3,1254,627,0,5209,5211,3,1258,
629,0,5210,5208,1,0,0,0,5210,5209,1,0,0,0,5211,1245,1,0,0,0,5212,5215,3,
1248,624,0,5213,5215,3,1256,628,0,5214,5212,1,0,0,0,5214,5213,1,0,0,0,5215,
1247,1,0,0,0,5216,5223,3,1252,626,0,5217,5223,3,1240,620,0,5218,5223,5,89,
0,0,5219,5223,3,1140,570,0,5220,5223,3,1134,567,0,5221,5223,5,75,0,0,5222,
5216,1,0,0,0,5222,5217,1,0,0,0,5222,5218,1,0,0,0,5222,5219,1,0,0,0,5222,
5220,1,0,0,0,5222,5221,1,0,0,0,5223,1249,1,0,0,0,5224,5227,3,1252,626,0,
5225,5227,3,1254,627,0,5226,5224,1,0,0,0,5226,5225,1,0,0,0,5227,1251,1,0,
0,0,5228,5232,5,462,0,0,5229,5231,5,3,0,0,5230,5229,1,0,0,0,5231,5234,1,
0,0,0,5232,5230,1,0,0,0,5232,5233,1,0,0,0,5233,1253,1,0,0,0,5234,5232,1,
0,0,0,5235,5237,5,3,0,0,5236,5235,1,0,0,0,5237,5238,1,0,0,0,5238,5236,1,
0,0,0,5238,5239,1,0,0,0,5239,1255,1,0,0,0,5240,5278,5,4,0,0,5241,5278,5,
46,0,0,5242,5278,5,47,0,0,5243,5278,5,48,0,0,5244,5278,5,18,0,0,5245,5278,
5,13,0,0,5246,5278,5,40,0,0,5247,5278,5,49,0,0,5248,5278,5,50,0,0,5249,5278,
5,51,0,0,5250,5278,5,53,0,0,5251,5278,5,52,0,0,5252,5278,5,54,0,0,5253,5278,
5,55,0,0,5254,5278,5,56,0,0,5255,5278,5,57,0,0,5256,5278,5,58,0,0,5257,5278,
5,59,0,0,5258,5278,5,60,0,0,5259,5278,5,61,0,0,5260,5278,5,63,0,0,5261,5278,
5,24,0,0,5262,5278,5,64,0,0,5263,5278,5,65,0,0,5264,5278,5,68,0,0,5265,5278,
5,69,0,0,5266,5278,5,70,0,0,5267,5278,5,71,0,0,5268,5278,5,72,0,0,5269,5278,
5,73,0,0,5270,5278,5,74,0,0,5271,5278,3,1118,559,0,5272,5278,3,1168,584,
0,5273,5278,3,1172,586,0,5274,5278,3,1258,629,0,5275,5278,3,1184,592,0,5276,
5278,3,1170,585,0,5277,5240,1,0,0,0,5277,5241,1,0,0,0,5277,5242,1,0,0,0,
5277,5243,1,0,0,0,5277,5244,1,0,0,0,5277,5245,1,0,0,0,5277,5246,1,0,0,0,
5277,5247,1,0,0,0,5277,5248,1,0,0,0,5277,5249,1,0,0,0,5277,5250,1,0,0,0,
5277,5251,1,0,0,0,5277,5252,1,0,0,0,5277,5253,1,0,0,0,5277,5254,1,0,0,0,
5277,5255,1,0,0,0,5277,5256,1,0,0,0,5277,5257,1,0,0,0,5277,5258,1,0,0,0,
5277,5259,1,0,0,0,5277,5260,1,0,0,0,5277,5261,1,0,0,0,5277,5262,1,0,0,0,
5277,5263,1,0,0,0,5277,5264,1,0,0,0,5277,5265,1,0,0,0,5277,5266,1,0,0,0,
5277,5267,1,0,0,0,5277,5268,1,0,0,0,5277,5269,1,0,0,0,5277,5270,1,0,0,0,
5277,5271,1,0,0,0,5277,5272,1,0,0,0,5277,5273,1,0,0,0,5277,5274,1,0,0,0,
5277,5275,1,0,0,0,5277,5276,1,0,0,0,5278,1257,1,0,0,0,5279,5282,3,1124,562,
0,5280,5282,3,1130,565,0,5281,5279,1,0,0,0,5281,5280,1,0,0,0,5282,1259,1,
0,0,0,5283,5286,3,1262,631,0,5284,5286,5,452,0,0,5285,5283,1,0,0,0,5285,
5284,1,0,0,0,5286,5287,1,0,0,0,5287,5285,1,0,0,0,5287,5288,1,0,0,0,5288,
1261,1,0,0,0,5289,5292,3,1264,632,0,5290,5292,3,1266,633,0,5291,5289,1,0,
0,0,5291,5290,1,0,0,0,5292,1263,1,0,0,0,5293,5297,7,33,0,0,5294,5296,5,2,
0,0,5295,5294,1,0,0,0,5296,5299,1,0,0,0,5297,5295,1,0,0,0,5297,5298,1,0,
0,0,5298,5300,1,0,0,0,5299,5297,1,0,0,0,5300,5301,5,43,0,0,5301,1265,1,0,
0,0,5302,5303,5,44,0,0,5303,5304,5,2,0,0,5304,5305,5,45,0,0,5305,1267,1,
0,0,0,5306,5307,7,34,0,0,5307,1269,1,0,0,0,5308,5309,7,35,0,0,5309,1271,
1,0,0,0,520,1276,1280,1289,1293,1299,1303,1307,1311,1314,1320,1326,1328,
1332,1337,1343,1350,1358,1360,1370,1385,1389,1394,1399,1404,1407,1412,1421,
1428,1433,1451,1478,1481,1488,1493,1499,1501,1505,1512,1515,1525,1530,1540,
1543,1548,1558,1563,1570,1575,1580,1587,1592,1599,1611,1617,1622,1625,1632,
1640,1645,1657,1660,1667,1675,1680,1692,1697,1702,1709,1712,1721,1725,1730,
1740,1747,1765,1774,1780,1783,1789,1801,1805,1809,1819,1831,1835,1840,1847,
1851,1855,1859,1868,1873,1880,1886,1891,1894,1899,1903,1909,1914,1924,1929,
1932,1938,1945,1948,1965,1970,1974,1977,1985,1992,2007,2014,2023,2050,2053,
2058,2078,2081,2089,2092,2103,2132,2136,2145,2153,2159,2164,2170,2178,2183,
2189,2197,2202,2208,2216,2222,2228,2236,2246,2252,2260,2265,2268,2277,2294,
2296,2304,2311,2317,2335,2341,2345,2351,2358,2363,2374,2379,2386,2394,2397,
2406,2420,2425,2429,2433,2437,2439,2443,2451,2457,2465,2471,2476,2492,2501,
2508,2513,2516,2523,2535,2540,2542,2544,2548,2550,2553,2560,2564,2570,2574,
2577,2584,2589,2596,2601,2604,2607,2610,2614,2616,2623,2628,2639,2646,2657,
2674,2680,2689,2691,2694,2706,2717,2730,2733,2735,2742,2748,2762,2771,2781,
2791,2797,2808,2812,2819,2822,2825,2828,2833,2837,2851,2864,2868,2877,2917,
2925,2929,2935,2938,2941,2944,2947,2952,2955,2958,2961,2964,2967,2977,2981,
2986,2990,2993,2997,3000,3003,3009,3014,3017,3022,3025,3030,3033,3038,3041,
3052,3065,3076,3082,3092,3101,3140,3147,3155,3165,3176,3182,3192,3201,3238,
3252,3259,3272,3285,3301,3305,3320,3351,3362,3373,3382,3386,3396,3402,3420,
3430,3436,3454,3464,3470,3491,3495,3501,3524,3530,3551,3557,3581,3591,3610,
3653,3667,3674,3683,3686,3694,3702,3713,3717,3721,3727,3731,3744,3758,3765,
3769,3773,3777,3782,3786,3796,3800,3810,3814,3820,3837,3839,3850,3854,3861,
3865,3868,3872,3879,3890,3892,3904,3906,3910,3916,3923,3939,3955,3960,4050,
4060,4065,4075,4080,4084,4090,4099,4117,4131,4133,4147,4154,4162,4171,4189,
4198,4200,4214,4226,4234,4236,4241,4248,4254,4257,4263,4266,4272,4275,4281,
4284,4290,4293,4297,4301,4305,4315,4323,4325,4334,4342,4344,4348,4354,4358,
4367,4376,4393,4403,4408,4412,4438,4448,4455,4458,4460,4470,4475,4480,4497,
4512,4529,4536,4551,4562,4573,4580,4591,4607,4612,4619,4623,4631,4635,4654,
4661,4671,4675,4681,4699,4708,4716,4720,4724,4728,4736,4745,4752,4761,4770,
4782,4789,4796,4801,4810,4817,4824,4829,4836,4841,4844,4850,4856,4860,4868,
4872,4877,4882,4887,4892,4897,4902,4907,4911,4922,4942,4947,4952,4956,4961,
4966,4973,4978,4982,4988,5013,5024,5026,5030,5039,5046,5053,5058,5065,5072,
5074,5078,5082,5086,5100,5104,5107,5122,5135,5142,5156,5163,5183,5192,5197,
5206,5210,5214,5222,5226,5232,5238,5277,5281,5285,5287,5291,5297];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class GqlParser extends antlr4.Parser {

    static grammarFileName = "java-escape";
    static literalNames = [ null, null, null, null, null, null, "' '", "'''", 
                            "'\"'", "'`'", "'\\'", "'+'", "'-'", null, "'&'", 
                            "'*'", "'^'", "':'", null, "','", "'$'", "'='", 
                            "'!'", "'<'", "'>'", "'{'", "'}'", "'['", "']'", 
                            "'('", "')'", "'?'", "';'", "'/'", null, "'~'", 
                            "'_'", "'|'", "'%'", "'.'", null, "'\\u000D'", 
                            "'\\u000A'", null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'inDegree'", "'outDegree'", 
                            "'stDev'", "'stDevP'", "'percentileCont'", "'percentileDist'", 
                            "'lTrim'", "'rTrim'", "'startNode'", "'endNode'", 
                            "'tail'", "'toLower'", "'toUpper'", "'normalForm'", 
                            "'\\u0009'", null, "'0b'", "'0o'", "'0x'", "'E'", 
                            "'X'" ];
    static symbolicNames = [ null, "ON", "GQL_TERMINAL_CHAR", "GQL_LANGUAGE_CHAR", 
                             "GQL_SPECIAL_CHAR", "COMPARE_OPERATOR", "SPACE", 
                             "QUOTE", "DOUBLE_QUOTE", "GRAVE_ACCENT", "REVERS_SOLIDUS", 
                             "PLUS", "MINUS", "DOUBLE_MINUS", "AMPERSAND", 
                             "ASTERISK", "CIRCUMFLEX", "COLON", "DOUBLE_COLON", 
                             "COMMA", "DOLLAR", "EQUALS", "EXCLAMATION", 
                             "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", 
                             "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", 
                             "RIGHT_BRACKET", "LEFT_PAREN", "RIGHT_PAREN", 
                             "QUESTION_MARK", "SEMICOLON", "SOLIDUS", "DOUBLE_SOLIDUS", 
                             "TILDE", "UNDERSCORE", "VERTICAL_BAR", "PERCENT", 
                             "PERIOD", "DOUBLE_PERIOD", "CARRIAGE_RETURN", 
                             "RETURN", "NEW_LINE", "BRACKETED_COMMENT_START", 
                             "BRACKETED_CoMMENT_END", "BRACKER_MINUS_RIGHT_ARROW", 
                             "BRACKET_TILDE_RIGHT_ARROW", "CONCATENATION_OPERATOR", 
                             "GRATER_THEN_OPERATOR", "GREATER_THEN_OR_EQUALS", 
                             "LEFT_ARROW_MIUNUS", "LEFT_ARROW_TILDE", "LEFT_ARROW_MINUS_RIGHT_BRACKET", 
                             "LEFT_ARROW_RIGHT_BRACKET", "LEFT_MINUS_RIGHT", 
                             "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THEN", 
                             "LESS_THEN_OR_EQUALS", "MINUS_LEFT_BRACKET", 
                             "MINUS_SLESH", "MINUS_RIGHT_ARROW", "NOT_EQUALS", 
                             "RIGHT_BRACKET_MINUS", "RIGHT_BRACKET_TILDE", 
                             "RIGHT_BRACKET_RIGHT_ARROW", "RIGHT_ARROW_TILDE", 
                             "SLASH_MINUS", "SLASH_MINUS_RIGHT", "SLASH_TILDE", 
                             "SLASH_TILDE_RIGHT", "TILDE_LEFT_BRACKET", 
                             "TILDE_RIGHT_ARROW", "TILDE_SLASH", "MULTISET_ALT_OPERATOR", 
                             "ESCAPED_CHAR", "ESCAPED_REVERSE_SOLIDUS", 
                             "ESCAPED_QUOTE", "ESCAPED_DOUBLE_QUOTE", "ESCAPED_TAB", 
                             "ESCAPED_BACKSPACE", "ESCAPED_NEWLINE", "ESCAPED_CARRIAGE_RETURN", 
                             "ESCAPED_FORM_FEED", "UNICODE_ESCAPED_VALUE", 
                             "UNICODE4_ESCAPED_VALUE", "UNICODE6_ESCAPED_VALUE", 
                             "ESCAPED_GRAVE_ACCENT", "KEY_WORD", "RESERVED_WORD", 
                             "NON_RESERVED_WORD", "TRYGONOMETRIC_FUNCTION_NAME", 
                             "SESSION", "SET", "SESSION_SET", "SCHEMA", 
                             "TIME_ZONE", "PARAMETER", "REMOVE", "NOT", 
                             "EXISTS", "IF_EXISTS", "IF_NOT_EXISTS", "CLEAR", 
                             "START_TRANSACTION", "READ", "READ_ONLY", "READ_WRITE", 
                             "ROLLBACK", "COMMIT", "TRUE", "FALSE", "UNKNOWN", 
                             "DATE", "TIME", "DATETIME", "TIMESTAMP", "DURATION", 
                             "NULL", "EDGE", "RELATIONSHIP", "EDGES", "RELATIONSHIPS", 
                             "NODE", "VERTEX", "LIST", "ARRAY", "MAP", "RECORD", 
                             "MUTABLE", "FINAL", "CATALOG", "PROCEDURE", 
                             "QUERY", "GRAPH", "TABLE", "DETACH", "REPLACE", 
                             "PROPERTY", "TYPE", "LABEL", "LABELS", "FUNCTION", 
                             "THEN", "ELSE", "WHEN", "INSERT", "OPTIONAL", 
                             "MERGE", "OTHERWISE", "UNION", "EXCEPT", "INTERSECT", 
                             "COST", "DEFAULT", "PROFILE", "EXPLAIN", "PATH", 
                             "WALK", "TRAIL", "SIMPLE", "ACYCLIC", "BOOL", 
                             "BOOLEAN", "STRING", "VARCHAR", "BYTES", "BINARY", 
                             "VARBINARY", "ANY", "NOTHING", "INT", "INT8", 
                             "INT16", "INT32", "INT64", "INT128", "INT256", 
                             "SMALLINT", "BIGINT", "SIGNED", "DESTINATION", 
                             "SOURCE", "DIRECTED", "UNDIRECTED", "CONNECTING", 
                             "LABELED", "NORMALIZED", "ALL_DIFFERENT", "SAME", 
                             "LEADING", "TRAILING", "BOTH", "MULTISET", 
                             "ALL", "DISTINCT", "ORDERED", "UNIT", "VALUE", 
                             "NULLIF", "COALESCE", "CASE", "END", "CAST", 
                             "ELEMENT_ID", "BINDING", "CLASS_ORIGIN", "COMMAND_FUNCTION", 
                             "COMMAND_FUNCTION_CODE", "CONDITION_NUMBER", 
                             "FIRST", "GRAPHS", "GROUPS", "INDEX", "LAST", 
                             "MESSAGE_TEXT", "MMORE", "NFC", "NFD", "NFKC", 
                             "NFKD", "NODES", "NUMBER", "ONLY", "ORDINALITY", 
                             "PATTERN", "PATTERNS", "PROPERTIES", "RETURNED_GQLSTATUS", 
                             "ZONE", "WRITE", "VERTICES", "TYPES", "TRANSACTION", 
                             "TIES", "TABLES", "SUBCLASS_ORIGIN", "SHORTEST", 
                             "ZERO", "YIELD", "XOR", "WITHOUT", "WITH", 
                             "WHERE", "VALUES", "USE", "UPPER", "UNWIND", 
                             "UNSIGNED", "UNNEST", "UNIQUE", "UNIT_TABLE", 
                             "UNIT_BINDING_TABLE", "TRUNCATE", "TRIM", "REGEX", 
                             "TRANSLATE_REGEX", "SUM", "SUBSTRING", "SUBSTRING_REGEX", 
                             "START", "STARTS", "SINGLE", "SSKIP", "SELECT", 
                             "SCHEMAS", "SCHEMATA", "SCALAR", "RIGHT", "REVOKE", 
                             "RESULT", "RESET", "REQUIRE", "RENAME", "REFERENCE", 
                             "RECORDS", "REAL", "QUERIES", "PROJECT", "PRODUCT", 
                             "PROCEDURES", "PRECISION", "POSITION_REGEX", 
                             "PARTITION", "PATHS", "ORDER", "OFFSET", "OCCURRENCES_REGEX", 
                             "NUMERIC", "NULLS", "NORMALIZE", "NEW", "MULTIPLE", 
                             "MULTI", "MIN", "MAX", "MATCH", "MANDATORY", 
                             "LOWER", "LOCALTIMESTAMP", "LOCALTIME", "LOCALDATETIME", 
                             "LIMIT", "LIKE", "LIKE_REGEX", "LET", "LEFT", 
                             "KEEP", "IN", "ADD", "AGGREGATE", "ALIAS", 
                             "AND", "ASC", "ASCENDING", "AVG", "BY", "CALL", 
                             "CEILING", "CHARACTER", "CLONE", "CLOSE", "COLLECT", 
                             "CONSTRAINT", "CONSTANT", "CONSTRUCT", "COPY", 
                             "COUNT", "CURRENT", "CURRENT_DATE", "CURRENT_GRAPH", 
                             "CURRENT_PROPERTY_GRAPH", "CURRENT_ROLE", "CURRENT_SCHEMA", 
                             "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                             "CREATE", "DATA", "DEC", "DECIMAL", "DELETE", 
                             "DESC", "DESCENDING", "DIRECTORIES", "DIRECTORY", 
                             "DOUBLE", "DROP", "ENDS", "EMPTY", "EMPTY_BINDING_TABLE", 
                             "EMPTY_GRAPH", "EMPTY_PROPERTY_GRAPH", "EMPTY_TABLE", 
                             "EXISTING", "FILTER", "FLOAT", "FLOAT16", "FLOAT32", 
                             "FLOAT64", "FLOAT128", "FLOAT256", "FOR", "FROM", 
                             "FUNCTIONS", "GQLSTATUS", "GRANT", "GROUP", 
                             "HAVING", "HOME", "HOME_GRAPH", "HOME_PROPERTY_GRAPH", 
                             "HOME_SCHEMA", "INTEGER", "INTEGER8", "INTEGER16", 
                             "INTEGER32", "INTEGER64", "INTEGER128", "INTEGER256", 
                             "UINT", "UINT8", "UINT16", "UINT32", "UINT64", 
                             "UINT128", "UINT256", "AT", "AS", "DO", "IS", 
                             "IF", "OF", "OR", "TO", "PATH_MODE", "BOOL_TYPE", 
                             "STRING_TYPE", "AS_OR_EQUALS", "TRUTH_VALUE", 
                             "TRIM_SPEC", "LENGTH", "BYTE_LENGTH", "OCTET_LENGTH", 
                             "CHARACTER_LENGTH", "ABS", "MOD", "LOG10", 
                             "LOG", "LN", "EXP", "POWER", "SQRT", "FLOOR", 
                             "CEIL", "SIN", "COS", "TAN", "COT", "SINH", 
                             "COSH", "TANH", "COTH", "ASIN", "ACOS", "ATAN", 
                             "ACOT", "DEGREES", "RADIANS", "YEAR", "MONTH", 
                             "DAY", "HOUR", "MINUTE", "SECOND", "SIGN", 
                             "IN_DEGREE", "OUT_DEGREE", "ST_DEV", "ST_DEV_P", 
                             "PERCENTILE_CONT", "PERCENTILE_DIST", "L_TRIM", 
                             "R_TRIM", "START_NODE", "END_NODE", "TAIL", 
                             "TO_LOWER", "TO_UPPER", "NORMAL_FORM", "TAB", 
                             "WHITESPACE", "START2", "START8", "START16", 
                             "ESEPARATOR", "BYTE_STRING_START", "DIGIT16", 
                             "DIGIT10", "DIGIT8", "DIGIT2", "LETTER" ];
    static ruleNames = [ "gqlParser", "requestParameterSet", "gqlProgram", 
                         "mainActivity", "sessionActivity", "sessionParameterCommand", 
                         "transactionActivity", "preamble", "preambleOption", 
                         "preambleOptionIdentifier", "sessionSetCommand", 
                         "sessionSetSchemaClause", "sessionSetGraphClause", 
                         "sessionSetTimeZoneClause", "setTimeZoneValue", 
                         "sessionSetParameterClause", "sessionParameterFlag", 
                         "sessionParameter", "sessionRemoveCommand", "sessionClearCommand", 
                         "sessionCloseCommand", "startTransactionCommand", 
                         "endTransactionCommand", "transactionCharacteristics", 
                         "transactionMode", "transactionAccessMode", "implementationDefinedAccessMode", 
                         "rollbackCommand", "commitCommand", "nestedProcedureSpecification", 
                         "procedureSpecification", "nestedCatalogModifyingProcedureSpecification", 
                         "catalogModifyingProcedureSpecification", "nestedDataModifyingProcedureSpecification", 
                         "dataModifyingProcedureSpecification", "nestedQuerySpecification", 
                         "querySpecification", "nestedFunctionSpecification", 
                         "functionSpecification", "procedureBody", "staticVariableDefinitionBlock", 
                         "bindingVariableDefinitionBlock", "statementBlock", 
                         "thenStatement", "staticVariableDefinition", "procedureVariableDefinition", 
                         "procedureInitializer", "queryVariableDefinition", 
                         "queryInitializer", "functionVariableDefinition", 
                         "functionInitializer", "compactVariableDeclarationList", 
                         "compactVariableDeclaration", "bindingVariableDeclaration", 
                         "compactVariableDefinitionList", "compactVariableDefinition", 
                         "compactValueVariableDefinitionList", "compactValueVariableDefinition", 
                         "bindingVariableDefinitionList", "bindingVariableDefinition", 
                         "parameterDefinition", "graphVariableDeclaration", 
                         "graphVariableDefinition", "graphParameterDefinition", 
                         "graphVariable", "graphInitializer", "bindingTableVariableDeclaration", 
                         "bindingTableVariableDefinition", "bindingTableParameterDefinition", 
                         "bindingTableVariable", "bindingTableInitializer", 
                         "valueVariableDeclaration", "valueVariableDefinition", 
                         "valueParameterDefinition", "valueInitializer", 
                         "primaryResultObjectExpression", "graphExpression", 
                         "copyGraphExpression", "graphTypeExpression", "asGraphType", 
                         "copyGraphTypeExpression", "likeGraphExpression", 
                         "ofGraphType", "likeGraphExpressionShorthand", 
                         "ofBindingTableType", "ofTypePrefix", "bindingTableTypeExpression", 
                         "bindingTableType", "likeBindingTableType", "likeBindingTableShorthand", 
                         "statement", "dataModifyingStatement", "queryStatement", 
                         "callProcedureStatement", "statementMode", "simpleCatalogModifyingStatement", 
                         "primitiveCatalogModifyingStatement", "simpleDataAccessingStatement", 
                         "simpleDataModifyingStatement", "primitiveDataModifyingStatement", 
                         "simpleQueryStatement", "simpleDataReadingStatement", 
                         "simpleDataTransformingStatement", "primitiveDataTransformingStatement", 
                         "linearCatalogModifyingStatement", "createSchemaStatement", 
                         "dropSchemaStatement", "createGraphStatement", 
                         "graphSource", "graphSpecification", "nestedGraphQuerySpecification", 
                         "nestedAmbientDataModifyingProcedureSpecification", 
                         "dropGraphStatement", "createGraphTypeStatement", 
                         "graphTypeInitializer", "graphTypeSpecification", 
                         "nestedGraphTypeSpecification", "graphTypeSpecificationBody", 
                         "elementTypeDefinitionList", "elementTypeDefinition", 
                         "nodeTypeDefinition", "nodeTypeFiller", "nodeTypeLabelSetDefinition", 
                         "nodeTypePropertyTypeSetDefinition", "edgeTypeDefinition", 
                         "edgeTypeFiller", "edgeTypeLabelSetDefinition", 
                         "edgeTypePropertyTypeSetDefinition", "fullEdgeTypePattern", 
                         "fullEdgeTypePatternPointingRight", "fullEdgeTypePatternPointingLeft", 
                         "fullEdgeTypePatternAnyDirection", "arcTypePointingRight", 
                         "arcTypePointingLeft", "arcTypeAnyDirection", "arcTypeFiller", 
                         "abbreviatedEdgeTypePattern", "abbreviatedEdgeTypePatternPointingRight", 
                         "abbreviatedEdgeTypePatternPointingLeft", "abbreviatedEdgeTypePatternAnyDirection", 
                         "sourceNodeTypeReference", "destinationNodeTypeReference", 
                         "edgeKind", "endpointDefinition", "endpointPairDefinition", 
                         "endpointPairDefinitionPointingRight", "endpointPairDefinitionPointingLeft", 
                         "endpointPairDefinitionAnyDirection", "connectorPointingRight", 
                         "connectorAnyDirection", "labelSetDefinition", 
                         "propertyTypeSetDefinition", "propertyTypeDefinitionList", 
                         "propertyTypeDefinition", "dropGraphTypeStatement", 
                         "createProcedureStatement", "dropProcedureStatement", 
                         "createQueryStatement", "dropQueryStatement", "createFunctionStatement", 
                         "dropFunctionStatement", "callCatalogModifyingProcedureStatement", 
                         "linearDataModifyingStatement", "focusedLinearDataModifyingStatement", 
                         "focusedLinearDataModifyingStatementBody", "ambientLinearDataModifyingStatement", 
                         "conditionalDataModifyingStatement", "whenThenLinearDataModifyingStatementBranch", 
                         "elseLinearDataModifyingStatementBranch", "whenClause", 
                         "doStatement", "insertStatement", "mergeStatement", 
                         "setStatement", "setItemList", "setItem", "setPropertyItem", 
                         "setAllPropertiesItem", "setLabelItem", "labelSetExpression", 
                         "removeStatement", "removeItemList", "removeItem", 
                         "removePropertyItem", "removeLabelItem", "deleteStatement", 
                         "deleteItemList", "compositeQueryStatement", "conditionalQueryStatement", 
                         "whenThenLinearQueryBranch", "elseLinearQueryBranch", 
                         "compositeQueryExpression", "queryConjunction", 
                         "setOperator", "linearQueryStatement", "ambientLinearQueryStatement", 
                         "focusedLinearQueryStatement", "focusedLinearQueryStatementBody", 
                         "simpleLinearQueryStatement", "matchStatement", 
                         "callQueryStatement", "mandatoryStatement", "optionalStatement", 
                         "filterStatement", "letStatement", "aggregateStatement", 
                         "forStatement", "forItemList", "forItem", "forItemAlias", 
                         "forOrdinalityOrIndex", "orderByAndPageStatement", 
                         "callFunctionStatement", "primitiveResultStatement", 
                         "returnStatement", "returnStatementBody", "returnItemList", 
                         "returnItem", "returnItemAlias", "selectStatement", 
                         "selectItemList", "selectItem", "selectItemAlias", 
                         "havingClause", "selectStatementBody", "selectGraphMatchList", 
                         "selectGraphMatch", "selectQuerySpecification", 
                         "projectStatement", "fromGraphClause", "useGraphClause", 
                         "atSchemaClause", "ofTypeSignature", "typeSignature", 
                         "parenthesizedFormalParameterList", "formalParameterList", 
                         "mandatoryFormalParameterList", "optionalFormalParameterList", 
                         "formalParameterDeclarationList", "formalParameterDeclaration", 
                         "formalParameterDefinitionList", "formalParameterDefinition", 
                         "parameterCardinality", "procedureResultType", 
                         "graphPattern", "pathPatternList", "pathPattern", 
                         "keepClause", "graphPatternWhereClause", "pathPatternExpression", 
                         "pathMultisetAlternation", "pathPatternUnion", 
                         "pathTerm", "pathFactor", "quantifiedPathPrimary", 
                         "questionedPathPrimary", "pathPrimary", "elementPattern", 
                         "nodePattern", "elementPatternFiller", "isLabelExpression", 
                         "elementPatternPredicate", "elementPatternWhereClause", 
                         "elementPropertySpecification", "propertyKeyValuePairList", 
                         "propertyKeyValuePair", "elementPatternCostClause", 
                         "costClause", "edgePattern", "fullEdgePattern", 
                         "fullEdgePointingLeft", "fullEdgeUndirected", "fullEdgePointingRight", 
                         "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
                         "fullEdgeLeftOrRight", "fullEdgeAnyDirection", 
                         "abbreviatedEdgePattern", "graphPatternQuantifier", 
                         "fixedQuantifier", "generalQuantifier", "parenthesizedPathPatternExpression", 
                         "subpathVariableDeclaration", "parenthesizedPathPatternWhereClause", 
                         "pathPatternPrefix", "pathModePrefix", "pathSearchPrefix", 
                         "allPathSearch", "anyPathSearch", "shortestPathSearch", 
                         "allShortestPathSearch", "anyShortestPathSearch", 
                         "countedShortestPathSearch", "countedShortestGroupSearch", 
                         "simpleGraphPattern", "simplePathPatternList", 
                         "simplePathPattern", "labelExpression", "labelTerm", 
                         "labelFactor", "parenthesizedLabelExpression", 
                         "simplifiedPathPatternExpression", "simplifiedDefaultingLeft", 
                         "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
                         "simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
                         "simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
                         "simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
                         "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", 
                         "simplifiedQuantified", "simplifiedQuestioned", 
                         "simplifiedTertiary", "simplifiedDirectionOverride", 
                         "simplifiedOverrideLeft", "simplifiedOverrideUndirected", 
                         "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
                         "simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
                         "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
                         "simplifiedNegation", "simplifiedPrimary", "whereClause", 
                         "procedureCall", "namedProcedureCall", "procedureArgumentList", 
                         "procedureArgument", "yieldClause", "yieldItemList", 
                         "yieldItem", "groupByClause", "groupingElementList", 
                         "emptyGroupingSet", "orderByClause", "aggregateFunction", 
                         "generalSetFunction", "binarySetFunction", "generalSetFunctionType", 
                         "setQuantifier", "binarySetFunctionType", "dependentValueExpression", 
                         "independentValueExpression", "sortSpecificationList", 
                         "sortSpecification", "nullOrdering", "limitClause", 
                         "offsetClause", "schemaReference", "catalogSchemaParentAndName", 
                         "graphReference", "graphResolutionExpression", 
                         "catalogGraphReference", "catalogGraphParentAndName", 
                         "graphParentSpecification", "localGraphReference", 
                         "graphTypeReference", "graphTypeResolutionExpression", 
                         "catalogGraphTypeReference", "catalogGraphTypeParentAndName", 
                         "graphTypeParentSpecification", "qualifiedGraphTypeName", 
                         "bindingTableReference", "bindingTableResolutionExpression", 
                         "catalogBindingTableReference", "catalogBindingTableParentAndName", 
                         "bindingTableParentSpecification", "localBindingTableReference", 
                         "qualifiedBindingTableName", "procedureReference", 
                         "catalogProcedureReference", "catalogProcedureParentAndName", 
                         "procedureParentSpecification", "localProcedureReference", 
                         "qualifiedProcedureName", "queryResolutionExpression", 
                         "catalogQueryReference", "catalogQueryParentAndName", 
                         "queryParentSpecification", "qualifiedQueryName", 
                         "functionResolutionExpression", "catalogFunctionReference", 
                         "catalogFunctionParentAndName", "functionParentSpecification", 
                         "qualifiedFunctionName", "catalogObjectReference", 
                         "parentCatalogObjectReference", "catalogUrlPath", 
                         "absoluteUrlPath", "relativeUrlPath", "parentObjectRelativeUrlPath", 
                         "simpleRelativeUrlPath", "parameterizedUrlPath", 
                         "simpleUrlPath", "urlSegment", "qualifiedObjectName", 
                         "qualifiedNamePrefix", "urlPathParameter", "externalObjectReference", 
                         "externalObjectUrl", "elementReference", "searchCondition", 
                         "predicate", "comparisonPredicate", "comparisonPredicatePart2", 
                         "existsPredicate", "nullPredicate", "nullPredicatePart2", 
                         "normalizedPredicate", "normalizedPredicatePart2", 
                         "directedPredicate", "directedPredicatePart2", 
                         "labeledPredicate", "labeledPredicatePart2", "sourceDestinationPredicate", 
                         "sourcePredicatePart2", "destinationPredicatePart2", 
                         "allDifferentPredicate", "samePredicate", "valueSpecification", 
                         "unsignedValueSpecification", "unsignedIntegerSpecification", 
                         "parameterValueSpecification", "predefinedParameter", 
                         "predefinedParentObjectParameter", "predefinedSchemaParameter", 
                         "predefinedGraphParameter", "predefinedTableParameter", 
                         "valueExpression", "untypedValueExpression", "commonValueExpression", 
                         "referenceValueExpression", "collectionValueExpression", 
                         "setValueExpression", "orderedSetValueExpression", 
                         "mapValueExpression", "booleanValueExpression", 
                         "booleanTerm", "booleanFactor", "booleanTest", 
                         "booleanPrimary", "booleanPredicand", "numericValueExpression", 
                         "term", "factor", "numericPrimary", "valueExpressionPrimary", 
                         "nonParenthesizedValueExpressionPrimary", "numericValueFunction", 
                         "lengthExpression", "charLengthExpression", "byteLengthExpression", 
                         "pathLengthExpression", "absoluteValueExpression", 
                         "modulusExpression", "trigonometricFunction", "generalLogarithmFunction", 
                         "commonLogarithm", "naturalLogarithm", "exponentialFunction", 
                         "powerFunction", "squareRoot", "floorFunction", 
                         "ceilingFunction", "inDegreeFunction", "outDegreeFunction", 
                         "stringValueExpression", "characterStringValueExpression", 
                         "characterStringPrimary", "byteStringValueExpression", 
                         "byteStringPrimary", "stringValueFunction", "characterStringFunction", 
                         "substringFunction", "fold", "trimFunction", "normalizeFunction", 
                         "normalForm", "byteStringFunction", "byteSubstringFunction", 
                         "byteStringTrimFunction", "startPosition", "stringLength", 
                         "datetimeValueExpression", "datetimePrimary", "datetimeValueFunction", 
                         "dateFunction", "timeFunction", "localTimeFunction", 
                         "datetimeFunction", "localDatetimeFunction", "dateFunctionParameters", 
                         "timeFunctionParameters", "datetimeFunctionParameters", 
                         "durationValueExpression", "durationTerm", "durationFactor", 
                         "durationPrimary", "durationValueFunction", "durationFunction", 
                         "durationFunctionParameters", "durationAbsoluteValueFunction", 
                         "graphElementPrimary", "startNodeFunction", "endNodeFunction", 
                         "collectionValueConstructor", "listValueExpression", 
                         "listPrimary", "listValueFunction", "tailListFunction", 
                         "trimListFunction", "listValueConstructor", "listValueConstructorByEnumeration", 
                         "listElementList", "multisetValueExpression", "multisetTerm", 
                         "multisetPrimary", "multisetValueFunction", "multisetValueConstructorByEnumeration", 
                         "multisetElementList", "setValueConstructor", "setValueConstructorByEnumeration", 
                         "setElementList", "orderedSetValueConstructorByEnumeration", 
                         "orderedSetElementList", "mapValueConstructor", 
                         "mapValueConstructorByEnumeration", "mapElementList", 
                         "mapElement", "mapKey", "recordValueConstructor", 
                         "recordValueConstructorByEnumeration", "fieldList", 
                         "field", "fieldValue", "caseExpression", "caseAbbreviation", 
                         "simpleCase", "searchedCase", "simpleWhenClause", 
                         "searchedWhenClause", "elseClause", "caseOperand", 
                         "whenOperandList", "whenOperand", "result", "castSpecification", 
                         "multisetSetFunction", "element_idFunction", "literal", 
                         "generalLiteral", "predefinedTypeLiteral", "unsignedLiteral", 
                         "characterStringLiteral", "unbrokenCharacterStringLiteral", 
                         "singleQuotedCharacterSequence", "doubleQuotedCharacterSequence", 
                         "unbrokenSingleQuotedCharacterSequence", "unbrokenDoubleQuotedCharacterSequence", 
                         "unbrokenAccentQuotedCharacterSequence", "characterRepresentation", 
                         "byteStringLiteral", "numericLiteral", "signedNumericLiteral", 
                         "unsignedNumericLiteral", "exactNumericLiteral", 
                         "sign", "unsignedInteger", "unsignedDecimalInteger", 
                         "unsignedBinaryInteger", "unsignedOctalInteger", 
                         "unsignedHexadecimalInteger", "signedDecimalInteger", 
                         "approximateNumericLiteral", "temporalLiteral", 
                         "dateLiteral", "timeLiteral", "datetimeLiteral", 
                         "dateString", "timeString", "datetimeString", "durationLiteral", 
                         "intervalLiteral", "yearMonthLiteral", "dayTimeLiteral", 
                         "fractionalSecondsLiteral", "durationString", "listLiteral", 
                         "setLiteral", "multisetLiteral", "orderedSetLiteral", 
                         "mapLiteral", "recordLiteral", "valueType", "ofValueType", 
                         "predefinedType", "characterStringType", "byteStringType", 
                         "numericType", "exactNumericType", "binaryExactNumericType", 
                         "binaryExactSignedNumericType", "binaryExactUnsignedNumericType", 
                         "verboseBinaryExactNumericType", "decimalExactNumericType", 
                         "approximateNumericType", "temporalType", "graphElementType", 
                         "listValueTypeName", "mapValueType", "mapKeyType", 
                         "recordValueType", "fieldTypeList", "fieldType", 
                         "parameterName", "identifier", "separatedIdentifier", 
                         "token", "nonDelimiterToken", "nonDelimitedIdentifier", 
                         "regularIdentifier", "extendedIdentifier", "delimiterToken", 
                         "delimitedIdentifier", "separator", "comment", 
                         "simpleComment", "bracketedComment", "edgeSynonym", 
                         "nodeSynonym" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GqlParser.ruleNames;
        this.literalNames = GqlParser.literalNames;
        this.symbolicNames = GqlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 191:
    	    		return this.compositeQueryExpression_sempred(localctx, predIndex);
    	case 252:
    	    		return this.pathTerm_sempred(localctx, predIndex);
    	case 297:
    	    		return this.labelExpression_sempred(localctx, predIndex);
    	case 298:
    	    		return this.labelTerm_sempred(localctx, predIndex);
    	case 312:
    	    		return this.simplifiedTerm_sempred(localctx, predIndex);
    	case 313:
    	    		return this.simplifiedFactorLow_sempred(localctx, predIndex);
    	case 442:
    	    		return this.booleanValueExpression_sempred(localctx, predIndex);
    	case 443:
    	    		return this.booleanTerm_sempred(localctx, predIndex);
    	case 448:
    	    		return this.numericValueExpression_sempred(localctx, predIndex);
    	case 449:
    	    		return this.term_sempred(localctx, predIndex);
    	case 473:
    	    		return this.characterStringValueExpression_sempred(localctx, predIndex);
    	case 475:
    	    		return this.byteStringValueExpression_sempred(localctx, predIndex);
    	case 489:
    	    		return this.datetimeValueExpression_sempred(localctx, predIndex);
    	case 500:
    	    		return this.durationValueExpression_sempred(localctx, predIndex);
    	case 501:
    	    		return this.durationTerm_sempred(localctx, predIndex);
    	case 512:
    	    		return this.listValueExpression_sempred(localctx, predIndex);
    	case 520:
    	    		return this.multisetValueExpression_sempred(localctx, predIndex);
    	case 521:
    	    		return this.multisetTerm_sempred(localctx, predIndex);
    	case 599:
    	    		return this.valueType_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    compositeQueryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    pathTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    labelExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    labelTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simplifiedTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simplifiedFactorLow_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 2);
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    numericValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.precpred(this._ctx, 2);
    		case 12:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    characterStringValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    byteStringValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 14:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    datetimeValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 2);
    		case 16:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    durationValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return this.precpred(this._ctx, 3);
    		case 18:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    durationTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 19:
    			return this.precpred(this._ctx, 3);
    		case 20:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    listValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 21:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    multisetValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 22:
    			return this.precpred(this._ctx, 2);
    		case 23:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    multisetTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 24:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 25:
    			return this.precpred(this._ctx, 9);
    		case 26:
    			return this.precpred(this._ctx, 8);
    		case 27:
    			return this.precpred(this._ctx, 7);
    		case 28:
    			return this.precpred(this._ctx, 6);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	gqlParser() {
	    let localctx = new GqlParserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GqlParser.RULE_gqlParser);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1280;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 1272;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 1276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & 19) !== 0) || _la===199 || _la===206) {
	                this.state = 1273;
	                this.requestParameterSet();
	                this.state = 1278;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1279;
	            this.match(GqlParser.RIGHT_BRACKET);
	        }

	        this.state = 1282;
	        this.gqlProgram();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requestParameterSet() {
	    let localctx = new RequestParameterSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GqlParser.RULE_requestParameterSet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1284;
	        this.parameterDefinition();
	        this.state = 1289;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 1285;
	            this.match(GqlParser.COMMA);
	            this.state = 1286;
	            this.parameterDefinition();
	            this.state = 1291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gqlProgram() {
	    let localctx = new GqlProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GqlParser.RULE_gqlProgram);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===9 || _la===156 || _la===157 || _la===462) {
	            this.state = 1292;
	            this.preamble();
	        }

	        this.state = 1295;
	        this.mainActivity();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainActivity() {
	    let localctx = new MainActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GqlParser.RULE_mainActivity);
	    var _la = 0; // Token type
	    try {
	        this.state = 1314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1297;
	            this.sessionActivity();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1299;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 1298;
	                this.sessionActivity();

	            }
	            this.state = 1307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & 4160749617) !== 0) || _la===139 || _la===143 || _la===199 || _la===206 || _la===388) {
	                this.state = 1301;
	                this.transactionActivity();
	                this.state = 1303;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	                if(la_===1) {
	                    this.state = 1302;
	                    this.sessionActivity();

	                }
	                this.state = 1309;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===93 || _la===322) {
	                this.state = 1310;
	                this.sessionCloseCommand();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1313;
	            this.sessionCloseCommand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionActivity() {
	    let localctx = new SessionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GqlParser.RULE_sessionActivity);
	    try {
	        this.state = 1328;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1316;
	            this.sessionClearCommand();
	            this.state = 1320;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1317;
	                    this.sessionParameterCommand(); 
	                }
	                this.state = 1322;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1324; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1323;
	            		this.sessionParameterCommand();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1326; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,10, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionParameterCommand() {
	    let localctx = new SessionParameterCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GqlParser.RULE_sessionParameterCommand);
	    try {
	        this.state = 1332;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1330;
	            this.sessionSetCommand();
	            break;
	        case 93:
	        case 99:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1331;
	            this.sessionRemoveCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionActivity() {
	    let localctx = new TransactionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GqlParser.RULE_transactionActivity);
	    try {
	        this.state = 1343;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1334;
	            this.startTransactionCommand();

	            this.state = 1335;
	            this.procedureSpecification();
	            this.state = 1337;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	            if(la_===1) {
	                this.state = 1336;
	                this.endTransactionCommand();

	            }
	            break;
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 139:
	        case 143:
	        case 199:
	        case 206:
	        case 388:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1339;
	            this.procedureSpecification();

	            this.state = 1340;
	            this.endTransactionCommand();
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1342;
	            this.endTransactionCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preamble() {
	    let localctx = new PreambleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GqlParser.RULE_preamble);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1345;
	        this.preambleOption();
	        this.state = 1350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 1346;
	            this.match(GqlParser.COMMA);
	            this.state = 1347;
	            this.preambleOption();
	            this.state = 1352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preambleOption() {
	    let localctx = new PreambleOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GqlParser.RULE_preambleOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 1360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 156:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1353;
	            this.match(GqlParser.PROFILE);
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1354;
	            this.match(GqlParser.EXPLAIN);
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1355;
	            this.preambleOptionIdentifier();
	            this.state = 1358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 1356;
	                this.match(GqlParser.EQUALS);
	                this.state = 1357;
	                this.literal();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preambleOptionIdentifier() {
	    let localctx = new PreambleOptionIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GqlParser.RULE_preambleOptionIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1362;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetCommand() {
	    let localctx = new SessionSetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GqlParser.RULE_sessionSetCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1364;
	        this.match(GqlParser.SESSION_SET);
	        this.state = 1365;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1370;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 96:
	            this.state = 1366;
	            this.sessionSetSchemaClause();
	            break;
	        case 27:
	            this.state = 1367;
	            this.sessionSetGraphClause();
	            break;
	        case 97:
	            this.state = 1368;
	            this.sessionSetTimeZoneClause();
	            break;
	        case 98:
	        case 130:
	        case 131:
	        case 135:
	        case 136:
	        case 139:
	        case 199:
	        case 206:
	            this.state = 1369;
	            this.sessionSetParameterClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1372;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetSchemaClause() {
	    let localctx = new SessionSetSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GqlParser.RULE_sessionSetSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this.match(GqlParser.SCHEMA);
	        this.state = 1375;
	        this.schemaReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphClause() {
	    let localctx = new SessionSetGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GqlParser.RULE_sessionSetGraphClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1377;
	        this.graphResolutionExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetTimeZoneClause() {
	    let localctx = new SessionSetTimeZoneClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GqlParser.RULE_sessionSetTimeZoneClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this.match(GqlParser.TIME_ZONE);
	        this.state = 1380;
	        this.setTimeZoneValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTimeZoneValue() {
	    let localctx = new SetTimeZoneValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GqlParser.RULE_setTimeZoneValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1382;
	        this.stringValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterClause() {
	    let localctx = new SessionSetParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GqlParser.RULE_sessionSetParameterClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130 || _la===131) {
	            this.state = 1384;
	            this.sessionParameterFlag();
	        }

	        this.state = 1387;
	        this.sessionParameter();
	        this.state = 1389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1388;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionParameterFlag() {
	    let localctx = new SessionParameterFlagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GqlParser.RULE_sessionParameterFlag);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1391;
	        _la = this._input.LA(1);
	        if(!(_la===130 || _la===131)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionParameter() {
	    let localctx = new SessionParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GqlParser.RULE_sessionParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 1393;
	            this.match(GqlParser.PARAMETER);
	        }

	        this.state = 1396;
	        this.parameterDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionRemoveCommand() {
	    let localctx = new SessionRemoveCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GqlParser.RULE_sessionRemoveCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 1398;
	            this.match(GqlParser.SESSION);
	        }

	        this.state = 1401;
	        this.match(GqlParser.REMOVE);
	        this.state = 1402;
	        this.identifier();
	        this.state = 1404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 1403;
	            this.match(GqlParser.IF_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionClearCommand() {
	    let localctx = new SessionClearCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GqlParser.RULE_sessionClearCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 1406;
	            this.match(GqlParser.SESSION);
	        }

	        this.state = 1409;
	        this.match(GqlParser.CLEAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionCloseCommand() {
	    let localctx = new SessionCloseCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GqlParser.RULE_sessionCloseCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 1411;
	            this.match(GqlParser.SESSION);
	        }

	        this.state = 1414;
	        this.match(GqlParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTransactionCommand() {
	    let localctx = new StartTransactionCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GqlParser.RULE_startTransactionCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1416;
	        this.match(GqlParser.START_TRANSACTION);
	        this.state = 1417;
	        this.transactionCharacteristics();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endTransactionCommand() {
	    let localctx = new EndTransactionCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, GqlParser.RULE_endTransactionCommand);
	    try {
	        this.state = 1421;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1419;
	            this.commitCommand();
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1420;
	            this.rollbackCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionCharacteristics() {
	    let localctx = new TransactionCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GqlParser.RULE_transactionCharacteristics);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1423;
	        this.transactionMode();
	        this.state = 1428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 1424;
	            this.match(GqlParser.COMMA);
	            this.state = 1425;
	            this.transactionMode();
	            this.state = 1430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, GqlParser.RULE_transactionMode);
	    try {
	        this.state = 1433;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	        case 108:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1431;
	            this.transactionAccessMode();
	            break;
	        case 19:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 139:
	        case 143:
	        case 199:
	        case 206:
	        case 388:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1432;
	            this.implementationDefinedAccessMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionAccessMode() {
	    let localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GqlParser.RULE_transactionAccessMode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1435;
	        _la = this._input.LA(1);
	        if(!(_la===107 || _la===108)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implementationDefinedAccessMode() {
	    let localctx = new ImplementationDefinedAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GqlParser.RULE_implementationDefinedAccessMode);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackCommand() {
	    let localctx = new RollbackCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GqlParser.RULE_rollbackCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1439;
	        this.match(GqlParser.ROLLBACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitCommand() {
	    let localctx = new CommitCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GqlParser.RULE_commitCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1441;
	        this.match(GqlParser.COMMIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedProcedureSpecification() {
	    let localctx = new NestedProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GqlParser.RULE_nestedProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1444;
	        this.procedureSpecification();
	        this.state = 1445;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSpecification() {
	    let localctx = new ProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GqlParser.RULE_procedureSpecification);
	    try {
	        this.state = 1451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1447;
	            this.catalogModifyingProcedureSpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1448;
	            this.dataModifyingProcedureSpecification();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1449;
	            this.querySpecification();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1450;
	            this.functionSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedCatalogModifyingProcedureSpecification() {
	    let localctx = new NestedCatalogModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GqlParser.RULE_nestedCatalogModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1453;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1454;
	        this.catalogModifyingProcedureSpecification();
	        this.state = 1455;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogModifyingProcedureSpecification() {
	    let localctx = new CatalogModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GqlParser.RULE_catalogModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1457;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedDataModifyingProcedureSpecification() {
	    let localctx = new NestedDataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GqlParser.RULE_nestedDataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1459;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1460;
	        this.dataModifyingProcedureSpecification();
	        this.state = 1461;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataModifyingProcedureSpecification() {
	    let localctx = new DataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GqlParser.RULE_dataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedQuerySpecification() {
	    let localctx = new NestedQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GqlParser.RULE_nestedQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1465;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1466;
	        this.querySpecification();
	        this.state = 1467;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GqlParser.RULE_querySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1469;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedFunctionSpecification() {
	    let localctx = new NestedFunctionSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GqlParser.RULE_nestedFunctionSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1471;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1472;
	        this.functionSpecification();
	        this.state = 1473;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSpecification() {
	    let localctx = new FunctionSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GqlParser.RULE_functionSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1475;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureBody() {
	    let localctx = new ProcedureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GqlParser.RULE_procedureBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & 2055) !== 0)) {
	            this.state = 1477;
	            this.staticVariableDefinitionBlock();
	        }

	        this.state = 1481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & 19) !== 0) || _la===199 || _la===206) {
	            this.state = 1480;
	            this.bindingVariableDefinitionBlock();
	        }

	        this.state = 1483;
	        this.statementBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticVariableDefinitionBlock() {
	    let localctx = new StaticVariableDefinitionBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GqlParser.RULE_staticVariableDefinitionBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1485;
	            this.staticVariableDefinition();
	            this.state = 1488; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & 2055) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDefinitionBlock() {
	    let localctx = new BindingVariableDefinitionBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GqlParser.RULE_bindingVariableDefinitionBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1491; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1490;
	            this.bindingVariableDefinition();
	            this.state = 1493; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & 19) !== 0) || _la===199 || _la===206);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementBlock() {
	    let localctx = new StatementBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GqlParser.RULE_statementBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1495;
	        this.statement();
	        this.state = 1501;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===144) {
	            this.state = 1497; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1496;
	                this.thenStatement();
	                this.state = 1499; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===144);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thenStatement() {
	    let localctx = new ThenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GqlParser.RULE_thenStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1503;
	        this.match(GqlParser.THEN);
	        this.state = 1505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===240) {
	            this.state = 1504;
	            this.yieldClause();
	        }

	        this.state = 1507;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticVariableDefinition() {
	    let localctx = new StaticVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GqlParser.RULE_staticVariableDefinition);
	    try {
	        this.state = 1512;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 132:
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1509;
	            this.procedureVariableDefinition();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1510;
	            this.queryVariableDefinition();
	            break;
	        case 143:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1511;
	            this.functionVariableDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureVariableDefinition() {
	    let localctx = new ProcedureVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GqlParser.RULE_procedureVariableDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 1514;
	            this.match(GqlParser.CATALOG);
	        }

	        this.state = 1517;
	        this.match(GqlParser.PROCEDURE);
	        this.state = 1518;
	        this.identifier();
	        this.state = 1519;
	        this.ofTypeSignature();
	        this.state = 1520;
	        this.procedureInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureInitializer() {
	    let localctx = new ProcedureInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GqlParser.RULE_procedureInitializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1530;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1522;
	            this.match(GqlParser.AS_OR_EQUALS);
	            this.state = 1523;
	            this.procedureReference();
	            break;
	        case 25:
	        case 389:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===389) {
	                this.state = 1524;
	                this.match(GqlParser.AS);
	            }

	            this.state = 1527;
	            this.nestedProcedureSpecification();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1528;
	            this.match(GqlParser.COLON);
	            this.state = 1529;
	            this.catalogProcedureReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryVariableDefinition() {
	    let localctx = new QueryVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GqlParser.RULE_queryVariableDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1532;
	        this.match(GqlParser.QUERY);
	        this.state = 1533;
	        this.identifier();
	        this.state = 1534;
	        this.ofTypeSignature();
	        this.state = 1535;
	        this.queryInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryInitializer() {
	    let localctx = new QueryInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GqlParser.RULE_queryInitializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1548;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1537;
	            this.match(GqlParser.AS_OR_EQUALS);
	            this.state = 1540;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 134:
	                this.state = 1538;
	                this.queryResolutionExpression();
	                break;
	            case 27:
	                this.state = 1539;
	                this.qualifiedQueryName();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 25:
	        case 389:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===389) {
	                this.state = 1542;
	                this.match(GqlParser.AS);
	            }

	            this.state = 1545;
	            this.nestedQuerySpecification();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1546;
	            this.match(GqlParser.COLON);
	            this.state = 1547;
	            this.catalogQueryReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionVariableDefinition() {
	    let localctx = new FunctionVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GqlParser.RULE_functionVariableDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1550;
	        this.match(GqlParser.FUNCTION);
	        this.state = 1551;
	        this.regularIdentifier();
	        this.state = 1552;
	        this.ofTypeSignature();
	        this.state = 1553;
	        this.functionInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionInitializer() {
	    let localctx = new FunctionInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GqlParser.RULE_functionInitializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1563;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 389:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1555;
	            _la = this._input.LA(1);
	            if(!(_la===21 || _la===389)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1558;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 143:
	                this.state = 1556;
	                this.functionResolutionExpression();
	                break;
	            case 27:
	                this.state = 1557;
	                this.qualifiedFunctionName();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1560;
	            this.nestedFunctionSpecification();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1561;
	            this.match(GqlParser.COLON);
	            this.state = 1562;
	            this.catalogFunctionReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactVariableDeclarationList() {
	    let localctx = new CompactVariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GqlParser.RULE_compactVariableDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1565;
	        this.compactVariableDeclaration();
	        this.state = 1570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 1566;
	            this.match(GqlParser.COMMA);
	            this.state = 1567;
	            this.compactVariableDeclaration();
	            this.state = 1572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactVariableDeclaration() {
	    let localctx = new CompactVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, GqlParser.RULE_compactVariableDeclaration);
	    try {
	        this.state = 1575;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	        case 136:
	        case 139:
	        case 199:
	        case 206:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1573;
	            this.bindingVariableDeclaration();
	            break;
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1574;
	            this.regularIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDeclaration() {
	    let localctx = new BindingVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, GqlParser.RULE_bindingVariableDeclaration);
	    try {
	        this.state = 1580;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	        case 139:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1577;
	            this.graphVariableDeclaration();
	            break;
	        case 136:
	        case 206:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1578;
	            this.bindingTableVariableDeclaration();
	            break;
	        case 199:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1579;
	            this.valueVariableDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactVariableDefinitionList() {
	    let localctx = new CompactVariableDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, GqlParser.RULE_compactVariableDefinitionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1582;
	        this.compactVariableDefinition();
	        this.state = 1587;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1583;
	                this.match(GqlParser.COMMA);
	                this.state = 1584;
	                this.compactVariableDefinition(); 
	            }
	            this.state = 1589;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactVariableDefinition() {
	    let localctx = new CompactVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, GqlParser.RULE_compactVariableDefinition);
	    try {
	        this.state = 1592;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1590;
	            this.compactValueVariableDefinition();
	            break;
	        case 135:
	        case 136:
	        case 139:
	        case 199:
	        case 206:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1591;
	            this.bindingVariableDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactValueVariableDefinitionList() {
	    let localctx = new CompactValueVariableDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, GqlParser.RULE_compactValueVariableDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1594;
	        this.compactValueVariableDefinition();
	        this.state = 1599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 1595;
	            this.match(GqlParser.COMMA);
	            this.state = 1596;
	            this.compactValueVariableDefinition();
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactValueVariableDefinition() {
	    let localctx = new CompactValueVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, GqlParser.RULE_compactValueVariableDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        this.regularIdentifier();
	        this.state = 1603;
	        this.match(GqlParser.EQUALS);
	        this.state = 1604;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDefinitionList() {
	    let localctx = new BindingVariableDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, GqlParser.RULE_bindingVariableDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1606;
	        this.bindingVariableDefinition();
	        this.state = 1611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 1607;
	            this.match(GqlParser.COMMA);
	            this.state = 1608;
	            this.bindingVariableDefinition();
	            this.state = 1613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDefinition() {
	    let localctx = new BindingVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, GqlParser.RULE_bindingVariableDefinition);
	    try {
	        this.state = 1617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	        case 139:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1614;
	            this.graphVariableDefinition();
	            break;
	        case 136:
	        case 206:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1615;
	            this.bindingTableVariableDefinition();
	            break;
	        case 199:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1616;
	            this.valueVariableDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDefinition() {
	    let localctx = new ParameterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, GqlParser.RULE_parameterDefinition);
	    try {
	        this.state = 1622;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	        case 139:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1619;
	            this.graphParameterDefinition();
	            break;
	        case 136:
	        case 206:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1620;
	            this.bindingTableParameterDefinition();
	            break;
	        case 199:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1621;
	            this.valueParameterDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVariableDeclaration() {
	    let localctx = new GraphVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, GqlParser.RULE_graphVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1624;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1627;
	        this.match(GqlParser.GRAPH);
	        this.state = 1628;
	        this.graphVariable();
	        this.state = 1629;
	        this.ofGraphType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVariableDefinition() {
	    let localctx = new GraphVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, GqlParser.RULE_graphVariableDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1631;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1634;
	        this.match(GqlParser.GRAPH);
	        this.state = 1635;
	        this.graphVariable();
	        this.state = 1636;
	        this.ofGraphType();
	        this.state = 1637;
	        this.graphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphParameterDefinition() {
	    let localctx = new GraphParameterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, GqlParser.RULE_graphParameterDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1639;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1642;
	        this.match(GqlParser.GRAPH);
	        this.state = 1643;
	        this.parameterName();
	        this.state = 1645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1644;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 1647;
	        this.ofGraphType();
	        this.state = 1648;
	        this.graphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVariable() {
	    let localctx = new GraphVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, GqlParser.RULE_graphVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1650;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphInitializer() {
	    let localctx = new GraphInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, GqlParser.RULE_graphInitializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1657;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 389:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1652;
	            _la = this._input.LA(1);
	            if(!(_la===21 || _la===389)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1653;
	            this.graphExpression();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1654;
	            this.nestedGraphQuerySpecification();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1655;
	            this.match(GqlParser.COLON);
	            this.state = 1656;
	            this.catalogGraphReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVariableDeclaration() {
	    let localctx = new BindingTableVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, GqlParser.RULE_bindingTableVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===206) {
	            this.state = 1659;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 1662;
	        this.match(GqlParser.TABLE);
	        this.state = 1663;
	        this.bindingTableVariable();
	        this.state = 1664;
	        this.ofBindingTableType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVariableDefinition() {
	    let localctx = new BindingTableVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, GqlParser.RULE_bindingTableVariableDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===206) {
	            this.state = 1666;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 1669;
	        this.match(GqlParser.TABLE);
	        this.state = 1670;
	        this.bindingTableVariable();
	        this.state = 1671;
	        this.ofBindingTableType();
	        this.state = 1672;
	        this.bindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableParameterDefinition() {
	    let localctx = new BindingTableParameterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, GqlParser.RULE_bindingTableParameterDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===206) {
	            this.state = 1674;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 1677;
	        this.match(GqlParser.TABLE);
	        this.state = 1678;
	        this.identifier();
	        this.state = 1680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1679;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 1682;
	        this.ofBindingTableType();
	        this.state = 1683;
	        this.bindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVariable() {
	    let localctx = new BindingTableVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, GqlParser.RULE_bindingTableVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1685;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableInitializer() {
	    let localctx = new BindingTableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, GqlParser.RULE_bindingTableInitializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1692;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 389:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1687;
	            _la = this._input.LA(1);
	            if(!(_la===21 || _la===389)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1688;
	            this.bindingTableReference();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1689;
	            this.nestedQuerySpecification();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1690;
	            this.match(GqlParser.COLON);
	            this.state = 1691;
	            this.catalogBindingTableReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVariableDeclaration() {
	    let localctx = new ValueVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, GqlParser.RULE_valueVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1694;
	        this.match(GqlParser.VALUE);
	        this.state = 1695;
	        this.regularIdentifier();
	        this.state = 1697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===27 || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & 39898327) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & 32767) !== 0) || _la===206 || _la===249 || _la===277 || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & 67108867) !== 0) || ((((_la - 340)) & ~0x1f) == 0 && ((1 << (_la - 340)) & 8257667) !== 0) || ((((_la - 374)) & ~0x1f) == 0 && ((1 << (_la - 374)) & 25706495) !== 0)) {
	            this.state = 1696;
	            this.ofValueType();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVariableDefinition() {
	    let localctx = new ValueVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, GqlParser.RULE_valueVariableDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1699;
	        this.match(GqlParser.VALUE);
	        this.state = 1700;
	        this.regularIdentifier();
	        this.state = 1702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===27 || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & 39898327) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & 32767) !== 0) || _la===206 || _la===249 || _la===277 || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & 67108867) !== 0) || ((((_la - 340)) & ~0x1f) == 0 && ((1 << (_la - 340)) & 8257667) !== 0) || ((((_la - 374)) & ~0x1f) == 0 && ((1 << (_la - 374)) & 25706495) !== 0)) {
	            this.state = 1701;
	            this.ofValueType();
	        }

	        this.state = 1704;
	        this.valueInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueParameterDefinition() {
	    let localctx = new ValueParameterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, GqlParser.RULE_valueParameterDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1706;
	        this.match(GqlParser.VALUE);
	        this.state = 1707;
	        this.identifier();
	        this.state = 1709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1708;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 1712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===27 || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & 39898327) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & 32767) !== 0) || _la===206 || _la===249 || _la===277 || ((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & 67108867) !== 0) || ((((_la - 340)) & ~0x1f) == 0 && ((1 << (_la - 340)) & 8257667) !== 0) || ((((_la - 374)) & ~0x1f) == 0 && ((1 << (_la - 374)) & 25706495) !== 0)) {
	            this.state = 1711;
	            this.ofValueType();
	        }

	        this.state = 1714;
	        this.valueInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueInitializer() {
	    let localctx = new ValueInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, GqlParser.RULE_valueInitializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1721;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 389:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1716;
	            _la = this._input.LA(1);
	            if(!(_la===21 || _la===389)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1717;
	            this.valueExpression();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1718;
	            this.nestedFunctionSpecification();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1719;
	            this.match(GqlParser.COLON);
	            this.state = 1720;
	            this.catalogObjectReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryResultObjectExpression() {
	    let localctx = new PrimaryResultObjectExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, GqlParser.RULE_primaryResultObjectExpression);
	    try {
	        this.state = 1725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1723;
	            this.graphExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1724;
	            this.bindingTableReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphExpression() {
	    let localctx = new GraphExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, GqlParser.RULE_graphExpression);
	    try {
	        this.state = 1730;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1727;
	            this.copyGraphExpression();
	            break;
	        case 135:
	        case 139:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1728;
	            this.graphSpecification();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1729;
	            this.graphReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyGraphExpression() {
	    let localctx = new CopyGraphExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, GqlParser.RULE_copyGraphExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1732;
	        this.match(GqlParser.COPY);
	        this.state = 1733;
	        this.match(GqlParser.OF);
	        this.state = 1734;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeExpression() {
	    let localctx = new GraphTypeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, GqlParser.RULE_graphTypeExpression);
	    try {
	        this.state = 1740;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1736;
	            this.copyGraphTypeExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1737;
	            this.likeGraphExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1738;
	            this.graphTypeSpecification();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1739;
	            this.graphTypeReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asGraphType() {
	    let localctx = new AsGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, GqlParser.RULE_asGraphType);
	    try {
	        this.state = 1747;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1742;
	            this.match(GqlParser.AS_OR_EQUALS);
	            this.state = 1743;
	            this.graphTypeExpression();
	            break;
	        case 304:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1744;
	            this.likeGraphExpressionShorthand();
	            break;
	        case 389:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1745;
	            this.match(GqlParser.AS);
	            this.state = 1746;
	            this.nestedGraphTypeSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyGraphTypeExpression() {
	    let localctx = new CopyGraphTypeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, GqlParser.RULE_copyGraphTypeExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1749;
	        this.match(GqlParser.COPY);
	        this.state = 1750;
	        this.match(GqlParser.OF);
	        this.state = 1751;
	        this.graphTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeGraphExpression() {
	    let localctx = new LikeGraphExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, GqlParser.RULE_likeGraphExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1753;
	        this.match(GqlParser.PROPERTY);
	        this.state = 1754;
	        this.match(GqlParser.GRAPH);
	        this.state = 1755;
	        this.match(GqlParser.TYPE);
	        this.state = 1756;
	        this.likeGraphExpressionShorthand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofGraphType() {
	    let localctx = new OfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, GqlParser.RULE_ofGraphType);
	    try {
	        this.state = 1765;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1758;
	            this.ofTypePrefix();
	            this.state = 1759;
	            this.graphTypeExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1761;
	            this.likeGraphExpressionShorthand();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1762;
	            this.ofTypePrefix();
	            this.state = 1763;
	            this.nestedGraphTypeSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeGraphExpressionShorthand() {
	    let localctx = new LikeGraphExpressionShorthandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, GqlParser.RULE_likeGraphExpressionShorthand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1767;
	        this.match(GqlParser.LIKE);
	        this.state = 1768;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofBindingTableType() {
	    let localctx = new OfBindingTableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, GqlParser.RULE_ofBindingTableType);
	    try {
	        this.state = 1774;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	        case 393:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1770;
	            this.ofTypePrefix();
	            this.state = 1771;
	            this.bindingTableTypeExpression();
	            break;
	        case 304:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1773;
	            this.likeBindingTableShorthand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofTypePrefix() {
	    let localctx = new OfTypePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, GqlParser.RULE_ofTypePrefix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1776;
	        _la = this._input.LA(1);
	        if(!(_la===18 || _la===393)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableTypeExpression() {
	    let localctx = new BindingTableTypeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, GqlParser.RULE_bindingTableTypeExpression);
	    try {
	        this.state = 1780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1778;
	            this.bindingTableType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1779;
	            this.likeBindingTableType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableType() {
	    let localctx = new BindingTableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, GqlParser.RULE_bindingTableType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===206) {
	            this.state = 1782;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 1785;
	        this.match(GqlParser.TABLE);
	        this.state = 1786;
	        this.recordValueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeBindingTableType() {
	    let localctx = new LikeBindingTableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, GqlParser.RULE_likeBindingTableType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===206) {
	            this.state = 1788;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 1791;
	        this.match(GqlParser.TABLE);
	        this.state = 1792;
	        this.likeBindingTableShorthand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeBindingTableShorthand() {
	    let localctx = new LikeBindingTableShorthandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, GqlParser.RULE_likeBindingTableShorthand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        this.match(GqlParser.LIKE);
	        this.state = 1795;
	        this.bindingTableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, GqlParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1797;
	        this.atSchemaClause();
	        this.state = 1801;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1798;
	            this.linearCatalogModifyingStatement();
	            break;

	        case 2:
	            this.state = 1799;
	            this.dataModifyingStatement();
	            break;

	        case 3:
	            this.state = 1800;
	            this.queryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataModifyingStatement() {
	    let localctx = new DataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, GqlParser.RULE_dataModifyingStatement);
	    try {
	        this.state = 1805;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 146:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1803;
	            this.conditionalDataModifyingStatement();
	            break;
	        case 25:
	        case 94:
	        case 99:
	        case 137:
	        case 147:
	        case 148:
	        case 149:
	        case 246:
	        case 264:
	        case 286:
	        case 287:
	        case 297:
	        case 298:
	        case 303:
	        case 306:
	        case 311:
	        case 342:
	        case 356:
	        case 363:
	        case 390:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1804;
	            this.linearDataModifyingStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatement() {
	    let localctx = new QueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, GqlParser.RULE_queryStatement);
	    try {
	        this.state = 1809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1807;
	            this.compositeQueryExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1808;
	            this.conditionalQueryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callProcedureStatement() {
	    let localctx = new CallProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, GqlParser.RULE_callProcedureStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1811;
	        this.statementMode();
	        this.state = 1812;
	        this.match(GqlParser.CALL);
	        this.state = 1813;
	        this.procedureCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementMode() {
	    let localctx = new StatementModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, GqlParser.RULE_statementMode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1815;
	        _la = this._input.LA(1);
	        if(!(_la===148 || _la===298)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCatalogModifyingStatement() {
	    let localctx = new SimpleCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, GqlParser.RULE_simpleCatalogModifyingStatement);
	    try {
	        this.state = 1819;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	        case 348:
	        case 394:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1817;
	            this.primitiveCatalogModifyingStatement();
	            break;
	        case 148:
	        case 298:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1818;
	            this.callCatalogModifyingProcedureStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveCatalogModifyingStatement() {
	    let localctx = new PrimitiveCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, GqlParser.RULE_primitiveCatalogModifyingStatement);
	    try {
	        this.state = 1831;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1821;
	            this.createGraphStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1822;
	            this.createGraphTypeStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1823;
	            this.createProcedureStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1824;
	            this.createQueryStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1825;
	            this.createFunctionStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1826;
	            this.dropGraphStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1827;
	            this.dropGraphTypeStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1828;
	            this.dropProcedureStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1829;
	            this.dropQueryStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1830;
	            this.dropFunctionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataAccessingStatement() {
	    let localctx = new SimpleDataAccessingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, GqlParser.RULE_simpleDataAccessingStatement);
	    try {
	        this.state = 1835;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1833;
	            this.simpleQueryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1834;
	            this.simpleDataModifyingStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataModifyingStatement() {
	    let localctx = new SimpleDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, GqlParser.RULE_simpleDataModifyingStatement);
	    try {
	        this.state = 1840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1837;
	            this.primitiveDataModifyingStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1838;
	            this.doStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1839;
	            this.callProcedureStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveDataModifyingStatement() {
	    let localctx = new PrimitiveDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, GqlParser.RULE_primitiveDataModifyingStatement);
	    try {
	        this.state = 1847;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 147:
	        case 148:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1842;
	            this.insertStatement();
	            break;
	        case 149:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1843;
	            this.mergeStatement();
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1844;
	            this.setStatement();
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1845;
	            this.removeStatement();
	            break;
	        case 137:
	        case 342:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1846;
	            this.deleteStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleQueryStatement() {
	    let localctx = new SimpleQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, GqlParser.RULE_simpleQueryStatement);
	    try {
	        this.state = 1851;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1849;
	            this.simpleDataTransformingStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1850;
	            this.simpleDataReadingStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataReadingStatement() {
	    let localctx = new SimpleDataReadingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, GqlParser.RULE_simpleDataReadingStatement);
	    try {
	        this.state = 1855;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1853;
	            this.matchStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1854;
	            this.callQueryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataTransformingStatement() {
	    let localctx = new SimpleDataTransformingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, GqlParser.RULE_simpleDataTransformingStatement);
	    try {
	        this.state = 1859;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1857;
	            this.primitiveDataTransformingStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1858;
	            this.callFunctionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveDataTransformingStatement() {
	    let localctx = new PrimitiveDataTransformingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, GqlParser.RULE_primitiveDataTransformingStatement);
	    try {
	        this.state = 1868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1861;
	            this.optionalStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1862;
	            this.mandatoryStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1863;
	            this.letStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1864;
	            this.forStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1865;
	            this.aggregateStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1866;
	            this.filterStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1867;
	            this.orderByAndPageStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearCatalogModifyingStatement() {
	    let localctx = new LinearCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, GqlParser.RULE_linearCatalogModifyingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===148 || _la===298 || _la===338 || _la===348 || _la===394) {
	            this.state = 1870;
	            this.simpleCatalogModifyingStatement();
	            this.state = 1875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSchemaStatement() {
	    let localctx = new CreateSchemaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, GqlParser.RULE_createSchemaStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1876;
	        this.match(GqlParser.CREATE);
	        this.state = 1877;
	        this.match(GqlParser.SCHEMA);
	        this.state = 1878;
	        this.catalogSchemaParentAndName();
	        this.state = 1880;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1879;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSchemaStatement() {
	    let localctx = new DropSchemaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, GqlParser.RULE_dropSchemaStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1882;
	        this.match(GqlParser.DROP);
	        this.state = 1883;
	        this.match(GqlParser.SCHEMA);
	        this.state = 1884;
	        this.catalogSchemaParentAndName();
	        this.state = 1886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 1885;
	            this.match(GqlParser.IF_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphStatement() {
	    let localctx = new CreateGraphStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, GqlParser.RULE_createGraphStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1891;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	            this.state = 1888;
	            this.match(GqlParser.CREATE);
	            break;
	        case 394:
	            this.state = 1889;
	            this.match(GqlParser.OR);
	            this.state = 1890;
	            this.match(GqlParser.REPLACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1893;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1896;
	        this.match(GqlParser.GRAPH);
	        this.state = 1897;
	        this.catalogGraphParentAndName();
	        this.state = 1899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1898;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 1903;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 18:
	        case 304:
	        case 393:
	        	this.state = 1901;
	        	this.ofGraphType();
	        	break;
	        case 389:
	        	this.state = 1902;
	        	this.graphSource();
	        	break;
	        case -1:
	        case 26:
	        case 93:
	        case 95:
	        case 99:
	        case 104:
	        case 105:
	        case 109:
	        case 110:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 139:
	        case 143:
	        case 144:
	        case 148:
	        case 199:
	        case 206:
	        case 298:
	        case 322:
	        case 338:
	        case 348:
	        case 388:
	        case 394:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSource() {
	    let localctx = new GraphSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, GqlParser.RULE_graphSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1905;
	        this.match(GqlParser.AS);
	        this.state = 1906;
	        this.copyGraphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSpecification() {
	    let localctx = new GraphSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, GqlParser.RULE_graphSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1908;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1911;
	        this.match(GqlParser.GRAPH);
	        this.state = 1914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1912;
	            this.nestedGraphQuerySpecification();
	            break;

	        case 2:
	            this.state = 1913;
	            this.nestedAmbientDataModifyingProcedureSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphQuerySpecification() {
	    let localctx = new NestedGraphQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, GqlParser.RULE_nestedGraphQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1916;
	        this.nestedQuerySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedAmbientDataModifyingProcedureSpecification() {
	    let localctx = new NestedAmbientDataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, GqlParser.RULE_nestedAmbientDataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1918;
	        this.nestedDataModifyingProcedureSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphStatement() {
	    let localctx = new DropGraphStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, GqlParser.RULE_dropGraphStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1920;
	        this.match(GqlParser.DROP);
	        this.state = 1921;
	        this.match(GqlParser.GRAPH);
	        this.state = 1922;
	        this.catalogGraphParentAndName();
	        this.state = 1924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 1923;
	            this.match(GqlParser.IF_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphTypeStatement() {
	    let localctx = new CreateGraphTypeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, GqlParser.RULE_createGraphTypeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1929;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	            this.state = 1926;
	            this.match(GqlParser.CREATE);
	            break;
	        case 394:
	            this.state = 1927;
	            this.match(GqlParser.OR);
	            this.state = 1928;
	            this.match(GqlParser.REPLACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1931;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1934;
	        this.match(GqlParser.GRAPH);
	        this.state = 1935;
	        this.match(GqlParser.TYPE);
	        this.state = 1936;
	        this.catalogGraphTypeParentAndName();
	        this.state = 1938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1937;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 1940;
	        this.graphTypeInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeInitializer() {
	    let localctx = new GraphTypeInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, GqlParser.RULE_graphTypeInitializer);
	    try {
	        this.state = 1945;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 304:
	        case 389:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1942;
	            this.asGraphType();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1943;
	            this.match(GqlParser.COLON);
	            this.state = 1944;
	            this.catalogGraphTypeReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpecification() {
	    let localctx = new GraphTypeSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, GqlParser.RULE_graphTypeSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1947;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1950;
	        this.match(GqlParser.GRAPH);
	        this.state = 1951;
	        this.match(GqlParser.TYPE);
	        this.state = 1952;
	        this.nestedGraphTypeSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphTypeSpecification() {
	    let localctx = new NestedGraphTypeSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, GqlParser.RULE_nestedGraphTypeSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1954;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1955;
	        this.graphTypeSpecificationBody();
	        this.state = 1956;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpecificationBody() {
	    let localctx = new GraphTypeSpecificationBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, GqlParser.RULE_graphTypeSpecificationBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1958;
	        this.elementTypeDefinitionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDefinitionList() {
	    let localctx = new ElementTypeDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, GqlParser.RULE_elementTypeDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1960;
	        this.elementTypeDefinition();
	        this.state = 1965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 1961;
	            this.match(GqlParser.COMMA);
	            this.state = 1962;
	            this.elementTypeDefinition();
	            this.state = 1967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDefinition() {
	    let localctx = new ElementTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, GqlParser.RULE_elementTypeDefinition);
	    try {
	        this.state = 1970;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1968;
	            this.nodeTypeDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1969;
	            this.edgeTypeDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeDefinition() {
	    let localctx = new NodeTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, GqlParser.RULE_nodeTypeDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 1985;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1972;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 1974;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===8 || _la===9 || _la===462) {
	                this.state = 1973;
	                this.identifier();
	            }

	            this.state = 1977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17 || _la===25 || _la===141 || _la===142 || _la===391) {
	                this.state = 1976;
	                this.nodeTypeFiller();
	            }

	            this.state = 1979;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 124:
	        case 125:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1980;
	            this.nodeSynonym();
	            this.state = 1981;
	            this.match(GqlParser.TYPE);
	            this.state = 1982;
	            this.identifier();
	            this.state = 1983;
	            this.nodeTypeFiller();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeFiller() {
	    let localctx = new NodeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, GqlParser.RULE_nodeTypeFiller);
	    try {
	        this.state = 1992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1987;
	            this.nodeTypeLabelSetDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1988;
	            this.nodeTypePropertyTypeSetDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1989;
	            this.nodeTypeLabelSetDefinition();
	            this.state = 1990;
	            this.nodeTypePropertyTypeSetDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeLabelSetDefinition() {
	    let localctx = new NodeTypeLabelSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, GqlParser.RULE_nodeTypeLabelSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1994;
	        this.labelSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePropertyTypeSetDefinition() {
	    let localctx = new NodeTypePropertyTypeSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, GqlParser.RULE_nodeTypePropertyTypeSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1996;
	        this.propertyTypeSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeDefinition() {
	    let localctx = new EdgeTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, GqlParser.RULE_edgeTypeDefinition);
	    try {
	        this.state = 2007;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1998;
	            this.fullEdgeTypePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1999;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2000;
	            this.edgeKind();
	            this.state = 2001;
	            this.edgeSynonym();
	            this.state = 2002;
	            this.match(GqlParser.TYPE);
	            this.state = 2003;
	            this.identifier();
	            this.state = 2004;
	            this.edgeTypeFiller();
	            this.state = 2005;
	            this.endpointDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeFiller() {
	    let localctx = new EdgeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, GqlParser.RULE_edgeTypeFiller);
	    try {
	        this.state = 2014;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2009;
	            this.edgeTypeLabelSetDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2010;
	            this.edgeTypePropertyTypeSetDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2011;
	            this.edgeTypeLabelSetDefinition();
	            this.state = 2012;
	            this.edgeTypePropertyTypeSetDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeLabelSetDefinition() {
	    let localctx = new EdgeTypeLabelSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, GqlParser.RULE_edgeTypeLabelSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2016;
	        this.labelSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePropertyTypeSetDefinition() {
	    let localctx = new EdgeTypePropertyTypeSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, GqlParser.RULE_edgeTypePropertyTypeSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2018;
	        this.propertyTypeSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePattern() {
	    let localctx = new FullEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, GqlParser.RULE_fullEdgeTypePattern);
	    try {
	        this.state = 2023;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2020;
	            this.fullEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2021;
	            this.fullEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2022;
	            this.fullEdgeTypePatternAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingRight() {
	    let localctx = new FullEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, GqlParser.RULE_fullEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2025;
	        this.sourceNodeTypeReference();
	        this.state = 2026;
	        this.arcTypePointingRight();
	        this.state = 2027;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingLeft() {
	    let localctx = new FullEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, GqlParser.RULE_fullEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2029;
	        this.destinationNodeTypeReference();
	        this.state = 2030;
	        this.arcTypePointingLeft();
	        this.state = 2031;
	        this.sourceNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternAnyDirection() {
	    let localctx = new FullEdgeTypePatternAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, GqlParser.RULE_fullEdgeTypePatternAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2033;
	        this.sourceNodeTypeReference();
	        this.state = 2034;
	        this.arcTypeAnyDirection();
	        this.state = 2035;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingRight() {
	    let localctx = new ArcTypePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, GqlParser.RULE_arcTypePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2037;
	        this.match(GqlParser.LEFT_ARROW_MIUNUS);
	        this.state = 2038;
	        this.arcTypeFiller();
	        this.state = 2039;
	        this.match(GqlParser.MINUS_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingLeft() {
	    let localctx = new ArcTypePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, GqlParser.RULE_arcTypePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2041;
	        this.match(GqlParser.LEFT_ARROW_MIUNUS);
	        this.state = 2042;
	        this.arcTypeFiller();
	        this.state = 2043;
	        this.match(GqlParser.MINUS_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeAnyDirection() {
	    let localctx = new ArcTypeAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, GqlParser.RULE_arcTypeAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2045;
	        this.match(GqlParser.TILDE_LEFT_BRACKET);
	        this.state = 2046;
	        this.arcTypeFiller();
	        this.state = 2047;
	        this.match(GqlParser.RIGHT_ARROW_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeFiller() {
	    let localctx = new ArcTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, GqlParser.RULE_arcTypeFiller);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2050;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===9 || _la===462) {
	            this.state = 2049;
	            this.identifier();
	        }

	        this.state = 2053;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===25 || _la===141 || _la===142 || _la===391) {
	            this.state = 2052;
	            this.edgeTypeFiller();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePattern() {
	    let localctx = new AbbreviatedEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, GqlParser.RULE_abbreviatedEdgeTypePattern);
	    try {
	        this.state = 2058;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2055;
	            this.abbreviatedEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2056;
	            this.abbreviatedEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2057;
	            this.abbreviatedEdgeTypePatternAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingRight() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2060;
	        this.sourceNodeTypeReference();
	        this.state = 2061;
	        this.match(GqlParser.MINUS_RIGHT_ARROW);
	        this.state = 2062;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingLeft() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2064;
	        this.destinationNodeTypeReference();
	        this.state = 2065;
	        this.match(GqlParser.LEFT_ARROW_MIUNUS);
	        this.state = 2066;
	        this.sourceNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternAnyDirection() {
	    let localctx = new AbbreviatedEdgeTypePatternAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, GqlParser.RULE_abbreviatedEdgeTypePatternAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2068;
	        this.sourceNodeTypeReference();
	        this.state = 2069;
	        this.match(GqlParser.TILDE);
	        this.state = 2070;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeReference() {
	    let localctx = new SourceNodeTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, GqlParser.RULE_sourceNodeTypeReference);
	    var _la = 0; // Token type
	    try {
	        this.state = 2081;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2072;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 2073;
	            this.identifier();
	            this.state = 2074;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2076;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 2078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17 || _la===25 || _la===141 || _la===142 || _la===391) {
	                this.state = 2077;
	                this.nodeTypeFiller();
	            }

	            this.state = 2080;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeReference() {
	    let localctx = new DestinationNodeTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, GqlParser.RULE_destinationNodeTypeReference);
	    var _la = 0; // Token type
	    try {
	        this.state = 2092;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2083;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 2084;
	            this.identifier();
	            this.state = 2085;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2087;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 2089;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17 || _la===25 || _la===141 || _la===142 || _la===391) {
	                this.state = 2088;
	                this.nodeTypeFiller();
	            }

	            this.state = 2091;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeKind() {
	    let localctx = new EdgeKindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, GqlParser.RULE_edgeKind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2094;
	        _la = this._input.LA(1);
	        if(!(_la===184 || _la===185)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointDefinition() {
	    let localctx = new EndpointDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, GqlParser.RULE_endpointDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2096;
	        this.match(GqlParser.CONNECTING);
	        this.state = 2097;
	        this.endpointPairDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinition() {
	    let localctx = new EndpointPairDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, GqlParser.RULE_endpointPairDefinition);
	    try {
	        this.state = 2103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2099;
	            this.endpointPairDefinitionPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2100;
	            this.endpointPairDefinitionPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2101;
	            this.endpointPairDefinitionAnyDirection();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2102;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinitionPointingRight() {
	    let localctx = new EndpointPairDefinitionPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, GqlParser.RULE_endpointPairDefinitionPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2105;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2106;
	        this.identifier();
	        this.state = 2107;
	        this.connectorPointingRight();
	        this.state = 2108;
	        this.identifier();
	        this.state = 2109;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinitionPointingLeft() {
	    let localctx = new EndpointPairDefinitionPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, GqlParser.RULE_endpointPairDefinitionPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2111;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2112;
	        this.identifier();
	        this.state = 2113;
	        this.match(GqlParser.LEFT_ARROW_MIUNUS);
	        this.state = 2114;
	        this.identifier();
	        this.state = 2115;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinitionAnyDirection() {
	    let localctx = new EndpointPairDefinitionAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, GqlParser.RULE_endpointPairDefinitionAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2117;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2118;
	        this.identifier();
	        this.state = 2119;
	        this.connectorAnyDirection();
	        this.state = 2120;
	        this.identifier();
	        this.state = 2121;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorPointingRight() {
	    let localctx = new ConnectorPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, GqlParser.RULE_connectorPointingRight);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2123;
	        _la = this._input.LA(1);
	        if(!(_la===62 || _la===395)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorAnyDirection() {
	    let localctx = new ConnectorAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, GqlParser.RULE_connectorAnyDirection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2125;
	        _la = this._input.LA(1);
	        if(!(_la===35 || _la===395)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetDefinition() {
	    let localctx = new LabelSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, GqlParser.RULE_labelSetDefinition);
	    try {
	        this.state = 2132;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 141:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2127;
	            this.match(GqlParser.LABEL);
	            this.state = 2128;
	            this.identifier();
	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2129;
	            this.match(GqlParser.LABELS);
	            this.state = 2130;
	            this.labelExpression(0);
	            break;
	        case 17:
	        case 391:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2131;
	            this.isLabelExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeSetDefinition() {
	    let localctx = new PropertyTypeSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, GqlParser.RULE_propertyTypeSetDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2134;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2136;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===9 || _la===462) {
	            this.state = 2135;
	            this.propertyTypeDefinitionList();
	        }

	        this.state = 2138;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDefinitionList() {
	    let localctx = new PropertyTypeDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, GqlParser.RULE_propertyTypeDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2140;
	        this.propertyTypeDefinition();
	        this.state = 2145;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 2141;
	            this.match(GqlParser.COMMA);
	            this.state = 2142;
	            this.propertyTypeDefinition();
	            this.state = 2147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDefinition() {
	    let localctx = new PropertyTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, GqlParser.RULE_propertyTypeDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2148;
	        this.identifier();
	        this.state = 2149;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphTypeStatement() {
	    let localctx = new DropGraphTypeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, GqlParser.RULE_dropGraphTypeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2151;
	        this.match(GqlParser.DROP);
	        this.state = 2153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 2152;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 2155;
	        this.match(GqlParser.GRAPH);
	        this.state = 2156;
	        this.match(GqlParser.TYPE);
	        this.state = 2157;
	        this.catalogGraphTypeParentAndName();
	        this.state = 2159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 2158;
	            this.match(GqlParser.IF_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createProcedureStatement() {
	    let localctx = new CreateProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, GqlParser.RULE_createProcedureStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2164;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	            this.state = 2161;
	            this.match(GqlParser.CREATE);
	            break;
	        case 394:
	            this.state = 2162;
	            this.match(GqlParser.OR);
	            this.state = 2163;
	            this.match(GqlParser.REPLACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2166;
	        this.match(GqlParser.PROCEDURE);
	        this.state = 2167;
	        this.catalogProcedureParentAndName();
	        this.state = 2168;
	        this.ofTypeSignature();
	        this.state = 2170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 2169;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 2172;
	        this.procedureInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropProcedureStatement() {
	    let localctx = new DropProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, GqlParser.RULE_dropProcedureStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2174;
	        this.match(GqlParser.DROP);
	        this.state = 2175;
	        this.match(GqlParser.PROCEDURE);
	        this.state = 2176;
	        this.catalogProcedureParentAndName();
	        this.state = 2178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 2177;
	            this.match(GqlParser.IF_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createQueryStatement() {
	    let localctx = new CreateQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, GqlParser.RULE_createQueryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2183;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	            this.state = 2180;
	            this.match(GqlParser.CREATE);
	            break;
	        case 394:
	            this.state = 2181;
	            this.match(GqlParser.OR);
	            this.state = 2182;
	            this.match(GqlParser.REPLACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2185;
	        this.match(GqlParser.QUERY);
	        this.state = 2186;
	        this.catalogQueryParentAndName();
	        this.state = 2187;
	        this.ofTypeSignature();
	        this.state = 2189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 2188;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 2191;
	        this.queryInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropQueryStatement() {
	    let localctx = new DropQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, GqlParser.RULE_dropQueryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2193;
	        this.match(GqlParser.DROP);
	        this.state = 2194;
	        this.match(GqlParser.QUERY);
	        this.state = 2195;
	        this.catalogQueryParentAndName();
	        this.state = 2197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 2196;
	            this.match(GqlParser.IF_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunctionStatement() {
	    let localctx = new CreateFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, GqlParser.RULE_createFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2202;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	            this.state = 2199;
	            this.match(GqlParser.CREATE);
	            break;
	        case 394:
	            this.state = 2200;
	            this.match(GqlParser.OR);
	            this.state = 2201;
	            this.match(GqlParser.REPLACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2204;
	        this.match(GqlParser.FUNCTION);
	        this.state = 2205;
	        this.catalogFunctionParentAndName();
	        this.state = 2206;
	        this.ofTypeSignature();
	        this.state = 2208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 2207;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 2210;
	        this.functionInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunctionStatement() {
	    let localctx = new DropFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, GqlParser.RULE_dropFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2212;
	        this.match(GqlParser.DROP);
	        this.state = 2213;
	        this.match(GqlParser.FUNCTION);
	        this.state = 2214;
	        this.catalogFunctionParentAndName();
	        this.state = 2216;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 2215;
	            this.match(GqlParser.IF_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callCatalogModifyingProcedureStatement() {
	    let localctx = new CallCatalogModifyingProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, GqlParser.RULE_callCatalogModifyingProcedureStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2218;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearDataModifyingStatement() {
	    let localctx = new LinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, GqlParser.RULE_linearDataModifyingStatement);
	    try {
	        this.state = 2222;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 246:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2220;
	            this.focusedLinearDataModifyingStatement();
	            break;
	        case 25:
	        case 94:
	        case 99:
	        case 137:
	        case 147:
	        case 148:
	        case 149:
	        case 264:
	        case 286:
	        case 287:
	        case 297:
	        case 298:
	        case 303:
	        case 306:
	        case 311:
	        case 342:
	        case 356:
	        case 363:
	        case 390:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2221;
	            this.ambientLinearDataModifyingStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModifyingStatement() {
	    let localctx = new FocusedLinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, GqlParser.RULE_focusedLinearDataModifyingStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2224;
	        this.useGraphClause();
	        this.state = 2226; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2225;
	        		this.focusedLinearDataModifyingStatementBody();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2228; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,138, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModifyingStatementBody() {
	    let localctx = new FocusedLinearDataModifyingStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, GqlParser.RULE_focusedLinearDataModifyingStatementBody);
	    var _la = 0; // Token type
	    try {
	        this.state = 2252;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	        case 99:
	        case 137:
	        case 147:
	        case 148:
	        case 149:
	        case 246:
	        case 264:
	        case 286:
	        case 287:
	        case 297:
	        case 298:
	        case 303:
	        case 306:
	        case 311:
	        case 342:
	        case 356:
	        case 363:
	        case 390:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2230;
	            this.simpleLinearQueryStatement();
	            this.state = 2236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===246) {
	                this.state = 2231;
	                this.useGraphClause();
	                this.state = 2232;
	                this.simpleLinearQueryStatement();
	                this.state = 2238;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2239;
	            this.simpleDataModifyingStatement();
	            this.state = 2240;
	            this.simpleDataAccessingStatement();
	            this.state = 2246;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2241;
	                    this.useGraphClause();
	                    this.state = 2242;
	                    this.simpleDataAccessingStatement(); 
	                }
	                this.state = 2248;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
	            }

	            this.state = 2249;
	            this.primitiveResultStatement();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2251;
	            this.nestedDataModifyingProcedureSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModifyingStatement() {
	    let localctx = new AmbientLinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, GqlParser.RULE_ambientLinearDataModifyingStatement);
	    try {
	        this.state = 2260;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	        case 99:
	        case 137:
	        case 147:
	        case 148:
	        case 149:
	        case 264:
	        case 286:
	        case 287:
	        case 297:
	        case 298:
	        case 303:
	        case 306:
	        case 311:
	        case 342:
	        case 356:
	        case 363:
	        case 390:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2254;
	            this.simpleLinearQueryStatement();
	            this.state = 2255;
	            this.simpleDataModifyingStatement();
	            this.state = 2256;
	            this.simpleDataAccessingStatement();
	            this.state = 2257;
	            this.primitiveResultStatement();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2259;
	            this.nestedDataModifyingProcedureSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalDataModifyingStatement() {
	    let localctx = new ConditionalDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, GqlParser.RULE_conditionalDataModifyingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2263; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2262;
	            this.whenThenLinearDataModifyingStatementBranch();
	            this.state = 2265; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===146);
	        this.state = 2268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 2267;
	            this.elseLinearDataModifyingStatementBranch();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenThenLinearDataModifyingStatementBranch() {
	    let localctx = new WhenThenLinearDataModifyingStatementBranchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, GqlParser.RULE_whenThenLinearDataModifyingStatementBranch);
	    try {
	        this.state = 2277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2270;
	            this.whenClause();
	            this.state = 2271;
	            this.match(GqlParser.THEN);
	            this.state = 2272;
	            this.linearDataModifyingStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2274;
	            this.whenClause();
	            this.state = 2275;
	            this.nestedDataModifyingProcedureSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseLinearDataModifyingStatementBranch() {
	    let localctx = new ElseLinearDataModifyingStatementBranchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, GqlParser.RULE_elseLinearDataModifyingStatementBranch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2279;
	        this.match(GqlParser.ELSE);
	        this.state = 2280;
	        this.linearDataModifyingStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenClause() {
	    let localctx = new WhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, GqlParser.RULE_whenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2282;
	        this.match(GqlParser.WHEN);
	        this.state = 2283;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, GqlParser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2285;
	        this.match(GqlParser.DO);
	        this.state = 2286;
	        this.nestedDataModifyingProcedureSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, GqlParser.RULE_insertStatement);
	    try {
	        this.state = 2296;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 147:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2288;
	            this.match(GqlParser.INSERT);
	            this.state = 2289;
	            this.simpleGraphPattern();
	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2290;
	            this.match(GqlParser.OPTIONAL);
	            this.state = 2291;
	            this.match(GqlParser.INSERT);
	            this.state = 2292;
	            this.simpleGraphPattern();
	            this.state = 2294;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	            if(la_===1) {
	                this.state = 2293;
	                this.whenClause();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeStatement() {
	    let localctx = new MergeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, GqlParser.RULE_mergeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2298;
	        this.match(GqlParser.MERGE);
	        this.state = 2299;
	        this.simpleGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, GqlParser.RULE_setStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2301;
	        this.match(GqlParser.SET);
	        this.state = 2302;
	        this.setItemList();
	        this.state = 2304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        if(la_===1) {
	            this.state = 2303;
	            this.whenClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItemList() {
	    let localctx = new SetItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, GqlParser.RULE_setItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2306;
	        this.setItem();
	        this.state = 2311;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2307;
	                this.match(GqlParser.COMMA);
	                this.state = 2308;
	                this.setItem(); 
	            }
	            this.state = 2313;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItem() {
	    let localctx = new SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, GqlParser.RULE_setItem);
	    try {
	        this.state = 2317;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2314;
	            this.setPropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2315;
	            this.setAllPropertiesItem();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2316;
	            this.setLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPropertyItem() {
	    let localctx = new SetPropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, GqlParser.RULE_setPropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2319;
	        this.identifier();
	        this.state = 2320;
	        this.match(GqlParser.PERIOD);
	        this.state = 2321;
	        this.identifier();
	        this.state = 2322;
	        this.match(GqlParser.EQUALS);
	        this.state = 2323;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAllPropertiesItem() {
	    let localctx = new SetAllPropertiesItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, GqlParser.RULE_setAllPropertiesItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2325;
	        this.identifier();
	        this.state = 2326;
	        this.match(GqlParser.EQUALS);
	        this.state = 2327;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setLabelItem() {
	    let localctx = new SetLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, GqlParser.RULE_setLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2329;
	        this.labelSetExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetExpression() {
	    let localctx = new LabelSetExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, GqlParser.RULE_labelSetExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2331;
	        this.match(GqlParser.AMPERSAND);
	        this.state = 2333; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2332;
	        		this.identifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2335; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,151, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 2345;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,153,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2337;
	                this.match(GqlParser.AMPERSAND);
	                this.state = 2339; 
	                this._errHandler.sync(this);
	                var _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 2338;
	                		this.identifier();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 2341; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,152, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER ); 
	            }
	            this.state = 2347;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,153,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeStatement() {
	    let localctx = new RemoveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, GqlParser.RULE_removeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2348;
	        this.match(GqlParser.REMOVE);
	        this.state = 2349;
	        this.removeItemList();
	        this.state = 2351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        if(la_===1) {
	            this.state = 2350;
	            this.whenClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItemList() {
	    let localctx = new RemoveItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, GqlParser.RULE_removeItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2353;
	        this.removeItem();
	        this.state = 2358;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,155,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2354;
	                this.match(GqlParser.COMMA);
	                this.state = 2355;
	                this.removeItem(); 
	            }
	            this.state = 2360;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,155,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItem() {
	    let localctx = new RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, GqlParser.RULE_removeItem);
	    try {
	        this.state = 2363;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2361;
	            this.removePropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2362;
	            this.removeLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removePropertyItem() {
	    let localctx = new RemovePropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, GqlParser.RULE_removePropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2365;
	        this.identifier();
	        this.state = 2366;
	        this.match(GqlParser.PERIOD);
	        this.state = 2367;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeLabelItem() {
	    let localctx = new RemoveLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, GqlParser.RULE_removeLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2369;
	        this.identifier();
	        this.state = 2370;
	        this.match(GqlParser.COLON);
	        this.state = 2371;
	        this.labelSetExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, GqlParser.RULE_deleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===137) {
	            this.state = 2373;
	            this.match(GqlParser.DETACH);
	        }

	        this.state = 2376;
	        this.match(GqlParser.DELETE);
	        this.state = 2377;
	        this.deleteItemList();
	        this.state = 2379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 2378;
	            this.whenClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItemList() {
	    let localctx = new DeleteItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, GqlParser.RULE_deleteItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2381;
	        this.valueExpression();
	        this.state = 2386;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2382;
	                this.match(GqlParser.COMMA);
	                this.state = 2383;
	                this.valueExpression(); 
	            }
	            this.state = 2388;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryStatement() {
	    let localctx = new CompositeQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, GqlParser.RULE_compositeQueryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2389;
	        this.compositeQueryExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalQueryStatement() {
	    let localctx = new ConditionalQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, GqlParser.RULE_conditionalQueryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2392; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2391;
	            this.whenThenLinearQueryBranch();
	            this.state = 2394; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===146);
	        this.state = 2397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 2396;
	            this.elseLinearQueryBranch();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenThenLinearQueryBranch() {
	    let localctx = new WhenThenLinearQueryBranchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, GqlParser.RULE_whenThenLinearQueryBranch);
	    try {
	        this.state = 2406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2399;
	            this.whenClause();
	            this.state = 2400;
	            this.match(GqlParser.THEN);
	            this.state = 2401;
	            this.linearQueryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2403;
	            this.whenClause();
	            this.state = 2404;
	            this.nestedQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseLinearQueryBranch() {
	    let localctx = new ElseLinearQueryBranchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, GqlParser.RULE_elseLinearQueryBranch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2408;
	        this.match(GqlParser.ELSE);
	        this.state = 2409;
	        this.linearQueryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	compositeQueryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CompositeQueryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 382;
	    this.enterRecursionRule(localctx, 382, GqlParser.RULE_compositeQueryExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2412;
	        this.linearQueryStatement();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2420;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,163,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CompositeQueryExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_compositeQueryExpression);
	                this.state = 2414;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 2415;
	                this.queryConjunction();
	                this.state = 2416;
	                this.linearQueryStatement(); 
	            }
	            this.state = 2422;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,163,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryConjunction() {
	    let localctx = new QueryConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, GqlParser.RULE_queryConjunction);
	    try {
	        this.state = 2425;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 151:
	        case 152:
	        case 153:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2423;
	            this.setOperator();
	            break;
	        case 150:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2424;
	            this.match(GqlParser.OTHERWISE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOperator() {
	    let localctx = new SetOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, GqlParser.RULE_setOperator);
	    try {
	        this.state = 2439;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 151:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2427;
	            this.match(GqlParser.UNION);
	            this.state = 2429;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	            if(la_===1) {
	                this.state = 2428;
	                this.setQuantifier();

	            }
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2431;
	            this.match(GqlParser.EXCEPT);
	            this.state = 2433;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	            if(la_===1) {
	                this.state = 2432;
	                this.setQuantifier();

	            }
	            break;
	        case 153:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2435;
	            this.match(GqlParser.INTERSECT);
	            this.state = 2437;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	            if(la_===1) {
	                this.state = 2436;
	                this.setQuantifier();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearQueryStatement() {
	    let localctx = new LinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, GqlParser.RULE_linearQueryStatement);
	    try {
	        this.state = 2443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2441;
	            this.focusedLinearQueryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2442;
	            this.ambientLinearQueryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearQueryStatement() {
	    let localctx = new AmbientLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, GqlParser.RULE_ambientLinearQueryStatement);
	    try {
	        this.state = 2451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2445;
	            this.simpleLinearQueryStatement();
	            this.state = 2446;
	            this.simpleDataAccessingStatement();
	            this.state = 2447;
	            this.simpleDataAccessingStatement();
	            this.state = 2448;
	            this.primitiveResultStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2450;
	            this.nestedQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatement() {
	    let localctx = new FocusedLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, GqlParser.RULE_focusedLinearQueryStatement);
	    try {
	        this.state = 2457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 364:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2453;
	            this.fromGraphClause();
	            this.state = 2454;
	            this.focusedLinearQueryStatementBody();
	            break;
	        case 265:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2456;
	            this.selectStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatementBody() {
	    let localctx = new FocusedLinearQueryStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, GqlParser.RULE_focusedLinearQueryStatementBody);
	    try {
	        this.state = 2471;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2459;
	            this.simpleLinearQueryStatement();
	            this.state = 2465;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,172,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2460;
	                    this.fromGraphClause();
	                    this.state = 2461;
	                    this.simpleLinearQueryStatement(); 
	                }
	                this.state = 2467;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,172,this._ctx);
	            }

	            this.state = 2468;
	            this.primitiveResultStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2470;
	            this.nestedQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearQueryStatement() {
	    let localctx = new SimpleLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, GqlParser.RULE_simpleLinearQueryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2473;
	        this.simpleQueryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatement() {
	    let localctx = new MatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, GqlParser.RULE_matchStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148 || _la===298) {
	            this.state = 2475;
	            this.statementMode();
	        }

	        this.state = 2478;
	        this.match(GqlParser.MATCH);
	        this.state = 2479;
	        this.graphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callQueryStatement() {
	    let localctx = new CallQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, GqlParser.RULE_callQueryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2481;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mandatoryStatement() {
	    let localctx = new MandatoryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, GqlParser.RULE_mandatoryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2483;
	        this.match(GqlParser.MANDATORY);
	        this.state = 2484;
	        this.procedureCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalStatement() {
	    let localctx = new OptionalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, GqlParser.RULE_optionalStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2486;
	        this.match(GqlParser.OPTIONAL);
	        this.state = 2487;
	        this.procedureCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterStatement() {
	    let localctx = new FilterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, GqlParser.RULE_filterStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2489;
	        this.match(GqlParser.FILTER);
	        this.state = 2492;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 244:
	            this.state = 2490;
	            this.whereClause();
	            break;
	        case 7:
	        case 8:
	        case 9:
	        case 25:
	        case 27:
	        case 29:
	        case 39:
	        case 94:
	        case 100:
	        case 101:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 189:
	        case 190:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 247:
	        case 252:
	        case 253:
	        case 255:
	        case 258:
	        case 259:
	        case 269:
	        case 280:
	        case 291:
	        case 295:
	        case 296:
	        case 299:
	        case 307:
	        case 316:
	        case 323:
	        case 328:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 448:
	        case 449:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.state = 2491;
	            this.searchCondition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatement() {
	    let localctx = new LetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, GqlParser.RULE_letStatement);
	    try {
	        this.state = 2501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 306:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2494;
	            this.match(GqlParser.LET);
	            this.state = 2495;
	            this.compactVariableDefinitionList();
	            break;
	        case 148:
	        case 298:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2496;
	            this.statementMode();
	            this.state = 2497;
	            this.match(GqlParser.LET);
	            this.state = 2498;
	            this.compactVariableDefinitionList();
	            this.state = 2499;
	            this.whereClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateStatement() {
	    let localctx = new AggregateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, GqlParser.RULE_aggregateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2503;
	        this.match(GqlParser.AGGREGATE);
	        this.state = 2504;
	        this.compactValueVariableDefinitionList();
	        this.state = 2505;
	        this.whereClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, GqlParser.RULE_forStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2508;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148 || _la===298) {
	            this.state = 2507;
	            this.statementMode();
	        }

	        this.state = 2510;
	        this.match(GqlParser.FOR);
	        this.state = 2511;
	        this.forItemList();
	        this.state = 2513;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 2512;
	            this.forOrdinalityOrIndex();

	        }
	        this.state = 2516;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 2515;
	            this.whereClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItemList() {
	    let localctx = new ForItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, GqlParser.RULE_forItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2518;
	        this.forItem();
	        this.state = 2523;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2519;
	                this.match(GqlParser.AND);
	                this.state = 2520;
	                this.forItem(); 
	            }
	            this.state = 2525;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItem() {
	    let localctx = new ForItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, GqlParser.RULE_forItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2526;
	        this.forItemAlias();
	        this.state = 2527;
	        this.collectionValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItemAlias() {
	    let localctx = new ForItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, GqlParser.RULE_forItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2529;
	        this.identifier();
	        this.state = 2530;
	        this.match(GqlParser.IN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forOrdinalityOrIndex() {
	    let localctx = new ForOrdinalityOrIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, GqlParser.RULE_forOrdinalityOrIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2532;
	        this.match(GqlParser.WITH);
	        this.state = 2533;
	        _la = this._input.LA(1);
	        if(!(_la===214 || _la===225)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        if(la_===1) {
	            this.state = 2534;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByAndPageStatement() {
	    let localctx = new OrderByAndPageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, GqlParser.RULE_orderByAndPageStatement);
	    try {
	        this.state = 2553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2544;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	            if(la_===1) {
	                this.state = 2537;
	                this.orderByClause();
	                this.state = 2542;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	                if(la_===1) {
	                    this.state = 2538;
	                    this.offsetClause();
	                    this.state = 2540;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	                    if(la_===1) {
	                        this.state = 2539;
	                        this.limitClause();

	                    }

	                }

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2550;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	            if(la_===1) {
	                this.state = 2546;
	                this.offsetClause();
	                this.state = 2548;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	                if(la_===1) {
	                    this.state = 2547;
	                    this.limitClause();

	                }

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2552;
	            this.limitClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callFunctionStatement() {
	    let localctx = new CallFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, GqlParser.RULE_callFunctionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveResultStatement() {
	    let localctx = new PrimitiveResultStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, GqlParser.RULE_primitiveResultStatement);
	    try {
	        this.state = 2564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2560;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	            if(la_===1) {
	                this.state = 2557;
	                this.returnStatement();
	                this.state = 2558;
	                this.orderByAndPageStatement();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2562;
	            this.projectStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2563;
	            this.match(GqlParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, GqlParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2566;
	        this.match(GqlParser.RETURN);
	        this.state = 2567;
	        this.returnStatementBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatementBody() {
	    let localctx = new ReturnStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, GqlParser.RULE_returnStatementBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195 || _la===196) {
	            this.state = 2569;
	            this.setQuantifier();
	        }

	        this.state = 2574;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            this.state = 2572;
	            this.match(GqlParser.ASTERISK);
	            break;
	        case 7:
	        case 8:
	        case 9:
	        case 11:
	        case 12:
	        case 25:
	        case 27:
	        case 29:
	        case 39:
	        case 92:
	        case 94:
	        case 100:
	        case 101:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 135:
	        case 139:
	        case 189:
	        case 190:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 247:
	        case 252:
	        case 253:
	        case 255:
	        case 258:
	        case 259:
	        case 269:
	        case 280:
	        case 291:
	        case 295:
	        case 296:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 307:
	        case 316:
	        case 319:
	        case 323:
	        case 327:
	        case 328:
	        case 330:
	        case 331:
	        case 332:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.state = 2573;
	            this.returnItemList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        if(la_===1) {
	            this.state = 2576;
	            this.groupByClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemList() {
	    let localctx = new ReturnItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, GqlParser.RULE_returnItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2579;
	        this.returnItem();
	        this.state = 2584;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2580;
	                this.match(GqlParser.COMMA);
	                this.state = 2581;
	                this.returnItem(); 
	            }
	            this.state = 2586;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, GqlParser.RULE_returnItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2587;
	        this.valueExpression();
	        this.state = 2589;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        if(la_===1) {
	            this.state = 2588;
	            this.returnItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemAlias() {
	    let localctx = new ReturnItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, GqlParser.RULE_returnItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2591;
	        this.match(GqlParser.AS);
	        this.state = 2592;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, GqlParser.RULE_selectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2594;
	        this.match(GqlParser.SELECT);
	        this.state = 2596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195 || _la===196) {
	            this.state = 2595;
	            this.setQuantifier();
	        }

	        this.state = 2598;
	        this.selectItemList();
	        this.state = 2599;
	        this.selectStatementBody();
	        this.state = 2601;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        if(la_===1) {
	            this.state = 2600;
	            this.whereClause();

	        }
	        this.state = 2604;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        if(la_===1) {
	            this.state = 2603;
	            this.groupByClause();

	        }
	        this.state = 2607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        if(la_===1) {
	            this.state = 2606;
	            this.havingClause();

	        }
	        this.state = 2610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        if(la_===1) {
	            this.state = 2609;
	            this.orderByClause();

	        }
	        this.state = 2616;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        if(la_===1) {
	            this.state = 2612;
	            this.offsetClause();
	            this.state = 2614;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	            if(la_===1) {
	                this.state = 2613;
	                this.limitClause();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemList() {
	    let localctx = new SelectItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, GqlParser.RULE_selectItemList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2618;
	        this.selectItem();
	        this.state = 2623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 2619;
	            this.match(GqlParser.COMMA);
	            this.state = 2620;
	            this.selectItem();
	            this.state = 2625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, GqlParser.RULE_selectItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2626;
	        this.valueExpression();
	        this.state = 2628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===389) {
	            this.state = 2627;
	            this.selectItemAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemAlias() {
	    let localctx = new SelectItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, GqlParser.RULE_selectItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2630;
	        this.match(GqlParser.AS);
	        this.state = 2631;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, GqlParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2633;
	        this.match(GqlParser.HAVING);
	        this.state = 2634;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatementBody() {
	    let localctx = new SelectStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, GqlParser.RULE_selectStatementBody);
	    try {
	        this.state = 2639;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2636;
	            this.match(GqlParser.FROM);
	            this.state = 2637;
	            this.selectGraphMatchList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2638;
	            this.selectQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatchList() {
	    let localctx = new SelectGraphMatchListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, GqlParser.RULE_selectGraphMatchList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2641;
	        this.selectGraphMatch();
	        this.state = 2646;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2642;
	                this.match(GqlParser.COMMA);
	                this.state = 2643;
	                this.selectGraphMatch(); 
	            }
	            this.state = 2648;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatch() {
	    let localctx = new SelectGraphMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, GqlParser.RULE_selectGraphMatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2649;
	        this.graphExpression();
	        this.state = 2650;
	        this.matchStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuerySpecification() {
	    let localctx = new SelectQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, GqlParser.RULE_selectQuerySpecification);
	    try {
	        this.state = 2657;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2652;
	            this.match(GqlParser.FROM);
	            this.state = 2653;
	            this.nestedQuerySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2654;
	            this.fromGraphClause();
	            this.state = 2655;
	            this.nestedQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectStatement() {
	    let localctx = new ProjectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, GqlParser.RULE_projectStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2659;
	        this.match(GqlParser.PROJECT);
	        this.state = 2660;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromGraphClause() {
	    let localctx = new FromGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, GqlParser.RULE_fromGraphClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2662;
	        this.match(GqlParser.FROM);
	        this.state = 2663;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useGraphClause() {
	    let localctx = new UseGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, GqlParser.RULE_useGraphClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2665;
	        this.match(GqlParser.USE);
	        this.state = 2666;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atSchemaClause() {
	    let localctx = new AtSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, GqlParser.RULE_atSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2668;
	        this.match(GqlParser.AT);
	        this.state = 2669;
	        this.schemaReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofTypeSignature() {
	    let localctx = new OfTypeSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, GqlParser.RULE_ofTypeSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===393) {
	            this.state = 2671;
	            this.ofTypePrefix();
	            this.state = 2672;
	            this.typeSignature();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSignature() {
	    let localctx = new TypeSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, GqlParser.RULE_typeSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2676;
	        this.parenthesizedFormalParameterList();
	        this.state = 2680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===393) {
	            this.state = 2677;
	            this.ofTypePrefix();
	            this.state = 2678;
	            this.procedureResultType();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedFormalParameterList() {
	    let localctx = new ParenthesizedFormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, GqlParser.RULE_parenthesizedFormalParameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2682;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2683;
	        this.formalParameterList();
	        this.state = 2684;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, GqlParser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.state = 2694;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 263:
	        case 293:
	        case 294:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 263)) & ~0x1f) == 0 && ((1 << (_la - 263)) & 3221225473) !== 0)) {
	                this.state = 2686;
	                this.mandatoryFormalParameterList();
	                this.state = 2689;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===19) {
	                    this.state = 2687;
	                    this.match(GqlParser.COMMA);
	                    this.state = 2688;
	                    this.optionalFormalParameterList();
	                }

	            }

	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2693;
	            this.optionalFormalParameterList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mandatoryFormalParameterList() {
	    let localctx = new MandatoryFormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, GqlParser.RULE_mandatoryFormalParameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2696;
	        this.formalParameterDeclarationList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalFormalParameterList() {
	    let localctx = new OptionalFormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, GqlParser.RULE_optionalFormalParameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2698;
	        this.match(GqlParser.OPTIONAL);
	        this.state = 2699;
	        this.formalParameterDefinitionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterDeclarationList() {
	    let localctx = new FormalParameterDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, GqlParser.RULE_formalParameterDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2701;
	        this.formalParameterDeclaration();
	        this.state = 2706;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2702;
	                this.match(GqlParser.COMMA);
	                this.state = 2703;
	                this.formalParameterDeclaration(); 
	            }
	            this.state = 2708;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterDeclaration() {
	    let localctx = new FormalParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, GqlParser.RULE_formalParameterDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2709;
	        this.parameterCardinality();
	        this.state = 2710;
	        this.compactVariableDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterDefinitionList() {
	    let localctx = new FormalParameterDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, GqlParser.RULE_formalParameterDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2712;
	        this.formalParameterDefinition();
	        this.state = 2717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 2713;
	            this.match(GqlParser.COMMA);
	            this.state = 2714;
	            this.formalParameterDefinition();
	            this.state = 2719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterDefinition() {
	    let localctx = new FormalParameterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, GqlParser.RULE_formalParameterDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2720;
	        this.parameterCardinality();
	        this.state = 2721;
	        this.compactVariableDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterCardinality() {
	    let localctx = new ParameterCardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, GqlParser.RULE_parameterCardinality);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2723;
	        _la = this._input.LA(1);
	        if(!(((((_la - 263)) & ~0x1f) == 0 && ((1 << (_la - 263)) & 3221225473) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureResultType() {
	    let localctx = new ProcedureResultTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, GqlParser.RULE_procedureResultType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2725;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, GqlParser.RULE_graphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2727;
	        this.pathPatternList();
	        this.state = 2735;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	        if(la_===1) {
	            this.state = 2728;
	            this.keepClause();
	            this.state = 2730;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	            if(la_===1) {
	                this.state = 2729;
	                this.graphPatternWhereClause();

	            }
	            this.state = 2733;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	            if(la_===1) {
	                this.state = 2732;
	                this.yieldClause();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternList() {
	    let localctx = new PathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, GqlParser.RULE_pathPatternList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2737;
	        this.pathPattern();
	        this.state = 2742;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2738;
	                this.match(GqlParser.COMMA);
	                this.state = 2739;
	                this.pathPattern(); 
	            }
	            this.state = 2744;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPattern() {
	    let localctx = new PathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, GqlParser.RULE_pathPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===462) {
	            this.state = 2745;
	            this.regularIdentifier();
	            this.state = 2746;
	            this.match(GqlParser.EQUALS);
	        }

	        this.state = 2750;
	        this.pathPatternPrefix();
	        this.state = 2751;
	        this.pathPatternExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keepClause() {
	    let localctx = new KeepClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, GqlParser.RULE_keepClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2753;
	        this.match(GqlParser.KEEP);
	        this.state = 2754;
	        this.pathPatternPrefix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternWhereClause() {
	    let localctx = new GraphPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, GqlParser.RULE_graphPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2756;
	        this.match(GqlParser.WHERE);
	        this.state = 2757;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternExpression() {
	    let localctx = new PathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, GqlParser.RULE_pathPatternExpression);
	    try {
	        this.state = 2762;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2759;
	            this.pathTerm(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2760;
	            this.pathMultisetAlternation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2761;
	            this.pathPatternUnion();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMultisetAlternation() {
	    let localctx = new PathMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, GqlParser.RULE_pathMultisetAlternation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2764;
	        this.pathTerm(0);
	        this.state = 2765;
	        this.match(GqlParser.MULTISET_ALT_OPERATOR);
	        this.state = 2766;
	        this.pathTerm(0);
	        this.state = 2771;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,220,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2767;
	                this.match(GqlParser.MULTISET_ALT_OPERATOR);
	                this.state = 2768;
	                this.pathTerm(0); 
	            }
	            this.state = 2773;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,220,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternUnion() {
	    let localctx = new PathPatternUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, GqlParser.RULE_pathPatternUnion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2774;
	        this.pathTerm(0);
	        this.state = 2775;
	        this.match(GqlParser.VERTICAL_BAR);
	        this.state = 2776;
	        this.pathTerm(0);
	        this.state = 2781;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2777;
	                this.match(GqlParser.VERTICAL_BAR);
	                this.state = 2778;
	                this.pathTerm(0); 
	            }
	            this.state = 2783;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	pathTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PathTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 504;
	    this.enterRecursionRule(localctx, 504, GqlParser.RULE_pathTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2785;
	        this.pathFactor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2791;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,222,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PathTermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_pathTerm);
	                this.state = 2787;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2788;
	                this.pathFactor(); 
	            }
	            this.state = 2793;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,222,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	pathFactor() {
	    let localctx = new PathFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, GqlParser.RULE_pathFactor);
	    try {
	        this.state = 2797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2794;
	            this.pathPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2795;
	            this.quantifiedPathPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2796;
	            this.questionedPathPrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedPathPrimary() {
	    let localctx = new QuantifiedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, GqlParser.RULE_quantifiedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2799;
	        this.pathPrimary();
	        this.state = 2800;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	questionedPathPrimary() {
	    let localctx = new QuestionedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, GqlParser.RULE_questionedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2802;
	        this.pathPrimary();
	        this.state = 2803;
	        this.match(GqlParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, GqlParser.RULE_pathPrimary);
	    try {
	        this.state = 2808;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2805;
	            this.elementPattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2806;
	            this.parenthesizedPathPatternExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2807;
	            this.simplifiedPathPatternExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPattern() {
	    let localctx = new ElementPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, GqlParser.RULE_elementPattern);
	    try {
	        this.state = 2812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2810;
	            this.nodePattern();
	            break;
	        case 12:
	        case 23:
	        case 24:
	        case 35:
	        case 52:
	        case 54:
	        case 60:
	        case 63:
	        case 72:
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2811;
	            this.edgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePattern() {
	    let localctx = new NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, GqlParser.RULE_nodePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2814;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2815;
	        this.elementPatternFiller();
	        this.state = 2816;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternFiller() {
	    let localctx = new ElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, GqlParser.RULE_elementPatternFiller);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===462) {
	            this.state = 2818;
	            this.regularIdentifier();
	        }

	        this.state = 2822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===391) {
	            this.state = 2821;
	            this.isLabelExpression();
	        }

	        this.state = 2825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25 || _la===244) {
	            this.state = 2824;
	            this.elementPatternPredicate();
	        }

	        this.state = 2828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===154) {
	            this.state = 2827;
	            this.elementPatternCostClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabelExpression() {
	    let localctx = new IsLabelExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, GqlParser.RULE_isLabelExpression);
	    try {
	        this.state = 2833;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 391:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2830;
	            this.match(GqlParser.IS);
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2831;
	            this.match(GqlParser.COLON);
	            this.state = 2832;
	            this.labelExpression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternPredicate() {
	    let localctx = new ElementPatternPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, GqlParser.RULE_elementPatternPredicate);
	    try {
	        this.state = 2837;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 244:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2835;
	            this.elementPatternWhereClause();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2836;
	            this.elementPropertySpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternWhereClause() {
	    let localctx = new ElementPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, GqlParser.RULE_elementPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2839;
	        this.match(GqlParser.WHERE);
	        this.state = 2840;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPropertySpecification() {
	    let localctx = new ElementPropertySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, GqlParser.RULE_elementPropertySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2842;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2843;
	        this.propertyKeyValuePairList();
	        this.state = 2844;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePairList() {
	    let localctx = new PropertyKeyValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, GqlParser.RULE_propertyKeyValuePairList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2846;
	        this.propertyKeyValuePair();
	        this.state = 2851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 2847;
	            this.match(GqlParser.COMMA);
	            this.state = 2848;
	            this.propertyKeyValuePair();
	            this.state = 2853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePair() {
	    let localctx = new PropertyKeyValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, GqlParser.RULE_propertyKeyValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2854;
	        this.identifier();
	        this.state = 2855;
	        this.match(GqlParser.COLON);
	        this.state = 2856;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternCostClause() {
	    let localctx = new ElementPatternCostClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, GqlParser.RULE_elementPatternCostClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2858;
	        this.costClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	costClause() {
	    let localctx = new CostClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, GqlParser.RULE_costClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2860;
	        this.match(GqlParser.COST);
	        this.state = 2861;
	        this.valueExpression();
	        this.state = 2864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===155) {
	            this.state = 2862;
	            this.match(GqlParser.DEFAULT);
	            this.state = 2863;
	            this.valueExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgePattern() {
	    let localctx = new EdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, GqlParser.RULE_edgePattern);
	    try {
	        this.state = 2868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2866;
	            this.fullEdgePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2867;
	            this.abbreviatedEdgePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePattern() {
	    let localctx = new FullEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, GqlParser.RULE_fullEdgePattern);
	    try {
	        this.state = 2877;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2870;
	            this.fullEdgePointingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2871;
	            this.fullEdgeUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2872;
	            this.fullEdgePointingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2873;
	            this.fullEdgeLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2874;
	            this.fullEdgeUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2875;
	            this.fullEdgeLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2876;
	            this.fullEdgeAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingLeft() {
	    let localctx = new FullEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, GqlParser.RULE_fullEdgePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2879;
	        this.match(GqlParser.LEFT_ARROW_RIGHT_BRACKET);
	        this.state = 2880;
	        this.elementPatternFiller();
	        this.state = 2881;
	        this.match(GqlParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirected() {
	    let localctx = new FullEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, GqlParser.RULE_fullEdgeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2883;
	        this.match(GqlParser.TILDE_LEFT_BRACKET);
	        this.state = 2884;
	        this.elementPatternFiller();
	        this.state = 2885;
	        this.match(GqlParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingRight() {
	    let localctx = new FullEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, GqlParser.RULE_fullEdgePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2887;
	        this.match(GqlParser.MINUS_LEFT_BRACKET);
	        this.state = 2888;
	        this.elementPatternFiller();
	        this.state = 2889;
	        this.match(GqlParser.RIGHT_BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrUndirected() {
	    let localctx = new FullEdgeLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, GqlParser.RULE_fullEdgeLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2891;
	        this.match(GqlParser.LEFT_ARROW_TILDE);
	        this.state = 2892;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 2893;
	        this.elementPatternFiller();
	        this.state = 2894;
	        this.match(GqlParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirectedOrRight() {
	    let localctx = new FullEdgeUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, GqlParser.RULE_fullEdgeUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2896;
	        this.match(GqlParser.TILDE);
	        this.state = 2897;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 2898;
	        this.elementPatternFiller();
	        this.state = 2899;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 2900;
	        this.match(GqlParser.TILDE_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrRight() {
	    let localctx = new FullEdgeLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, GqlParser.RULE_fullEdgeLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2902;
	        this.match(GqlParser.LEFT_ANGLE_BRACKET);
	        this.state = 2903;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 2904;
	        this.elementPatternFiller();
	        this.state = 2905;
	        this.match(GqlParser.RIGHT_BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeAnyDirection() {
	    let localctx = new FullEdgeAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, GqlParser.RULE_fullEdgeAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2907;
	        this.match(GqlParser.MINUS_LEFT_BRACKET);
	        this.state = 2908;
	        this.elementPatternFiller();
	        this.state = 2909;
	        this.match(GqlParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgePattern() {
	    let localctx = new AbbreviatedEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, GqlParser.RULE_abbreviatedEdgePattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2911;
	        _la = this._input.LA(1);
	        if(!(((((_la - 12)) & ~0x1f) == 0 && ((1 << (_la - 12)) & 8394753) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & 2099201) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternQuantifier() {
	    let localctx = new GraphPatternQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, GqlParser.RULE_graphPatternQuantifier);
	    try {
	        this.state = 2917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2913;
	            this.match(GqlParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2914;
	            this.match(GqlParser.PLUS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2915;
	            this.fixedQuantifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2916;
	            this.generalQuantifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedQuantifier() {
	    let localctx = new FixedQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, GqlParser.RULE_fixedQuantifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2919;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2920;
	        this.unsignedInteger();
	        this.state = 2921;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalQuantifier() {
	    let localctx = new GeneralQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, GqlParser.RULE_generalQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2923;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2925;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 71) !== 0)) {
	            this.state = 2924;
	            this.unsignedInteger();
	        }

	        this.state = 2927;
	        this.match(GqlParser.COMMA);
	        this.state = 2929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 71) !== 0)) {
	            this.state = 2928;
	            this.unsignedInteger();
	        }

	        this.state = 2931;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternExpression() {
	    let localctx = new ParenthesizedPathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, GqlParser.RULE_parenthesizedPathPatternExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 2967;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2933;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 2935;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===462) {
	                this.state = 2934;
	                this.subpathVariableDeclaration();
	            }

	            this.state = 2938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===396) {
	                this.state = 2937;
	                this.pathModePrefix();
	            }

	            this.state = 2941;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 12)) & ~0x1f) == 0 && ((1 << (_la - 12)) & 8558593) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & 14684683) !== 0)) {
	                this.state = 2940;
	                this.pathPatternExpression();
	            }

	            this.state = 2944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===244) {
	                this.state = 2943;
	                this.parenthesizedPathPatternWhereClause();
	            }

	            this.state = 2947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===154) {
	                this.state = 2946;
	                this.costClause();
	            }

	            this.state = 2949;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2950;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 2952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===462) {
	                this.state = 2951;
	                this.subpathVariableDeclaration();
	            }

	            this.state = 2955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===396) {
	                this.state = 2954;
	                this.pathModePrefix();
	            }

	            this.state = 2958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 12)) & ~0x1f) == 0 && ((1 << (_la - 12)) & 8558593) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & 14684683) !== 0)) {
	                this.state = 2957;
	                this.pathPatternExpression();
	            }

	            this.state = 2961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===244) {
	                this.state = 2960;
	                this.parenthesizedPathPatternWhereClause();
	            }

	            this.state = 2964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===154) {
	                this.state = 2963;
	                this.costClause();
	            }

	            this.state = 2966;
	            this.match(GqlParser.RIGHT_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVariableDeclaration() {
	    let localctx = new SubpathVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, GqlParser.RULE_subpathVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2969;
	        this.regularIdentifier();
	        this.state = 2970;
	        this.match(GqlParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternWhereClause() {
	    let localctx = new ParenthesizedPathPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, GqlParser.RULE_parenthesizedPathPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2972;
	        this.match(GqlParser.WHERE);
	        this.state = 2973;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternPrefix() {
	    let localctx = new PathPatternPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, GqlParser.RULE_pathPatternPrefix);
	    try {
	        this.state = 2977;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2975;
	            this.pathModePrefix();
	            break;
	        case 170:
	        case 195:
	        case 238:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2976;
	            this.pathSearchPrefix();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathModePrefix() {
	    let localctx = new PathModePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, GqlParser.RULE_pathModePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2979;
	        this.match(GqlParser.PATH_MODE);
	        this.state = 2981;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        if(la_===1) {
	            this.state = 2980;
	            this.match(GqlParser.PATH);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSearchPrefix() {
	    let localctx = new PathSearchPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, GqlParser.RULE_pathSearchPrefix);
	    try {
	        this.state = 2986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2983;
	            this.allPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2984;
	            this.anyPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2985;
	            this.shortestPathSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allPathSearch() {
	    let localctx = new AllPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, GqlParser.RULE_allPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2988;
	        this.match(GqlParser.ALL);
	        this.state = 2990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	        if(la_===1) {
	            this.state = 2989;
	            this.match(GqlParser.PATH_MODE);

	        }
	        this.state = 2993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        if(la_===1) {
	            this.state = 2992;
	            this.match(GqlParser.PATH);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyPathSearch() {
	    let localctx = new AnyPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, GqlParser.RULE_anyPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2995;
	        this.match(GqlParser.ANY);
	        this.state = 2997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        if(la_===1) {
	            this.state = 2996;
	            this.unsignedIntegerSpecification();

	        }
	        this.state = 3000;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        if(la_===1) {
	            this.state = 2999;
	            this.match(GqlParser.PATH_MODE);

	        }
	        this.state = 3003;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	        if(la_===1) {
	            this.state = 3002;
	            this.match(GqlParser.PATH);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortestPathSearch() {
	    let localctx = new ShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, GqlParser.RULE_shortestPathSearch);
	    try {
	        this.state = 3009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3005;
	            this.allShortestPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3006;
	            this.anyShortestPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3007;
	            this.countedShortestPathSearch();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3008;
	            this.countedShortestGroupSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allShortestPathSearch() {
	    let localctx = new AllShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, GqlParser.RULE_allShortestPathSearch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3011;
	        this.match(GqlParser.ALL);
	        this.state = 3012;
	        this.match(GqlParser.SHORTEST);
	        this.state = 3014;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        if(la_===1) {
	            this.state = 3013;
	            this.match(GqlParser.PATH_MODE);

	        }
	        this.state = 3017;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        if(la_===1) {
	            this.state = 3016;
	            _la = this._input.LA(1);
	            if(!(_la===158 || _la===285)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyShortestPathSearch() {
	    let localctx = new AnyShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, GqlParser.RULE_anyShortestPathSearch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3019;
	        this.match(GqlParser.ANY);
	        this.state = 3020;
	        this.match(GqlParser.SHORTEST);
	        this.state = 3022;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	        if(la_===1) {
	            this.state = 3021;
	            this.match(GqlParser.PATH_MODE);

	        }
	        this.state = 3025;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        if(la_===1) {
	            this.state = 3024;
	            _la = this._input.LA(1);
	            if(!(_la===158 || _la===285)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestPathSearch() {
	    let localctx = new CountedShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, GqlParser.RULE_countedShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3027;
	        this.match(GqlParser.SHORTEST);
	        this.state = 3028;
	        this.unsignedIntegerSpecification();
	        this.state = 3030;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	        if(la_===1) {
	            this.state = 3029;
	            this.match(GqlParser.PATH_MODE);

	        }
	        this.state = 3033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        if(la_===1) {
	            this.state = 3032;
	            this.match(GqlParser.PATH);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestGroupSearch() {
	    let localctx = new CountedShortestGroupSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, GqlParser.RULE_countedShortestGroupSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3035;
	        this.match(GqlParser.SHORTEST);
	        this.state = 3036;
	        this.unsignedIntegerSpecification();
	        this.state = 3038;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
	        if(la_===1) {
	            this.state = 3037;
	            this.match(GqlParser.PATH_MODE);

	        }
	        this.state = 3041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        if(la_===1) {
	            this.state = 3040;
	            this.match(GqlParser.PATH);

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleGraphPattern() {
	    let localctx = new SimpleGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, GqlParser.RULE_simpleGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3045;
	        this.simplePathPatternList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplePathPatternList() {
	    let localctx = new SimplePathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, GqlParser.RULE_simplePathPatternList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3047;
	        this.simplePathPattern();
	        this.state = 3052;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,267,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3048;
	                this.match(GqlParser.COMMA);
	                this.state = 3049;
	                this.simplePathPattern(); 
	            }
	            this.state = 3054;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,267,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplePathPattern() {
	    let localctx = new SimplePathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, GqlParser.RULE_simplePathPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3055;
	        this.pathPatternExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	labelExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new LabelExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 594;
	    this.enterRecursionRule(localctx, 594, GqlParser.RULE_labelExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3058;
	        this.labelTerm(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3065;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,268,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new LabelExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_labelExpression);
	                this.state = 3060;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 3061;
	                this.match(GqlParser.VERTICAL_BAR);
	                this.state = 3062;
	                this.labelTerm(0); 
	            }
	            this.state = 3067;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,268,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	labelTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new LabelTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 596;
	    this.enterRecursionRule(localctx, 596, GqlParser.RULE_labelTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3069;
	        this.labelFactor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3076;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,269,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new LabelTermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_labelTerm);
	                this.state = 3071;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 3072;
	                this.match(GqlParser.AMPERSAND);
	                this.state = 3073;
	                this.labelFactor(); 
	            }
	            this.state = 3078;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,269,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	labelFactor() {
	    let localctx = new LabelFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, GqlParser.RULE_labelFactor);
	    try {
	        this.state = 3082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3079;
	            this.identifier();
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3080;
	            this.match(GqlParser.PERCENT);
	            break;
	        case 27:
	        case 29:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3081;
	            this.parenthesizedLabelExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedLabelExpression() {
	    let localctx = new ParenthesizedLabelExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, GqlParser.RULE_parenthesizedLabelExpression);
	    try {
	        this.state = 3092;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3084;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3085;
	            this.labelExpression(0);
	            this.state = 3086;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3088;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 3089;
	            this.labelExpression(0);
	            this.state = 3090;
	            this.match(GqlParser.RIGHT_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathPatternExpression() {
	    let localctx = new SimplifiedPathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, GqlParser.RULE_simplifiedPathPatternExpression);
	    try {
	        this.state = 3101;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3094;
	            this.simplifiedDefaultingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3095;
	            this.simplifiedDefaultingUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3096;
	            this.simplifiedDefaultingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3097;
	            this.simplifiedDefaultingLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3098;
	            this.simplifiedDefaultingUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3099;
	            this.simplifiedDefaultingLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3100;
	            this.simplifiedDefaultingAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeft() {
	    let localctx = new SimplifiedDefaultingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, GqlParser.RULE_simplifiedDefaultingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3103;
	        this.match(GqlParser.LEFT_ARROW_MIUNUS);
	        this.state = 3104;
	        this.simplifiedContents();
	        this.state = 3105;
	        this.match(GqlParser.MINUS_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirected() {
	    let localctx = new SimplifiedDefaultingUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, GqlParser.RULE_simplifiedDefaultingUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3107;
	        this.match(GqlParser.TILDE_SLASH);
	        this.state = 3108;
	        this.simplifiedContents();
	        this.state = 3109;
	        this.match(GqlParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingRight() {
	    let localctx = new SimplifiedDefaultingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, GqlParser.RULE_simplifiedDefaultingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3111;
	        this.match(GqlParser.MINUS);
	        this.state = 3112;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3113;
	        this.simplifiedContents();
	        this.state = 3114;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3115;
	        this.match(GqlParser.MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrUndirected() {
	    let localctx = new SimplifiedDefaultingLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, GqlParser.RULE_simplifiedDefaultingLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3117;
	        this.match(GqlParser.LEFT_ARROW_TILDE);
	        this.state = 3118;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3119;
	        this.simplifiedContents();
	        this.state = 3120;
	        this.match(GqlParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirectedOrRight() {
	    let localctx = new SimplifiedDefaultingUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, GqlParser.RULE_simplifiedDefaultingUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3122;
	        this.match(GqlParser.TILDE_SLASH);
	        this.state = 3123;
	        this.simplifiedContents();
	        this.state = 3124;
	        this.match(GqlParser.SLASH_TILDE);
	        this.state = 3125;
	        this.match(GqlParser.MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrRight() {
	    let localctx = new SimplifiedDefaultingLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, GqlParser.RULE_simplifiedDefaultingLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3127;
	        this.match(GqlParser.LEFT_ARROW_TILDE);
	        this.state = 3128;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3129;
	        this.simplifiedContents();
	        this.state = 3130;
	        this.match(GqlParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingAnyDirection() {
	    let localctx = new SimplifiedDefaultingAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, GqlParser.RULE_simplifiedDefaultingAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3132;
	        this.match(GqlParser.MINUS);
	        this.state = 3133;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3134;
	        this.simplifiedContents();
	        this.state = 3135;
	        this.match(GqlParser.MINUS_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedContents() {
	    let localctx = new SimplifiedContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, GqlParser.RULE_simplifiedContents);
	    try {
	        this.state = 3140;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3137;
	            this.simplifiedTerm(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3138;
	            this.simplifiedPathUnion();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3139;
	            this.simplifiedMultisetAlternation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathUnion() {
	    let localctx = new SimplifiedPathUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, GqlParser.RULE_simplifiedPathUnion);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3142;
	        this.simplifiedTerm(0);
	        this.state = 3147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===37) {
	            this.state = 3143;
	            this.match(GqlParser.VERTICAL_BAR);
	            this.state = 3144;
	            this.simplifiedTerm(0);
	            this.state = 3149;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedMultisetAlternation() {
	    let localctx = new SimplifiedMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, GqlParser.RULE_simplifiedMultisetAlternation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3150;
	        this.simplifiedTerm(0);
	        this.state = 3155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===75) {
	            this.state = 3151;
	            this.match(GqlParser.MULTISET_ALT_OPERATOR);
	            this.state = 3152;
	            this.simplifiedTerm(0);
	            this.state = 3157;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	simplifiedTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimplifiedTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 624;
	    this.enterRecursionRule(localctx, 624, GqlParser.RULE_simplifiedTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3159;
	        this.simplifiedFactorLow(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3165;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,276,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SimplifiedTermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_simplifiedTerm);
	                this.state = 3161;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 3162;
	                this.simplifiedFactorLow(0); 
	            }
	            this.state = 3167;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,276,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	simplifiedFactorLow(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimplifiedFactorLowContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 626;
	    this.enterRecursionRule(localctx, 626, GqlParser.RULE_simplifiedFactorLow, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3169;
	        this.simplifiedFactorHigh();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3176;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,277,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SimplifiedFactorLowContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_simplifiedFactorLow);
	                this.state = 3171;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 3172;
	                this.match(GqlParser.AMPERSAND);
	                this.state = 3173;
	                this.simplifiedFactorHigh(); 
	            }
	            this.state = 3178;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,277,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	simplifiedFactorHigh() {
	    let localctx = new SimplifiedFactorHighContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, GqlParser.RULE_simplifiedFactorHigh);
	    try {
	        this.state = 3182;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3179;
	            this.simplifiedTertiary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3180;
	            this.simplifiedQuantified();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3181;
	            this.simplifiedQuestioned();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuantified() {
	    let localctx = new SimplifiedQuantifiedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, GqlParser.RULE_simplifiedQuantified);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3184;
	        this.simplifiedTertiary();
	        this.state = 3185;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuestioned() {
	    let localctx = new SimplifiedQuestionedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, GqlParser.RULE_simplifiedQuestioned);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3187;
	        this.simplifiedTertiary();
	        this.state = 3188;
	        this.match(GqlParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTertiary() {
	    let localctx = new SimplifiedTertiaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, GqlParser.RULE_simplifiedTertiary);
	    try {
	        this.state = 3192;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 51:
	        case 52:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3190;
	            this.simplifiedDirectionOverride();
	            break;
	        case 8:
	        case 9:
	        case 22:
	        case 27:
	        case 29:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3191;
	            this.simplifiedSecondary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDirectionOverride() {
	    let localctx = new SimplifiedDirectionOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, GqlParser.RULE_simplifiedDirectionOverride);
	    try {
	        this.state = 3201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3194;
	            this.simplifiedOverrideLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3195;
	            this.simplifiedOverrideUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3196;
	            this.simplifiedOverrideRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3197;
	            this.simplifiedOverrideLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3198;
	            this.simplifiedOverrideUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3199;
	            this.simplifiedOverrideLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3200;
	            this.simplifiedOverrideAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeft() {
	    let localctx = new SimplifiedOverrideLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, GqlParser.RULE_simplifiedOverrideLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3203;
	        this.match(GqlParser.LEFT_ARROW_MIUNUS);
	        this.state = 3204;
	        this.simplifiedSecondary();
	        this.state = 3205;
	        this.match(GqlParser.MINUS_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirected() {
	    let localctx = new SimplifiedOverrideUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, GqlParser.RULE_simplifiedOverrideUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3207;
	        this.match(GqlParser.TILDE_SLASH);
	        this.state = 3208;
	        this.simplifiedSecondary();
	        this.state = 3209;
	        this.match(GqlParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideRight() {
	    let localctx = new SimplifiedOverrideRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, GqlParser.RULE_simplifiedOverrideRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3211;
	        this.match(GqlParser.MINUS);
	        this.state = 3212;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3213;
	        this.simplifiedSecondary();
	        this.state = 3214;
	        this.match(GqlParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrUndirected() {
	    let localctx = new SimplifiedOverrideLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, GqlParser.RULE_simplifiedOverrideLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3216;
	        this.match(GqlParser.LEFT_ARROW_TILDE);
	        this.state = 3217;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3218;
	        this.simplifiedSecondary();
	        this.state = 3219;
	        this.match(GqlParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirectedOrRight() {
	    let localctx = new SimplifiedOverrideUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, GqlParser.RULE_simplifiedOverrideUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3221;
	        this.match(GqlParser.TILDE_SLASH);
	        this.state = 3222;
	        this.simplifiedSecondary();
	        this.state = 3223;
	        this.match(GqlParser.SLASH_TILDE);
	        this.state = 3224;
	        this.match(GqlParser.MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrRight() {
	    let localctx = new SimplifiedOverrideLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, GqlParser.RULE_simplifiedOverrideLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3226;
	        this.match(GqlParser.LEFT_ARROW_MIUNUS);
	        this.state = 3227;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3228;
	        this.simplifiedSecondary();
	        this.state = 3229;
	        this.match(GqlParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideAnyDirection() {
	    let localctx = new SimplifiedOverrideAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, GqlParser.RULE_simplifiedOverrideAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3231;
	        this.match(GqlParser.MINUS);
	        this.state = 3232;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3233;
	        this.simplifiedSecondary();
	        this.state = 3234;
	        this.match(GqlParser.MINUS_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedSecondary() {
	    let localctx = new SimplifiedSecondaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, GqlParser.RULE_simplifiedSecondary);
	    try {
	        this.state = 3238;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 27:
	        case 29:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3236;
	            this.simplifiedPrimary();
	            break;
	        case 22:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3237;
	            this.simplifiedNegation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedNegation() {
	    let localctx = new SimplifiedNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, GqlParser.RULE_simplifiedNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3240;
	        this.match(GqlParser.EXCLAMATION);
	        this.state = 3241;
	        this.simplifiedPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPrimary() {
	    let localctx = new SimplifiedPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, GqlParser.RULE_simplifiedPrimary);
	    try {
	        this.state = 3252;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3243;
	            this.identifier();
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3244;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3245;
	            this.simplifiedContents();
	            this.state = 3246;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3248;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 3249;
	            this.simplifiedContents();
	            this.state = 3250;
	            this.match(GqlParser.RIGHT_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, GqlParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3254;
	        this.match(GqlParser.WHERE);
	        this.state = 3255;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureCall() {
	    let localctx = new ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, GqlParser.RULE_procedureCall);
	    try {
	        this.state = 3259;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3257;
	            this.nestedProcedureSpecification();
	            break;
	        case 27:
	        case 133:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3258;
	            this.namedProcedureCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedProcedureCall() {
	    let localctx = new NamedProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, GqlParser.RULE_namedProcedureCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3261;
	        this.procedureReference();
	        this.state = 3262;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3263;
	        this.procedureArgumentList();
	        this.state = 3264;
	        this.match(GqlParser.RIGHT_PAREN);
	        this.state = 3265;
	        this.yieldClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgumentList() {
	    let localctx = new ProcedureArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, GqlParser.RULE_procedureArgumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3267;
	        this.procedureArgument();
	        this.state = 3272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 3268;
	            this.match(GqlParser.COMMA);
	            this.state = 3269;
	            this.procedureArgument();
	            this.state = 3274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgument() {
	    let localctx = new ProcedureArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, GqlParser.RULE_procedureArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3275;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldClause() {
	    let localctx = new YieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, GqlParser.RULE_yieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3277;
	        this.match(GqlParser.YIELD);
	        this.state = 3278;
	        this.yieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemList() {
	    let localctx = new YieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, GqlParser.RULE_yieldItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3280;
	        this.yieldItem();
	        this.state = 3285;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,285,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3281;
	                this.match(GqlParser.COMMA);
	                this.state = 3282;
	                this.yieldItem(); 
	            }
	            this.state = 3287;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,285,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, GqlParser.RULE_yieldItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3288;
	        this.identifier();
	        this.state = 3289;
	        this.match(GqlParser.AS);
	        this.state = 3290;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, GqlParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3292;
	        this.match(GqlParser.GROUP);
	        this.state = 3293;
	        this.match(GqlParser.BY);
	        this.state = 3294;
	        this.groupingElementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElementList() {
	    let localctx = new GroupingElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, GqlParser.RULE_groupingElementList);
	    try {
	        this.state = 3305;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3296;
	            this.identifier();
	            this.state = 3301;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,286,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3297;
	                    this.match(GqlParser.COMMA);
	                    this.state = 3298;
	                    this.identifier(); 
	                }
	                this.state = 3303;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,286,this._ctx);
	            }

	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3304;
	            this.emptyGroupingSet();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyGroupingSet() {
	    let localctx = new EmptyGroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, GqlParser.RULE_emptyGroupingSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3307;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3308;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, GqlParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3310;
	        this.match(GqlParser.ORDER);
	        this.state = 3311;
	        this.match(GqlParser.BY);
	        this.state = 3312;
	        this.sortSpecificationList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunction() {
	    let localctx = new AggregateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, GqlParser.RULE_aggregateFunction);
	    try {
	        this.state = 3320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3314;
	            this.match(GqlParser.COUNT);
	            this.state = 3315;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3316;
	            this.match(GqlParser.ASTERISK);
	            this.state = 3317;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3318;
	            this.generalSetFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3319;
	            this.binarySetFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunction() {
	    let localctx = new GeneralSetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, GqlParser.RULE_generalSetFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3322;
	        this.generalSetFunctionType();
	        this.state = 3323;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3324;
	        this.setQuantifier();
	        this.state = 3325;
	        this.valueExpression();
	        this.state = 3326;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binarySetFunction() {
	    let localctx = new BinarySetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, GqlParser.RULE_binarySetFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3328;
	        this.binarySetFunctionType();
	        this.state = 3329;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3330;
	        this.dependentValueExpression();
	        this.state = 3331;
	        this.match(GqlParser.COMMA);
	        this.state = 3332;
	        this.independentValueExpression();
	        this.state = 3333;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunctionType() {
	    let localctx = new GeneralSetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, GqlParser.RULE_generalSetFunctionType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3335;
	        _la = this._input.LA(1);
	        if(!(_la===258 || _la===280 || ((((_la - 295)) & ~0x1f) == 0 && ((1 << (_la - 295)) & 270532611) !== 0) || _la===328 || _la===439 || _la===440)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, GqlParser.RULE_setQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3337;
	        _la = this._input.LA(1);
	        if(!(_la===195 || _la===196)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binarySetFunctionType() {
	    let localctx = new BinarySetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, GqlParser.RULE_binarySetFunctionType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3339;
	        _la = this._input.LA(1);
	        if(!(_la===441 || _la===442)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dependentValueExpression() {
	    let localctx = new DependentValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, GqlParser.RULE_dependentValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3341;
	        this.setQuantifier();
	        this.state = 3342;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	independentValueExpression() {
	    let localctx = new IndependentValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, GqlParser.RULE_independentValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3344;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecificationList() {
	    let localctx = new SortSpecificationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, GqlParser.RULE_sortSpecificationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3346;
	        this.sortSpecification();
	        this.state = 3351;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,289,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3347;
	                this.match(GqlParser.COMMA);
	                this.state = 3348;
	                this.sortSpecification(); 
	            }
	            this.state = 3353;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,289,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecification() {
	    let localctx = new SortSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, GqlParser.RULE_sortSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3354;
	        this.valueExpression();
	        this.state = 3355;
	        _la = this._input.LA(1);
	        if(!(_la===314 || _la===343)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3356;
	        this.nullOrdering();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullOrdering() {
	    let localctx = new NullOrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, GqlParser.RULE_nullOrdering);
	    try {
	        this.state = 3362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3358;
	            this.match(GqlParser.NULLS);
	            this.state = 3359;
	            this.match(GqlParser.FIRST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3360;
	            this.match(GqlParser.NULLS);
	            this.state = 3361;
	            this.match(GqlParser.LAST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, GqlParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3364;
	        this.match(GqlParser.LIMIT);
	        this.state = 3365;
	        this.unsignedIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, GqlParser.RULE_offsetClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3367;
	        _la = this._input.LA(1);
	        if(!(_la===264 || _la===287)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3368;
	        this.unsignedIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaReference() {
	    let localctx = new SchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, GqlParser.RULE_schemaReference);
	    try {
	        this.state = 3373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3370;
	            this.predefinedSchemaParameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3371;
	            this.catalogSchemaParentAndName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3372;
	            this.externalObjectReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogSchemaParentAndName() {
	    let localctx = new CatalogSchemaParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, GqlParser.RULE_catalogSchemaParentAndName);
	    try {
	        this.state = 3382;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3375;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 3376;
	            this.absoluteUrlPath();
	            this.state = 3377;
	            this.match(GqlParser.RIGHT_BRACKET);
	            this.state = 3378;
	            this.match(GqlParser.DOUBLE_SOLIDUS);
	            this.state = 3379;
	            this.identifier();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3381;
	            this.urlPathParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphReference() {
	    let localctx = new GraphReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, GqlParser.RULE_graphReference);
	    try {
	        this.state = 3386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3384;
	            this.graphResolutionExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3385;
	            this.localGraphReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphResolutionExpression() {
	    let localctx = new GraphResolutionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, GqlParser.RULE_graphResolutionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3388;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3389;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3390;
	        this.match(GqlParser.GRAPH);
	        this.state = 3391;
	        this.catalogGraphReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphReference() {
	    let localctx = new CatalogGraphReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, GqlParser.RULE_catalogGraphReference);
	    try {
	        this.state = 3396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3393;
	            this.catalogGraphParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3394;
	            this.predefinedGraphParameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3395;
	            this.externalObjectReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphParentAndName() {
	    let localctx = new CatalogGraphParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, GqlParser.RULE_catalogGraphParentAndName);
	    try {
	        this.state = 3402;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3398;
	            this.graphParentSpecification();
	            this.state = 3399;
	            this.identifier();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3401;
	            this.urlPathParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphParentSpecification() {
	    let localctx = new GraphParentSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, GqlParser.RULE_graphParentSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3404;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3405;
	        this.parentCatalogObjectReference();
	        this.state = 3406;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3407;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3408;
	        this.qualifiedObjectName();
	        this.state = 3409;
	        this.match(GqlParser.PERIOD);
	        this.state = 3410;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localGraphReference() {
	    let localctx = new LocalGraphReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, GqlParser.RULE_localGraphReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3412;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3413;
	        this.qualifiedObjectName();
	        this.state = 3414;
	        this.match(GqlParser.PERIOD);
	        this.state = 3415;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3416;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeReference() {
	    let localctx = new GraphTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, GqlParser.RULE_graphTypeReference);
	    try {
	        this.state = 3420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3418;
	            this.graphTypeResolutionExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3419;
	            this.qualifiedGraphTypeName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeResolutionExpression() {
	    let localctx = new GraphTypeResolutionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, GqlParser.RULE_graphTypeResolutionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3422;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3423;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3424;
	        this.match(GqlParser.GRAPH);
	        this.state = 3425;
	        this.match(GqlParser.TYPE);
	        this.state = 3426;
	        this.catalogGraphTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphTypeReference() {
	    let localctx = new CatalogGraphTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, GqlParser.RULE_catalogGraphTypeReference);
	    try {
	        this.state = 3430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3428;
	            this.catalogGraphTypeParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3429;
	            this.externalObjectReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphTypeParentAndName() {
	    let localctx = new CatalogGraphTypeParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, GqlParser.RULE_catalogGraphTypeParentAndName);
	    try {
	        this.state = 3436;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3432;
	            this.graphTypeParentSpecification();
	            this.state = 3433;
	            this.identifier();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3435;
	            this.urlPathParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeParentSpecification() {
	    let localctx = new GraphTypeParentSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, GqlParser.RULE_graphTypeParentSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3438;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3439;
	        this.parentCatalogObjectReference();
	        this.state = 3440;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3441;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3442;
	        this.qualifiedObjectName();
	        this.state = 3443;
	        this.match(GqlParser.PERIOD);
	        this.state = 3444;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedGraphTypeName() {
	    let localctx = new QualifiedGraphTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, GqlParser.RULE_qualifiedGraphTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3446;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3447;
	        this.qualifiedObjectName();
	        this.state = 3448;
	        this.match(GqlParser.PERIOD);
	        this.state = 3449;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3450;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableReference() {
	    let localctx = new BindingTableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, GqlParser.RULE_bindingTableReference);
	    try {
	        this.state = 3454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3452;
	            this.bindingTableResolutionExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3453;
	            this.localBindingTableReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableResolutionExpression() {
	    let localctx = new BindingTableResolutionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, GqlParser.RULE_bindingTableResolutionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3456;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3457;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3458;
	        this.match(GqlParser.TABLE);
	        this.state = 3459;
	        this.catalogBindingTableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogBindingTableReference() {
	    let localctx = new CatalogBindingTableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, GqlParser.RULE_catalogBindingTableReference);
	    try {
	        this.state = 3464;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3461;
	            this.catalogBindingTableParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3462;
	            this.predefinedTableParameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3463;
	            this.externalObjectReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogBindingTableParentAndName() {
	    let localctx = new CatalogBindingTableParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, GqlParser.RULE_catalogBindingTableParentAndName);
	    try {
	        this.state = 3470;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3466;
	            this.bindingTableParentSpecification();
	            this.state = 3467;
	            this.identifier();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3469;
	            this.urlPathParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableParentSpecification() {
	    let localctx = new BindingTableParentSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, GqlParser.RULE_bindingTableParentSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3472;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3473;
	        this.parentCatalogObjectReference();
	        this.state = 3474;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3475;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3476;
	        this.qualifiedObjectName();
	        this.state = 3477;
	        this.match(GqlParser.PERIOD);
	        this.state = 3478;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localBindingTableReference() {
	    let localctx = new LocalBindingTableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, GqlParser.RULE_localBindingTableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3480;
	        this.qualifiedBindingTableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedBindingTableName() {
	    let localctx = new QualifiedBindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, GqlParser.RULE_qualifiedBindingTableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3482;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3483;
	        this.qualifiedObjectName();
	        this.state = 3484;
	        this.match(GqlParser.PERIOD);
	        this.state = 3485;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3486;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureReference() {
	    let localctx = new ProcedureReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, GqlParser.RULE_procedureReference);
	    try {
	        this.state = 3491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3488;
	            this.match(GqlParser.PROCEDURE);
	            this.state = 3489;
	            this.catalogProcedureReference();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3490;
	            this.localProcedureReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogProcedureReference() {
	    let localctx = new CatalogProcedureReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, GqlParser.RULE_catalogProcedureReference);
	    try {
	        this.state = 3495;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 27:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3493;
	            this.catalogProcedureParentAndName();
	            break;
	        case -1:
	        case 26:
	        case 29:
	        case 93:
	        case 95:
	        case 99:
	        case 104:
	        case 105:
	        case 109:
	        case 110:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 139:
	        case 143:
	        case 144:
	        case 148:
	        case 199:
	        case 206:
	        case 298:
	        case 322:
	        case 338:
	        case 348:
	        case 388:
	        case 394:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3494;
	            this.externalObjectReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogProcedureParentAndName() {
	    let localctx = new CatalogProcedureParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, GqlParser.RULE_catalogProcedureParentAndName);
	    try {
	        this.state = 3501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3497;
	            this.procedureParentSpecification();
	            this.state = 3498;
	            this.identifier();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3500;
	            this.urlPathParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureParentSpecification() {
	    let localctx = new ProcedureParentSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, GqlParser.RULE_procedureParentSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3503;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3504;
	        this.parentCatalogObjectReference();
	        this.state = 3505;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3506;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3507;
	        this.qualifiedObjectName();
	        this.state = 3508;
	        this.match(GqlParser.PERIOD);
	        this.state = 3509;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localProcedureReference() {
	    let localctx = new LocalProcedureReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, GqlParser.RULE_localProcedureReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3511;
	        this.qualifiedProcedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedProcedureName() {
	    let localctx = new QualifiedProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, GqlParser.RULE_qualifiedProcedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3513;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3514;
	        this.qualifiedObjectName();
	        this.state = 3515;
	        this.match(GqlParser.PERIOD);
	        this.state = 3516;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3517;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryResolutionExpression() {
	    let localctx = new QueryResolutionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, GqlParser.RULE_queryResolutionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3519;
	        this.match(GqlParser.QUERY);
	        this.state = 3520;
	        this.catalogQueryReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogQueryReference() {
	    let localctx = new CatalogQueryReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, GqlParser.RULE_catalogQueryReference);
	    try {
	        this.state = 3524;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 27:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3522;
	            this.catalogQueryParentAndName();
	            break;
	        case -1:
	        case 26:
	        case 93:
	        case 95:
	        case 99:
	        case 104:
	        case 105:
	        case 109:
	        case 110:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 139:
	        case 143:
	        case 144:
	        case 148:
	        case 199:
	        case 206:
	        case 298:
	        case 322:
	        case 338:
	        case 348:
	        case 388:
	        case 394:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3523;
	            this.externalObjectReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogQueryParentAndName() {
	    let localctx = new CatalogQueryParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, GqlParser.RULE_catalogQueryParentAndName);
	    try {
	        this.state = 3530;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3526;
	            this.queryParentSpecification();
	            this.state = 3527;
	            this.identifier();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3529;
	            this.urlPathParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryParentSpecification() {
	    let localctx = new QueryParentSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, GqlParser.RULE_queryParentSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3532;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3533;
	        this.parentCatalogObjectReference();
	        this.state = 3534;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3535;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3536;
	        this.qualifiedObjectName();
	        this.state = 3537;
	        this.match(GqlParser.PERIOD);
	        this.state = 3538;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedQueryName() {
	    let localctx = new QualifiedQueryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, GqlParser.RULE_qualifiedQueryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3540;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3541;
	        this.qualifiedObjectName();
	        this.state = 3542;
	        this.match(GqlParser.PERIOD);
	        this.state = 3543;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3544;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionResolutionExpression() {
	    let localctx = new FunctionResolutionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, GqlParser.RULE_functionResolutionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3546;
	        this.match(GqlParser.FUNCTION);
	        this.state = 3547;
	        this.catalogFunctionReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogFunctionReference() {
	    let localctx = new CatalogFunctionReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, GqlParser.RULE_catalogFunctionReference);
	    try {
	        this.state = 3551;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 27:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3549;
	            this.catalogFunctionParentAndName();
	            break;
	        case -1:
	        case 26:
	        case 93:
	        case 95:
	        case 99:
	        case 104:
	        case 105:
	        case 109:
	        case 110:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 139:
	        case 143:
	        case 144:
	        case 148:
	        case 199:
	        case 206:
	        case 298:
	        case 322:
	        case 338:
	        case 348:
	        case 388:
	        case 394:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3550;
	            this.externalObjectReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogFunctionParentAndName() {
	    let localctx = new CatalogFunctionParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, GqlParser.RULE_catalogFunctionParentAndName);
	    try {
	        this.state = 3557;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3553;
	            this.functionParentSpecification();
	            this.state = 3554;
	            this.identifier();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3556;
	            this.urlPathParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParentSpecification() {
	    let localctx = new FunctionParentSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, GqlParser.RULE_functionParentSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3559;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3560;
	        this.parentCatalogObjectReference();
	        this.state = 3561;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3562;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3563;
	        this.qualifiedObjectName();
	        this.state = 3564;
	        this.match(GqlParser.PERIOD);
	        this.state = 3565;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedFunctionName() {
	    let localctx = new QualifiedFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, GqlParser.RULE_qualifiedFunctionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3567;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3568;
	        this.qualifiedObjectName();
	        this.state = 3569;
	        this.match(GqlParser.PERIOD);
	        this.state = 3570;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 3571;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogObjectReference() {
	    let localctx = new CatalogObjectReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, GqlParser.RULE_catalogObjectReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3573;
	        this.catalogUrlPath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parentCatalogObjectReference() {
	    let localctx = new ParentCatalogObjectReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, GqlParser.RULE_parentCatalogObjectReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3575;
	        this.catalogObjectReference();
	        this.state = 3576;
	        this.match(GqlParser.DOUBLE_SOLIDUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogUrlPath() {
	    let localctx = new CatalogUrlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, GqlParser.RULE_catalogUrlPath);
	    try {
	        this.state = 3581;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3578;
	            this.absoluteUrlPath();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3579;
	            this.relativeUrlPath();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3580;
	            this.parameterizedUrlPath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteUrlPath() {
	    let localctx = new AbsoluteUrlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, GqlParser.RULE_absoluteUrlPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3583;
	        this.match(GqlParser.DOUBLE_SOLIDUS);
	        this.state = 3584;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3585;
	        this.simpleUrlPath();
	        this.state = 3586;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeUrlPath() {
	    let localctx = new RelativeUrlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, GqlParser.RULE_relativeUrlPath);
	    try {
	        this.state = 3591;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 331:
	        case 332:
	        case 334:
	        case 352:
	        case 353:
	        case 371:
	        case 372:
	        case 373:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3588;
	            this.parentObjectRelativeUrlPath();
	            break;
	        case 8:
	        case 9:
	        case 40:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3589;
	            this.simpleRelativeUrlPath();
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3590;
	            this.match(GqlParser.PERIOD);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parentObjectRelativeUrlPath() {
	    let localctx = new ParentObjectRelativeUrlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, GqlParser.RULE_parentObjectRelativeUrlPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3593;
	        this.predefinedParentObjectParameter();
	        this.state = 3594;
	        this.match(GqlParser.DOUBLE_SOLIDUS);
	        this.state = 3595;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3596;
	        this.simpleUrlPath();
	        this.state = 3597;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleRelativeUrlPath() {
	    let localctx = new SimpleRelativeUrlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, GqlParser.RULE_simpleRelativeUrlPath);
	    try {
	        this.state = 3610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3599;
	            this.match(GqlParser.DOUBLE_PERIOD);
	            this.state = 3600;
	            this.match(GqlParser.DOUBLE_SOLIDUS);
	            this.state = 3601;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 3602;
	            this.match(GqlParser.DOUBLE_PERIOD);
	            this.state = 3603;
	            this.match(GqlParser.RIGHT_BRACKET);
	            this.state = 3604;
	            this.match(GqlParser.DOUBLE_SOLIDUS);
	            this.state = 3605;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 3606;
	            this.simpleUrlPath();
	            this.state = 3607;
	            this.match(GqlParser.RIGHT_BRACKET);
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3609;
	            this.simpleUrlPath();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterizedUrlPath() {
	    let localctx = new ParameterizedUrlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, GqlParser.RULE_parameterizedUrlPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3612;
	        this.identifier();
	        this.state = 3613;
	        this.match(GqlParser.DOUBLE_SOLIDUS);
	        this.state = 3614;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3615;
	        this.simpleUrlPath();
	        this.state = 3616;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleUrlPath() {
	    let localctx = new SimpleUrlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, GqlParser.RULE_simpleUrlPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3618;
	        this.identifier();
	        this.state = 3619;
	        this.match(GqlParser.DOUBLE_SOLIDUS);
	        this.state = 3620;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3621;
	        this.identifier();
	        this.state = 3622;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	urlSegment() {
	    let localctx = new UrlSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, GqlParser.RULE_urlSegment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3624;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedObjectName() {
	    let localctx = new QualifiedObjectNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, GqlParser.RULE_qualifiedObjectName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3626;
	        this.qualifiedNamePrefix();
	        this.state = 3627;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNamePrefix() {
	    let localctx = new QualifiedNamePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, GqlParser.RULE_qualifiedNamePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3629;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 3630;
	        this.identifier();
	        this.state = 3631;
	        this.match(GqlParser.PERIOD);
	        this.state = 3632;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	urlPathParameter() {
	    let localctx = new UrlPathParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, GqlParser.RULE_urlPathParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3634;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalObjectReference() {
	    let localctx = new ExternalObjectReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, GqlParser.RULE_externalObjectReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3636;
	        this.externalObjectUrl();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalObjectUrl() {
	    let localctx = new ExternalObjectUrlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, GqlParser.RULE_externalObjectUrl);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementReference() {
	    let localctx = new ElementReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, GqlParser.RULE_elementReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3640;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchCondition() {
	    let localctx = new SearchConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, GqlParser.RULE_searchCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3642;
	        this.booleanValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, GqlParser.RULE_predicate);
	    try {
	        this.state = 3653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3644;
	            this.comparisonPredicate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3645;
	            this.existsPredicate();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3646;
	            this.nullPredicate();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3647;
	            this.normalizedPredicate();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3648;
	            this.directedPredicate();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3649;
	            this.labeledPredicate();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3650;
	            this.sourceDestinationPredicate();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3651;
	            this.allDifferentPredicate();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3652;
	            this.samePredicate();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicate() {
	    let localctx = new ComparisonPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, GqlParser.RULE_comparisonPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3655;
	        this.nonParenthesizedValueExpressionPrimary();
	        this.state = 3656;
	        this.comparisonPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicatePart2() {
	    let localctx = new ComparisonPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, GqlParser.RULE_comparisonPredicatePart2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3658;
	        this.match(GqlParser.COMPARE_OPERATOR);
	        this.state = 3659;
	        this.nonParenthesizedValueExpressionPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsPredicate() {
	    let localctx = new ExistsPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, GqlParser.RULE_existsPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3661;
	        this.match(GqlParser.EXISTS);
	        this.state = 3667;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.state = 3662;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3663;
	            this.graphPattern();
	            this.state = 3664;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 25:
	            this.state = 3666;
	            this.nestedQuerySpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicate() {
	    let localctx = new NullPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, GqlParser.RULE_nullPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3669;
	        this.valueExpressionPrimary();
	        this.state = 3670;
	        this.nullPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicatePart2() {
	    let localctx = new NullPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, GqlParser.RULE_nullPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3672;
	        this.match(GqlParser.IS);
	        this.state = 3674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===100) {
	            this.state = 3673;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3676;
	        this.match(GqlParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicate() {
	    let localctx = new NormalizedPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, GqlParser.RULE_normalizedPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3678;
	        this.stringValueExpression();
	        this.state = 3679;
	        this.normalizedPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicatePart2() {
	    let localctx = new NormalizedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, GqlParser.RULE_normalizedPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3681;
	        this.match(GqlParser.IS);
	        this.state = 3683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===100) {
	            this.state = 3682;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===450) {
	            this.state = 3685;
	            this.match(GqlParser.NORMAL_FORM);
	        }

	        this.state = 3688;
	        this.match(GqlParser.NORMALIZED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicate() {
	    let localctx = new DirectedPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, GqlParser.RULE_directedPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3690;
	        this.elementReference();
	        this.state = 3691;
	        this.directedPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicatePart2() {
	    let localctx = new DirectedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, GqlParser.RULE_directedPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===391) {
	            this.state = 3693;
	            this.match(GqlParser.IS);
	        }

	        this.state = 3696;
	        this.match(GqlParser.DIRECTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicate() {
	    let localctx = new LabeledPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, GqlParser.RULE_labeledPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3698;
	        this.elementReference();
	        this.state = 3699;
	        this.labeledPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicatePart2() {
	    let localctx = new LabeledPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, GqlParser.RULE_labeledPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===391) {
	            this.state = 3701;
	            this.match(GqlParser.IS);
	        }

	        this.state = 3704;
	        this.match(GqlParser.LABELED);
	        this.state = 3705;
	        this.labelExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceDestinationPredicate() {
	    let localctx = new SourceDestinationPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, GqlParser.RULE_sourceDestinationPredicate);
	    try {
	        this.state = 3713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3707;
	            this.elementReference();
	            this.state = 3708;
	            this.sourcePredicatePart2();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3710;
	            this.elementReference();
	            this.state = 3711;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourcePredicatePart2() {
	    let localctx = new SourcePredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, GqlParser.RULE_sourcePredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3715;
	        this.match(GqlParser.IS);
	        this.state = 3717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===100) {
	            this.state = 3716;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3719;
	        this.match(GqlParser.SOURCE);
	        this.state = 3721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===393) {
	            this.state = 3720;
	            this.match(GqlParser.OF);
	        }

	        this.state = 3723;
	        this.elementReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationPredicatePart2() {
	    let localctx = new DestinationPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, GqlParser.RULE_destinationPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3725;
	        this.match(GqlParser.IS);
	        this.state = 3727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===100) {
	            this.state = 3726;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3729;
	        this.match(GqlParser.DESTINATION);
	        this.state = 3731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===393) {
	            this.state = 3730;
	            this.match(GqlParser.OF);
	        }

	        this.state = 3733;
	        this.elementReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allDifferentPredicate() {
	    let localctx = new AllDifferentPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, GqlParser.RULE_allDifferentPredicate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3735;
	        this.match(GqlParser.ALL_DIFFERENT);
	        this.state = 3736;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3737;
	        this.elementReference();
	        this.state = 3738;
	        this.match(GqlParser.COMMA);
	        this.state = 3739;
	        this.elementReference();
	        this.state = 3744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 3740;
	            this.match(GqlParser.COMMA);
	            this.state = 3741;
	            this.elementReference();
	            this.state = 3746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3747;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	samePredicate() {
	    let localctx = new SamePredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, GqlParser.RULE_samePredicate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3749;
	        this.match(GqlParser.SAME);
	        this.state = 3750;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3751;
	        this.elementReference();
	        this.state = 3752;
	        this.match(GqlParser.COMMA);
	        this.state = 3753;
	        this.elementReference();
	        this.state = 3758;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 3754;
	            this.match(GqlParser.COMMA);
	            this.state = 3755;
	            this.elementReference();
	            this.state = 3760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3761;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueSpecification() {
	    let localctx = new ValueSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, GqlParser.RULE_valueSpecification);
	    try {
	        this.state = 3765;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3763;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3764;
	            this.parameterValueSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedValueSpecification() {
	    let localctx = new UnsignedValueSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, GqlParser.RULE_unsignedValueSpecification);
	    try {
	        this.state = 3769;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3767;
	            this.unsignedLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3768;
	            this.parameterValueSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedIntegerSpecification() {
	    let localctx = new UnsignedIntegerSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, GqlParser.RULE_unsignedIntegerSpecification);
	    try {
	        this.state = 3773;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 453:
	        case 454:
	        case 455:
	        case 459:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3771;
	            this.unsignedInteger();
	            break;
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3772;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterValueSpecification() {
	    let localctx = new ParameterValueSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, GqlParser.RULE_parameterValueSpecification);
	    try {
	        this.state = 3777;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3775;
	            this.identifier();
	            break;
	        case 252:
	        case 253:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3776;
	            this.predefinedParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedParameter() {
	    let localctx = new PredefinedParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, GqlParser.RULE_predefinedParameter);
	    try {
	        this.state = 3782;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 331:
	        case 332:
	        case 334:
	        case 352:
	        case 353:
	        case 371:
	        case 372:
	        case 373:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3779;
	            this.predefinedParentObjectParameter();
	            break;
	        case 252:
	        case 253:
	        case 351:
	        case 354:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3780;
	            this.predefinedTableParameter();
	            break;
	        case 337:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3781;
	            this.match(GqlParser.CURRENT_USER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedParentObjectParameter() {
	    let localctx = new PredefinedParentObjectParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, GqlParser.RULE_predefinedParentObjectParameter);
	    try {
	        this.state = 3786;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 334:
	        case 373:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3784;
	            this.predefinedSchemaParameter();
	            break;
	        case 331:
	        case 332:
	        case 352:
	        case 353:
	        case 371:
	        case 372:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3785;
	            this.predefinedGraphParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedSchemaParameter() {
	    let localctx = new PredefinedSchemaParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, GqlParser.RULE_predefinedSchemaParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3788;
	        _la = this._input.LA(1);
	        if(!(_la===334 || _la===373)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedGraphParameter() {
	    let localctx = new PredefinedGraphParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, GqlParser.RULE_predefinedGraphParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3790;
	        _la = this._input.LA(1);
	        if(!(((((_la - 331)) & ~0x1f) == 0 && ((1 << (_la - 331)) & 6291459) !== 0) || _la===371 || _la===372)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedTableParameter() {
	    let localctx = new PredefinedTableParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, GqlParser.RULE_predefinedTableParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3792;
	        _la = this._input.LA(1);
	        if(!(_la===252 || _la===253 || _la===351 || _la===354)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExpression() {
	    let localctx = new ValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, GqlParser.RULE_valueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3794;
	        this.untypedValueExpression();
	        this.state = 3796;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	        if(la_===1) {
	            this.state = 3795;
	            this.ofValueType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untypedValueExpression() {
	    let localctx = new UntypedValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, GqlParser.RULE_untypedValueExpression);
	    try {
	        this.state = 3800;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3798;
	            this.commonValueExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3799;
	            this.booleanValueExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonValueExpression() {
	    let localctx = new CommonValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, GqlParser.RULE_commonValueExpression);
	    try {
	        this.state = 3810;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3802;
	            this.numericValueExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3803;
	            this.stringValueExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3804;
	            this.datetimeValueExpression(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3805;
	            this.durationValueExpression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3806;
	            this.collectionValueExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3807;
	            this.mapValueExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3808;
	            this.valueExpressionPrimary();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3809;
	            this.referenceValueExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceValueExpression() {
	    let localctx = new ReferenceValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, GqlParser.RULE_referenceValueExpression);
	    try {
	        this.state = 3814;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 135:
	        case 139:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3812;
	            this.primaryResultObjectExpression();
	            break;
	        case 445:
	        case 446:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3813;
	            this.graphElementPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionValueExpression() {
	    let localctx = new CollectionValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, GqlParser.RULE_collectionValueExpression);
	    try {
	        this.state = 3820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3816;
	            this.listValueExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3817;
	            this.multisetValueExpression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3818;
	            this.setValueExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3819;
	            this.orderedSetValueExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setValueExpression() {
	    let localctx = new SetValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, GqlParser.RULE_setValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3822;
	        this.valueExpressionPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedSetValueExpression() {
	    let localctx = new OrderedSetValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, GqlParser.RULE_orderedSetValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3824;
	        this.valueExpressionPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapValueExpression() {
	    let localctx = new MapValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, GqlParser.RULE_mapValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3826;
	        this.valueExpressionPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 884;
	    this.enterRecursionRule(localctx, 884, GqlParser.RULE_booleanValueExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3829;
	        this.booleanTerm(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3839;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,338,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3837;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BooleanValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_booleanValueExpression);
	                    this.state = 3831;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 3832;
	                    this.match(GqlParser.OR);
	                    this.state = 3833;
	                    this.booleanTerm(0);
	                    break;

	                case 2:
	                    localctx = new BooleanValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_booleanValueExpression);
	                    this.state = 3834;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 3835;
	                    this.match(GqlParser.XOR);
	                    this.state = 3836;
	                    this.booleanTerm(0);
	                    break;

	                } 
	            }
	            this.state = 3841;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,338,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	booleanTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 886;
	    this.enterRecursionRule(localctx, 886, GqlParser.RULE_booleanTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3843;
	        this.booleanFactor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3850;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,339,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BooleanTermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_booleanTerm);
	                this.state = 3845;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 3846;
	                this.match(GqlParser.AND);
	                this.state = 3847;
	                this.booleanFactor(); 
	            }
	            this.state = 3852;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,339,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	booleanFactor() {
	    let localctx = new BooleanFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, GqlParser.RULE_booleanFactor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===100) {
	            this.state = 3853;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3856;
	        this.booleanTest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanTest() {
	    let localctx = new BooleanTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, GqlParser.RULE_booleanTest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3858;
	        this.booleanPrimary();
	        this.state = 3868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	        if(la_===1) {
	            this.state = 3865;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 391:
	                this.state = 3859;
	                this.match(GqlParser.IS);
	                this.state = 3861;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===100) {
	                    this.state = 3860;
	                    this.match(GqlParser.NOT);
	                }

	                break;
	            case 21:
	                this.state = 3863;
	                this.match(GqlParser.EQUALS);
	                break;
	            case 63:
	                this.state = 3864;
	                this.match(GqlParser.NOT_EQUALS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3867;
	            this.match(GqlParser.TRUTH_VALUE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanPrimary() {
	    let localctx = new BooleanPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, GqlParser.RULE_booleanPrimary);
	    try {
	        this.state = 3872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3870;
	            this.predicate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3871;
	            this.booleanPredicand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanPredicand() {
	    let localctx = new BooleanPredicandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, GqlParser.RULE_booleanPredicand);
	    try {
	        this.state = 3879;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3874;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3875;
	            this.booleanValueExpression(0);
	            this.state = 3876;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 7:
	        case 8:
	        case 9:
	        case 25:
	        case 27:
	        case 39:
	        case 94:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 252:
	        case 253:
	        case 258:
	        case 280:
	        case 295:
	        case 296:
	        case 316:
	        case 323:
	        case 328:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 445:
	        case 446:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3878;
	            this.nonParenthesizedValueExpressionPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	numericValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NumericValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 896;
	    this.enterRecursionRule(localctx, 896, GqlParser.RULE_numericValueExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3882;
	        this.term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3892;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,347,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3890;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new NumericValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_numericValueExpression);
	                    this.state = 3884;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 3885;
	                    this.match(GqlParser.PLUS);
	                    this.state = 3886;
	                    this.term(0);
	                    break;

	                case 2:
	                    localctx = new NumericValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_numericValueExpression);
	                    this.state = 3887;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 3888;
	                    this.match(GqlParser.MINUS);
	                    this.state = 3889;
	                    this.term(0);
	                    break;

	                } 
	            }
	            this.state = 3894;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,347,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 898;
	    this.enterRecursionRule(localctx, 898, GqlParser.RULE_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3896;
	        this.factor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3906;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,349,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3904;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new TermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_term);
	                    this.state = 3898;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 3899;
	                    this.match(GqlParser.ASTERISK);
	                    this.state = 3900;
	                    this.factor();
	                    break;

	                case 2:
	                    localctx = new TermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_term);
	                    this.state = 3901;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 3902;
	                    this.match(GqlParser.SOLIDUS);
	                    this.state = 3903;
	                    this.factor();
	                    break;

	                } 
	            }
	            this.state = 3908;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,349,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, GqlParser.RULE_factor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 3909;
	            this.sign();
	        }

	        this.state = 3912;
	        this.numericPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericPrimary() {
	    let localctx = new NumericPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, GqlParser.RULE_numericPrimary);
	    try {
	        this.state = 3916;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 8:
	        case 9:
	        case 25:
	        case 27:
	        case 29:
	        case 39:
	        case 94:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 252:
	        case 253:
	        case 258:
	        case 280:
	        case 295:
	        case 296:
	        case 316:
	        case 323:
	        case 328:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 445:
	        case 446:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3914;
	            this.valueExpressionPrimary();
	            break;
	        case 92:
	        case 319:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 437:
	        case 438:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3915;
	            this.numericValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExpressionPrimary() {
	    let localctx = new ValueExpressionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, GqlParser.RULE_valueExpressionPrimary);
	    try {
	        this.state = 3923;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3918;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3919;
	            this.valueExpression();
	            this.state = 3920;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 7:
	        case 8:
	        case 9:
	        case 25:
	        case 27:
	        case 39:
	        case 94:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 252:
	        case 253:
	        case 258:
	        case 280:
	        case 295:
	        case 296:
	        case 316:
	        case 323:
	        case 328:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 445:
	        case 446:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3922;
	            this.nonParenthesizedValueExpressionPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonParenthesizedValueExpressionPrimary() {
	    let localctx = new NonParenthesizedValueExpressionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, GqlParser.RULE_nonParenthesizedValueExpressionPrimary);
	    try {
	        this.state = 3939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3925;
	            this.graphElementPrimary();
	            this.state = 3926;
	            this.match(GqlParser.PERIOD);
	            this.state = 3927;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3929;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3930;
	            this.parameterValueSpecification();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3931;
	            this.unsignedValueSpecification();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3932;
	            this.aggregateFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3933;
	            this.collectionValueConstructor();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3934;
	            this.match(GqlParser.VALUE);
	            this.state = 3935;
	            this.nestedQuerySpecification();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3936;
	            this.caseExpression();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3937;
	            this.castSpecification();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3938;
	            this.element_idFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueFunction() {
	    let localctx = new NumericValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, GqlParser.RULE_numericValueFunction);
	    try {
	        this.state = 3955;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3941;
	            this.lengthExpression();
	            break;
	        case 406:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3942;
	            this.absoluteValueExpression();
	            break;
	        case 407:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3943;
	            this.modulusExpression();
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3944;
	            this.trigonometricFunction();
	            break;
	        case 409:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3945;
	            this.generalLogarithmFunction();
	            break;
	        case 408:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3946;
	            this.commonLogarithm();
	            break;
	        case 410:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3947;
	            this.naturalLogarithm();
	            break;
	        case 411:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3948;
	            this.exponentialFunction();
	            break;
	        case 412:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3949;
	            this.powerFunction();
	            break;
	        case 413:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3950;
	            this.squareRoot();
	            break;
	        case 414:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3951;
	            this.floorFunction();
	            break;
	        case 319:
	        case 415:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3952;
	            this.ceilingFunction();
	            break;
	        case 437:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3953;
	            this.inDegreeFunction();
	            break;
	        case 438:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3954;
	            this.outDegreeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthExpression() {
	    let localctx = new LengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, GqlParser.RULE_lengthExpression);
	    try {
	        this.state = 3960;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 405:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3957;
	            this.charLengthExpression();
	            break;
	        case 403:
	        case 404:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3958;
	            this.byteLengthExpression();
	            break;
	        case 402:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3959;
	            this.pathLengthExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLengthExpression() {
	    let localctx = new CharLengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, GqlParser.RULE_charLengthExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3962;
	        this.match(GqlParser.CHARACTER_LENGTH);
	        this.state = 3963;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3964;
	        this.characterStringValueExpression(0);
	        this.state = 3965;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteLengthExpression() {
	    let localctx = new ByteLengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, GqlParser.RULE_byteLengthExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3967;
	        _la = this._input.LA(1);
	        if(!(_la===403 || _la===404)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3968;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3969;
	        this.stringValueExpression();
	        this.state = 3970;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathLengthExpression() {
	    let localctx = new PathLengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, GqlParser.RULE_pathLengthExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3972;
	        this.match(GqlParser.LENGTH);
	        this.state = 3973;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3974;
	        this.identifier();
	        this.state = 3975;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteValueExpression() {
	    let localctx = new AbsoluteValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, GqlParser.RULE_absoluteValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3977;
	        this.match(GqlParser.ABS);
	        this.state = 3978;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3979;
	        this.numericValueExpression(0);
	        this.state = 3980;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modulusExpression() {
	    let localctx = new ModulusExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, GqlParser.RULE_modulusExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3982;
	        this.match(GqlParser.MOD);
	        this.state = 3983;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3984;
	        this.numericValueExpression(0);
	        this.state = 3985;
	        this.match(GqlParser.COMMA);
	        this.state = 3986;
	        this.numericValueExpression(0);
	        this.state = 3987;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigonometricFunction() {
	    let localctx = new TrigonometricFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, GqlParser.RULE_trigonometricFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3989;
	        this.match(GqlParser.TRYGONOMETRIC_FUNCTION_NAME);
	        this.state = 3990;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3991;
	        this.numericValueExpression(0);
	        this.state = 3992;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmFunction() {
	    let localctx = new GeneralLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, GqlParser.RULE_generalLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3994;
	        this.match(GqlParser.LOG);
	        this.state = 3995;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3996;
	        this.numericValueExpression(0);
	        this.state = 3997;
	        this.match(GqlParser.COMMA);
	        this.state = 3998;
	        this.numericValueExpression(0);
	        this.state = 3999;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonLogarithm() {
	    let localctx = new CommonLogarithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, GqlParser.RULE_commonLogarithm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4001;
	        this.match(GqlParser.LOG10);
	        this.state = 4002;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4003;
	        this.numericValueExpression(0);
	        this.state = 4004;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	naturalLogarithm() {
	    let localctx = new NaturalLogarithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, GqlParser.RULE_naturalLogarithm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4006;
	        this.match(GqlParser.LN);
	        this.state = 4007;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4008;
	        this.numericValueExpression(0);
	        this.state = 4009;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exponentialFunction() {
	    let localctx = new ExponentialFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, GqlParser.RULE_exponentialFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4011;
	        this.match(GqlParser.EXP);
	        this.state = 4012;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4013;
	        this.numericValueExpression(0);
	        this.state = 4014;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powerFunction() {
	    let localctx = new PowerFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, GqlParser.RULE_powerFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4016;
	        this.match(GqlParser.POWER);
	        this.state = 4017;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4018;
	        this.numericValueExpression(0);
	        this.state = 4019;
	        this.match(GqlParser.COMMA);
	        this.state = 4020;
	        this.numericValueExpression(0);
	        this.state = 4021;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	squareRoot() {
	    let localctx = new SquareRootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, GqlParser.RULE_squareRoot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4023;
	        this.match(GqlParser.SQRT);
	        this.state = 4024;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4025;
	        this.numericValueExpression(0);
	        this.state = 4026;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floorFunction() {
	    let localctx = new FloorFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, GqlParser.RULE_floorFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4028;
	        this.match(GqlParser.FLOOR);
	        this.state = 4029;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4030;
	        this.numericValueExpression(0);
	        this.state = 4031;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ceilingFunction() {
	    let localctx = new CeilingFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, GqlParser.RULE_ceilingFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4033;
	        _la = this._input.LA(1);
	        if(!(_la===319 || _la===415)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4034;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4035;
	        this.numericValueExpression(0);
	        this.state = 4036;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inDegreeFunction() {
	    let localctx = new InDegreeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, GqlParser.RULE_inDegreeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4038;
	        this.match(GqlParser.IN_DEGREE);
	        this.state = 4039;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4040;
	        this.identifier();
	        this.state = 4041;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outDegreeFunction() {
	    let localctx = new OutDegreeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, GqlParser.RULE_outDegreeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4043;
	        this.match(GqlParser.OUT_DEGREE);
	        this.state = 4044;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4045;
	        this.identifier();
	        this.state = 4046;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValueExpression() {
	    let localctx = new StringValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, GqlParser.RULE_stringValueExpression);
	    try {
	        this.state = 4050;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4048;
	            this.characterStringValueExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4049;
	            this.byteStringValueExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	characterStringValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CharacterStringValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 946;
	    this.enterRecursionRule(localctx, 946, GqlParser.RULE_characterStringValueExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4053;
	        this.characterStringPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4060;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,357,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CharacterStringValueExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_characterStringValueExpression);
	                this.state = 4055;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 4056;
	                this.match(GqlParser.CONCATENATION_OPERATOR);
	                this.state = 4057;
	                this.characterStringPrimary(); 
	            }
	            this.state = 4062;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,357,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	characterStringPrimary() {
	    let localctx = new CharacterStringPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, GqlParser.RULE_characterStringPrimary);
	    try {
	        this.state = 4065;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 8:
	        case 9:
	        case 25:
	        case 27:
	        case 29:
	        case 39:
	        case 94:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 252:
	        case 253:
	        case 258:
	        case 280:
	        case 295:
	        case 296:
	        case 316:
	        case 323:
	        case 328:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 445:
	        case 446:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4063;
	            this.valueExpressionPrimary();
	            break;
	        case 247:
	        case 255:
	        case 259:
	        case 269:
	        case 291:
	        case 299:
	        case 307:
	        case 443:
	        case 444:
	        case 448:
	        case 449:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4064;
	            this.stringValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	byteStringValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ByteStringValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 950;
	    this.enterRecursionRule(localctx, 950, GqlParser.RULE_byteStringValueExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4068;
	        this.byteStringPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4075;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,359,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ByteStringValueExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_byteStringValueExpression);
	                this.state = 4070;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 4071;
	                this.match(GqlParser.CONCATENATION_OPERATOR);
	                this.state = 4072;
	                this.byteStringPrimary(); 
	            }
	            this.state = 4077;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,359,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	byteStringPrimary() {
	    let localctx = new ByteStringPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, GqlParser.RULE_byteStringPrimary);
	    try {
	        this.state = 4080;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 8:
	        case 9:
	        case 25:
	        case 27:
	        case 29:
	        case 39:
	        case 94:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 252:
	        case 253:
	        case 258:
	        case 280:
	        case 295:
	        case 296:
	        case 316:
	        case 323:
	        case 328:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 445:
	        case 446:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4078;
	            this.valueExpressionPrimary();
	            break;
	        case 247:
	        case 255:
	        case 259:
	        case 269:
	        case 291:
	        case 299:
	        case 307:
	        case 443:
	        case 444:
	        case 448:
	        case 449:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4079;
	            this.stringValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValueFunction() {
	    let localctx = new StringValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, GqlParser.RULE_stringValueFunction);
	    try {
	        this.state = 4084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4082;
	            this.characterStringFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4083;
	            this.byteStringFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringFunction() {
	    let localctx = new CharacterStringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, GqlParser.RULE_characterStringFunction);
	    try {
	        this.state = 4090;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 259:
	        case 269:
	        case 307:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4086;
	            this.substringFunction();
	            break;
	        case 247:
	        case 299:
	        case 448:
	        case 449:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4087;
	            this.fold();
	            break;
	        case 255:
	        case 443:
	        case 444:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4088;
	            this.trimFunction();
	            break;
	        case 291:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4089;
	            this.normalizeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	substringFunction() {
	    let localctx = new SubstringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, GqlParser.RULE_substringFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4117;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 259:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4092;
	            this.match(GqlParser.SUBSTRING);
	            this.state = 4093;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4094;
	            this.characterStringValueExpression(0);
	            this.state = 4095;
	            this.match(GqlParser.COMMA);
	            this.state = 4096;
	            this.startPosition();
	            this.state = 4099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 4097;
	                this.match(GqlParser.COMMA);
	                this.state = 4098;
	                this.stringLength();
	            }

	            this.state = 4101;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 307:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4103;
	            this.match(GqlParser.LEFT);
	            this.state = 4104;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4105;
	            this.characterStringValueExpression(0);
	            this.state = 4106;
	            this.match(GqlParser.COMMA);
	            this.state = 4107;
	            this.stringLength();
	            this.state = 4108;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 269:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4110;
	            this.match(GqlParser.RIGHT);
	            this.state = 4111;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4112;
	            this.characterStringValueExpression(0);
	            this.state = 4113;
	            this.match(GqlParser.COMMA);
	            this.state = 4114;
	            this.stringLength();
	            this.state = 4115;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fold() {
	    let localctx = new FoldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, GqlParser.RULE_fold);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4119;
	        _la = this._input.LA(1);
	        if(!(_la===247 || _la===299 || _la===448 || _la===449)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4120;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4121;
	        this.characterStringValueExpression(0);
	        this.state = 4122;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimFunction() {
	    let localctx = new TrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, GqlParser.RULE_trimFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4147;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 255:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4124;
	            this.match(GqlParser.TRIM);
	            this.state = 4125;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4126;
	            this.characterStringValueExpression(0);
	            this.state = 4133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 4127;
	                this.match(GqlParser.COMMA);
	                this.state = 4128;
	                this.match(GqlParser.TRIM_SPEC);
	                this.state = 4131;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===19) {
	                    this.state = 4129;
	                    this.match(GqlParser.COMMA);
	                    this.state = 4130;
	                    this.characterStringValueExpression(0);
	                }

	            }

	            this.state = 4135;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 443:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4137;
	            this.match(GqlParser.L_TRIM);
	            this.state = 4138;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4139;
	            this.characterStringValueExpression(0);
	            this.state = 4140;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 444:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4142;
	            this.match(GqlParser.R_TRIM);
	            this.state = 4143;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4144;
	            this.characterStringValueExpression(0);
	            this.state = 4145;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizeFunction() {
	    let localctx = new NormalizeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, GqlParser.RULE_normalizeFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4149;
	        this.match(GqlParser.NORMALIZE);
	        this.state = 4150;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4151;
	        this.characterStringValueExpression(0);
	        this.state = 4154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 4152;
	            this.match(GqlParser.COMMA);
	            this.state = 4153;
	            this.normalForm();
	        }

	        this.state = 4156;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalForm() {
	    let localctx = new NormalFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, GqlParser.RULE_normalForm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4158;
	        _la = this._input.LA(1);
	        if(!(((((_la - 218)) & ~0x1f) == 0 && ((1 << (_la - 218)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringFunction() {
	    let localctx = new ByteStringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, GqlParser.RULE_byteStringFunction);
	    try {
	        this.state = 4162;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 259:
	        case 269:
	        case 307:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4160;
	            this.byteSubstringFunction();
	            break;
	        case 255:
	        case 443:
	        case 444:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4161;
	            this.byteStringTrimFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteSubstringFunction() {
	    let localctx = new ByteSubstringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, GqlParser.RULE_byteSubstringFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4189;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 259:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4164;
	            this.match(GqlParser.SUBSTRING);
	            this.state = 4165;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4166;
	            this.byteStringValueExpression(0);
	            this.state = 4167;
	            this.match(GqlParser.COMMA);
	            this.state = 4168;
	            this.startPosition();
	            this.state = 4171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 4169;
	                this.match(GqlParser.COMMA);
	                this.state = 4170;
	                this.stringLength();
	            }

	            this.state = 4173;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 307:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4175;
	            this.match(GqlParser.LEFT);
	            this.state = 4176;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4177;
	            this.byteStringValueExpression(0);
	            this.state = 4178;
	            this.match(GqlParser.COMMA);
	            this.state = 4179;
	            this.stringLength();
	            this.state = 4180;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 269:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4182;
	            this.match(GqlParser.RIGHT);
	            this.state = 4183;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4184;
	            this.byteStringValueExpression(0);
	            this.state = 4185;
	            this.match(GqlParser.COMMA);
	            this.state = 4186;
	            this.stringLength();
	            this.state = 4187;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringTrimFunction() {
	    let localctx = new ByteStringTrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, GqlParser.RULE_byteStringTrimFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4214;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 255:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4191;
	            this.match(GqlParser.TRIM);
	            this.state = 4192;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4193;
	            this.byteStringValueExpression(0);
	            this.state = 4200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 4194;
	                this.match(GqlParser.COMMA);
	                this.state = 4195;
	                this.match(GqlParser.TRIM_SPEC);
	                this.state = 4198;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===19) {
	                    this.state = 4196;
	                    this.match(GqlParser.COMMA);
	                    this.state = 4197;
	                    this.byteStringValueExpression(0);
	                }

	            }

	            this.state = 4202;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 443:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4204;
	            this.match(GqlParser.L_TRIM);
	            this.state = 4205;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4206;
	            this.byteStringValueExpression(0);
	            this.state = 4207;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 444:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4209;
	            this.match(GqlParser.R_TRIM);
	            this.state = 4210;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4211;
	            this.byteStringValueExpression(0);
	            this.state = 4212;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startPosition() {
	    let localctx = new StartPositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, GqlParser.RULE_startPosition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4216;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLength() {
	    let localctx = new StringLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, GqlParser.RULE_stringLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4218;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	datetimeValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DatetimeValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 978;
	    this.enterRecursionRule(localctx, 978, GqlParser.RULE_datetimeValueExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4221;
	            this.datetimePrimary();
	            break;

	        case 2:
	            this.state = 4222;
	            this.durationValueExpression(0);
	            this.state = 4223;
	            this.match(GqlParser.PLUS);
	            this.state = 4224;
	            this.datetimePrimary();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4236;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,377,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4234;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DatetimeValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_datetimeValueExpression);
	                    this.state = 4228;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4229;
	                    this.match(GqlParser.PLUS);
	                    this.state = 4230;
	                    this.datetimePrimary();
	                    break;

	                case 2:
	                    localctx = new DatetimeValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_datetimeValueExpression);
	                    this.state = 4231;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 4232;
	                    this.match(GqlParser.MINUS);
	                    this.state = 4233;
	                    this.datetimePrimary();
	                    break;

	                } 
	            }
	            this.state = 4238;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,377,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	datetimePrimary() {
	    let localctx = new DatetimePrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, GqlParser.RULE_datetimePrimary);
	    try {
	        this.state = 4241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4239;
	            this.valueExpressionPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4240;
	            this.datetimeValueFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeValueFunction() {
	    let localctx = new DatetimeValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, GqlParser.RULE_datetimeValueFunction);
	    try {
	        this.state = 4248;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	        case 330:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4243;
	            this.dateFunction();
	            break;
	        case 115:
	        case 335:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4244;
	            this.timeFunction();
	            break;
	        case 116:
	        case 336:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4245;
	            this.datetimeFunction();
	            break;
	        case 301:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4246;
	            this.localTimeFunction();
	            break;
	        case 300:
	        case 302:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4247;
	            this.localDatetimeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunction() {
	    let localctx = new DateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, GqlParser.RULE_dateFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4257;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 330:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4250;
	            this.match(GqlParser.CURRENT_DATE);
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4251;
	            this.match(GqlParser.DATE);
	            this.state = 4252;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===8 || _la===128) {
	                this.state = 4253;
	                this.dateFunctionParameters();
	            }

	            this.state = 4256;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunction() {
	    let localctx = new TimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, GqlParser.RULE_timeFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4266;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 335:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4259;
	            this.match(GqlParser.CURRENT_TIME);
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4260;
	            this.match(GqlParser.TIME);
	            this.state = 4261;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4263;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===8 || _la===128) {
	                this.state = 4262;
	                this.timeFunctionParameters();
	            }

	            this.state = 4265;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTimeFunction() {
	    let localctx = new LocalTimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, GqlParser.RULE_localTimeFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,385,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4268;
	            this.match(GqlParser.LOCALTIME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4269;
	            this.match(GqlParser.LOCALTIME);
	            this.state = 4270;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===8 || _la===128) {
	                this.state = 4271;
	                this.timeFunctionParameters();
	            }

	            this.state = 4274;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeFunction() {
	    let localctx = new DatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, GqlParser.RULE_datetimeFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4284;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4277;
	            this.match(GqlParser.CURRENT_TIMESTAMP);
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4278;
	            this.match(GqlParser.DATETIME);
	            this.state = 4279;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===8 || _la===128) {
	                this.state = 4280;
	                this.datetimeFunctionParameters();
	            }

	            this.state = 4283;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localDatetimeFunction() {
	    let localctx = new LocalDatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, GqlParser.RULE_localDatetimeFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4293;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 300:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4286;
	            this.match(GqlParser.LOCALTIMESTAMP);
	            break;
	        case 302:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4287;
	            this.match(GqlParser.LOCALDATETIME);
	            this.state = 4288;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===8 || _la===128) {
	                this.state = 4289;
	                this.datetimeFunctionParameters();
	            }

	            this.state = 4292;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunctionParameters() {
	    let localctx = new DateFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, GqlParser.RULE_dateFunctionParameters);
	    try {
	        this.state = 4297;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4295;
	            this.dateString();
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4296;
	            this.mapValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunctionParameters() {
	    let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, GqlParser.RULE_timeFunctionParameters);
	    try {
	        this.state = 4301;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4299;
	            this.timeString();
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4300;
	            this.mapValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeFunctionParameters() {
	    let localctx = new DatetimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, GqlParser.RULE_datetimeFunctionParameters);
	    try {
	        this.state = 4305;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4303;
	            this.datetimeString();
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4304;
	            this.mapValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	durationValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DurationValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1000;
	    this.enterRecursionRule(localctx, 1000, GqlParser.RULE_durationValueExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4308;
	            this.durationTerm(0);
	            break;

	        case 2:
	            this.state = 4309;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4310;
	            this.datetimeValueExpression(0);
	            this.state = 4311;
	            this.match(GqlParser.MINUS);
	            this.state = 4312;
	            this.datetimePrimary();
	            this.state = 4313;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4325;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,395,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4323;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DurationValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpression);
	                    this.state = 4317;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 4318;
	                    this.match(GqlParser.PLUS);
	                    this.state = 4319;
	                    this.durationTerm(0);
	                    break;

	                case 2:
	                    localctx = new DurationValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpression);
	                    this.state = 4320;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4321;
	                    this.match(GqlParser.MINUS);
	                    this.state = 4322;
	                    this.durationTerm(0);
	                    break;

	                } 
	            }
	            this.state = 4327;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,395,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	durationTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DurationTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1002;
	    this.enterRecursionRule(localctx, 1002, GqlParser.RULE_durationTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4329;
	            this.durationFactor();
	            break;

	        case 2:
	            this.state = 4330;
	            this.term(0);
	            this.state = 4331;
	            this.match(GqlParser.ASTERISK);
	            this.state = 4332;
	            this.durationFactor();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4344;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,398,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4342;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,397,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DurationTermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
	                    this.state = 4336;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 4337;
	                    this.match(GqlParser.ASTERISK);
	                    this.state = 4338;
	                    this.factor();
	                    break;

	                case 2:
	                    localctx = new DurationTermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
	                    this.state = 4339;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4340;
	                    this.match(GqlParser.SOLIDUS);
	                    this.state = 4341;
	                    this.factor();
	                    break;

	                } 
	            }
	            this.state = 4346;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,398,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	durationFactor() {
	    let localctx = new DurationFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, GqlParser.RULE_durationFactor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===436) {
	            this.state = 4347;
	            this.match(GqlParser.SIGN);
	        }

	        this.state = 4350;
	        this.durationPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationPrimary() {
	    let localctx = new DurationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, GqlParser.RULE_durationPrimary);
	    try {
	        this.state = 4354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4352;
	            this.valueExpressionPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4353;
	            this.durationValueFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValueFunction() {
	    let localctx = new DurationValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, GqlParser.RULE_durationValueFunction);
	    try {
	        this.state = 4358;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4356;
	            this.durationFunction();
	            break;
	        case 406:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4357;
	            this.durationAbsoluteValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunction() {
	    let localctx = new DurationFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, GqlParser.RULE_durationFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4360;
	        this.match(GqlParser.DURATION);
	        this.state = 4361;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4362;
	        this.durationFunctionParameters();
	        this.state = 4363;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunctionParameters() {
	    let localctx = new DurationFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, GqlParser.RULE_durationFunctionParameters);
	    try {
	        this.state = 4367;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4365;
	            this.durationString();
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4366;
	            this.mapValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationAbsoluteValueFunction() {
	    let localctx = new DurationAbsoluteValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, GqlParser.RULE_durationAbsoluteValueFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4369;
	        this.match(GqlParser.ABS);
	        this.state = 4370;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4371;
	        this.durationValueExpression(0);
	        this.state = 4372;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphElementPrimary() {
	    let localctx = new GraphElementPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, GqlParser.RULE_graphElementPrimary);
	    try {
	        this.state = 4376;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 445:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4374;
	            this.startNodeFunction();
	            break;
	        case 446:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4375;
	            this.endNodeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startNodeFunction() {
	    let localctx = new StartNodeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, GqlParser.RULE_startNodeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4378;
	        this.match(GqlParser.START_NODE);
	        this.state = 4379;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4380;
	        this.identifier();
	        this.state = 4381;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endNodeFunction() {
	    let localctx = new EndNodeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, GqlParser.RULE_endNodeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4383;
	        this.match(GqlParser.END_NODE);
	        this.state = 4384;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4385;
	        this.identifier();
	        this.state = 4386;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionValueConstructor() {
	    let localctx = new CollectionValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, GqlParser.RULE_collectionValueConstructor);
	    try {
	        this.state = 4393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4388;
	            this.listValueConstructor();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4389;
	            this.setValueConstructor();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4390;
	            this.orderedSetValueConstructorByEnumeration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4391;
	            this.mapValueConstructor();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4392;
	            this.recordValueConstructor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	listValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ListValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1024;
	    this.enterRecursionRule(localctx, 1024, GqlParser.RULE_listValueExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4396;
	        this.listPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4403;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,405,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ListValueExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_listValueExpression);
	                this.state = 4398;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 4399;
	                this.match(GqlParser.CONCATENATION_OPERATOR);
	                this.state = 4400;
	                this.listPrimary(); 
	            }
	            this.state = 4405;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,405,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	listPrimary() {
	    let localctx = new ListPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, GqlParser.RULE_listPrimary);
	    try {
	        this.state = 4408;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 255:
	        case 447:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4406;
	            this.listValueFunction();
	            break;
	        case 7:
	        case 8:
	        case 9:
	        case 25:
	        case 27:
	        case 29:
	        case 39:
	        case 94:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 194:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 204:
	        case 205:
	        case 252:
	        case 253:
	        case 258:
	        case 280:
	        case 295:
	        case 296:
	        case 316:
	        case 323:
	        case 328:
	        case 331:
	        case 332:
	        case 334:
	        case 337:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 371:
	        case 372:
	        case 373:
	        case 400:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 445:
	        case 446:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4407;
	            this.valueExpressionPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueFunction() {
	    let localctx = new ListValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, GqlParser.RULE_listValueFunction);
	    try {
	        this.state = 4412;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 447:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4410;
	            this.tailListFunction();
	            break;
	        case 255:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4411;
	            this.trimListFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tailListFunction() {
	    let localctx = new TailListFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, GqlParser.RULE_tailListFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4414;
	        this.match(GqlParser.TAIL);
	        this.state = 4415;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4416;
	        this.listValueExpression(0);
	        this.state = 4417;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimListFunction() {
	    let localctx = new TrimListFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, GqlParser.RULE_trimListFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4419;
	        this.match(GqlParser.TRIM);
	        this.state = 4420;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4421;
	        this.listValueExpression(0);
	        this.state = 4422;
	        this.match(GqlParser.COMMA);
	        this.state = 4423;
	        this.numericValueExpression(0);
	        this.state = 4424;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructor() {
	    let localctx = new ListValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, GqlParser.RULE_listValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4426;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructorByEnumeration() {
	    let localctx = new ListValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, GqlParser.RULE_listValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4428;
	        this.listValueTypeName();
	        this.state = 4429;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 4430;
	        this.listElementList();
	        this.state = 4431;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listElementList() {
	    let localctx = new ListElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, GqlParser.RULE_listElementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4433;
	        this.valueExpression();
	        this.state = 4438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 4434;
	            this.match(GqlParser.COMMA);
	            this.state = 4435;
	            this.valueExpression();
	            this.state = 4440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	multisetValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MultisetValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1040;
	    this.enterRecursionRule(localctx, 1040, GqlParser.RULE_multisetValueExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4442;
	        this.multisetTerm(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4460;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,412,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4458;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultisetValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_multisetValueExpression);
	                    this.state = 4444;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }

	                    this.state = 4445;
	                    this.match(GqlParser.MULTISET);
	                    this.state = 4446;
	                    this.match(GqlParser.UNION);
	                    this.state = 4448;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===195 || _la===196) {
	                        this.state = 4447;
	                        _la = this._input.LA(1);
	                        if(!(_la===195 || _la===196)) {
	                        this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        }
	                    }

	                    this.state = 4450;
	                    this.multisetTerm(0);
	                    break;

	                case 2:
	                    localctx = new MultisetValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_multisetValueExpression);
	                    this.state = 4451;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }

	                    this.state = 4452;
	                    this.match(GqlParser.MULTISET);
	                    this.state = 4453;
	                    this.match(GqlParser.EXCEPT);
	                    this.state = 4455;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===195 || _la===196) {
	                        this.state = 4454;
	                        _la = this._input.LA(1);
	                        if(!(_la===195 || _la===196)) {
	                        this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        }
	                    }

	                    this.state = 4457;
	                    this.multisetTerm(0);
	                    break;

	                } 
	            }
	            this.state = 4462;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,412,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	multisetTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MultisetTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1042;
	    this.enterRecursionRule(localctx, 1042, GqlParser.RULE_multisetTerm, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4464;
	        this.multisetPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4475;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,414,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new MultisetTermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_multisetTerm);
	                this.state = 4466;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }

	                this.state = 4467;
	                this.match(GqlParser.MULTISET);
	                this.state = 4468;
	                this.match(GqlParser.INTERSECT);
	                this.state = 4470;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===195 || _la===196) {
	                    this.state = 4469;
	                    _la = this._input.LA(1);
	                    if(!(_la===195 || _la===196)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 4472;
	                this.multisetPrimary(); 
	            }
	            this.state = 4477;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,414,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	multisetPrimary() {
	    let localctx = new MultisetPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, GqlParser.RULE_multisetPrimary);
	    try {
	        this.state = 4480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4478;
	            this.multisetValueFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4479;
	            this.valueExpressionPrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multisetValueFunction() {
	    let localctx = new MultisetValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, GqlParser.RULE_multisetValueFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4482;
	        this.match(GqlParser.SET);
	        this.state = 4483;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4484;
	        this.multisetValueConstructorByEnumeration();
	        this.state = 4485;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multisetValueConstructorByEnumeration() {
	    let localctx = new MultisetValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, GqlParser.RULE_multisetValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4487;
	        this.match(GqlParser.MULTISET);
	        this.state = 4488;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 4489;
	        this.multisetElementList();
	        this.state = 4490;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multisetElementList() {
	    let localctx = new MultisetElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, GqlParser.RULE_multisetElementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4492;
	        this.valueExpression();
	        this.state = 4497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 4493;
	            this.match(GqlParser.COMMA);
	            this.state = 4494;
	            this.valueExpression();
	            this.state = 4499;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setValueConstructor() {
	    let localctx = new SetValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, GqlParser.RULE_setValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4500;
	        this.setValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setValueConstructorByEnumeration() {
	    let localctx = new SetValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, GqlParser.RULE_setValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4502;
	        this.match(GqlParser.SET);
	        this.state = 4503;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 4504;
	        this.setElementList();
	        this.state = 4505;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setElementList() {
	    let localctx = new SetElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, GqlParser.RULE_setElementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4507;
	        this.valueExpression();
	        this.state = 4512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 4508;
	            this.match(GqlParser.COMMA);
	            this.state = 4509;
	            this.valueExpression();
	            this.state = 4514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedSetValueConstructorByEnumeration() {
	    let localctx = new OrderedSetValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, GqlParser.RULE_orderedSetValueConstructorByEnumeration);
	    try {
	        this.state = 4529;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 197:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4515;
	            this.match(GqlParser.ORDERED);
	            this.state = 4516;
	            this.match(GqlParser.SET);
	            this.state = 4517;
	            this.match(GqlParser.LEFT_BRACE);
	            this.state = 4518;
	            this.orderedSetElementList();
	            this.state = 4519;
	            this.match(GqlParser.RIGHT_BRACE);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4521;
	            this.match(GqlParser.LEFT_BRACE);
	            this.state = 4522;
	            this.orderedSetElementList();
	            this.state = 4523;
	            this.match(GqlParser.RIGHT_BRACE);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4525;
	            this.match(GqlParser.LEFT_BRACKET);
	            this.state = 4526;
	            this.orderedSetElementList();
	            this.state = 4527;
	            this.match(GqlParser.RIGHT_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedSetElementList() {
	    let localctx = new OrderedSetElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, GqlParser.RULE_orderedSetElementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4531;
	        this.valueExpression();
	        this.state = 4536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 4532;
	            this.match(GqlParser.COMMA);
	            this.state = 4533;
	            this.valueExpression();
	            this.state = 4538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapValueConstructor() {
	    let localctx = new MapValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, GqlParser.RULE_mapValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4539;
	        this.mapValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapValueConstructorByEnumeration() {
	    let localctx = new MapValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, GqlParser.RULE_mapValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4541;
	        this.match(GqlParser.MAP);
	        this.state = 4542;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 4543;
	        this.mapElementList();
	        this.state = 4544;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapElementList() {
	    let localctx = new MapElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, GqlParser.RULE_mapElementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4546;
	        this.mapElement();
	        this.state = 4551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 4547;
	            this.match(GqlParser.COMMA);
	            this.state = 4548;
	            this.mapElement();
	            this.state = 4553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapElement() {
	    let localctx = new MapElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, GqlParser.RULE_mapElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4554;
	        this.mapKey();
	        this.state = 4555;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapKey() {
	    let localctx = new MapKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, GqlParser.RULE_mapKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4557;
	        this.valueExpression();
	        this.state = 4558;
	        this.match(GqlParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueConstructor() {
	    let localctx = new RecordValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, GqlParser.RULE_recordValueConstructor);
	    try {
	        this.state = 4562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4560;
	            this.recordValueConstructorByEnumeration();
	            break;
	        case 198:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4561;
	            this.match(GqlParser.UNIT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueConstructorByEnumeration() {
	    let localctx = new RecordValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, GqlParser.RULE_recordValueConstructorByEnumeration);
	    try {
	        this.state = 4573;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4564;
	            this.match(GqlParser.RECORD);
	            this.state = 4565;
	            this.match(GqlParser.LEFT_BRACE);
	            this.state = 4566;
	            this.fieldList();
	            this.state = 4567;
	            this.match(GqlParser.RIGHT_BRACE);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4569;
	            this.match(GqlParser.LEFT_BRACE);
	            this.state = 4570;
	            this.fieldList();
	            this.state = 4571;
	            this.match(GqlParser.RIGHT_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldList() {
	    let localctx = new FieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, GqlParser.RULE_fieldList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4575;
	        this.field();
	        this.state = 4580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 4576;
	            this.match(GqlParser.COMMA);
	            this.state = 4577;
	            this.field();
	            this.state = 4582;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, GqlParser.RULE_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4583;
	        this.identifier();
	        this.state = 4584;
	        this.fieldValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldValue() {
	    let localctx = new FieldValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, GqlParser.RULE_fieldValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4586;
	        this.valueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpression() {
	    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, GqlParser.RULE_caseExpression);
	    try {
	        this.state = 4591;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,424,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4588;
	            this.caseAbbreviation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4589;
	            this.simpleCase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4590;
	            this.searchedCase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAbbreviation() {
	    let localctx = new CaseAbbreviationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, GqlParser.RULE_caseAbbreviation);
	    var _la = 0; // Token type
	    try {
	        this.state = 4612;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 200:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4593;
	            this.match(GqlParser.NULLIF);
	            this.state = 4594;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4595;
	            this.valueExpression();
	            this.state = 4596;
	            this.match(GqlParser.COMMA);
	            this.state = 4597;
	            this.valueExpression();
	            this.state = 4598;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 201:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4600;
	            this.match(GqlParser.COALESCE);
	            this.state = 4601;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4602;
	            this.valueExpression();
	            this.state = 4607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===19) {
	                this.state = 4603;
	                this.match(GqlParser.COMMA);
	                this.state = 4604;
	                this.valueExpression();
	                this.state = 4609;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4610;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCase() {
	    let localctx = new SimpleCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, GqlParser.RULE_simpleCase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4614;
	        this.match(GqlParser.CASE);
	        this.state = 4615;
	        this.caseOperand();
	        this.state = 4619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===146) {
	            this.state = 4616;
	            this.simpleWhenClause();
	            this.state = 4621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 4622;
	            this.elseClause();
	        }

	        this.state = 4625;
	        this.match(GqlParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedCase() {
	    let localctx = new SearchedCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, GqlParser.RULE_searchedCase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4627;
	        this.match(GqlParser.CASE);
	        this.state = 4631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===146) {
	            this.state = 4628;
	            this.searchedWhenClause();
	            this.state = 4633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 4634;
	            this.elseClause();
	        }

	        this.state = 4637;
	        this.match(GqlParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleWhenClause() {
	    let localctx = new SimpleWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, GqlParser.RULE_simpleWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4639;
	        this.match(GqlParser.WHEN);
	        this.state = 4640;
	        this.whenOperandList();
	        this.state = 4641;
	        this.match(GqlParser.THEN);
	        this.state = 4642;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedWhenClause() {
	    let localctx = new SearchedWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, GqlParser.RULE_searchedWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4644;
	        this.match(GqlParser.WHEN);
	        this.state = 4645;
	        this.searchCondition();
	        this.state = 4646;
	        this.match(GqlParser.THEN);
	        this.state = 4647;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseClause() {
	    let localctx = new ElseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, GqlParser.RULE_elseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4649;
	        this.match(GqlParser.ELSE);
	        this.state = 4650;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseOperand() {
	    let localctx = new CaseOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, GqlParser.RULE_caseOperand);
	    try {
	        this.state = 4654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4652;
	            this.nonParenthesizedValueExpressionPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4653;
	            this.elementReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperandList() {
	    let localctx = new WhenOperandListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, GqlParser.RULE_whenOperandList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4656;
	        this.whenOperand();
	        this.state = 4661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 4657;
	            this.match(GqlParser.COMMA);
	            this.state = 4658;
	            this.whenOperand();
	            this.state = 4663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperand() {
	    let localctx = new WhenOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, GqlParser.RULE_whenOperand);
	    try {
	        this.state = 4671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4664;
	            this.nonParenthesizedValueExpressionPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4665;
	            this.comparisonPredicatePart2();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4666;
	            this.nullPredicatePart2();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4667;
	            this.directedPredicatePart2();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4668;
	            this.labeledPredicatePart2();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4669;
	            this.sourcePredicatePart2();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4670;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, GqlParser.RULE_result);
	    try {
	        this.state = 4675;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4673;
	            this.valueExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4674;
	            this.match(GqlParser.NULL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castSpecification() {
	    let localctx = new CastSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, GqlParser.RULE_castSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4677;
	        this.match(GqlParser.CAST);
	        this.state = 4678;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4681;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,435,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4679;
	            this.valueExpression();
	            break;

	        case 2:
	            this.state = 4680;
	            this.match(GqlParser.NULL);
	            break;

	        }
	        this.state = 4683;
	        this.match(GqlParser.AS);
	        this.state = 4684;
	        this.predefinedType();
	        this.state = 4685;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multisetSetFunction() {
	    let localctx = new MultisetSetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, GqlParser.RULE_multisetSetFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4687;
	        this.match(GqlParser.SET);
	        this.state = 4688;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4689;
	        this.multisetValueExpression(0);
	        this.state = 4690;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_idFunction() {
	    let localctx = new Element_idFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, GqlParser.RULE_element_idFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4692;
	        this.match(GqlParser.ELEMENT_ID);
	        this.state = 4693;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4694;
	        this.elementReference();
	        this.state = 4695;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, GqlParser.RULE_literal);
	    try {
	        this.state = 4699;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4697;
	            this.signedNumericLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4698;
	            this.generalLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLiteral() {
	    let localctx = new GeneralLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, GqlParser.RULE_generalLiteral);
	    try {
	        this.state = 4708;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4701;
	            this.predefinedTypeLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4702;
	            this.listLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4703;
	            this.setLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4704;
	            this.multisetLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4705;
	            this.orderedSetLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4706;
	            this.mapLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4707;
	            this.recordLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedTypeLiteral() {
	    let localctx = new PredefinedTypeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, GqlParser.RULE_predefinedTypeLiteral);
	    try {
	        this.state = 4716;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 400:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4710;
	            this.match(GqlParser.TRUTH_VALUE);
	            break;
	        case 7:
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4711;
	            this.characterStringLiteral();
	            break;
	        case 457:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4712;
	            this.byteStringLiteral();
	            break;
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4713;
	            this.temporalLiteral();
	            break;
	        case 118:
	        case 459:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4714;
	            this.durationLiteral();
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4715;
	            this.match(GqlParser.NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedLiteral() {
	    let localctx = new UnsignedLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, GqlParser.RULE_unsignedLiteral);
	    try {
	        this.state = 4720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4718;
	            this.unsignedNumericLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4719;
	            this.generalLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringLiteral() {
	    let localctx = new CharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, GqlParser.RULE_characterStringLiteral);
	    try {
	        this.state = 4724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4722;
	            this.singleQuotedCharacterSequence();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4723;
	            this.doubleQuotedCharacterSequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenCharacterStringLiteral() {
	    let localctx = new UnbrokenCharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, GqlParser.RULE_unbrokenCharacterStringLiteral);
	    try {
	        this.state = 4728;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4726;
	            this.unbrokenSingleQuotedCharacterSequence();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4727;
	            this.unbrokenDoubleQuotedCharacterSequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleQuotedCharacterSequence() {
	    let localctx = new SingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, GqlParser.RULE_singleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4730;
	        this.unbrokenSingleQuotedCharacterSequence();
	        this.state = 4736;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,442,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4731;
	                this.separator();
	                this.state = 4732;
	                this.unbrokenSingleQuotedCharacterSequence(); 
	            }
	            this.state = 4738;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,442,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doubleQuotedCharacterSequence() {
	    let localctx = new DoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, GqlParser.RULE_doubleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4739;
	        this.unbrokenDoubleQuotedCharacterSequence();
	        this.state = 4745;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,443,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4740;
	                this.separator();
	                this.state = 4741;
	                this.unbrokenDoubleQuotedCharacterSequence(); 
	            }
	            this.state = 4747;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,443,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenSingleQuotedCharacterSequence() {
	    let localctx = new UnbrokenSingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, GqlParser.RULE_unbrokenSingleQuotedCharacterSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4748;
	        this.match(GqlParser.QUOTE);
	        this.state = 4752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===16 || _la===41 || _la===43 || _la===76 || _la===451) {
	            this.state = 4749;
	            this.characterRepresentation();
	            this.state = 4754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4755;
	        this.match(GqlParser.QUOTE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenDoubleQuotedCharacterSequence() {
	    let localctx = new UnbrokenDoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4757;
	        this.match(GqlParser.DOUBLE_QUOTE);
	        this.state = 4761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===16 || _la===41 || _la===43 || _la===76 || _la===451) {
	            this.state = 4758;
	            this.characterRepresentation();
	            this.state = 4763;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4764;
	        this.match(GqlParser.DOUBLE_QUOTE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenAccentQuotedCharacterSequence() {
	    let localctx = new UnbrokenAccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, GqlParser.RULE_unbrokenAccentQuotedCharacterSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4766;
	        this.match(GqlParser.GRAVE_ACCENT);
	        this.state = 4770;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===16 || _la===41 || _la===43 || _la===76 || _la===451) {
	            this.state = 4767;
	            this.characterRepresentation();
	            this.state = 4772;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4773;
	        this.match(GqlParser.GRAVE_ACCENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterRepresentation() {
	    let localctx = new CharacterRepresentationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, GqlParser.RULE_characterRepresentation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4775;
	        _la = this._input.LA(1);
	        if(!(_la===6 || _la===16 || _la===41 || _la===43 || _la===76 || _la===451)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringLiteral() {
	    let localctx = new ByteStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, GqlParser.RULE_byteStringLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4777;
	        this.match(GqlParser.BYTE_STRING_START);
	        this.state = 4778;
	        this.match(GqlParser.QUOTE);
	        this.state = 4782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 4779;
	            this.match(GqlParser.SPACE);
	            this.state = 4784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===458) {
	            this.state = 4785;
	            this.match(GqlParser.DIGIT16);
	            this.state = 4789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===6) {
	                this.state = 4786;
	                this.match(GqlParser.SPACE);
	                this.state = 4791;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4792;
	            this.match(GqlParser.DIGIT16);
	            this.state = 4796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===6) {
	                this.state = 4793;
	                this.match(GqlParser.SPACE);
	                this.state = 4798;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4804;
	        this.match(GqlParser.QUOTE);
	        this.state = 4836;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,455,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4805;
	                this.separator();
	                this.state = 4806;
	                this.match(GqlParser.QUOTE);
	                this.state = 4810;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===6) {
	                    this.state = 4807;
	                    this.match(GqlParser.SPACE);
	                    this.state = 4812;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 4829;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===458) {
	                    this.state = 4813;
	                    this.match(GqlParser.DIGIT16);
	                    this.state = 4817;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===6) {
	                        this.state = 4814;
	                        this.match(GqlParser.SPACE);
	                        this.state = 4819;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 4820;
	                    this.match(GqlParser.DIGIT16);
	                    this.state = 4824;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===6) {
	                        this.state = 4821;
	                        this.match(GqlParser.SPACE);
	                        this.state = 4826;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 4831;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 4832;
	                this.match(GqlParser.QUOTE); 
	            }
	            this.state = 4838;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,455,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, GqlParser.RULE_numericLiteral);
	    try {
	        this.state = 4841;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,456,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4839;
	            this.signedNumericLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4840;
	            this.unsignedNumericLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signedNumericLiteral() {
	    let localctx = new SignedNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, GqlParser.RULE_signedNumericLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4844;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 4843;
	            this.sign();
	        }

	        this.state = 4846;
	        this.unsignedNumericLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedNumericLiteral() {
	    let localctx = new UnsignedNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, GqlParser.RULE_unsignedNumericLiteral);
	    try {
	        this.state = 4850;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,458,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4848;
	            this.exactNumericLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4849;
	            this.approximateNumericLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exactNumericLiteral() {
	    let localctx = new ExactNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, GqlParser.RULE_exactNumericLiteral);
	    try {
	        this.state = 4860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4852;
	            this.unsignedInteger();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4853;
	            this.unsignedDecimalInteger();
	            this.state = 4854;
	            this.match(GqlParser.PERIOD);
	            this.state = 4856;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	            if(la_===1) {
	                this.state = 4855;
	                this.unsignedDecimalInteger();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4858;
	            this.match(GqlParser.PERIOD);
	            this.state = 4859;
	            this.unsignedDecimalInteger();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sign() {
	    let localctx = new SignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, GqlParser.RULE_sign);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4862;
	        _la = this._input.LA(1);
	        if(!(_la===11 || _la===12)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedInteger() {
	    let localctx = new UnsignedIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, GqlParser.RULE_unsignedInteger);
	    try {
	        this.state = 4868;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 459:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4864;
	            this.unsignedDecimalInteger();
	            break;
	        case 455:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4865;
	            this.unsignedHexadecimalInteger();
	            break;
	        case 454:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4866;
	            this.unsignedOctalInteger();
	            break;
	        case 453:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4867;
	            this.unsignedBinaryInteger();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedDecimalInteger() {
	    let localctx = new UnsignedDecimalIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, GqlParser.RULE_unsignedDecimalInteger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4870;
	        this.match(GqlParser.DIGIT10);

	        this.state = 4877;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,463,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4872;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===36) {
	                    this.state = 4871;
	                    this.match(GqlParser.UNDERSCORE);
	                }

	                this.state = 4874;
	                this.match(GqlParser.DIGIT10); 
	            }
	            this.state = 4879;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,463,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedBinaryInteger() {
	    let localctx = new UnsignedBinaryIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, GqlParser.RULE_unsignedBinaryInteger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4880;
	        this.match(GqlParser.START2);

	        this.state = 4887;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,465,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4882;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===36) {
	                    this.state = 4881;
	                    this.match(GqlParser.UNDERSCORE);
	                }

	                this.state = 4884;
	                this.match(GqlParser.DIGIT2); 
	            }
	            this.state = 4889;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,465,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedOctalInteger() {
	    let localctx = new UnsignedOctalIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, GqlParser.RULE_unsignedOctalInteger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4890;
	        this.match(GqlParser.START8);

	        this.state = 4897;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,467,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4892;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===36) {
	                    this.state = 4891;
	                    this.match(GqlParser.UNDERSCORE);
	                }

	                this.state = 4894;
	                this.match(GqlParser.DIGIT8); 
	            }
	            this.state = 4899;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,467,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedHexadecimalInteger() {
	    let localctx = new UnsignedHexadecimalIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, GqlParser.RULE_unsignedHexadecimalInteger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4900;
	        this.match(GqlParser.START16);

	        this.state = 4907;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,469,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4902;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===36) {
	                    this.state = 4901;
	                    this.match(GqlParser.UNDERSCORE);
	                }

	                this.state = 4904;
	                this.match(GqlParser.DIGIT16); 
	            }
	            this.state = 4909;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,469,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signedDecimalInteger() {
	    let localctx = new SignedDecimalIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, GqlParser.RULE_signedDecimalInteger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 4910;
	            this.sign();
	        }

	        this.state = 4913;
	        this.unsignedDecimalInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	approximateNumericLiteral() {
	    let localctx = new ApproximateNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, GqlParser.RULE_approximateNumericLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4915;
	        this.exactNumericLiteral();
	        this.state = 4916;
	        this.match(GqlParser.ESEPARATOR);
	        this.state = 4917;
	        this.signedDecimalInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalLiteral() {
	    let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, GqlParser.RULE_temporalLiteral);
	    try {
	        this.state = 4922;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4919;
	            this.dateLiteral();
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4920;
	            this.timeLiteral();
	            break;
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4921;
	            this.datetimeLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, GqlParser.RULE_dateLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4924;
	        this.match(GqlParser.DATE);
	        this.state = 4925;
	        this.dateString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeLiteral() {
	    let localctx = new TimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, GqlParser.RULE_timeLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4927;
	        this.match(GqlParser.TIME);
	        this.state = 4928;
	        this.timeString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeLiteral() {
	    let localctx = new DatetimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, GqlParser.RULE_datetimeLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4930;
	        _la = this._input.LA(1);
	        if(!(_la===116 || _la===117)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4931;
	        this.datetimeString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateString() {
	    let localctx = new DateStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, GqlParser.RULE_dateString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4933;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeString() {
	    let localctx = new TimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, GqlParser.RULE_timeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4935;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeString() {
	    let localctx = new DatetimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, GqlParser.RULE_datetimeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4937;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationLiteral() {
	    let localctx = new DurationLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, GqlParser.RULE_durationLiteral);
	    try {
	        this.state = 4942;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4939;
	            this.match(GqlParser.DURATION);
	            this.state = 4940;
	            this.durationString();
	            break;
	        case 459:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4941;
	            this.intervalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalLiteral() {
	    let localctx = new IntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, GqlParser.RULE_intervalLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4945; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4944;
	            this.match(GqlParser.DIGIT10);
	            this.state = 4947; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===459);
	        this.state = 4950; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4949;
	            this.match(GqlParser.SPACE);
	            this.state = 4952; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===6);
	        this.state = 4956;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4954;
	            this.yearMonthLiteral();
	            break;

	        case 2:
	            this.state = 4955;
	            this.dayTimeLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yearMonthLiteral() {
	    let localctx = new YearMonthLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, GqlParser.RULE_yearMonthLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4959; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4958;
	            this.match(GqlParser.DIGIT10);
	            this.state = 4961; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===459);
	        this.state = 4964; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4963;
	            this.match(GqlParser.SPACE);
	            this.state = 4966; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===6);
	        this.state = 4968;
	        _la = this._input.LA(1);
	        if(!(_la===430 || _la===431)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dayTimeLiteral() {
	    let localctx = new DayTimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, GqlParser.RULE_dayTimeLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4971; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4970;
	            this.match(GqlParser.DIGIT10);
	            this.state = 4973; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===459);
	        this.state = 4976; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4975;
	            this.match(GqlParser.SPACE);
	            this.state = 4978; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===6);
	        this.state = 4980;
	        _la = this._input.LA(1);
	        if(!(((((_la - 432)) & ~0x1f) == 0 && ((1 << (_la - 432)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,480,this._ctx);
	        if(la_===1) {
	            this.state = 4981;
	            this.fractionalSecondsLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fractionalSecondsLiteral() {
	    let localctx = new FractionalSecondsLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, GqlParser.RULE_fractionalSecondsLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4984;
	        this.match(GqlParser.PERIOD);
	        this.state = 4986; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4985;
	        		this.match(GqlParser.DIGIT10);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4988; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,481, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationString() {
	    let localctx = new DurationStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, GqlParser.RULE_durationString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4990;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, GqlParser.RULE_listLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4992;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setLiteral() {
	    let localctx = new SetLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, GqlParser.RULE_setLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4994;
	        this.setValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multisetLiteral() {
	    let localctx = new MultisetLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, GqlParser.RULE_multisetLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4996;
	        this.multisetValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedSetLiteral() {
	    let localctx = new OrderedSetLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, GqlParser.RULE_orderedSetLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4998;
	        this.orderedSetValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapLiteral() {
	    let localctx = new MapLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, GqlParser.RULE_mapLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5000;
	        this.mapValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordLiteral() {
	    let localctx = new RecordLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, GqlParser.RULE_recordLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5002;
	        this.recordValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueType(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueTypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1198;
	    this.enterRecursionRule(localctx, 1198, GqlParser.RULE_valueType, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5013;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 170:
	            this.state = 5005;
	            this.match(GqlParser.ANY);
	            break;
	        case 114:
	        case 115:
	        case 116:
	        case 118:
	        case 167:
	        case 168:
	        case 169:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 249:
	        case 277:
	        case 301:
	        case 302:
	        case 340:
	        case 341:
	        case 347:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 397:
	        case 398:
	            this.state = 5006;
	            this.predefinedType();
	            break;
	        case 120:
	        case 121:
	        case 124:
	        case 125:
	            this.state = 5007;
	            this.graphElementType();
	            break;
	        case 128:
	            this.state = 5008;
	            this.mapValueType();
	            break;
	        case 129:
	            this.state = 5009;
	            this.recordValueType();
	            break;
	        case 27:
	        case 135:
	        case 139:
	        case 327:
	            this.state = 5010;
	            this.graphTypeExpression();
	            break;
	        case 136:
	        case 206:
	            this.state = 5011;
	            this.bindingTableTypeExpression();
	            break;
	        case 171:
	            this.state = 5012;
	            this.match(GqlParser.NOTHING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 5026;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,484,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 5024;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ValueTypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_valueType);
	                    this.state = 5015;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 5016;
	                    _la = this._input.LA(1);
	                    if(!(_la===126 || _la===127)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 2:
	                    localctx = new ValueTypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_valueType);
	                    this.state = 5017;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 5018;
	                    this.match(GqlParser.MULTISET);
	                    break;

	                case 3:
	                    localctx = new ValueTypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_valueType);
	                    this.state = 5019;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 5020;
	                    this.match(GqlParser.SET);
	                    break;

	                case 4:
	                    localctx = new ValueTypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_valueType);
	                    this.state = 5021;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 5022;
	                    this.match(GqlParser.ORDERED);
	                    this.state = 5023;
	                    this.match(GqlParser.SET);
	                    break;

	                } 
	            }
	            this.state = 5028;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,484,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	ofValueType() {
	    let localctx = new OfValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, GqlParser.RULE_ofValueType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===393) {
	            this.state = 5029;
	            _la = this._input.LA(1);
	            if(!(_la===18 || _la===393)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5032;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedType() {
	    let localctx = new PredefinedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, GqlParser.RULE_predefinedType);
	    try {
	        this.state = 5039;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 397:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5034;
	            this.match(GqlParser.BOOL_TYPE);
	            break;
	        case 398:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5035;
	            this.characterStringType();
	            break;
	        case 167:
	        case 168:
	        case 169:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5036;
	            this.byteStringType();
	            break;
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 249:
	        case 277:
	        case 340:
	        case 341:
	        case 347:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5037;
	            this.numericType();
	            break;
	        case 114:
	        case 115:
	        case 116:
	        case 118:
	        case 301:
	        case 302:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5038;
	            this.temporalType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringType() {
	    let localctx = new CharacterStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, GqlParser.RULE_characterStringType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5041;
	        this.match(GqlParser.STRING_TYPE);
	        this.state = 5046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
	        if(la_===1) {
	            this.state = 5042;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 5043;
	            this.unsignedDecimalInteger();
	            this.state = 5044;
	            this.match(GqlParser.RIGHT_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringType() {
	    let localctx = new ByteStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1206, GqlParser.RULE_byteStringType);
	    try {
	        this.state = 5074;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 167:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5048;
	            this.match(GqlParser.BYTES);
	            this.state = 5058;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
	            if(la_===1) {
	                this.state = 5049;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 5053;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
	                if(la_===1) {
	                    this.state = 5050;
	                    this.unsignedDecimalInteger();
	                    this.state = 5051;
	                    this.match(GqlParser.COMMA);

	                }
	                this.state = 5055;
	                this.unsignedDecimalInteger();
	                this.state = 5056;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            break;
	        case 168:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5060;
	            this.match(GqlParser.BINARY);
	            this.state = 5065;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	            if(la_===1) {
	                this.state = 5061;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 5062;
	                this.unsignedDecimalInteger();
	                this.state = 5063;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5067;
	            this.match(GqlParser.VARBINARY);
	            this.state = 5072;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	            if(la_===1) {
	                this.state = 5068;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 5069;
	                this.unsignedDecimalInteger();
	                this.state = 5070;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1208, GqlParser.RULE_numericType);
	    try {
	        this.state = 5078;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 249:
	        case 340:
	        case 341:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5076;
	            this.exactNumericType();
	            break;
	        case 277:
	        case 347:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5077;
	            this.approximateNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exactNumericType() {
	    let localctx = new ExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1210, GqlParser.RULE_exactNumericType);
	    try {
	        this.state = 5082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 249:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5080;
	            this.binaryExactNumericType();
	            break;
	        case 340:
	        case 341:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5081;
	            this.decimalExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryExactNumericType() {
	    let localctx = new BinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1212, GqlParser.RULE_binaryExactNumericType);
	    try {
	        this.state = 5086;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5084;
	            this.binaryExactSignedNumericType();
	            break;
	        case 249:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5085;
	            this.binaryExactUnsignedNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryExactSignedNumericType() {
	    let localctx = new BinaryExactSignedNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1214, GqlParser.RULE_binaryExactSignedNumericType);
	    var _la = 0; // Token type
	    try {
	        this.state = 5107;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 173:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5088;
	            this.match(GqlParser.INT8);
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5089;
	            this.match(GqlParser.INT16);
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5090;
	            this.match(GqlParser.INT32);
	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5091;
	            this.match(GqlParser.INT64);
	            break;
	        case 177:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5092;
	            this.match(GqlParser.INT128);
	            break;
	        case 178:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5093;
	            this.match(GqlParser.INT256);
	            break;
	        case 179:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5094;
	            this.match(GqlParser.SMALLINT);
	            break;
	        case 172:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5095;
	            this.match(GqlParser.INT);
	            this.state = 5100;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
	            if(la_===1) {
	                this.state = 5096;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 5097;
	                this.unsignedDecimalInteger();
	                this.state = 5098;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            break;
	        case 180:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5102;
	            this.match(GqlParser.BIGINT);
	            break;
	        case 181:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===181) {
	                this.state = 5103;
	                this.match(GqlParser.SIGNED);
	            }

	            this.state = 5106;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryExactUnsignedNumericType() {
	    let localctx = new BinaryExactUnsignedNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1216, GqlParser.RULE_binaryExactUnsignedNumericType);
	    try {
	        this.state = 5122;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 382:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5109;
	            this.match(GqlParser.UINT8);
	            break;
	        case 383:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5110;
	            this.match(GqlParser.UINT16);
	            break;
	        case 384:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5111;
	            this.match(GqlParser.UINT32);
	            break;
	        case 385:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5112;
	            this.match(GqlParser.UINT64);
	            break;
	        case 386:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5113;
	            this.match(GqlParser.UINT128);
	            break;
	        case 387:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5114;
	            this.match(GqlParser.UINT256);
	            break;
	        case 381:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5115;
	            this.match(GqlParser.UINT);
	            this.state = 5116;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 5117;
	            this.unsignedDecimalInteger();
	            this.state = 5118;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 249:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5120;
	            this.match(GqlParser.UNSIGNED);
	            this.state = 5121;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verboseBinaryExactNumericType() {
	    let localctx = new VerboseBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1218, GqlParser.RULE_verboseBinaryExactNumericType);
	    try {
	        this.state = 5135;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 375:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5124;
	            this.match(GqlParser.INTEGER8);
	            break;
	        case 376:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5125;
	            this.match(GqlParser.INTEGER16);
	            break;
	        case 377:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5126;
	            this.match(GqlParser.INTEGER32);
	            break;
	        case 378:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5127;
	            this.match(GqlParser.INTEGER64);
	            break;
	        case 379:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5128;
	            this.match(GqlParser.INTEGER128);
	            break;
	        case 380:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5129;
	            this.match(GqlParser.INTEGER256);
	            break;
	        case 374:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5130;
	            this.match(GqlParser.INTEGER);
	            this.state = 5131;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 5132;
	            this.unsignedDecimalInteger();
	            this.state = 5133;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalExactNumericType() {
	    let localctx = new DecimalExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1220, GqlParser.RULE_decimalExactNumericType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5137;
	        _la = this._input.LA(1);
	        if(!(_la===340 || _la===341)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5138;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 5139;
	        this.unsignedDecimalInteger();
	        this.state = 5142;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 5140;
	            this.match(GqlParser.COMMA);
	            this.state = 5141;
	            this.unsignedDecimalInteger();
	        }

	        this.state = 5144;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	approximateNumericType() {
	    let localctx = new ApproximateNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1222, GqlParser.RULE_approximateNumericType);
	    var _la = 0; // Token type
	    try {
	        this.state = 5163;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 358:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5146;
	            this.match(GqlParser.FLOAT16);
	            break;
	        case 359:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5147;
	            this.match(GqlParser.FLOAT32);
	            break;
	        case 360:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5148;
	            this.match(GqlParser.FLOAT64);
	            break;
	        case 361:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5149;
	            this.match(GqlParser.FLOAT128);
	            break;
	        case 362:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5150;
	            this.match(GqlParser.FLOAT256);
	            break;
	        case 357:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5151;
	            this.match(GqlParser.FLOAT);
	            this.state = 5152;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 5153;
	            this.unsignedDecimalInteger();
	            this.state = 5156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 5154;
	                this.match(GqlParser.COMMA);
	                this.state = 5155;
	                this.unsignedDecimalInteger();
	            }

	            this.state = 5158;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 277:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5160;
	            this.match(GqlParser.REAL);
	            break;
	        case 347:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5161;
	            this.match(GqlParser.DOUBLE);
	            this.state = 5162;
	            this.match(GqlParser.PRECISION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalType() {
	    let localctx = new TemporalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1224, GqlParser.RULE_temporalType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5165;
	        _la = this._input.LA(1);
	        if(!(((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & 23) !== 0) || _la===301 || _la===302)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphElementType() {
	    let localctx = new GraphElementTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1226, GqlParser.RULE_graphElementType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5167;
	        _la = this._input.LA(1);
	        if(!(((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & 51) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeName() {
	    let localctx = new ListValueTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1228, GqlParser.RULE_listValueTypeName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5169;
	        _la = this._input.LA(1);
	        if(!(_la===126 || _la===127)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapValueType() {
	    let localctx = new MapValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1230, GqlParser.RULE_mapValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5171;
	        this.match(GqlParser.MAP);
	        this.state = 5172;
	        this.match(GqlParser.LEFT_ANGLE_BRACKET);
	        this.state = 5173;
	        this.mapKeyType();
	        this.state = 5174;
	        this.match(GqlParser.COMMA);
	        this.state = 5175;
	        this.valueType(0);
	        this.state = 5176;
	        this.match(GqlParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapKeyType() {
	    let localctx = new MapKeyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1232, GqlParser.RULE_mapKeyType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5178;
	        this.predefinedType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueType() {
	    let localctx = new RecordValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1234, GqlParser.RULE_recordValueType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5180;
	        this.match(GqlParser.RECORD);
	        this.state = 5181;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 5183;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===9 || _la===462) {
	            this.state = 5182;
	            this.fieldTypeList();
	        }

	        this.state = 5185;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypeList() {
	    let localctx = new FieldTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1236, GqlParser.RULE_fieldTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5187;
	        this.fieldType();
	        this.state = 5192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 5188;
	            this.match(GqlParser.COMMA);
	            this.state = 5189;
	            this.fieldType();
	            this.state = 5194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldType() {
	    let localctx = new FieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1238, GqlParser.RULE_fieldType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5195;
	        this.identifier();
	        this.state = 5197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===393) {
	            this.state = 5196;
	            this.ofTypePrefix();
	        }

	        this.state = 5199;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterName() {
	    let localctx = new ParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1240, GqlParser.RULE_parameterName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5201;
	        this.match(GqlParser.AMPERSAND);
	        this.state = 5202;
	        this.separatedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1242, GqlParser.RULE_identifier);
	    try {
	        this.state = 5206;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5204;
	            this.regularIdentifier();
	            break;
	        case 8:
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5205;
	            this.delimitedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	separatedIdentifier() {
	    let localctx = new SeparatedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1244, GqlParser.RULE_separatedIdentifier);
	    try {
	        this.state = 5210;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5208;
	            this.extendedIdentifier();
	            break;
	        case 8:
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5209;
	            this.delimitedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	token() {
	    let localctx = new TokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1246, GqlParser.RULE_token);
	    try {
	        this.state = 5214;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	        case 39:
	        case 75:
	        case 89:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5212;
	            this.nonDelimiterToken();
	            break;
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 13:
	        case 18:
	        case 24:
	        case 40:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 65:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5213;
	            this.delimiterToken();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonDelimiterToken() {
	    let localctx = new NonDelimiterTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1248, GqlParser.RULE_nonDelimiterToken);
	    try {
	        this.state = 5222;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5216;
	            this.regularIdentifier();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5217;
	            this.parameterName();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5218;
	            this.match(GqlParser.KEY_WORD);
	            break;
	        case 39:
	        case 453:
	        case 454:
	        case 455:
	        case 459:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5219;
	            this.unsignedNumericLiteral();
	            break;
	        case 457:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5220;
	            this.byteStringLiteral();
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5221;
	            this.match(GqlParser.MULTISET_ALT_OPERATOR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonDelimitedIdentifier() {
	    let localctx = new NonDelimitedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1250, GqlParser.RULE_nonDelimitedIdentifier);
	    try {
	        this.state = 5226;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 462:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5224;
	            this.regularIdentifier();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5225;
	            this.extendedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularIdentifier() {
	    let localctx = new RegularIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1252, GqlParser.RULE_regularIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5228;
	        this.match(GqlParser.LETTER);
	        this.state = 5232;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,512,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5229;
	                this.match(GqlParser.GQL_LANGUAGE_CHAR); 
	            }
	            this.state = 5234;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,512,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendedIdentifier() {
	    let localctx = new ExtendedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1254, GqlParser.RULE_extendedIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5236; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5235;
	            this.match(GqlParser.GQL_LANGUAGE_CHAR);
	            this.state = 5238; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimiterToken() {
	    let localctx = new DelimiterTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1256, GqlParser.RULE_delimiterToken);
	    try {
	        this.state = 5277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5240;
	            this.match(GqlParser.GQL_SPECIAL_CHAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5241;
	            this.match(GqlParser.BRACKER_MINUS_RIGHT_ARROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5242;
	            this.match(GqlParser.BRACKET_TILDE_RIGHT_ARROW);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5243;
	            this.match(GqlParser.CONCATENATION_OPERATOR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5244;
	            this.match(GqlParser.DOUBLE_COLON);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5245;
	            this.match(GqlParser.DOUBLE_MINUS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5246;
	            this.match(GqlParser.DOUBLE_PERIOD);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5247;
	            this.match(GqlParser.GRATER_THEN_OPERATOR);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5248;
	            this.match(GqlParser.GREATER_THEN_OR_EQUALS);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5249;
	            this.match(GqlParser.LEFT_ARROW_MIUNUS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5250;
	            this.match(GqlParser.LEFT_ARROW_MINUS_RIGHT_BRACKET);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5251;
	            this.match(GqlParser.LEFT_ARROW_TILDE);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5252;
	            this.match(GqlParser.LEFT_ARROW_RIGHT_BRACKET);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5253;
	            this.match(GqlParser.LEFT_MINUS_RIGHT);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5254;
	            this.match(GqlParser.LEFT_MINUS_SLASH);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5255;
	            this.match(GqlParser.LEFT_TILDE_SLASH);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5256;
	            this.match(GqlParser.LESS_THEN);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 5257;
	            this.match(GqlParser.LESS_THEN_OR_EQUALS);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 5258;
	            this.match(GqlParser.MINUS_LEFT_BRACKET);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 5259;
	            this.match(GqlParser.MINUS_SLESH);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 5260;
	            this.match(GqlParser.NOT_EQUALS);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 5261;
	            this.match(GqlParser.RIGHT_ANGLE_BRACKET);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 5262;
	            this.match(GqlParser.RIGHT_BRACKET_MINUS);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 5263;
	            this.match(GqlParser.RIGHT_BRACKET_TILDE);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 5264;
	            this.match(GqlParser.SLASH_MINUS);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 5265;
	            this.match(GqlParser.SLASH_MINUS_RIGHT);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 5266;
	            this.match(GqlParser.SLASH_TILDE);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 5267;
	            this.match(GqlParser.SLASH_TILDE_RIGHT);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 5268;
	            this.match(GqlParser.TILDE_LEFT_BRACKET);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 5269;
	            this.match(GqlParser.TILDE_RIGHT_ARROW);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 5270;
	            this.match(GqlParser.TILDE_SLASH);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 5271;
	            this.characterStringLiteral();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 5272;
	            this.dateString();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 5273;
	            this.datetimeString();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 5274;
	            this.delimitedIdentifier();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 5275;
	            this.durationString();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 5276;
	            this.timeString();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedIdentifier() {
	    let localctx = new DelimitedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1258, GqlParser.RULE_delimitedIdentifier);
	    try {
	        this.state = 5281;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5279;
	            this.doubleQuotedCharacterSequence();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5280;
	            this.unbrokenAccentQuotedCharacterSequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	separator() {
	    let localctx = new SeparatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1260, GqlParser.RULE_separator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5285; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5285;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 13:
	            case 34:
	            case 44:
	                this.state = 5283;
	                this.comment();
	                break;
	            case 452:
	                this.state = 5284;
	                this.match(GqlParser.WHITESPACE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5287; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & 2149580801) !== 0) || _la===452);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1262, GqlParser.RULE_comment);
	    try {
	        this.state = 5291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5289;
	            this.simpleComment();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5290;
	            this.bracketedComment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleComment() {
	    let localctx = new SimpleCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1264, GqlParser.RULE_simpleComment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5293;
	        _la = this._input.LA(1);
	        if(!(_la===13 || _la===34)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 5294;
	            this.match(GqlParser.GQL_TERMINAL_CHAR);
	            this.state = 5299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5300;
	        this.match(GqlParser.NEW_LINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracketedComment() {
	    let localctx = new BracketedCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1266, GqlParser.RULE_bracketedComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5302;
	        this.match(GqlParser.BRACKETED_COMMENT_START);
	        this.state = 5303;
	        this.match(GqlParser.GQL_TERMINAL_CHAR);
	        this.state = 5304;
	        this.match(GqlParser.BRACKETED_CoMMENT_END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeSynonym() {
	    let localctx = new EdgeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1268, GqlParser.RULE_edgeSynonym);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5306;
	        _la = this._input.LA(1);
	        if(!(_la===120 || _la===121)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeSynonym() {
	    let localctx = new NodeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1270, GqlParser.RULE_nodeSynonym);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5308;
	        _la = this._input.LA(1);
	        if(!(_la===124 || _la===125)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GqlParser.EOF = antlr4.Token.EOF;
GqlParser.ON = 1;
GqlParser.GQL_TERMINAL_CHAR = 2;
GqlParser.GQL_LANGUAGE_CHAR = 3;
GqlParser.GQL_SPECIAL_CHAR = 4;
GqlParser.COMPARE_OPERATOR = 5;
GqlParser.SPACE = 6;
GqlParser.QUOTE = 7;
GqlParser.DOUBLE_QUOTE = 8;
GqlParser.GRAVE_ACCENT = 9;
GqlParser.REVERS_SOLIDUS = 10;
GqlParser.PLUS = 11;
GqlParser.MINUS = 12;
GqlParser.DOUBLE_MINUS = 13;
GqlParser.AMPERSAND = 14;
GqlParser.ASTERISK = 15;
GqlParser.CIRCUMFLEX = 16;
GqlParser.COLON = 17;
GqlParser.DOUBLE_COLON = 18;
GqlParser.COMMA = 19;
GqlParser.DOLLAR = 20;
GqlParser.EQUALS = 21;
GqlParser.EXCLAMATION = 22;
GqlParser.LEFT_ANGLE_BRACKET = 23;
GqlParser.RIGHT_ANGLE_BRACKET = 24;
GqlParser.LEFT_BRACE = 25;
GqlParser.RIGHT_BRACE = 26;
GqlParser.LEFT_BRACKET = 27;
GqlParser.RIGHT_BRACKET = 28;
GqlParser.LEFT_PAREN = 29;
GqlParser.RIGHT_PAREN = 30;
GqlParser.QUESTION_MARK = 31;
GqlParser.SEMICOLON = 32;
GqlParser.SOLIDUS = 33;
GqlParser.DOUBLE_SOLIDUS = 34;
GqlParser.TILDE = 35;
GqlParser.UNDERSCORE = 36;
GqlParser.VERTICAL_BAR = 37;
GqlParser.PERCENT = 38;
GqlParser.PERIOD = 39;
GqlParser.DOUBLE_PERIOD = 40;
GqlParser.CARRIAGE_RETURN = 41;
GqlParser.RETURN = 42;
GqlParser.NEW_LINE = 43;
GqlParser.BRACKETED_COMMENT_START = 44;
GqlParser.BRACKETED_CoMMENT_END = 45;
GqlParser.BRACKER_MINUS_RIGHT_ARROW = 46;
GqlParser.BRACKET_TILDE_RIGHT_ARROW = 47;
GqlParser.CONCATENATION_OPERATOR = 48;
GqlParser.GRATER_THEN_OPERATOR = 49;
GqlParser.GREATER_THEN_OR_EQUALS = 50;
GqlParser.LEFT_ARROW_MIUNUS = 51;
GqlParser.LEFT_ARROW_TILDE = 52;
GqlParser.LEFT_ARROW_MINUS_RIGHT_BRACKET = 53;
GqlParser.LEFT_ARROW_RIGHT_BRACKET = 54;
GqlParser.LEFT_MINUS_RIGHT = 55;
GqlParser.LEFT_MINUS_SLASH = 56;
GqlParser.LEFT_TILDE_SLASH = 57;
GqlParser.LESS_THEN = 58;
GqlParser.LESS_THEN_OR_EQUALS = 59;
GqlParser.MINUS_LEFT_BRACKET = 60;
GqlParser.MINUS_SLESH = 61;
GqlParser.MINUS_RIGHT_ARROW = 62;
GqlParser.NOT_EQUALS = 63;
GqlParser.RIGHT_BRACKET_MINUS = 64;
GqlParser.RIGHT_BRACKET_TILDE = 65;
GqlParser.RIGHT_BRACKET_RIGHT_ARROW = 66;
GqlParser.RIGHT_ARROW_TILDE = 67;
GqlParser.SLASH_MINUS = 68;
GqlParser.SLASH_MINUS_RIGHT = 69;
GqlParser.SLASH_TILDE = 70;
GqlParser.SLASH_TILDE_RIGHT = 71;
GqlParser.TILDE_LEFT_BRACKET = 72;
GqlParser.TILDE_RIGHT_ARROW = 73;
GqlParser.TILDE_SLASH = 74;
GqlParser.MULTISET_ALT_OPERATOR = 75;
GqlParser.ESCAPED_CHAR = 76;
GqlParser.ESCAPED_REVERSE_SOLIDUS = 77;
GqlParser.ESCAPED_QUOTE = 78;
GqlParser.ESCAPED_DOUBLE_QUOTE = 79;
GqlParser.ESCAPED_TAB = 80;
GqlParser.ESCAPED_BACKSPACE = 81;
GqlParser.ESCAPED_NEWLINE = 82;
GqlParser.ESCAPED_CARRIAGE_RETURN = 83;
GqlParser.ESCAPED_FORM_FEED = 84;
GqlParser.UNICODE_ESCAPED_VALUE = 85;
GqlParser.UNICODE4_ESCAPED_VALUE = 86;
GqlParser.UNICODE6_ESCAPED_VALUE = 87;
GqlParser.ESCAPED_GRAVE_ACCENT = 88;
GqlParser.KEY_WORD = 89;
GqlParser.RESERVED_WORD = 90;
GqlParser.NON_RESERVED_WORD = 91;
GqlParser.TRYGONOMETRIC_FUNCTION_NAME = 92;
GqlParser.SESSION = 93;
GqlParser.SET = 94;
GqlParser.SESSION_SET = 95;
GqlParser.SCHEMA = 96;
GqlParser.TIME_ZONE = 97;
GqlParser.PARAMETER = 98;
GqlParser.REMOVE = 99;
GqlParser.NOT = 100;
GqlParser.EXISTS = 101;
GqlParser.IF_EXISTS = 102;
GqlParser.IF_NOT_EXISTS = 103;
GqlParser.CLEAR = 104;
GqlParser.START_TRANSACTION = 105;
GqlParser.READ = 106;
GqlParser.READ_ONLY = 107;
GqlParser.READ_WRITE = 108;
GqlParser.ROLLBACK = 109;
GqlParser.COMMIT = 110;
GqlParser.TRUE = 111;
GqlParser.FALSE = 112;
GqlParser.UNKNOWN = 113;
GqlParser.DATE = 114;
GqlParser.TIME = 115;
GqlParser.DATETIME = 116;
GqlParser.TIMESTAMP = 117;
GqlParser.DURATION = 118;
GqlParser.NULL = 119;
GqlParser.EDGE = 120;
GqlParser.RELATIONSHIP = 121;
GqlParser.EDGES = 122;
GqlParser.RELATIONSHIPS = 123;
GqlParser.NODE = 124;
GqlParser.VERTEX = 125;
GqlParser.LIST = 126;
GqlParser.ARRAY = 127;
GqlParser.MAP = 128;
GqlParser.RECORD = 129;
GqlParser.MUTABLE = 130;
GqlParser.FINAL = 131;
GqlParser.CATALOG = 132;
GqlParser.PROCEDURE = 133;
GqlParser.QUERY = 134;
GqlParser.GRAPH = 135;
GqlParser.TABLE = 136;
GqlParser.DETACH = 137;
GqlParser.REPLACE = 138;
GqlParser.PROPERTY = 139;
GqlParser.TYPE = 140;
GqlParser.LABEL = 141;
GqlParser.LABELS = 142;
GqlParser.FUNCTION = 143;
GqlParser.THEN = 144;
GqlParser.ELSE = 145;
GqlParser.WHEN = 146;
GqlParser.INSERT = 147;
GqlParser.OPTIONAL = 148;
GqlParser.MERGE = 149;
GqlParser.OTHERWISE = 150;
GqlParser.UNION = 151;
GqlParser.EXCEPT = 152;
GqlParser.INTERSECT = 153;
GqlParser.COST = 154;
GqlParser.DEFAULT = 155;
GqlParser.PROFILE = 156;
GqlParser.EXPLAIN = 157;
GqlParser.PATH = 158;
GqlParser.WALK = 159;
GqlParser.TRAIL = 160;
GqlParser.SIMPLE = 161;
GqlParser.ACYCLIC = 162;
GqlParser.BOOL = 163;
GqlParser.BOOLEAN = 164;
GqlParser.STRING = 165;
GqlParser.VARCHAR = 166;
GqlParser.BYTES = 167;
GqlParser.BINARY = 168;
GqlParser.VARBINARY = 169;
GqlParser.ANY = 170;
GqlParser.NOTHING = 171;
GqlParser.INT = 172;
GqlParser.INT8 = 173;
GqlParser.INT16 = 174;
GqlParser.INT32 = 175;
GqlParser.INT64 = 176;
GqlParser.INT128 = 177;
GqlParser.INT256 = 178;
GqlParser.SMALLINT = 179;
GqlParser.BIGINT = 180;
GqlParser.SIGNED = 181;
GqlParser.DESTINATION = 182;
GqlParser.SOURCE = 183;
GqlParser.DIRECTED = 184;
GqlParser.UNDIRECTED = 185;
GqlParser.CONNECTING = 186;
GqlParser.LABELED = 187;
GqlParser.NORMALIZED = 188;
GqlParser.ALL_DIFFERENT = 189;
GqlParser.SAME = 190;
GqlParser.LEADING = 191;
GqlParser.TRAILING = 192;
GqlParser.BOTH = 193;
GqlParser.MULTISET = 194;
GqlParser.ALL = 195;
GqlParser.DISTINCT = 196;
GqlParser.ORDERED = 197;
GqlParser.UNIT = 198;
GqlParser.VALUE = 199;
GqlParser.NULLIF = 200;
GqlParser.COALESCE = 201;
GqlParser.CASE = 202;
GqlParser.END = 203;
GqlParser.CAST = 204;
GqlParser.ELEMENT_ID = 205;
GqlParser.BINDING = 206;
GqlParser.CLASS_ORIGIN = 207;
GqlParser.COMMAND_FUNCTION = 208;
GqlParser.COMMAND_FUNCTION_CODE = 209;
GqlParser.CONDITION_NUMBER = 210;
GqlParser.FIRST = 211;
GqlParser.GRAPHS = 212;
GqlParser.GROUPS = 213;
GqlParser.INDEX = 214;
GqlParser.LAST = 215;
GqlParser.MESSAGE_TEXT = 216;
GqlParser.MMORE = 217;
GqlParser.NFC = 218;
GqlParser.NFD = 219;
GqlParser.NFKC = 220;
GqlParser.NFKD = 221;
GqlParser.NODES = 222;
GqlParser.NUMBER = 223;
GqlParser.ONLY = 224;
GqlParser.ORDINALITY = 225;
GqlParser.PATTERN = 226;
GqlParser.PATTERNS = 227;
GqlParser.PROPERTIES = 228;
GqlParser.RETURNED_GQLSTATUS = 229;
GqlParser.ZONE = 230;
GqlParser.WRITE = 231;
GqlParser.VERTICES = 232;
GqlParser.TYPES = 233;
GqlParser.TRANSACTION = 234;
GqlParser.TIES = 235;
GqlParser.TABLES = 236;
GqlParser.SUBCLASS_ORIGIN = 237;
GqlParser.SHORTEST = 238;
GqlParser.ZERO = 239;
GqlParser.YIELD = 240;
GqlParser.XOR = 241;
GqlParser.WITHOUT = 242;
GqlParser.WITH = 243;
GqlParser.WHERE = 244;
GqlParser.VALUES = 245;
GqlParser.USE = 246;
GqlParser.UPPER = 247;
GqlParser.UNWIND = 248;
GqlParser.UNSIGNED = 249;
GqlParser.UNNEST = 250;
GqlParser.UNIQUE = 251;
GqlParser.UNIT_TABLE = 252;
GqlParser.UNIT_BINDING_TABLE = 253;
GqlParser.TRUNCATE = 254;
GqlParser.TRIM = 255;
GqlParser.REGEX = 256;
GqlParser.TRANSLATE_REGEX = 257;
GqlParser.SUM = 258;
GqlParser.SUBSTRING = 259;
GqlParser.SUBSTRING_REGEX = 260;
GqlParser.START = 261;
GqlParser.STARTS = 262;
GqlParser.SINGLE = 263;
GqlParser.SSKIP = 264;
GqlParser.SELECT = 265;
GqlParser.SCHEMAS = 266;
GqlParser.SCHEMATA = 267;
GqlParser.SCALAR = 268;
GqlParser.RIGHT = 269;
GqlParser.REVOKE = 270;
GqlParser.RESULT = 271;
GqlParser.RESET = 272;
GqlParser.REQUIRE = 273;
GqlParser.RENAME = 274;
GqlParser.REFERENCE = 275;
GqlParser.RECORDS = 276;
GqlParser.REAL = 277;
GqlParser.QUERIES = 278;
GqlParser.PROJECT = 279;
GqlParser.PRODUCT = 280;
GqlParser.PROCEDURES = 281;
GqlParser.PRECISION = 282;
GqlParser.POSITION_REGEX = 283;
GqlParser.PARTITION = 284;
GqlParser.PATHS = 285;
GqlParser.ORDER = 286;
GqlParser.OFFSET = 287;
GqlParser.OCCURRENCES_REGEX = 288;
GqlParser.NUMERIC = 289;
GqlParser.NULLS = 290;
GqlParser.NORMALIZE = 291;
GqlParser.NEW = 292;
GqlParser.MULTIPLE = 293;
GqlParser.MULTI = 294;
GqlParser.MIN = 295;
GqlParser.MAX = 296;
GqlParser.MATCH = 297;
GqlParser.MANDATORY = 298;
GqlParser.LOWER = 299;
GqlParser.LOCALTIMESTAMP = 300;
GqlParser.LOCALTIME = 301;
GqlParser.LOCALDATETIME = 302;
GqlParser.LIMIT = 303;
GqlParser.LIKE = 304;
GqlParser.LIKE_REGEX = 305;
GqlParser.LET = 306;
GqlParser.LEFT = 307;
GqlParser.KEEP = 308;
GqlParser.IN = 309;
GqlParser.ADD = 310;
GqlParser.AGGREGATE = 311;
GqlParser.ALIAS = 312;
GqlParser.AND = 313;
GqlParser.ASC = 314;
GqlParser.ASCENDING = 315;
GqlParser.AVG = 316;
GqlParser.BY = 317;
GqlParser.CALL = 318;
GqlParser.CEILING = 319;
GqlParser.CHARACTER = 320;
GqlParser.CLONE = 321;
GqlParser.CLOSE = 322;
GqlParser.COLLECT = 323;
GqlParser.CONSTRAINT = 324;
GqlParser.CONSTANT = 325;
GqlParser.CONSTRUCT = 326;
GqlParser.COPY = 327;
GqlParser.COUNT = 328;
GqlParser.CURRENT = 329;
GqlParser.CURRENT_DATE = 330;
GqlParser.CURRENT_GRAPH = 331;
GqlParser.CURRENT_PROPERTY_GRAPH = 332;
GqlParser.CURRENT_ROLE = 333;
GqlParser.CURRENT_SCHEMA = 334;
GqlParser.CURRENT_TIME = 335;
GqlParser.CURRENT_TIMESTAMP = 336;
GqlParser.CURRENT_USER = 337;
GqlParser.CREATE = 338;
GqlParser.DATA = 339;
GqlParser.DEC = 340;
GqlParser.DECIMAL = 341;
GqlParser.DELETE = 342;
GqlParser.DESC = 343;
GqlParser.DESCENDING = 344;
GqlParser.DIRECTORIES = 345;
GqlParser.DIRECTORY = 346;
GqlParser.DOUBLE = 347;
GqlParser.DROP = 348;
GqlParser.ENDS = 349;
GqlParser.EMPTY = 350;
GqlParser.EMPTY_BINDING_TABLE = 351;
GqlParser.EMPTY_GRAPH = 352;
GqlParser.EMPTY_PROPERTY_GRAPH = 353;
GqlParser.EMPTY_TABLE = 354;
GqlParser.EXISTING = 355;
GqlParser.FILTER = 356;
GqlParser.FLOAT = 357;
GqlParser.FLOAT16 = 358;
GqlParser.FLOAT32 = 359;
GqlParser.FLOAT64 = 360;
GqlParser.FLOAT128 = 361;
GqlParser.FLOAT256 = 362;
GqlParser.FOR = 363;
GqlParser.FROM = 364;
GqlParser.FUNCTIONS = 365;
GqlParser.GQLSTATUS = 366;
GqlParser.GRANT = 367;
GqlParser.GROUP = 368;
GqlParser.HAVING = 369;
GqlParser.HOME = 370;
GqlParser.HOME_GRAPH = 371;
GqlParser.HOME_PROPERTY_GRAPH = 372;
GqlParser.HOME_SCHEMA = 373;
GqlParser.INTEGER = 374;
GqlParser.INTEGER8 = 375;
GqlParser.INTEGER16 = 376;
GqlParser.INTEGER32 = 377;
GqlParser.INTEGER64 = 378;
GqlParser.INTEGER128 = 379;
GqlParser.INTEGER256 = 380;
GqlParser.UINT = 381;
GqlParser.UINT8 = 382;
GqlParser.UINT16 = 383;
GqlParser.UINT32 = 384;
GqlParser.UINT64 = 385;
GqlParser.UINT128 = 386;
GqlParser.UINT256 = 387;
GqlParser.AT = 388;
GqlParser.AS = 389;
GqlParser.DO = 390;
GqlParser.IS = 391;
GqlParser.IF = 392;
GqlParser.OF = 393;
GqlParser.OR = 394;
GqlParser.TO = 395;
GqlParser.PATH_MODE = 396;
GqlParser.BOOL_TYPE = 397;
GqlParser.STRING_TYPE = 398;
GqlParser.AS_OR_EQUALS = 399;
GqlParser.TRUTH_VALUE = 400;
GqlParser.TRIM_SPEC = 401;
GqlParser.LENGTH = 402;
GqlParser.BYTE_LENGTH = 403;
GqlParser.OCTET_LENGTH = 404;
GqlParser.CHARACTER_LENGTH = 405;
GqlParser.ABS = 406;
GqlParser.MOD = 407;
GqlParser.LOG10 = 408;
GqlParser.LOG = 409;
GqlParser.LN = 410;
GqlParser.EXP = 411;
GqlParser.POWER = 412;
GqlParser.SQRT = 413;
GqlParser.FLOOR = 414;
GqlParser.CEIL = 415;
GqlParser.SIN = 416;
GqlParser.COS = 417;
GqlParser.TAN = 418;
GqlParser.COT = 419;
GqlParser.SINH = 420;
GqlParser.COSH = 421;
GqlParser.TANH = 422;
GqlParser.COTH = 423;
GqlParser.ASIN = 424;
GqlParser.ACOS = 425;
GqlParser.ATAN = 426;
GqlParser.ACOT = 427;
GqlParser.DEGREES = 428;
GqlParser.RADIANS = 429;
GqlParser.YEAR = 430;
GqlParser.MONTH = 431;
GqlParser.DAY = 432;
GqlParser.HOUR = 433;
GqlParser.MINUTE = 434;
GqlParser.SECOND = 435;
GqlParser.SIGN = 436;
GqlParser.IN_DEGREE = 437;
GqlParser.OUT_DEGREE = 438;
GqlParser.ST_DEV = 439;
GqlParser.ST_DEV_P = 440;
GqlParser.PERCENTILE_CONT = 441;
GqlParser.PERCENTILE_DIST = 442;
GqlParser.L_TRIM = 443;
GqlParser.R_TRIM = 444;
GqlParser.START_NODE = 445;
GqlParser.END_NODE = 446;
GqlParser.TAIL = 447;
GqlParser.TO_LOWER = 448;
GqlParser.TO_UPPER = 449;
GqlParser.NORMAL_FORM = 450;
GqlParser.TAB = 451;
GqlParser.WHITESPACE = 452;
GqlParser.START2 = 453;
GqlParser.START8 = 454;
GqlParser.START16 = 455;
GqlParser.ESEPARATOR = 456;
GqlParser.BYTE_STRING_START = 457;
GqlParser.DIGIT16 = 458;
GqlParser.DIGIT10 = 459;
GqlParser.DIGIT8 = 460;
GqlParser.DIGIT2 = 461;
GqlParser.LETTER = 462;

GqlParser.RULE_gqlParser = 0;
GqlParser.RULE_requestParameterSet = 1;
GqlParser.RULE_gqlProgram = 2;
GqlParser.RULE_mainActivity = 3;
GqlParser.RULE_sessionActivity = 4;
GqlParser.RULE_sessionParameterCommand = 5;
GqlParser.RULE_transactionActivity = 6;
GqlParser.RULE_preamble = 7;
GqlParser.RULE_preambleOption = 8;
GqlParser.RULE_preambleOptionIdentifier = 9;
GqlParser.RULE_sessionSetCommand = 10;
GqlParser.RULE_sessionSetSchemaClause = 11;
GqlParser.RULE_sessionSetGraphClause = 12;
GqlParser.RULE_sessionSetTimeZoneClause = 13;
GqlParser.RULE_setTimeZoneValue = 14;
GqlParser.RULE_sessionSetParameterClause = 15;
GqlParser.RULE_sessionParameterFlag = 16;
GqlParser.RULE_sessionParameter = 17;
GqlParser.RULE_sessionRemoveCommand = 18;
GqlParser.RULE_sessionClearCommand = 19;
GqlParser.RULE_sessionCloseCommand = 20;
GqlParser.RULE_startTransactionCommand = 21;
GqlParser.RULE_endTransactionCommand = 22;
GqlParser.RULE_transactionCharacteristics = 23;
GqlParser.RULE_transactionMode = 24;
GqlParser.RULE_transactionAccessMode = 25;
GqlParser.RULE_implementationDefinedAccessMode = 26;
GqlParser.RULE_rollbackCommand = 27;
GqlParser.RULE_commitCommand = 28;
GqlParser.RULE_nestedProcedureSpecification = 29;
GqlParser.RULE_procedureSpecification = 30;
GqlParser.RULE_nestedCatalogModifyingProcedureSpecification = 31;
GqlParser.RULE_catalogModifyingProcedureSpecification = 32;
GqlParser.RULE_nestedDataModifyingProcedureSpecification = 33;
GqlParser.RULE_dataModifyingProcedureSpecification = 34;
GqlParser.RULE_nestedQuerySpecification = 35;
GqlParser.RULE_querySpecification = 36;
GqlParser.RULE_nestedFunctionSpecification = 37;
GqlParser.RULE_functionSpecification = 38;
GqlParser.RULE_procedureBody = 39;
GqlParser.RULE_staticVariableDefinitionBlock = 40;
GqlParser.RULE_bindingVariableDefinitionBlock = 41;
GqlParser.RULE_statementBlock = 42;
GqlParser.RULE_thenStatement = 43;
GqlParser.RULE_staticVariableDefinition = 44;
GqlParser.RULE_procedureVariableDefinition = 45;
GqlParser.RULE_procedureInitializer = 46;
GqlParser.RULE_queryVariableDefinition = 47;
GqlParser.RULE_queryInitializer = 48;
GqlParser.RULE_functionVariableDefinition = 49;
GqlParser.RULE_functionInitializer = 50;
GqlParser.RULE_compactVariableDeclarationList = 51;
GqlParser.RULE_compactVariableDeclaration = 52;
GqlParser.RULE_bindingVariableDeclaration = 53;
GqlParser.RULE_compactVariableDefinitionList = 54;
GqlParser.RULE_compactVariableDefinition = 55;
GqlParser.RULE_compactValueVariableDefinitionList = 56;
GqlParser.RULE_compactValueVariableDefinition = 57;
GqlParser.RULE_bindingVariableDefinitionList = 58;
GqlParser.RULE_bindingVariableDefinition = 59;
GqlParser.RULE_parameterDefinition = 60;
GqlParser.RULE_graphVariableDeclaration = 61;
GqlParser.RULE_graphVariableDefinition = 62;
GqlParser.RULE_graphParameterDefinition = 63;
GqlParser.RULE_graphVariable = 64;
GqlParser.RULE_graphInitializer = 65;
GqlParser.RULE_bindingTableVariableDeclaration = 66;
GqlParser.RULE_bindingTableVariableDefinition = 67;
GqlParser.RULE_bindingTableParameterDefinition = 68;
GqlParser.RULE_bindingTableVariable = 69;
GqlParser.RULE_bindingTableInitializer = 70;
GqlParser.RULE_valueVariableDeclaration = 71;
GqlParser.RULE_valueVariableDefinition = 72;
GqlParser.RULE_valueParameterDefinition = 73;
GqlParser.RULE_valueInitializer = 74;
GqlParser.RULE_primaryResultObjectExpression = 75;
GqlParser.RULE_graphExpression = 76;
GqlParser.RULE_copyGraphExpression = 77;
GqlParser.RULE_graphTypeExpression = 78;
GqlParser.RULE_asGraphType = 79;
GqlParser.RULE_copyGraphTypeExpression = 80;
GqlParser.RULE_likeGraphExpression = 81;
GqlParser.RULE_ofGraphType = 82;
GqlParser.RULE_likeGraphExpressionShorthand = 83;
GqlParser.RULE_ofBindingTableType = 84;
GqlParser.RULE_ofTypePrefix = 85;
GqlParser.RULE_bindingTableTypeExpression = 86;
GqlParser.RULE_bindingTableType = 87;
GqlParser.RULE_likeBindingTableType = 88;
GqlParser.RULE_likeBindingTableShorthand = 89;
GqlParser.RULE_statement = 90;
GqlParser.RULE_dataModifyingStatement = 91;
GqlParser.RULE_queryStatement = 92;
GqlParser.RULE_callProcedureStatement = 93;
GqlParser.RULE_statementMode = 94;
GqlParser.RULE_simpleCatalogModifyingStatement = 95;
GqlParser.RULE_primitiveCatalogModifyingStatement = 96;
GqlParser.RULE_simpleDataAccessingStatement = 97;
GqlParser.RULE_simpleDataModifyingStatement = 98;
GqlParser.RULE_primitiveDataModifyingStatement = 99;
GqlParser.RULE_simpleQueryStatement = 100;
GqlParser.RULE_simpleDataReadingStatement = 101;
GqlParser.RULE_simpleDataTransformingStatement = 102;
GqlParser.RULE_primitiveDataTransformingStatement = 103;
GqlParser.RULE_linearCatalogModifyingStatement = 104;
GqlParser.RULE_createSchemaStatement = 105;
GqlParser.RULE_dropSchemaStatement = 106;
GqlParser.RULE_createGraphStatement = 107;
GqlParser.RULE_graphSource = 108;
GqlParser.RULE_graphSpecification = 109;
GqlParser.RULE_nestedGraphQuerySpecification = 110;
GqlParser.RULE_nestedAmbientDataModifyingProcedureSpecification = 111;
GqlParser.RULE_dropGraphStatement = 112;
GqlParser.RULE_createGraphTypeStatement = 113;
GqlParser.RULE_graphTypeInitializer = 114;
GqlParser.RULE_graphTypeSpecification = 115;
GqlParser.RULE_nestedGraphTypeSpecification = 116;
GqlParser.RULE_graphTypeSpecificationBody = 117;
GqlParser.RULE_elementTypeDefinitionList = 118;
GqlParser.RULE_elementTypeDefinition = 119;
GqlParser.RULE_nodeTypeDefinition = 120;
GqlParser.RULE_nodeTypeFiller = 121;
GqlParser.RULE_nodeTypeLabelSetDefinition = 122;
GqlParser.RULE_nodeTypePropertyTypeSetDefinition = 123;
GqlParser.RULE_edgeTypeDefinition = 124;
GqlParser.RULE_edgeTypeFiller = 125;
GqlParser.RULE_edgeTypeLabelSetDefinition = 126;
GqlParser.RULE_edgeTypePropertyTypeSetDefinition = 127;
GqlParser.RULE_fullEdgeTypePattern = 128;
GqlParser.RULE_fullEdgeTypePatternPointingRight = 129;
GqlParser.RULE_fullEdgeTypePatternPointingLeft = 130;
GqlParser.RULE_fullEdgeTypePatternAnyDirection = 131;
GqlParser.RULE_arcTypePointingRight = 132;
GqlParser.RULE_arcTypePointingLeft = 133;
GqlParser.RULE_arcTypeAnyDirection = 134;
GqlParser.RULE_arcTypeFiller = 135;
GqlParser.RULE_abbreviatedEdgeTypePattern = 136;
GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight = 137;
GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft = 138;
GqlParser.RULE_abbreviatedEdgeTypePatternAnyDirection = 139;
GqlParser.RULE_sourceNodeTypeReference = 140;
GqlParser.RULE_destinationNodeTypeReference = 141;
GqlParser.RULE_edgeKind = 142;
GqlParser.RULE_endpointDefinition = 143;
GqlParser.RULE_endpointPairDefinition = 144;
GqlParser.RULE_endpointPairDefinitionPointingRight = 145;
GqlParser.RULE_endpointPairDefinitionPointingLeft = 146;
GqlParser.RULE_endpointPairDefinitionAnyDirection = 147;
GqlParser.RULE_connectorPointingRight = 148;
GqlParser.RULE_connectorAnyDirection = 149;
GqlParser.RULE_labelSetDefinition = 150;
GqlParser.RULE_propertyTypeSetDefinition = 151;
GqlParser.RULE_propertyTypeDefinitionList = 152;
GqlParser.RULE_propertyTypeDefinition = 153;
GqlParser.RULE_dropGraphTypeStatement = 154;
GqlParser.RULE_createProcedureStatement = 155;
GqlParser.RULE_dropProcedureStatement = 156;
GqlParser.RULE_createQueryStatement = 157;
GqlParser.RULE_dropQueryStatement = 158;
GqlParser.RULE_createFunctionStatement = 159;
GqlParser.RULE_dropFunctionStatement = 160;
GqlParser.RULE_callCatalogModifyingProcedureStatement = 161;
GqlParser.RULE_linearDataModifyingStatement = 162;
GqlParser.RULE_focusedLinearDataModifyingStatement = 163;
GqlParser.RULE_focusedLinearDataModifyingStatementBody = 164;
GqlParser.RULE_ambientLinearDataModifyingStatement = 165;
GqlParser.RULE_conditionalDataModifyingStatement = 166;
GqlParser.RULE_whenThenLinearDataModifyingStatementBranch = 167;
GqlParser.RULE_elseLinearDataModifyingStatementBranch = 168;
GqlParser.RULE_whenClause = 169;
GqlParser.RULE_doStatement = 170;
GqlParser.RULE_insertStatement = 171;
GqlParser.RULE_mergeStatement = 172;
GqlParser.RULE_setStatement = 173;
GqlParser.RULE_setItemList = 174;
GqlParser.RULE_setItem = 175;
GqlParser.RULE_setPropertyItem = 176;
GqlParser.RULE_setAllPropertiesItem = 177;
GqlParser.RULE_setLabelItem = 178;
GqlParser.RULE_labelSetExpression = 179;
GqlParser.RULE_removeStatement = 180;
GqlParser.RULE_removeItemList = 181;
GqlParser.RULE_removeItem = 182;
GqlParser.RULE_removePropertyItem = 183;
GqlParser.RULE_removeLabelItem = 184;
GqlParser.RULE_deleteStatement = 185;
GqlParser.RULE_deleteItemList = 186;
GqlParser.RULE_compositeQueryStatement = 187;
GqlParser.RULE_conditionalQueryStatement = 188;
GqlParser.RULE_whenThenLinearQueryBranch = 189;
GqlParser.RULE_elseLinearQueryBranch = 190;
GqlParser.RULE_compositeQueryExpression = 191;
GqlParser.RULE_queryConjunction = 192;
GqlParser.RULE_setOperator = 193;
GqlParser.RULE_linearQueryStatement = 194;
GqlParser.RULE_ambientLinearQueryStatement = 195;
GqlParser.RULE_focusedLinearQueryStatement = 196;
GqlParser.RULE_focusedLinearQueryStatementBody = 197;
GqlParser.RULE_simpleLinearQueryStatement = 198;
GqlParser.RULE_matchStatement = 199;
GqlParser.RULE_callQueryStatement = 200;
GqlParser.RULE_mandatoryStatement = 201;
GqlParser.RULE_optionalStatement = 202;
GqlParser.RULE_filterStatement = 203;
GqlParser.RULE_letStatement = 204;
GqlParser.RULE_aggregateStatement = 205;
GqlParser.RULE_forStatement = 206;
GqlParser.RULE_forItemList = 207;
GqlParser.RULE_forItem = 208;
GqlParser.RULE_forItemAlias = 209;
GqlParser.RULE_forOrdinalityOrIndex = 210;
GqlParser.RULE_orderByAndPageStatement = 211;
GqlParser.RULE_callFunctionStatement = 212;
GqlParser.RULE_primitiveResultStatement = 213;
GqlParser.RULE_returnStatement = 214;
GqlParser.RULE_returnStatementBody = 215;
GqlParser.RULE_returnItemList = 216;
GqlParser.RULE_returnItem = 217;
GqlParser.RULE_returnItemAlias = 218;
GqlParser.RULE_selectStatement = 219;
GqlParser.RULE_selectItemList = 220;
GqlParser.RULE_selectItem = 221;
GqlParser.RULE_selectItemAlias = 222;
GqlParser.RULE_havingClause = 223;
GqlParser.RULE_selectStatementBody = 224;
GqlParser.RULE_selectGraphMatchList = 225;
GqlParser.RULE_selectGraphMatch = 226;
GqlParser.RULE_selectQuerySpecification = 227;
GqlParser.RULE_projectStatement = 228;
GqlParser.RULE_fromGraphClause = 229;
GqlParser.RULE_useGraphClause = 230;
GqlParser.RULE_atSchemaClause = 231;
GqlParser.RULE_ofTypeSignature = 232;
GqlParser.RULE_typeSignature = 233;
GqlParser.RULE_parenthesizedFormalParameterList = 234;
GqlParser.RULE_formalParameterList = 235;
GqlParser.RULE_mandatoryFormalParameterList = 236;
GqlParser.RULE_optionalFormalParameterList = 237;
GqlParser.RULE_formalParameterDeclarationList = 238;
GqlParser.RULE_formalParameterDeclaration = 239;
GqlParser.RULE_formalParameterDefinitionList = 240;
GqlParser.RULE_formalParameterDefinition = 241;
GqlParser.RULE_parameterCardinality = 242;
GqlParser.RULE_procedureResultType = 243;
GqlParser.RULE_graphPattern = 244;
GqlParser.RULE_pathPatternList = 245;
GqlParser.RULE_pathPattern = 246;
GqlParser.RULE_keepClause = 247;
GqlParser.RULE_graphPatternWhereClause = 248;
GqlParser.RULE_pathPatternExpression = 249;
GqlParser.RULE_pathMultisetAlternation = 250;
GqlParser.RULE_pathPatternUnion = 251;
GqlParser.RULE_pathTerm = 252;
GqlParser.RULE_pathFactor = 253;
GqlParser.RULE_quantifiedPathPrimary = 254;
GqlParser.RULE_questionedPathPrimary = 255;
GqlParser.RULE_pathPrimary = 256;
GqlParser.RULE_elementPattern = 257;
GqlParser.RULE_nodePattern = 258;
GqlParser.RULE_elementPatternFiller = 259;
GqlParser.RULE_isLabelExpression = 260;
GqlParser.RULE_elementPatternPredicate = 261;
GqlParser.RULE_elementPatternWhereClause = 262;
GqlParser.RULE_elementPropertySpecification = 263;
GqlParser.RULE_propertyKeyValuePairList = 264;
GqlParser.RULE_propertyKeyValuePair = 265;
GqlParser.RULE_elementPatternCostClause = 266;
GqlParser.RULE_costClause = 267;
GqlParser.RULE_edgePattern = 268;
GqlParser.RULE_fullEdgePattern = 269;
GqlParser.RULE_fullEdgePointingLeft = 270;
GqlParser.RULE_fullEdgeUndirected = 271;
GqlParser.RULE_fullEdgePointingRight = 272;
GqlParser.RULE_fullEdgeLeftOrUndirected = 273;
GqlParser.RULE_fullEdgeUndirectedOrRight = 274;
GqlParser.RULE_fullEdgeLeftOrRight = 275;
GqlParser.RULE_fullEdgeAnyDirection = 276;
GqlParser.RULE_abbreviatedEdgePattern = 277;
GqlParser.RULE_graphPatternQuantifier = 278;
GqlParser.RULE_fixedQuantifier = 279;
GqlParser.RULE_generalQuantifier = 280;
GqlParser.RULE_parenthesizedPathPatternExpression = 281;
GqlParser.RULE_subpathVariableDeclaration = 282;
GqlParser.RULE_parenthesizedPathPatternWhereClause = 283;
GqlParser.RULE_pathPatternPrefix = 284;
GqlParser.RULE_pathModePrefix = 285;
GqlParser.RULE_pathSearchPrefix = 286;
GqlParser.RULE_allPathSearch = 287;
GqlParser.RULE_anyPathSearch = 288;
GqlParser.RULE_shortestPathSearch = 289;
GqlParser.RULE_allShortestPathSearch = 290;
GqlParser.RULE_anyShortestPathSearch = 291;
GqlParser.RULE_countedShortestPathSearch = 292;
GqlParser.RULE_countedShortestGroupSearch = 293;
GqlParser.RULE_simpleGraphPattern = 294;
GqlParser.RULE_simplePathPatternList = 295;
GqlParser.RULE_simplePathPattern = 296;
GqlParser.RULE_labelExpression = 297;
GqlParser.RULE_labelTerm = 298;
GqlParser.RULE_labelFactor = 299;
GqlParser.RULE_parenthesizedLabelExpression = 300;
GqlParser.RULE_simplifiedPathPatternExpression = 301;
GqlParser.RULE_simplifiedDefaultingLeft = 302;
GqlParser.RULE_simplifiedDefaultingUndirected = 303;
GqlParser.RULE_simplifiedDefaultingRight = 304;
GqlParser.RULE_simplifiedDefaultingLeftOrUndirected = 305;
GqlParser.RULE_simplifiedDefaultingUndirectedOrRight = 306;
GqlParser.RULE_simplifiedDefaultingLeftOrRight = 307;
GqlParser.RULE_simplifiedDefaultingAnyDirection = 308;
GqlParser.RULE_simplifiedContents = 309;
GqlParser.RULE_simplifiedPathUnion = 310;
GqlParser.RULE_simplifiedMultisetAlternation = 311;
GqlParser.RULE_simplifiedTerm = 312;
GqlParser.RULE_simplifiedFactorLow = 313;
GqlParser.RULE_simplifiedFactorHigh = 314;
GqlParser.RULE_simplifiedQuantified = 315;
GqlParser.RULE_simplifiedQuestioned = 316;
GqlParser.RULE_simplifiedTertiary = 317;
GqlParser.RULE_simplifiedDirectionOverride = 318;
GqlParser.RULE_simplifiedOverrideLeft = 319;
GqlParser.RULE_simplifiedOverrideUndirected = 320;
GqlParser.RULE_simplifiedOverrideRight = 321;
GqlParser.RULE_simplifiedOverrideLeftOrUndirected = 322;
GqlParser.RULE_simplifiedOverrideUndirectedOrRight = 323;
GqlParser.RULE_simplifiedOverrideLeftOrRight = 324;
GqlParser.RULE_simplifiedOverrideAnyDirection = 325;
GqlParser.RULE_simplifiedSecondary = 326;
GqlParser.RULE_simplifiedNegation = 327;
GqlParser.RULE_simplifiedPrimary = 328;
GqlParser.RULE_whereClause = 329;
GqlParser.RULE_procedureCall = 330;
GqlParser.RULE_namedProcedureCall = 331;
GqlParser.RULE_procedureArgumentList = 332;
GqlParser.RULE_procedureArgument = 333;
GqlParser.RULE_yieldClause = 334;
GqlParser.RULE_yieldItemList = 335;
GqlParser.RULE_yieldItem = 336;
GqlParser.RULE_groupByClause = 337;
GqlParser.RULE_groupingElementList = 338;
GqlParser.RULE_emptyGroupingSet = 339;
GqlParser.RULE_orderByClause = 340;
GqlParser.RULE_aggregateFunction = 341;
GqlParser.RULE_generalSetFunction = 342;
GqlParser.RULE_binarySetFunction = 343;
GqlParser.RULE_generalSetFunctionType = 344;
GqlParser.RULE_setQuantifier = 345;
GqlParser.RULE_binarySetFunctionType = 346;
GqlParser.RULE_dependentValueExpression = 347;
GqlParser.RULE_independentValueExpression = 348;
GqlParser.RULE_sortSpecificationList = 349;
GqlParser.RULE_sortSpecification = 350;
GqlParser.RULE_nullOrdering = 351;
GqlParser.RULE_limitClause = 352;
GqlParser.RULE_offsetClause = 353;
GqlParser.RULE_schemaReference = 354;
GqlParser.RULE_catalogSchemaParentAndName = 355;
GqlParser.RULE_graphReference = 356;
GqlParser.RULE_graphResolutionExpression = 357;
GqlParser.RULE_catalogGraphReference = 358;
GqlParser.RULE_catalogGraphParentAndName = 359;
GqlParser.RULE_graphParentSpecification = 360;
GqlParser.RULE_localGraphReference = 361;
GqlParser.RULE_graphTypeReference = 362;
GqlParser.RULE_graphTypeResolutionExpression = 363;
GqlParser.RULE_catalogGraphTypeReference = 364;
GqlParser.RULE_catalogGraphTypeParentAndName = 365;
GqlParser.RULE_graphTypeParentSpecification = 366;
GqlParser.RULE_qualifiedGraphTypeName = 367;
GqlParser.RULE_bindingTableReference = 368;
GqlParser.RULE_bindingTableResolutionExpression = 369;
GqlParser.RULE_catalogBindingTableReference = 370;
GqlParser.RULE_catalogBindingTableParentAndName = 371;
GqlParser.RULE_bindingTableParentSpecification = 372;
GqlParser.RULE_localBindingTableReference = 373;
GqlParser.RULE_qualifiedBindingTableName = 374;
GqlParser.RULE_procedureReference = 375;
GqlParser.RULE_catalogProcedureReference = 376;
GqlParser.RULE_catalogProcedureParentAndName = 377;
GqlParser.RULE_procedureParentSpecification = 378;
GqlParser.RULE_localProcedureReference = 379;
GqlParser.RULE_qualifiedProcedureName = 380;
GqlParser.RULE_queryResolutionExpression = 381;
GqlParser.RULE_catalogQueryReference = 382;
GqlParser.RULE_catalogQueryParentAndName = 383;
GqlParser.RULE_queryParentSpecification = 384;
GqlParser.RULE_qualifiedQueryName = 385;
GqlParser.RULE_functionResolutionExpression = 386;
GqlParser.RULE_catalogFunctionReference = 387;
GqlParser.RULE_catalogFunctionParentAndName = 388;
GqlParser.RULE_functionParentSpecification = 389;
GqlParser.RULE_qualifiedFunctionName = 390;
GqlParser.RULE_catalogObjectReference = 391;
GqlParser.RULE_parentCatalogObjectReference = 392;
GqlParser.RULE_catalogUrlPath = 393;
GqlParser.RULE_absoluteUrlPath = 394;
GqlParser.RULE_relativeUrlPath = 395;
GqlParser.RULE_parentObjectRelativeUrlPath = 396;
GqlParser.RULE_simpleRelativeUrlPath = 397;
GqlParser.RULE_parameterizedUrlPath = 398;
GqlParser.RULE_simpleUrlPath = 399;
GqlParser.RULE_urlSegment = 400;
GqlParser.RULE_qualifiedObjectName = 401;
GqlParser.RULE_qualifiedNamePrefix = 402;
GqlParser.RULE_urlPathParameter = 403;
GqlParser.RULE_externalObjectReference = 404;
GqlParser.RULE_externalObjectUrl = 405;
GqlParser.RULE_elementReference = 406;
GqlParser.RULE_searchCondition = 407;
GqlParser.RULE_predicate = 408;
GqlParser.RULE_comparisonPredicate = 409;
GqlParser.RULE_comparisonPredicatePart2 = 410;
GqlParser.RULE_existsPredicate = 411;
GqlParser.RULE_nullPredicate = 412;
GqlParser.RULE_nullPredicatePart2 = 413;
GqlParser.RULE_normalizedPredicate = 414;
GqlParser.RULE_normalizedPredicatePart2 = 415;
GqlParser.RULE_directedPredicate = 416;
GqlParser.RULE_directedPredicatePart2 = 417;
GqlParser.RULE_labeledPredicate = 418;
GqlParser.RULE_labeledPredicatePart2 = 419;
GqlParser.RULE_sourceDestinationPredicate = 420;
GqlParser.RULE_sourcePredicatePart2 = 421;
GqlParser.RULE_destinationPredicatePart2 = 422;
GqlParser.RULE_allDifferentPredicate = 423;
GqlParser.RULE_samePredicate = 424;
GqlParser.RULE_valueSpecification = 425;
GqlParser.RULE_unsignedValueSpecification = 426;
GqlParser.RULE_unsignedIntegerSpecification = 427;
GqlParser.RULE_parameterValueSpecification = 428;
GqlParser.RULE_predefinedParameter = 429;
GqlParser.RULE_predefinedParentObjectParameter = 430;
GqlParser.RULE_predefinedSchemaParameter = 431;
GqlParser.RULE_predefinedGraphParameter = 432;
GqlParser.RULE_predefinedTableParameter = 433;
GqlParser.RULE_valueExpression = 434;
GqlParser.RULE_untypedValueExpression = 435;
GqlParser.RULE_commonValueExpression = 436;
GqlParser.RULE_referenceValueExpression = 437;
GqlParser.RULE_collectionValueExpression = 438;
GqlParser.RULE_setValueExpression = 439;
GqlParser.RULE_orderedSetValueExpression = 440;
GqlParser.RULE_mapValueExpression = 441;
GqlParser.RULE_booleanValueExpression = 442;
GqlParser.RULE_booleanTerm = 443;
GqlParser.RULE_booleanFactor = 444;
GqlParser.RULE_booleanTest = 445;
GqlParser.RULE_booleanPrimary = 446;
GqlParser.RULE_booleanPredicand = 447;
GqlParser.RULE_numericValueExpression = 448;
GqlParser.RULE_term = 449;
GqlParser.RULE_factor = 450;
GqlParser.RULE_numericPrimary = 451;
GqlParser.RULE_valueExpressionPrimary = 452;
GqlParser.RULE_nonParenthesizedValueExpressionPrimary = 453;
GqlParser.RULE_numericValueFunction = 454;
GqlParser.RULE_lengthExpression = 455;
GqlParser.RULE_charLengthExpression = 456;
GqlParser.RULE_byteLengthExpression = 457;
GqlParser.RULE_pathLengthExpression = 458;
GqlParser.RULE_absoluteValueExpression = 459;
GqlParser.RULE_modulusExpression = 460;
GqlParser.RULE_trigonometricFunction = 461;
GqlParser.RULE_generalLogarithmFunction = 462;
GqlParser.RULE_commonLogarithm = 463;
GqlParser.RULE_naturalLogarithm = 464;
GqlParser.RULE_exponentialFunction = 465;
GqlParser.RULE_powerFunction = 466;
GqlParser.RULE_squareRoot = 467;
GqlParser.RULE_floorFunction = 468;
GqlParser.RULE_ceilingFunction = 469;
GqlParser.RULE_inDegreeFunction = 470;
GqlParser.RULE_outDegreeFunction = 471;
GqlParser.RULE_stringValueExpression = 472;
GqlParser.RULE_characterStringValueExpression = 473;
GqlParser.RULE_characterStringPrimary = 474;
GqlParser.RULE_byteStringValueExpression = 475;
GqlParser.RULE_byteStringPrimary = 476;
GqlParser.RULE_stringValueFunction = 477;
GqlParser.RULE_characterStringFunction = 478;
GqlParser.RULE_substringFunction = 479;
GqlParser.RULE_fold = 480;
GqlParser.RULE_trimFunction = 481;
GqlParser.RULE_normalizeFunction = 482;
GqlParser.RULE_normalForm = 483;
GqlParser.RULE_byteStringFunction = 484;
GqlParser.RULE_byteSubstringFunction = 485;
GqlParser.RULE_byteStringTrimFunction = 486;
GqlParser.RULE_startPosition = 487;
GqlParser.RULE_stringLength = 488;
GqlParser.RULE_datetimeValueExpression = 489;
GqlParser.RULE_datetimePrimary = 490;
GqlParser.RULE_datetimeValueFunction = 491;
GqlParser.RULE_dateFunction = 492;
GqlParser.RULE_timeFunction = 493;
GqlParser.RULE_localTimeFunction = 494;
GqlParser.RULE_datetimeFunction = 495;
GqlParser.RULE_localDatetimeFunction = 496;
GqlParser.RULE_dateFunctionParameters = 497;
GqlParser.RULE_timeFunctionParameters = 498;
GqlParser.RULE_datetimeFunctionParameters = 499;
GqlParser.RULE_durationValueExpression = 500;
GqlParser.RULE_durationTerm = 501;
GqlParser.RULE_durationFactor = 502;
GqlParser.RULE_durationPrimary = 503;
GqlParser.RULE_durationValueFunction = 504;
GqlParser.RULE_durationFunction = 505;
GqlParser.RULE_durationFunctionParameters = 506;
GqlParser.RULE_durationAbsoluteValueFunction = 507;
GqlParser.RULE_graphElementPrimary = 508;
GqlParser.RULE_startNodeFunction = 509;
GqlParser.RULE_endNodeFunction = 510;
GqlParser.RULE_collectionValueConstructor = 511;
GqlParser.RULE_listValueExpression = 512;
GqlParser.RULE_listPrimary = 513;
GqlParser.RULE_listValueFunction = 514;
GqlParser.RULE_tailListFunction = 515;
GqlParser.RULE_trimListFunction = 516;
GqlParser.RULE_listValueConstructor = 517;
GqlParser.RULE_listValueConstructorByEnumeration = 518;
GqlParser.RULE_listElementList = 519;
GqlParser.RULE_multisetValueExpression = 520;
GqlParser.RULE_multisetTerm = 521;
GqlParser.RULE_multisetPrimary = 522;
GqlParser.RULE_multisetValueFunction = 523;
GqlParser.RULE_multisetValueConstructorByEnumeration = 524;
GqlParser.RULE_multisetElementList = 525;
GqlParser.RULE_setValueConstructor = 526;
GqlParser.RULE_setValueConstructorByEnumeration = 527;
GqlParser.RULE_setElementList = 528;
GqlParser.RULE_orderedSetValueConstructorByEnumeration = 529;
GqlParser.RULE_orderedSetElementList = 530;
GqlParser.RULE_mapValueConstructor = 531;
GqlParser.RULE_mapValueConstructorByEnumeration = 532;
GqlParser.RULE_mapElementList = 533;
GqlParser.RULE_mapElement = 534;
GqlParser.RULE_mapKey = 535;
GqlParser.RULE_recordValueConstructor = 536;
GqlParser.RULE_recordValueConstructorByEnumeration = 537;
GqlParser.RULE_fieldList = 538;
GqlParser.RULE_field = 539;
GqlParser.RULE_fieldValue = 540;
GqlParser.RULE_caseExpression = 541;
GqlParser.RULE_caseAbbreviation = 542;
GqlParser.RULE_simpleCase = 543;
GqlParser.RULE_searchedCase = 544;
GqlParser.RULE_simpleWhenClause = 545;
GqlParser.RULE_searchedWhenClause = 546;
GqlParser.RULE_elseClause = 547;
GqlParser.RULE_caseOperand = 548;
GqlParser.RULE_whenOperandList = 549;
GqlParser.RULE_whenOperand = 550;
GqlParser.RULE_result = 551;
GqlParser.RULE_castSpecification = 552;
GqlParser.RULE_multisetSetFunction = 553;
GqlParser.RULE_element_idFunction = 554;
GqlParser.RULE_literal = 555;
GqlParser.RULE_generalLiteral = 556;
GqlParser.RULE_predefinedTypeLiteral = 557;
GqlParser.RULE_unsignedLiteral = 558;
GqlParser.RULE_characterStringLiteral = 559;
GqlParser.RULE_unbrokenCharacterStringLiteral = 560;
GqlParser.RULE_singleQuotedCharacterSequence = 561;
GqlParser.RULE_doubleQuotedCharacterSequence = 562;
GqlParser.RULE_unbrokenSingleQuotedCharacterSequence = 563;
GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence = 564;
GqlParser.RULE_unbrokenAccentQuotedCharacterSequence = 565;
GqlParser.RULE_characterRepresentation = 566;
GqlParser.RULE_byteStringLiteral = 567;
GqlParser.RULE_numericLiteral = 568;
GqlParser.RULE_signedNumericLiteral = 569;
GqlParser.RULE_unsignedNumericLiteral = 570;
GqlParser.RULE_exactNumericLiteral = 571;
GqlParser.RULE_sign = 572;
GqlParser.RULE_unsignedInteger = 573;
GqlParser.RULE_unsignedDecimalInteger = 574;
GqlParser.RULE_unsignedBinaryInteger = 575;
GqlParser.RULE_unsignedOctalInteger = 576;
GqlParser.RULE_unsignedHexadecimalInteger = 577;
GqlParser.RULE_signedDecimalInteger = 578;
GqlParser.RULE_approximateNumericLiteral = 579;
GqlParser.RULE_temporalLiteral = 580;
GqlParser.RULE_dateLiteral = 581;
GqlParser.RULE_timeLiteral = 582;
GqlParser.RULE_datetimeLiteral = 583;
GqlParser.RULE_dateString = 584;
GqlParser.RULE_timeString = 585;
GqlParser.RULE_datetimeString = 586;
GqlParser.RULE_durationLiteral = 587;
GqlParser.RULE_intervalLiteral = 588;
GqlParser.RULE_yearMonthLiteral = 589;
GqlParser.RULE_dayTimeLiteral = 590;
GqlParser.RULE_fractionalSecondsLiteral = 591;
GqlParser.RULE_durationString = 592;
GqlParser.RULE_listLiteral = 593;
GqlParser.RULE_setLiteral = 594;
GqlParser.RULE_multisetLiteral = 595;
GqlParser.RULE_orderedSetLiteral = 596;
GqlParser.RULE_mapLiteral = 597;
GqlParser.RULE_recordLiteral = 598;
GqlParser.RULE_valueType = 599;
GqlParser.RULE_ofValueType = 600;
GqlParser.RULE_predefinedType = 601;
GqlParser.RULE_characterStringType = 602;
GqlParser.RULE_byteStringType = 603;
GqlParser.RULE_numericType = 604;
GqlParser.RULE_exactNumericType = 605;
GqlParser.RULE_binaryExactNumericType = 606;
GqlParser.RULE_binaryExactSignedNumericType = 607;
GqlParser.RULE_binaryExactUnsignedNumericType = 608;
GqlParser.RULE_verboseBinaryExactNumericType = 609;
GqlParser.RULE_decimalExactNumericType = 610;
GqlParser.RULE_approximateNumericType = 611;
GqlParser.RULE_temporalType = 612;
GqlParser.RULE_graphElementType = 613;
GqlParser.RULE_listValueTypeName = 614;
GqlParser.RULE_mapValueType = 615;
GqlParser.RULE_mapKeyType = 616;
GqlParser.RULE_recordValueType = 617;
GqlParser.RULE_fieldTypeList = 618;
GqlParser.RULE_fieldType = 619;
GqlParser.RULE_parameterName = 620;
GqlParser.RULE_identifier = 621;
GqlParser.RULE_separatedIdentifier = 622;
GqlParser.RULE_token = 623;
GqlParser.RULE_nonDelimiterToken = 624;
GqlParser.RULE_nonDelimitedIdentifier = 625;
GqlParser.RULE_regularIdentifier = 626;
GqlParser.RULE_extendedIdentifier = 627;
GqlParser.RULE_delimiterToken = 628;
GqlParser.RULE_delimitedIdentifier = 629;
GqlParser.RULE_separator = 630;
GqlParser.RULE_comment = 631;
GqlParser.RULE_simpleComment = 632;
GqlParser.RULE_bracketedComment = 633;
GqlParser.RULE_edgeSynonym = 634;
GqlParser.RULE_nodeSynonym = 635;

class GqlParserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_gqlParser;
    }

	gqlProgram() {
	    return this.getTypedRuleContext(GqlProgramContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	requestParameterSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequestParameterSetContext);
	    } else {
	        return this.getTypedRuleContext(RequestParameterSetContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGqlParser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGqlParser(this);
		}
	}


}



class RequestParameterSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_requestParameterSet;
    }

	parameterDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRequestParameterSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRequestParameterSet(this);
		}
	}


}



class GqlProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_gqlProgram;
    }

	mainActivity() {
	    return this.getTypedRuleContext(MainActivityContext,0);
	};

	preamble() {
	    return this.getTypedRuleContext(PreambleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGqlProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGqlProgram(this);
		}
	}


}



class MainActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mainActivity;
    }

	sessionActivity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SessionActivityContext);
	    } else {
	        return this.getTypedRuleContext(SessionActivityContext,i);
	    }
	};

	transactionActivity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionActivityContext);
	    } else {
	        return this.getTypedRuleContext(TransactionActivityContext,i);
	    }
	};

	sessionCloseCommand() {
	    return this.getTypedRuleContext(SessionCloseCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMainActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMainActivity(this);
		}
	}


}



class SessionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionActivity;
    }

	sessionClearCommand() {
	    return this.getTypedRuleContext(SessionClearCommandContext,0);
	};

	sessionParameterCommand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SessionParameterCommandContext);
	    } else {
	        return this.getTypedRuleContext(SessionParameterCommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionActivity(this);
		}
	}


}



class SessionParameterCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionParameterCommand;
    }

	sessionSetCommand() {
	    return this.getTypedRuleContext(SessionSetCommandContext,0);
	};

	sessionRemoveCommand() {
	    return this.getTypedRuleContext(SessionRemoveCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionParameterCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionParameterCommand(this);
		}
	}


}



class TransactionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionActivity;
    }

	startTransactionCommand() {
	    return this.getTypedRuleContext(StartTransactionCommandContext,0);
	};

	procedureSpecification() {
	    return this.getTypedRuleContext(ProcedureSpecificationContext,0);
	};

	endTransactionCommand() {
	    return this.getTypedRuleContext(EndTransactionCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionActivity(this);
		}
	}


}



class PreambleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_preamble;
    }

	preambleOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PreambleOptionContext);
	    } else {
	        return this.getTypedRuleContext(PreambleOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPreamble(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPreamble(this);
		}
	}


}



class PreambleOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_preambleOption;
    }

	PROFILE() {
	    return this.getToken(GqlParser.PROFILE, 0);
	};

	EXPLAIN() {
	    return this.getToken(GqlParser.EXPLAIN, 0);
	};

	preambleOptionIdentifier() {
	    return this.getTypedRuleContext(PreambleOptionIdentifierContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPreambleOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPreambleOption(this);
		}
	}


}



class PreambleOptionIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_preambleOptionIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPreambleOptionIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPreambleOptionIdentifier(this);
		}
	}


}



class SessionSetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetCommand;
    }

	SESSION_SET() {
	    return this.getToken(GqlParser.SESSION_SET, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	sessionSetSchemaClause() {
	    return this.getTypedRuleContext(SessionSetSchemaClauseContext,0);
	};

	sessionSetGraphClause() {
	    return this.getTypedRuleContext(SessionSetGraphClauseContext,0);
	};

	sessionSetTimeZoneClause() {
	    return this.getTypedRuleContext(SessionSetTimeZoneClauseContext,0);
	};

	sessionSetParameterClause() {
	    return this.getTypedRuleContext(SessionSetParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetCommand(this);
		}
	}


}



class SessionSetSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetSchemaClause;
    }

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetSchemaClause(this);
		}
	}


}



class SessionSetGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetGraphClause;
    }

	graphResolutionExpression() {
	    return this.getTypedRuleContext(GraphResolutionExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetGraphClause(this);
		}
	}


}



class SessionSetTimeZoneClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetTimeZoneClause;
    }

	TIME_ZONE() {
	    return this.getToken(GqlParser.TIME_ZONE, 0);
	};

	setTimeZoneValue() {
	    return this.getTypedRuleContext(SetTimeZoneValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetTimeZoneClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetTimeZoneClause(this);
		}
	}


}



class SetTimeZoneValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setTimeZoneValue;
    }

	stringValueExpression() {
	    return this.getTypedRuleContext(StringValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetTimeZoneValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetTimeZoneValue(this);
		}
	}


}



class SessionSetParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetParameterClause;
    }

	sessionParameter() {
	    return this.getTypedRuleContext(SessionParameterContext,0);
	};

	sessionParameterFlag() {
	    return this.getTypedRuleContext(SessionParameterFlagContext,0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetParameterClause(this);
		}
	}


}



class SessionParameterFlagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionParameterFlag;
    }

	MUTABLE() {
	    return this.getToken(GqlParser.MUTABLE, 0);
	};

	FINAL() {
	    return this.getToken(GqlParser.FINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionParameterFlag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionParameterFlag(this);
		}
	}


}



class SessionParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionParameter;
    }

	parameterDefinition() {
	    return this.getTypedRuleContext(ParameterDefinitionContext,0);
	};

	PARAMETER() {
	    return this.getToken(GqlParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionParameter(this);
		}
	}


}



class SessionRemoveCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionRemoveCommand;
    }

	REMOVE() {
	    return this.getToken(GqlParser.REMOVE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SESSION() {
	    return this.getToken(GqlParser.SESSION, 0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionRemoveCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionRemoveCommand(this);
		}
	}


}



class SessionClearCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionClearCommand;
    }

	CLEAR() {
	    return this.getToken(GqlParser.CLEAR, 0);
	};

	SESSION() {
	    return this.getToken(GqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionClearCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionClearCommand(this);
		}
	}


}



class SessionCloseCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionCloseCommand;
    }

	CLOSE() {
	    return this.getToken(GqlParser.CLOSE, 0);
	};

	SESSION() {
	    return this.getToken(GqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionCloseCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionCloseCommand(this);
		}
	}


}



class StartTransactionCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_startTransactionCommand;
    }

	START_TRANSACTION() {
	    return this.getToken(GqlParser.START_TRANSACTION, 0);
	};

	transactionCharacteristics() {
	    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStartTransactionCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStartTransactionCommand(this);
		}
	}


}



class EndTransactionCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endTransactionCommand;
    }

	commitCommand() {
	    return this.getTypedRuleContext(CommitCommandContext,0);
	};

	rollbackCommand() {
	    return this.getTypedRuleContext(RollbackCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndTransactionCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndTransactionCommand(this);
		}
	}


}



class TransactionCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionCharacteristics;
    }

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionCharacteristics(this);
		}
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionMode;
    }

	transactionAccessMode() {
	    return this.getTypedRuleContext(TransactionAccessModeContext,0);
	};

	implementationDefinedAccessMode() {
	    return this.getTypedRuleContext(ImplementationDefinedAccessModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}


}



class TransactionAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionAccessMode;
    }

	READ_ONLY() {
	    return this.getToken(GqlParser.READ_ONLY, 0);
	};

	READ_WRITE() {
	    return this.getToken(GqlParser.READ_WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}


}



class ImplementationDefinedAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_implementationDefinedAccessMode;
    }


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterImplementationDefinedAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitImplementationDefinedAccessMode(this);
		}
	}


}



class RollbackCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_rollbackCommand;
    }

	ROLLBACK() {
	    return this.getToken(GqlParser.ROLLBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRollbackCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRollbackCommand(this);
		}
	}


}



class CommitCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_commitCommand;
    }

	COMMIT() {
	    return this.getToken(GqlParser.COMMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCommitCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCommitCommand(this);
		}
	}


}



class NestedProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedProcedureSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	procedureSpecification() {
	    return this.getTypedRuleContext(ProcedureSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedProcedureSpecification(this);
		}
	}


}



class ProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureSpecification;
    }

	catalogModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(CatalogModifyingProcedureSpecificationContext,0);
	};

	dataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(DataModifyingProcedureSpecificationContext,0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	functionSpecification() {
	    return this.getTypedRuleContext(FunctionSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureSpecification(this);
		}
	}


}



class NestedCatalogModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedCatalogModifyingProcedureSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	catalogModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(CatalogModifyingProcedureSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedCatalogModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedCatalogModifyingProcedureSpecification(this);
		}
	}


}



class CatalogModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogModifyingProcedureSpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogModifyingProcedureSpecification(this);
		}
	}


}



class NestedDataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedDataModifyingProcedureSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	dataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(DataModifyingProcedureSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedDataModifyingProcedureSpecification(this);
		}
	}


}



class DataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dataModifyingProcedureSpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDataModifyingProcedureSpecification(this);
		}
	}


}



class NestedQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedQuerySpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedQuerySpecification(this);
		}
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_querySpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQuerySpecification(this);
		}
	}


}



class NestedFunctionSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedFunctionSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	functionSpecification() {
	    return this.getTypedRuleContext(FunctionSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedFunctionSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedFunctionSpecification(this);
		}
	}


}



class FunctionSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_functionSpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFunctionSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFunctionSpecification(this);
		}
	}


}



class ProcedureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureBody;
    }

	statementBlock() {
	    return this.getTypedRuleContext(StatementBlockContext,0);
	};

	staticVariableDefinitionBlock() {
	    return this.getTypedRuleContext(StaticVariableDefinitionBlockContext,0);
	};

	bindingVariableDefinitionBlock() {
	    return this.getTypedRuleContext(BindingVariableDefinitionBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureBody(this);
		}
	}


}



class StaticVariableDefinitionBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_staticVariableDefinitionBlock;
    }

	staticVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StaticVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(StaticVariableDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStaticVariableDefinitionBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStaticVariableDefinitionBlock(this);
		}
	}


}



class BindingVariableDefinitionBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVariableDefinitionBlock;
    }

	bindingVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(BindingVariableDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVariableDefinitionBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVariableDefinitionBlock(this);
		}
	}


}



class StatementBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_statementBlock;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	thenStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThenStatementContext);
	    } else {
	        return this.getTypedRuleContext(ThenStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStatementBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStatementBlock(this);
		}
	}


}



class ThenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_thenStatement;
    }

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterThenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitThenStatement(this);
		}
	}


}



class StaticVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_staticVariableDefinition;
    }

	procedureVariableDefinition() {
	    return this.getTypedRuleContext(ProcedureVariableDefinitionContext,0);
	};

	queryVariableDefinition() {
	    return this.getTypedRuleContext(QueryVariableDefinitionContext,0);
	};

	functionVariableDefinition() {
	    return this.getTypedRuleContext(FunctionVariableDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStaticVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStaticVariableDefinition(this);
		}
	}


}



class ProcedureVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureVariableDefinition;
    }

	PROCEDURE() {
	    return this.getToken(GqlParser.PROCEDURE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ofTypeSignature() {
	    return this.getTypedRuleContext(OfTypeSignatureContext,0);
	};

	procedureInitializer() {
	    return this.getTypedRuleContext(ProcedureInitializerContext,0);
	};

	CATALOG() {
	    return this.getToken(GqlParser.CATALOG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureVariableDefinition(this);
		}
	}


}



class ProcedureInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureInitializer;
    }

	AS_OR_EQUALS() {
	    return this.getToken(GqlParser.AS_OR_EQUALS, 0);
	};

	procedureReference() {
	    return this.getTypedRuleContext(ProcedureReferenceContext,0);
	};

	nestedProcedureSpecification() {
	    return this.getTypedRuleContext(NestedProcedureSpecificationContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	catalogProcedureReference() {
	    return this.getTypedRuleContext(CatalogProcedureReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureInitializer(this);
		}
	}


}



class QueryVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_queryVariableDefinition;
    }

	QUERY() {
	    return this.getToken(GqlParser.QUERY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ofTypeSignature() {
	    return this.getTypedRuleContext(OfTypeSignatureContext,0);
	};

	queryInitializer() {
	    return this.getTypedRuleContext(QueryInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQueryVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQueryVariableDefinition(this);
		}
	}


}



class QueryInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_queryInitializer;
    }

	AS_OR_EQUALS() {
	    return this.getToken(GqlParser.AS_OR_EQUALS, 0);
	};

	queryResolutionExpression() {
	    return this.getTypedRuleContext(QueryResolutionExpressionContext,0);
	};

	qualifiedQueryName() {
	    return this.getTypedRuleContext(QualifiedQueryNameContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	catalogQueryReference() {
	    return this.getTypedRuleContext(CatalogQueryReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQueryInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQueryInitializer(this);
		}
	}


}



class FunctionVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_functionVariableDefinition;
    }

	FUNCTION() {
	    return this.getToken(GqlParser.FUNCTION, 0);
	};

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	ofTypeSignature() {
	    return this.getTypedRuleContext(OfTypeSignatureContext,0);
	};

	functionInitializer() {
	    return this.getTypedRuleContext(FunctionInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFunctionVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFunctionVariableDefinition(this);
		}
	}


}



class FunctionInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_functionInitializer;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	functionResolutionExpression() {
	    return this.getTypedRuleContext(FunctionResolutionExpressionContext,0);
	};

	qualifiedFunctionName() {
	    return this.getTypedRuleContext(QualifiedFunctionNameContext,0);
	};

	nestedFunctionSpecification() {
	    return this.getTypedRuleContext(NestedFunctionSpecificationContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	catalogFunctionReference() {
	    return this.getTypedRuleContext(CatalogFunctionReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFunctionInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFunctionInitializer(this);
		}
	}


}



class CompactVariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compactVariableDeclarationList;
    }

	compactVariableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompactVariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(CompactVariableDeclarationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompactVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompactVariableDeclarationList(this);
		}
	}


}



class CompactVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compactVariableDeclaration;
    }

	bindingVariableDeclaration() {
	    return this.getTypedRuleContext(BindingVariableDeclarationContext,0);
	};

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompactVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompactVariableDeclaration(this);
		}
	}


}



class BindingVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVariableDeclaration;
    }

	graphVariableDeclaration() {
	    return this.getTypedRuleContext(GraphVariableDeclarationContext,0);
	};

	bindingTableVariableDeclaration() {
	    return this.getTypedRuleContext(BindingTableVariableDeclarationContext,0);
	};

	valueVariableDeclaration() {
	    return this.getTypedRuleContext(ValueVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVariableDeclaration(this);
		}
	}


}



class CompactVariableDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compactVariableDefinitionList;
    }

	compactVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompactVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(CompactVariableDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompactVariableDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompactVariableDefinitionList(this);
		}
	}


}



class CompactVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compactVariableDefinition;
    }

	compactValueVariableDefinition() {
	    return this.getTypedRuleContext(CompactValueVariableDefinitionContext,0);
	};

	bindingVariableDefinition() {
	    return this.getTypedRuleContext(BindingVariableDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompactVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompactVariableDefinition(this);
		}
	}


}



class CompactValueVariableDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compactValueVariableDefinitionList;
    }

	compactValueVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompactValueVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(CompactValueVariableDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompactValueVariableDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompactValueVariableDefinitionList(this);
		}
	}


}



class CompactValueVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compactValueVariableDefinition;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompactValueVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompactValueVariableDefinition(this);
		}
	}


}



class BindingVariableDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVariableDefinitionList;
    }

	bindingVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(BindingVariableDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVariableDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVariableDefinitionList(this);
		}
	}


}



class BindingVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVariableDefinition;
    }

	graphVariableDefinition() {
	    return this.getTypedRuleContext(GraphVariableDefinitionContext,0);
	};

	bindingTableVariableDefinition() {
	    return this.getTypedRuleContext(BindingTableVariableDefinitionContext,0);
	};

	valueVariableDefinition() {
	    return this.getTypedRuleContext(ValueVariableDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVariableDefinition(this);
		}
	}


}



class ParameterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameterDefinition;
    }

	graphParameterDefinition() {
	    return this.getTypedRuleContext(GraphParameterDefinitionContext,0);
	};

	bindingTableParameterDefinition() {
	    return this.getTypedRuleContext(BindingTableParameterDefinitionContext,0);
	};

	valueParameterDefinition() {
	    return this.getTypedRuleContext(ValueParameterDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameterDefinition(this);
		}
	}


}



class GraphVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphVariableDeclaration;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	graphVariable() {
	    return this.getTypedRuleContext(GraphVariableContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphVariableDeclaration(this);
		}
	}


}



class GraphVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphVariableDefinition;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	graphVariable() {
	    return this.getTypedRuleContext(GraphVariableContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	graphInitializer() {
	    return this.getTypedRuleContext(GraphInitializerContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphVariableDefinition(this);
		}
	}


}



class GraphParameterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphParameterDefinition;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	graphInitializer() {
	    return this.getTypedRuleContext(GraphInitializerContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphParameterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphParameterDefinition(this);
		}
	}


}



class GraphVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphVariable;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphVariable(this);
		}
	}


}



class GraphInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphInitializer;
    }

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	nestedGraphQuerySpecification() {
	    return this.getTypedRuleContext(NestedGraphQuerySpecificationContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	catalogGraphReference() {
	    return this.getTypedRuleContext(CatalogGraphReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphInitializer(this);
		}
	}


}



class BindingTableVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableVariableDeclaration;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	bindingTableVariable() {
	    return this.getTypedRuleContext(BindingTableVariableContext,0);
	};

	ofBindingTableType() {
	    return this.getTypedRuleContext(OfBindingTableTypeContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableVariableDeclaration(this);
		}
	}


}



class BindingTableVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableVariableDefinition;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	bindingTableVariable() {
	    return this.getTypedRuleContext(BindingTableVariableContext,0);
	};

	ofBindingTableType() {
	    return this.getTypedRuleContext(OfBindingTableTypeContext,0);
	};

	bindingTableInitializer() {
	    return this.getTypedRuleContext(BindingTableInitializerContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableVariableDefinition(this);
		}
	}


}



class BindingTableParameterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableParameterDefinition;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ofBindingTableType() {
	    return this.getTypedRuleContext(OfBindingTableTypeContext,0);
	};

	bindingTableInitializer() {
	    return this.getTypedRuleContext(BindingTableInitializerContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableParameterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableParameterDefinition(this);
		}
	}


}



class BindingTableVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableVariable;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableVariable(this);
		}
	}


}



class BindingTableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableInitializer;
    }

	bindingTableReference() {
	    return this.getTypedRuleContext(BindingTableReferenceContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	catalogBindingTableReference() {
	    return this.getTypedRuleContext(CatalogBindingTableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableInitializer(this);
		}
	}


}



class ValueVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueVariableDeclaration;
    }

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	ofValueType() {
	    return this.getTypedRuleContext(OfValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueVariableDeclaration(this);
		}
	}


}



class ValueVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueVariableDefinition;
    }

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	valueInitializer() {
	    return this.getTypedRuleContext(ValueInitializerContext,0);
	};

	ofValueType() {
	    return this.getTypedRuleContext(OfValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueVariableDefinition(this);
		}
	}


}



class ValueParameterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueParameterDefinition;
    }

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	valueInitializer() {
	    return this.getTypedRuleContext(ValueInitializerContext,0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	ofValueType() {
	    return this.getTypedRuleContext(OfValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueParameterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueParameterDefinition(this);
		}
	}


}



class ValueInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueInitializer;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	nestedFunctionSpecification() {
	    return this.getTypedRuleContext(NestedFunctionSpecificationContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	catalogObjectReference() {
	    return this.getTypedRuleContext(CatalogObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueInitializer(this);
		}
	}


}



class PrimaryResultObjectExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primaryResultObjectExpression;
    }

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	bindingTableReference() {
	    return this.getTypedRuleContext(BindingTableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimaryResultObjectExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimaryResultObjectExpression(this);
		}
	}


}



class GraphExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphExpression;
    }

	copyGraphExpression() {
	    return this.getTypedRuleContext(CopyGraphExpressionContext,0);
	};

	graphSpecification() {
	    return this.getTypedRuleContext(GraphSpecificationContext,0);
	};

	graphReference() {
	    return this.getTypedRuleContext(GraphReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphExpression(this);
		}
	}


}



class CopyGraphExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_copyGraphExpression;
    }

	COPY() {
	    return this.getToken(GqlParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCopyGraphExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCopyGraphExpression(this);
		}
	}


}



class GraphTypeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeExpression;
    }

	copyGraphTypeExpression() {
	    return this.getTypedRuleContext(CopyGraphTypeExpressionContext,0);
	};

	likeGraphExpression() {
	    return this.getTypedRuleContext(LikeGraphExpressionContext,0);
	};

	graphTypeSpecification() {
	    return this.getTypedRuleContext(GraphTypeSpecificationContext,0);
	};

	graphTypeReference() {
	    return this.getTypedRuleContext(GraphTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeExpression(this);
		}
	}


}



class AsGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_asGraphType;
    }

	AS_OR_EQUALS() {
	    return this.getToken(GqlParser.AS_OR_EQUALS, 0);
	};

	graphTypeExpression() {
	    return this.getTypedRuleContext(GraphTypeExpressionContext,0);
	};

	likeGraphExpressionShorthand() {
	    return this.getTypedRuleContext(LikeGraphExpressionShorthandContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAsGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAsGraphType(this);
		}
	}


}



class CopyGraphTypeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_copyGraphTypeExpression;
    }

	COPY() {
	    return this.getToken(GqlParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	graphTypeReference() {
	    return this.getTypedRuleContext(GraphTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCopyGraphTypeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCopyGraphTypeExpression(this);
		}
	}


}



class LikeGraphExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_likeGraphExpression;
    }

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	likeGraphExpressionShorthand() {
	    return this.getTypedRuleContext(LikeGraphExpressionShorthandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLikeGraphExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLikeGraphExpression(this);
		}
	}


}



class OfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ofGraphType;
    }

	ofTypePrefix() {
	    return this.getTypedRuleContext(OfTypePrefixContext,0);
	};

	graphTypeExpression() {
	    return this.getTypedRuleContext(GraphTypeExpressionContext,0);
	};

	likeGraphExpressionShorthand() {
	    return this.getTypedRuleContext(LikeGraphExpressionShorthandContext,0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOfGraphType(this);
		}
	}


}



class LikeGraphExpressionShorthandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_likeGraphExpressionShorthand;
    }

	LIKE() {
	    return this.getToken(GqlParser.LIKE, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLikeGraphExpressionShorthand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLikeGraphExpressionShorthand(this);
		}
	}


}



class OfBindingTableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ofBindingTableType;
    }

	ofTypePrefix() {
	    return this.getTypedRuleContext(OfTypePrefixContext,0);
	};

	bindingTableTypeExpression() {
	    return this.getTypedRuleContext(BindingTableTypeExpressionContext,0);
	};

	likeBindingTableShorthand() {
	    return this.getTypedRuleContext(LikeBindingTableShorthandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOfBindingTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOfBindingTableType(this);
		}
	}


}



class OfTypePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ofTypePrefix;
    }

	DOUBLE_COLON() {
	    return this.getToken(GqlParser.DOUBLE_COLON, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOfTypePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOfTypePrefix(this);
		}
	}


}



class BindingTableTypeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableTypeExpression;
    }

	bindingTableType() {
	    return this.getTypedRuleContext(BindingTableTypeContext,0);
	};

	likeBindingTableType() {
	    return this.getTypedRuleContext(LikeBindingTableTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableTypeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableTypeExpression(this);
		}
	}


}



class BindingTableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableType;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	recordValueType() {
	    return this.getTypedRuleContext(RecordValueTypeContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableType(this);
		}
	}


}



class LikeBindingTableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_likeBindingTableType;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	likeBindingTableShorthand() {
	    return this.getTypedRuleContext(LikeBindingTableShorthandContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLikeBindingTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLikeBindingTableType(this);
		}
	}


}



class LikeBindingTableShorthandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_likeBindingTableShorthand;
    }

	LIKE() {
	    return this.getToken(GqlParser.LIKE, 0);
	};

	bindingTableReference() {
	    return this.getTypedRuleContext(BindingTableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLikeBindingTableShorthand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLikeBindingTableShorthand(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_statement;
    }

	atSchemaClause() {
	    return this.getTypedRuleContext(AtSchemaClauseContext,0);
	};

	linearCatalogModifyingStatement() {
	    return this.getTypedRuleContext(LinearCatalogModifyingStatementContext,0);
	};

	dataModifyingStatement() {
	    return this.getTypedRuleContext(DataModifyingStatementContext,0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class DataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dataModifyingStatement;
    }

	conditionalDataModifyingStatement() {
	    return this.getTypedRuleContext(ConditionalDataModifyingStatementContext,0);
	};

	linearDataModifyingStatement() {
	    return this.getTypedRuleContext(LinearDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDataModifyingStatement(this);
		}
	}


}



class QueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_queryStatement;
    }

	compositeQueryExpression() {
	    return this.getTypedRuleContext(CompositeQueryExpressionContext,0);
	};

	conditionalQueryStatement() {
	    return this.getTypedRuleContext(ConditionalQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQueryStatement(this);
		}
	}


}



class CallProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callProcedureStatement;
    }

	statementMode() {
	    return this.getTypedRuleContext(StatementModeContext,0);
	};

	CALL() {
	    return this.getToken(GqlParser.CALL, 0);
	};

	procedureCall() {
	    return this.getTypedRuleContext(ProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallProcedureStatement(this);
		}
	}


}



class StatementModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_statementMode;
    }

	OPTIONAL() {
	    return this.getToken(GqlParser.OPTIONAL, 0);
	};

	MANDATORY() {
	    return this.getToken(GqlParser.MANDATORY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStatementMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStatementMode(this);
		}
	}


}



class SimpleCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleCatalogModifyingStatement;
    }

	primitiveCatalogModifyingStatement() {
	    return this.getTypedRuleContext(PrimitiveCatalogModifyingStatementContext,0);
	};

	callCatalogModifyingProcedureStatement() {
	    return this.getTypedRuleContext(CallCatalogModifyingProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleCatalogModifyingStatement(this);
		}
	}


}



class PrimitiveCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveCatalogModifyingStatement;
    }

	createGraphStatement() {
	    return this.getTypedRuleContext(CreateGraphStatementContext,0);
	};

	createGraphTypeStatement() {
	    return this.getTypedRuleContext(CreateGraphTypeStatementContext,0);
	};

	createProcedureStatement() {
	    return this.getTypedRuleContext(CreateProcedureStatementContext,0);
	};

	createQueryStatement() {
	    return this.getTypedRuleContext(CreateQueryStatementContext,0);
	};

	createFunctionStatement() {
	    return this.getTypedRuleContext(CreateFunctionStatementContext,0);
	};

	dropGraphStatement() {
	    return this.getTypedRuleContext(DropGraphStatementContext,0);
	};

	dropGraphTypeStatement() {
	    return this.getTypedRuleContext(DropGraphTypeStatementContext,0);
	};

	dropProcedureStatement() {
	    return this.getTypedRuleContext(DropProcedureStatementContext,0);
	};

	dropQueryStatement() {
	    return this.getTypedRuleContext(DropQueryStatementContext,0);
	};

	dropFunctionStatement() {
	    return this.getTypedRuleContext(DropFunctionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveCatalogModifyingStatement(this);
		}
	}


}



class SimpleDataAccessingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleDataAccessingStatement;
    }

	simpleQueryStatement() {
	    return this.getTypedRuleContext(SimpleQueryStatementContext,0);
	};

	simpleDataModifyingStatement() {
	    return this.getTypedRuleContext(SimpleDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleDataAccessingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleDataAccessingStatement(this);
		}
	}


}



class SimpleDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleDataModifyingStatement;
    }

	primitiveDataModifyingStatement() {
	    return this.getTypedRuleContext(PrimitiveDataModifyingStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleDataModifyingStatement(this);
		}
	}


}



class PrimitiveDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveDataModifyingStatement;
    }

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	mergeStatement() {
	    return this.getTypedRuleContext(MergeStatementContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	removeStatement() {
	    return this.getTypedRuleContext(RemoveStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveDataModifyingStatement(this);
		}
	}


}



class SimpleQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleQueryStatement;
    }

	simpleDataTransformingStatement() {
	    return this.getTypedRuleContext(SimpleDataTransformingStatementContext,0);
	};

	simpleDataReadingStatement() {
	    return this.getTypedRuleContext(SimpleDataReadingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleQueryStatement(this);
		}
	}


}



class SimpleDataReadingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleDataReadingStatement;
    }

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	callQueryStatement() {
	    return this.getTypedRuleContext(CallQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleDataReadingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleDataReadingStatement(this);
		}
	}


}



class SimpleDataTransformingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleDataTransformingStatement;
    }

	primitiveDataTransformingStatement() {
	    return this.getTypedRuleContext(PrimitiveDataTransformingStatementContext,0);
	};

	callFunctionStatement() {
	    return this.getTypedRuleContext(CallFunctionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleDataTransformingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleDataTransformingStatement(this);
		}
	}


}



class PrimitiveDataTransformingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveDataTransformingStatement;
    }

	optionalStatement() {
	    return this.getTypedRuleContext(OptionalStatementContext,0);
	};

	mandatoryStatement() {
	    return this.getTypedRuleContext(MandatoryStatementContext,0);
	};

	letStatement() {
	    return this.getTypedRuleContext(LetStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	aggregateStatement() {
	    return this.getTypedRuleContext(AggregateStatementContext,0);
	};

	filterStatement() {
	    return this.getTypedRuleContext(FilterStatementContext,0);
	};

	orderByAndPageStatement() {
	    return this.getTypedRuleContext(OrderByAndPageStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveDataTransformingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveDataTransformingStatement(this);
		}
	}


}



class LinearCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_linearCatalogModifyingStatement;
    }

	simpleCatalogModifyingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleCatalogModifyingStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleCatalogModifyingStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLinearCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLinearCatalogModifyingStatement(this);
		}
	}


}



class CreateSchemaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createSchemaStatement;
    }

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateSchemaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateSchemaStatement(this);
		}
	}


}



class DropSchemaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropSchemaStatement;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropSchemaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropSchemaStatement(this);
		}
	}


}



class CreateGraphStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createGraphStatement;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	graphSource() {
	    return this.getTypedRuleContext(GraphSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateGraphStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateGraphStatement(this);
		}
	}


}



class GraphSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphSource;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	copyGraphExpression() {
	    return this.getTypedRuleContext(CopyGraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphSource(this);
		}
	}


}



class GraphSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphSpecification;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	nestedGraphQuerySpecification() {
	    return this.getTypedRuleContext(NestedGraphQuerySpecificationContext,0);
	};

	nestedAmbientDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedAmbientDataModifyingProcedureSpecificationContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphSpecification(this);
		}
	}


}



class NestedGraphQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedGraphQuerySpecification;
    }

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedGraphQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedGraphQuerySpecification(this);
		}
	}


}



class NestedAmbientDataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedAmbientDataModifyingProcedureSpecification;
    }

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedAmbientDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedAmbientDataModifyingProcedureSpecification(this);
		}
	}


}



class DropGraphStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropGraphStatement;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropGraphStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropGraphStatement(this);
		}
	}


}



class CreateGraphTypeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createGraphTypeStatement;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	graphTypeInitializer() {
	    return this.getTypedRuleContext(GraphTypeInitializerContext,0);
	};

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateGraphTypeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateGraphTypeStatement(this);
		}
	}


}



class GraphTypeInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeInitializer;
    }

	asGraphType() {
	    return this.getTypedRuleContext(AsGraphTypeContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	catalogGraphTypeReference() {
	    return this.getTypedRuleContext(CatalogGraphTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeInitializer(this);
		}
	}


}



class GraphTypeSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeSpecification;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeSpecification(this);
		}
	}


}



class NestedGraphTypeSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedGraphTypeSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	graphTypeSpecificationBody() {
	    return this.getTypedRuleContext(GraphTypeSpecificationBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedGraphTypeSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedGraphTypeSpecification(this);
		}
	}


}



class GraphTypeSpecificationBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeSpecificationBody;
    }

	elementTypeDefinitionList() {
	    return this.getTypedRuleContext(ElementTypeDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeSpecificationBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeSpecificationBody(this);
		}
	}


}



class ElementTypeDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementTypeDefinitionList;
    }

	elementTypeDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementTypeDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ElementTypeDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementTypeDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementTypeDefinitionList(this);
		}
	}


}



class ElementTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementTypeDefinition;
    }

	nodeTypeDefinition() {
	    return this.getTypedRuleContext(NodeTypeDefinitionContext,0);
	};

	edgeTypeDefinition() {
	    return this.getTypedRuleContext(EdgeTypeDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementTypeDefinition(this);
		}
	}


}



class NodeTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeDefinition;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeDefinition(this);
		}
	}


}



class NodeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeFiller;
    }

	nodeTypeLabelSetDefinition() {
	    return this.getTypedRuleContext(NodeTypeLabelSetDefinitionContext,0);
	};

	nodeTypePropertyTypeSetDefinition() {
	    return this.getTypedRuleContext(NodeTypePropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeFiller(this);
		}
	}


}



class NodeTypeLabelSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeLabelSetDefinition;
    }

	labelSetDefinition() {
	    return this.getTypedRuleContext(LabelSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeLabelSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeLabelSetDefinition(this);
		}
	}


}



class NodeTypePropertyTypeSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypePropertyTypeSetDefinition;
    }

	propertyTypeSetDefinition() {
	    return this.getTypedRuleContext(PropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypePropertyTypeSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypePropertyTypeSetDefinition(this);
		}
	}


}



class EdgeTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypeDefinition;
    }

	fullEdgeTypePattern() {
	    return this.getTypedRuleContext(FullEdgeTypePatternContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	edgeKind() {
	    return this.getTypedRuleContext(EdgeKindContext,0);
	};

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	endpointDefinition() {
	    return this.getTypedRuleContext(EndpointDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypeDefinition(this);
		}
	}


}



class EdgeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypeFiller;
    }

	edgeTypeLabelSetDefinition() {
	    return this.getTypedRuleContext(EdgeTypeLabelSetDefinitionContext,0);
	};

	edgeTypePropertyTypeSetDefinition() {
	    return this.getTypedRuleContext(EdgeTypePropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypeFiller(this);
		}
	}


}



class EdgeTypeLabelSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypeLabelSetDefinition;
    }

	labelSetDefinition() {
	    return this.getTypedRuleContext(LabelSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypeLabelSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypeLabelSetDefinition(this);
		}
	}


}



class EdgeTypePropertyTypeSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypePropertyTypeSetDefinition;
    }

	propertyTypeSetDefinition() {
	    return this.getTypedRuleContext(PropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypePropertyTypeSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypePropertyTypeSetDefinition(this);
		}
	}


}



class FullEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePattern;
    }

	fullEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingRightContext,0);
	};

	fullEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingLeftContext,0);
	};

	fullEdgeTypePatternAnyDirection() {
	    return this.getTypedRuleContext(FullEdgeTypePatternAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePattern(this);
		}
	}


}



class FullEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePatternPointingRight;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	arcTypePointingRight() {
	    return this.getTypedRuleContext(ArcTypePointingRightContext,0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePatternPointingRight(this);
		}
	}


}



class FullEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	arcTypePointingLeft() {
	    return this.getTypedRuleContext(ArcTypePointingLeftContext,0);
	};

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePatternPointingLeft(this);
		}
	}


}



class FullEdgeTypePatternAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePatternAnyDirection;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	arcTypeAnyDirection() {
	    return this.getTypedRuleContext(ArcTypeAnyDirectionContext,0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePatternAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePatternAnyDirection(this);
		}
	}


}



class ArcTypePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypePointingRight;
    }

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypePointingRight(this);
		}
	}


}



class ArcTypePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypePointingLeft;
    }

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypePointingLeft(this);
		}
	}


}



class ArcTypeAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypeAnyDirection;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_ARROW_TILDE() {
	    return this.getToken(GqlParser.RIGHT_ARROW_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypeAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypeAnyDirection(this);
		}
	}


}



class ArcTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypeFiller;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypeFiller(this);
		}
	}


}



class AbbreviatedEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePattern;
    }

	abbreviatedEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingRightContext,0);
	};

	abbreviatedEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingLeftContext,0);
	};

	abbreviatedEdgeTypePatternAnyDirection() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePattern(this);
		}
	}


}



class AbbreviatedEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}


}



class AbbreviatedEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}


}



class AbbreviatedEdgeTypePatternAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePatternAnyDirection;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternAnyDirection(this);
		}
	}


}



class SourceNodeTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sourceNodeTypeReference;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSourceNodeTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSourceNodeTypeReference(this);
		}
	}


}



class DestinationNodeTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_destinationNodeTypeReference;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDestinationNodeTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDestinationNodeTypeReference(this);
		}
	}


}



class EdgeKindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeKind;
    }

	DIRECTED() {
	    return this.getToken(GqlParser.DIRECTED, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GqlParser.UNDIRECTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeKind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeKind(this);
		}
	}


}



class EndpointDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointDefinition;
    }

	CONNECTING() {
	    return this.getToken(GqlParser.CONNECTING, 0);
	};

	endpointPairDefinition() {
	    return this.getTypedRuleContext(EndpointPairDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointDefinition(this);
		}
	}


}



class EndpointPairDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointPairDefinition;
    }

	endpointPairDefinitionPointingRight() {
	    return this.getTypedRuleContext(EndpointPairDefinitionPointingRightContext,0);
	};

	endpointPairDefinitionPointingLeft() {
	    return this.getTypedRuleContext(EndpointPairDefinitionPointingLeftContext,0);
	};

	endpointPairDefinitionAnyDirection() {
	    return this.getTypedRuleContext(EndpointPairDefinitionAnyDirectionContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointPairDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointPairDefinition(this);
		}
	}


}



class EndpointPairDefinitionPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointPairDefinitionPointingRight;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	connectorPointingRight() {
	    return this.getTypedRuleContext(ConnectorPointingRightContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointPairDefinitionPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointPairDefinitionPointingRight(this);
		}
	}


}



class EndpointPairDefinitionPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointPairDefinitionPointingLeft;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointPairDefinitionPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointPairDefinitionPointingLeft(this);
		}
	}


}



class EndpointPairDefinitionAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointPairDefinitionAnyDirection;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	connectorAnyDirection() {
	    return this.getTypedRuleContext(ConnectorAnyDirectionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointPairDefinitionAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointPairDefinitionAnyDirection(this);
		}
	}


}



class ConnectorPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_connectorPointingRight;
    }

	TO() {
	    return this.getToken(GqlParser.TO, 0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConnectorPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConnectorPointingRight(this);
		}
	}


}



class ConnectorAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_connectorAnyDirection;
    }

	TO() {
	    return this.getToken(GqlParser.TO, 0);
	};

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConnectorAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConnectorAnyDirection(this);
		}
	}


}



class LabelSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelSetDefinition;
    }

	LABEL() {
	    return this.getToken(GqlParser.LABEL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LABELS() {
	    return this.getToken(GqlParser.LABELS, 0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	isLabelExpression() {
	    return this.getTypedRuleContext(IsLabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelSetDefinition(this);
		}
	}


}



class PropertyTypeSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyTypeSetDefinition;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	propertyTypeDefinitionList() {
	    return this.getTypedRuleContext(PropertyTypeDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyTypeSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyTypeSetDefinition(this);
		}
	}


}



class PropertyTypeDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyTypeDefinitionList;
    }

	propertyTypeDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyTypeDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PropertyTypeDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyTypeDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyTypeDefinitionList(this);
		}
	}


}



class PropertyTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyTypeDefinition;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyTypeDefinition(this);
		}
	}


}



class DropGraphTypeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropGraphTypeStatement;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropGraphTypeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropGraphTypeStatement(this);
		}
	}


}



class CreateProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createProcedureStatement;
    }

	PROCEDURE() {
	    return this.getToken(GqlParser.PROCEDURE, 0);
	};

	catalogProcedureParentAndName() {
	    return this.getTypedRuleContext(CatalogProcedureParentAndNameContext,0);
	};

	ofTypeSignature() {
	    return this.getTypedRuleContext(OfTypeSignatureContext,0);
	};

	procedureInitializer() {
	    return this.getTypedRuleContext(ProcedureInitializerContext,0);
	};

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateProcedureStatement(this);
		}
	}


}



class DropProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropProcedureStatement;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	PROCEDURE() {
	    return this.getToken(GqlParser.PROCEDURE, 0);
	};

	catalogProcedureParentAndName() {
	    return this.getTypedRuleContext(CatalogProcedureParentAndNameContext,0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropProcedureStatement(this);
		}
	}


}



class CreateQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createQueryStatement;
    }

	QUERY() {
	    return this.getToken(GqlParser.QUERY, 0);
	};

	catalogQueryParentAndName() {
	    return this.getTypedRuleContext(CatalogQueryParentAndNameContext,0);
	};

	ofTypeSignature() {
	    return this.getTypedRuleContext(OfTypeSignatureContext,0);
	};

	queryInitializer() {
	    return this.getTypedRuleContext(QueryInitializerContext,0);
	};

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateQueryStatement(this);
		}
	}


}



class DropQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropQueryStatement;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	QUERY() {
	    return this.getToken(GqlParser.QUERY, 0);
	};

	catalogQueryParentAndName() {
	    return this.getTypedRuleContext(CatalogQueryParentAndNameContext,0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropQueryStatement(this);
		}
	}


}



class CreateFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createFunctionStatement;
    }

	FUNCTION() {
	    return this.getToken(GqlParser.FUNCTION, 0);
	};

	catalogFunctionParentAndName() {
	    return this.getTypedRuleContext(CatalogFunctionParentAndNameContext,0);
	};

	ofTypeSignature() {
	    return this.getTypedRuleContext(OfTypeSignatureContext,0);
	};

	functionInitializer() {
	    return this.getTypedRuleContext(FunctionInitializerContext,0);
	};

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateFunctionStatement(this);
		}
	}


}



class DropFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropFunctionStatement;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(GqlParser.FUNCTION, 0);
	};

	catalogFunctionParentAndName() {
	    return this.getTypedRuleContext(CatalogFunctionParentAndNameContext,0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropFunctionStatement(this);
		}
	}


}



class CallCatalogModifyingProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callCatalogModifyingProcedureStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallCatalogModifyingProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallCatalogModifyingProcedureStatement(this);
		}
	}


}



class LinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_linearDataModifyingStatement;
    }

	focusedLinearDataModifyingStatement() {
	    return this.getTypedRuleContext(FocusedLinearDataModifyingStatementContext,0);
	};

	ambientLinearDataModifyingStatement() {
	    return this.getTypedRuleContext(AmbientLinearDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLinearDataModifyingStatement(this);
		}
	}


}



class FocusedLinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearDataModifyingStatement;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	focusedLinearDataModifyingStatementBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FocusedLinearDataModifyingStatementBodyContext);
	    } else {
	        return this.getTypedRuleContext(FocusedLinearDataModifyingStatementBodyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearDataModifyingStatement(this);
		}
	}


}



class FocusedLinearDataModifyingStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearDataModifyingStatementBody;
    }

	simpleLinearQueryStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleLinearQueryStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleLinearQueryStatementContext,i);
	    }
	};

	simpleDataModifyingStatement() {
	    return this.getTypedRuleContext(SimpleDataModifyingStatementContext,0);
	};

	simpleDataAccessingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleDataAccessingStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleDataAccessingStatementContext,i);
	    }
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	useGraphClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UseGraphClauseContext);
	    } else {
	        return this.getTypedRuleContext(UseGraphClauseContext,i);
	    }
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearDataModifyingStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearDataModifyingStatementBody(this);
		}
	}


}



class AmbientLinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ambientLinearDataModifyingStatement;
    }

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	simpleDataModifyingStatement() {
	    return this.getTypedRuleContext(SimpleDataModifyingStatementContext,0);
	};

	simpleDataAccessingStatement() {
	    return this.getTypedRuleContext(SimpleDataAccessingStatementContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAmbientLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAmbientLinearDataModifyingStatement(this);
		}
	}


}



class ConditionalDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_conditionalDataModifyingStatement;
    }

	whenThenLinearDataModifyingStatementBranch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenThenLinearDataModifyingStatementBranchContext);
	    } else {
	        return this.getTypedRuleContext(WhenThenLinearDataModifyingStatementBranchContext,i);
	    }
	};

	elseLinearDataModifyingStatementBranch() {
	    return this.getTypedRuleContext(ElseLinearDataModifyingStatementBranchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConditionalDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConditionalDataModifyingStatement(this);
		}
	}


}



class WhenThenLinearDataModifyingStatementBranchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whenThenLinearDataModifyingStatementBranch;
    }

	whenClause() {
	    return this.getTypedRuleContext(WhenClauseContext,0);
	};

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	linearDataModifyingStatement() {
	    return this.getTypedRuleContext(LinearDataModifyingStatementContext,0);
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhenThenLinearDataModifyingStatementBranch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhenThenLinearDataModifyingStatementBranch(this);
		}
	}


}



class ElseLinearDataModifyingStatementBranchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elseLinearDataModifyingStatementBranch;
    }

	ELSE() {
	    return this.getToken(GqlParser.ELSE, 0);
	};

	linearDataModifyingStatement() {
	    return this.getTypedRuleContext(LinearDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElseLinearDataModifyingStatementBranch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElseLinearDataModifyingStatementBranch(this);
		}
	}


}



class WhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whenClause;
    }

	WHEN() {
	    return this.getToken(GqlParser.WHEN, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhenClause(this);
		}
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(GqlParser.DO, 0);
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDoStatement(this);
		}
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertStatement;
    }

	INSERT() {
	    return this.getToken(GqlParser.INSERT, 0);
	};

	simpleGraphPattern() {
	    return this.getTypedRuleContext(SimpleGraphPatternContext,0);
	};

	OPTIONAL() {
	    return this.getToken(GqlParser.OPTIONAL, 0);
	};

	whenClause() {
	    return this.getTypedRuleContext(WhenClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertStatement(this);
		}
	}


}



class MergeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mergeStatement;
    }

	MERGE() {
	    return this.getToken(GqlParser.MERGE, 0);
	};

	simpleGraphPattern() {
	    return this.getTypedRuleContext(SimpleGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMergeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMergeStatement(this);
		}
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setStatement;
    }

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	setItemList() {
	    return this.getTypedRuleContext(SetItemListContext,0);
	};

	whenClause() {
	    return this.getTypedRuleContext(WhenClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetStatement(this);
		}
	}


}



class SetItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setItemList;
    }

	setItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetItemContext);
	    } else {
	        return this.getTypedRuleContext(SetItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetItemList(this);
		}
	}


}



class SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setItem;
    }

	setPropertyItem() {
	    return this.getTypedRuleContext(SetPropertyItemContext,0);
	};

	setAllPropertiesItem() {
	    return this.getTypedRuleContext(SetAllPropertiesItemContext,0);
	};

	setLabelItem() {
	    return this.getTypedRuleContext(SetLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetItem(this);
		}
	}


}



class SetPropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setPropertyItem;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetPropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetPropertyItem(this);
		}
	}


}



class SetAllPropertiesItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setAllPropertiesItem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetAllPropertiesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetAllPropertiesItem(this);
		}
	}


}



class SetLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setLabelItem;
    }

	labelSetExpression() {
	    return this.getTypedRuleContext(LabelSetExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetLabelItem(this);
		}
	}


}



class LabelSetExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelSetExpression;
    }

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.AMPERSAND);
	    } else {
	        return this.getToken(GqlParser.AMPERSAND, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelSetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelSetExpression(this);
		}
	}


}



class RemoveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeStatement;
    }

	REMOVE() {
	    return this.getToken(GqlParser.REMOVE, 0);
	};

	removeItemList() {
	    return this.getTypedRuleContext(RemoveItemListContext,0);
	};

	whenClause() {
	    return this.getTypedRuleContext(WhenClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveStatement(this);
		}
	}


}



class RemoveItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeItemList;
    }

	removeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(RemoveItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveItemList(this);
		}
	}


}



class RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeItem;
    }

	removePropertyItem() {
	    return this.getTypedRuleContext(RemovePropertyItemContext,0);
	};

	removeLabelItem() {
	    return this.getTypedRuleContext(RemoveLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveItem(this);
		}
	}


}



class RemovePropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removePropertyItem;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemovePropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemovePropertyItem(this);
		}
	}


}



class RemoveLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeLabelItem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	labelSetExpression() {
	    return this.getTypedRuleContext(LabelSetExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveLabelItem(this);
		}
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_deleteStatement;
    }

	DELETE() {
	    return this.getToken(GqlParser.DELETE, 0);
	};

	deleteItemList() {
	    return this.getTypedRuleContext(DeleteItemListContext,0);
	};

	DETACH() {
	    return this.getToken(GqlParser.DETACH, 0);
	};

	whenClause() {
	    return this.getTypedRuleContext(WhenClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDeleteStatement(this);
		}
	}


}



class DeleteItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_deleteItemList;
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDeleteItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDeleteItemList(this);
		}
	}


}



class CompositeQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compositeQueryStatement;
    }

	compositeQueryExpression() {
	    return this.getTypedRuleContext(CompositeQueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompositeQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompositeQueryStatement(this);
		}
	}


}



class ConditionalQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_conditionalQueryStatement;
    }

	whenThenLinearQueryBranch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenThenLinearQueryBranchContext);
	    } else {
	        return this.getTypedRuleContext(WhenThenLinearQueryBranchContext,i);
	    }
	};

	elseLinearQueryBranch() {
	    return this.getTypedRuleContext(ElseLinearQueryBranchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConditionalQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConditionalQueryStatement(this);
		}
	}


}



class WhenThenLinearQueryBranchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whenThenLinearQueryBranch;
    }

	whenClause() {
	    return this.getTypedRuleContext(WhenClauseContext,0);
	};

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	linearQueryStatement() {
	    return this.getTypedRuleContext(LinearQueryStatementContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhenThenLinearQueryBranch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhenThenLinearQueryBranch(this);
		}
	}


}



class ElseLinearQueryBranchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elseLinearQueryBranch;
    }

	ELSE() {
	    return this.getToken(GqlParser.ELSE, 0);
	};

	linearQueryStatement() {
	    return this.getTypedRuleContext(LinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElseLinearQueryBranch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElseLinearQueryBranch(this);
		}
	}


}



class CompositeQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compositeQueryExpression;
    }

	linearQueryStatement() {
	    return this.getTypedRuleContext(LinearQueryStatementContext,0);
	};

	compositeQueryExpression() {
	    return this.getTypedRuleContext(CompositeQueryExpressionContext,0);
	};

	queryConjunction() {
	    return this.getTypedRuleContext(QueryConjunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompositeQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompositeQueryExpression(this);
		}
	}


}



class QueryConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_queryConjunction;
    }

	setOperator() {
	    return this.getTypedRuleContext(SetOperatorContext,0);
	};

	OTHERWISE() {
	    return this.getToken(GqlParser.OTHERWISE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQueryConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQueryConjunction(this);
		}
	}


}



class SetOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setOperator;
    }

	UNION() {
	    return this.getToken(GqlParser.UNION, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	EXCEPT() {
	    return this.getToken(GqlParser.EXCEPT, 0);
	};

	INTERSECT() {
	    return this.getToken(GqlParser.INTERSECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetOperator(this);
		}
	}


}



class LinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_linearQueryStatement;
    }

	focusedLinearQueryStatement() {
	    return this.getTypedRuleContext(FocusedLinearQueryStatementContext,0);
	};

	ambientLinearQueryStatement() {
	    return this.getTypedRuleContext(AmbientLinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLinearQueryStatement(this);
		}
	}


}



class AmbientLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ambientLinearQueryStatement;
    }

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	simpleDataAccessingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleDataAccessingStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleDataAccessingStatementContext,i);
	    }
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAmbientLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAmbientLinearQueryStatement(this);
		}
	}


}



class FocusedLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearQueryStatement;
    }

	fromGraphClause() {
	    return this.getTypedRuleContext(FromGraphClauseContext,0);
	};

	focusedLinearQueryStatementBody() {
	    return this.getTypedRuleContext(FocusedLinearQueryStatementBodyContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearQueryStatement(this);
		}
	}


}



class FocusedLinearQueryStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearQueryStatementBody;
    }

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	simpleLinearQueryStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleLinearQueryStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleLinearQueryStatementContext,i);
	    }
	};

	fromGraphClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromGraphClauseContext);
	    } else {
	        return this.getTypedRuleContext(FromGraphClauseContext,i);
	    }
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearQueryStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearQueryStatementBody(this);
		}
	}


}



class SimpleLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleLinearQueryStatement;
    }

	simpleQueryStatement() {
	    return this.getTypedRuleContext(SimpleQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleLinearQueryStatement(this);
		}
	}


}



class MatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_matchStatement;
    }

	MATCH() {
	    return this.getToken(GqlParser.MATCH, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	statementMode() {
	    return this.getTypedRuleContext(StatementModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMatchStatement(this);
		}
	}


}



class CallQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callQueryStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallQueryStatement(this);
		}
	}


}



class MandatoryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mandatoryStatement;
    }

	MANDATORY() {
	    return this.getToken(GqlParser.MANDATORY, 0);
	};

	procedureCall() {
	    return this.getTypedRuleContext(ProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMandatoryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMandatoryStatement(this);
		}
	}


}



class OptionalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_optionalStatement;
    }

	OPTIONAL() {
	    return this.getToken(GqlParser.OPTIONAL, 0);
	};

	procedureCall() {
	    return this.getTypedRuleContext(ProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOptionalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOptionalStatement(this);
		}
	}


}



class FilterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_filterStatement;
    }

	FILTER() {
	    return this.getToken(GqlParser.FILTER, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFilterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFilterStatement(this);
		}
	}


}



class LetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_letStatement;
    }

	LET() {
	    return this.getToken(GqlParser.LET, 0);
	};

	compactVariableDefinitionList() {
	    return this.getTypedRuleContext(CompactVariableDefinitionListContext,0);
	};

	statementMode() {
	    return this.getTypedRuleContext(StatementModeContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLetStatement(this);
		}
	}


}



class AggregateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_aggregateStatement;
    }

	AGGREGATE() {
	    return this.getToken(GqlParser.AGGREGATE, 0);
	};

	compactValueVariableDefinitionList() {
	    return this.getTypedRuleContext(CompactValueVariableDefinitionListContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAggregateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAggregateStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forStatement;
    }

	FOR() {
	    return this.getToken(GqlParser.FOR, 0);
	};

	forItemList() {
	    return this.getTypedRuleContext(ForItemListContext,0);
	};

	statementMode() {
	    return this.getTypedRuleContext(StatementModeContext,0);
	};

	forOrdinalityOrIndex() {
	    return this.getTypedRuleContext(ForOrdinalityOrIndexContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forItemList;
    }

	forItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForItemContext);
	    } else {
	        return this.getTypedRuleContext(ForItemContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.AND);
	    } else {
	        return this.getToken(GqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForItemList(this);
		}
	}


}



class ForItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forItem;
    }

	forItemAlias() {
	    return this.getTypedRuleContext(ForItemAliasContext,0);
	};

	collectionValueExpression() {
	    return this.getTypedRuleContext(CollectionValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForItem(this);
		}
	}


}



class ForItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forItemAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(GqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForItemAlias(this);
		}
	}


}



class ForOrdinalityOrIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forOrdinalityOrIndex;
    }

	WITH() {
	    return this.getToken(GqlParser.WITH, 0);
	};

	ORDINALITY() {
	    return this.getToken(GqlParser.ORDINALITY, 0);
	};

	INDEX() {
	    return this.getToken(GqlParser.INDEX, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForOrdinalityOrIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForOrdinalityOrIndex(this);
		}
	}


}



class OrderByAndPageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderByAndPageStatement;
    }

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderByAndPageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderByAndPageStatement(this);
		}
	}


}



class CallFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callFunctionStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallFunctionStatement(this);
		}
	}


}



class PrimitiveResultStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveResultStatement;
    }

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	orderByAndPageStatement() {
	    return this.getTypedRuleContext(OrderByAndPageStatementContext,0);
	};

	projectStatement() {
	    return this.getTypedRuleContext(ProjectStatementContext,0);
	};

	END() {
	    return this.getToken(GqlParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveResultStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveResultStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(GqlParser.RETURN, 0);
	};

	returnStatementBody() {
	    return this.getTypedRuleContext(ReturnStatementBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ReturnStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnStatementBody;
    }

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	returnItemList() {
	    return this.getTypedRuleContext(ReturnItemListContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnStatementBody(this);
		}
	}


}



class ReturnItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnItemList;
    }

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnItemList(this);
		}
	}


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnItem;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	returnItemAlias() {
	    return this.getTypedRuleContext(ReturnItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnItem(this);
		}
	}


}



class ReturnItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnItemAlias;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnItemAlias(this);
		}
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectStatement;
    }

	SELECT() {
	    return this.getToken(GqlParser.SELECT, 0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	selectStatementBody() {
	    return this.getTypedRuleContext(SelectStatementBodyContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectStatement(this);
		}
	}


}



class SelectItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectItemList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectItemList(this);
		}
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectItem;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	selectItemAlias() {
	    return this.getTypedRuleContext(SelectItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectItem(this);
		}
	}


}



class SelectItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectItemAlias;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectItemAlias(this);
		}
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(GqlParser.HAVING, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitHavingClause(this);
		}
	}


}



class SelectStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectStatementBody;
    }

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	selectGraphMatchList() {
	    return this.getTypedRuleContext(SelectGraphMatchListContext,0);
	};

	selectQuerySpecification() {
	    return this.getTypedRuleContext(SelectQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectStatementBody(this);
		}
	}


}



class SelectGraphMatchListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectGraphMatchList;
    }

	selectGraphMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectGraphMatchContext);
	    } else {
	        return this.getTypedRuleContext(SelectGraphMatchContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectGraphMatchList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectGraphMatchList(this);
		}
	}


}



class SelectGraphMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectGraphMatch;
    }

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectGraphMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectGraphMatch(this);
		}
	}


}



class SelectQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectQuerySpecification;
    }

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	fromGraphClause() {
	    return this.getTypedRuleContext(FromGraphClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectQuerySpecification(this);
		}
	}


}



class ProjectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_projectStatement;
    }

	PROJECT() {
	    return this.getToken(GqlParser.PROJECT, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProjectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProjectStatement(this);
		}
	}


}



class FromGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fromGraphClause;
    }

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFromGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFromGraphClause(this);
		}
	}


}



class UseGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_useGraphClause;
    }

	USE() {
	    return this.getToken(GqlParser.USE, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUseGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUseGraphClause(this);
		}
	}


}



class AtSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_atSchemaClause;
    }

	AT() {
	    return this.getToken(GqlParser.AT, 0);
	};

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAtSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAtSchemaClause(this);
		}
	}


}



class OfTypeSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ofTypeSignature;
    }

	ofTypePrefix() {
	    return this.getTypedRuleContext(OfTypePrefixContext,0);
	};

	typeSignature() {
	    return this.getTypedRuleContext(TypeSignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOfTypeSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOfTypeSignature(this);
		}
	}


}



class TypeSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_typeSignature;
    }

	parenthesizedFormalParameterList() {
	    return this.getTypedRuleContext(ParenthesizedFormalParameterListContext,0);
	};

	ofTypePrefix() {
	    return this.getTypedRuleContext(OfTypePrefixContext,0);
	};

	procedureResultType() {
	    return this.getTypedRuleContext(ProcedureResultTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTypeSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTypeSignature(this);
		}
	}


}



class ParenthesizedFormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedFormalParameterList;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedFormalParameterList(this);
		}
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_formalParameterList;
    }

	mandatoryFormalParameterList() {
	    return this.getTypedRuleContext(MandatoryFormalParameterListContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	optionalFormalParameterList() {
	    return this.getTypedRuleContext(OptionalFormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}


}



class MandatoryFormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mandatoryFormalParameterList;
    }

	formalParameterDeclarationList() {
	    return this.getTypedRuleContext(FormalParameterDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMandatoryFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMandatoryFormalParameterList(this);
		}
	}


}



class OptionalFormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_optionalFormalParameterList;
    }

	OPTIONAL() {
	    return this.getToken(GqlParser.OPTIONAL, 0);
	};

	formalParameterDefinitionList() {
	    return this.getTypedRuleContext(FormalParameterDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOptionalFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOptionalFormalParameterList(this);
		}
	}


}



class FormalParameterDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_formalParameterDeclarationList;
    }

	formalParameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterDeclarationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFormalParameterDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFormalParameterDeclarationList(this);
		}
	}


}



class FormalParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_formalParameterDeclaration;
    }

	parameterCardinality() {
	    return this.getTypedRuleContext(ParameterCardinalityContext,0);
	};

	compactVariableDeclaration() {
	    return this.getTypedRuleContext(CompactVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFormalParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFormalParameterDeclaration(this);
		}
	}


}



class FormalParameterDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_formalParameterDefinitionList;
    }

	formalParameterDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFormalParameterDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFormalParameterDefinitionList(this);
		}
	}


}



class FormalParameterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_formalParameterDefinition;
    }

	parameterCardinality() {
	    return this.getTypedRuleContext(ParameterCardinalityContext,0);
	};

	compactVariableDefinition() {
	    return this.getTypedRuleContext(CompactVariableDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFormalParameterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFormalParameterDefinition(this);
		}
	}


}



class ParameterCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameterCardinality;
    }

	SINGLE() {
	    return this.getToken(GqlParser.SINGLE, 0);
	};

	MULTI() {
	    return this.getToken(GqlParser.MULTI, 0);
	};

	MULTIPLE() {
	    return this.getToken(GqlParser.MULTIPLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameterCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameterCardinality(this);
		}
	}


}



class ProcedureResultTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureResultType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureResultType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureResultType(this);
		}
	}


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPattern;
    }

	pathPatternList() {
	    return this.getTypedRuleContext(PathPatternListContext,0);
	};

	keepClause() {
	    return this.getTypedRuleContext(KeepClauseContext,0);
	};

	graphPatternWhereClause() {
	    return this.getTypedRuleContext(GraphPatternWhereClauseContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPattern(this);
		}
	}


}



class PathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternList;
    }

	pathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathPatternContext);
	    } else {
	        return this.getTypedRuleContext(PathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternList(this);
		}
	}


}



class PathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPattern;
    }

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	pathPatternExpression() {
	    return this.getTypedRuleContext(PathPatternExpressionContext,0);
	};

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPattern(this);
		}
	}


}



class KeepClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_keepClause;
    }

	KEEP() {
	    return this.getToken(GqlParser.KEEP, 0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterKeepClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitKeepClause(this);
		}
	}


}



class GraphPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternWhereClause(this);
		}
	}


}



class PathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternExpression;
    }

	pathTerm() {
	    return this.getTypedRuleContext(PathTermContext,0);
	};

	pathMultisetAlternation() {
	    return this.getTypedRuleContext(PathMultisetAlternationContext,0);
	};

	pathPatternUnion() {
	    return this.getTypedRuleContext(PathPatternUnionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternExpression(this);
		}
	}


}



class PathMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathMultisetAlternation;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	MULTISET_ALT_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.MULTISET_ALT_OPERATOR);
	    } else {
	        return this.getToken(GqlParser.MULTISET_ALT_OPERATOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathMultisetAlternation(this);
		}
	}


}



class PathPatternUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternUnion;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternUnion(this);
		}
	}


}



class PathTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathTerm;
    }

	pathFactor() {
	    return this.getTypedRuleContext(PathFactorContext,0);
	};

	pathTerm() {
	    return this.getTypedRuleContext(PathTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathTerm(this);
		}
	}


}



class PathFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathFactor;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	quantifiedPathPrimary() {
	    return this.getTypedRuleContext(QuantifiedPathPrimaryContext,0);
	};

	questionedPathPrimary() {
	    return this.getTypedRuleContext(QuestionedPathPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathFactor(this);
		}
	}


}



class QuantifiedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_quantifiedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQuantifiedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQuantifiedPathPrimary(this);
		}
	}


}



class QuestionedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_questionedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GqlParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQuestionedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQuestionedPathPrimary(this);
		}
	}


}



class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPrimary;
    }

	elementPattern() {
	    return this.getTypedRuleContext(ElementPatternContext,0);
	};

	parenthesizedPathPatternExpression() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternExpressionContext,0);
	};

	simplifiedPathPatternExpression() {
	    return this.getTypedRuleContext(SimplifiedPathPatternExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPrimary(this);
		}
	}


}



class ElementPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPattern;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	edgePattern() {
	    return this.getTypedRuleContext(EdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPattern(this);
		}
	}


}



class NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodePattern(this);
		}
	}


}



class ElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPatternFiller;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	isLabelExpression() {
	    return this.getTypedRuleContext(IsLabelExpressionContext,0);
	};

	elementPatternPredicate() {
	    return this.getTypedRuleContext(ElementPatternPredicateContext,0);
	};

	elementPatternCostClause() {
	    return this.getTypedRuleContext(ElementPatternCostClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPatternFiller(this);
		}
	}


}



class IsLabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_isLabelExpression;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIsLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIsLabelExpression(this);
		}
	}


}



class ElementPatternPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPatternPredicate;
    }

	elementPatternWhereClause() {
	    return this.getTypedRuleContext(ElementPatternWhereClauseContext,0);
	};

	elementPropertySpecification() {
	    return this.getTypedRuleContext(ElementPropertySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPatternPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPatternPredicate(this);
		}
	}


}



class ElementPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPatternWhereClause(this);
		}
	}


}



class ElementPropertySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPropertySpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPropertySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPropertySpecification(this);
		}
	}


}



class PropertyKeyValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyKeyValuePairList;
    }

	propertyKeyValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyKeyValuePairContext);
	    } else {
	        return this.getTypedRuleContext(PropertyKeyValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyKeyValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyKeyValuePairList(this);
		}
	}


}



class PropertyKeyValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyKeyValuePair;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyKeyValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyKeyValuePair(this);
		}
	}


}



class ElementPatternCostClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPatternCostClause;
    }

	costClause() {
	    return this.getTypedRuleContext(CostClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPatternCostClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPatternCostClause(this);
		}
	}


}



class CostClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_costClause;
    }

	COST() {
	    return this.getToken(GqlParser.COST, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	DEFAULT() {
	    return this.getToken(GqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCostClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCostClause(this);
		}
	}


}



class EdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgePattern;
    }

	fullEdgePattern() {
	    return this.getTypedRuleContext(FullEdgePatternContext,0);
	};

	abbreviatedEdgePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgePattern(this);
		}
	}


}



class FullEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgePattern;
    }

	fullEdgePointingLeft() {
	    return this.getTypedRuleContext(FullEdgePointingLeftContext,0);
	};

	fullEdgeUndirected() {
	    return this.getTypedRuleContext(FullEdgeUndirectedContext,0);
	};

	fullEdgePointingRight() {
	    return this.getTypedRuleContext(FullEdgePointingRightContext,0);
	};

	fullEdgeLeftOrUndirected() {
	    return this.getTypedRuleContext(FullEdgeLeftOrUndirectedContext,0);
	};

	fullEdgeUndirectedOrRight() {
	    return this.getTypedRuleContext(FullEdgeUndirectedOrRightContext,0);
	};

	fullEdgeLeftOrRight() {
	    return this.getTypedRuleContext(FullEdgeLeftOrRightContext,0);
	};

	fullEdgeAnyDirection() {
	    return this.getTypedRuleContext(FullEdgeAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgePattern(this);
		}
	}


}



class FullEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgePointingLeft;
    }

	LEFT_ARROW_RIGHT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_RIGHT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgePointingLeft(this);
		}
	}


}



class FullEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeUndirected(this);
		}
	}


}



class FullEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgePointingRight(this);
		}
	}


}



class FullEdgeLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeLeftOrUndirected;
    }

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeLeftOrUndirected(this);
		}
	}


}



class FullEdgeUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeUndirectedOrRight;
    }

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeUndirectedOrRight(this);
		}
	}


}



class FullEdgeLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeLeftOrRight;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeLeftOrRight(this);
		}
	}


}



class FullEdgeAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeAnyDirection;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeAnyDirection(this);
		}
	}


}



class AbbreviatedEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgePattern;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	};

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(GqlParser.NOT_EQUALS, 0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgePattern(this);
		}
	}


}



class GraphPatternQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternQuantifier;
    }

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	fixedQuantifier() {
	    return this.getTypedRuleContext(FixedQuantifierContext,0);
	};

	generalQuantifier() {
	    return this.getTypedRuleContext(GeneralQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternQuantifier(this);
		}
	}


}



class FixedQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fixedQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFixedQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFixedQuantifier(this);
		}
	}


}



class GeneralQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	unsignedInteger = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnsignedIntegerContext);
	    } else {
	        return this.getTypedRuleContext(UnsignedIntegerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralQuantifier(this);
		}
	}


}



class ParenthesizedPathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedPathPatternExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	subpathVariableDeclaration() {
	    return this.getTypedRuleContext(SubpathVariableDeclarationContext,0);
	};

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	pathPatternExpression() {
	    return this.getTypedRuleContext(PathPatternExpressionContext,0);
	};

	parenthesizedPathPatternWhereClause() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternWhereClauseContext,0);
	};

	costClause() {
	    return this.getTypedRuleContext(CostClauseContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedPathPatternExpression(this);
		}
	}


}



class SubpathVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_subpathVariableDeclaration;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSubpathVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSubpathVariableDeclaration(this);
		}
	}


}



class ParenthesizedPathPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedPathPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedPathPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedPathPatternWhereClause(this);
		}
	}


}



class PathPatternPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternPrefix;
    }

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	pathSearchPrefix() {
	    return this.getTypedRuleContext(PathSearchPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternPrefix(this);
		}
	}


}



class PathModePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathModePrefix;
    }

	PATH_MODE() {
	    return this.getToken(GqlParser.PATH_MODE, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathModePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathModePrefix(this);
		}
	}


}



class PathSearchPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathSearchPrefix;
    }

	allPathSearch() {
	    return this.getTypedRuleContext(AllPathSearchContext,0);
	};

	anyPathSearch() {
	    return this.getTypedRuleContext(AnyPathSearchContext,0);
	};

	shortestPathSearch() {
	    return this.getTypedRuleContext(ShortestPathSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathSearchPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathSearchPrefix(this);
		}
	}


}



class AllPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_allPathSearch;
    }

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	PATH_MODE() {
	    return this.getToken(GqlParser.PATH_MODE, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAllPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAllPathSearch(this);
		}
	}


}



class AnyPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_anyPathSearch;
    }

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	PATH_MODE() {
	    return this.getToken(GqlParser.PATH_MODE, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAnyPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAnyPathSearch(this);
		}
	}


}



class ShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_shortestPathSearch;
    }

	allShortestPathSearch() {
	    return this.getTypedRuleContext(AllShortestPathSearchContext,0);
	};

	anyShortestPathSearch() {
	    return this.getTypedRuleContext(AnyShortestPathSearchContext,0);
	};

	countedShortestPathSearch() {
	    return this.getTypedRuleContext(CountedShortestPathSearchContext,0);
	};

	countedShortestGroupSearch() {
	    return this.getTypedRuleContext(CountedShortestGroupSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitShortestPathSearch(this);
		}
	}


}



class AllShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_allShortestPathSearch;
    }

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	PATH_MODE() {
	    return this.getToken(GqlParser.PATH_MODE, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	PATHS() {
	    return this.getToken(GqlParser.PATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAllShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAllShortestPathSearch(this);
		}
	}


}



class AnyShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_anyShortestPathSearch;
    }

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	PATH_MODE() {
	    return this.getToken(GqlParser.PATH_MODE, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	PATHS() {
	    return this.getToken(GqlParser.PATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAnyShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAnyShortestPathSearch(this);
		}
	}


}



class CountedShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_countedShortestPathSearch;
    }

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	PATH_MODE() {
	    return this.getToken(GqlParser.PATH_MODE, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCountedShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCountedShortestPathSearch(this);
		}
	}


}



class CountedShortestGroupSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_countedShortestGroupSearch;
    }

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	PATH_MODE() {
	    return this.getToken(GqlParser.PATH_MODE, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCountedShortestGroupSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCountedShortestGroupSearch(this);
		}
	}


}



class SimpleGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleGraphPattern;
    }

	simplePathPatternList() {
	    return this.getTypedRuleContext(SimplePathPatternListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleGraphPattern(this);
		}
	}


}



class SimplePathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplePathPatternList;
    }

	simplePathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathPatternContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplePathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplePathPatternList(this);
		}
	}


}



class SimplePathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplePathPattern;
    }

	pathPatternExpression() {
	    return this.getTypedRuleContext(PathPatternExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplePathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplePathPattern(this);
		}
	}


}



class LabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelExpression;
    }

	labelTerm() {
	    return this.getTypedRuleContext(LabelTermContext,0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	VERTICAL_BAR() {
	    return this.getToken(GqlParser.VERTICAL_BAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelExpression(this);
		}
	}


}



class LabelTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelTerm;
    }

	labelFactor() {
	    return this.getTypedRuleContext(LabelFactorContext,0);
	};

	labelTerm() {
	    return this.getTypedRuleContext(LabelTermContext,0);
	};

	AMPERSAND() {
	    return this.getToken(GqlParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelTerm(this);
		}
	}


}



class LabelFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelFactor;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PERCENT() {
	    return this.getToken(GqlParser.PERCENT, 0);
	};

	parenthesizedLabelExpression() {
	    return this.getTypedRuleContext(ParenthesizedLabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelFactor(this);
		}
	}


}



class ParenthesizedLabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedLabelExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedLabelExpression(this);
		}
	}


}



class SimplifiedPathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedPathPatternExpression;
    }

	simplifiedDefaultingLeft() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftContext,0);
	};

	simplifiedDefaultingUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedContext,0);
	};

	simplifiedDefaultingRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingRightContext,0);
	};

	simplifiedDefaultingLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrUndirectedContext,0);
	};

	simplifiedDefaultingUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedOrRightContext,0);
	};

	simplifiedDefaultingLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrRightContext,0);
	};

	simplifiedDefaultingAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedDefaultingAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedPathPatternExpression(this);
		}
	}


}



class SimplifiedDefaultingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingLeft;
    }

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingLeft(this);
		}
	}


}



class SimplifiedDefaultingUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingUndirected;
    }

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingUndirected(this);
		}
	}


}



class SimplifiedDefaultingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingRight;
    }

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.MINUS);
	    } else {
	        return this.getToken(GqlParser.MINUS, i);
	    }
	};


	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SOLIDUS);
	    } else {
	        return this.getToken(GqlParser.SOLIDUS, i);
	    }
	};


	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingLeftOrUndirected;
    }

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}


}



class SimplifiedDefaultingUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingUndirectedOrRight;
    }

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingLeftOrRight;
    }

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GqlParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrRight(this);
		}
	}


}



class SimplifiedDefaultingAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingAnyDirection;
    }

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingAnyDirection(this);
		}
	}


}



class SimplifiedContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedContents;
    }

	simplifiedTerm() {
	    return this.getTypedRuleContext(SimplifiedTermContext,0);
	};

	simplifiedPathUnion() {
	    return this.getTypedRuleContext(SimplifiedPathUnionContext,0);
	};

	simplifiedMultisetAlternation() {
	    return this.getTypedRuleContext(SimplifiedMultisetAlternationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedContents(this);
		}
	}


}



class SimplifiedPathUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedPathUnion;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedPathUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedPathUnion(this);
		}
	}


}



class SimplifiedMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedMultisetAlternation;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	MULTISET_ALT_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.MULTISET_ALT_OPERATOR);
	    } else {
	        return this.getToken(GqlParser.MULTISET_ALT_OPERATOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedMultisetAlternation(this);
		}
	}


}



class SimplifiedTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedTerm;
    }

	simplifiedFactorLow() {
	    return this.getTypedRuleContext(SimplifiedFactorLowContext,0);
	};

	simplifiedTerm() {
	    return this.getTypedRuleContext(SimplifiedTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedTerm(this);
		}
	}


}



class SimplifiedFactorLowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedFactorLow;
    }

	simplifiedFactorHigh() {
	    return this.getTypedRuleContext(SimplifiedFactorHighContext,0);
	};

	simplifiedFactorLow() {
	    return this.getTypedRuleContext(SimplifiedFactorLowContext,0);
	};

	AMPERSAND() {
	    return this.getToken(GqlParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedFactorLow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedFactorLow(this);
		}
	}


}



class SimplifiedFactorHighContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedFactorHigh;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	simplifiedQuantified() {
	    return this.getTypedRuleContext(SimplifiedQuantifiedContext,0);
	};

	simplifiedQuestioned() {
	    return this.getTypedRuleContext(SimplifiedQuestionedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedFactorHigh(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedFactorHigh(this);
		}
	}


}



class SimplifiedQuantifiedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedQuantified;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedQuantified(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedQuantified(this);
		}
	}


}



class SimplifiedQuestionedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedQuestioned;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GqlParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedQuestioned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedQuestioned(this);
		}
	}


}



class SimplifiedTertiaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedTertiary;
    }

	simplifiedDirectionOverride() {
	    return this.getTypedRuleContext(SimplifiedDirectionOverrideContext,0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedTertiary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedTertiary(this);
		}
	}


}



class SimplifiedDirectionOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDirectionOverride;
    }

	simplifiedOverrideLeft() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftContext,0);
	};

	simplifiedOverrideUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedContext,0);
	};

	simplifiedOverrideRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideRightContext,0);
	};

	simplifiedOverrideLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrUndirectedContext,0);
	};

	simplifiedOverrideUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedOrRightContext,0);
	};

	simplifiedOverrideLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrRightContext,0);
	};

	simplifiedOverrideAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedOverrideAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDirectionOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDirectionOverride(this);
		}
	}


}



class SimplifiedOverrideLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideLeft;
    }

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideLeft(this);
		}
	}


}



class SimplifiedOverrideUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideUndirected;
    }

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideUndirected(this);
		}
	}


}



class SimplifiedOverrideRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideRight;
    }

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GqlParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideLeftOrUndirected;
    }

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}


}



class SimplifiedOverrideUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideUndirectedOrRight;
    }

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideLeftOrRight;
    }

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GqlParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrRight(this);
		}
	}


}



class SimplifiedOverrideAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideAnyDirection;
    }

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.MINUS_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideAnyDirection(this);
		}
	}


}



class SimplifiedSecondaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedSecondary;
    }

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	simplifiedNegation() {
	    return this.getTypedRuleContext(SimplifiedNegationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedSecondary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedSecondary(this);
		}
	}


}



class SimplifiedNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedNegation;
    }

	EXCLAMATION() {
	    return this.getToken(GqlParser.EXCLAMATION, 0);
	};

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedNegation(this);
		}
	}


}



class SimplifiedPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedPrimary;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedPrimary(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureCall;
    }

	nestedProcedureSpecification() {
	    return this.getTypedRuleContext(NestedProcedureSpecificationContext,0);
	};

	namedProcedureCall() {
	    return this.getTypedRuleContext(NamedProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureCall(this);
		}
	}


}



class NamedProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_namedProcedureCall;
    }

	procedureReference() {
	    return this.getTypedRuleContext(ProcedureReferenceContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	procedureArgumentList() {
	    return this.getTypedRuleContext(ProcedureArgumentListContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNamedProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNamedProcedureCall(this);
		}
	}


}



class ProcedureArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureArgumentList;
    }

	procedureArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureArgumentList(this);
		}
	}


}



class ProcedureArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureArgument;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureArgument(this);
		}
	}


}



class YieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldClause;
    }

	YIELD() {
	    return this.getToken(GqlParser.YIELD, 0);
	};

	yieldItemList() {
	    return this.getTypedRuleContext(YieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldClause(this);
		}
	}


}



class YieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldItemList;
    }

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldItemList(this);
		}
	}


}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldItem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldItem(this);
		}
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_groupByClause;
    }

	GROUP() {
	    return this.getToken(GqlParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(GqlParser.BY, 0);
	};

	groupingElementList() {
	    return this.getTypedRuleContext(GroupingElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}


}



class GroupingElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_groupingElementList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	emptyGroupingSet() {
	    return this.getTypedRuleContext(EmptyGroupingSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGroupingElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGroupingElementList(this);
		}
	}


}



class EmptyGroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_emptyGroupingSet;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEmptyGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEmptyGroupingSet(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(GqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(GqlParser.BY, 0);
	};

	sortSpecificationList() {
	    return this.getTypedRuleContext(SortSpecificationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class AggregateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_aggregateFunction;
    }

	COUNT() {
	    return this.getToken(GqlParser.COUNT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	generalSetFunction() {
	    return this.getTypedRuleContext(GeneralSetFunctionContext,0);
	};

	binarySetFunction() {
	    return this.getTypedRuleContext(BinarySetFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAggregateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAggregateFunction(this);
		}
	}


}



class GeneralSetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalSetFunction;
    }

	generalSetFunctionType() {
	    return this.getTypedRuleContext(GeneralSetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralSetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralSetFunction(this);
		}
	}


}



class BinarySetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_binarySetFunction;
    }

	binarySetFunctionType() {
	    return this.getTypedRuleContext(BinarySetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	dependentValueExpression() {
	    return this.getTypedRuleContext(DependentValueExpressionContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	independentValueExpression() {
	    return this.getTypedRuleContext(IndependentValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBinarySetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBinarySetFunction(this);
		}
	}


}



class GeneralSetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalSetFunctionType;
    }

	AVG() {
	    return this.getToken(GqlParser.AVG, 0);
	};

	COUNT() {
	    return this.getToken(GqlParser.COUNT, 0);
	};

	MAX() {
	    return this.getToken(GqlParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(GqlParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(GqlParser.SUM, 0);
	};

	PRODUCT() {
	    return this.getToken(GqlParser.PRODUCT, 0);
	};

	COLLECT() {
	    return this.getToken(GqlParser.COLLECT, 0);
	};

	ST_DEV() {
	    return this.getToken(GqlParser.ST_DEV, 0);
	};

	ST_DEV_P() {
	    return this.getToken(GqlParser.ST_DEV_P, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralSetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralSetFunctionType(this);
		}
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(GqlParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetQuantifier(this);
		}
	}


}



class BinarySetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_binarySetFunctionType;
    }

	PERCENTILE_CONT() {
	    return this.getToken(GqlParser.PERCENTILE_CONT, 0);
	};

	PERCENTILE_DIST() {
	    return this.getToken(GqlParser.PERCENTILE_DIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBinarySetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBinarySetFunctionType(this);
		}
	}


}



class DependentValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dependentValueExpression;
    }

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDependentValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDependentValueExpression(this);
		}
	}


}



class IndependentValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_independentValueExpression;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIndependentValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIndependentValueExpression(this);
		}
	}


}



class SortSpecificationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sortSpecificationList;
    }

	sortSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(SortSpecificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSortSpecificationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSortSpecificationList(this);
		}
	}


}



class SortSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sortSpecification;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	nullOrdering() {
	    return this.getTypedRuleContext(NullOrderingContext,0);
	};

	ASC() {
	    return this.getToken(GqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(GqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSortSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSortSpecification(this);
		}
	}


}



class NullOrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nullOrdering;
    }

	NULLS() {
	    return this.getToken(GqlParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(GqlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(GqlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNullOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNullOrdering(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(GqlParser.LIMIT, 0);
	};

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_offsetClause;
    }

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	OFFSET() {
	    return this.getToken(GqlParser.OFFSET, 0);
	};

	SSKIP() {
	    return this.getToken(GqlParser.SSKIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class SchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_schemaReference;
    }

	predefinedSchemaParameter() {
	    return this.getTypedRuleContext(PredefinedSchemaParameterContext,0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSchemaReference(this);
		}
	}


}



class CatalogSchemaParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogSchemaParentAndName;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	absoluteUrlPath() {
	    return this.getTypedRuleContext(AbsoluteUrlPathContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	DOUBLE_SOLIDUS() {
	    return this.getToken(GqlParser.DOUBLE_SOLIDUS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	urlPathParameter() {
	    return this.getTypedRuleContext(UrlPathParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogSchemaParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogSchemaParentAndName(this);
		}
	}


}



class GraphReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphReference;
    }

	graphResolutionExpression() {
	    return this.getTypedRuleContext(GraphResolutionExpressionContext,0);
	};

	localGraphReference() {
	    return this.getTypedRuleContext(LocalGraphReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphReference(this);
		}
	}


}



class GraphResolutionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphResolutionExpression;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	catalogGraphReference() {
	    return this.getTypedRuleContext(CatalogGraphReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphResolutionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphResolutionExpression(this);
		}
	}


}



class CatalogGraphReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogGraphReference;
    }

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	predefinedGraphParameter() {
	    return this.getTypedRuleContext(PredefinedGraphParameterContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogGraphReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogGraphReference(this);
		}
	}


}



class CatalogGraphParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogGraphParentAndName;
    }

	graphParentSpecification() {
	    return this.getTypedRuleContext(GraphParentSpecificationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	urlPathParameter() {
	    return this.getTypedRuleContext(UrlPathParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogGraphParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogGraphParentAndName(this);
		}
	}


}



class GraphParentSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphParentSpecification;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	parentCatalogObjectReference() {
	    return this.getTypedRuleContext(ParentCatalogObjectReferenceContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphParentSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphParentSpecification(this);
		}
	}


}



class LocalGraphReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localGraphReference;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalGraphReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalGraphReference(this);
		}
	}


}



class GraphTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeReference;
    }

	graphTypeResolutionExpression() {
	    return this.getTypedRuleContext(GraphTypeResolutionExpressionContext,0);
	};

	qualifiedGraphTypeName() {
	    return this.getTypedRuleContext(QualifiedGraphTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeReference(this);
		}
	}


}



class GraphTypeResolutionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeResolutionExpression;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	catalogGraphTypeReference() {
	    return this.getTypedRuleContext(CatalogGraphTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeResolutionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeResolutionExpression(this);
		}
	}


}



class CatalogGraphTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogGraphTypeReference;
    }

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogGraphTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogGraphTypeReference(this);
		}
	}


}



class CatalogGraphTypeParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogGraphTypeParentAndName;
    }

	graphTypeParentSpecification() {
	    return this.getTypedRuleContext(GraphTypeParentSpecificationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	urlPathParameter() {
	    return this.getTypedRuleContext(UrlPathParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogGraphTypeParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogGraphTypeParentAndName(this);
		}
	}


}



class GraphTypeParentSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeParentSpecification;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	parentCatalogObjectReference() {
	    return this.getTypedRuleContext(ParentCatalogObjectReferenceContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeParentSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeParentSpecification(this);
		}
	}


}



class QualifiedGraphTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_qualifiedGraphTypeName;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQualifiedGraphTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQualifiedGraphTypeName(this);
		}
	}


}



class BindingTableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableReference;
    }

	bindingTableResolutionExpression() {
	    return this.getTypedRuleContext(BindingTableResolutionExpressionContext,0);
	};

	localBindingTableReference() {
	    return this.getTypedRuleContext(LocalBindingTableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableReference(this);
		}
	}


}



class BindingTableResolutionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableResolutionExpression;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	catalogBindingTableReference() {
	    return this.getTypedRuleContext(CatalogBindingTableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableResolutionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableResolutionExpression(this);
		}
	}


}



class CatalogBindingTableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogBindingTableReference;
    }

	catalogBindingTableParentAndName() {
	    return this.getTypedRuleContext(CatalogBindingTableParentAndNameContext,0);
	};

	predefinedTableParameter() {
	    return this.getTypedRuleContext(PredefinedTableParameterContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogBindingTableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogBindingTableReference(this);
		}
	}


}



class CatalogBindingTableParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogBindingTableParentAndName;
    }

	bindingTableParentSpecification() {
	    return this.getTypedRuleContext(BindingTableParentSpecificationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	urlPathParameter() {
	    return this.getTypedRuleContext(UrlPathParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogBindingTableParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogBindingTableParentAndName(this);
		}
	}


}



class BindingTableParentSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableParentSpecification;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	parentCatalogObjectReference() {
	    return this.getTypedRuleContext(ParentCatalogObjectReferenceContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableParentSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableParentSpecification(this);
		}
	}


}



class LocalBindingTableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localBindingTableReference;
    }

	qualifiedBindingTableName() {
	    return this.getTypedRuleContext(QualifiedBindingTableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalBindingTableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalBindingTableReference(this);
		}
	}


}



class QualifiedBindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_qualifiedBindingTableName;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQualifiedBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQualifiedBindingTableName(this);
		}
	}


}



class ProcedureReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureReference;
    }

	PROCEDURE() {
	    return this.getToken(GqlParser.PROCEDURE, 0);
	};

	catalogProcedureReference() {
	    return this.getTypedRuleContext(CatalogProcedureReferenceContext,0);
	};

	localProcedureReference() {
	    return this.getTypedRuleContext(LocalProcedureReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureReference(this);
		}
	}


}



class CatalogProcedureReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogProcedureReference;
    }

	catalogProcedureParentAndName() {
	    return this.getTypedRuleContext(CatalogProcedureParentAndNameContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogProcedureReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogProcedureReference(this);
		}
	}


}



class CatalogProcedureParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogProcedureParentAndName;
    }

	procedureParentSpecification() {
	    return this.getTypedRuleContext(ProcedureParentSpecificationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	urlPathParameter() {
	    return this.getTypedRuleContext(UrlPathParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogProcedureParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogProcedureParentAndName(this);
		}
	}


}



class ProcedureParentSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureParentSpecification;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	parentCatalogObjectReference() {
	    return this.getTypedRuleContext(ParentCatalogObjectReferenceContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureParentSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureParentSpecification(this);
		}
	}


}



class LocalProcedureReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localProcedureReference;
    }

	qualifiedProcedureName() {
	    return this.getTypedRuleContext(QualifiedProcedureNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalProcedureReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalProcedureReference(this);
		}
	}


}



class QualifiedProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_qualifiedProcedureName;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQualifiedProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQualifiedProcedureName(this);
		}
	}


}



class QueryResolutionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_queryResolutionExpression;
    }

	QUERY() {
	    return this.getToken(GqlParser.QUERY, 0);
	};

	catalogQueryReference() {
	    return this.getTypedRuleContext(CatalogQueryReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQueryResolutionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQueryResolutionExpression(this);
		}
	}


}



class CatalogQueryReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogQueryReference;
    }

	catalogQueryParentAndName() {
	    return this.getTypedRuleContext(CatalogQueryParentAndNameContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogQueryReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogQueryReference(this);
		}
	}


}



class CatalogQueryParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogQueryParentAndName;
    }

	queryParentSpecification() {
	    return this.getTypedRuleContext(QueryParentSpecificationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	urlPathParameter() {
	    return this.getTypedRuleContext(UrlPathParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogQueryParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogQueryParentAndName(this);
		}
	}


}



class QueryParentSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_queryParentSpecification;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	parentCatalogObjectReference() {
	    return this.getTypedRuleContext(ParentCatalogObjectReferenceContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQueryParentSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQueryParentSpecification(this);
		}
	}


}



class QualifiedQueryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_qualifiedQueryName;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQualifiedQueryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQualifiedQueryName(this);
		}
	}


}



class FunctionResolutionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_functionResolutionExpression;
    }

	FUNCTION() {
	    return this.getToken(GqlParser.FUNCTION, 0);
	};

	catalogFunctionReference() {
	    return this.getTypedRuleContext(CatalogFunctionReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFunctionResolutionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFunctionResolutionExpression(this);
		}
	}


}



class CatalogFunctionReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogFunctionReference;
    }

	catalogFunctionParentAndName() {
	    return this.getTypedRuleContext(CatalogFunctionParentAndNameContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogFunctionReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogFunctionReference(this);
		}
	}


}



class CatalogFunctionParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogFunctionParentAndName;
    }

	functionParentSpecification() {
	    return this.getTypedRuleContext(FunctionParentSpecificationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	urlPathParameter() {
	    return this.getTypedRuleContext(UrlPathParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogFunctionParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogFunctionParentAndName(this);
		}
	}


}



class FunctionParentSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_functionParentSpecification;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	parentCatalogObjectReference() {
	    return this.getTypedRuleContext(ParentCatalogObjectReferenceContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFunctionParentSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFunctionParentSpecification(this);
		}
	}


}



class QualifiedFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_qualifiedFunctionName;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	qualifiedObjectName() {
	    return this.getTypedRuleContext(QualifiedObjectNameContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQualifiedFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQualifiedFunctionName(this);
		}
	}


}



class CatalogObjectReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogObjectReference;
    }

	catalogUrlPath() {
	    return this.getTypedRuleContext(CatalogUrlPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogObjectReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogObjectReference(this);
		}
	}


}



class ParentCatalogObjectReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parentCatalogObjectReference;
    }

	catalogObjectReference() {
	    return this.getTypedRuleContext(CatalogObjectReferenceContext,0);
	};

	DOUBLE_SOLIDUS() {
	    return this.getToken(GqlParser.DOUBLE_SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParentCatalogObjectReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParentCatalogObjectReference(this);
		}
	}


}



class CatalogUrlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogUrlPath;
    }

	absoluteUrlPath() {
	    return this.getTypedRuleContext(AbsoluteUrlPathContext,0);
	};

	relativeUrlPath() {
	    return this.getTypedRuleContext(RelativeUrlPathContext,0);
	};

	parameterizedUrlPath() {
	    return this.getTypedRuleContext(ParameterizedUrlPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogUrlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogUrlPath(this);
		}
	}


}



class AbsoluteUrlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_absoluteUrlPath;
    }

	DOUBLE_SOLIDUS() {
	    return this.getToken(GqlParser.DOUBLE_SOLIDUS, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	simpleUrlPath() {
	    return this.getTypedRuleContext(SimpleUrlPathContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbsoluteUrlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbsoluteUrlPath(this);
		}
	}


}



class RelativeUrlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_relativeUrlPath;
    }

	parentObjectRelativeUrlPath() {
	    return this.getTypedRuleContext(ParentObjectRelativeUrlPathContext,0);
	};

	simpleRelativeUrlPath() {
	    return this.getTypedRuleContext(SimpleRelativeUrlPathContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRelativeUrlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRelativeUrlPath(this);
		}
	}


}



class ParentObjectRelativeUrlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parentObjectRelativeUrlPath;
    }

	predefinedParentObjectParameter() {
	    return this.getTypedRuleContext(PredefinedParentObjectParameterContext,0);
	};

	DOUBLE_SOLIDUS() {
	    return this.getToken(GqlParser.DOUBLE_SOLIDUS, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	simpleUrlPath() {
	    return this.getTypedRuleContext(SimpleUrlPathContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParentObjectRelativeUrlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParentObjectRelativeUrlPath(this);
		}
	}


}



class SimpleRelativeUrlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleRelativeUrlPath;
    }

	DOUBLE_PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DOUBLE_PERIOD);
	    } else {
	        return this.getToken(GqlParser.DOUBLE_PERIOD, i);
	    }
	};


	DOUBLE_SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DOUBLE_SOLIDUS);
	    } else {
	        return this.getToken(GqlParser.DOUBLE_SOLIDUS, i);
	    }
	};


	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	simpleUrlPath() {
	    return this.getTypedRuleContext(SimpleUrlPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleRelativeUrlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleRelativeUrlPath(this);
		}
	}


}



class ParameterizedUrlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameterizedUrlPath;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOUBLE_SOLIDUS() {
	    return this.getToken(GqlParser.DOUBLE_SOLIDUS, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	simpleUrlPath() {
	    return this.getTypedRuleContext(SimpleUrlPathContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameterizedUrlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameterizedUrlPath(this);
		}
	}


}



class SimpleUrlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleUrlPath;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOUBLE_SOLIDUS() {
	    return this.getToken(GqlParser.DOUBLE_SOLIDUS, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleUrlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleUrlPath(this);
		}
	}


}



class UrlSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_urlSegment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUrlSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUrlSegment(this);
		}
	}


}



class QualifiedObjectNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_qualifiedObjectName;
    }

	qualifiedNamePrefix() {
	    return this.getTypedRuleContext(QualifiedNamePrefixContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQualifiedObjectName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQualifiedObjectName(this);
		}
	}


}



class QualifiedNamePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_qualifiedNamePrefix;
    }

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQualifiedNamePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQualifiedNamePrefix(this);
		}
	}


}



class UrlPathParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_urlPathParameter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUrlPathParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUrlPathParameter(this);
		}
	}


}



class ExternalObjectReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_externalObjectReference;
    }

	externalObjectUrl() {
	    return this.getTypedRuleContext(ExternalObjectUrlContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExternalObjectReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExternalObjectReference(this);
		}
	}


}



class ExternalObjectUrlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_externalObjectUrl;
    }


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExternalObjectUrl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExternalObjectUrl(this);
		}
	}


}



class ElementReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementReference;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementReference(this);
		}
	}


}



class SearchConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_searchCondition;
    }

	booleanValueExpression() {
	    return this.getTypedRuleContext(BooleanValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSearchCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSearchCondition(this);
		}
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predicate;
    }

	comparisonPredicate() {
	    return this.getTypedRuleContext(ComparisonPredicateContext,0);
	};

	existsPredicate() {
	    return this.getTypedRuleContext(ExistsPredicateContext,0);
	};

	nullPredicate() {
	    return this.getTypedRuleContext(NullPredicateContext,0);
	};

	normalizedPredicate() {
	    return this.getTypedRuleContext(NormalizedPredicateContext,0);
	};

	directedPredicate() {
	    return this.getTypedRuleContext(DirectedPredicateContext,0);
	};

	labeledPredicate() {
	    return this.getTypedRuleContext(LabeledPredicateContext,0);
	};

	sourceDestinationPredicate() {
	    return this.getTypedRuleContext(SourceDestinationPredicateContext,0);
	};

	allDifferentPredicate() {
	    return this.getTypedRuleContext(AllDifferentPredicateContext,0);
	};

	samePredicate() {
	    return this.getTypedRuleContext(SamePredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredicate(this);
		}
	}


}



class ComparisonPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comparisonPredicate;
    }

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComparisonPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComparisonPredicate(this);
		}
	}


}



class ComparisonPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comparisonPredicatePart2;
    }

	COMPARE_OPERATOR() {
	    return this.getToken(GqlParser.COMPARE_OPERATOR, 0);
	};

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComparisonPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComparisonPredicatePart2(this);
		}
	}


}



class ExistsPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_existsPredicate;
    }

	EXISTS() {
	    return this.getToken(GqlParser.EXISTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExistsPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExistsPredicate(this);
		}
	}


}



class NullPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nullPredicate;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNullPredicate(this);
		}
	}


}



class NullPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nullPredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNullPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNullPredicatePart2(this);
		}
	}


}



class NormalizedPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalizedPredicate;
    }

	stringValueExpression() {
	    return this.getTypedRuleContext(StringValueExpressionContext,0);
	};

	normalizedPredicatePart2() {
	    return this.getTypedRuleContext(NormalizedPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalizedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalizedPredicate(this);
		}
	}


}



class NormalizedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalizedPredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	NORMALIZED() {
	    return this.getToken(GqlParser.NORMALIZED, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	NORMAL_FORM() {
	    return this.getToken(GqlParser.NORMAL_FORM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalizedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalizedPredicatePart2(this);
		}
	}


}



class DirectedPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_directedPredicate;
    }

	elementReference() {
	    return this.getTypedRuleContext(ElementReferenceContext,0);
	};

	directedPredicatePart2() {
	    return this.getTypedRuleContext(DirectedPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDirectedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDirectedPredicate(this);
		}
	}


}



class DirectedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_directedPredicatePart2;
    }

	DIRECTED() {
	    return this.getToken(GqlParser.DIRECTED, 0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDirectedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDirectedPredicatePart2(this);
		}
	}


}



class LabeledPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labeledPredicate;
    }

	elementReference() {
	    return this.getTypedRuleContext(ElementReferenceContext,0);
	};

	labeledPredicatePart2() {
	    return this.getTypedRuleContext(LabeledPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabeledPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabeledPredicate(this);
		}
	}


}



class LabeledPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labeledPredicatePart2;
    }

	LABELED() {
	    return this.getToken(GqlParser.LABELED, 0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabeledPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabeledPredicatePart2(this);
		}
	}


}



class SourceDestinationPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sourceDestinationPredicate;
    }

	elementReference() {
	    return this.getTypedRuleContext(ElementReferenceContext,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSourceDestinationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSourceDestinationPredicate(this);
		}
	}


}



class SourcePredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sourcePredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	SOURCE() {
	    return this.getToken(GqlParser.SOURCE, 0);
	};

	elementReference() {
	    return this.getTypedRuleContext(ElementReferenceContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSourcePredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSourcePredicatePart2(this);
		}
	}


}



class DestinationPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_destinationPredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	DESTINATION() {
	    return this.getToken(GqlParser.DESTINATION, 0);
	};

	elementReference() {
	    return this.getTypedRuleContext(ElementReferenceContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDestinationPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDestinationPredicatePart2(this);
		}
	}


}



class AllDifferentPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_allDifferentPredicate;
    }

	ALL_DIFFERENT() {
	    return this.getToken(GqlParser.ALL_DIFFERENT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ElementReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAllDifferentPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAllDifferentPredicate(this);
		}
	}


}



class SamePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_samePredicate;
    }

	SAME() {
	    return this.getToken(GqlParser.SAME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ElementReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSamePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSamePredicate(this);
		}
	}


}



class ValueSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueSpecification;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	parameterValueSpecification() {
	    return this.getTypedRuleContext(ParameterValueSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueSpecification(this);
		}
	}


}



class UnsignedValueSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedValueSpecification;
    }

	unsignedLiteral() {
	    return this.getTypedRuleContext(UnsignedLiteralContext,0);
	};

	parameterValueSpecification() {
	    return this.getTypedRuleContext(ParameterValueSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedValueSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedValueSpecification(this);
		}
	}


}



class UnsignedIntegerSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedIntegerSpecification;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedIntegerSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedIntegerSpecification(this);
		}
	}


}



class ParameterValueSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameterValueSpecification;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	predefinedParameter() {
	    return this.getTypedRuleContext(PredefinedParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameterValueSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameterValueSpecification(this);
		}
	}


}



class PredefinedParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedParameter;
    }

	predefinedParentObjectParameter() {
	    return this.getTypedRuleContext(PredefinedParentObjectParameterContext,0);
	};

	predefinedTableParameter() {
	    return this.getTypedRuleContext(PredefinedTableParameterContext,0);
	};

	CURRENT_USER() {
	    return this.getToken(GqlParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedParameter(this);
		}
	}


}



class PredefinedParentObjectParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedParentObjectParameter;
    }

	predefinedSchemaParameter() {
	    return this.getTypedRuleContext(PredefinedSchemaParameterContext,0);
	};

	predefinedGraphParameter() {
	    return this.getTypedRuleContext(PredefinedGraphParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedParentObjectParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedParentObjectParameter(this);
		}
	}


}



class PredefinedSchemaParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedSchemaParameter;
    }

	HOME_SCHEMA() {
	    return this.getToken(GqlParser.HOME_SCHEMA, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(GqlParser.CURRENT_SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedSchemaParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedSchemaParameter(this);
		}
	}


}



class PredefinedGraphParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedGraphParameter;
    }

	EMPTY_PROPERTY_GRAPH() {
	    return this.getToken(GqlParser.EMPTY_PROPERTY_GRAPH, 0);
	};

	EMPTY_GRAPH() {
	    return this.getToken(GqlParser.EMPTY_GRAPH, 0);
	};

	HOME_PROPERTY_GRAPH() {
	    return this.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0);
	};

	HOME_GRAPH() {
	    return this.getToken(GqlParser.HOME_GRAPH, 0);
	};

	CURRENT_PROPERTY_GRAPH() {
	    return this.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0);
	};

	CURRENT_GRAPH() {
	    return this.getToken(GqlParser.CURRENT_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedGraphParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedGraphParameter(this);
		}
	}


}



class PredefinedTableParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedTableParameter;
    }

	EMPTY_BINDING_TABLE() {
	    return this.getToken(GqlParser.EMPTY_BINDING_TABLE, 0);
	};

	EMPTY_TABLE() {
	    return this.getToken(GqlParser.EMPTY_TABLE, 0);
	};

	UNIT_BINDING_TABLE() {
	    return this.getToken(GqlParser.UNIT_BINDING_TABLE, 0);
	};

	UNIT_TABLE() {
	    return this.getToken(GqlParser.UNIT_TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedTableParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedTableParameter(this);
		}
	}


}



class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueExpression;
    }

	untypedValueExpression() {
	    return this.getTypedRuleContext(UntypedValueExpressionContext,0);
	};

	ofValueType() {
	    return this.getTypedRuleContext(OfValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueExpression(this);
		}
	}


}



class UntypedValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_untypedValueExpression;
    }

	commonValueExpression() {
	    return this.getTypedRuleContext(CommonValueExpressionContext,0);
	};

	booleanValueExpression() {
	    return this.getTypedRuleContext(BooleanValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUntypedValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUntypedValueExpression(this);
		}
	}


}



class CommonValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_commonValueExpression;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	stringValueExpression() {
	    return this.getTypedRuleContext(StringValueExpressionContext,0);
	};

	datetimeValueExpression() {
	    return this.getTypedRuleContext(DatetimeValueExpressionContext,0);
	};

	durationValueExpression() {
	    return this.getTypedRuleContext(DurationValueExpressionContext,0);
	};

	collectionValueExpression() {
	    return this.getTypedRuleContext(CollectionValueExpressionContext,0);
	};

	mapValueExpression() {
	    return this.getTypedRuleContext(MapValueExpressionContext,0);
	};

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	referenceValueExpression() {
	    return this.getTypedRuleContext(ReferenceValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCommonValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCommonValueExpression(this);
		}
	}


}



class ReferenceValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_referenceValueExpression;
    }

	primaryResultObjectExpression() {
	    return this.getTypedRuleContext(PrimaryResultObjectExpressionContext,0);
	};

	graphElementPrimary() {
	    return this.getTypedRuleContext(GraphElementPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReferenceValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReferenceValueExpression(this);
		}
	}


}



class CollectionValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_collectionValueExpression;
    }

	listValueExpression() {
	    return this.getTypedRuleContext(ListValueExpressionContext,0);
	};

	multisetValueExpression() {
	    return this.getTypedRuleContext(MultisetValueExpressionContext,0);
	};

	setValueExpression() {
	    return this.getTypedRuleContext(SetValueExpressionContext,0);
	};

	orderedSetValueExpression() {
	    return this.getTypedRuleContext(OrderedSetValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCollectionValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCollectionValueExpression(this);
		}
	}


}



class SetValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setValueExpression;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetValueExpression(this);
		}
	}


}



class OrderedSetValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderedSetValueExpression;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderedSetValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderedSetValueExpression(this);
		}
	}


}



class MapValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapValueExpression;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapValueExpression(this);
		}
	}


}



class BooleanValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanValueExpression;
    }

	booleanTerm() {
	    return this.getTypedRuleContext(BooleanTermContext,0);
	};

	booleanValueExpression() {
	    return this.getTypedRuleContext(BooleanValueExpressionContext,0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	XOR() {
	    return this.getToken(GqlParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanValueExpression(this);
		}
	}


}



class BooleanTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanTerm;
    }

	booleanFactor() {
	    return this.getTypedRuleContext(BooleanFactorContext,0);
	};

	booleanTerm() {
	    return this.getTypedRuleContext(BooleanTermContext,0);
	};

	AND() {
	    return this.getToken(GqlParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanTerm(this);
		}
	}


}



class BooleanFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanFactor;
    }

	booleanTest() {
	    return this.getTypedRuleContext(BooleanTestContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanFactor(this);
		}
	}


}



class BooleanTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanTest;
    }

	booleanPrimary() {
	    return this.getTypedRuleContext(BooleanPrimaryContext,0);
	};

	TRUTH_VALUE() {
	    return this.getToken(GqlParser.TRUTH_VALUE, 0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(GqlParser.NOT_EQUALS, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanTest(this);
		}
	}


}



class BooleanPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanPrimary;
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	booleanPredicand() {
	    return this.getTypedRuleContext(BooleanPredicandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanPrimary(this);
		}
	}


}



class BooleanPredicandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanPredicand;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	booleanValueExpression() {
	    return this.getTypedRuleContext(BooleanValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanPredicand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanPredicand(this);
		}
	}


}



class NumericValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueExpression;
    }

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueExpression(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_term;
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTerm(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_factor;
    }

	numericPrimary() {
	    return this.getTypedRuleContext(NumericPrimaryContext,0);
	};

	sign() {
	    return this.getTypedRuleContext(SignContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFactor(this);
		}
	}


}



class NumericPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericPrimary;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	numericValueFunction() {
	    return this.getTypedRuleContext(NumericValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericPrimary(this);
		}
	}


}



class ValueExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueExpressionPrimary;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueExpressionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueExpressionPrimary(this);
		}
	}


}



class NonParenthesizedValueExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonParenthesizedValueExpressionPrimary;
    }

	graphElementPrimary() {
	    return this.getTypedRuleContext(GraphElementPrimaryContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	parameterValueSpecification() {
	    return this.getTypedRuleContext(ParameterValueSpecificationContext,0);
	};

	unsignedValueSpecification() {
	    return this.getTypedRuleContext(UnsignedValueSpecificationContext,0);
	};

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	collectionValueConstructor() {
	    return this.getTypedRuleContext(CollectionValueConstructorContext,0);
	};

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	caseExpression() {
	    return this.getTypedRuleContext(CaseExpressionContext,0);
	};

	castSpecification() {
	    return this.getTypedRuleContext(CastSpecificationContext,0);
	};

	element_idFunction() {
	    return this.getTypedRuleContext(Element_idFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonParenthesizedValueExpressionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonParenthesizedValueExpressionPrimary(this);
		}
	}


}



class NumericValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueFunction;
    }

	lengthExpression() {
	    return this.getTypedRuleContext(LengthExpressionContext,0);
	};

	absoluteValueExpression() {
	    return this.getTypedRuleContext(AbsoluteValueExpressionContext,0);
	};

	modulusExpression() {
	    return this.getTypedRuleContext(ModulusExpressionContext,0);
	};

	trigonometricFunction() {
	    return this.getTypedRuleContext(TrigonometricFunctionContext,0);
	};

	generalLogarithmFunction() {
	    return this.getTypedRuleContext(GeneralLogarithmFunctionContext,0);
	};

	commonLogarithm() {
	    return this.getTypedRuleContext(CommonLogarithmContext,0);
	};

	naturalLogarithm() {
	    return this.getTypedRuleContext(NaturalLogarithmContext,0);
	};

	exponentialFunction() {
	    return this.getTypedRuleContext(ExponentialFunctionContext,0);
	};

	powerFunction() {
	    return this.getTypedRuleContext(PowerFunctionContext,0);
	};

	squareRoot() {
	    return this.getTypedRuleContext(SquareRootContext,0);
	};

	floorFunction() {
	    return this.getTypedRuleContext(FloorFunctionContext,0);
	};

	ceilingFunction() {
	    return this.getTypedRuleContext(CeilingFunctionContext,0);
	};

	inDegreeFunction() {
	    return this.getTypedRuleContext(InDegreeFunctionContext,0);
	};

	outDegreeFunction() {
	    return this.getTypedRuleContext(OutDegreeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueFunction(this);
		}
	}


}



class LengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_lengthExpression;
    }

	charLengthExpression() {
	    return this.getTypedRuleContext(CharLengthExpressionContext,0);
	};

	byteLengthExpression() {
	    return this.getTypedRuleContext(ByteLengthExpressionContext,0);
	};

	pathLengthExpression() {
	    return this.getTypedRuleContext(PathLengthExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLengthExpression(this);
		}
	}


}



class CharLengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charLengthExpression;
    }

	CHARACTER_LENGTH() {
	    return this.getToken(GqlParser.CHARACTER_LENGTH, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	characterStringValueExpression() {
	    return this.getTypedRuleContext(CharacterStringValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharLengthExpression(this);
		}
	}


}



class ByteLengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteLengthExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	stringValueExpression() {
	    return this.getTypedRuleContext(StringValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	BYTE_LENGTH() {
	    return this.getToken(GqlParser.BYTE_LENGTH, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(GqlParser.OCTET_LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteLengthExpression(this);
		}
	}


}



class PathLengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathLengthExpression;
    }

	LENGTH() {
	    return this.getToken(GqlParser.LENGTH, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathLengthExpression(this);
		}
	}


}



class AbsoluteValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_absoluteValueExpression;
    }

	ABS() {
	    return this.getToken(GqlParser.ABS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbsoluteValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbsoluteValueExpression(this);
		}
	}


}



class ModulusExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_modulusExpression;
    }

	MOD() {
	    return this.getToken(GqlParser.MOD, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericValueExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterModulusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitModulusExpression(this);
		}
	}


}



class TrigonometricFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trigonometricFunction;
    }

	TRYGONOMETRIC_FUNCTION_NAME() {
	    return this.getToken(GqlParser.TRYGONOMETRIC_FUNCTION_NAME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrigonometricFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrigonometricFunction(this);
		}
	}


}



class GeneralLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalLogarithmFunction;
    }

	LOG() {
	    return this.getToken(GqlParser.LOG, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericValueExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralLogarithmFunction(this);
		}
	}


}



class CommonLogarithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_commonLogarithm;
    }

	LOG10() {
	    return this.getToken(GqlParser.LOG10, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCommonLogarithm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCommonLogarithm(this);
		}
	}


}



class NaturalLogarithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_naturalLogarithm;
    }

	LN() {
	    return this.getToken(GqlParser.LN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNaturalLogarithm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNaturalLogarithm(this);
		}
	}


}



class ExponentialFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_exponentialFunction;
    }

	EXP() {
	    return this.getToken(GqlParser.EXP, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExponentialFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExponentialFunction(this);
		}
	}


}



class PowerFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_powerFunction;
    }

	POWER() {
	    return this.getToken(GqlParser.POWER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericValueExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPowerFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPowerFunction(this);
		}
	}


}



class SquareRootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_squareRoot;
    }

	SQRT() {
	    return this.getToken(GqlParser.SQRT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSquareRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSquareRoot(this);
		}
	}


}



class FloorFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_floorFunction;
    }

	FLOOR() {
	    return this.getToken(GqlParser.FLOOR, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFloorFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFloorFunction(this);
		}
	}


}



class CeilingFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ceilingFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	CEIL() {
	    return this.getToken(GqlParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(GqlParser.CEILING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCeilingFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCeilingFunction(this);
		}
	}


}



class InDegreeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_inDegreeFunction;
    }

	IN_DEGREE() {
	    return this.getToken(GqlParser.IN_DEGREE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInDegreeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInDegreeFunction(this);
		}
	}


}



class OutDegreeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_outDegreeFunction;
    }

	OUT_DEGREE() {
	    return this.getToken(GqlParser.OUT_DEGREE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOutDegreeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOutDegreeFunction(this);
		}
	}


}



class StringValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_stringValueExpression;
    }

	characterStringValueExpression() {
	    return this.getTypedRuleContext(CharacterStringValueExpressionContext,0);
	};

	byteStringValueExpression() {
	    return this.getTypedRuleContext(ByteStringValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStringValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStringValueExpression(this);
		}
	}


}



class CharacterStringValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_characterStringValueExpression;
    }

	characterStringPrimary() {
	    return this.getTypedRuleContext(CharacterStringPrimaryContext,0);
	};

	characterStringValueExpression() {
	    return this.getTypedRuleContext(CharacterStringValueExpressionContext,0);
	};

	CONCATENATION_OPERATOR() {
	    return this.getToken(GqlParser.CONCATENATION_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharacterStringValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharacterStringValueExpression(this);
		}
	}


}



class CharacterStringPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_characterStringPrimary;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	stringValueFunction() {
	    return this.getTypedRuleContext(StringValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharacterStringPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharacterStringPrimary(this);
		}
	}


}



class ByteStringValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringValueExpression;
    }

	byteStringPrimary() {
	    return this.getTypedRuleContext(ByteStringPrimaryContext,0);
	};

	byteStringValueExpression() {
	    return this.getTypedRuleContext(ByteStringValueExpressionContext,0);
	};

	CONCATENATION_OPERATOR() {
	    return this.getToken(GqlParser.CONCATENATION_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringValueExpression(this);
		}
	}


}



class ByteStringPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringPrimary;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	stringValueFunction() {
	    return this.getTypedRuleContext(StringValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringPrimary(this);
		}
	}


}



class StringValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_stringValueFunction;
    }

	characterStringFunction() {
	    return this.getTypedRuleContext(CharacterStringFunctionContext,0);
	};

	byteStringFunction() {
	    return this.getTypedRuleContext(ByteStringFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStringValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStringValueFunction(this);
		}
	}


}



class CharacterStringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_characterStringFunction;
    }

	substringFunction() {
	    return this.getTypedRuleContext(SubstringFunctionContext,0);
	};

	fold() {
	    return this.getTypedRuleContext(FoldContext,0);
	};

	trimFunction() {
	    return this.getTypedRuleContext(TrimFunctionContext,0);
	};

	normalizeFunction() {
	    return this.getTypedRuleContext(NormalizeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharacterStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharacterStringFunction(this);
		}
	}


}



class SubstringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_substringFunction;
    }

	SUBSTRING() {
	    return this.getToken(GqlParser.SUBSTRING, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	characterStringValueExpression() {
	    return this.getTypedRuleContext(CharacterStringValueExpressionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	startPosition() {
	    return this.getTypedRuleContext(StartPositionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	stringLength() {
	    return this.getTypedRuleContext(StringLengthContext,0);
	};

	LEFT() {
	    return this.getToken(GqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(GqlParser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSubstringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSubstringFunction(this);
		}
	}


}



class FoldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fold;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	characterStringValueExpression() {
	    return this.getTypedRuleContext(CharacterStringValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	UPPER() {
	    return this.getToken(GqlParser.UPPER, 0);
	};

	TO_UPPER() {
	    return this.getToken(GqlParser.TO_UPPER, 0);
	};

	LOWER() {
	    return this.getToken(GqlParser.LOWER, 0);
	};

	TO_LOWER() {
	    return this.getToken(GqlParser.TO_LOWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFold(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFold(this);
		}
	}


}



class TrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimFunction;
    }

	TRIM() {
	    return this.getToken(GqlParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	characterStringValueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharacterStringValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CharacterStringValueExpressionContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	TRIM_SPEC() {
	    return this.getToken(GqlParser.TRIM_SPEC, 0);
	};

	L_TRIM() {
	    return this.getToken(GqlParser.L_TRIM, 0);
	};

	R_TRIM() {
	    return this.getToken(GqlParser.R_TRIM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimFunction(this);
		}
	}


}



class NormalizeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalizeFunction;
    }

	NORMALIZE() {
	    return this.getToken(GqlParser.NORMALIZE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	characterStringValueExpression() {
	    return this.getTypedRuleContext(CharacterStringValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalizeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalizeFunction(this);
		}
	}


}



class NormalFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalForm;
    }

	NFC() {
	    return this.getToken(GqlParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GqlParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GqlParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GqlParser.NFKD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalForm(this);
		}
	}


}



class ByteStringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringFunction;
    }

	byteSubstringFunction() {
	    return this.getTypedRuleContext(ByteSubstringFunctionContext,0);
	};

	byteStringTrimFunction() {
	    return this.getTypedRuleContext(ByteStringTrimFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringFunction(this);
		}
	}


}



class ByteSubstringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteSubstringFunction;
    }

	SUBSTRING() {
	    return this.getToken(GqlParser.SUBSTRING, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	byteStringValueExpression() {
	    return this.getTypedRuleContext(ByteStringValueExpressionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	startPosition() {
	    return this.getTypedRuleContext(StartPositionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	stringLength() {
	    return this.getTypedRuleContext(StringLengthContext,0);
	};

	LEFT() {
	    return this.getToken(GqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(GqlParser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteSubstringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteSubstringFunction(this);
		}
	}


}



class ByteStringTrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringTrimFunction;
    }

	TRIM() {
	    return this.getToken(GqlParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	byteStringValueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ByteStringValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ByteStringValueExpressionContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	TRIM_SPEC() {
	    return this.getToken(GqlParser.TRIM_SPEC, 0);
	};

	L_TRIM() {
	    return this.getToken(GqlParser.L_TRIM, 0);
	};

	R_TRIM() {
	    return this.getToken(GqlParser.R_TRIM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringTrimFunction(this);
		}
	}


}



class StartPositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_startPosition;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStartPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStartPosition(this);
		}
	}


}



class StringLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_stringLength;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStringLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStringLength(this);
		}
	}


}



class DatetimeValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_datetimeValueExpression;
    }

	datetimePrimary() {
	    return this.getTypedRuleContext(DatetimePrimaryContext,0);
	};

	durationValueExpression() {
	    return this.getTypedRuleContext(DurationValueExpressionContext,0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	datetimeValueExpression() {
	    return this.getTypedRuleContext(DatetimeValueExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDatetimeValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDatetimeValueExpression(this);
		}
	}


}



class DatetimePrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_datetimePrimary;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	datetimeValueFunction() {
	    return this.getTypedRuleContext(DatetimeValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDatetimePrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDatetimePrimary(this);
		}
	}


}



class DatetimeValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_datetimeValueFunction;
    }

	dateFunction() {
	    return this.getTypedRuleContext(DateFunctionContext,0);
	};

	timeFunction() {
	    return this.getTypedRuleContext(TimeFunctionContext,0);
	};

	datetimeFunction() {
	    return this.getTypedRuleContext(DatetimeFunctionContext,0);
	};

	localTimeFunction() {
	    return this.getTypedRuleContext(LocalTimeFunctionContext,0);
	};

	localDatetimeFunction() {
	    return this.getTypedRuleContext(LocalDatetimeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDatetimeValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDatetimeValueFunction(this);
		}
	}


}



class DateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateFunction;
    }

	CURRENT_DATE() {
	    return this.getToken(GqlParser.CURRENT_DATE, 0);
	};

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	dateFunctionParameters() {
	    return this.getTypedRuleContext(DateFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateFunction(this);
		}
	}


}



class TimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeFunction;
    }

	CURRENT_TIME() {
	    return this.getToken(GqlParser.CURRENT_TIME, 0);
	};

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeFunction(this);
		}
	}


}



class LocalTimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localTimeFunction;
    }

	LOCALTIME() {
	    return this.getToken(GqlParser.LOCALTIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalTimeFunction(this);
		}
	}


}



class DatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_datetimeFunction;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(GqlParser.CURRENT_TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	datetimeFunctionParameters() {
	    return this.getTypedRuleContext(DatetimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDatetimeFunction(this);
		}
	}


}



class LocalDatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localDatetimeFunction;
    }

	LOCALTIMESTAMP() {
	    return this.getToken(GqlParser.LOCALTIMESTAMP, 0);
	};

	LOCALDATETIME() {
	    return this.getToken(GqlParser.LOCALDATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	datetimeFunctionParameters() {
	    return this.getTypedRuleContext(DatetimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalDatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalDatetimeFunction(this);
		}
	}


}



class DateFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateFunctionParameters;
    }

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	mapValueConstructor() {
	    return this.getTypedRuleContext(MapValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateFunctionParameters(this);
		}
	}


}



class TimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeFunctionParameters;
    }

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	mapValueConstructor() {
	    return this.getTypedRuleContext(MapValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeFunctionParameters(this);
		}
	}


}



class DatetimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_datetimeFunctionParameters;
    }

	datetimeString() {
	    return this.getTypedRuleContext(DatetimeStringContext,0);
	};

	mapValueConstructor() {
	    return this.getTypedRuleContext(MapValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDatetimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDatetimeFunctionParameters(this);
		}
	}


}



class DurationValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationValueExpression;
    }

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	datetimeValueExpression() {
	    return this.getTypedRuleContext(DatetimeValueExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	datetimePrimary() {
	    return this.getTypedRuleContext(DatetimePrimaryContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	durationValueExpression() {
	    return this.getTypedRuleContext(DurationValueExpressionContext,0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationValueExpression(this);
		}
	}


}



class DurationTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationTerm;
    }

	durationFactor() {
	    return this.getTypedRuleContext(DurationFactorContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationTerm(this);
		}
	}


}



class DurationFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationFactor;
    }

	durationPrimary() {
	    return this.getTypedRuleContext(DurationPrimaryContext,0);
	};

	SIGN() {
	    return this.getToken(GqlParser.SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationFactor(this);
		}
	}


}



class DurationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationPrimary;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	durationValueFunction() {
	    return this.getTypedRuleContext(DurationValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationPrimary(this);
		}
	}


}



class DurationValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationValueFunction;
    }

	durationFunction() {
	    return this.getTypedRuleContext(DurationFunctionContext,0);
	};

	durationAbsoluteValueFunction() {
	    return this.getTypedRuleContext(DurationAbsoluteValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationValueFunction(this);
		}
	}


}



class DurationFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationFunction;
    }

	DURATION() {
	    return this.getToken(GqlParser.DURATION, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	durationFunctionParameters() {
	    return this.getTypedRuleContext(DurationFunctionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationFunction(this);
		}
	}


}



class DurationFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationFunctionParameters;
    }

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	mapValueConstructor() {
	    return this.getTypedRuleContext(MapValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationFunctionParameters(this);
		}
	}


}



class DurationAbsoluteValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationAbsoluteValueFunction;
    }

	ABS() {
	    return this.getToken(GqlParser.ABS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	durationValueExpression() {
	    return this.getTypedRuleContext(DurationValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationAbsoluteValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationAbsoluteValueFunction(this);
		}
	}


}



class GraphElementPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphElementPrimary;
    }

	startNodeFunction() {
	    return this.getTypedRuleContext(StartNodeFunctionContext,0);
	};

	endNodeFunction() {
	    return this.getTypedRuleContext(EndNodeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphElementPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphElementPrimary(this);
		}
	}


}



class StartNodeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_startNodeFunction;
    }

	START_NODE() {
	    return this.getToken(GqlParser.START_NODE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStartNodeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStartNodeFunction(this);
		}
	}


}



class EndNodeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endNodeFunction;
    }

	END_NODE() {
	    return this.getToken(GqlParser.END_NODE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndNodeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndNodeFunction(this);
		}
	}


}



class CollectionValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_collectionValueConstructor;
    }

	listValueConstructor() {
	    return this.getTypedRuleContext(ListValueConstructorContext,0);
	};

	setValueConstructor() {
	    return this.getTypedRuleContext(SetValueConstructorContext,0);
	};

	orderedSetValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(OrderedSetValueConstructorByEnumerationContext,0);
	};

	mapValueConstructor() {
	    return this.getTypedRuleContext(MapValueConstructorContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCollectionValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCollectionValueConstructor(this);
		}
	}


}



class ListValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueExpression;
    }

	listPrimary() {
	    return this.getTypedRuleContext(ListPrimaryContext,0);
	};

	listValueExpression() {
	    return this.getTypedRuleContext(ListValueExpressionContext,0);
	};

	CONCATENATION_OPERATOR() {
	    return this.getToken(GqlParser.CONCATENATION_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueExpression(this);
		}
	}


}



class ListPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listPrimary;
    }

	listValueFunction() {
	    return this.getTypedRuleContext(ListValueFunctionContext,0);
	};

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListPrimary(this);
		}
	}


}



class ListValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueFunction;
    }

	tailListFunction() {
	    return this.getTypedRuleContext(TailListFunctionContext,0);
	};

	trimListFunction() {
	    return this.getTypedRuleContext(TrimListFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueFunction(this);
		}
	}


}



class TailListFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_tailListFunction;
    }

	TAIL() {
	    return this.getToken(GqlParser.TAIL, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	listValueExpression() {
	    return this.getTypedRuleContext(ListValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTailListFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTailListFunction(this);
		}
	}


}



class TrimListFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimListFunction;
    }

	TRIM() {
	    return this.getToken(GqlParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	listValueExpression() {
	    return this.getTypedRuleContext(ListValueExpressionContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimListFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimListFunction(this);
		}
	}


}



class ListValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueConstructor;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueConstructor(this);
		}
	}


}



class ListValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueConstructorByEnumeration;
    }

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	listElementList() {
	    return this.getTypedRuleContext(ListElementListContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueConstructorByEnumeration(this);
		}
	}


}



class ListElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listElementList;
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListElementList(this);
		}
	}


}



class MultisetValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetValueExpression;
    }

	multisetTerm() {
	    return this.getTypedRuleContext(MultisetTermContext,0);
	};

	multisetValueExpression() {
	    return this.getTypedRuleContext(MultisetValueExpressionContext,0);
	};

	MULTISET() {
	    return this.getToken(GqlParser.MULTISET, 0);
	};

	UNION() {
	    return this.getToken(GqlParser.UNION, 0);
	};

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(GqlParser.DISTINCT, 0);
	};

	EXCEPT() {
	    return this.getToken(GqlParser.EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetValueExpression(this);
		}
	}


}



class MultisetTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetTerm;
    }

	multisetPrimary() {
	    return this.getTypedRuleContext(MultisetPrimaryContext,0);
	};

	multisetTerm() {
	    return this.getTypedRuleContext(MultisetTermContext,0);
	};

	MULTISET() {
	    return this.getToken(GqlParser.MULTISET, 0);
	};

	INTERSECT() {
	    return this.getToken(GqlParser.INTERSECT, 0);
	};

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(GqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetTerm(this);
		}
	}


}



class MultisetPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetPrimary;
    }

	multisetValueFunction() {
	    return this.getTypedRuleContext(MultisetValueFunctionContext,0);
	};

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetPrimary(this);
		}
	}


}



class MultisetValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetValueFunction;
    }

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	multisetValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(MultisetValueConstructorByEnumerationContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetValueFunction(this);
		}
	}


}



class MultisetValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetValueConstructorByEnumeration;
    }

	MULTISET() {
	    return this.getToken(GqlParser.MULTISET, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	multisetElementList() {
	    return this.getTypedRuleContext(MultisetElementListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetValueConstructorByEnumeration(this);
		}
	}


}



class MultisetElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetElementList;
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetElementList(this);
		}
	}


}



class SetValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setValueConstructor;
    }

	setValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(SetValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetValueConstructor(this);
		}
	}


}



class SetValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setValueConstructorByEnumeration;
    }

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	setElementList() {
	    return this.getTypedRuleContext(SetElementListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetValueConstructorByEnumeration(this);
		}
	}


}



class SetElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setElementList;
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetElementList(this);
		}
	}


}



class OrderedSetValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderedSetValueConstructorByEnumeration;
    }

	ORDERED() {
	    return this.getToken(GqlParser.ORDERED, 0);
	};

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	orderedSetElementList() {
	    return this.getTypedRuleContext(OrderedSetElementListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderedSetValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderedSetValueConstructorByEnumeration(this);
		}
	}


}



class OrderedSetElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderedSetElementList;
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderedSetElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderedSetElementList(this);
		}
	}


}



class MapValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapValueConstructor;
    }

	mapValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(MapValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapValueConstructor(this);
		}
	}


}



class MapValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapValueConstructorByEnumeration;
    }

	MAP() {
	    return this.getToken(GqlParser.MAP, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	mapElementList() {
	    return this.getTypedRuleContext(MapElementListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapValueConstructorByEnumeration(this);
		}
	}


}



class MapElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapElementList;
    }

	mapElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapElementContext);
	    } else {
	        return this.getTypedRuleContext(MapElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapElementList(this);
		}
	}


}



class MapElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapElement;
    }

	mapKey() {
	    return this.getTypedRuleContext(MapKeyContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapElement(this);
		}
	}


}



class MapKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapKey;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapKey(this);
		}
	}


}



class RecordValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordValueConstructor;
    }

	recordValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(RecordValueConstructorByEnumerationContext,0);
	};

	UNIT() {
	    return this.getToken(GqlParser.UNIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordValueConstructor(this);
		}
	}


}



class RecordValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordValueConstructorByEnumeration;
    }

	RECORD() {
	    return this.getToken(GqlParser.RECORD, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordValueConstructorByEnumeration(this);
		}
	}


}



class FieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldList;
    }

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldList(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_field;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fieldValue() {
	    return this.getTypedRuleContext(FieldValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitField(this);
		}
	}


}



class FieldValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldValue;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldValue(this);
		}
	}


}



class CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_caseExpression;
    }

	caseAbbreviation() {
	    return this.getTypedRuleContext(CaseAbbreviationContext,0);
	};

	simpleCase() {
	    return this.getTypedRuleContext(SimpleCaseContext,0);
	};

	searchedCase() {
	    return this.getTypedRuleContext(SearchedCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCaseExpression(this);
		}
	}


}



class CaseAbbreviationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_caseAbbreviation;
    }

	NULLIF() {
	    return this.getToken(GqlParser.NULLIF, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COALESCE() {
	    return this.getToken(GqlParser.COALESCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCaseAbbreviation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCaseAbbreviation(this);
		}
	}


}



class SimpleCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleCase;
    }

	CASE() {
	    return this.getToken(GqlParser.CASE, 0);
	};

	caseOperand() {
	    return this.getTypedRuleContext(CaseOperandContext,0);
	};

	END() {
	    return this.getToken(GqlParser.END, 0);
	};

	simpleWhenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleWhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(SimpleWhenClauseContext,i);
	    }
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleCase(this);
		}
	}


}



class SearchedCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_searchedCase;
    }

	CASE() {
	    return this.getToken(GqlParser.CASE, 0);
	};

	END() {
	    return this.getToken(GqlParser.END, 0);
	};

	searchedWhenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SearchedWhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(SearchedWhenClauseContext,i);
	    }
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSearchedCase(this);
		}
	}


}



class SimpleWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleWhenClause;
    }

	WHEN() {
	    return this.getToken(GqlParser.WHEN, 0);
	};

	whenOperandList() {
	    return this.getTypedRuleContext(WhenOperandListContext,0);
	};

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleWhenClause(this);
		}
	}


}



class SearchedWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_searchedWhenClause;
    }

	WHEN() {
	    return this.getToken(GqlParser.WHEN, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSearchedWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSearchedWhenClause(this);
		}
	}


}



class ElseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elseClause;
    }

	ELSE() {
	    return this.getToken(GqlParser.ELSE, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElseClause(this);
		}
	}


}



class CaseOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_caseOperand;
    }

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	elementReference() {
	    return this.getTypedRuleContext(ElementReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCaseOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCaseOperand(this);
		}
	}


}



class WhenOperandListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whenOperandList;
    }

	whenOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenOperandContext);
	    } else {
	        return this.getTypedRuleContext(WhenOperandContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhenOperandList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhenOperandList(this);
		}
	}


}



class WhenOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whenOperand;
    }

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	directedPredicatePart2() {
	    return this.getTypedRuleContext(DirectedPredicatePart2Context,0);
	};

	labeledPredicatePart2() {
	    return this.getTypedRuleContext(LabeledPredicatePart2Context,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhenOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhenOperand(this);
		}
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_result;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitResult(this);
		}
	}


}



class CastSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_castSpecification;
    }

	CAST() {
	    return this.getToken(GqlParser.CAST, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCastSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCastSpecification(this);
		}
	}


}



class MultisetSetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetSetFunction;
    }

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	multisetValueExpression() {
	    return this.getTypedRuleContext(MultisetValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetSetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetSetFunction(this);
		}
	}


}



class Element_idFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_element_idFunction;
    }

	ELEMENT_ID() {
	    return this.getToken(GqlParser.ELEMENT_ID, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementReference() {
	    return this.getTypedRuleContext(ElementReferenceContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElement_idFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElement_idFunction(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_literal;
    }

	signedNumericLiteral() {
	    return this.getTypedRuleContext(SignedNumericLiteralContext,0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class GeneralLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalLiteral;
    }

	predefinedTypeLiteral() {
	    return this.getTypedRuleContext(PredefinedTypeLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	setLiteral() {
	    return this.getTypedRuleContext(SetLiteralContext,0);
	};

	multisetLiteral() {
	    return this.getTypedRuleContext(MultisetLiteralContext,0);
	};

	orderedSetLiteral() {
	    return this.getTypedRuleContext(OrderedSetLiteralContext,0);
	};

	mapLiteral() {
	    return this.getTypedRuleContext(MapLiteralContext,0);
	};

	recordLiteral() {
	    return this.getTypedRuleContext(RecordLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralLiteral(this);
		}
	}


}



class PredefinedTypeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedTypeLiteral;
    }

	TRUTH_VALUE() {
	    return this.getToken(GqlParser.TRUTH_VALUE, 0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	byteStringLiteral() {
	    return this.getTypedRuleContext(ByteStringLiteralContext,0);
	};

	temporalLiteral() {
	    return this.getTypedRuleContext(TemporalLiteralContext,0);
	};

	durationLiteral() {
	    return this.getTypedRuleContext(DurationLiteralContext,0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedTypeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedTypeLiteral(this);
		}
	}


}



class UnsignedLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedLiteral;
    }

	unsignedNumericLiteral() {
	    return this.getTypedRuleContext(UnsignedNumericLiteralContext,0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedLiteral(this);
		}
	}


}



class CharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_characterStringLiteral;
    }

	singleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(SingleQuotedCharacterSequenceContext,0);
	};

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharacterStringLiteral(this);
		}
	}


}



class UnbrokenCharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenCharacterStringLiteral;
    }

	unbrokenSingleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,0);
	};

	unbrokenDoubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenCharacterStringLiteral(this);
		}
	}


}



class SingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_singleQuotedCharacterSequence;
    }

	unbrokenSingleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenSingleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,i);
	    }
	};

	separator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SeparatorContext);
	    } else {
	        return this.getTypedRuleContext(SeparatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSingleQuotedCharacterSequence(this);
		}
	}


}



class DoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_doubleQuotedCharacterSequence;
    }

	unbrokenDoubleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenDoubleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,i);
	    }
	};

	separator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SeparatorContext);
	    } else {
	        return this.getTypedRuleContext(SeparatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDoubleQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenSingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenSingleQuotedCharacterSequence;
    }

	QUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.QUOTE);
	    } else {
	        return this.getToken(GqlParser.QUOTE, i);
	    }
	};


	characterRepresentation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharacterRepresentationContext);
	    } else {
	        return this.getTypedRuleContext(CharacterRepresentationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenSingleQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenDoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence;
    }

	DOUBLE_QUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DOUBLE_QUOTE);
	    } else {
	        return this.getToken(GqlParser.DOUBLE_QUOTE, i);
	    }
	};


	characterRepresentation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharacterRepresentationContext);
	    } else {
	        return this.getTypedRuleContext(CharacterRepresentationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenAccentQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenAccentQuotedCharacterSequence;
    }

	GRAVE_ACCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.GRAVE_ACCENT);
	    } else {
	        return this.getToken(GqlParser.GRAVE_ACCENT, i);
	    }
	};


	characterRepresentation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharacterRepresentationContext);
	    } else {
	        return this.getTypedRuleContext(CharacterRepresentationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenAccentQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenAccentQuotedCharacterSequence(this);
		}
	}


}



class CharacterRepresentationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_characterRepresentation;
    }

	CIRCUMFLEX() {
	    return this.getToken(GqlParser.CIRCUMFLEX, 0);
	};

	CARRIAGE_RETURN() {
	    return this.getToken(GqlParser.CARRIAGE_RETURN, 0);
	};

	NEW_LINE() {
	    return this.getToken(GqlParser.NEW_LINE, 0);
	};

	TAB() {
	    return this.getToken(GqlParser.TAB, 0);
	};

	SPACE() {
	    return this.getToken(GqlParser.SPACE, 0);
	};

	ESCAPED_CHAR() {
	    return this.getToken(GqlParser.ESCAPED_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharacterRepresentation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharacterRepresentation(this);
		}
	}


}



class ByteStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringLiteral;
    }

	BYTE_STRING_START() {
	    return this.getToken(GqlParser.BYTE_STRING_START, 0);
	};

	QUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.QUOTE);
	    } else {
	        return this.getToken(GqlParser.QUOTE, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SPACE);
	    } else {
	        return this.getToken(GqlParser.SPACE, i);
	    }
	};


	DIGIT16 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT16);
	    } else {
	        return this.getToken(GqlParser.DIGIT16, i);
	    }
	};


	separator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SeparatorContext);
	    } else {
	        return this.getTypedRuleContext(SeparatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericLiteral;
    }

	signedNumericLiteral() {
	    return this.getTypedRuleContext(SignedNumericLiteralContext,0);
	};

	unsignedNumericLiteral() {
	    return this.getTypedRuleContext(UnsignedNumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class SignedNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_signedNumericLiteral;
    }

	unsignedNumericLiteral() {
	    return this.getTypedRuleContext(UnsignedNumericLiteralContext,0);
	};

	sign() {
	    return this.getTypedRuleContext(SignContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSignedNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSignedNumericLiteral(this);
		}
	}


}



class UnsignedNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedNumericLiteral;
    }

	exactNumericLiteral() {
	    return this.getTypedRuleContext(ExactNumericLiteralContext,0);
	};

	approximateNumericLiteral() {
	    return this.getTypedRuleContext(ApproximateNumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedNumericLiteral(this);
		}
	}


}



class ExactNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_exactNumericLiteral;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	unsignedDecimalInteger = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnsignedDecimalIntegerContext);
	    } else {
	        return this.getTypedRuleContext(UnsignedDecimalIntegerContext,i);
	    }
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExactNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExactNumericLiteral(this);
		}
	}


}



class SignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sign;
    }

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSign(this);
		}
	}


}



class UnsignedIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedInteger;
    }

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	unsignedHexadecimalInteger() {
	    return this.getTypedRuleContext(UnsignedHexadecimalIntegerContext,0);
	};

	unsignedOctalInteger() {
	    return this.getTypedRuleContext(UnsignedOctalIntegerContext,0);
	};

	unsignedBinaryInteger() {
	    return this.getTypedRuleContext(UnsignedBinaryIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedInteger(this);
		}
	}


}



class UnsignedDecimalIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedDecimalInteger;
    }

	DIGIT10 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT10);
	    } else {
	        return this.getToken(GqlParser.DIGIT10, i);
	    }
	};


	UNDERSCORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.UNDERSCORE);
	    } else {
	        return this.getToken(GqlParser.UNDERSCORE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedDecimalInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedDecimalInteger(this);
		}
	}


}



class UnsignedBinaryIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedBinaryInteger;
    }

	START2() {
	    return this.getToken(GqlParser.START2, 0);
	};

	DIGIT2 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT2);
	    } else {
	        return this.getToken(GqlParser.DIGIT2, i);
	    }
	};


	UNDERSCORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.UNDERSCORE);
	    } else {
	        return this.getToken(GqlParser.UNDERSCORE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedBinaryInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedBinaryInteger(this);
		}
	}


}



class UnsignedOctalIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedOctalInteger;
    }

	START8() {
	    return this.getToken(GqlParser.START8, 0);
	};

	DIGIT8 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT8);
	    } else {
	        return this.getToken(GqlParser.DIGIT8, i);
	    }
	};


	UNDERSCORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.UNDERSCORE);
	    } else {
	        return this.getToken(GqlParser.UNDERSCORE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedOctalInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedOctalInteger(this);
		}
	}


}



class UnsignedHexadecimalIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedHexadecimalInteger;
    }

	START16() {
	    return this.getToken(GqlParser.START16, 0);
	};

	DIGIT16 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT16);
	    } else {
	        return this.getToken(GqlParser.DIGIT16, i);
	    }
	};


	UNDERSCORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.UNDERSCORE);
	    } else {
	        return this.getToken(GqlParser.UNDERSCORE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedHexadecimalInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedHexadecimalInteger(this);
		}
	}


}



class SignedDecimalIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_signedDecimalInteger;
    }

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	sign() {
	    return this.getTypedRuleContext(SignContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSignedDecimalInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSignedDecimalInteger(this);
		}
	}


}



class ApproximateNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_approximateNumericLiteral;
    }

	exactNumericLiteral() {
	    return this.getTypedRuleContext(ExactNumericLiteralContext,0);
	};

	ESEPARATOR() {
	    return this.getToken(GqlParser.ESEPARATOR, 0);
	};

	signedDecimalInteger() {
	    return this.getTypedRuleContext(SignedDecimalIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterApproximateNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitApproximateNumericLiteral(this);
		}
	}


}



class TemporalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_temporalLiteral;
    }

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timeLiteral() {
	    return this.getTypedRuleContext(TimeLiteralContext,0);
	};

	datetimeLiteral() {
	    return this.getTypedRuleContext(DatetimeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTemporalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTemporalLiteral(this);
		}
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateLiteral;
    }

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateLiteral(this);
		}
	}


}



class TimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeLiteral;
    }

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeLiteral(this);
		}
	}


}



class DatetimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_datetimeLiteral;
    }

	datetimeString() {
	    return this.getTypedRuleContext(DatetimeStringContext,0);
	};

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(GqlParser.TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDatetimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDatetimeLiteral(this);
		}
	}


}



class DateStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateString(this);
		}
	}


}



class TimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeString(this);
		}
	}


}



class DatetimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_datetimeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDatetimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDatetimeString(this);
		}
	}


}



class DurationLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationLiteral;
    }

	DURATION() {
	    return this.getToken(GqlParser.DURATION, 0);
	};

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	intervalLiteral() {
	    return this.getTypedRuleContext(IntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationLiteral(this);
		}
	}


}



class IntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_intervalLiteral;
    }

	yearMonthLiteral() {
	    return this.getTypedRuleContext(YearMonthLiteralContext,0);
	};

	dayTimeLiteral() {
	    return this.getTypedRuleContext(DayTimeLiteralContext,0);
	};

	DIGIT10 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT10);
	    } else {
	        return this.getToken(GqlParser.DIGIT10, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SPACE);
	    } else {
	        return this.getToken(GqlParser.SPACE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIntervalLiteral(this);
		}
	}


}



class YearMonthLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yearMonthLiteral;
    }

	YEAR() {
	    return this.getToken(GqlParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(GqlParser.MONTH, 0);
	};

	DIGIT10 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT10);
	    } else {
	        return this.getToken(GqlParser.DIGIT10, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SPACE);
	    } else {
	        return this.getToken(GqlParser.SPACE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYearMonthLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYearMonthLiteral(this);
		}
	}


}



class DayTimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dayTimeLiteral;
    }

	DAY() {
	    return this.getToken(GqlParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(GqlParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(GqlParser.MINUTE, 0);
	};

	SECOND() {
	    return this.getToken(GqlParser.SECOND, 0);
	};

	DIGIT10 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT10);
	    } else {
	        return this.getToken(GqlParser.DIGIT10, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SPACE);
	    } else {
	        return this.getToken(GqlParser.SPACE, i);
	    }
	};


	fractionalSecondsLiteral() {
	    return this.getTypedRuleContext(FractionalSecondsLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDayTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDayTimeLiteral(this);
		}
	}


}



class FractionalSecondsLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fractionalSecondsLiteral;
    }

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	DIGIT10 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DIGIT10);
	    } else {
	        return this.getToken(GqlParser.DIGIT10, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFractionalSecondsLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFractionalSecondsLiteral(this);
		}
	}


}



class DurationStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationString(this);
		}
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listLiteral;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListLiteral(this);
		}
	}


}



class SetLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setLiteral;
    }

	setValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(SetValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetLiteral(this);
		}
	}


}



class MultisetLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multisetLiteral;
    }

	multisetValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(MultisetValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultisetLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultisetLiteral(this);
		}
	}


}



class OrderedSetLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderedSetLiteral;
    }

	orderedSetValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(OrderedSetValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderedSetLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderedSetLiteral(this);
		}
	}


}



class MapLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapLiteral;
    }

	mapValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(MapValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapLiteral(this);
		}
	}


}



class RecordLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordLiteral;
    }

	recordValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(RecordValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordLiteral(this);
		}
	}


}



class ValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueType;
    }

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	graphElementType() {
	    return this.getTypedRuleContext(GraphElementTypeContext,0);
	};

	mapValueType() {
	    return this.getTypedRuleContext(MapValueTypeContext,0);
	};

	recordValueType() {
	    return this.getTypedRuleContext(RecordValueTypeContext,0);
	};

	graphTypeExpression() {
	    return this.getTypedRuleContext(GraphTypeExpressionContext,0);
	};

	bindingTableTypeExpression() {
	    return this.getTypedRuleContext(BindingTableTypeExpressionContext,0);
	};

	NOTHING() {
	    return this.getToken(GqlParser.NOTHING, 0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	LIST() {
	    return this.getToken(GqlParser.LIST, 0);
	};

	ARRAY() {
	    return this.getToken(GqlParser.ARRAY, 0);
	};

	MULTISET() {
	    return this.getToken(GqlParser.MULTISET, 0);
	};

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	ORDERED() {
	    return this.getToken(GqlParser.ORDERED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueType(this);
		}
	}


}



class OfValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ofValueType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	DOUBLE_COLON() {
	    return this.getToken(GqlParser.DOUBLE_COLON, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOfValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOfValueType(this);
		}
	}


}



class PredefinedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedType;
    }

	BOOL_TYPE() {
	    return this.getToken(GqlParser.BOOL_TYPE, 0);
	};

	characterStringType() {
	    return this.getTypedRuleContext(CharacterStringTypeContext,0);
	};

	byteStringType() {
	    return this.getTypedRuleContext(ByteStringTypeContext,0);
	};

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	temporalType() {
	    return this.getTypedRuleContext(TemporalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedType(this);
		}
	}


}



class CharacterStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_characterStringType;
    }

	STRING_TYPE() {
	    return this.getToken(GqlParser.STRING_TYPE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharacterStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharacterStringType(this);
		}
	}


}



class ByteStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringType;
    }

	BYTES() {
	    return this.getToken(GqlParser.BYTES, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	unsignedDecimalInteger = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnsignedDecimalIntegerContext);
	    } else {
	        return this.getTypedRuleContext(UnsignedDecimalIntegerContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	BINARY() {
	    return this.getToken(GqlParser.BINARY, 0);
	};

	VARBINARY() {
	    return this.getToken(GqlParser.VARBINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringType(this);
		}
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericType;
    }

	exactNumericType() {
	    return this.getTypedRuleContext(ExactNumericTypeContext,0);
	};

	approximateNumericType() {
	    return this.getTypedRuleContext(ApproximateNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericType(this);
		}
	}


}



class ExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_exactNumericType;
    }

	binaryExactNumericType() {
	    return this.getTypedRuleContext(BinaryExactNumericTypeContext,0);
	};

	decimalExactNumericType() {
	    return this.getTypedRuleContext(DecimalExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExactNumericType(this);
		}
	}


}



class BinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_binaryExactNumericType;
    }

	binaryExactSignedNumericType() {
	    return this.getTypedRuleContext(BinaryExactSignedNumericTypeContext,0);
	};

	binaryExactUnsignedNumericType() {
	    return this.getTypedRuleContext(BinaryExactUnsignedNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBinaryExactNumericType(this);
		}
	}


}



class BinaryExactSignedNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_binaryExactSignedNumericType;
    }

	INT8() {
	    return this.getToken(GqlParser.INT8, 0);
	};

	INT16() {
	    return this.getToken(GqlParser.INT16, 0);
	};

	INT32() {
	    return this.getToken(GqlParser.INT32, 0);
	};

	INT64() {
	    return this.getToken(GqlParser.INT64, 0);
	};

	INT128() {
	    return this.getToken(GqlParser.INT128, 0);
	};

	INT256() {
	    return this.getToken(GqlParser.INT256, 0);
	};

	SMALLINT() {
	    return this.getToken(GqlParser.SMALLINT, 0);
	};

	INT() {
	    return this.getToken(GqlParser.INT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	BIGINT() {
	    return this.getToken(GqlParser.BIGINT, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	SIGNED() {
	    return this.getToken(GqlParser.SIGNED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBinaryExactSignedNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBinaryExactSignedNumericType(this);
		}
	}


}



class BinaryExactUnsignedNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_binaryExactUnsignedNumericType;
    }

	UINT8() {
	    return this.getToken(GqlParser.UINT8, 0);
	};

	UINT16() {
	    return this.getToken(GqlParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(GqlParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(GqlParser.UINT64, 0);
	};

	UINT128() {
	    return this.getToken(GqlParser.UINT128, 0);
	};

	UINT256() {
	    return this.getToken(GqlParser.UINT256, 0);
	};

	UINT() {
	    return this.getToken(GqlParser.UINT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	UNSIGNED() {
	    return this.getToken(GqlParser.UNSIGNED, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBinaryExactUnsignedNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBinaryExactUnsignedNumericType(this);
		}
	}


}



class VerboseBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_verboseBinaryExactNumericType;
    }

	INTEGER8() {
	    return this.getToken(GqlParser.INTEGER8, 0);
	};

	INTEGER16() {
	    return this.getToken(GqlParser.INTEGER16, 0);
	};

	INTEGER32() {
	    return this.getToken(GqlParser.INTEGER32, 0);
	};

	INTEGER64() {
	    return this.getToken(GqlParser.INTEGER64, 0);
	};

	INTEGER128() {
	    return this.getToken(GqlParser.INTEGER128, 0);
	};

	INTEGER256() {
	    return this.getToken(GqlParser.INTEGER256, 0);
	};

	INTEGER() {
	    return this.getToken(GqlParser.INTEGER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterVerboseBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitVerboseBinaryExactNumericType(this);
		}
	}


}



class DecimalExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_decimalExactNumericType;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	unsignedDecimalInteger = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnsignedDecimalIntegerContext);
	    } else {
	        return this.getTypedRuleContext(UnsignedDecimalIntegerContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	DECIMAL() {
	    return this.getToken(GqlParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(GqlParser.DEC, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDecimalExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDecimalExactNumericType(this);
		}
	}


}



class ApproximateNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_approximateNumericType;
    }

	FLOAT16() {
	    return this.getToken(GqlParser.FLOAT16, 0);
	};

	FLOAT32() {
	    return this.getToken(GqlParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(GqlParser.FLOAT64, 0);
	};

	FLOAT128() {
	    return this.getToken(GqlParser.FLOAT128, 0);
	};

	FLOAT256() {
	    return this.getToken(GqlParser.FLOAT256, 0);
	};

	FLOAT() {
	    return this.getToken(GqlParser.FLOAT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	unsignedDecimalInteger = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnsignedDecimalIntegerContext);
	    } else {
	        return this.getTypedRuleContext(UnsignedDecimalIntegerContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	REAL() {
	    return this.getToken(GqlParser.REAL, 0);
	};

	DOUBLE() {
	    return this.getToken(GqlParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(GqlParser.PRECISION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterApproximateNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitApproximateNumericType(this);
		}
	}


}



class TemporalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_temporalType;
    }

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	LOCALDATETIME() {
	    return this.getToken(GqlParser.LOCALDATETIME, 0);
	};

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	LOCALTIME() {
	    return this.getToken(GqlParser.LOCALTIME, 0);
	};

	DURATION() {
	    return this.getToken(GqlParser.DURATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTemporalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTemporalType(this);
		}
	}


}



class GraphElementTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphElementType;
    }

	NODE() {
	    return this.getToken(GqlParser.NODE, 0);
	};

	VERTEX() {
	    return this.getToken(GqlParser.VERTEX, 0);
	};

	EDGE() {
	    return this.getToken(GqlParser.EDGE, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GqlParser.RELATIONSHIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphElementType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphElementType(this);
		}
	}


}



class ListValueTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueTypeName;
    }

	LIST() {
	    return this.getToken(GqlParser.LIST, 0);
	};

	ARRAY() {
	    return this.getToken(GqlParser.ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueTypeName(this);
		}
	}


}



class MapValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapValueType;
    }

	MAP() {
	    return this.getToken(GqlParser.MAP, 0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	};

	mapKeyType() {
	    return this.getTypedRuleContext(MapKeyTypeContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapValueType(this);
		}
	}


}



class MapKeyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_mapKeyType;
    }

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMapKeyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMapKeyType(this);
		}
	}


}



class RecordValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordValueType;
    }

	RECORD() {
	    return this.getToken(GqlParser.RECORD, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	fieldTypeList() {
	    return this.getTypedRuleContext(FieldTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordValueType(this);
		}
	}


}



class FieldTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldTypeList;
    }

	fieldType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldTypeContext);
	    } else {
	        return this.getTypedRuleContext(FieldTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldTypeList(this);
		}
	}


}



class FieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldType;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	ofTypePrefix() {
	    return this.getTypedRuleContext(OfTypePrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldType(this);
		}
	}


}



class ParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameterName;
    }

	AMPERSAND() {
	    return this.getToken(GqlParser.AMPERSAND, 0);
	};

	separatedIdentifier() {
	    return this.getTypedRuleContext(SeparatedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameterName(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_identifier;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class SeparatedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_separatedIdentifier;
    }

	extendedIdentifier() {
	    return this.getTypedRuleContext(ExtendedIdentifierContext,0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSeparatedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSeparatedIdentifier(this);
		}
	}


}



class TokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_token;
    }

	nonDelimiterToken() {
	    return this.getTypedRuleContext(NonDelimiterTokenContext,0);
	};

	delimiterToken() {
	    return this.getTypedRuleContext(DelimiterTokenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitToken(this);
		}
	}


}



class NonDelimiterTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonDelimiterToken;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	KEY_WORD() {
	    return this.getToken(GqlParser.KEY_WORD, 0);
	};

	unsignedNumericLiteral() {
	    return this.getTypedRuleContext(UnsignedNumericLiteralContext,0);
	};

	byteStringLiteral() {
	    return this.getTypedRuleContext(ByteStringLiteralContext,0);
	};

	MULTISET_ALT_OPERATOR() {
	    return this.getToken(GqlParser.MULTISET_ALT_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonDelimiterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonDelimiterToken(this);
		}
	}


}



class NonDelimitedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonDelimitedIdentifier;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	extendedIdentifier() {
	    return this.getTypedRuleContext(ExtendedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonDelimitedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonDelimitedIdentifier(this);
		}
	}


}



class RegularIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_regularIdentifier;
    }

	LETTER() {
	    return this.getToken(GqlParser.LETTER, 0);
	};

	GQL_LANGUAGE_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.GQL_LANGUAGE_CHAR);
	    } else {
	        return this.getToken(GqlParser.GQL_LANGUAGE_CHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRegularIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRegularIdentifier(this);
		}
	}


}



class ExtendedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_extendedIdentifier;
    }

	GQL_LANGUAGE_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.GQL_LANGUAGE_CHAR);
	    } else {
	        return this.getToken(GqlParser.GQL_LANGUAGE_CHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExtendedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExtendedIdentifier(this);
		}
	}


}



class DelimiterTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_delimiterToken;
    }

	GQL_SPECIAL_CHAR() {
	    return this.getToken(GqlParser.GQL_SPECIAL_CHAR, 0);
	};

	BRACKER_MINUS_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKER_MINUS_RIGHT_ARROW, 0);
	};

	BRACKET_TILDE_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_TILDE_RIGHT_ARROW, 0);
	};

	CONCATENATION_OPERATOR() {
	    return this.getToken(GqlParser.CONCATENATION_OPERATOR, 0);
	};

	DOUBLE_COLON() {
	    return this.getToken(GqlParser.DOUBLE_COLON, 0);
	};

	DOUBLE_MINUS() {
	    return this.getToken(GqlParser.DOUBLE_MINUS, 0);
	};

	DOUBLE_PERIOD() {
	    return this.getToken(GqlParser.DOUBLE_PERIOD, 0);
	};

	GRATER_THEN_OPERATOR() {
	    return this.getToken(GqlParser.GRATER_THEN_OPERATOR, 0);
	};

	GREATER_THEN_OR_EQUALS() {
	    return this.getToken(GqlParser.GREATER_THEN_OR_EQUALS, 0);
	};

	LEFT_ARROW_MIUNUS() {
	    return this.getToken(GqlParser.LEFT_ARROW_MIUNUS, 0);
	};

	LEFT_ARROW_MINUS_RIGHT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_MINUS_RIGHT_BRACKET, 0);
	};

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	LEFT_ARROW_RIGHT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_RIGHT_BRACKET, 0);
	};

	LEFT_MINUS_RIGHT() {
	    return this.getToken(GqlParser.LEFT_MINUS_RIGHT, 0);
	};

	LEFT_MINUS_SLASH() {
	    return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	};

	LEFT_TILDE_SLASH() {
	    return this.getToken(GqlParser.LEFT_TILDE_SLASH, 0);
	};

	LESS_THEN() {
	    return this.getToken(GqlParser.LESS_THEN, 0);
	};

	LESS_THEN_OR_EQUALS() {
	    return this.getToken(GqlParser.LESS_THEN_OR_EQUALS, 0);
	};

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	MINUS_SLESH() {
	    return this.getToken(GqlParser.MINUS_SLESH, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(GqlParser.NOT_EQUALS, 0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	SLASH_MINUS() {
	    return this.getToken(GqlParser.SLASH_MINUS, 0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	SLASH_TILDE_RIGHT() {
	    return this.getToken(GqlParser.SLASH_TILDE_RIGHT, 0);
	};

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	};

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	datetimeString() {
	    return this.getTypedRuleContext(DatetimeStringContext,0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDelimiterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDelimiterToken(this);
		}
	}


}



class DelimitedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_delimitedIdentifier;
    }

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	unbrokenAccentQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenAccentQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDelimitedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDelimitedIdentifier(this);
		}
	}


}



class SeparatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_separator;
    }

	comment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentContext);
	    } else {
	        return this.getTypedRuleContext(CommentContext,i);
	    }
	};

	WHITESPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.WHITESPACE);
	    } else {
	        return this.getToken(GqlParser.WHITESPACE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSeparator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSeparator(this);
		}
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comment;
    }

	simpleComment() {
	    return this.getTypedRuleContext(SimpleCommentContext,0);
	};

	bracketedComment() {
	    return this.getTypedRuleContext(BracketedCommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComment(this);
		}
	}


}



class SimpleCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleComment;
    }

	NEW_LINE() {
	    return this.getToken(GqlParser.NEW_LINE, 0);
	};

	DOUBLE_SOLIDUS() {
	    return this.getToken(GqlParser.DOUBLE_SOLIDUS, 0);
	};

	DOUBLE_MINUS() {
	    return this.getToken(GqlParser.DOUBLE_MINUS, 0);
	};

	GQL_TERMINAL_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.GQL_TERMINAL_CHAR);
	    } else {
	        return this.getToken(GqlParser.GQL_TERMINAL_CHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleComment(this);
		}
	}


}



class BracketedCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bracketedComment;
    }

	BRACKETED_COMMENT_START() {
	    return this.getToken(GqlParser.BRACKETED_COMMENT_START, 0);
	};

	GQL_TERMINAL_CHAR() {
	    return this.getToken(GqlParser.GQL_TERMINAL_CHAR, 0);
	};

	BRACKETED_CoMMENT_END() {
	    return this.getToken(GqlParser.BRACKETED_CoMMENT_END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBracketedComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBracketedComment(this);
		}
	}


}



class EdgeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeSynonym;
    }

	EDGE() {
	    return this.getToken(GqlParser.EDGE, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GqlParser.RELATIONSHIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeSynonym(this);
		}
	}


}



class NodeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeSynonym;
    }

	NODE() {
	    return this.getToken(GqlParser.NODE, 0);
	};

	VERTEX() {
	    return this.getToken(GqlParser.VERTEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeSynonym(this);
		}
	}


}




GqlParser.GqlParserContext = GqlParserContext; 
GqlParser.RequestParameterSetContext = RequestParameterSetContext; 
GqlParser.GqlProgramContext = GqlProgramContext; 
GqlParser.MainActivityContext = MainActivityContext; 
GqlParser.SessionActivityContext = SessionActivityContext; 
GqlParser.SessionParameterCommandContext = SessionParameterCommandContext; 
GqlParser.TransactionActivityContext = TransactionActivityContext; 
GqlParser.PreambleContext = PreambleContext; 
GqlParser.PreambleOptionContext = PreambleOptionContext; 
GqlParser.PreambleOptionIdentifierContext = PreambleOptionIdentifierContext; 
GqlParser.SessionSetCommandContext = SessionSetCommandContext; 
GqlParser.SessionSetSchemaClauseContext = SessionSetSchemaClauseContext; 
GqlParser.SessionSetGraphClauseContext = SessionSetGraphClauseContext; 
GqlParser.SessionSetTimeZoneClauseContext = SessionSetTimeZoneClauseContext; 
GqlParser.SetTimeZoneValueContext = SetTimeZoneValueContext; 
GqlParser.SessionSetParameterClauseContext = SessionSetParameterClauseContext; 
GqlParser.SessionParameterFlagContext = SessionParameterFlagContext; 
GqlParser.SessionParameterContext = SessionParameterContext; 
GqlParser.SessionRemoveCommandContext = SessionRemoveCommandContext; 
GqlParser.SessionClearCommandContext = SessionClearCommandContext; 
GqlParser.SessionCloseCommandContext = SessionCloseCommandContext; 
GqlParser.StartTransactionCommandContext = StartTransactionCommandContext; 
GqlParser.EndTransactionCommandContext = EndTransactionCommandContext; 
GqlParser.TransactionCharacteristicsContext = TransactionCharacteristicsContext; 
GqlParser.TransactionModeContext = TransactionModeContext; 
GqlParser.TransactionAccessModeContext = TransactionAccessModeContext; 
GqlParser.ImplementationDefinedAccessModeContext = ImplementationDefinedAccessModeContext; 
GqlParser.RollbackCommandContext = RollbackCommandContext; 
GqlParser.CommitCommandContext = CommitCommandContext; 
GqlParser.NestedProcedureSpecificationContext = NestedProcedureSpecificationContext; 
GqlParser.ProcedureSpecificationContext = ProcedureSpecificationContext; 
GqlParser.NestedCatalogModifyingProcedureSpecificationContext = NestedCatalogModifyingProcedureSpecificationContext; 
GqlParser.CatalogModifyingProcedureSpecificationContext = CatalogModifyingProcedureSpecificationContext; 
GqlParser.NestedDataModifyingProcedureSpecificationContext = NestedDataModifyingProcedureSpecificationContext; 
GqlParser.DataModifyingProcedureSpecificationContext = DataModifyingProcedureSpecificationContext; 
GqlParser.NestedQuerySpecificationContext = NestedQuerySpecificationContext; 
GqlParser.QuerySpecificationContext = QuerySpecificationContext; 
GqlParser.NestedFunctionSpecificationContext = NestedFunctionSpecificationContext; 
GqlParser.FunctionSpecificationContext = FunctionSpecificationContext; 
GqlParser.ProcedureBodyContext = ProcedureBodyContext; 
GqlParser.StaticVariableDefinitionBlockContext = StaticVariableDefinitionBlockContext; 
GqlParser.BindingVariableDefinitionBlockContext = BindingVariableDefinitionBlockContext; 
GqlParser.StatementBlockContext = StatementBlockContext; 
GqlParser.ThenStatementContext = ThenStatementContext; 
GqlParser.StaticVariableDefinitionContext = StaticVariableDefinitionContext; 
GqlParser.ProcedureVariableDefinitionContext = ProcedureVariableDefinitionContext; 
GqlParser.ProcedureInitializerContext = ProcedureInitializerContext; 
GqlParser.QueryVariableDefinitionContext = QueryVariableDefinitionContext; 
GqlParser.QueryInitializerContext = QueryInitializerContext; 
GqlParser.FunctionVariableDefinitionContext = FunctionVariableDefinitionContext; 
GqlParser.FunctionInitializerContext = FunctionInitializerContext; 
GqlParser.CompactVariableDeclarationListContext = CompactVariableDeclarationListContext; 
GqlParser.CompactVariableDeclarationContext = CompactVariableDeclarationContext; 
GqlParser.BindingVariableDeclarationContext = BindingVariableDeclarationContext; 
GqlParser.CompactVariableDefinitionListContext = CompactVariableDefinitionListContext; 
GqlParser.CompactVariableDefinitionContext = CompactVariableDefinitionContext; 
GqlParser.CompactValueVariableDefinitionListContext = CompactValueVariableDefinitionListContext; 
GqlParser.CompactValueVariableDefinitionContext = CompactValueVariableDefinitionContext; 
GqlParser.BindingVariableDefinitionListContext = BindingVariableDefinitionListContext; 
GqlParser.BindingVariableDefinitionContext = BindingVariableDefinitionContext; 
GqlParser.ParameterDefinitionContext = ParameterDefinitionContext; 
GqlParser.GraphVariableDeclarationContext = GraphVariableDeclarationContext; 
GqlParser.GraphVariableDefinitionContext = GraphVariableDefinitionContext; 
GqlParser.GraphParameterDefinitionContext = GraphParameterDefinitionContext; 
GqlParser.GraphVariableContext = GraphVariableContext; 
GqlParser.GraphInitializerContext = GraphInitializerContext; 
GqlParser.BindingTableVariableDeclarationContext = BindingTableVariableDeclarationContext; 
GqlParser.BindingTableVariableDefinitionContext = BindingTableVariableDefinitionContext; 
GqlParser.BindingTableParameterDefinitionContext = BindingTableParameterDefinitionContext; 
GqlParser.BindingTableVariableContext = BindingTableVariableContext; 
GqlParser.BindingTableInitializerContext = BindingTableInitializerContext; 
GqlParser.ValueVariableDeclarationContext = ValueVariableDeclarationContext; 
GqlParser.ValueVariableDefinitionContext = ValueVariableDefinitionContext; 
GqlParser.ValueParameterDefinitionContext = ValueParameterDefinitionContext; 
GqlParser.ValueInitializerContext = ValueInitializerContext; 
GqlParser.PrimaryResultObjectExpressionContext = PrimaryResultObjectExpressionContext; 
GqlParser.GraphExpressionContext = GraphExpressionContext; 
GqlParser.CopyGraphExpressionContext = CopyGraphExpressionContext; 
GqlParser.GraphTypeExpressionContext = GraphTypeExpressionContext; 
GqlParser.AsGraphTypeContext = AsGraphTypeContext; 
GqlParser.CopyGraphTypeExpressionContext = CopyGraphTypeExpressionContext; 
GqlParser.LikeGraphExpressionContext = LikeGraphExpressionContext; 
GqlParser.OfGraphTypeContext = OfGraphTypeContext; 
GqlParser.LikeGraphExpressionShorthandContext = LikeGraphExpressionShorthandContext; 
GqlParser.OfBindingTableTypeContext = OfBindingTableTypeContext; 
GqlParser.OfTypePrefixContext = OfTypePrefixContext; 
GqlParser.BindingTableTypeExpressionContext = BindingTableTypeExpressionContext; 
GqlParser.BindingTableTypeContext = BindingTableTypeContext; 
GqlParser.LikeBindingTableTypeContext = LikeBindingTableTypeContext; 
GqlParser.LikeBindingTableShorthandContext = LikeBindingTableShorthandContext; 
GqlParser.StatementContext = StatementContext; 
GqlParser.DataModifyingStatementContext = DataModifyingStatementContext; 
GqlParser.QueryStatementContext = QueryStatementContext; 
GqlParser.CallProcedureStatementContext = CallProcedureStatementContext; 
GqlParser.StatementModeContext = StatementModeContext; 
GqlParser.SimpleCatalogModifyingStatementContext = SimpleCatalogModifyingStatementContext; 
GqlParser.PrimitiveCatalogModifyingStatementContext = PrimitiveCatalogModifyingStatementContext; 
GqlParser.SimpleDataAccessingStatementContext = SimpleDataAccessingStatementContext; 
GqlParser.SimpleDataModifyingStatementContext = SimpleDataModifyingStatementContext; 
GqlParser.PrimitiveDataModifyingStatementContext = PrimitiveDataModifyingStatementContext; 
GqlParser.SimpleQueryStatementContext = SimpleQueryStatementContext; 
GqlParser.SimpleDataReadingStatementContext = SimpleDataReadingStatementContext; 
GqlParser.SimpleDataTransformingStatementContext = SimpleDataTransformingStatementContext; 
GqlParser.PrimitiveDataTransformingStatementContext = PrimitiveDataTransformingStatementContext; 
GqlParser.LinearCatalogModifyingStatementContext = LinearCatalogModifyingStatementContext; 
GqlParser.CreateSchemaStatementContext = CreateSchemaStatementContext; 
GqlParser.DropSchemaStatementContext = DropSchemaStatementContext; 
GqlParser.CreateGraphStatementContext = CreateGraphStatementContext; 
GqlParser.GraphSourceContext = GraphSourceContext; 
GqlParser.GraphSpecificationContext = GraphSpecificationContext; 
GqlParser.NestedGraphQuerySpecificationContext = NestedGraphQuerySpecificationContext; 
GqlParser.NestedAmbientDataModifyingProcedureSpecificationContext = NestedAmbientDataModifyingProcedureSpecificationContext; 
GqlParser.DropGraphStatementContext = DropGraphStatementContext; 
GqlParser.CreateGraphTypeStatementContext = CreateGraphTypeStatementContext; 
GqlParser.GraphTypeInitializerContext = GraphTypeInitializerContext; 
GqlParser.GraphTypeSpecificationContext = GraphTypeSpecificationContext; 
GqlParser.NestedGraphTypeSpecificationContext = NestedGraphTypeSpecificationContext; 
GqlParser.GraphTypeSpecificationBodyContext = GraphTypeSpecificationBodyContext; 
GqlParser.ElementTypeDefinitionListContext = ElementTypeDefinitionListContext; 
GqlParser.ElementTypeDefinitionContext = ElementTypeDefinitionContext; 
GqlParser.NodeTypeDefinitionContext = NodeTypeDefinitionContext; 
GqlParser.NodeTypeFillerContext = NodeTypeFillerContext; 
GqlParser.NodeTypeLabelSetDefinitionContext = NodeTypeLabelSetDefinitionContext; 
GqlParser.NodeTypePropertyTypeSetDefinitionContext = NodeTypePropertyTypeSetDefinitionContext; 
GqlParser.EdgeTypeDefinitionContext = EdgeTypeDefinitionContext; 
GqlParser.EdgeTypeFillerContext = EdgeTypeFillerContext; 
GqlParser.EdgeTypeLabelSetDefinitionContext = EdgeTypeLabelSetDefinitionContext; 
GqlParser.EdgeTypePropertyTypeSetDefinitionContext = EdgeTypePropertyTypeSetDefinitionContext; 
GqlParser.FullEdgeTypePatternContext = FullEdgeTypePatternContext; 
GqlParser.FullEdgeTypePatternPointingRightContext = FullEdgeTypePatternPointingRightContext; 
GqlParser.FullEdgeTypePatternPointingLeftContext = FullEdgeTypePatternPointingLeftContext; 
GqlParser.FullEdgeTypePatternAnyDirectionContext = FullEdgeTypePatternAnyDirectionContext; 
GqlParser.ArcTypePointingRightContext = ArcTypePointingRightContext; 
GqlParser.ArcTypePointingLeftContext = ArcTypePointingLeftContext; 
GqlParser.ArcTypeAnyDirectionContext = ArcTypeAnyDirectionContext; 
GqlParser.ArcTypeFillerContext = ArcTypeFillerContext; 
GqlParser.AbbreviatedEdgeTypePatternContext = AbbreviatedEdgeTypePatternContext; 
GqlParser.AbbreviatedEdgeTypePatternPointingRightContext = AbbreviatedEdgeTypePatternPointingRightContext; 
GqlParser.AbbreviatedEdgeTypePatternPointingLeftContext = AbbreviatedEdgeTypePatternPointingLeftContext; 
GqlParser.AbbreviatedEdgeTypePatternAnyDirectionContext = AbbreviatedEdgeTypePatternAnyDirectionContext; 
GqlParser.SourceNodeTypeReferenceContext = SourceNodeTypeReferenceContext; 
GqlParser.DestinationNodeTypeReferenceContext = DestinationNodeTypeReferenceContext; 
GqlParser.EdgeKindContext = EdgeKindContext; 
GqlParser.EndpointDefinitionContext = EndpointDefinitionContext; 
GqlParser.EndpointPairDefinitionContext = EndpointPairDefinitionContext; 
GqlParser.EndpointPairDefinitionPointingRightContext = EndpointPairDefinitionPointingRightContext; 
GqlParser.EndpointPairDefinitionPointingLeftContext = EndpointPairDefinitionPointingLeftContext; 
GqlParser.EndpointPairDefinitionAnyDirectionContext = EndpointPairDefinitionAnyDirectionContext; 
GqlParser.ConnectorPointingRightContext = ConnectorPointingRightContext; 
GqlParser.ConnectorAnyDirectionContext = ConnectorAnyDirectionContext; 
GqlParser.LabelSetDefinitionContext = LabelSetDefinitionContext; 
GqlParser.PropertyTypeSetDefinitionContext = PropertyTypeSetDefinitionContext; 
GqlParser.PropertyTypeDefinitionListContext = PropertyTypeDefinitionListContext; 
GqlParser.PropertyTypeDefinitionContext = PropertyTypeDefinitionContext; 
GqlParser.DropGraphTypeStatementContext = DropGraphTypeStatementContext; 
GqlParser.CreateProcedureStatementContext = CreateProcedureStatementContext; 
GqlParser.DropProcedureStatementContext = DropProcedureStatementContext; 
GqlParser.CreateQueryStatementContext = CreateQueryStatementContext; 
GqlParser.DropQueryStatementContext = DropQueryStatementContext; 
GqlParser.CreateFunctionStatementContext = CreateFunctionStatementContext; 
GqlParser.DropFunctionStatementContext = DropFunctionStatementContext; 
GqlParser.CallCatalogModifyingProcedureStatementContext = CallCatalogModifyingProcedureStatementContext; 
GqlParser.LinearDataModifyingStatementContext = LinearDataModifyingStatementContext; 
GqlParser.FocusedLinearDataModifyingStatementContext = FocusedLinearDataModifyingStatementContext; 
GqlParser.FocusedLinearDataModifyingStatementBodyContext = FocusedLinearDataModifyingStatementBodyContext; 
GqlParser.AmbientLinearDataModifyingStatementContext = AmbientLinearDataModifyingStatementContext; 
GqlParser.ConditionalDataModifyingStatementContext = ConditionalDataModifyingStatementContext; 
GqlParser.WhenThenLinearDataModifyingStatementBranchContext = WhenThenLinearDataModifyingStatementBranchContext; 
GqlParser.ElseLinearDataModifyingStatementBranchContext = ElseLinearDataModifyingStatementBranchContext; 
GqlParser.WhenClauseContext = WhenClauseContext; 
GqlParser.DoStatementContext = DoStatementContext; 
GqlParser.InsertStatementContext = InsertStatementContext; 
GqlParser.MergeStatementContext = MergeStatementContext; 
GqlParser.SetStatementContext = SetStatementContext; 
GqlParser.SetItemListContext = SetItemListContext; 
GqlParser.SetItemContext = SetItemContext; 
GqlParser.SetPropertyItemContext = SetPropertyItemContext; 
GqlParser.SetAllPropertiesItemContext = SetAllPropertiesItemContext; 
GqlParser.SetLabelItemContext = SetLabelItemContext; 
GqlParser.LabelSetExpressionContext = LabelSetExpressionContext; 
GqlParser.RemoveStatementContext = RemoveStatementContext; 
GqlParser.RemoveItemListContext = RemoveItemListContext; 
GqlParser.RemoveItemContext = RemoveItemContext; 
GqlParser.RemovePropertyItemContext = RemovePropertyItemContext; 
GqlParser.RemoveLabelItemContext = RemoveLabelItemContext; 
GqlParser.DeleteStatementContext = DeleteStatementContext; 
GqlParser.DeleteItemListContext = DeleteItemListContext; 
GqlParser.CompositeQueryStatementContext = CompositeQueryStatementContext; 
GqlParser.ConditionalQueryStatementContext = ConditionalQueryStatementContext; 
GqlParser.WhenThenLinearQueryBranchContext = WhenThenLinearQueryBranchContext; 
GqlParser.ElseLinearQueryBranchContext = ElseLinearQueryBranchContext; 
GqlParser.CompositeQueryExpressionContext = CompositeQueryExpressionContext; 
GqlParser.QueryConjunctionContext = QueryConjunctionContext; 
GqlParser.SetOperatorContext = SetOperatorContext; 
GqlParser.LinearQueryStatementContext = LinearQueryStatementContext; 
GqlParser.AmbientLinearQueryStatementContext = AmbientLinearQueryStatementContext; 
GqlParser.FocusedLinearQueryStatementContext = FocusedLinearQueryStatementContext; 
GqlParser.FocusedLinearQueryStatementBodyContext = FocusedLinearQueryStatementBodyContext; 
GqlParser.SimpleLinearQueryStatementContext = SimpleLinearQueryStatementContext; 
GqlParser.MatchStatementContext = MatchStatementContext; 
GqlParser.CallQueryStatementContext = CallQueryStatementContext; 
GqlParser.MandatoryStatementContext = MandatoryStatementContext; 
GqlParser.OptionalStatementContext = OptionalStatementContext; 
GqlParser.FilterStatementContext = FilterStatementContext; 
GqlParser.LetStatementContext = LetStatementContext; 
GqlParser.AggregateStatementContext = AggregateStatementContext; 
GqlParser.ForStatementContext = ForStatementContext; 
GqlParser.ForItemListContext = ForItemListContext; 
GqlParser.ForItemContext = ForItemContext; 
GqlParser.ForItemAliasContext = ForItemAliasContext; 
GqlParser.ForOrdinalityOrIndexContext = ForOrdinalityOrIndexContext; 
GqlParser.OrderByAndPageStatementContext = OrderByAndPageStatementContext; 
GqlParser.CallFunctionStatementContext = CallFunctionStatementContext; 
GqlParser.PrimitiveResultStatementContext = PrimitiveResultStatementContext; 
GqlParser.ReturnStatementContext = ReturnStatementContext; 
GqlParser.ReturnStatementBodyContext = ReturnStatementBodyContext; 
GqlParser.ReturnItemListContext = ReturnItemListContext; 
GqlParser.ReturnItemContext = ReturnItemContext; 
GqlParser.ReturnItemAliasContext = ReturnItemAliasContext; 
GqlParser.SelectStatementContext = SelectStatementContext; 
GqlParser.SelectItemListContext = SelectItemListContext; 
GqlParser.SelectItemContext = SelectItemContext; 
GqlParser.SelectItemAliasContext = SelectItemAliasContext; 
GqlParser.HavingClauseContext = HavingClauseContext; 
GqlParser.SelectStatementBodyContext = SelectStatementBodyContext; 
GqlParser.SelectGraphMatchListContext = SelectGraphMatchListContext; 
GqlParser.SelectGraphMatchContext = SelectGraphMatchContext; 
GqlParser.SelectQuerySpecificationContext = SelectQuerySpecificationContext; 
GqlParser.ProjectStatementContext = ProjectStatementContext; 
GqlParser.FromGraphClauseContext = FromGraphClauseContext; 
GqlParser.UseGraphClauseContext = UseGraphClauseContext; 
GqlParser.AtSchemaClauseContext = AtSchemaClauseContext; 
GqlParser.OfTypeSignatureContext = OfTypeSignatureContext; 
GqlParser.TypeSignatureContext = TypeSignatureContext; 
GqlParser.ParenthesizedFormalParameterListContext = ParenthesizedFormalParameterListContext; 
GqlParser.FormalParameterListContext = FormalParameterListContext; 
GqlParser.MandatoryFormalParameterListContext = MandatoryFormalParameterListContext; 
GqlParser.OptionalFormalParameterListContext = OptionalFormalParameterListContext; 
GqlParser.FormalParameterDeclarationListContext = FormalParameterDeclarationListContext; 
GqlParser.FormalParameterDeclarationContext = FormalParameterDeclarationContext; 
GqlParser.FormalParameterDefinitionListContext = FormalParameterDefinitionListContext; 
GqlParser.FormalParameterDefinitionContext = FormalParameterDefinitionContext; 
GqlParser.ParameterCardinalityContext = ParameterCardinalityContext; 
GqlParser.ProcedureResultTypeContext = ProcedureResultTypeContext; 
GqlParser.GraphPatternContext = GraphPatternContext; 
GqlParser.PathPatternListContext = PathPatternListContext; 
GqlParser.PathPatternContext = PathPatternContext; 
GqlParser.KeepClauseContext = KeepClauseContext; 
GqlParser.GraphPatternWhereClauseContext = GraphPatternWhereClauseContext; 
GqlParser.PathPatternExpressionContext = PathPatternExpressionContext; 
GqlParser.PathMultisetAlternationContext = PathMultisetAlternationContext; 
GqlParser.PathPatternUnionContext = PathPatternUnionContext; 
GqlParser.PathTermContext = PathTermContext; 
GqlParser.PathFactorContext = PathFactorContext; 
GqlParser.QuantifiedPathPrimaryContext = QuantifiedPathPrimaryContext; 
GqlParser.QuestionedPathPrimaryContext = QuestionedPathPrimaryContext; 
GqlParser.PathPrimaryContext = PathPrimaryContext; 
GqlParser.ElementPatternContext = ElementPatternContext; 
GqlParser.NodePatternContext = NodePatternContext; 
GqlParser.ElementPatternFillerContext = ElementPatternFillerContext; 
GqlParser.IsLabelExpressionContext = IsLabelExpressionContext; 
GqlParser.ElementPatternPredicateContext = ElementPatternPredicateContext; 
GqlParser.ElementPatternWhereClauseContext = ElementPatternWhereClauseContext; 
GqlParser.ElementPropertySpecificationContext = ElementPropertySpecificationContext; 
GqlParser.PropertyKeyValuePairListContext = PropertyKeyValuePairListContext; 
GqlParser.PropertyKeyValuePairContext = PropertyKeyValuePairContext; 
GqlParser.ElementPatternCostClauseContext = ElementPatternCostClauseContext; 
GqlParser.CostClauseContext = CostClauseContext; 
GqlParser.EdgePatternContext = EdgePatternContext; 
GqlParser.FullEdgePatternContext = FullEdgePatternContext; 
GqlParser.FullEdgePointingLeftContext = FullEdgePointingLeftContext; 
GqlParser.FullEdgeUndirectedContext = FullEdgeUndirectedContext; 
GqlParser.FullEdgePointingRightContext = FullEdgePointingRightContext; 
GqlParser.FullEdgeLeftOrUndirectedContext = FullEdgeLeftOrUndirectedContext; 
GqlParser.FullEdgeUndirectedOrRightContext = FullEdgeUndirectedOrRightContext; 
GqlParser.FullEdgeLeftOrRightContext = FullEdgeLeftOrRightContext; 
GqlParser.FullEdgeAnyDirectionContext = FullEdgeAnyDirectionContext; 
GqlParser.AbbreviatedEdgePatternContext = AbbreviatedEdgePatternContext; 
GqlParser.GraphPatternQuantifierContext = GraphPatternQuantifierContext; 
GqlParser.FixedQuantifierContext = FixedQuantifierContext; 
GqlParser.GeneralQuantifierContext = GeneralQuantifierContext; 
GqlParser.ParenthesizedPathPatternExpressionContext = ParenthesizedPathPatternExpressionContext; 
GqlParser.SubpathVariableDeclarationContext = SubpathVariableDeclarationContext; 
GqlParser.ParenthesizedPathPatternWhereClauseContext = ParenthesizedPathPatternWhereClauseContext; 
GqlParser.PathPatternPrefixContext = PathPatternPrefixContext; 
GqlParser.PathModePrefixContext = PathModePrefixContext; 
GqlParser.PathSearchPrefixContext = PathSearchPrefixContext; 
GqlParser.AllPathSearchContext = AllPathSearchContext; 
GqlParser.AnyPathSearchContext = AnyPathSearchContext; 
GqlParser.ShortestPathSearchContext = ShortestPathSearchContext; 
GqlParser.AllShortestPathSearchContext = AllShortestPathSearchContext; 
GqlParser.AnyShortestPathSearchContext = AnyShortestPathSearchContext; 
GqlParser.CountedShortestPathSearchContext = CountedShortestPathSearchContext; 
GqlParser.CountedShortestGroupSearchContext = CountedShortestGroupSearchContext; 
GqlParser.SimpleGraphPatternContext = SimpleGraphPatternContext; 
GqlParser.SimplePathPatternListContext = SimplePathPatternListContext; 
GqlParser.SimplePathPatternContext = SimplePathPatternContext; 
GqlParser.LabelExpressionContext = LabelExpressionContext; 
GqlParser.LabelTermContext = LabelTermContext; 
GqlParser.LabelFactorContext = LabelFactorContext; 
GqlParser.ParenthesizedLabelExpressionContext = ParenthesizedLabelExpressionContext; 
GqlParser.SimplifiedPathPatternExpressionContext = SimplifiedPathPatternExpressionContext; 
GqlParser.SimplifiedDefaultingLeftContext = SimplifiedDefaultingLeftContext; 
GqlParser.SimplifiedDefaultingUndirectedContext = SimplifiedDefaultingUndirectedContext; 
GqlParser.SimplifiedDefaultingRightContext = SimplifiedDefaultingRightContext; 
GqlParser.SimplifiedDefaultingLeftOrUndirectedContext = SimplifiedDefaultingLeftOrUndirectedContext; 
GqlParser.SimplifiedDefaultingUndirectedOrRightContext = SimplifiedDefaultingUndirectedOrRightContext; 
GqlParser.SimplifiedDefaultingLeftOrRightContext = SimplifiedDefaultingLeftOrRightContext; 
GqlParser.SimplifiedDefaultingAnyDirectionContext = SimplifiedDefaultingAnyDirectionContext; 
GqlParser.SimplifiedContentsContext = SimplifiedContentsContext; 
GqlParser.SimplifiedPathUnionContext = SimplifiedPathUnionContext; 
GqlParser.SimplifiedMultisetAlternationContext = SimplifiedMultisetAlternationContext; 
GqlParser.SimplifiedTermContext = SimplifiedTermContext; 
GqlParser.SimplifiedFactorLowContext = SimplifiedFactorLowContext; 
GqlParser.SimplifiedFactorHighContext = SimplifiedFactorHighContext; 
GqlParser.SimplifiedQuantifiedContext = SimplifiedQuantifiedContext; 
GqlParser.SimplifiedQuestionedContext = SimplifiedQuestionedContext; 
GqlParser.SimplifiedTertiaryContext = SimplifiedTertiaryContext; 
GqlParser.SimplifiedDirectionOverrideContext = SimplifiedDirectionOverrideContext; 
GqlParser.SimplifiedOverrideLeftContext = SimplifiedOverrideLeftContext; 
GqlParser.SimplifiedOverrideUndirectedContext = SimplifiedOverrideUndirectedContext; 
GqlParser.SimplifiedOverrideRightContext = SimplifiedOverrideRightContext; 
GqlParser.SimplifiedOverrideLeftOrUndirectedContext = SimplifiedOverrideLeftOrUndirectedContext; 
GqlParser.SimplifiedOverrideUndirectedOrRightContext = SimplifiedOverrideUndirectedOrRightContext; 
GqlParser.SimplifiedOverrideLeftOrRightContext = SimplifiedOverrideLeftOrRightContext; 
GqlParser.SimplifiedOverrideAnyDirectionContext = SimplifiedOverrideAnyDirectionContext; 
GqlParser.SimplifiedSecondaryContext = SimplifiedSecondaryContext; 
GqlParser.SimplifiedNegationContext = SimplifiedNegationContext; 
GqlParser.SimplifiedPrimaryContext = SimplifiedPrimaryContext; 
GqlParser.WhereClauseContext = WhereClauseContext; 
GqlParser.ProcedureCallContext = ProcedureCallContext; 
GqlParser.NamedProcedureCallContext = NamedProcedureCallContext; 
GqlParser.ProcedureArgumentListContext = ProcedureArgumentListContext; 
GqlParser.ProcedureArgumentContext = ProcedureArgumentContext; 
GqlParser.YieldClauseContext = YieldClauseContext; 
GqlParser.YieldItemListContext = YieldItemListContext; 
GqlParser.YieldItemContext = YieldItemContext; 
GqlParser.GroupByClauseContext = GroupByClauseContext; 
GqlParser.GroupingElementListContext = GroupingElementListContext; 
GqlParser.EmptyGroupingSetContext = EmptyGroupingSetContext; 
GqlParser.OrderByClauseContext = OrderByClauseContext; 
GqlParser.AggregateFunctionContext = AggregateFunctionContext; 
GqlParser.GeneralSetFunctionContext = GeneralSetFunctionContext; 
GqlParser.BinarySetFunctionContext = BinarySetFunctionContext; 
GqlParser.GeneralSetFunctionTypeContext = GeneralSetFunctionTypeContext; 
GqlParser.SetQuantifierContext = SetQuantifierContext; 
GqlParser.BinarySetFunctionTypeContext = BinarySetFunctionTypeContext; 
GqlParser.DependentValueExpressionContext = DependentValueExpressionContext; 
GqlParser.IndependentValueExpressionContext = IndependentValueExpressionContext; 
GqlParser.SortSpecificationListContext = SortSpecificationListContext; 
GqlParser.SortSpecificationContext = SortSpecificationContext; 
GqlParser.NullOrderingContext = NullOrderingContext; 
GqlParser.LimitClauseContext = LimitClauseContext; 
GqlParser.OffsetClauseContext = OffsetClauseContext; 
GqlParser.SchemaReferenceContext = SchemaReferenceContext; 
GqlParser.CatalogSchemaParentAndNameContext = CatalogSchemaParentAndNameContext; 
GqlParser.GraphReferenceContext = GraphReferenceContext; 
GqlParser.GraphResolutionExpressionContext = GraphResolutionExpressionContext; 
GqlParser.CatalogGraphReferenceContext = CatalogGraphReferenceContext; 
GqlParser.CatalogGraphParentAndNameContext = CatalogGraphParentAndNameContext; 
GqlParser.GraphParentSpecificationContext = GraphParentSpecificationContext; 
GqlParser.LocalGraphReferenceContext = LocalGraphReferenceContext; 
GqlParser.GraphTypeReferenceContext = GraphTypeReferenceContext; 
GqlParser.GraphTypeResolutionExpressionContext = GraphTypeResolutionExpressionContext; 
GqlParser.CatalogGraphTypeReferenceContext = CatalogGraphTypeReferenceContext; 
GqlParser.CatalogGraphTypeParentAndNameContext = CatalogGraphTypeParentAndNameContext; 
GqlParser.GraphTypeParentSpecificationContext = GraphTypeParentSpecificationContext; 
GqlParser.QualifiedGraphTypeNameContext = QualifiedGraphTypeNameContext; 
GqlParser.BindingTableReferenceContext = BindingTableReferenceContext; 
GqlParser.BindingTableResolutionExpressionContext = BindingTableResolutionExpressionContext; 
GqlParser.CatalogBindingTableReferenceContext = CatalogBindingTableReferenceContext; 
GqlParser.CatalogBindingTableParentAndNameContext = CatalogBindingTableParentAndNameContext; 
GqlParser.BindingTableParentSpecificationContext = BindingTableParentSpecificationContext; 
GqlParser.LocalBindingTableReferenceContext = LocalBindingTableReferenceContext; 
GqlParser.QualifiedBindingTableNameContext = QualifiedBindingTableNameContext; 
GqlParser.ProcedureReferenceContext = ProcedureReferenceContext; 
GqlParser.CatalogProcedureReferenceContext = CatalogProcedureReferenceContext; 
GqlParser.CatalogProcedureParentAndNameContext = CatalogProcedureParentAndNameContext; 
GqlParser.ProcedureParentSpecificationContext = ProcedureParentSpecificationContext; 
GqlParser.LocalProcedureReferenceContext = LocalProcedureReferenceContext; 
GqlParser.QualifiedProcedureNameContext = QualifiedProcedureNameContext; 
GqlParser.QueryResolutionExpressionContext = QueryResolutionExpressionContext; 
GqlParser.CatalogQueryReferenceContext = CatalogQueryReferenceContext; 
GqlParser.CatalogQueryParentAndNameContext = CatalogQueryParentAndNameContext; 
GqlParser.QueryParentSpecificationContext = QueryParentSpecificationContext; 
GqlParser.QualifiedQueryNameContext = QualifiedQueryNameContext; 
GqlParser.FunctionResolutionExpressionContext = FunctionResolutionExpressionContext; 
GqlParser.CatalogFunctionReferenceContext = CatalogFunctionReferenceContext; 
GqlParser.CatalogFunctionParentAndNameContext = CatalogFunctionParentAndNameContext; 
GqlParser.FunctionParentSpecificationContext = FunctionParentSpecificationContext; 
GqlParser.QualifiedFunctionNameContext = QualifiedFunctionNameContext; 
GqlParser.CatalogObjectReferenceContext = CatalogObjectReferenceContext; 
GqlParser.ParentCatalogObjectReferenceContext = ParentCatalogObjectReferenceContext; 
GqlParser.CatalogUrlPathContext = CatalogUrlPathContext; 
GqlParser.AbsoluteUrlPathContext = AbsoluteUrlPathContext; 
GqlParser.RelativeUrlPathContext = RelativeUrlPathContext; 
GqlParser.ParentObjectRelativeUrlPathContext = ParentObjectRelativeUrlPathContext; 
GqlParser.SimpleRelativeUrlPathContext = SimpleRelativeUrlPathContext; 
GqlParser.ParameterizedUrlPathContext = ParameterizedUrlPathContext; 
GqlParser.SimpleUrlPathContext = SimpleUrlPathContext; 
GqlParser.UrlSegmentContext = UrlSegmentContext; 
GqlParser.QualifiedObjectNameContext = QualifiedObjectNameContext; 
GqlParser.QualifiedNamePrefixContext = QualifiedNamePrefixContext; 
GqlParser.UrlPathParameterContext = UrlPathParameterContext; 
GqlParser.ExternalObjectReferenceContext = ExternalObjectReferenceContext; 
GqlParser.ExternalObjectUrlContext = ExternalObjectUrlContext; 
GqlParser.ElementReferenceContext = ElementReferenceContext; 
GqlParser.SearchConditionContext = SearchConditionContext; 
GqlParser.PredicateContext = PredicateContext; 
GqlParser.ComparisonPredicateContext = ComparisonPredicateContext; 
GqlParser.ComparisonPredicatePart2Context = ComparisonPredicatePart2Context; 
GqlParser.ExistsPredicateContext = ExistsPredicateContext; 
GqlParser.NullPredicateContext = NullPredicateContext; 
GqlParser.NullPredicatePart2Context = NullPredicatePart2Context; 
GqlParser.NormalizedPredicateContext = NormalizedPredicateContext; 
GqlParser.NormalizedPredicatePart2Context = NormalizedPredicatePart2Context; 
GqlParser.DirectedPredicateContext = DirectedPredicateContext; 
GqlParser.DirectedPredicatePart2Context = DirectedPredicatePart2Context; 
GqlParser.LabeledPredicateContext = LabeledPredicateContext; 
GqlParser.LabeledPredicatePart2Context = LabeledPredicatePart2Context; 
GqlParser.SourceDestinationPredicateContext = SourceDestinationPredicateContext; 
GqlParser.SourcePredicatePart2Context = SourcePredicatePart2Context; 
GqlParser.DestinationPredicatePart2Context = DestinationPredicatePart2Context; 
GqlParser.AllDifferentPredicateContext = AllDifferentPredicateContext; 
GqlParser.SamePredicateContext = SamePredicateContext; 
GqlParser.ValueSpecificationContext = ValueSpecificationContext; 
GqlParser.UnsignedValueSpecificationContext = UnsignedValueSpecificationContext; 
GqlParser.UnsignedIntegerSpecificationContext = UnsignedIntegerSpecificationContext; 
GqlParser.ParameterValueSpecificationContext = ParameterValueSpecificationContext; 
GqlParser.PredefinedParameterContext = PredefinedParameterContext; 
GqlParser.PredefinedParentObjectParameterContext = PredefinedParentObjectParameterContext; 
GqlParser.PredefinedSchemaParameterContext = PredefinedSchemaParameterContext; 
GqlParser.PredefinedGraphParameterContext = PredefinedGraphParameterContext; 
GqlParser.PredefinedTableParameterContext = PredefinedTableParameterContext; 
GqlParser.ValueExpressionContext = ValueExpressionContext; 
GqlParser.UntypedValueExpressionContext = UntypedValueExpressionContext; 
GqlParser.CommonValueExpressionContext = CommonValueExpressionContext; 
GqlParser.ReferenceValueExpressionContext = ReferenceValueExpressionContext; 
GqlParser.CollectionValueExpressionContext = CollectionValueExpressionContext; 
GqlParser.SetValueExpressionContext = SetValueExpressionContext; 
GqlParser.OrderedSetValueExpressionContext = OrderedSetValueExpressionContext; 
GqlParser.MapValueExpressionContext = MapValueExpressionContext; 
GqlParser.BooleanValueExpressionContext = BooleanValueExpressionContext; 
GqlParser.BooleanTermContext = BooleanTermContext; 
GqlParser.BooleanFactorContext = BooleanFactorContext; 
GqlParser.BooleanTestContext = BooleanTestContext; 
GqlParser.BooleanPrimaryContext = BooleanPrimaryContext; 
GqlParser.BooleanPredicandContext = BooleanPredicandContext; 
GqlParser.NumericValueExpressionContext = NumericValueExpressionContext; 
GqlParser.TermContext = TermContext; 
GqlParser.FactorContext = FactorContext; 
GqlParser.NumericPrimaryContext = NumericPrimaryContext; 
GqlParser.ValueExpressionPrimaryContext = ValueExpressionPrimaryContext; 
GqlParser.NonParenthesizedValueExpressionPrimaryContext = NonParenthesizedValueExpressionPrimaryContext; 
GqlParser.NumericValueFunctionContext = NumericValueFunctionContext; 
GqlParser.LengthExpressionContext = LengthExpressionContext; 
GqlParser.CharLengthExpressionContext = CharLengthExpressionContext; 
GqlParser.ByteLengthExpressionContext = ByteLengthExpressionContext; 
GqlParser.PathLengthExpressionContext = PathLengthExpressionContext; 
GqlParser.AbsoluteValueExpressionContext = AbsoluteValueExpressionContext; 
GqlParser.ModulusExpressionContext = ModulusExpressionContext; 
GqlParser.TrigonometricFunctionContext = TrigonometricFunctionContext; 
GqlParser.GeneralLogarithmFunctionContext = GeneralLogarithmFunctionContext; 
GqlParser.CommonLogarithmContext = CommonLogarithmContext; 
GqlParser.NaturalLogarithmContext = NaturalLogarithmContext; 
GqlParser.ExponentialFunctionContext = ExponentialFunctionContext; 
GqlParser.PowerFunctionContext = PowerFunctionContext; 
GqlParser.SquareRootContext = SquareRootContext; 
GqlParser.FloorFunctionContext = FloorFunctionContext; 
GqlParser.CeilingFunctionContext = CeilingFunctionContext; 
GqlParser.InDegreeFunctionContext = InDegreeFunctionContext; 
GqlParser.OutDegreeFunctionContext = OutDegreeFunctionContext; 
GqlParser.StringValueExpressionContext = StringValueExpressionContext; 
GqlParser.CharacterStringValueExpressionContext = CharacterStringValueExpressionContext; 
GqlParser.CharacterStringPrimaryContext = CharacterStringPrimaryContext; 
GqlParser.ByteStringValueExpressionContext = ByteStringValueExpressionContext; 
GqlParser.ByteStringPrimaryContext = ByteStringPrimaryContext; 
GqlParser.StringValueFunctionContext = StringValueFunctionContext; 
GqlParser.CharacterStringFunctionContext = CharacterStringFunctionContext; 
GqlParser.SubstringFunctionContext = SubstringFunctionContext; 
GqlParser.FoldContext = FoldContext; 
GqlParser.TrimFunctionContext = TrimFunctionContext; 
GqlParser.NormalizeFunctionContext = NormalizeFunctionContext; 
GqlParser.NormalFormContext = NormalFormContext; 
GqlParser.ByteStringFunctionContext = ByteStringFunctionContext; 
GqlParser.ByteSubstringFunctionContext = ByteSubstringFunctionContext; 
GqlParser.ByteStringTrimFunctionContext = ByteStringTrimFunctionContext; 
GqlParser.StartPositionContext = StartPositionContext; 
GqlParser.StringLengthContext = StringLengthContext; 
GqlParser.DatetimeValueExpressionContext = DatetimeValueExpressionContext; 
GqlParser.DatetimePrimaryContext = DatetimePrimaryContext; 
GqlParser.DatetimeValueFunctionContext = DatetimeValueFunctionContext; 
GqlParser.DateFunctionContext = DateFunctionContext; 
GqlParser.TimeFunctionContext = TimeFunctionContext; 
GqlParser.LocalTimeFunctionContext = LocalTimeFunctionContext; 
GqlParser.DatetimeFunctionContext = DatetimeFunctionContext; 
GqlParser.LocalDatetimeFunctionContext = LocalDatetimeFunctionContext; 
GqlParser.DateFunctionParametersContext = DateFunctionParametersContext; 
GqlParser.TimeFunctionParametersContext = TimeFunctionParametersContext; 
GqlParser.DatetimeFunctionParametersContext = DatetimeFunctionParametersContext; 
GqlParser.DurationValueExpressionContext = DurationValueExpressionContext; 
GqlParser.DurationTermContext = DurationTermContext; 
GqlParser.DurationFactorContext = DurationFactorContext; 
GqlParser.DurationPrimaryContext = DurationPrimaryContext; 
GqlParser.DurationValueFunctionContext = DurationValueFunctionContext; 
GqlParser.DurationFunctionContext = DurationFunctionContext; 
GqlParser.DurationFunctionParametersContext = DurationFunctionParametersContext; 
GqlParser.DurationAbsoluteValueFunctionContext = DurationAbsoluteValueFunctionContext; 
GqlParser.GraphElementPrimaryContext = GraphElementPrimaryContext; 
GqlParser.StartNodeFunctionContext = StartNodeFunctionContext; 
GqlParser.EndNodeFunctionContext = EndNodeFunctionContext; 
GqlParser.CollectionValueConstructorContext = CollectionValueConstructorContext; 
GqlParser.ListValueExpressionContext = ListValueExpressionContext; 
GqlParser.ListPrimaryContext = ListPrimaryContext; 
GqlParser.ListValueFunctionContext = ListValueFunctionContext; 
GqlParser.TailListFunctionContext = TailListFunctionContext; 
GqlParser.TrimListFunctionContext = TrimListFunctionContext; 
GqlParser.ListValueConstructorContext = ListValueConstructorContext; 
GqlParser.ListValueConstructorByEnumerationContext = ListValueConstructorByEnumerationContext; 
GqlParser.ListElementListContext = ListElementListContext; 
GqlParser.MultisetValueExpressionContext = MultisetValueExpressionContext; 
GqlParser.MultisetTermContext = MultisetTermContext; 
GqlParser.MultisetPrimaryContext = MultisetPrimaryContext; 
GqlParser.MultisetValueFunctionContext = MultisetValueFunctionContext; 
GqlParser.MultisetValueConstructorByEnumerationContext = MultisetValueConstructorByEnumerationContext; 
GqlParser.MultisetElementListContext = MultisetElementListContext; 
GqlParser.SetValueConstructorContext = SetValueConstructorContext; 
GqlParser.SetValueConstructorByEnumerationContext = SetValueConstructorByEnumerationContext; 
GqlParser.SetElementListContext = SetElementListContext; 
GqlParser.OrderedSetValueConstructorByEnumerationContext = OrderedSetValueConstructorByEnumerationContext; 
GqlParser.OrderedSetElementListContext = OrderedSetElementListContext; 
GqlParser.MapValueConstructorContext = MapValueConstructorContext; 
GqlParser.MapValueConstructorByEnumerationContext = MapValueConstructorByEnumerationContext; 
GqlParser.MapElementListContext = MapElementListContext; 
GqlParser.MapElementContext = MapElementContext; 
GqlParser.MapKeyContext = MapKeyContext; 
GqlParser.RecordValueConstructorContext = RecordValueConstructorContext; 
GqlParser.RecordValueConstructorByEnumerationContext = RecordValueConstructorByEnumerationContext; 
GqlParser.FieldListContext = FieldListContext; 
GqlParser.FieldContext = FieldContext; 
GqlParser.FieldValueContext = FieldValueContext; 
GqlParser.CaseExpressionContext = CaseExpressionContext; 
GqlParser.CaseAbbreviationContext = CaseAbbreviationContext; 
GqlParser.SimpleCaseContext = SimpleCaseContext; 
GqlParser.SearchedCaseContext = SearchedCaseContext; 
GqlParser.SimpleWhenClauseContext = SimpleWhenClauseContext; 
GqlParser.SearchedWhenClauseContext = SearchedWhenClauseContext; 
GqlParser.ElseClauseContext = ElseClauseContext; 
GqlParser.CaseOperandContext = CaseOperandContext; 
GqlParser.WhenOperandListContext = WhenOperandListContext; 
GqlParser.WhenOperandContext = WhenOperandContext; 
GqlParser.ResultContext = ResultContext; 
GqlParser.CastSpecificationContext = CastSpecificationContext; 
GqlParser.MultisetSetFunctionContext = MultisetSetFunctionContext; 
GqlParser.Element_idFunctionContext = Element_idFunctionContext; 
GqlParser.LiteralContext = LiteralContext; 
GqlParser.GeneralLiteralContext = GeneralLiteralContext; 
GqlParser.PredefinedTypeLiteralContext = PredefinedTypeLiteralContext; 
GqlParser.UnsignedLiteralContext = UnsignedLiteralContext; 
GqlParser.CharacterStringLiteralContext = CharacterStringLiteralContext; 
GqlParser.UnbrokenCharacterStringLiteralContext = UnbrokenCharacterStringLiteralContext; 
GqlParser.SingleQuotedCharacterSequenceContext = SingleQuotedCharacterSequenceContext; 
GqlParser.DoubleQuotedCharacterSequenceContext = DoubleQuotedCharacterSequenceContext; 
GqlParser.UnbrokenSingleQuotedCharacterSequenceContext = UnbrokenSingleQuotedCharacterSequenceContext; 
GqlParser.UnbrokenDoubleQuotedCharacterSequenceContext = UnbrokenDoubleQuotedCharacterSequenceContext; 
GqlParser.UnbrokenAccentQuotedCharacterSequenceContext = UnbrokenAccentQuotedCharacterSequenceContext; 
GqlParser.CharacterRepresentationContext = CharacterRepresentationContext; 
GqlParser.ByteStringLiteralContext = ByteStringLiteralContext; 
GqlParser.NumericLiteralContext = NumericLiteralContext; 
GqlParser.SignedNumericLiteralContext = SignedNumericLiteralContext; 
GqlParser.UnsignedNumericLiteralContext = UnsignedNumericLiteralContext; 
GqlParser.ExactNumericLiteralContext = ExactNumericLiteralContext; 
GqlParser.SignContext = SignContext; 
GqlParser.UnsignedIntegerContext = UnsignedIntegerContext; 
GqlParser.UnsignedDecimalIntegerContext = UnsignedDecimalIntegerContext; 
GqlParser.UnsignedBinaryIntegerContext = UnsignedBinaryIntegerContext; 
GqlParser.UnsignedOctalIntegerContext = UnsignedOctalIntegerContext; 
GqlParser.UnsignedHexadecimalIntegerContext = UnsignedHexadecimalIntegerContext; 
GqlParser.SignedDecimalIntegerContext = SignedDecimalIntegerContext; 
GqlParser.ApproximateNumericLiteralContext = ApproximateNumericLiteralContext; 
GqlParser.TemporalLiteralContext = TemporalLiteralContext; 
GqlParser.DateLiteralContext = DateLiteralContext; 
GqlParser.TimeLiteralContext = TimeLiteralContext; 
GqlParser.DatetimeLiteralContext = DatetimeLiteralContext; 
GqlParser.DateStringContext = DateStringContext; 
GqlParser.TimeStringContext = TimeStringContext; 
GqlParser.DatetimeStringContext = DatetimeStringContext; 
GqlParser.DurationLiteralContext = DurationLiteralContext; 
GqlParser.IntervalLiteralContext = IntervalLiteralContext; 
GqlParser.YearMonthLiteralContext = YearMonthLiteralContext; 
GqlParser.DayTimeLiteralContext = DayTimeLiteralContext; 
GqlParser.FractionalSecondsLiteralContext = FractionalSecondsLiteralContext; 
GqlParser.DurationStringContext = DurationStringContext; 
GqlParser.ListLiteralContext = ListLiteralContext; 
GqlParser.SetLiteralContext = SetLiteralContext; 
GqlParser.MultisetLiteralContext = MultisetLiteralContext; 
GqlParser.OrderedSetLiteralContext = OrderedSetLiteralContext; 
GqlParser.MapLiteralContext = MapLiteralContext; 
GqlParser.RecordLiteralContext = RecordLiteralContext; 
GqlParser.ValueTypeContext = ValueTypeContext; 
GqlParser.OfValueTypeContext = OfValueTypeContext; 
GqlParser.PredefinedTypeContext = PredefinedTypeContext; 
GqlParser.CharacterStringTypeContext = CharacterStringTypeContext; 
GqlParser.ByteStringTypeContext = ByteStringTypeContext; 
GqlParser.NumericTypeContext = NumericTypeContext; 
GqlParser.ExactNumericTypeContext = ExactNumericTypeContext; 
GqlParser.BinaryExactNumericTypeContext = BinaryExactNumericTypeContext; 
GqlParser.BinaryExactSignedNumericTypeContext = BinaryExactSignedNumericTypeContext; 
GqlParser.BinaryExactUnsignedNumericTypeContext = BinaryExactUnsignedNumericTypeContext; 
GqlParser.VerboseBinaryExactNumericTypeContext = VerboseBinaryExactNumericTypeContext; 
GqlParser.DecimalExactNumericTypeContext = DecimalExactNumericTypeContext; 
GqlParser.ApproximateNumericTypeContext = ApproximateNumericTypeContext; 
GqlParser.TemporalTypeContext = TemporalTypeContext; 
GqlParser.GraphElementTypeContext = GraphElementTypeContext; 
GqlParser.ListValueTypeNameContext = ListValueTypeNameContext; 
GqlParser.MapValueTypeContext = MapValueTypeContext; 
GqlParser.MapKeyTypeContext = MapKeyTypeContext; 
GqlParser.RecordValueTypeContext = RecordValueTypeContext; 
GqlParser.FieldTypeListContext = FieldTypeListContext; 
GqlParser.FieldTypeContext = FieldTypeContext; 
GqlParser.ParameterNameContext = ParameterNameContext; 
GqlParser.IdentifierContext = IdentifierContext; 
GqlParser.SeparatedIdentifierContext = SeparatedIdentifierContext; 
GqlParser.TokenContext = TokenContext; 
GqlParser.NonDelimiterTokenContext = NonDelimiterTokenContext; 
GqlParser.NonDelimitedIdentifierContext = NonDelimitedIdentifierContext; 
GqlParser.RegularIdentifierContext = RegularIdentifierContext; 
GqlParser.ExtendedIdentifierContext = ExtendedIdentifierContext; 
GqlParser.DelimiterTokenContext = DelimiterTokenContext; 
GqlParser.DelimitedIdentifierContext = DelimitedIdentifierContext; 
GqlParser.SeparatorContext = SeparatorContext; 
GqlParser.CommentContext = CommentContext; 
GqlParser.SimpleCommentContext = SimpleCommentContext; 
GqlParser.BracketedCommentContext = BracketedCommentContext; 
GqlParser.EdgeSynonymContext = EdgeSynonymContext; 
GqlParser.NodeSynonymContext = NodeSynonymContext; 
