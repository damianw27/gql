// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';
import GqlParserListener from './GqlParserListener.js';
import GqlParserVisitor from './GqlParserVisitor.js';

const serializedATN = [4,1,416,5017,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,2,579,7,579,
2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,
2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,
2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,
2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,7,615,
2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,2,621,7,621,
2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,2,627,7,627,
2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,2,633,7,633,
2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,2,639,7,639,
2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,2,645,7,645,
2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,2,651,7,651,
2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,
2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,
2,664,7,664,1,0,1,0,3,0,1333,8,0,5,0,1335,8,0,10,0,12,0,1338,9,0,1,0,1,0,
1,1,1,1,3,1,1344,8,1,1,2,1,2,3,2,1348,8,2,1,3,1,3,3,3,1352,8,3,1,4,1,4,1,
4,1,4,1,4,1,4,3,4,1360,8,4,1,5,1,5,1,5,1,6,3,6,1366,8,6,1,6,1,6,1,6,1,7,
1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,3,9,1380,8,9,1,10,3,10,1383,8,10,1,10,1,
10,1,10,1,10,1,11,3,11,1390,8,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
1,13,1,13,3,13,1402,8,13,1,14,3,14,1405,8,14,1,14,1,14,1,14,1,15,3,15,1411,
8,15,1,15,1,15,1,15,3,15,1416,8,15,1,15,1,15,1,15,1,15,1,15,3,15,1423,8,
15,1,16,3,16,1426,8,16,1,16,1,16,1,17,1,17,1,17,3,17,1433,8,17,3,17,1435,
8,17,1,17,1,17,3,17,1439,8,17,1,17,3,17,1442,8,17,1,18,1,18,1,18,3,18,1447,
8,18,1,19,1,19,1,20,1,20,1,20,4,20,1454,8,20,11,20,12,20,1455,1,21,1,21,
3,21,1460,8,21,1,22,1,22,1,22,1,22,3,22,1466,8,22,1,23,1,23,1,24,1,24,1,
24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,3,28,1485,
8,28,1,28,3,28,1488,8,28,1,28,1,28,1,29,4,29,1493,8,29,11,29,12,29,1494,
1,30,1,30,1,30,3,30,1500,8,30,1,31,1,31,5,31,1504,8,31,10,31,12,31,1507,
9,31,1,32,1,32,1,32,3,32,1512,8,32,1,33,1,33,3,33,1516,8,33,1,33,1,33,1,
34,3,34,1521,8,34,1,34,1,34,1,34,1,34,1,35,3,35,1528,8,35,1,35,3,35,1531,
8,35,1,35,1,35,1,36,1,36,1,36,1,37,3,37,1539,8,37,1,37,1,37,1,37,1,37,1,
38,3,38,1546,8,38,1,38,3,38,1549,8,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
1,40,1,40,1,41,3,41,1561,8,41,1,41,3,41,1564,8,41,1,41,1,41,1,42,1,42,1,
42,1,43,1,43,1,43,1,43,1,43,3,43,1576,8,43,1,44,1,44,1,45,1,45,1,46,1,46,
1,46,1,46,3,46,1586,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
48,1,48,3,48,1599,8,48,1,49,4,49,1602,8,49,11,49,12,49,1603,1,50,1,50,3,
50,1608,8,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1616,8,51,1,52,1,52,1,52,
3,52,1621,8,52,1,52,1,52,1,53,1,53,1,53,3,53,1628,8,53,1,53,1,53,1,54,1,
54,3,54,1634,8,54,1,55,1,55,3,55,1638,8,55,1,55,1,55,3,55,1642,8,55,1,55,
1,55,1,55,3,55,1647,8,55,1,55,3,55,1650,8,55,1,56,1,56,1,56,1,56,3,56,1656,
8,56,1,56,1,56,1,56,1,56,3,56,1662,8,56,1,56,3,56,1665,8,56,1,57,1,57,3,
57,1669,8,57,1,57,3,57,1672,8,57,1,57,1,57,1,58,1,58,3,58,1678,8,58,1,58,
1,58,3,58,1682,8,58,1,58,3,58,1685,8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,
60,1,60,1,61,1,61,3,61,1697,8,61,1,61,1,61,3,61,1701,8,61,1,61,1,61,1,62,
1,62,3,62,1707,8,62,1,62,1,62,1,62,3,62,1712,8,62,1,62,1,62,1,62,3,62,1717,
8,62,1,62,1,62,3,62,1721,8,62,1,62,1,62,1,62,1,63,3,63,1727,8,63,1,63,1,
63,1,63,3,63,1732,8,63,1,63,3,63,1735,8,63,1,64,1,64,1,64,1,64,3,64,1741,
8,64,1,65,1,65,3,65,1745,8,65,1,65,1,65,1,65,3,65,1750,8,65,1,65,1,65,1,
66,1,66,1,67,1,67,3,67,1758,8,67,1,68,1,68,3,68,1762,8,68,1,69,1,69,1,69,
3,69,1767,8,69,1,70,1,70,1,70,1,71,1,71,3,71,1774,8,71,1,72,1,72,3,72,1778,
8,72,1,73,4,73,1781,8,73,11,73,12,73,1782,1,74,1,74,3,74,1787,8,74,1,75,
1,75,3,75,1791,8,75,1,76,1,76,1,76,1,76,3,76,1797,8,76,1,77,1,77,1,77,1,
78,1,78,1,78,1,79,1,79,1,79,4,79,1808,8,79,11,79,12,79,1809,1,80,1,80,1,
80,3,80,1815,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,3,82,
1827,8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,5,84,1838,8,84,10,
84,12,84,1841,9,84,1,85,1,85,1,85,1,86,1,86,1,86,4,86,1849,8,86,11,86,12,
86,1850,1,87,1,87,3,87,1855,8,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,
1,90,1,90,1,90,1,90,1,91,1,91,1,91,4,91,1872,8,91,11,91,12,91,1873,1,92,
1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,1889,8,
95,10,95,12,95,1892,9,95,1,96,1,96,3,96,1896,8,96,1,97,1,97,1,97,1,98,1,
98,1,99,1,99,3,99,1905,8,99,1,100,4,100,1908,8,100,11,100,12,100,1909,1,
100,1,100,1,100,1,100,1,100,3,100,1917,8,100,1,101,1,101,1,101,1,102,1,102,
1,102,1,102,1,103,1,103,1,103,1,104,1,104,1,104,1,105,3,105,1933,8,105,1,
105,1,105,3,105,1937,8,105,1,106,1,106,5,106,1941,8,106,10,106,12,106,1944,
9,106,1,107,1,107,3,107,1948,8,107,1,108,1,108,1,108,1,108,1,108,3,108,1955,
8,108,1,109,1,109,3,109,1959,8,109,1,110,1,110,1,110,1,111,1,111,1,111,1,
112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1976,8,112,1,113,
4,113,1979,8,113,11,113,12,113,1980,1,114,1,114,1,115,1,115,1,115,3,115,
1988,8,115,1,116,1,116,1,116,1,117,1,117,1,117,4,117,1996,8,117,11,117,12,
117,1997,1,118,1,118,1,118,1,118,1,118,3,118,2005,8,118,1,119,1,119,1,119,
3,119,2010,8,119,1,120,1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,
122,1,123,1,123,3,123,2024,8,123,1,123,3,123,2027,8,123,1,123,1,123,3,123,
2031,8,123,1,123,3,123,2034,8,123,1,124,1,124,3,124,2038,8,124,1,124,3,124,
2041,8,124,1,125,1,125,1,125,1,126,3,126,2047,8,126,1,126,1,126,3,126,2051,
8,126,1,126,3,126,2054,8,126,1,126,1,126,3,126,2058,8,126,1,127,1,127,1,
127,5,127,2063,8,127,10,127,12,127,2066,9,127,1,128,1,128,3,128,2070,8,128,
1,129,1,129,1,129,1,130,1,130,3,130,2077,8,130,1,130,1,130,3,130,2081,8,
130,1,130,1,130,3,130,2085,8,130,1,130,3,130,2088,8,130,1,130,3,130,2091,
8,130,1,130,3,130,2094,8,130,1,130,3,130,2097,8,130,1,130,3,130,2100,8,130,
3,130,2102,8,130,1,131,1,131,1,131,4,131,2107,8,131,11,131,12,131,2108,1,
132,1,132,3,132,2113,8,132,1,133,1,133,1,133,1,134,1,134,1,134,1,135,1,135,
1,135,3,135,2124,8,135,1,136,1,136,1,136,5,136,2129,8,136,10,136,12,136,
2132,9,136,1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2143,
8,138,1,139,3,139,2146,8,139,1,139,1,139,1,139,1,140,1,140,3,140,2153,8,
140,1,141,3,141,2156,8,141,1,141,1,141,1,142,1,142,3,142,2162,8,142,1,142,
1,142,1,143,1,143,1,143,4,143,2169,8,143,11,143,12,143,2170,1,144,1,144,
1,144,3,144,2176,8,144,1,144,1,144,1,145,1,145,1,145,4,145,2183,8,145,11,
145,12,145,2184,1,146,1,146,1,147,1,147,1,147,1,148,1,148,1,148,1,149,1,
149,1,150,1,150,1,151,1,151,1,152,1,152,1,153,1,153,3,153,2205,8,153,1,154,
1,154,1,154,1,155,1,155,1,155,4,155,2213,8,155,11,155,12,155,2214,1,156,
1,156,1,156,1,157,3,157,2221,8,157,1,157,1,157,3,157,2225,8,157,1,157,3,
157,2228,8,157,1,158,1,158,3,158,2232,8,158,1,159,1,159,1,159,1,160,1,160,
1,160,1,161,1,161,3,161,2242,8,161,1,161,3,161,2245,8,161,1,162,1,162,3,
162,2249,8,162,1,162,3,162,2252,8,162,1,163,1,163,1,163,5,163,2257,8,163,
10,163,12,163,2260,9,163,1,164,3,164,2263,8,164,1,164,3,164,2266,8,164,1,
164,4,164,2269,8,164,11,164,12,164,2270,1,165,1,165,1,165,1,166,1,166,1,
166,1,167,1,167,1,167,1,168,1,168,3,168,2284,8,168,1,169,1,169,3,169,2288,
8,169,1,170,1,170,1,171,1,171,1,171,3,171,2295,8,171,1,172,1,172,3,172,2299,
8,172,1,172,3,172,2302,8,172,1,173,1,173,1,174,1,174,3,174,2308,8,174,1,
174,3,174,2311,8,174,1,174,3,174,2314,8,174,1,175,1,175,1,176,1,176,1,176,
1,176,3,176,2322,8,176,1,177,1,177,1,177,3,177,2327,8,177,1,177,3,177,2330,
8,177,1,178,1,178,1,178,3,178,2335,8,178,1,178,3,178,2338,8,178,1,179,1,
179,1,179,3,179,2343,8,179,1,179,3,179,2346,8,179,1,180,1,180,1,180,3,180,
2351,8,180,1,180,3,180,2354,8,180,1,180,1,180,1,181,1,181,1,182,1,182,1,
183,1,183,1,183,3,183,2365,8,183,1,184,1,184,1,184,5,184,2370,8,184,10,184,
12,184,2373,9,184,1,185,1,185,1,185,5,185,2378,8,185,10,185,12,185,2381,
9,185,1,186,1,186,5,186,2385,8,186,10,186,12,186,2388,9,186,1,187,1,187,
1,187,3,187,2393,8,187,1,188,1,188,1,188,1,189,1,189,1,189,1,190,1,190,1,
190,3,190,2404,8,190,1,191,1,191,3,191,2408,8,191,1,192,1,192,1,192,1,192,
1,193,3,193,2415,8,193,1,193,3,193,2418,8,193,1,193,3,193,2421,8,193,1,194,
3,194,2424,8,194,1,194,1,194,1,195,1,195,1,195,1,195,3,195,2432,8,195,1,
196,1,196,3,196,2436,8,196,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,199,
1,199,1,199,4,199,2448,8,199,11,199,12,199,2449,1,200,1,200,1,200,1,200,
1,201,1,201,3,201,2458,8,201,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,
202,2467,8,202,1,203,1,203,1,203,1,203,1,204,1,204,1,204,1,204,1,205,1,205,
1,205,1,205,1,206,1,206,1,206,1,206,1,207,1,207,1,207,1,207,1,208,1,208,
1,208,1,208,1,209,1,209,1,209,1,209,1,210,1,210,1,211,1,211,3,211,2501,8,
211,1,211,3,211,2504,8,211,1,211,1,211,3,211,2508,8,211,1,211,1,211,1,212,
1,212,1,212,1,213,1,213,1,213,1,214,1,214,1,215,1,215,1,215,5,215,2523,8,
215,10,215,12,215,2526,9,215,1,216,1,216,1,216,1,216,5,216,2532,8,216,10,
216,12,216,2535,9,216,1,217,1,217,3,217,2539,8,217,1,217,1,217,1,218,1,218,
1,218,3,218,2546,8,218,1,219,1,219,1,219,1,219,1,220,1,220,1,220,1,220,1,
221,1,221,1,221,1,221,1,222,1,222,3,222,2562,8,222,1,222,3,222,2565,8,222,
1,222,3,222,2568,8,222,1,223,1,223,3,223,2572,8,223,1,223,3,223,2575,8,223,
1,223,3,223,2578,8,223,1,224,1,224,1,224,5,224,2583,8,224,10,224,12,224,
2586,9,224,1,225,1,225,1,225,5,225,2591,8,225,10,225,12,225,2594,9,225,1,
226,1,226,3,226,2598,8,226,1,227,1,227,1,227,1,228,1,228,1,228,3,228,2606,
8,228,1,229,1,229,1,230,1,230,1,230,1,230,1,231,1,231,1,231,1,231,3,231,
2618,8,231,1,232,1,232,1,232,1,232,1,233,1,233,3,233,2626,8,233,1,233,1,
233,3,233,2630,8,233,1,233,1,233,1,234,1,234,1,235,1,235,1,236,1,236,1,236,
1,236,1,236,1,236,1,236,3,236,2645,8,236,1,237,1,237,1,237,1,237,1,238,1,
238,1,238,1,238,1,239,1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,241,1,
241,1,241,1,241,1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,1,
244,1,244,3,244,2678,8,244,1,245,1,245,1,245,5,245,2683,8,245,10,245,12,
245,2686,9,245,1,246,1,246,1,246,5,246,2691,8,246,10,246,12,246,2694,9,246,
1,247,1,247,5,247,2698,8,247,10,247,12,247,2701,9,247,1,248,1,248,1,248,
5,248,2706,8,248,10,248,12,248,2709,9,248,1,249,1,249,1,249,3,249,2714,8,
249,1,250,1,250,1,250,1,251,1,251,1,251,1,252,1,252,3,252,2724,8,252,1,253,
1,253,1,253,1,253,1,253,1,253,1,253,3,253,2733,8,253,1,254,1,254,1,254,1,
255,1,255,1,255,1,256,1,256,1,256,1,257,1,257,1,257,1,258,1,258,1,258,1,
258,1,259,1,259,1,259,1,259,1,260,1,260,1,260,1,261,1,261,3,261,2760,8,261,
1,262,1,262,1,262,1,263,1,263,1,263,1,263,1,263,3,263,2770,8,263,1,264,1,
264,1,264,1,265,1,265,1,265,1,266,1,266,1,266,4,266,2781,8,266,11,266,12,
266,2782,1,267,1,267,3,267,2787,8,267,1,268,1,268,1,269,1,269,1,269,1,270,
1,270,1,270,1,270,1,271,1,271,1,271,4,271,2801,8,271,11,271,12,271,2802,
1,271,3,271,2806,8,271,1,272,1,272,1,273,1,273,1,273,1,274,1,274,1,274,1,
274,1,275,1,275,1,275,1,275,1,275,1,275,3,275,2823,8,275,1,276,1,276,1,276,
3,276,2828,8,276,1,276,1,276,1,276,1,277,1,277,1,278,1,278,1,279,1,279,1,
280,3,280,2840,8,280,1,280,1,280,1,281,1,281,1,282,1,282,1,282,4,282,2849,
8,282,11,282,12,282,2850,1,283,1,283,3,283,2855,8,283,1,283,3,283,2858,8,
283,1,284,1,284,1,285,1,285,1,286,1,286,1,286,1,286,3,286,2868,8,286,1,287,
1,287,1,287,1,288,1,288,1,288,1,289,1,289,1,290,3,290,2879,8,290,1,290,1,
290,1,290,1,290,1,291,1,291,1,291,1,291,1,292,1,292,1,293,1,293,1,293,5,
293,2894,8,293,10,293,12,293,2897,9,293,1,294,1,294,3,294,2901,8,294,1,295,
1,295,1,295,1,295,3,295,2907,8,295,1,296,1,296,1,296,1,296,1,296,1,297,3,
297,2915,8,297,1,297,1,297,3,297,2919,8,297,1,297,3,297,2922,8,297,1,298,
1,298,1,299,1,299,1,299,1,299,1,299,3,299,2931,8,299,1,300,1,300,1,301,1,
301,1,302,1,302,3,302,2939,8,302,1,302,1,302,1,302,3,302,2944,8,302,1,303,
1,303,3,303,2948,8,303,1,304,3,304,2951,8,304,1,304,1,304,1,304,1,304,1,
304,1,304,1,304,3,304,2960,8,304,1,305,1,305,1,306,1,306,1,306,1,306,1,306,
3,306,2969,8,306,1,307,1,307,1,308,1,308,1,309,1,309,1,309,3,309,2978,8,
309,1,310,1,310,1,310,1,310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,1,
312,1,313,1,313,1,313,1,313,1,314,1,314,1,314,1,314,1,315,1,315,1,315,1,
315,1,316,1,316,1,316,1,317,1,317,1,317,3,317,3010,8,317,1,318,1,318,1,318,
1,318,1,319,1,319,1,319,1,319,1,320,1,320,1,320,1,320,1,321,1,321,3,321,
3026,8,321,1,322,1,322,1,322,1,322,1,322,1,322,3,322,3034,8,322,1,322,3,
322,3037,8,322,1,323,1,323,1,323,1,323,1,323,1,323,3,323,3045,8,323,1,323,
3,323,3048,8,323,1,324,1,324,1,325,1,325,1,325,1,326,1,326,1,326,1,326,3,
326,3059,8,326,1,327,1,327,1,327,1,327,1,327,1,327,1,328,1,328,1,328,1,328,
1,328,1,328,1,329,1,329,1,329,1,329,1,329,1,329,1,330,1,330,1,331,1,331,
1,332,1,332,1,333,1,333,1,334,1,334,1,335,1,335,1,335,1,335,1,335,1,335,
1,335,1,335,3,335,3097,8,335,1,336,1,336,3,336,3101,8,336,1,336,1,336,1,
337,1,337,1,337,5,337,3108,8,337,10,337,12,337,3111,9,337,1,338,1,338,3,
338,3115,8,338,1,338,1,338,1,339,1,339,1,340,3,340,3122,8,340,1,340,1,340,
1,340,1,341,1,341,1,341,3,341,3130,8,341,1,342,1,342,3,342,3134,8,342,1,
343,1,343,1,343,1,343,1,343,1,343,1,343,3,343,3143,8,343,1,344,1,344,3,344,
3147,8,344,1,345,1,345,1,345,1,345,1,345,3,345,3154,8,345,1,345,3,345,3157,
8,345,1,346,1,346,1,346,1,346,1,346,3,346,3164,8,346,1,346,1,346,1,346,3,
346,3169,8,346,1,346,3,346,3172,8,346,1,346,1,346,1,346,1,346,1,346,3,346,
3179,8,346,1,346,3,346,3182,8,346,1,346,1,346,1,346,1,346,1,346,3,346,3189,
8,346,1,346,3,346,3192,8,346,3,346,3194,8,346,1,347,1,347,1,348,1,348,1,
349,1,349,1,350,1,350,3,350,3204,8,350,1,351,1,351,3,351,3208,8,351,1,352,
1,352,3,352,3212,8,352,1,353,1,353,3,353,3216,8,353,1,353,1,353,3,353,3220,
8,353,1,353,1,353,3,353,3224,8,353,1,353,1,353,3,353,3228,8,353,1,353,1,
353,3,353,3232,8,353,1,353,1,353,3,353,3236,8,353,1,353,1,353,3,353,3240,
8,353,1,353,1,353,1,353,1,353,1,353,3,353,3247,8,353,1,353,3,353,3250,8,
353,1,353,1,353,3,353,3254,8,353,1,353,3,353,3257,8,353,1,353,3,353,3260,
8,353,1,354,1,354,3,354,3264,8,354,1,354,1,354,3,354,3268,8,354,1,354,1,
354,3,354,3272,8,354,1,354,1,354,3,354,3276,8,354,1,354,1,354,3,354,3280,
8,354,1,354,1,354,3,354,3284,8,354,1,354,1,354,3,354,3288,8,354,1,354,1,
354,1,354,1,354,1,354,3,354,3295,8,354,1,354,3,354,3298,8,354,1,354,1,354,
3,354,3302,8,354,1,354,1,354,3,354,3306,8,354,1,355,1,355,3,355,3310,8,355,
1,355,1,355,3,355,3314,8,355,1,355,1,355,3,355,3318,8,355,1,355,1,355,3,
355,3322,8,355,1,355,1,355,3,355,3326,8,355,1,355,1,355,3,355,3330,8,355,
1,355,1,355,1,355,3,355,3335,8,355,1,355,1,355,1,355,1,355,1,355,3,355,3342,
8,355,1,355,3,355,3345,8,355,1,355,1,355,1,355,3,355,3350,8,355,3,355,3352,
8,355,1,356,1,356,1,356,1,356,1,356,3,356,3359,8,356,1,356,1,356,3,356,3363,
8,356,1,356,3,356,3366,8,356,1,357,1,357,1,358,1,358,1,359,1,359,3,359,3374,
8,359,1,359,1,359,3,359,3378,8,359,1,359,1,359,3,359,3382,8,359,1,359,1,
359,3,359,3386,8,359,1,359,1,359,3,359,3390,8,359,1,359,1,359,1,359,1,359,
1,359,3,359,3397,8,359,1,359,1,359,3,359,3401,8,359,1,359,3,359,3404,8,359,
1,359,1,359,3,359,3408,8,359,1,359,1,359,3,359,3412,8,359,1,359,3,359,3415,
8,359,1,360,1,360,3,360,3419,8,360,1,361,1,361,1,361,1,361,1,361,3,361,3426,
8,361,1,362,1,362,1,363,1,363,1,363,3,363,3433,8,363,1,363,1,363,1,363,1,
363,3,363,3439,8,363,3,363,3441,8,363,1,364,1,364,1,364,3,364,3446,8,364,
1,364,1,364,1,364,1,364,1,364,3,364,3453,8,364,3,364,3455,8,364,1,365,1,
365,3,365,3459,8,365,1,366,1,366,1,366,3,366,3464,8,366,1,366,1,366,1,366,
1,366,3,366,3470,8,366,3,366,3472,8,366,1,367,1,367,1,367,3,367,3477,8,367,
1,367,1,367,1,367,1,367,3,367,3483,8,367,3,367,3485,8,367,1,368,1,368,3,
368,3489,8,368,1,369,1,369,1,369,1,369,3,369,3495,8,369,1,370,1,370,3,370,
3499,8,370,1,371,1,371,3,371,3503,8,371,1,371,1,371,3,371,3507,8,371,1,372,
1,372,3,372,3511,8,372,1,373,1,373,3,373,3515,8,373,1,374,1,374,3,374,3519,
8,374,1,375,3,375,3522,8,375,1,375,1,375,3,375,3526,8,375,1,376,1,376,3,
376,3530,8,376,1,377,1,377,3,377,3534,8,377,1,378,3,378,3537,8,378,1,378,
1,378,3,378,3541,8,378,1,379,1,379,3,379,3545,8,379,1,380,1,380,3,380,3549,
8,380,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,3,381,3559,8,381,1,
381,3,381,3562,8,381,1,381,1,381,1,381,1,381,1,381,1,381,3,381,3570,8,381,
1,381,3,381,3573,8,381,3,381,3575,8,381,1,382,3,382,3578,8,382,1,382,1,382,
1,383,1,383,1,384,3,384,3585,8,384,1,384,1,384,3,384,3589,8,384,1,384,3,
384,3592,8,384,1,384,1,384,3,384,3596,8,384,3,384,3598,8,384,1,385,1,385,
3,385,3602,8,385,1,385,1,385,1,386,1,386,1,386,4,386,3609,8,386,11,386,12,
386,3610,1,387,1,387,1,387,3,387,3616,8,387,1,388,1,388,1,389,3,389,3621,
8,389,1,389,1,389,1,389,1,390,1,390,1,390,1,390,1,390,1,391,1,391,1,391,
5,391,3634,8,391,10,391,12,391,3637,9,391,1,392,1,392,1,393,1,393,1,394,
1,394,1,394,1,395,1,395,1,395,1,395,1,396,1,396,1,396,3,396,3653,8,396,1,
397,1,397,1,397,1,397,3,397,3659,8,397,1,398,1,398,1,398,1,399,1,399,1,399,
1,399,3,399,3668,8,399,1,400,1,400,1,401,1,401,3,401,3674,8,401,1,402,1,
402,1,402,5,402,3679,8,402,10,402,12,402,3682,9,402,1,402,1,402,3,402,3686,
8,402,3,402,3688,8,402,1,403,1,403,1,403,4,403,3693,8,403,11,403,12,403,
3694,1,404,1,404,1,404,1,404,1,404,1,404,3,404,3703,8,404,1,405,3,405,3706,
8,405,1,405,1,405,1,406,1,406,1,407,1,407,3,407,3714,8,407,1,408,3,408,3717,
8,408,1,408,1,408,1,409,1,409,1,409,1,409,1,409,3,409,3726,8,409,1,410,3,
410,3729,8,410,1,410,1,410,1,411,1,411,3,411,3735,8,411,1,412,3,412,3738,
8,412,1,412,1,412,1,413,1,413,3,413,3744,8,413,1,413,1,413,1,413,4,413,3749,
8,413,11,413,12,413,3750,1,413,1,413,1,413,4,413,3756,8,413,11,413,12,413,
3757,3,413,3760,8,413,1,414,1,414,1,415,1,415,1,416,1,416,1,417,1,417,1,
417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,3,417,3779,8,417,1,418,
1,418,1,418,1,419,1,419,1,419,1,420,1,420,1,421,1,421,3,421,3791,8,421,1,
422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,
422,1,422,1,422,1,422,1,422,1,422,3,422,3811,8,422,1,423,1,423,1,423,1,424,
1,424,3,424,3818,8,424,1,424,1,424,1,425,1,425,1,425,1,426,1,426,3,426,3827,
8,426,1,426,1,426,1,426,1,427,1,427,1,427,1,428,1,428,3,428,3837,8,428,1,
428,3,428,3840,8,428,1,428,1,428,1,429,1,429,1,429,1,430,1,430,3,430,3849,
8,430,1,430,1,430,1,431,1,431,1,432,1,432,1,432,1,433,1,433,3,433,3860,8,
433,1,433,1,433,3,433,3864,8,433,1,434,1,434,1,434,1,434,1,434,1,434,3,434,
3872,8,434,1,435,1,435,1,436,1,436,3,436,3878,8,436,1,436,1,436,1,436,1,
436,1,437,1,437,3,437,3886,8,437,1,437,1,437,1,437,1,437,1,438,1,438,1,439,
1,439,1,439,1,439,1,439,4,439,3899,8,439,11,439,12,439,3900,1,439,1,439,
1,440,1,440,1,440,1,440,1,440,4,440,3910,8,440,11,440,12,440,3911,1,440,
1,440,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,442,1,442,3,442,3925,8,
442,1,443,1,443,3,443,3929,8,443,1,444,1,444,3,444,3933,8,444,1,445,1,445,
3,445,3937,8,445,1,446,1,446,1,447,1,447,3,447,3943,8,447,1,448,1,448,1,
448,1,448,1,448,1,448,1,448,1,448,3,448,3953,8,448,1,449,1,449,1,449,1,449,
3,449,3959,8,449,1,450,3,450,3962,8,450,1,450,1,450,1,450,3,450,3967,8,450,
1,451,3,451,3970,8,451,1,451,1,451,1,451,3,451,3975,8,451,1,452,1,452,1,
453,1,453,1,454,1,454,1,455,1,455,1,456,1,456,1,456,1,456,1,456,1,456,1,
456,1,456,1,456,3,456,3994,8,456,1,457,1,457,1,457,1,457,1,457,1,457,5,457,
4002,8,457,10,457,12,457,4005,9,457,1,458,3,458,4008,8,458,1,458,1,458,1,
459,1,459,1,459,3,459,4015,8,459,1,459,3,459,4018,8,459,1,460,1,460,1,461,
1,461,3,461,4024,8,461,1,462,1,462,3,462,4028,8,462,1,463,1,463,1,463,1,
463,1,464,1,464,1,464,1,464,1,464,1,464,1,464,1,464,3,464,4042,8,464,1,465,
1,465,1,465,1,465,1,465,1,465,1,465,1,465,3,465,4052,8,465,1,466,3,466,4055,
8,466,1,466,1,466,1,467,1,467,3,467,4061,8,467,1,468,1,468,3,468,4065,8,
468,1,469,1,469,1,469,1,469,1,470,1,470,3,470,4073,8,470,1,471,1,471,1,471,
1,471,1,471,1,471,1,471,1,471,3,471,4083,8,471,1,472,1,472,1,472,3,472,4088,
8,472,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,3,473,
4100,8,473,1,474,1,474,1,474,3,474,4105,8,474,1,475,1,475,1,475,1,475,1,
475,1,476,1,476,1,476,1,476,1,476,1,477,1,477,1,477,1,477,1,477,1,478,1,
478,1,478,1,478,1,478,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,480,1,
480,1,481,1,481,1,482,1,482,1,482,1,482,1,482,1,483,1,483,1,484,1,484,1,
484,3,484,4148,8,484,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,486,1,486,
1,487,1,487,1,488,1,488,1,488,1,488,1,488,1,489,1,489,1,489,1,489,1,489,
1,490,1,490,1,490,1,490,1,490,1,491,1,491,1,491,1,491,1,491,1,491,1,491,
1,492,1,492,1,493,1,493,1,494,1,494,1,494,1,494,1,494,1,495,1,495,1,495,
1,495,1,495,1,496,1,496,1,496,1,496,1,496,1,497,1,497,3,497,4204,8,497,1,
498,1,498,3,498,4208,8,498,1,499,1,499,1,499,1,499,1,500,1,500,1,501,1,501,
3,501,4218,8,501,1,502,1,502,3,502,4222,8,502,1,503,1,503,1,504,1,504,3,
504,4228,8,504,1,505,1,505,1,505,1,505,1,506,1,506,3,506,4236,8,506,1,507,
1,507,1,507,3,507,4241,8,507,1,508,1,508,1,508,1,508,1,508,1,509,1,509,3,
509,4250,8,509,1,510,1,510,1,510,1,510,1,510,1,511,1,511,1,511,1,511,1,511,
1,511,1,511,1,511,1,512,3,512,4266,8,512,1,512,3,512,4269,8,512,1,512,3,
512,4272,8,512,1,512,1,512,1,513,1,513,1,514,1,514,1,515,1,515,1,516,1,516,
1,516,1,516,1,516,1,516,1,516,1,516,1,517,1,517,1,518,1,518,1,519,1,519,
1,519,1,519,1,519,1,520,3,520,4300,8,520,1,520,3,520,4303,8,520,1,520,3,
520,4306,8,520,1,520,1,520,1,521,1,521,1,522,1,522,1,523,1,523,1,524,1,524,
1,524,1,524,1,524,1,524,3,524,4322,8,524,1,524,1,524,1,524,1,524,1,524,1,
524,5,524,4330,8,524,10,524,12,524,4333,9,524,1,525,1,525,1,526,1,526,1,
527,1,527,3,527,4341,8,527,1,528,1,528,1,528,1,528,1,528,3,528,4348,8,528,
1,529,1,529,1,529,1,529,3,529,4354,8,529,1,529,3,529,4357,8,529,1,530,1,
530,1,530,1,530,3,530,4363,8,530,1,530,3,530,4366,8,530,1,531,1,531,1,531,
3,531,4371,8,531,1,531,3,531,4374,8,531,1,532,1,532,1,532,1,532,3,532,4380,
8,532,1,532,3,532,4383,8,532,1,533,1,533,1,533,1,533,3,533,4389,8,533,1,
533,3,533,4392,8,533,1,534,1,534,3,534,4396,8,534,1,535,1,535,3,535,4400,
8,535,1,536,1,536,3,536,4404,8,536,1,537,1,537,1,537,3,537,4409,8,537,1,
537,1,537,1,537,1,537,1,537,1,537,5,537,4417,8,537,10,537,12,537,4420,9,
537,1,538,1,538,1,538,1,538,1,538,1,539,1,539,1,539,1,539,1,540,1,540,1,
540,1,540,1,540,1,540,3,540,4437,8,540,1,540,1,540,1,540,1,540,1,540,1,540,
5,540,4445,8,540,10,540,12,540,4448,9,540,1,541,3,541,4451,8,541,1,541,1,
541,1,542,1,542,3,542,4457,8,542,1,543,1,543,1,544,1,544,1,545,1,545,1,546,
1,546,1,547,1,547,1,548,1,548,3,548,4471,8,548,1,549,1,549,1,549,1,549,1,
549,1,550,1,550,3,550,4480,8,550,1,551,1,551,1,551,1,551,1,551,1,552,1,552,
3,552,4489,8,552,1,553,1,553,1,553,1,553,1,554,1,554,3,554,4497,8,554,1,
555,1,555,1,555,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,557,1,557,1,
557,1,557,1,557,1,558,1,558,1,559,1,559,1,559,1,559,1,559,1,559,1,559,1,
560,1,560,1,560,5,560,4526,8,560,10,560,12,560,4529,9,560,1,561,1,561,1,
562,3,562,4534,8,562,1,562,1,562,1,563,1,563,3,563,4540,8,563,1,563,1,563,
1,564,1,564,1,564,5,564,4547,8,564,10,564,12,564,4550,9,564,1,565,1,565,
1,565,1,565,1,566,1,566,3,566,4558,8,566,1,567,1,567,1,567,1,567,1,568,1,
568,1,569,1,569,1,570,1,570,1,570,1,570,1,570,1,571,1,571,3,571,4575,8,571,
1,572,1,572,1,573,1,573,1,573,1,573,1,573,1,574,1,574,1,574,1,574,1,575,
1,575,1,575,3,575,4591,8,575,1,576,1,576,1,576,1,577,1,577,3,577,4598,8,
577,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,
578,5,578,4612,8,578,10,578,12,578,4615,9,578,1,578,1,578,3,578,4619,8,578,
1,579,1,579,3,579,4623,8,579,1,580,1,580,1,580,1,580,3,580,4629,8,580,1,
580,1,580,1,581,1,581,1,581,3,581,4636,8,581,1,581,1,581,1,582,1,582,1,582,
1,582,1,582,1,583,1,583,1,583,1,583,1,583,1,584,1,584,1,584,1,585,1,585,
3,585,4655,8,585,1,586,1,586,1,586,5,586,4660,8,586,10,586,12,586,4663,9,
586,1,587,1,587,1,587,1,587,1,587,1,587,1,587,1,587,3,587,4673,8,587,1,588,
1,588,3,588,4677,8,588,1,589,1,589,1,590,1,590,1,590,1,590,1,590,1,590,1,
590,1,591,1,591,1,592,1,592,1,593,1,593,1,593,1,593,1,593,1,594,1,594,1,
594,1,594,1,594,1,594,1,595,1,595,3,595,4705,8,595,1,596,1,596,1,596,3,596,
4710,8,596,1,597,1,597,1,597,1,597,1,597,1,597,3,597,4718,8,597,1,598,1,
598,3,598,4722,8,598,1,599,1,599,1,600,1,600,1,600,3,600,4729,8,600,1,601,
3,601,4732,8,601,1,601,1,601,3,601,4736,8,601,1,601,3,601,4739,8,601,1,602,
3,602,4742,8,602,1,602,1,602,1,602,5,602,4747,8,602,10,602,12,602,4750,9,
602,1,603,3,603,4753,8,603,1,603,1,603,1,603,5,603,4758,8,603,10,603,12,
603,4761,9,603,1,604,3,604,4764,8,604,1,604,1,604,1,604,5,604,4769,8,604,
10,604,12,604,4772,9,604,1,605,1,605,1,606,1,606,1,607,1,607,1,608,1,608,
1,609,1,609,1,609,1,609,3,609,4786,8,609,1,610,1,610,1,610,1,611,1,611,1,
611,1,612,1,612,1,612,1,612,3,612,4798,8,612,1,613,1,613,1,614,1,614,1,615,
1,615,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,
1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,
1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,
1,616,1,616,1,616,1,616,1,616,1,616,1,616,3,616,4848,8,616,1,617,1,617,1,
617,3,617,4853,8,617,1,618,1,618,1,619,1,619,1,619,1,620,1,620,1,621,1,621,
1,622,1,622,1,623,1,623,1,624,1,624,1,625,1,625,1,626,1,626,1,627,1,627,
1,628,1,628,3,628,4878,8,628,1,629,1,629,1,630,1,630,1,631,1,631,1,632,1,
632,3,632,4888,8,632,1,633,1,633,1,634,1,634,1,635,1,635,1,636,1,636,1,637,
1,637,1,638,1,638,1,638,1,639,1,639,1,639,1,639,1,639,3,639,4908,8,639,1,
640,1,640,1,641,1,641,3,641,4914,8,641,1,642,1,642,3,642,4918,8,642,1,643,
1,643,1,644,1,644,1,645,1,645,1,646,1,646,1,647,1,647,1,648,1,648,1,649,
1,649,3,649,4934,8,649,1,650,1,650,1,650,1,650,1,650,1,650,3,650,4942,8,
650,1,651,1,651,3,651,4946,8,651,1,652,1,652,3,652,4950,8,652,1,653,1,653,
1,654,1,654,3,654,4956,8,654,1,655,1,655,3,655,4960,8,655,1,656,1,656,1,
657,1,657,1,658,1,658,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,
659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,
659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,659,1,
659,1,659,1,659,1,659,1,659,3,659,5005,8,659,1,660,1,660,1,661,1,661,1,662,
1,662,1,663,1,663,1,664,1,664,1,664,0,5,190,914,1048,1074,1080,665,0,2,4,
6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,
464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,
500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,
536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,
572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,
608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,
644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,
680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,
752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,
788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,
824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,
860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,
896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,
932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,
968,970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,
1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,
1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,
1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,
1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,
1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,
1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,
1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,
1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,
1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,
1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,
1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,0,44,2,
0,95,95,208,208,2,0,99,99,224,224,1,0,107,108,2,0,32,32,171,171,2,0,122,
122,193,193,3,0,131,131,169,169,261,261,2,0,201,201,342,342,4,0,315,315,
349,349,355,355,360,360,2,0,209,209,211,211,2,0,146,146,328,328,6,0,1,2,
5,5,10,10,20,20,27,27,50,50,6,0,77,77,98,98,104,104,187,188,240,241,243,
243,2,0,66,66,123,123,1,0,212,213,2,0,72,73,120,121,2,0,201,201,235,235,
2,0,321,321,358,358,2,0,10,10,354,354,2,0,50,50,354,354,1,0,81,82,2,0,242,
242,269,269,1,0,116,117,2,0,70,70,176,176,3,0,54,54,109,109,150,150,1,0,
148,149,2,0,36,36,57,61,3,0,134,134,251,251,262,262,1,0,93,94,2,0,86,86,
199,199,8,0,65,65,74,74,76,76,101,103,118,118,217,217,233,234,244,245,1,
0,91,92,2,0,184,184,264,264,3,0,84,84,185,185,225,225,3,0,83,83,172,172,
249,249,1,0,334,337,1,0,364,367,1,0,399,400,1,0,64,279,1,0,280,314,1,0,315,
363,1,0,392,393,2,0,322,322,345,345,2,0,323,323,346,346,2,0,339,339,359,
359,5091,0,1336,1,0,0,0,2,1341,1,0,0,0,4,1347,1,0,0,0,6,1351,1,0,0,0,8,1353,
1,0,0,0,10,1361,1,0,0,0,12,1365,1,0,0,0,14,1370,1,0,0,0,16,1374,1,0,0,0,
18,1379,1,0,0,0,20,1382,1,0,0,0,22,1389,1,0,0,0,24,1395,1,0,0,0,26,1399,
1,0,0,0,28,1404,1,0,0,0,30,1422,1,0,0,0,32,1425,1,0,0,0,34,1441,1,0,0,0,
36,1443,1,0,0,0,38,1448,1,0,0,0,40,1450,1,0,0,0,42,1459,1,0,0,0,44,1465,
1,0,0,0,46,1467,1,0,0,0,48,1469,1,0,0,0,50,1473,1,0,0,0,52,1475,1,0,0,0,
54,1479,1,0,0,0,56,1484,1,0,0,0,58,1492,1,0,0,0,60,1499,1,0,0,0,62,1501,
1,0,0,0,64,1511,1,0,0,0,66,1513,1,0,0,0,68,1520,1,0,0,0,70,1530,1,0,0,0,
72,1534,1,0,0,0,74,1538,1,0,0,0,76,1548,1,0,0,0,78,1552,1,0,0,0,80,1555,
1,0,0,0,82,1563,1,0,0,0,84,1567,1,0,0,0,86,1575,1,0,0,0,88,1577,1,0,0,0,
90,1579,1,0,0,0,92,1585,1,0,0,0,94,1587,1,0,0,0,96,1598,1,0,0,0,98,1601,
1,0,0,0,100,1607,1,0,0,0,102,1615,1,0,0,0,104,1617,1,0,0,0,106,1624,1,0,
0,0,108,1633,1,0,0,0,110,1635,1,0,0,0,112,1651,1,0,0,0,114,1666,1,0,0,0,
116,1684,1,0,0,0,118,1686,1,0,0,0,120,1689,1,0,0,0,122,1694,1,0,0,0,124,
1704,1,0,0,0,126,1734,1,0,0,0,128,1736,1,0,0,0,130,1742,1,0,0,0,132,1753,
1,0,0,0,134,1757,1,0,0,0,136,1761,1,0,0,0,138,1763,1,0,0,0,140,1768,1,0,
0,0,142,1773,1,0,0,0,144,1775,1,0,0,0,146,1780,1,0,0,0,148,1786,1,0,0,0,
150,1790,1,0,0,0,152,1796,1,0,0,0,154,1798,1,0,0,0,156,1801,1,0,0,0,158,
1804,1,0,0,0,160,1814,1,0,0,0,162,1816,1,0,0,0,164,1822,1,0,0,0,166,1830,
1,0,0,0,168,1834,1,0,0,0,170,1842,1,0,0,0,172,1845,1,0,0,0,174,1854,1,0,
0,0,176,1856,1,0,0,0,178,1860,1,0,0,0,180,1864,1,0,0,0,182,1868,1,0,0,0,
184,1875,1,0,0,0,186,1877,1,0,0,0,188,1879,1,0,0,0,190,1881,1,0,0,0,192,
1895,1,0,0,0,194,1897,1,0,0,0,196,1900,1,0,0,0,198,1904,1,0,0,0,200,1916,
1,0,0,0,202,1918,1,0,0,0,204,1921,1,0,0,0,206,1925,1,0,0,0,208,1928,1,0,
0,0,210,1936,1,0,0,0,212,1938,1,0,0,0,214,1947,1,0,0,0,216,1954,1,0,0,0,
218,1958,1,0,0,0,220,1960,1,0,0,0,222,1963,1,0,0,0,224,1975,1,0,0,0,226,
1978,1,0,0,0,228,1982,1,0,0,0,230,1984,1,0,0,0,232,1989,1,0,0,0,234,1992,
1,0,0,0,236,2004,1,0,0,0,238,2006,1,0,0,0,240,2011,1,0,0,0,242,2014,1,0,
0,0,244,2017,1,0,0,0,246,2033,1,0,0,0,248,2040,1,0,0,0,250,2042,1,0,0,0,
252,2057,1,0,0,0,254,2059,1,0,0,0,256,2067,1,0,0,0,258,2071,1,0,0,0,260,
2074,1,0,0,0,262,2103,1,0,0,0,264,2110,1,0,0,0,266,2114,1,0,0,0,268,2117,
1,0,0,0,270,2123,1,0,0,0,272,2125,1,0,0,0,274,2133,1,0,0,0,276,2142,1,0,
0,0,278,2145,1,0,0,0,280,2152,1,0,0,0,282,2155,1,0,0,0,284,2159,1,0,0,0,
286,2165,1,0,0,0,288,2172,1,0,0,0,290,2179,1,0,0,0,292,2186,1,0,0,0,294,
2188,1,0,0,0,296,2191,1,0,0,0,298,2194,1,0,0,0,300,2196,1,0,0,0,302,2198,
1,0,0,0,304,2200,1,0,0,0,306,2202,1,0,0,0,308,2206,1,0,0,0,310,2209,1,0,
0,0,312,2216,1,0,0,0,314,2220,1,0,0,0,316,2231,1,0,0,0,318,2233,1,0,0,0,
320,2236,1,0,0,0,322,2244,1,0,0,0,324,2251,1,0,0,0,326,2253,1,0,0,0,328,
2262,1,0,0,0,330,2272,1,0,0,0,332,2275,1,0,0,0,334,2278,1,0,0,0,336,2283,
1,0,0,0,338,2285,1,0,0,0,340,2289,1,0,0,0,342,2294,1,0,0,0,344,2296,1,0,
0,0,346,2303,1,0,0,0,348,2305,1,0,0,0,350,2315,1,0,0,0,352,2321,1,0,0,0,
354,2323,1,0,0,0,356,2331,1,0,0,0,358,2339,1,0,0,0,360,2347,1,0,0,0,362,
2357,1,0,0,0,364,2359,1,0,0,0,366,2364,1,0,0,0,368,2366,1,0,0,0,370,2374,
1,0,0,0,372,2382,1,0,0,0,374,2392,1,0,0,0,376,2394,1,0,0,0,378,2397,1,0,
0,0,380,2403,1,0,0,0,382,2407,1,0,0,0,384,2409,1,0,0,0,386,2414,1,0,0,0,
388,2423,1,0,0,0,390,2431,1,0,0,0,392,2435,1,0,0,0,394,2437,1,0,0,0,396,
2440,1,0,0,0,398,2444,1,0,0,0,400,2451,1,0,0,0,402,2457,1,0,0,0,404,2466,
1,0,0,0,406,2468,1,0,0,0,408,2472,1,0,0,0,410,2476,1,0,0,0,412,2480,1,0,
0,0,414,2484,1,0,0,0,416,2488,1,0,0,0,418,2492,1,0,0,0,420,2496,1,0,0,0,
422,2498,1,0,0,0,424,2511,1,0,0,0,426,2514,1,0,0,0,428,2517,1,0,0,0,430,
2519,1,0,0,0,432,2527,1,0,0,0,434,2536,1,0,0,0,436,2545,1,0,0,0,438,2547,
1,0,0,0,440,2551,1,0,0,0,442,2555,1,0,0,0,444,2567,1,0,0,0,446,2577,1,0,
0,0,448,2579,1,0,0,0,450,2587,1,0,0,0,452,2597,1,0,0,0,454,2599,1,0,0,0,
456,2605,1,0,0,0,458,2607,1,0,0,0,460,2609,1,0,0,0,462,2617,1,0,0,0,464,
2619,1,0,0,0,466,2623,1,0,0,0,468,2633,1,0,0,0,470,2635,1,0,0,0,472,2644,
1,0,0,0,474,2646,1,0,0,0,476,2650,1,0,0,0,478,2654,1,0,0,0,480,2658,1,0,
0,0,482,2662,1,0,0,0,484,2666,1,0,0,0,486,2670,1,0,0,0,488,2677,1,0,0,0,
490,2679,1,0,0,0,492,2687,1,0,0,0,494,2695,1,0,0,0,496,2702,1,0,0,0,498,
2713,1,0,0,0,500,2715,1,0,0,0,502,2718,1,0,0,0,504,2723,1,0,0,0,506,2732,
1,0,0,0,508,2734,1,0,0,0,510,2737,1,0,0,0,512,2740,1,0,0,0,514,2743,1,0,
0,0,516,2746,1,0,0,0,518,2750,1,0,0,0,520,2754,1,0,0,0,522,2759,1,0,0,0,
524,2761,1,0,0,0,526,2769,1,0,0,0,528,2771,1,0,0,0,530,2774,1,0,0,0,532,
2777,1,0,0,0,534,2784,1,0,0,0,536,2788,1,0,0,0,538,2790,1,0,0,0,540,2793,
1,0,0,0,542,2805,1,0,0,0,544,2807,1,0,0,0,546,2809,1,0,0,0,548,2812,1,0,
0,0,550,2822,1,0,0,0,552,2824,1,0,0,0,554,2832,1,0,0,0,556,2834,1,0,0,0,
558,2836,1,0,0,0,560,2839,1,0,0,0,562,2843,1,0,0,0,564,2845,1,0,0,0,566,
2852,1,0,0,0,568,2859,1,0,0,0,570,2861,1,0,0,0,572,2867,1,0,0,0,574,2869,
1,0,0,0,576,2872,1,0,0,0,578,2875,1,0,0,0,580,2878,1,0,0,0,582,2884,1,0,
0,0,584,2888,1,0,0,0,586,2890,1,0,0,0,588,2900,1,0,0,0,590,2906,1,0,0,0,
592,2908,1,0,0,0,594,2921,1,0,0,0,596,2923,1,0,0,0,598,2930,1,0,0,0,600,
2932,1,0,0,0,602,2934,1,0,0,0,604,2943,1,0,0,0,606,2947,1,0,0,0,608,2959,
1,0,0,0,610,2961,1,0,0,0,612,2968,1,0,0,0,614,2970,1,0,0,0,616,2972,1,0,
0,0,618,2977,1,0,0,0,620,2979,1,0,0,0,622,2983,1,0,0,0,624,2987,1,0,0,0,
626,2991,1,0,0,0,628,2995,1,0,0,0,630,2999,1,0,0,0,632,3003,1,0,0,0,634,
3009,1,0,0,0,636,3011,1,0,0,0,638,3015,1,0,0,0,640,3019,1,0,0,0,642,3025,
1,0,0,0,644,3036,1,0,0,0,646,3047,1,0,0,0,648,3049,1,0,0,0,650,3051,1,0,
0,0,652,3058,1,0,0,0,654,3060,1,0,0,0,656,3066,1,0,0,0,658,3072,1,0,0,0,
660,3078,1,0,0,0,662,3080,1,0,0,0,664,3082,1,0,0,0,666,3084,1,0,0,0,668,
3086,1,0,0,0,670,3096,1,0,0,0,672,3098,1,0,0,0,674,3104,1,0,0,0,676,3112,
1,0,0,0,678,3118,1,0,0,0,680,3121,1,0,0,0,682,3129,1,0,0,0,684,3133,1,0,
0,0,686,3142,1,0,0,0,688,3144,1,0,0,0,690,3148,1,0,0,0,692,3193,1,0,0,0,
694,3195,1,0,0,0,696,3197,1,0,0,0,698,3199,1,0,0,0,700,3203,1,0,0,0,702,
3207,1,0,0,0,704,3211,1,0,0,0,706,3259,1,0,0,0,708,3305,1,0,0,0,710,3351,
1,0,0,0,712,3353,1,0,0,0,714,3367,1,0,0,0,716,3369,1,0,0,0,718,3414,1,0,
0,0,720,3418,1,0,0,0,722,3425,1,0,0,0,724,3427,1,0,0,0,726,3440,1,0,0,0,
728,3454,1,0,0,0,730,3456,1,0,0,0,732,3471,1,0,0,0,734,3484,1,0,0,0,736,
3486,1,0,0,0,738,3494,1,0,0,0,740,3498,1,0,0,0,742,3500,1,0,0,0,744,3508,
1,0,0,0,746,3512,1,0,0,0,748,3518,1,0,0,0,750,3521,1,0,0,0,752,3527,1,0,
0,0,754,3533,1,0,0,0,756,3536,1,0,0,0,758,3542,1,0,0,0,760,3548,1,0,0,0,
762,3574,1,0,0,0,764,3577,1,0,0,0,766,3581,1,0,0,0,768,3597,1,0,0,0,770,
3599,1,0,0,0,772,3605,1,0,0,0,774,3615,1,0,0,0,776,3617,1,0,0,0,778,3620,
1,0,0,0,780,3625,1,0,0,0,782,3630,1,0,0,0,784,3638,1,0,0,0,786,3640,1,0,
0,0,788,3642,1,0,0,0,790,3645,1,0,0,0,792,3652,1,0,0,0,794,3658,1,0,0,0,
796,3660,1,0,0,0,798,3667,1,0,0,0,800,3669,1,0,0,0,802,3671,1,0,0,0,804,
3675,1,0,0,0,806,3692,1,0,0,0,808,3702,1,0,0,0,810,3705,1,0,0,0,812,3709,
1,0,0,0,814,3713,1,0,0,0,816,3716,1,0,0,0,818,3725,1,0,0,0,820,3728,1,0,
0,0,822,3734,1,0,0,0,824,3737,1,0,0,0,826,3759,1,0,0,0,828,3761,1,0,0,0,
830,3763,1,0,0,0,832,3765,1,0,0,0,834,3778,1,0,0,0,836,3780,1,0,0,0,838,
3783,1,0,0,0,840,3786,1,0,0,0,842,3790,1,0,0,0,844,3792,1,0,0,0,846,3812,
1,0,0,0,848,3815,1,0,0,0,850,3821,1,0,0,0,852,3824,1,0,0,0,854,3831,1,0,
0,0,856,3834,1,0,0,0,858,3843,1,0,0,0,860,3846,1,0,0,0,862,3852,1,0,0,0,
864,3854,1,0,0,0,866,3863,1,0,0,0,868,3871,1,0,0,0,870,3873,1,0,0,0,872,
3875,1,0,0,0,874,3883,1,0,0,0,876,3891,1,0,0,0,878,3893,1,0,0,0,880,3904,
1,0,0,0,882,3915,1,0,0,0,884,3924,1,0,0,0,886,3928,1,0,0,0,888,3932,1,0,
0,0,890,3936,1,0,0,0,892,3938,1,0,0,0,894,3942,1,0,0,0,896,3952,1,0,0,0,
898,3958,1,0,0,0,900,3966,1,0,0,0,902,3974,1,0,0,0,904,3976,1,0,0,0,906,
3978,1,0,0,0,908,3980,1,0,0,0,910,3982,1,0,0,0,912,3993,1,0,0,0,914,3995,
1,0,0,0,916,4007,1,0,0,0,918,4011,1,0,0,0,920,4019,1,0,0,0,922,4023,1,0,
0,0,924,4027,1,0,0,0,926,4029,1,0,0,0,928,4041,1,0,0,0,930,4051,1,0,0,0,
932,4054,1,0,0,0,934,4060,1,0,0,0,936,4064,1,0,0,0,938,4066,1,0,0,0,940,
4072,1,0,0,0,942,4082,1,0,0,0,944,4087,1,0,0,0,946,4099,1,0,0,0,948,4104,
1,0,0,0,950,4106,1,0,0,0,952,4111,1,0,0,0,954,4116,1,0,0,0,956,4121,1,0,
0,0,958,4126,1,0,0,0,960,4133,1,0,0,0,962,4135,1,0,0,0,964,4137,1,0,0,0,
966,4142,1,0,0,0,968,4147,1,0,0,0,970,4149,1,0,0,0,972,4156,1,0,0,0,974,
4158,1,0,0,0,976,4160,1,0,0,0,978,4165,1,0,0,0,980,4170,1,0,0,0,982,4175,
1,0,0,0,984,4182,1,0,0,0,986,4184,1,0,0,0,988,4186,1,0,0,0,990,4191,1,0,
0,0,992,4196,1,0,0,0,994,4203,1,0,0,0,996,4207,1,0,0,0,998,4209,1,0,0,0,
1000,4213,1,0,0,0,1002,4217,1,0,0,0,1004,4221,1,0,0,0,1006,4223,1,0,0,0,
1008,4227,1,0,0,0,1010,4229,1,0,0,0,1012,4235,1,0,0,0,1014,4240,1,0,0,0,
1016,4242,1,0,0,0,1018,4249,1,0,0,0,1020,4251,1,0,0,0,1022,4256,1,0,0,0,
1024,4271,1,0,0,0,1026,4275,1,0,0,0,1028,4277,1,0,0,0,1030,4279,1,0,0,0,
1032,4281,1,0,0,0,1034,4289,1,0,0,0,1036,4291,1,0,0,0,1038,4293,1,0,0,0,
1040,4305,1,0,0,0,1042,4309,1,0,0,0,1044,4311,1,0,0,0,1046,4313,1,0,0,0,
1048,4321,1,0,0,0,1050,4334,1,0,0,0,1052,4336,1,0,0,0,1054,4340,1,0,0,0,
1056,4347,1,0,0,0,1058,4356,1,0,0,0,1060,4365,1,0,0,0,1062,4367,1,0,0,0,
1064,4382,1,0,0,0,1066,4391,1,0,0,0,1068,4395,1,0,0,0,1070,4399,1,0,0,0,
1072,4403,1,0,0,0,1074,4408,1,0,0,0,1076,4421,1,0,0,0,1078,4426,1,0,0,0,
1080,4436,1,0,0,0,1082,4450,1,0,0,0,1084,4456,1,0,0,0,1086,4458,1,0,0,0,
1088,4460,1,0,0,0,1090,4462,1,0,0,0,1092,4464,1,0,0,0,1094,4466,1,0,0,0,
1096,4470,1,0,0,0,1098,4472,1,0,0,0,1100,4479,1,0,0,0,1102,4481,1,0,0,0,
1104,4488,1,0,0,0,1106,4490,1,0,0,0,1108,4496,1,0,0,0,1110,4498,1,0,0,0,
1112,4501,1,0,0,0,1114,4508,1,0,0,0,1116,4513,1,0,0,0,1118,4515,1,0,0,0,
1120,4522,1,0,0,0,1122,4530,1,0,0,0,1124,4533,1,0,0,0,1126,4537,1,0,0,0,
1128,4543,1,0,0,0,1130,4551,1,0,0,0,1132,4557,1,0,0,0,1134,4559,1,0,0,0,
1136,4563,1,0,0,0,1138,4565,1,0,0,0,1140,4567,1,0,0,0,1142,4572,1,0,0,0,
1144,4576,1,0,0,0,1146,4578,1,0,0,0,1148,4583,1,0,0,0,1150,4590,1,0,0,0,
1152,4592,1,0,0,0,1154,4597,1,0,0,0,1156,4618,1,0,0,0,1158,4622,1,0,0,0,
1160,4624,1,0,0,0,1162,4632,1,0,0,0,1164,4639,1,0,0,0,1166,4644,1,0,0,0,
1168,4649,1,0,0,0,1170,4654,1,0,0,0,1172,4656,1,0,0,0,1174,4672,1,0,0,0,
1176,4676,1,0,0,0,1178,4678,1,0,0,0,1180,4680,1,0,0,0,1182,4687,1,0,0,0,
1184,4689,1,0,0,0,1186,4691,1,0,0,0,1188,4696,1,0,0,0,1190,4704,1,0,0,0,
1192,4709,1,0,0,0,1194,4717,1,0,0,0,1196,4721,1,0,0,0,1198,4723,1,0,0,0,
1200,4728,1,0,0,0,1202,4738,1,0,0,0,1204,4741,1,0,0,0,1206,4752,1,0,0,0,
1208,4763,1,0,0,0,1210,4773,1,0,0,0,1212,4775,1,0,0,0,1214,4777,1,0,0,0,
1216,4779,1,0,0,0,1218,4785,1,0,0,0,1220,4787,1,0,0,0,1222,4790,1,0,0,0,
1224,4797,1,0,0,0,1226,4799,1,0,0,0,1228,4801,1,0,0,0,1230,4803,1,0,0,0,
1232,4847,1,0,0,0,1234,4852,1,0,0,0,1236,4854,1,0,0,0,1238,4856,1,0,0,0,
1240,4859,1,0,0,0,1242,4861,1,0,0,0,1244,4863,1,0,0,0,1246,4865,1,0,0,0,
1248,4867,1,0,0,0,1250,4869,1,0,0,0,1252,4871,1,0,0,0,1254,4873,1,0,0,0,
1256,4877,1,0,0,0,1258,4879,1,0,0,0,1260,4881,1,0,0,0,1262,4883,1,0,0,0,
1264,4887,1,0,0,0,1266,4889,1,0,0,0,1268,4891,1,0,0,0,1270,4893,1,0,0,0,
1272,4895,1,0,0,0,1274,4897,1,0,0,0,1276,4899,1,0,0,0,1278,4907,1,0,0,0,
1280,4909,1,0,0,0,1282,4913,1,0,0,0,1284,4917,1,0,0,0,1286,4919,1,0,0,0,
1288,4921,1,0,0,0,1290,4923,1,0,0,0,1292,4925,1,0,0,0,1294,4927,1,0,0,0,
1296,4929,1,0,0,0,1298,4933,1,0,0,0,1300,4941,1,0,0,0,1302,4945,1,0,0,0,
1304,4949,1,0,0,0,1306,4951,1,0,0,0,1308,4955,1,0,0,0,1310,4959,1,0,0,0,
1312,4961,1,0,0,0,1314,4963,1,0,0,0,1316,4965,1,0,0,0,1318,5004,1,0,0,0,
1320,5006,1,0,0,0,1322,5008,1,0,0,0,1324,5010,1,0,0,0,1326,5012,1,0,0,0,
1328,5014,1,0,0,0,1330,1332,3,2,1,0,1331,1333,5,47,0,0,1332,1331,1,0,0,0,
1332,1333,1,0,0,0,1333,1335,1,0,0,0,1334,1330,1,0,0,0,1335,1338,1,0,0,0,
1336,1334,1,0,0,0,1336,1337,1,0,0,0,1337,1339,1,0,0,0,1338,1336,1,0,0,0,
1339,1340,5,0,0,1,1340,1,1,0,0,0,1341,1343,3,4,2,0,1342,1344,3,32,16,0,1343,
1342,1,0,0,0,1343,1344,1,0,0,0,1344,3,1,0,0,0,1345,1348,3,6,3,0,1346,1348,
3,34,17,0,1347,1345,1,0,0,0,1347,1346,1,0,0,0,1348,5,1,0,0,0,1349,1352,3,
8,4,0,1350,1352,3,28,14,0,1351,1349,1,0,0,0,1351,1350,1,0,0,0,1352,7,1,0,
0,0,1353,1354,5,230,0,0,1354,1359,5,231,0,0,1355,1360,3,10,5,0,1356,1360,
3,12,6,0,1357,1360,3,14,7,0,1358,1360,3,18,9,0,1359,1355,1,0,0,0,1359,1356,
1,0,0,0,1359,1357,1,0,0,0,1359,1358,1,0,0,0,1360,9,1,0,0,0,1361,1362,5,227,
0,0,1362,1363,3,792,396,0,1363,11,1,0,0,0,1364,1366,5,343,0,0,1365,1364,
1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,1368,5,327,0,0,1368,1369,
3,86,43,0,1369,13,1,0,0,0,1370,1371,5,247,0,0,1371,1372,5,363,0,0,1372,1373,
3,16,8,0,1373,15,1,0,0,0,1374,1375,3,994,497,0,1375,17,1,0,0,0,1376,1380,
3,20,10,0,1377,1380,3,22,11,0,1378,1380,3,24,12,0,1379,1376,1,0,0,0,1379,
1377,1,0,0,0,1379,1378,1,0,0,0,1380,19,1,0,0,0,1381,1383,5,343,0,0,1382,
1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1385,5,327,0,0,1385,
1386,3,26,13,0,1386,1387,3,70,35,0,1387,21,1,0,0,0,1388,1390,5,316,0,0,1389,
1388,1,0,0,0,1389,1390,1,0,0,0,1390,1391,1,0,0,0,1391,1392,5,351,0,0,1392,
1393,3,26,13,0,1393,1394,3,76,38,0,1394,23,1,0,0,0,1395,1396,5,267,0,0,1396,
1397,3,26,13,0,1397,1398,3,82,41,0,1398,25,1,0,0,0,1399,1401,3,1276,638,
0,1400,1402,5,368,0,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,27,1,0,0,
0,1403,1405,5,230,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,
0,0,1406,1407,5,222,0,0,1407,1408,3,30,15,0,1408,29,1,0,0,0,1409,1411,5,
66,0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1423,7,
0,0,0,1413,1423,5,227,0,0,1414,1416,5,343,0,0,1415,1414,1,0,0,0,1415,1416,
1,0,0,0,1416,1417,1,0,0,0,1417,1423,5,327,0,0,1418,1419,5,247,0,0,1419,1423,
5,363,0,0,1420,1421,5,207,0,0,1421,1423,3,1276,638,0,1422,1410,1,0,0,0,1422,
1413,1,0,0,0,1422,1415,1,0,0,0,1422,1418,1,0,0,0,1422,1420,1,0,0,0,1423,
31,1,0,0,0,1424,1426,5,230,0,0,1425,1424,1,0,0,0,1425,1426,1,0,0,0,1426,
1427,1,0,0,0,1427,1428,5,96,0,0,1428,33,1,0,0,0,1429,1434,3,36,18,0,1430,
1432,3,50,25,0,1431,1433,3,38,19,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,
1435,1,0,0,0,1434,1430,1,0,0,0,1434,1435,1,0,0,0,1435,1442,1,0,0,0,1436,
1438,3,50,25,0,1437,1439,3,38,19,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,
1442,1,0,0,0,1440,1442,3,38,19,0,1441,1429,1,0,0,0,1441,1436,1,0,0,0,1441,
1440,1,0,0,0,1442,35,1,0,0,0,1443,1444,5,239,0,0,1444,1446,5,356,0,0,1445,
1447,3,40,20,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,37,1,0,0,0,1448,
1449,7,1,0,0,1449,39,1,0,0,0,1450,1453,3,42,21,0,1451,1452,5,34,0,0,1452,
1454,3,42,21,0,1453,1451,1,0,0,0,1454,1455,1,0,0,0,1455,1453,1,0,0,0,1455,
1456,1,0,0,0,1456,41,1,0,0,0,1457,1460,3,44,22,0,1458,1460,3,46,23,0,1459,
1457,1,0,0,0,1459,1458,1,0,0,0,1460,43,1,0,0,0,1461,1462,5,344,0,0,1462,
1466,5,341,0,0,1463,1464,5,344,0,0,1464,1466,5,362,0,0,1465,1461,1,0,0,0,
1465,1463,1,0,0,0,1466,45,1,0,0,0,1467,1468,1,0,0,0,1468,47,1,0,0,0,1469,
1470,5,40,0,0,1470,1471,3,50,25,0,1471,1472,5,41,0,0,1472,49,1,0,0,0,1473,
1474,3,56,28,0,1474,51,1,0,0,0,1475,1476,5,40,0,0,1476,1477,3,56,28,0,1477,
1478,5,41,0,0,1478,53,1,0,0,0,1479,1480,5,40,0,0,1480,1481,3,56,28,0,1481,
1482,5,41,0,0,1482,55,1,0,0,0,1483,1485,3,296,148,0,1484,1483,1,0,0,0,1484,
1485,1,0,0,0,1485,1487,1,0,0,0,1486,1488,3,58,29,0,1487,1486,1,0,0,0,1487,
1488,1,0,0,0,1488,1489,1,0,0,0,1489,1490,3,62,31,0,1490,57,1,0,0,0,1491,
1493,3,60,30,0,1492,1491,1,0,0,0,1493,1494,1,0,0,0,1494,1492,1,0,0,0,1494,
1495,1,0,0,0,1495,59,1,0,0,0,1496,1500,3,68,34,0,1497,1500,3,74,37,0,1498,
1500,3,80,40,0,1499,1496,1,0,0,0,1499,1497,1,0,0,0,1499,1498,1,0,0,0,1500,
61,1,0,0,0,1501,1505,3,64,32,0,1502,1504,3,66,33,0,1503,1502,1,0,0,0,1504,
1507,1,0,0,0,1505,1503,1,0,0,0,1505,1506,1,0,0,0,1506,63,1,0,0,0,1507,1505,
1,0,0,0,1508,1512,3,98,49,0,1509,1512,3,134,67,0,1510,1512,3,188,94,0,1511,
1508,1,0,0,0,1511,1509,1,0,0,0,1511,1510,1,0,0,0,1512,65,1,0,0,0,1513,1515,
5,192,0,0,1514,1516,3,530,265,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,
1517,1,0,0,0,1517,1518,3,64,32,0,1518,67,1,0,0,0,1519,1521,5,343,0,0,1520,
1519,1,0,0,0,1520,1521,1,0,0,0,1521,1522,1,0,0,0,1522,1523,5,327,0,0,1523,
1524,3,1280,640,0,1524,1525,3,70,35,0,1525,69,1,0,0,0,1526,1528,3,684,342,
0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,0,0,0,1529,1531,3,740,
370,0,1530,1527,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,1532,1533,3,
72,36,0,1533,71,1,0,0,0,1534,1535,5,36,0,0,1535,1536,3,86,43,0,1536,73,1,
0,0,0,1537,1539,5,316,0,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,
1,0,0,0,1540,1541,5,351,0,0,1541,1542,3,1292,646,0,1542,1543,3,76,38,0,1543,
75,1,0,0,0,1544,1546,3,684,342,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,
1547,1,0,0,0,1547,1549,3,746,373,0,1548,1545,1,0,0,0,1548,1549,1,0,0,0,1549,
1550,1,0,0,0,1550,1551,3,78,39,0,1551,77,1,0,0,0,1552,1553,5,36,0,0,1553,
1554,3,92,46,0,1554,79,1,0,0,0,1555,1556,5,267,0,0,1556,1557,3,1294,647,
0,1557,1558,3,82,41,0,1558,81,1,0,0,0,1559,1561,3,684,342,0,1560,1559,1,
0,0,0,1560,1561,1,0,0,0,1561,1562,1,0,0,0,1562,1564,3,682,341,0,1563,1560,
1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,0,0,1565,1566,3,84,42,0,1566,83,
1,0,0,0,1567,1568,5,36,0,0,1568,1569,3,894,447,0,1569,85,1,0,0,0,1570,1576,
3,90,45,0,1571,1576,3,96,48,0,1572,1576,3,808,404,0,1573,1576,3,1250,625,
0,1574,1576,3,88,44,0,1575,1570,1,0,0,0,1575,1571,1,0,0,0,1575,1572,1,0,
0,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,87,1,0,0,0,1577,1578,7,2,0,
0,1578,89,1,0,0,0,1579,1580,3,54,27,0,1580,91,1,0,0,0,1581,1586,3,94,47,
0,1582,1586,3,96,48,0,1583,1586,3,818,409,0,1584,1586,3,1250,625,0,1585,
1581,1,0,0,0,1585,1582,1,0,0,0,1585,1583,1,0,0,0,1585,1584,1,0,0,0,1586,
93,1,0,0,0,1587,1588,3,54,27,0,1588,95,1,0,0,0,1589,1590,5,270,0,0,1590,
1599,3,936,468,0,1591,1599,3,938,469,0,1592,1599,3,1148,574,0,1593,1599,
3,886,443,0,1594,1599,3,550,275,0,1595,1599,3,944,472,0,1596,1599,3,1152,
576,0,1597,1599,3,1154,577,0,1598,1589,1,0,0,0,1598,1591,1,0,0,0,1598,1592,
1,0,0,0,1598,1593,1,0,0,0,1598,1594,1,0,0,0,1598,1595,1,0,0,0,1598,1596,
1,0,0,0,1598,1597,1,0,0,0,1599,97,1,0,0,0,1600,1602,3,100,50,0,1601,1600,
1,0,0,0,1602,1603,1,0,0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,99,1,
0,0,0,1605,1608,3,102,51,0,1606,1608,3,132,66,0,1607,1605,1,0,0,0,1607,1606,
1,0,0,0,1608,101,1,0,0,0,1609,1616,3,104,52,0,1610,1616,3,108,54,0,1611,
1616,3,124,62,0,1612,1616,3,106,53,0,1613,1616,3,122,61,0,1614,1616,3,130,
65,0,1615,1609,1,0,0,0,1615,1610,1,0,0,0,1615,1611,1,0,0,0,1615,1612,1,0,
0,0,1615,1613,1,0,0,0,1615,1614,1,0,0,0,1616,103,1,0,0,0,1617,1618,5,105,
0,0,1618,1620,5,227,0,0,1619,1621,5,368,0,0,1620,1619,1,0,0,0,1620,1621,
1,0,0,0,1621,1622,1,0,0,0,1622,1623,3,796,398,0,1623,105,1,0,0,0,1624,1625,
5,125,0,0,1625,1627,5,227,0,0,1626,1628,5,369,0,0,1627,1626,1,0,0,0,1627,
1628,1,0,0,0,1628,1629,1,0,0,0,1629,1630,3,796,398,0,1630,107,1,0,0,0,1631,
1634,3,110,55,0,1632,1634,3,112,56,0,1633,1631,1,0,0,0,1633,1632,1,0,0,0,
1634,109,1,0,0,0,1635,1637,5,105,0,0,1636,1638,5,343,0,0,1637,1636,1,0,0,
0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1641,5,327,0,0,1640,1642,5,368,
0,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1646,3,810,
405,0,1644,1647,3,114,57,0,1645,1647,3,116,58,0,1646,1644,1,0,0,0,1646,1645,
1,0,0,0,1647,1649,1,0,0,0,1648,1650,3,120,60,0,1649,1648,1,0,0,0,1649,1650,
1,0,0,0,1650,111,1,0,0,0,1651,1652,5,105,0,0,1652,1653,5,204,0,0,1653,1655,
5,221,0,0,1654,1656,5,343,0,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,1657,
1,0,0,0,1657,1658,5,327,0,0,1658,1661,3,810,405,0,1659,1662,3,114,57,0,1660,
1662,3,116,58,0,1661,1659,1,0,0,0,1661,1660,1,0,0,0,1662,1664,1,0,0,0,1663,
1665,3,120,60,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,113,1,0,0,0,1666,
1671,5,202,0,0,1667,1669,5,343,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,
1670,1,0,0,0,1670,1672,5,327,0,0,1671,1668,1,0,0,0,1671,1672,1,0,0,0,1672,
1673,1,0,0,0,1673,1674,5,357,0,0,1674,115,1,0,0,0,1675,1685,3,118,59,0,1676,
1678,3,684,342,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1679,1,0,0,0,1679,
1685,3,814,407,0,1680,1682,3,684,342,0,1681,1680,1,0,0,0,1681,1682,1,0,0,
0,1682,1683,1,0,0,0,1683,1685,3,582,291,0,1684,1675,1,0,0,0,1684,1677,1,
0,0,0,1684,1681,1,0,0,0,1685,117,1,0,0,0,1686,1687,5,174,0,0,1687,1688,3,
86,43,0,1688,119,1,0,0,0,1689,1690,5,71,0,0,1690,1691,5,100,0,0,1691,1692,
5,200,0,0,1692,1693,3,86,43,0,1693,121,1,0,0,0,1694,1696,5,125,0,0,1695,
1697,5,343,0,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,
1700,5,327,0,0,1699,1701,5,369,0,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,
1702,1,0,0,0,1702,1703,3,810,405,0,1703,123,1,0,0,0,1704,1720,5,105,0,0,
1705,1707,5,343,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1708,1,0,0,
0,1708,1709,5,327,0,0,1709,1711,5,357,0,0,1710,1712,5,368,0,0,1711,1710,
1,0,0,0,1711,1712,1,0,0,0,1712,1721,1,0,0,0,1713,1714,5,204,0,0,1714,1716,
5,221,0,0,1715,1717,5,343,0,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,
1,0,0,0,1718,1719,5,327,0,0,1719,1721,5,357,0,0,1720,1706,1,0,0,0,1720,1713,
1,0,0,0,1721,1722,1,0,0,0,1722,1723,3,816,408,0,1723,1724,3,126,63,0,1724,
125,1,0,0,0,1725,1727,5,71,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,
1728,1,0,0,0,1728,1735,3,128,64,0,1729,1735,3,118,59,0,1730,1732,5,71,0,
0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,1,0,0,0,1733,1735,3,582,
291,0,1734,1726,1,0,0,0,1734,1729,1,0,0,0,1734,1731,1,0,0,0,1735,127,1,0,
0,0,1736,1737,5,100,0,0,1737,1740,5,200,0,0,1738,1741,3,814,407,0,1739,1741,
3,830,415,0,1740,1738,1,0,0,0,1740,1739,1,0,0,0,1741,129,1,0,0,0,1742,1744,
5,125,0,0,1743,1745,5,343,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,
1,0,0,0,1746,1747,5,327,0,0,1747,1749,5,357,0,0,1748,1750,5,369,0,0,1749,
1748,1,0,0,0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,1751,1752,3,816,408,0,1752,
131,1,0,0,0,1753,1754,3,278,139,0,1754,133,1,0,0,0,1755,1758,3,136,68,0,
1756,1758,3,142,71,0,1757,1755,1,0,0,0,1757,1756,1,0,0,0,1758,135,1,0,0,
0,1759,1762,3,138,69,0,1760,1762,3,140,70,0,1761,1759,1,0,0,0,1761,1760,
1,0,0,0,1762,137,1,0,0,0,1763,1764,3,294,147,0,1764,1766,3,146,73,0,1765,
1767,3,248,124,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,139,1,0,0,0,1768,
1769,3,294,147,0,1769,1770,3,52,26,0,1770,141,1,0,0,0,1771,1774,3,144,72,
0,1772,1774,3,52,26,0,1773,1771,1,0,0,0,1773,1772,1,0,0,0,1774,143,1,0,0,
0,1775,1777,3,146,73,0,1776,1778,3,248,124,0,1777,1776,1,0,0,0,1777,1778,
1,0,0,0,1778,145,1,0,0,0,1779,1781,3,148,74,0,1780,1779,1,0,0,0,1781,1782,
1,0,0,0,1782,1780,1,0,0,0,1782,1783,1,0,0,0,1783,147,1,0,0,0,1784,1787,3,
214,107,0,1785,1787,3,150,75,0,1786,1784,1,0,0,0,1786,1785,1,0,0,0,1787,
149,1,0,0,0,1788,1791,3,152,76,0,1789,1791,3,186,93,0,1790,1788,1,0,0,0,
1790,1789,1,0,0,0,1791,151,1,0,0,0,1792,1797,3,154,77,0,1793,1797,3,156,
78,0,1794,1797,3,170,85,0,1795,1797,3,180,90,0,1796,1792,1,0,0,0,1796,1793,
1,0,0,0,1796,1794,1,0,0,0,1796,1795,1,0,0,0,1797,153,1,0,0,0,1798,1799,5,
154,0,0,1799,1800,3,428,214,0,1800,155,1,0,0,0,1801,1802,5,231,0,0,1802,
1803,3,158,79,0,1803,157,1,0,0,0,1804,1807,3,160,80,0,1805,1806,5,34,0,0,
1806,1808,3,160,80,0,1807,1805,1,0,0,0,1808,1809,1,0,0,0,1809,1807,1,0,0,
0,1809,1810,1,0,0,0,1810,159,1,0,0,0,1811,1815,3,162,81,0,1812,1815,3,164,
82,0,1813,1815,3,166,83,0,1814,1811,1,0,0,0,1814,1812,1,0,0,0,1814,1813,
1,0,0,0,1815,161,1,0,0,0,1816,1817,3,298,149,0,1817,1818,5,54,0,0,1818,1819,
3,1272,636,0,1819,1820,5,36,0,0,1820,1821,3,894,447,0,1821,163,1,0,0,0,1822,
1823,3,298,149,0,1823,1824,5,36,0,0,1824,1826,5,40,0,0,1825,1827,3,398,199,
0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1828,1,0,0,0,1828,1829,5,41,0,
0,1829,165,1,0,0,0,1830,1831,3,298,149,0,1831,1832,7,3,0,0,1832,1833,3,168,
84,0,1833,167,1,0,0,0,1834,1839,3,1270,635,0,1835,1836,5,29,0,0,1836,1838,
3,1270,635,0,1837,1835,1,0,0,0,1838,1841,1,0,0,0,1839,1837,1,0,0,0,1839,
1840,1,0,0,0,1840,169,1,0,0,0,1841,1839,1,0,0,0,1842,1843,5,220,0,0,1843,
1844,3,172,86,0,1844,171,1,0,0,0,1845,1848,3,174,87,0,1846,1847,5,34,0,0,
1847,1849,3,174,87,0,1848,1846,1,0,0,0,1849,1850,1,0,0,0,1850,1848,1,0,0,
0,1850,1851,1,0,0,0,1851,173,1,0,0,0,1852,1855,3,176,88,0,1853,1855,3,178,
89,0,1854,1852,1,0,0,0,1854,1853,1,0,0,0,1855,175,1,0,0,0,1856,1857,3,298,
149,0,1857,1858,5,54,0,0,1858,1859,3,1272,636,0,1859,177,1,0,0,0,1860,1861,
3,298,149,0,1861,1862,7,3,0,0,1862,1863,3,168,84,0,1863,179,1,0,0,0,1864,
1865,7,4,0,0,1865,1866,5,119,0,0,1866,1867,3,182,91,0,1867,181,1,0,0,0,1868,
1871,3,184,92,0,1869,1870,5,34,0,0,1870,1872,3,184,92,0,1871,1869,1,0,0,
0,1872,1873,1,0,0,0,1873,1871,1,0,0,0,1873,1874,1,0,0,0,1874,183,1,0,0,0,
1875,1876,3,894,447,0,1876,185,1,0,0,0,1877,1878,3,278,139,0,1878,187,1,
0,0,0,1879,1880,3,190,95,0,1880,189,1,0,0,0,1881,1882,6,95,-1,0,1882,1883,
3,196,98,0,1883,1890,1,0,0,0,1884,1885,10,2,0,0,1885,1886,3,192,96,0,1886,
1887,3,196,98,0,1887,1889,1,0,0,0,1888,1884,1,0,0,0,1889,1892,1,0,0,0,1890,
1888,1,0,0,0,1890,1891,1,0,0,0,1891,191,1,0,0,0,1892,1890,1,0,0,0,1893,1896,
3,194,97,0,1894,1896,5,206,0,0,1895,1893,1,0,0,0,1895,1894,1,0,0,0,1896,
193,1,0,0,0,1897,1898,7,5,0,0,1898,1899,3,556,278,0,1899,195,1,0,0,0,1900,
1901,3,198,99,0,1901,197,1,0,0,0,1902,1905,3,200,100,0,1903,1905,3,210,105,
0,1904,1902,1,0,0,0,1904,1903,1,0,0,0,1905,199,1,0,0,0,1906,1908,3,202,101,
0,1907,1906,1,0,0,0,1908,1909,1,0,0,0,1909,1907,1,0,0,0,1909,1910,1,0,0,
0,1910,1911,1,0,0,0,1911,1912,3,204,102,0,1912,1917,1,0,0,0,1913,1917,3,
206,103,0,1914,1917,3,208,104,0,1915,1917,3,260,130,0,1916,1907,1,0,0,0,
1916,1913,1,0,0,0,1916,1914,1,0,0,0,1916,1915,1,0,0,0,1917,201,1,0,0,0,1918,
1919,3,294,147,0,1919,1920,3,212,106,0,1920,203,1,0,0,0,1921,1922,3,294,
147,0,1922,1923,3,212,106,0,1923,1924,3,248,124,0,1924,205,1,0,0,0,1925,
1926,3,294,147,0,1926,1927,3,248,124,0,1927,207,1,0,0,0,1928,1929,3,294,
147,0,1929,1930,3,54,27,0,1930,209,1,0,0,0,1931,1933,3,212,106,0,1932,1931,
1,0,0,0,1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,1937,3,248,124,0,1935,1937,
3,54,27,0,1936,1932,1,0,0,0,1936,1935,1,0,0,0,1937,211,1,0,0,0,1938,1942,
3,214,107,0,1939,1941,3,214,107,0,1940,1939,1,0,0,0,1941,1944,1,0,0,0,1942,
1940,1,0,0,0,1942,1943,1,0,0,0,1943,213,1,0,0,0,1944,1942,1,0,0,0,1945,1948,
3,216,108,0,1946,1948,3,228,114,0,1947,1945,1,0,0,0,1947,1946,1,0,0,0,1948,
215,1,0,0,0,1949,1955,3,218,109,0,1950,1955,3,232,116,0,1951,1955,3,238,
119,0,1952,1955,3,230,115,0,1953,1955,3,246,123,0,1954,1949,1,0,0,0,1954,
1950,1,0,0,0,1954,1951,1,0,0,0,1954,1952,1,0,0,0,1954,1953,1,0,0,0,1955,
217,1,0,0,0,1956,1959,3,220,110,0,1957,1959,3,222,111,0,1958,1956,1,0,0,
0,1958,1957,1,0,0,0,1959,219,1,0,0,0,1960,1961,5,186,0,0,1961,1962,3,306,
153,0,1962,221,1,0,0,0,1963,1964,5,203,0,0,1964,1965,3,224,112,0,1965,223,
1,0,0,0,1966,1976,3,220,110,0,1967,1968,5,40,0,0,1968,1969,3,226,113,0,1969,
1970,5,41,0,0,1970,1976,1,0,0,0,1971,1972,5,44,0,0,1972,1973,3,226,113,0,
1973,1974,5,45,0,0,1974,1976,1,0,0,0,1975,1966,1,0,0,0,1975,1967,1,0,0,0,
1975,1971,1,0,0,0,1976,225,1,0,0,0,1977,1979,3,218,109,0,1978,1977,1,0,0,
0,1979,1980,1,0,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,227,1,0,0,0,
1982,1983,3,278,139,0,1983,229,1,0,0,0,1984,1987,5,135,0,0,1985,1988,3,528,
264,0,1986,1988,3,832,416,0,1987,1985,1,0,0,0,1987,1986,1,0,0,0,1988,231,
1,0,0,0,1989,1990,5,173,0,0,1990,1991,3,234,117,0,1991,233,1,0,0,0,1992,
1995,3,236,118,0,1993,1994,5,34,0,0,1994,1996,3,236,118,0,1995,1993,1,0,
0,0,1996,1997,1,0,0,0,1997,1995,1,0,0,0,1997,1998,1,0,0,0,1998,235,1,0,0,
0,1999,2005,3,80,40,0,2000,2001,3,1294,647,0,2001,2002,5,36,0,0,2002,2003,
3,894,447,0,2003,2005,1,0,0,0,2004,1999,1,0,0,0,2004,2000,1,0,0,0,2005,237,
1,0,0,0,2006,2007,5,144,0,0,2007,2009,3,240,120,0,2008,2010,3,244,122,0,
2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,239,1,0,0,0,2011,2012,3,242,121,
0,2012,2013,3,1104,552,0,2013,241,1,0,0,0,2014,2015,3,1302,651,0,2015,2016,
5,153,0,0,2016,243,1,0,0,0,2017,2018,5,273,0,0,2018,2019,7,6,0,0,2019,2020,
3,1302,651,0,2020,245,1,0,0,0,2021,2023,3,548,274,0,2022,2024,3,576,288,
0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,2024,2026,1,0,0,0,2025,2027,3,574,
287,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,2034,1,0,0,0,2028,2030,3,
576,288,0,2029,2031,3,574,287,0,2030,2029,1,0,0,0,2030,2031,1,0,0,0,2031,
2034,1,0,0,0,2032,2034,3,574,287,0,2033,2021,1,0,0,0,2033,2028,1,0,0,0,2033,
2032,1,0,0,0,2034,247,1,0,0,0,2035,2037,3,250,125,0,2036,2038,3,246,123,
0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,2041,1,0,0,0,2039,2041,5,136,
0,0,2040,2035,1,0,0,0,2040,2039,1,0,0,0,2041,249,1,0,0,0,2042,2043,5,223,
0,0,2043,2044,3,252,126,0,2044,251,1,0,0,0,2045,2047,3,556,278,0,2046,2045,
1,0,0,0,2046,2047,1,0,0,0,2047,2050,1,0,0,0,2048,2051,5,30,0,0,2049,2051,
3,254,127,0,2050,2048,1,0,0,0,2050,2049,1,0,0,0,2051,2053,1,0,0,0,2052,2054,
3,540,270,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2058,1,0,0,0,2055,2056,
5,338,0,0,2056,2058,5,317,0,0,2057,2046,1,0,0,0,2057,2055,1,0,0,0,2058,253,
1,0,0,0,2059,2064,3,256,128,0,2060,2061,5,34,0,0,2061,2063,3,256,128,0,2062,
2060,1,0,0,0,2063,2066,1,0,0,0,2064,2062,1,0,0,0,2064,2065,1,0,0,0,2065,
255,1,0,0,0,2066,2064,1,0,0,0,2067,2069,3,910,455,0,2068,2070,3,258,129,
0,2069,2068,1,0,0,0,2069,2070,1,0,0,0,2070,257,1,0,0,0,2071,2072,5,71,0,
0,2072,2073,3,1302,651,0,2073,259,1,0,0,0,2074,2076,5,229,0,0,2075,2077,
3,556,278,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2080,1,0,0,0,2078,2081,
3,262,131,0,2079,2081,5,30,0,0,2080,2078,1,0,0,0,2080,2079,1,0,0,0,2081,
2101,1,0,0,0,2082,2084,3,270,135,0,2083,2085,3,528,264,0,2084,2083,1,0,0,
0,2084,2085,1,0,0,0,2085,2087,1,0,0,0,2086,2088,3,540,270,0,2087,2086,1,
0,0,0,2087,2088,1,0,0,0,2088,2090,1,0,0,0,2089,2091,3,268,134,0,2090,2089,
1,0,0,0,2090,2091,1,0,0,0,2091,2093,1,0,0,0,2092,2094,3,548,274,0,2093,2092,
1,0,0,0,2093,2094,1,0,0,0,2094,2096,1,0,0,0,2095,2097,3,576,288,0,2096,2095,
1,0,0,0,2096,2097,1,0,0,0,2097,2099,1,0,0,0,2098,2100,3,574,287,0,2099,2098,
1,0,0,0,2099,2100,1,0,0,0,2100,2102,1,0,0,0,2101,2082,1,0,0,0,2101,2102,
1,0,0,0,2102,261,1,0,0,0,2103,2106,3,264,132,0,2104,2105,5,34,0,0,2105,2107,
3,264,132,0,2106,2104,1,0,0,0,2107,2108,1,0,0,0,2108,2106,1,0,0,0,2108,2109,
1,0,0,0,2109,263,1,0,0,0,2110,2112,3,910,455,0,2111,2113,3,266,133,0,2112,
2111,1,0,0,0,2112,2113,1,0,0,0,2113,265,1,0,0,0,2114,2115,5,71,0,0,2115,
2116,3,1302,651,0,2116,267,1,0,0,0,2117,2118,5,147,0,0,2118,2119,3,832,416,
0,2119,269,1,0,0,0,2120,2121,5,145,0,0,2121,2124,3,272,136,0,2122,2124,3,
276,138,0,2123,2120,1,0,0,0,2123,2122,1,0,0,0,2124,271,1,0,0,0,2125,2130,
3,274,137,0,2126,2127,5,34,0,0,2127,2129,3,274,137,0,2128,2126,1,0,0,0,2129,
2132,1,0,0,0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,273,1,0,0,0,2132,2130,
1,0,0,0,2133,2134,3,86,43,0,2134,2135,3,218,109,0,2135,275,1,0,0,0,2136,
2137,5,145,0,0,2137,2143,3,54,27,0,2138,2139,5,145,0,0,2139,2140,3,86,43,
0,2140,2141,3,54,27,0,2141,2143,1,0,0,0,2142,2136,1,0,0,0,2142,2138,1,0,
0,0,2143,277,1,0,0,0,2144,2146,5,203,0,0,2145,2144,1,0,0,0,2145,2146,1,0,
0,0,2146,2147,1,0,0,0,2147,2148,5,88,0,0,2148,2149,3,280,140,0,2149,279,
1,0,0,0,2150,2153,3,282,141,0,2151,2153,3,288,144,0,2152,2150,1,0,0,0,2152,
2151,1,0,0,0,2153,281,1,0,0,0,2154,2156,3,284,142,0,2155,2154,1,0,0,0,2155,
2156,1,0,0,0,2156,2157,1,0,0,0,2157,2158,3,48,24,0,2158,283,1,0,0,0,2159,
2161,5,44,0,0,2160,2162,3,286,143,0,2161,2160,1,0,0,0,2161,2162,1,0,0,0,
2162,2163,1,0,0,0,2163,2164,5,45,0,0,2164,285,1,0,0,0,2165,2168,3,298,149,
0,2166,2167,5,34,0,0,2167,2169,3,298,149,0,2168,2166,1,0,0,0,2169,2170,1,
0,0,0,2170,2168,1,0,0,0,2170,2171,1,0,0,0,2171,287,1,0,0,0,2172,2173,3,822,
411,0,2173,2175,5,44,0,0,2174,2176,3,290,145,0,2175,2174,1,0,0,0,2175,2176,
1,0,0,0,2176,2177,1,0,0,0,2177,2178,5,45,0,0,2178,289,1,0,0,0,2179,2182,
3,292,146,0,2180,2181,5,34,0,0,2181,2183,3,292,146,0,2182,2180,1,0,0,0,2183,
2184,1,0,0,0,2184,2182,1,0,0,0,2184,2185,1,0,0,0,2185,291,1,0,0,0,2186,2187,
3,894,447,0,2187,293,1,0,0,0,2188,2189,5,265,0,0,2189,2190,3,86,43,0,2190,
295,1,0,0,0,2191,2192,5,75,0,0,2192,2193,3,792,396,0,2193,297,1,0,0,0,2194,
2195,3,1296,648,0,2195,299,1,0,0,0,2196,2197,3,298,149,0,2197,301,1,0,0,
0,2198,2199,3,298,149,0,2199,303,1,0,0,0,2200,2201,3,1276,638,0,2201,305,
1,0,0,0,2202,2204,3,314,157,0,2203,2205,3,308,154,0,2204,2203,1,0,0,0,2204,
2205,1,0,0,0,2205,307,1,0,0,0,2206,2207,5,276,0,0,2207,2208,3,310,155,0,
2208,309,1,0,0,0,2209,2212,3,312,156,0,2210,2211,5,34,0,0,2211,2213,3,312,
156,0,2212,2210,1,0,0,0,2213,2214,1,0,0,0,2214,2212,1,0,0,0,2214,2215,1,
0,0,0,2215,311,1,0,0,0,2216,2217,3,300,150,0,2217,2218,3,302,151,0,2218,
313,1,0,0,0,2219,2221,3,316,158,0,2220,2219,1,0,0,0,2220,2221,1,0,0,0,2221,
2222,1,0,0,0,2222,2224,3,326,163,0,2223,2225,3,332,166,0,2224,2223,1,0,0,
0,2224,2225,1,0,0,0,2225,2227,1,0,0,0,2226,2228,3,334,167,0,2227,2226,1,
0,0,0,2227,2228,1,0,0,0,2228,315,1,0,0,0,2229,2232,3,318,159,0,2230,2232,
3,320,160,0,2231,2229,1,0,0,0,2231,2230,1,0,0,0,2232,317,1,0,0,0,2233,2234,
5,347,0,0,2234,2235,3,322,161,0,2235,319,1,0,0,0,2236,2237,5,320,0,0,2237,
2238,3,324,162,0,2238,321,1,0,0,0,2239,2241,5,324,0,0,2240,2242,5,317,0,
0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2245,1,0,0,0,2243,2245,5,325,
0,0,2244,2239,1,0,0,0,2244,2243,1,0,0,0,2245,323,1,0,0,0,2246,2248,3,1324,
662,0,2247,2249,5,317,0,0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,2249,2252,
1,0,0,0,2250,2252,3,1326,663,0,2251,2246,1,0,0,0,2251,2250,1,0,0,0,2252,
325,1,0,0,0,2253,2258,3,328,164,0,2254,2255,5,34,0,0,2255,2257,3,328,164,
0,2256,2254,1,0,0,0,2257,2260,1,0,0,0,2258,2256,1,0,0,0,2258,2259,1,0,0,
0,2259,327,1,0,0,0,2260,2258,1,0,0,0,2261,2263,3,330,165,0,2262,2261,1,0,
0,0,2262,2263,1,0,0,0,2263,2265,1,0,0,0,2264,2266,3,336,168,0,2265,2264,
1,0,0,0,2265,2266,1,0,0,0,2266,2268,1,0,0,0,2267,2269,3,366,183,0,2268,2267,
1,0,0,0,2269,2270,1,0,0,0,2270,2268,1,0,0,0,2270,2271,1,0,0,0,2271,329,1,
0,0,0,2272,2273,3,1288,644,0,2273,2274,5,36,0,0,2274,331,1,0,0,0,2275,2276,
5,329,0,0,2276,2277,3,336,168,0,2277,333,1,0,0,0,2278,2279,5,272,0,0,2279,
2280,3,832,416,0,2280,335,1,0,0,0,2281,2284,3,338,169,0,2282,2284,3,342,
171,0,2283,2281,1,0,0,0,2283,2282,1,0,0,0,2284,337,1,0,0,0,2285,2287,3,340,
170,0,2286,2288,3,346,173,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,339,
1,0,0,0,2289,2290,7,7,0,0,2290,341,1,0,0,0,2291,2295,3,344,172,0,2292,2295,
3,348,174,0,2293,2295,3,352,176,0,2294,2291,1,0,0,0,2294,2292,1,0,0,0,2294,
2293,1,0,0,0,2295,343,1,0,0,0,2296,2298,5,66,0,0,2297,2299,3,340,170,0,2298,
2297,1,0,0,0,2298,2299,1,0,0,0,2299,2301,1,0,0,0,2300,2302,3,346,173,0,2301,
2300,1,0,0,0,2301,2302,1,0,0,0,2302,345,1,0,0,0,2303,2304,7,8,0,0,2304,347,
1,0,0,0,2305,2307,5,69,0,0,2306,2308,3,350,175,0,2307,2306,1,0,0,0,2307,
2308,1,0,0,0,2308,2310,1,0,0,0,2309,2311,3,340,170,0,2310,2309,1,0,0,0,2310,
2311,1,0,0,0,2311,2313,1,0,0,0,2312,2314,3,346,173,0,2313,2312,1,0,0,0,2313,
2314,1,0,0,0,2314,349,1,0,0,0,2315,2316,3,888,444,0,2316,351,1,0,0,0,2317,
2322,3,354,177,0,2318,2322,3,356,178,0,2319,2322,3,358,179,0,2320,2322,3,
360,180,0,2321,2317,1,0,0,0,2321,2318,1,0,0,0,2321,2319,1,0,0,0,2321,2320,
1,0,0,0,2322,353,1,0,0,0,2323,2324,5,66,0,0,2324,2326,5,348,0,0,2325,2327,
3,340,170,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2329,1,0,0,0,2328,2330,
3,346,173,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,355,1,0,0,0,2331,2332,
5,69,0,0,2332,2334,5,348,0,0,2333,2335,3,340,170,0,2334,2333,1,0,0,0,2334,
2335,1,0,0,0,2335,2337,1,0,0,0,2336,2338,3,346,173,0,2337,2336,1,0,0,0,2337,
2338,1,0,0,0,2338,357,1,0,0,0,2339,2340,5,348,0,0,2340,2342,3,350,175,0,
2341,2343,3,340,170,0,2342,2341,1,0,0,0,2342,2343,1,0,0,0,2343,2345,1,0,
0,0,2344,2346,3,346,173,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,359,1,
0,0,0,2347,2348,5,348,0,0,2348,2350,3,364,182,0,2349,2351,3,340,170,0,2350,
2349,1,0,0,0,2350,2351,1,0,0,0,2351,2353,1,0,0,0,2352,2354,3,346,173,0,2353,
2352,1,0,0,0,2353,2354,1,0,0,0,2354,2355,1,0,0,0,2355,2356,3,362,181,0,2356,
361,1,0,0,0,2357,2358,7,9,0,0,2358,363,1,0,0,0,2359,2360,3,888,444,0,2360,
365,1,0,0,0,2361,2365,3,372,186,0,2362,2365,3,368,184,0,2363,2365,3,370,
185,0,2364,2361,1,0,0,0,2364,2362,1,0,0,0,2364,2363,1,0,0,0,2365,367,1,0,
0,0,2366,2371,3,372,186,0,2367,2368,5,62,0,0,2368,2370,3,372,186,0,2369,
2367,1,0,0,0,2370,2373,1,0,0,0,2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,
369,1,0,0,0,2373,2371,1,0,0,0,2374,2379,3,372,186,0,2375,2376,5,52,0,0,2376,
2378,3,372,186,0,2377,2375,1,0,0,0,2378,2381,1,0,0,0,2379,2377,1,0,0,0,2379,
2380,1,0,0,0,2380,371,1,0,0,0,2381,2379,1,0,0,0,2382,2386,3,374,187,0,2383,
2385,3,374,187,0,2384,2383,1,0,0,0,2385,2388,1,0,0,0,2386,2384,1,0,0,0,2386,
2387,1,0,0,0,2387,373,1,0,0,0,2388,2386,1,0,0,0,2389,2393,3,380,190,0,2390,
2393,3,376,188,0,2391,2393,3,378,189,0,2392,2389,1,0,0,0,2392,2390,1,0,0,
0,2392,2391,1,0,0,0,2393,375,1,0,0,0,2394,2395,3,380,190,0,2395,2396,3,462,
231,0,2396,377,1,0,0,0,2397,2398,3,380,190,0,2398,2399,5,46,0,0,2399,379,
1,0,0,0,2400,2404,3,382,191,0,2401,2404,3,422,211,0,2402,2404,3,472,236,
0,2403,2400,1,0,0,0,2403,2401,1,0,0,0,2403,2402,1,0,0,0,2404,381,1,0,0,0,
2405,2408,3,384,192,0,2406,2408,3,402,201,0,2407,2405,1,0,0,0,2407,2406,
1,0,0,0,2408,383,1,0,0,0,2409,2410,5,44,0,0,2410,2411,3,386,193,0,2411,2412,
5,45,0,0,2412,385,1,0,0,0,2413,2415,3,388,194,0,2414,2413,1,0,0,0,2414,2415,
1,0,0,0,2415,2417,1,0,0,0,2416,2418,3,390,195,0,2417,2416,1,0,0,0,2417,2418,
1,0,0,0,2418,2420,1,0,0,0,2419,2421,3,392,196,0,2420,2419,1,0,0,0,2420,2421,
1,0,0,0,2421,387,1,0,0,0,2422,2424,5,352,0,0,2423,2422,1,0,0,0,2423,2424,
1,0,0,0,2424,2425,1,0,0,0,2425,2426,3,1286,643,0,2426,389,1,0,0,0,2427,2428,
5,171,0,0,2428,2432,3,448,224,0,2429,2430,5,32,0,0,2430,2432,3,448,224,0,
2431,2427,1,0,0,0,2431,2429,1,0,0,0,2432,391,1,0,0,0,2433,2436,3,394,197,
0,2434,2436,3,396,198,0,2435,2433,1,0,0,0,2435,2434,1,0,0,0,2436,393,1,0,
0,0,2437,2438,5,272,0,0,2438,2439,3,832,416,0,2439,395,1,0,0,0,2440,2441,
5,40,0,0,2441,2442,3,398,199,0,2442,2443,5,41,0,0,2443,397,1,0,0,0,2444,
2447,3,400,200,0,2445,2446,5,34,0,0,2446,2448,3,400,200,0,2447,2445,1,0,
0,0,2448,2449,1,0,0,0,2449,2447,1,0,0,0,2449,2450,1,0,0,0,2450,399,1,0,0,
0,2451,2452,3,1272,636,0,2452,2453,5,32,0,0,2453,2454,3,894,447,0,2454,401,
1,0,0,0,2455,2458,3,404,202,0,2456,2458,3,420,210,0,2457,2455,1,0,0,0,2457,
2456,1,0,0,0,2458,403,1,0,0,0,2459,2467,3,406,203,0,2460,2467,3,408,204,
0,2461,2467,3,410,205,0,2462,2467,3,412,206,0,2463,2467,3,414,207,0,2464,
2467,3,416,208,0,2465,2467,3,418,209,0,2466,2459,1,0,0,0,2466,2460,1,0,0,
0,2466,2461,1,0,0,0,2466,2462,1,0,0,0,2466,2463,1,0,0,0,2466,2464,1,0,0,
0,2466,2465,1,0,0,0,2467,405,1,0,0,0,2468,2469,5,3,0,0,2469,2470,3,386,193,
0,2470,2471,5,11,0,0,2471,407,1,0,0,0,2472,2473,5,19,0,0,2473,2474,3,386,
193,0,2474,2475,5,12,0,0,2475,409,1,0,0,0,2476,2477,5,8,0,0,2477,2478,3,
386,193,0,2478,2479,5,13,0,0,2479,411,1,0,0,0,2480,2481,5,4,0,0,2481,2482,
3,386,193,0,2482,2483,5,12,0,0,2483,413,1,0,0,0,2484,2485,5,19,0,0,2485,
2486,3,386,193,0,2486,2487,5,13,0,0,2487,415,1,0,0,0,2488,2489,5,3,0,0,2489,
2490,3,386,193,0,2490,2491,5,13,0,0,2491,417,1,0,0,0,2492,2493,5,8,0,0,2493,
2494,3,386,193,0,2494,2495,5,11,0,0,2495,419,1,0,0,0,2496,2497,7,10,0,0,
2497,421,1,0,0,0,2498,2500,5,44,0,0,2499,2501,3,424,212,0,2500,2499,1,0,
0,0,2500,2501,1,0,0,0,2501,2503,1,0,0,0,2502,2504,3,338,169,0,2503,2502,
1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2507,3,366,183,0,2506,2508,
3,426,213,0,2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,2509,1,0,0,0,2509,2510,
5,45,0,0,2510,423,1,0,0,0,2511,2512,3,1290,645,0,2512,2513,5,36,0,0,2513,
425,1,0,0,0,2514,2515,5,272,0,0,2515,2516,3,832,416,0,2516,427,1,0,0,0,2517,
2518,3,430,215,0,2518,429,1,0,0,0,2519,2524,3,432,216,0,2520,2521,5,34,0,
0,2521,2523,3,432,216,0,2522,2520,1,0,0,0,2523,2526,1,0,0,0,2524,2522,1,
0,0,0,2524,2525,1,0,0,0,2525,431,1,0,0,0,2526,2524,1,0,0,0,2527,2533,3,434,
217,0,2528,2529,3,436,218,0,2529,2530,3,434,217,0,2530,2532,1,0,0,0,2531,
2528,1,0,0,0,2532,2535,1,0,0,0,2533,2531,1,0,0,0,2533,2534,1,0,0,0,2534,
433,1,0,0,0,2535,2533,1,0,0,0,2536,2538,5,44,0,0,2537,2539,3,444,222,0,2538,
2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,1,0,0,0,2540,2541,5,45,0,0,2541,
435,1,0,0,0,2542,2546,3,438,219,0,2543,2546,3,440,220,0,2544,2546,3,442,
221,0,2545,2542,1,0,0,0,2545,2543,1,0,0,0,2545,2544,1,0,0,0,2546,437,1,0,
0,0,2547,2548,5,3,0,0,2548,2549,3,444,222,0,2549,2550,5,11,0,0,2550,439,
1,0,0,0,2551,2552,5,8,0,0,2552,2553,3,444,222,0,2553,2554,5,13,0,0,2554,
441,1,0,0,0,2555,2556,5,19,0,0,2556,2557,3,444,222,0,2557,2558,5,12,0,0,
2558,443,1,0,0,0,2559,2561,3,388,194,0,2560,2562,3,446,223,0,2561,2560,1,
0,0,0,2561,2562,1,0,0,0,2562,2568,1,0,0,0,2563,2565,3,388,194,0,2564,2563,
1,0,0,0,2564,2565,1,0,0,0,2565,2566,1,0,0,0,2566,2568,3,446,223,0,2567,2559,
1,0,0,0,2567,2564,1,0,0,0,2568,445,1,0,0,0,2569,2571,3,168,84,0,2570,2572,
3,396,198,0,2571,2570,1,0,0,0,2571,2572,1,0,0,0,2572,2578,1,0,0,0,2573,2575,
3,168,84,0,2574,2573,1,0,0,0,2574,2575,1,0,0,0,2575,2576,1,0,0,0,2576,2578,
3,396,198,0,2577,2569,1,0,0,0,2577,2574,1,0,0,0,2578,447,1,0,0,0,2579,2584,
3,450,225,0,2580,2581,5,52,0,0,2581,2583,3,450,225,0,2582,2580,1,0,0,0,2583,
2586,1,0,0,0,2584,2582,1,0,0,0,2584,2585,1,0,0,0,2585,449,1,0,0,0,2586,2584,
1,0,0,0,2587,2592,3,452,226,0,2588,2589,5,29,0,0,2589,2591,3,452,226,0,2590,
2588,1,0,0,0,2591,2594,1,0,0,0,2592,2590,1,0,0,0,2592,2593,1,0,0,0,2593,
451,1,0,0,0,2594,2592,1,0,0,0,2595,2598,3,456,228,0,2596,2598,3,454,227,
0,2597,2595,1,0,0,0,2597,2596,1,0,0,0,2598,453,1,0,0,0,2599,2600,5,37,0,
0,2600,2601,3,456,228,0,2601,455,1,0,0,0,2602,2606,3,1270,635,0,2603,2606,
3,458,229,0,2604,2606,3,460,230,0,2605,2602,1,0,0,0,2605,2603,1,0,0,0,2605,
2604,1,0,0,0,2606,457,1,0,0,0,2607,2608,5,53,0,0,2608,459,1,0,0,0,2609,2610,
5,44,0,0,2610,2611,3,448,224,0,2611,2612,5,45,0,0,2612,461,1,0,0,0,2613,
2618,5,30,0,0,2614,2618,5,26,0,0,2615,2618,3,464,232,0,2616,2618,3,466,233,
0,2617,2613,1,0,0,0,2617,2614,1,0,0,0,2617,2615,1,0,0,0,2617,2616,1,0,0,
0,2618,463,1,0,0,0,2619,2620,5,40,0,0,2620,2621,5,383,0,0,2621,2622,5,41,
0,0,2622,465,1,0,0,0,2623,2625,5,40,0,0,2624,2626,3,468,234,0,2625,2624,
1,0,0,0,2625,2626,1,0,0,0,2626,2627,1,0,0,0,2627,2629,5,34,0,0,2628,2630,
3,470,235,0,2629,2628,1,0,0,0,2629,2630,1,0,0,0,2630,2631,1,0,0,0,2631,2632,
5,41,0,0,2632,467,1,0,0,0,2633,2634,5,383,0,0,2634,469,1,0,0,0,2635,2636,
5,383,0,0,2636,471,1,0,0,0,2637,2645,3,474,237,0,2638,2645,3,476,238,0,2639,
2645,3,478,239,0,2640,2645,3,480,240,0,2641,2645,3,482,241,0,2642,2645,3,
484,242,0,2643,2645,3,486,243,0,2644,2637,1,0,0,0,2644,2638,1,0,0,0,2644,
2639,1,0,0,0,2644,2640,1,0,0,0,2644,2641,1,0,0,0,2644,2642,1,0,0,0,2644,
2643,1,0,0,0,2645,473,1,0,0,0,2646,2647,5,6,0,0,2647,2648,3,488,244,0,2648,
2649,5,15,0,0,2649,475,1,0,0,0,2650,2651,5,21,0,0,2651,2652,3,488,244,0,
2652,2653,5,17,0,0,2653,477,1,0,0,0,2654,2655,5,9,0,0,2655,2656,3,488,244,
0,2656,2657,5,16,0,0,2657,479,1,0,0,0,2658,2659,5,7,0,0,2659,2660,3,488,
244,0,2660,2661,5,17,0,0,2661,481,1,0,0,0,2662,2663,5,21,0,0,2663,2664,3,
488,244,0,2664,2665,5,18,0,0,2665,483,1,0,0,0,2666,2667,5,6,0,0,2667,2668,
3,488,244,0,2668,2669,5,16,0,0,2669,485,1,0,0,0,2670,2671,5,9,0,0,2671,2672,
3,488,244,0,2672,2673,5,15,0,0,2673,487,1,0,0,0,2674,2678,3,494,247,0,2675,
2678,3,490,245,0,2676,2678,3,492,246,0,2677,2674,1,0,0,0,2677,2675,1,0,0,
0,2677,2676,1,0,0,0,2678,489,1,0,0,0,2679,2684,3,494,247,0,2680,2681,5,52,
0,0,2681,2683,3,494,247,0,2682,2680,1,0,0,0,2683,2686,1,0,0,0,2684,2682,
1,0,0,0,2684,2685,1,0,0,0,2685,491,1,0,0,0,2686,2684,1,0,0,0,2687,2692,3,
494,247,0,2688,2689,5,62,0,0,2689,2691,3,494,247,0,2690,2688,1,0,0,0,2691,
2694,1,0,0,0,2692,2690,1,0,0,0,2692,2693,1,0,0,0,2693,493,1,0,0,0,2694,2692,
1,0,0,0,2695,2699,3,496,248,0,2696,2698,3,496,248,0,2697,2696,1,0,0,0,2698,
2701,1,0,0,0,2699,2697,1,0,0,0,2699,2700,1,0,0,0,2700,495,1,0,0,0,2701,2699,
1,0,0,0,2702,2707,3,498,249,0,2703,2704,5,29,0,0,2704,2706,3,498,249,0,2705,
2703,1,0,0,0,2706,2709,1,0,0,0,2707,2705,1,0,0,0,2707,2708,1,0,0,0,2708,
497,1,0,0,0,2709,2707,1,0,0,0,2710,2714,3,504,252,0,2711,2714,3,500,250,
0,2712,2714,3,502,251,0,2713,2710,1,0,0,0,2713,2711,1,0,0,0,2713,2712,1,
0,0,0,2714,499,1,0,0,0,2715,2716,3,504,252,0,2716,2717,3,462,231,0,2717,
501,1,0,0,0,2718,2719,3,504,252,0,2719,2720,5,46,0,0,2720,503,1,0,0,0,2721,
2724,3,506,253,0,2722,2724,3,522,261,0,2723,2721,1,0,0,0,2723,2722,1,0,0,
0,2724,505,1,0,0,0,2725,2733,3,508,254,0,2726,2733,3,510,255,0,2727,2733,
3,512,256,0,2728,2733,3,514,257,0,2729,2733,3,516,258,0,2730,2733,3,518,
259,0,2731,2733,3,520,260,0,2732,2725,1,0,0,0,2732,2726,1,0,0,0,2732,2727,
1,0,0,0,2732,2728,1,0,0,0,2732,2729,1,0,0,0,2732,2730,1,0,0,0,2732,2731,
1,0,0,0,2733,507,1,0,0,0,2734,2735,5,38,0,0,2735,2736,3,522,261,0,2736,509,
1,0,0,0,2737,2738,5,50,0,0,2738,2739,3,522,261,0,2739,511,1,0,0,0,2740,2741,
3,522,261,0,2741,2742,5,39,0,0,2742,513,1,0,0,0,2743,2744,5,2,0,0,2744,2745,
3,522,261,0,2745,515,1,0,0,0,2746,2747,5,50,0,0,2747,2748,3,522,261,0,2748,
2749,5,39,0,0,2749,517,1,0,0,0,2750,2751,5,38,0,0,2751,2752,3,522,261,0,
2752,2753,5,39,0,0,2753,519,1,0,0,0,2754,2755,5,27,0,0,2755,2756,3,522,261,
0,2756,521,1,0,0,0,2757,2760,3,526,263,0,2758,2760,3,524,262,0,2759,2757,
1,0,0,0,2759,2758,1,0,0,0,2760,523,1,0,0,0,2761,2762,5,37,0,0,2762,2763,
3,526,263,0,2763,525,1,0,0,0,2764,2770,3,1270,635,0,2765,2766,5,44,0,0,2766,
2767,3,488,244,0,2767,2768,5,45,0,0,2768,2770,1,0,0,0,2769,2764,1,0,0,0,
2769,2765,1,0,0,0,2770,527,1,0,0,0,2771,2772,5,272,0,0,2772,2773,3,832,416,
0,2773,529,1,0,0,0,2774,2775,5,276,0,0,2775,2776,3,532,266,0,2776,531,1,
0,0,0,2777,2780,3,534,267,0,2778,2779,5,34,0,0,2779,2781,3,534,267,0,2780,
2778,1,0,0,0,2781,2782,1,0,0,0,2782,2780,1,0,0,0,2782,2783,1,0,0,0,2783,
533,1,0,0,0,2784,2786,3,536,268,0,2785,2787,3,538,269,0,2786,2785,1,0,0,
0,2786,2787,1,0,0,0,2787,535,1,0,0,0,2788,2789,3,1274,637,0,2789,537,1,0,
0,0,2790,2791,5,71,0,0,2791,2792,3,1296,648,0,2792,539,1,0,0,0,2793,2794,
5,146,0,0,2794,2795,5,85,0,0,2795,2796,3,542,271,0,2796,541,1,0,0,0,2797,
2800,3,544,272,0,2798,2799,5,34,0,0,2799,2801,3,544,272,0,2800,2798,1,0,
0,0,2801,2802,1,0,0,0,2802,2800,1,0,0,0,2802,2803,1,0,0,0,2803,2806,1,0,
0,0,2804,2806,3,546,273,0,2805,2797,1,0,0,0,2805,2804,1,0,0,0,2806,543,1,
0,0,0,2807,2808,3,298,149,0,2808,545,1,0,0,0,2809,2810,5,44,0,0,2810,2811,
5,45,0,0,2811,547,1,0,0,0,2812,2813,5,205,0,0,2813,2814,5,85,0,0,2814,2815,
3,564,282,0,2815,549,1,0,0,0,2816,2817,5,104,0,0,2817,2818,5,44,0,0,2818,
2819,5,30,0,0,2819,2823,5,45,0,0,2820,2823,3,552,276,0,2821,2823,3,558,279,
0,2822,2816,1,0,0,0,2822,2820,1,0,0,0,2822,2821,1,0,0,0,2823,551,1,0,0,0,
2824,2825,3,554,277,0,2825,2827,5,44,0,0,2826,2828,3,556,278,0,2827,2826,
1,0,0,0,2827,2828,1,0,0,0,2828,2829,1,0,0,0,2829,2830,3,894,447,0,2830,2831,
5,45,0,0,2831,553,1,0,0,0,2832,2833,7,11,0,0,2833,555,1,0,0,0,2834,2835,
7,12,0,0,2835,557,1,0,0,0,2836,2837,7,13,0,0,2837,559,1,0,0,0,2838,2840,
3,556,278,0,2839,2838,1,0,0,0,2839,2840,1,0,0,0,2840,2841,1,0,0,0,2841,2842,
3,928,464,0,2842,561,1,0,0,0,2843,2844,3,928,464,0,2844,563,1,0,0,0,2845,
2848,3,566,283,0,2846,2847,5,34,0,0,2847,2849,3,566,283,0,2848,2846,1,0,
0,0,2849,2850,1,0,0,0,2850,2848,1,0,0,0,2850,2851,1,0,0,0,2851,565,1,0,0,
0,2852,2854,3,568,284,0,2853,2855,3,570,285,0,2854,2853,1,0,0,0,2854,2855,
1,0,0,0,2855,2857,1,0,0,0,2856,2858,3,572,286,0,2857,2856,1,0,0,0,2857,2858,
1,0,0,0,2858,567,1,0,0,0,2859,2860,3,910,455,0,2860,569,1,0,0,0,2861,2862,
7,14,0,0,2862,571,1,0,0,0,2863,2864,5,197,0,0,2864,2868,5,326,0,0,2865,2866,
5,197,0,0,2866,2868,5,333,0,0,2867,2863,1,0,0,0,2867,2865,1,0,0,0,2868,573,
1,0,0,0,2869,2870,5,175,0,0,2870,2871,3,888,444,0,2871,575,1,0,0,0,2872,
2873,3,578,289,0,2873,2874,3,888,444,0,2874,577,1,0,0,0,2875,2876,7,15,0,
0,2876,579,1,0,0,0,2877,2879,5,343,0,0,2878,2877,1,0,0,0,2878,2879,1,0,0,
0,2879,2880,1,0,0,0,2880,2881,5,327,0,0,2881,2882,5,357,0,0,2882,2883,3,
582,291,0,2883,581,1,0,0,0,2884,2885,5,40,0,0,2885,2886,3,584,292,0,2886,
2887,5,41,0,0,2887,583,1,0,0,0,2888,2889,3,586,293,0,2889,585,1,0,0,0,2890,
2895,3,588,294,0,2891,2892,5,34,0,0,2892,2894,3,588,294,0,2893,2891,1,0,
0,0,2894,2897,1,0,0,0,2895,2893,1,0,0,0,2895,2896,1,0,0,0,2896,587,1,0,0,
0,2897,2895,1,0,0,0,2898,2901,3,590,295,0,2899,2901,3,604,302,0,2900,2898,
1,0,0,0,2900,2899,1,0,0,0,2901,589,1,0,0,0,2902,2907,3,592,296,0,2903,2904,
3,1328,664,0,2904,2905,3,594,297,0,2905,2907,1,0,0,0,2906,2902,1,0,0,0,2906,
2903,1,0,0,0,2907,591,1,0,0,0,2908,2909,5,44,0,0,2909,2910,3,596,298,0,2910,
2911,3,598,299,0,2911,2912,5,45,0,0,2912,593,1,0,0,0,2913,2915,5,357,0,0,
2914,2913,1,0,0,0,2914,2915,1,0,0,0,2915,2916,1,0,0,0,2916,2918,3,596,298,
0,2917,2919,3,598,299,0,2918,2917,1,0,0,0,2918,2919,1,0,0,0,2919,2922,1,
0,0,0,2920,2922,3,598,299,0,2921,2914,1,0,0,0,2921,2920,1,0,0,0,2922,595,
1,0,0,0,2923,2924,3,1262,631,0,2924,597,1,0,0,0,2925,2931,3,600,300,0,2926,
2931,3,602,301,0,2927,2928,3,600,300,0,2928,2929,3,602,301,0,2929,2931,1,
0,0,0,2930,2925,1,0,0,0,2930,2926,1,0,0,0,2930,2927,1,0,0,0,2931,599,1,0,
0,0,2932,2933,3,670,335,0,2933,601,1,0,0,0,2934,2935,3,672,336,0,2935,603,
1,0,0,0,2936,2944,3,606,303,0,2937,2939,3,648,324,0,2938,2937,1,0,0,0,2938,
2939,1,0,0,0,2939,2940,1,0,0,0,2940,2941,3,1324,662,0,2941,2942,3,608,304,
0,2942,2944,1,0,0,0,2943,2936,1,0,0,0,2943,2938,1,0,0,0,2944,605,1,0,0,0,
2945,2948,3,618,309,0,2946,2948,3,634,317,0,2947,2945,1,0,0,0,2947,2946,
1,0,0,0,2948,607,1,0,0,0,2949,2951,5,357,0,0,2950,2949,1,0,0,0,2950,2951,
1,0,0,0,2951,2952,1,0,0,0,2952,2953,3,610,305,0,2953,2954,3,612,306,0,2954,
2955,3,650,325,0,2955,2960,1,0,0,0,2956,2957,3,612,306,0,2957,2958,3,650,
325,0,2958,2960,1,0,0,0,2959,2950,1,0,0,0,2959,2956,1,0,0,0,2960,609,1,0,
0,0,2961,2962,3,1262,631,0,2962,611,1,0,0,0,2963,2969,3,614,307,0,2964,2969,
3,616,308,0,2965,2966,3,614,307,0,2966,2967,3,616,308,0,2967,2969,1,0,0,
0,2968,2963,1,0,0,0,2968,2964,1,0,0,0,2968,2965,1,0,0,0,2969,613,1,0,0,0,
2970,2971,3,670,335,0,2971,615,1,0,0,0,2972,2973,3,672,336,0,2973,617,1,
0,0,0,2974,2978,3,620,310,0,2975,2978,3,622,311,0,2976,2978,3,624,312,0,
2977,2974,1,0,0,0,2977,2975,1,0,0,0,2977,2976,1,0,0,0,2978,619,1,0,0,0,2979,
2980,3,644,322,0,2980,2981,3,626,313,0,2981,2982,3,646,323,0,2982,621,1,
0,0,0,2983,2984,3,646,323,0,2984,2985,3,628,314,0,2985,2986,3,644,322,0,
2986,623,1,0,0,0,2987,2988,3,644,322,0,2988,2989,3,630,315,0,2989,2990,3,
646,323,0,2990,625,1,0,0,0,2991,2992,5,8,0,0,2992,2993,3,632,316,0,2993,
2994,5,13,0,0,2994,627,1,0,0,0,2995,2996,5,3,0,0,2996,2997,3,632,316,0,2997,
2998,5,11,0,0,2998,629,1,0,0,0,2999,3000,5,19,0,0,3000,3001,3,632,316,0,
3001,3002,5,12,0,0,3002,631,1,0,0,0,3003,3004,3,610,305,0,3004,3005,3,612,
306,0,3005,633,1,0,0,0,3006,3010,3,636,318,0,3007,3010,3,638,319,0,3008,
3010,3,640,320,0,3009,3006,1,0,0,0,3009,3007,1,0,0,0,3009,3008,1,0,0,0,3010,
635,1,0,0,0,3011,3012,3,644,322,0,3012,3013,5,10,0,0,3013,3014,3,646,323,
0,3014,637,1,0,0,0,3015,3016,3,646,323,0,3016,3017,5,1,0,0,3017,3018,3,644,
322,0,3018,639,1,0,0,0,3019,3020,3,644,322,0,3020,3021,5,50,0,0,3021,3022,
3,646,323,0,3022,641,1,0,0,0,3023,3026,3,644,322,0,3024,3026,3,646,323,0,
3025,3023,1,0,0,0,3025,3024,1,0,0,0,3026,643,1,0,0,0,3027,3028,5,44,0,0,
3028,3029,3,666,333,0,3029,3030,5,45,0,0,3030,3037,1,0,0,0,3031,3033,5,44,
0,0,3032,3034,3,598,299,0,3033,3032,1,0,0,0,3033,3034,1,0,0,0,3034,3035,
1,0,0,0,3035,3037,5,45,0,0,3036,3027,1,0,0,0,3036,3031,1,0,0,0,3037,645,
1,0,0,0,3038,3039,5,44,0,0,3039,3040,3,668,334,0,3040,3041,5,45,0,0,3041,
3048,1,0,0,0,3042,3044,5,44,0,0,3043,3045,3,598,299,0,3044,3043,1,0,0,0,
3044,3045,1,0,0,0,3045,3046,1,0,0,0,3046,3048,5,45,0,0,3047,3038,1,0,0,0,
3047,3042,1,0,0,0,3048,647,1,0,0,0,3049,3050,7,16,0,0,3050,649,1,0,0,0,3051,
3052,5,318,0,0,3052,3053,3,652,326,0,3053,651,1,0,0,0,3054,3059,3,654,327,
0,3055,3059,3,656,328,0,3056,3059,3,658,329,0,3057,3059,3,634,317,0,3058,
3054,1,0,0,0,3058,3055,1,0,0,0,3058,3056,1,0,0,0,3058,3057,1,0,0,0,3059,
653,1,0,0,0,3060,3061,5,44,0,0,3061,3062,3,666,333,0,3062,3063,3,660,330,
0,3063,3064,3,668,334,0,3064,3065,5,45,0,0,3065,655,1,0,0,0,3066,3067,5,
44,0,0,3067,3068,3,668,334,0,3068,3069,3,662,331,0,3069,3070,3,666,333,0,
3070,3071,5,45,0,0,3071,657,1,0,0,0,3072,3073,5,44,0,0,3073,3074,3,666,333,
0,3074,3075,3,664,332,0,3075,3076,3,668,334,0,3076,3077,5,45,0,0,3077,659,
1,0,0,0,3078,3079,7,17,0,0,3079,661,1,0,0,0,3080,3081,5,1,0,0,3081,663,1,
0,0,0,3082,3083,7,18,0,0,3083,665,1,0,0,0,3084,3085,3,1262,631,0,3085,667,
1,0,0,0,3086,3087,3,1262,631,0,3087,669,1,0,0,0,3088,3089,5,330,0,0,3089,
3097,3,1270,635,0,3090,3091,5,332,0,0,3091,3097,3,168,84,0,3092,3093,5,171,
0,0,3093,3097,3,168,84,0,3094,3095,5,32,0,0,3095,3097,3,168,84,0,3096,3088,
1,0,0,0,3096,3090,1,0,0,0,3096,3092,1,0,0,0,3096,3094,1,0,0,0,3097,671,1,
0,0,0,3098,3100,5,40,0,0,3099,3101,3,674,337,0,3100,3099,1,0,0,0,3100,3101,
1,0,0,0,3101,3102,1,0,0,0,3102,3103,5,41,0,0,3103,673,1,0,0,0,3104,3109,
3,676,338,0,3105,3106,5,34,0,0,3106,3108,3,676,338,0,3107,3105,1,0,0,0,3108,
3111,1,0,0,0,3109,3107,1,0,0,0,3109,3110,1,0,0,0,3110,675,1,0,0,0,3111,3109,
1,0,0,0,3112,3114,3,1272,636,0,3113,3115,3,684,342,0,3114,3113,1,0,0,0,3114,
3115,1,0,0,0,3115,3116,1,0,0,0,3116,3117,3,678,339,0,3117,677,1,0,0,0,3118,
3119,3,682,341,0,3119,679,1,0,0,0,3120,3122,5,316,0,0,3121,3120,1,0,0,0,
3121,3122,1,0,0,0,3122,3123,1,0,0,0,3123,3124,5,351,0,0,3124,3125,3,770,
385,0,3125,681,1,0,0,0,3126,3130,3,686,343,0,3127,3130,3,760,380,0,3128,
3130,3,774,387,0,3129,3126,1,0,0,0,3129,3127,1,0,0,0,3129,3128,1,0,0,0,3130,
683,1,0,0,0,3131,3134,5,33,0,0,3132,3134,5,252,0,0,3133,3131,1,0,0,0,3133,
3132,1,0,0,0,3134,685,1,0,0,0,3135,3143,3,688,344,0,3136,3143,3,690,345,
0,3137,3143,3,692,346,0,3138,3143,3,700,350,0,3139,3143,3,720,360,0,3140,
3143,3,738,369,0,3141,3143,3,786,393,0,3142,3135,1,0,0,0,3142,3136,1,0,0,
0,3142,3137,1,0,0,0,3142,3138,1,0,0,0,3142,3139,1,0,0,0,3142,3140,1,0,0,
0,3142,3141,1,0,0,0,3143,687,1,0,0,0,3144,3146,7,19,0,0,3145,3147,3,788,
394,0,3146,3145,1,0,0,0,3146,3147,1,0,0,0,3147,689,1,0,0,0,3148,3153,7,20,
0,0,3149,3150,5,44,0,0,3150,3151,3,696,348,0,3151,3152,5,45,0,0,3152,3154,
1,0,0,0,3153,3149,1,0,0,0,3153,3154,1,0,0,0,3154,3156,1,0,0,0,3155,3157,
3,788,394,0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,3157,691,1,0,0,0,3158,3168,
5,87,0,0,3159,3163,5,44,0,0,3160,3161,3,694,347,0,3161,3162,5,34,0,0,3162,
3164,1,0,0,0,3163,3160,1,0,0,0,3163,3164,1,0,0,0,3164,3165,1,0,0,0,3165,
3166,3,696,348,0,3166,3167,5,45,0,0,3167,3169,1,0,0,0,3168,3159,1,0,0,0,
3168,3169,1,0,0,0,3169,3171,1,0,0,0,3170,3172,3,788,394,0,3171,3170,1,0,
0,0,3171,3172,1,0,0,0,3172,3194,1,0,0,0,3173,3178,5,80,0,0,3174,3175,5,44,
0,0,3175,3176,3,698,349,0,3176,3177,5,45,0,0,3177,3179,1,0,0,0,3178,3174,
1,0,0,0,3178,3179,1,0,0,0,3179,3181,1,0,0,0,3180,3182,3,788,394,0,3181,3180,
1,0,0,0,3181,3182,1,0,0,0,3182,3194,1,0,0,0,3183,3188,5,268,0,0,3184,3185,
5,44,0,0,3185,3186,3,696,348,0,3186,3187,5,45,0,0,3187,3189,1,0,0,0,3188,
3184,1,0,0,0,3188,3189,1,0,0,0,3189,3191,1,0,0,0,3190,3192,3,788,394,0,3191,
3190,1,0,0,0,3191,3192,1,0,0,0,3192,3194,1,0,0,0,3193,3158,1,0,0,0,3193,
3173,1,0,0,0,3193,3183,1,0,0,0,3194,693,1,0,0,0,3195,3196,5,383,0,0,3196,
695,1,0,0,0,3197,3198,5,383,0,0,3198,697,1,0,0,0,3199,3200,5,383,0,0,3200,
699,1,0,0,0,3201,3204,3,702,351,0,3202,3204,3,718,359,0,3203,3201,1,0,0,
0,3203,3202,1,0,0,0,3204,701,1,0,0,0,3205,3208,3,704,352,0,3206,3208,3,712,
356,0,3207,3205,1,0,0,0,3207,3206,1,0,0,0,3208,703,1,0,0,0,3209,3212,3,706,
353,0,3210,3212,3,708,354,0,3211,3209,1,0,0,0,3211,3210,1,0,0,0,3212,705,
1,0,0,0,3213,3215,5,157,0,0,3214,3216,3,788,394,0,3215,3214,1,0,0,0,3215,
3216,1,0,0,0,3216,3260,1,0,0,0,3217,3219,5,159,0,0,3218,3220,3,788,394,0,
3219,3218,1,0,0,0,3219,3220,1,0,0,0,3220,3260,1,0,0,0,3221,3223,5,161,0,
0,3222,3224,3,788,394,0,3223,3222,1,0,0,0,3223,3224,1,0,0,0,3224,3260,1,
0,0,0,3225,3227,5,163,0,0,3226,3228,3,788,394,0,3227,3226,1,0,0,0,3227,3228,
1,0,0,0,3228,3260,1,0,0,0,3229,3231,5,165,0,0,3230,3232,3,788,394,0,3231,
3230,1,0,0,0,3231,3232,1,0,0,0,3232,3260,1,0,0,0,3233,3235,5,167,0,0,3234,
3236,3,788,394,0,3235,3234,1,0,0,0,3235,3236,1,0,0,0,3236,3260,1,0,0,0,3237,
3239,5,237,0,0,3238,3240,3,788,394,0,3239,3238,1,0,0,0,3239,3240,1,0,0,0,
3240,3260,1,0,0,0,3241,3246,5,155,0,0,3242,3243,5,44,0,0,3243,3244,3,714,
357,0,3244,3245,5,45,0,0,3245,3247,1,0,0,0,3246,3242,1,0,0,0,3246,3247,1,
0,0,0,3247,3249,1,0,0,0,3248,3250,3,788,394,0,3249,3248,1,0,0,0,3249,3250,
1,0,0,0,3250,3260,1,0,0,0,3251,3253,5,79,0,0,3252,3254,3,788,394,0,3253,
3252,1,0,0,0,3253,3254,1,0,0,0,3254,3260,1,0,0,0,3255,3257,5,232,0,0,3256,
3255,1,0,0,0,3256,3257,1,0,0,0,3257,3258,1,0,0,0,3258,3260,3,710,355,0,3259,
3213,1,0,0,0,3259,3217,1,0,0,0,3259,3221,1,0,0,0,3259,3225,1,0,0,0,3259,
3229,1,0,0,0,3259,3233,1,0,0,0,3259,3237,1,0,0,0,3259,3241,1,0,0,0,3259,
3251,1,0,0,0,3259,3256,1,0,0,0,3260,707,1,0,0,0,3261,3263,5,255,0,0,3262,
3264,3,788,394,0,3263,3262,1,0,0,0,3263,3264,1,0,0,0,3264,3306,1,0,0,0,3265,
3267,5,256,0,0,3266,3268,3,788,394,0,3267,3266,1,0,0,0,3267,3268,1,0,0,0,
3268,3306,1,0,0,0,3269,3271,5,257,0,0,3270,3272,3,788,394,0,3271,3270,1,
0,0,0,3271,3272,1,0,0,0,3272,3306,1,0,0,0,3273,3275,5,258,0,0,3274,3276,
3,788,394,0,3275,3274,1,0,0,0,3275,3276,1,0,0,0,3276,3306,1,0,0,0,3277,3279,
5,259,0,0,3278,3280,3,788,394,0,3279,3278,1,0,0,0,3279,3280,1,0,0,0,3280,
3306,1,0,0,0,3281,3283,5,260,0,0,3282,3284,3,788,394,0,3283,3282,1,0,0,0,
3283,3284,1,0,0,0,3284,3306,1,0,0,0,3285,3287,5,266,0,0,3286,3288,3,788,
394,0,3287,3286,1,0,0,0,3287,3288,1,0,0,0,3288,3306,1,0,0,0,3289,3294,5,
254,0,0,3290,3291,5,44,0,0,3291,3292,3,714,357,0,3292,3293,5,45,0,0,3293,
3295,1,0,0,0,3294,3290,1,0,0,0,3294,3295,1,0,0,0,3295,3297,1,0,0,0,3296,
3298,3,788,394,0,3297,3296,1,0,0,0,3297,3298,1,0,0,0,3298,3306,1,0,0,0,3299,
3301,5,253,0,0,3300,3302,3,788,394,0,3301,3300,1,0,0,0,3301,3302,1,0,0,0,
3302,3306,1,0,0,0,3303,3304,5,263,0,0,3304,3306,3,710,355,0,3305,3261,1,
0,0,0,3305,3265,1,0,0,0,3305,3269,1,0,0,0,3305,3273,1,0,0,0,3305,3277,1,
0,0,0,3305,3281,1,0,0,0,3305,3285,1,0,0,0,3305,3289,1,0,0,0,3305,3299,1,
0,0,0,3305,3303,1,0,0,0,3306,709,1,0,0,0,3307,3309,5,158,0,0,3308,3310,3,
788,394,0,3309,3308,1,0,0,0,3309,3310,1,0,0,0,3310,3352,1,0,0,0,3311,3313,
5,160,0,0,3312,3314,3,788,394,0,3313,3312,1,0,0,0,3313,3314,1,0,0,0,3314,
3352,1,0,0,0,3315,3317,5,162,0,0,3316,3318,3,788,394,0,3317,3316,1,0,0,0,
3317,3318,1,0,0,0,3318,3352,1,0,0,0,3319,3321,5,164,0,0,3320,3322,3,788,
394,0,3321,3320,1,0,0,0,3321,3322,1,0,0,0,3322,3352,1,0,0,0,3323,3325,5,
166,0,0,3324,3326,3,788,394,0,3325,3324,1,0,0,0,3325,3326,1,0,0,0,3326,3352,
1,0,0,0,3327,3329,5,168,0,0,3328,3330,3,788,394,0,3329,3328,1,0,0,0,3329,
3330,1,0,0,0,3330,3352,1,0,0,0,3331,3332,5,236,0,0,3332,3334,5,156,0,0,3333,
3335,3,788,394,0,3334,3333,1,0,0,0,3334,3335,1,0,0,0,3335,3352,1,0,0,0,3336,
3341,5,156,0,0,3337,3338,5,44,0,0,3338,3339,3,714,357,0,3339,3340,5,45,0,
0,3340,3342,1,0,0,0,3341,3337,1,0,0,0,3341,3342,1,0,0,0,3342,3344,1,0,0,
0,3343,3345,3,788,394,0,3344,3343,1,0,0,0,3344,3345,1,0,0,0,3345,3352,1,
0,0,0,3346,3347,5,78,0,0,3347,3349,5,156,0,0,3348,3350,3,788,394,0,3349,
3348,1,0,0,0,3349,3350,1,0,0,0,3350,3352,1,0,0,0,3351,3307,1,0,0,0,3351,
3311,1,0,0,0,3351,3315,1,0,0,0,3351,3319,1,0,0,0,3351,3323,1,0,0,0,3351,
3327,1,0,0,0,3351,3331,1,0,0,0,3351,3336,1,0,0,0,3351,3346,1,0,0,0,3352,
711,1,0,0,0,3353,3362,7,21,0,0,3354,3355,5,44,0,0,3355,3358,3,714,357,0,
3356,3357,5,34,0,0,3357,3359,3,716,358,0,3358,3356,1,0,0,0,3358,3359,1,0,
0,0,3359,3360,1,0,0,0,3360,3361,5,45,0,0,3361,3363,1,0,0,0,3362,3354,1,0,
0,0,3362,3363,1,0,0,0,3363,3365,1,0,0,0,3364,3366,3,788,394,0,3365,3364,
1,0,0,0,3365,3366,1,0,0,0,3366,713,1,0,0,0,3367,3368,5,384,0,0,3368,715,
1,0,0,0,3369,3370,5,384,0,0,3370,717,1,0,0,0,3371,3373,5,138,0,0,3372,3374,
3,788,394,0,3373,3372,1,0,0,0,3373,3374,1,0,0,0,3374,3415,1,0,0,0,3375,3377,
5,139,0,0,3376,3378,3,788,394,0,3377,3376,1,0,0,0,3377,3378,1,0,0,0,3378,
3415,1,0,0,0,3379,3381,5,140,0,0,3380,3382,3,788,394,0,3381,3380,1,0,0,0,
3381,3382,1,0,0,0,3382,3415,1,0,0,0,3383,3385,5,141,0,0,3384,3386,3,788,
394,0,3385,3384,1,0,0,0,3385,3386,1,0,0,0,3386,3415,1,0,0,0,3387,3389,5,
142,0,0,3388,3390,3,788,394,0,3389,3388,1,0,0,0,3389,3390,1,0,0,0,3390,3415,
1,0,0,0,3391,3400,5,137,0,0,3392,3393,5,44,0,0,3393,3396,3,714,357,0,3394,
3395,5,34,0,0,3395,3397,3,716,358,0,3396,3394,1,0,0,0,3396,3397,1,0,0,0,
3397,3398,1,0,0,0,3398,3399,5,45,0,0,3399,3401,1,0,0,0,3400,3392,1,0,0,0,
3400,3401,1,0,0,0,3401,3403,1,0,0,0,3402,3404,3,788,394,0,3403,3402,1,0,
0,0,3403,3404,1,0,0,0,3404,3415,1,0,0,0,3405,3407,5,218,0,0,3406,3408,3,
788,394,0,3407,3406,1,0,0,0,3407,3408,1,0,0,0,3408,3415,1,0,0,0,3409,3411,
5,124,0,0,3410,3412,5,215,0,0,3411,3410,1,0,0,0,3411,3412,1,0,0,0,3412,3413,
1,0,0,0,3413,3415,3,788,394,0,3414,3371,1,0,0,0,3414,3375,1,0,0,0,3414,3379,
1,0,0,0,3414,3383,1,0,0,0,3414,3387,1,0,0,0,3414,3391,1,0,0,0,3414,3405,
1,0,0,0,3414,3409,1,0,0,0,3415,719,1,0,0,0,3416,3419,3,722,361,0,3417,3419,
3,724,362,0,3418,3416,1,0,0,0,3418,3417,1,0,0,0,3419,721,1,0,0,0,3420,3426,
3,726,363,0,3421,3426,3,728,364,0,3422,3426,3,730,365,0,3423,3426,3,732,
366,0,3424,3426,3,734,367,0,3425,3420,1,0,0,0,3425,3421,1,0,0,0,3425,3422,
1,0,0,0,3425,3423,1,0,0,0,3425,3424,1,0,0,0,3426,723,1,0,0,0,3427,3428,3,
736,368,0,3428,725,1,0,0,0,3429,3430,5,277,0,0,3430,3432,5,114,0,0,3431,
3433,3,788,394,0,3432,3431,1,0,0,0,3432,3433,1,0,0,0,3433,3441,1,0,0,0,3434,
3435,5,248,0,0,3435,3436,5,273,0,0,3436,3438,5,353,0,0,3437,3439,3,788,394,
0,3438,3437,1,0,0,0,3438,3439,1,0,0,0,3439,3441,1,0,0,0,3440,3429,1,0,0,
0,3440,3434,1,0,0,0,3441,727,1,0,0,0,3442,3443,5,178,0,0,3443,3445,5,114,
0,0,3444,3446,3,788,394,0,3445,3444,1,0,0,0,3445,3446,1,0,0,0,3446,3455,
1,0,0,0,3447,3448,5,248,0,0,3448,3449,5,361,0,0,3449,3450,5,353,0,0,3450,
3452,1,0,0,0,3451,3453,3,788,394,0,3452,3451,1,0,0,0,3452,3453,1,0,0,0,3453,
3455,1,0,0,0,3454,3442,1,0,0,0,3454,3447,1,0,0,0,3455,729,1,0,0,0,3456,3458,
5,113,0,0,3457,3459,3,788,394,0,3458,3457,1,0,0,0,3458,3459,1,0,0,0,3459,
731,1,0,0,0,3460,3461,5,277,0,0,3461,3463,5,247,0,0,3462,3464,3,788,394,
0,3463,3462,1,0,0,0,3463,3464,1,0,0,0,3464,3472,1,0,0,0,3465,3466,5,247,
0,0,3466,3467,5,273,0,0,3467,3469,5,353,0,0,3468,3470,3,788,394,0,3469,3468,
1,0,0,0,3469,3470,1,0,0,0,3470,3472,1,0,0,0,3471,3460,1,0,0,0,3471,3465,
1,0,0,0,3472,733,1,0,0,0,3473,3474,5,178,0,0,3474,3476,5,247,0,0,3475,3477,
3,788,394,0,3476,3475,1,0,0,0,3476,3477,1,0,0,0,3477,3485,1,0,0,0,3478,3479,
5,247,0,0,3479,3480,5,361,0,0,3480,3482,5,353,0,0,3481,3483,3,788,394,0,
3482,3481,1,0,0,0,3482,3483,1,0,0,0,3483,3485,1,0,0,0,3484,3473,1,0,0,0,
3484,3478,1,0,0,0,3485,735,1,0,0,0,3486,3488,5,126,0,0,3487,3489,3,788,394,
0,3488,3487,1,0,0,0,3488,3489,1,0,0,0,3489,737,1,0,0,0,3490,3495,3,740,370,
0,3491,3495,3,746,373,0,3492,3495,3,748,374,0,3493,3495,3,754,377,0,3494,
3490,1,0,0,0,3494,3491,1,0,0,0,3494,3492,1,0,0,0,3494,3493,1,0,0,0,3495,
739,1,0,0,0,3496,3499,3,742,371,0,3497,3499,3,744,372,0,3498,3496,1,0,0,
0,3498,3497,1,0,0,0,3499,741,1,0,0,0,3500,3502,5,202,0,0,3501,3503,5,343,
0,0,3502,3501,1,0,0,0,3502,3503,1,0,0,0,3503,3504,1,0,0,0,3504,3506,5,327,
0,0,3505,3507,3,788,394,0,3506,3505,1,0,0,0,3506,3507,1,0,0,0,3507,743,1,
0,0,0,3508,3510,3,580,290,0,3509,3511,3,788,394,0,3510,3509,1,0,0,0,3510,
3511,1,0,0,0,3511,745,1,0,0,0,3512,3514,3,680,340,0,3513,3515,3,788,394,
0,3514,3513,1,0,0,0,3514,3515,1,0,0,0,3515,747,1,0,0,0,3516,3519,3,750,375,
0,3517,3519,3,752,376,0,3518,3516,1,0,0,0,3518,3517,1,0,0,0,3519,749,1,0,
0,0,3520,3522,5,202,0,0,3521,3520,1,0,0,0,3521,3522,1,0,0,0,3522,3523,1,
0,0,0,3523,3525,3,1328,664,0,3524,3526,3,788,394,0,3525,3524,1,0,0,0,3525,
3526,1,0,0,0,3526,751,1,0,0,0,3527,3529,3,604,302,0,3528,3530,3,788,394,
0,3529,3528,1,0,0,0,3529,3530,1,0,0,0,3530,753,1,0,0,0,3531,3534,3,756,378,
0,3532,3534,3,758,379,0,3533,3531,1,0,0,0,3533,3532,1,0,0,0,3534,755,1,0,
0,0,3535,3537,5,202,0,0,3536,3535,1,0,0,0,3536,3537,1,0,0,0,3537,3538,1,
0,0,0,3538,3540,3,1324,662,0,3539,3541,3,788,394,0,3540,3539,1,0,0,0,3540,
3541,1,0,0,0,3541,757,1,0,0,0,3542,3544,3,604,302,0,3543,3545,3,788,394,
0,3544,3543,1,0,0,0,3544,3545,1,0,0,0,3545,759,1,0,0,0,3546,3549,3,762,381,
0,3547,3549,3,768,384,0,3548,3546,1,0,0,0,3548,3547,1,0,0,0,3549,761,1,0,
0,0,3550,3551,3,764,382,0,3551,3552,5,38,0,0,3552,3553,3,686,343,0,3553,
3558,5,39,0,0,3554,3555,5,42,0,0,3555,3556,3,696,348,0,3556,3557,5,43,0,
0,3557,3559,1,0,0,0,3558,3554,1,0,0,0,3558,3559,1,0,0,0,3559,3561,1,0,0,
0,3560,3562,3,788,394,0,3561,3560,1,0,0,0,3561,3562,1,0,0,0,3562,3575,1,
0,0,0,3563,3564,3,686,343,0,3564,3569,3,764,382,0,3565,3566,5,42,0,0,3566,
3567,3,696,348,0,3567,3568,5,43,0,0,3568,3570,1,0,0,0,3569,3565,1,0,0,0,
3569,3570,1,0,0,0,3570,3572,1,0,0,0,3571,3573,3,788,394,0,3572,3571,1,0,
0,0,3572,3573,1,0,0,0,3573,3575,1,0,0,0,3574,3550,1,0,0,0,3574,3563,1,0,
0,0,3575,763,1,0,0,0,3576,3578,5,146,0,0,3577,3576,1,0,0,0,3577,3578,1,0,
0,0,3578,3579,1,0,0,0,3579,3580,3,766,383,0,3580,765,1,0,0,0,3581,3582,7,
22,0,0,3582,767,1,0,0,0,3583,3585,5,202,0,0,3584,3583,1,0,0,0,3584,3585,
1,0,0,0,3585,3586,1,0,0,0,3586,3588,5,219,0,0,3587,3589,3,788,394,0,3588,
3587,1,0,0,0,3588,3589,1,0,0,0,3589,3598,1,0,0,0,3590,3592,5,219,0,0,3591,
3590,1,0,0,0,3591,3592,1,0,0,0,3592,3593,1,0,0,0,3593,3595,3,770,385,0,3594,
3596,3,788,394,0,3595,3594,1,0,0,0,3595,3596,1,0,0,0,3596,3598,1,0,0,0,3597,
3584,1,0,0,0,3597,3591,1,0,0,0,3598,769,1,0,0,0,3599,3601,5,40,0,0,3600,
3602,3,772,386,0,3601,3600,1,0,0,0,3601,3602,1,0,0,0,3602,3603,1,0,0,0,3603,
3604,5,41,0,0,3604,771,1,0,0,0,3605,3608,3,790,395,0,3606,3607,5,34,0,0,
3607,3609,3,790,395,0,3608,3606,1,0,0,0,3609,3610,1,0,0,0,3610,3608,1,0,
0,0,3610,3611,1,0,0,0,3611,773,1,0,0,0,3612,3616,3,776,388,0,3613,3616,3,
778,389,0,3614,3616,3,780,390,0,3615,3612,1,0,0,0,3615,3613,1,0,0,0,3615,
3614,1,0,0,0,3616,775,1,0,0,0,3617,3618,5,69,0,0,3618,777,1,0,0,0,3619,3621,
5,69,0,0,3620,3619,1,0,0,0,3620,3621,1,0,0,0,3621,3622,1,0,0,0,3622,3623,
5,343,0,0,3623,3624,5,267,0,0,3624,779,1,0,0,0,3625,3626,5,69,0,0,3626,3627,
5,38,0,0,3627,3628,3,782,391,0,3628,3629,5,39,0,0,3629,781,1,0,0,0,3630,
3635,3,784,392,0,3631,3632,5,52,0,0,3632,3634,3,784,392,0,3633,3631,1,0,
0,0,3634,3637,1,0,0,0,3635,3633,1,0,0,0,3635,3636,1,0,0,0,3636,783,1,0,0,
0,3637,3635,1,0,0,0,3638,3639,3,682,341,0,3639,785,1,0,0,0,3640,3641,5,209,
0,0,3641,787,1,0,0,0,3642,3643,5,195,0,0,3643,3644,5,196,0,0,3644,789,1,
0,0,0,3645,3646,3,1274,637,0,3646,3647,3,684,342,0,3647,3648,3,682,341,0,
3648,791,1,0,0,0,3649,3653,3,794,397,0,3650,3653,3,798,399,0,3651,3653,3,
828,414,0,3652,3649,1,0,0,0,3652,3650,1,0,0,0,3652,3651,1,0,0,0,3653,793,
1,0,0,0,3654,3659,5,48,0,0,3655,3656,3,802,401,0,3656,3657,3,1254,627,0,
3657,3659,1,0,0,0,3658,3654,1,0,0,0,3658,3655,1,0,0,0,3659,795,1,0,0,0,3660,
3661,3,802,401,0,3661,3662,3,1254,627,0,3662,797,1,0,0,0,3663,3668,3,800,
400,0,3664,3665,3,804,402,0,3665,3666,3,1254,627,0,3666,3668,1,0,0,0,3667,
3663,1,0,0,0,3667,3664,1,0,0,0,3668,799,1,0,0,0,3669,3670,7,23,0,0,3670,
801,1,0,0,0,3671,3673,5,48,0,0,3672,3674,3,806,403,0,3673,3672,1,0,0,0,3673,
3674,1,0,0,0,3674,803,1,0,0,0,3675,3687,5,55,0,0,3676,3677,5,48,0,0,3677,
3679,5,55,0,0,3678,3676,1,0,0,0,3679,3682,1,0,0,0,3680,3678,1,0,0,0,3680,
3681,1,0,0,0,3681,3683,1,0,0,0,3682,3680,1,0,0,0,3683,3685,5,48,0,0,3684,
3686,3,806,403,0,3685,3684,1,0,0,0,3685,3686,1,0,0,0,3686,3688,1,0,0,0,3687,
3680,1,0,0,0,3687,3688,1,0,0,0,3688,805,1,0,0,0,3689,3690,3,1252,626,0,3690,
3691,5,48,0,0,3691,3693,1,0,0,0,3692,3689,1,0,0,0,3693,3694,1,0,0,0,3694,
3692,1,0,0,0,3694,3695,1,0,0,0,3695,807,1,0,0,0,3696,3697,3,826,413,0,3697,
3698,3,1256,628,0,3698,3703,1,0,0,0,3699,3703,3,1258,629,0,3700,3703,3,812,
406,0,3701,3703,3,828,414,0,3702,3696,1,0,0,0,3702,3699,1,0,0,0,3702,3700,
1,0,0,0,3702,3701,1,0,0,0,3703,809,1,0,0,0,3704,3706,3,826,413,0,3705,3704,
1,0,0,0,3705,3706,1,0,0,0,3706,3707,1,0,0,0,3707,3708,3,1256,628,0,3708,
811,1,0,0,0,3709,3710,7,24,0,0,3710,813,1,0,0,0,3711,3714,3,816,408,0,3712,
3714,3,828,414,0,3713,3711,1,0,0,0,3713,3712,1,0,0,0,3714,815,1,0,0,0,3715,
3717,3,826,413,0,3716,3715,1,0,0,0,3716,3717,1,0,0,0,3717,3718,1,0,0,0,3718,
3719,3,1260,630,0,3719,817,1,0,0,0,3720,3721,3,826,413,0,3721,3722,3,1264,
632,0,3722,3726,1,0,0,0,3723,3726,3,1266,633,0,3724,3726,3,828,414,0,3725,
3720,1,0,0,0,3725,3723,1,0,0,0,3725,3724,1,0,0,0,3726,819,1,0,0,0,3727,3729,
3,826,413,0,3728,3727,1,0,0,0,3728,3729,1,0,0,0,3729,3730,1,0,0,0,3730,3731,
3,1264,632,0,3731,821,1,0,0,0,3732,3735,3,824,412,0,3733,3735,3,828,414,
0,3734,3732,1,0,0,0,3734,3733,1,0,0,0,3735,823,1,0,0,0,3736,3738,3,826,413,
0,3737,3736,1,0,0,0,3737,3738,1,0,0,0,3738,3739,1,0,0,0,3739,3740,3,1268,
634,0,3740,825,1,0,0,0,3741,3743,3,792,396,0,3742,3744,5,48,0,0,3743,3742,
1,0,0,0,3743,3744,1,0,0,0,3744,3748,1,0,0,0,3745,3746,3,1248,624,0,3746,
3747,5,54,0,0,3747,3749,1,0,0,0,3748,3745,1,0,0,0,3749,3750,1,0,0,0,3750,
3748,1,0,0,0,3750,3751,1,0,0,0,3751,3760,1,0,0,0,3752,3753,3,1248,624,0,
3753,3754,5,54,0,0,3754,3756,1,0,0,0,3755,3752,1,0,0,0,3756,3757,1,0,0,0,
3757,3755,1,0,0,0,3757,3758,1,0,0,0,3758,3760,1,0,0,0,3759,3741,1,0,0,0,
3759,3755,1,0,0,0,3760,827,1,0,0,0,3761,3762,3,304,152,0,3762,829,1,0,0,
0,3763,3764,1,0,0,0,3764,831,1,0,0,0,3765,3766,3,912,456,0,3766,833,1,0,
0,0,3767,3779,3,836,418,0,3768,3779,3,844,422,0,3769,3779,3,846,423,0,3770,
3779,3,850,425,0,3771,3779,3,854,427,0,3772,3779,3,858,429,0,3773,3779,3,
862,431,0,3774,3779,3,868,434,0,3775,3779,3,878,439,0,3776,3779,3,880,440,
0,3777,3779,3,882,441,0,3778,3767,1,0,0,0,3778,3768,1,0,0,0,3778,3769,1,
0,0,0,3778,3770,1,0,0,0,3778,3771,1,0,0,0,3778,3772,1,0,0,0,3778,3773,1,
0,0,0,3778,3774,1,0,0,0,3778,3775,1,0,0,0,3778,3776,1,0,0,0,3778,3777,1,
0,0,0,3779,835,1,0,0,0,3780,3781,3,842,421,0,3781,3782,3,838,419,0,3782,
837,1,0,0,0,3783,3784,3,840,420,0,3784,3785,3,842,421,0,3785,839,1,0,0,0,
3786,3787,7,25,0,0,3787,841,1,0,0,0,3788,3791,3,896,448,0,3789,3791,3,924,
462,0,3790,3788,1,0,0,0,3790,3789,1,0,0,0,3791,843,1,0,0,0,3792,3810,5,132,
0,0,3793,3794,5,40,0,0,3794,3795,3,314,157,0,3795,3796,5,41,0,0,3796,3811,
1,0,0,0,3797,3798,5,44,0,0,3798,3799,3,314,157,0,3799,3800,5,45,0,0,3800,
3811,1,0,0,0,3801,3802,5,40,0,0,3802,3803,3,226,113,0,3803,3804,5,41,0,0,
3804,3811,1,0,0,0,3805,3806,5,44,0,0,3806,3807,3,226,113,0,3807,3808,5,45,
0,0,3808,3811,1,0,0,0,3809,3811,3,54,27,0,3810,3793,1,0,0,0,3810,3797,1,
0,0,0,3810,3801,1,0,0,0,3810,3805,1,0,0,0,3810,3809,1,0,0,0,3811,845,1,0,
0,0,3812,3813,3,936,468,0,3813,3814,3,848,424,0,3814,847,1,0,0,0,3815,3817,
5,171,0,0,3816,3818,5,195,0,0,3817,3816,1,0,0,0,3817,3818,1,0,0,0,3818,3819,
1,0,0,0,3819,3820,5,196,0,0,3820,849,1,0,0,0,3821,3822,3,936,468,0,3822,
3823,3,852,426,0,3823,851,1,0,0,0,3824,3826,5,171,0,0,3825,3827,5,195,0,
0,3826,3825,1,0,0,0,3826,3827,1,0,0,0,3827,3828,1,0,0,0,3828,3829,3,684,
342,0,3829,3830,3,682,341,0,3830,853,1,0,0,0,3831,3832,3,994,497,0,3832,
3833,3,856,428,0,3833,855,1,0,0,0,3834,3836,5,171,0,0,3835,3837,5,195,0,
0,3836,3835,1,0,0,0,3836,3837,1,0,0,0,3837,3839,1,0,0,0,3838,3840,3,1034,
517,0,3839,3838,1,0,0,0,3839,3840,1,0,0,0,3840,3841,1,0,0,0,3841,3842,5,
340,0,0,3842,857,1,0,0,0,3843,3844,3,300,150,0,3844,3845,3,858,429,0,3845,
859,1,0,0,0,3846,3848,5,171,0,0,3847,3849,5,195,0,0,3848,3847,1,0,0,0,3848,
3849,1,0,0,0,3849,3850,1,0,0,0,3850,3851,5,321,0,0,3851,861,1,0,0,0,3852,
3853,3,300,150,0,3853,863,1,0,0,0,3854,3855,3,866,433,0,3855,3856,3,448,
224,0,3856,865,1,0,0,0,3857,3859,5,171,0,0,3858,3860,5,195,0,0,3859,3858,
1,0,0,0,3859,3860,1,0,0,0,3860,3861,1,0,0,0,3861,3864,5,331,0,0,3862,3864,
5,32,0,0,3863,3857,1,0,0,0,3863,3862,1,0,0,0,3864,867,1,0,0,0,3865,3866,
3,870,435,0,3866,3867,3,872,436,0,3867,3872,1,0,0,0,3868,3869,3,870,435,
0,3869,3870,3,874,437,0,3870,3872,1,0,0,0,3871,3865,1,0,0,0,3871,3868,1,
0,0,0,3872,869,1,0,0,0,3873,3874,3,300,150,0,3874,871,1,0,0,0,3875,3877,
5,171,0,0,3876,3878,5,195,0,0,3877,3876,1,0,0,0,3877,3878,1,0,0,0,3878,3879,
1,0,0,0,3879,3880,5,350,0,0,3880,3881,5,200,0,0,3881,3882,3,876,438,0,3882,
873,1,0,0,0,3883,3885,5,171,0,0,3884,3886,5,195,0,0,3885,3884,1,0,0,0,3885,
3886,1,0,0,0,3886,3887,1,0,0,0,3887,3888,5,319,0,0,3888,3889,5,200,0,0,3889,
3890,3,876,438,0,3890,875,1,0,0,0,3891,3892,3,300,150,0,3892,877,1,0,0,0,
3893,3894,5,67,0,0,3894,3895,5,44,0,0,3895,3898,3,300,150,0,3896,3897,5,
34,0,0,3897,3899,3,300,150,0,3898,3896,1,0,0,0,3899,3900,1,0,0,0,3900,3898,
1,0,0,0,3900,3901,1,0,0,0,3901,3902,1,0,0,0,3902,3903,5,45,0,0,3903,879,
1,0,0,0,3904,3905,5,226,0,0,3905,3906,5,44,0,0,3906,3909,3,300,150,0,3907,
3908,5,34,0,0,3908,3910,3,300,150,0,3909,3907,1,0,0,0,3910,3911,1,0,0,0,
3911,3909,1,0,0,0,3911,3912,1,0,0,0,3912,3913,1,0,0,0,3913,3914,5,45,0,0,
3914,881,1,0,0,0,3915,3916,5,216,0,0,3916,3917,5,44,0,0,3917,3918,3,300,
150,0,3918,3919,5,34,0,0,3919,3920,3,1272,636,0,3920,3921,5,45,0,0,3921,
883,1,0,0,0,3922,3925,3,1190,595,0,3923,3925,3,890,445,0,3924,3922,1,0,0,
0,3924,3923,1,0,0,0,3925,885,1,0,0,0,3926,3929,3,1196,598,0,3927,3929,3,
890,445,0,3928,3926,1,0,0,0,3928,3927,1,0,0,0,3929,887,1,0,0,0,3930,3933,
5,383,0,0,3931,3933,3,304,152,0,3932,3930,1,0,0,0,3932,3931,1,0,0,0,3933,
889,1,0,0,0,3934,3937,3,304,152,0,3935,3937,3,892,446,0,3936,3934,1,0,0,
0,3936,3935,1,0,0,0,3937,891,1,0,0,0,3938,3939,5,112,0,0,3939,893,1,0,0,
0,3940,3943,3,896,448,0,3941,3943,3,912,456,0,3942,3940,1,0,0,0,3942,3941,
1,0,0,0,3943,895,1,0,0,0,3944,3953,3,928,464,0,3945,3953,3,994,497,0,3946,
3953,3,1048,524,0,3947,3953,3,1074,537,0,3948,3953,3,1104,552,0,3949,3953,
3,908,454,0,3950,3953,3,1132,566,0,3951,3953,3,898,449,0,3952,3944,1,0,0,
0,3952,3945,1,0,0,0,3952,3946,1,0,0,0,3952,3947,1,0,0,0,3952,3948,1,0,0,
0,3952,3949,1,0,0,0,3952,3950,1,0,0,0,3952,3951,1,0,0,0,3953,897,1,0,0,0,
3954,3959,3,900,450,0,3955,3959,3,902,451,0,3956,3959,3,904,452,0,3957,3959,
3,906,453,0,3958,3954,1,0,0,0,3958,3955,1,0,0,0,3958,3956,1,0,0,0,3958,3957,
1,0,0,0,3959,899,1,0,0,0,3960,3962,5,343,0,0,3961,3960,1,0,0,0,3961,3962,
1,0,0,0,3962,3963,1,0,0,0,3963,3964,5,327,0,0,3964,3967,3,86,43,0,3965,3967,
3,936,468,0,3966,3961,1,0,0,0,3966,3965,1,0,0,0,3967,901,1,0,0,0,3968,3970,
5,316,0,0,3969,3968,1,0,0,0,3969,3970,1,0,0,0,3970,3971,1,0,0,0,3971,3972,
5,351,0,0,3972,3975,3,92,46,0,3973,3975,3,936,468,0,3974,3969,1,0,0,0,3974,
3973,1,0,0,0,3975,903,1,0,0,0,3976,3977,3,936,468,0,3977,905,1,0,0,0,3978,
3979,3,936,468,0,3979,907,1,0,0,0,3980,3981,3,936,468,0,3981,909,1,0,0,0,
3982,3983,3,894,447,0,3983,911,1,0,0,0,3984,3994,3,914,457,0,3985,3986,3,
914,457,0,3986,3987,5,204,0,0,3987,3988,3,912,456,0,3988,3994,1,0,0,0,3989,
3990,3,914,457,0,3990,3991,5,274,0,0,3991,3992,3,912,456,0,3992,3994,1,0,
0,0,3993,3984,1,0,0,0,3993,3985,1,0,0,0,3993,3989,1,0,0,0,3994,913,1,0,0,
0,3995,3996,6,457,-1,0,3996,3997,3,916,458,0,3997,4003,1,0,0,0,3998,3999,
10,1,0,0,3999,4000,5,68,0,0,4000,4002,3,916,458,0,4001,3998,1,0,0,0,4002,
4005,1,0,0,0,4003,4001,1,0,0,0,4003,4004,1,0,0,0,4004,915,1,0,0,0,4005,4003,
1,0,0,0,4006,4008,5,195,0,0,4007,4006,1,0,0,0,4007,4008,1,0,0,0,4008,4009,
1,0,0,0,4009,4010,3,918,459,0,4010,917,1,0,0,0,4011,4017,3,922,461,0,4012,
4014,5,171,0,0,4013,4015,5,195,0,0,4014,4013,1,0,0,0,4014,4015,1,0,0,0,4015,
4016,1,0,0,0,4016,4018,3,920,460,0,4017,4012,1,0,0,0,4017,4018,1,0,0,0,4018,
919,1,0,0,0,4019,4020,7,26,0,0,4020,921,1,0,0,0,4021,4024,3,834,417,0,4022,
4024,3,924,462,0,4023,4021,1,0,0,0,4023,4022,1,0,0,0,4024,923,1,0,0,0,4025,
4028,3,926,463,0,4026,4028,3,940,470,0,4027,4025,1,0,0,0,4027,4026,1,0,0,
0,4028,925,1,0,0,0,4029,4030,5,44,0,0,4030,4031,3,912,456,0,4031,4032,5,
45,0,0,4032,927,1,0,0,0,4033,4034,3,930,465,0,4034,4035,5,26,0,0,4035,4036,
3,928,464,0,4036,4042,1,0,0,0,4037,4038,3,930,465,0,4038,4039,5,27,0,0,4039,
4040,3,928,464,0,4040,4042,1,0,0,0,4041,4033,1,0,0,0,4041,4037,1,0,0,0,4042,
929,1,0,0,0,4043,4044,3,932,466,0,4044,4045,5,30,0,0,4045,4046,3,930,465,
0,4046,4052,1,0,0,0,4047,4048,3,932,466,0,4048,4049,5,48,0,0,4049,4050,3,
930,465,0,4050,4052,1,0,0,0,4051,4043,1,0,0,0,4051,4047,1,0,0,0,4052,931,
1,0,0,0,4053,4055,5,372,0,0,4054,4053,1,0,0,0,4054,4055,1,0,0,0,4055,4056,
1,0,0,0,4056,4057,3,934,467,0,4057,933,1,0,0,0,4058,4061,3,936,468,0,4059,
4061,3,946,473,0,4060,4058,1,0,0,0,4060,4059,1,0,0,0,4061,935,1,0,0,0,4062,
4065,3,938,469,0,4063,4065,3,940,470,0,4064,4062,1,0,0,0,4064,4063,1,0,0,
0,4065,937,1,0,0,0,4066,4067,5,44,0,0,4067,4068,3,894,447,0,4068,4069,5,
45,0,0,4069,939,1,0,0,0,4070,4073,3,942,471,0,4071,4073,3,298,149,0,4072,
4070,1,0,0,0,4072,4071,1,0,0,0,4073,941,1,0,0,0,4074,4083,3,886,443,0,4075,
4083,3,550,275,0,4076,4083,3,944,472,0,4077,4083,3,1152,576,0,4078,4083,
3,1154,577,0,4079,4083,3,1188,594,0,4080,4083,3,1180,590,0,4081,4083,3,1186,
593,0,4082,4074,1,0,0,0,4082,4075,1,0,0,0,4082,4076,1,0,0,0,4082,4077,1,
0,0,0,4082,4078,1,0,0,0,4082,4079,1,0,0,0,4082,4080,1,0,0,0,4082,4081,1,
0,0,0,4083,943,1,0,0,0,4084,4088,3,1116,558,0,4085,4088,3,1124,562,0,4086,
4088,3,1138,569,0,4087,4084,1,0,0,0,4087,4085,1,0,0,0,4087,4086,1,0,0,0,
4088,945,1,0,0,0,4089,4100,3,948,474,0,4090,4100,3,956,478,0,4091,4100,3,
958,479,0,4092,4100,3,964,482,0,4093,4100,3,968,484,0,4094,4100,3,980,490,
0,4095,4100,3,982,491,0,4096,4100,3,988,494,0,4097,4100,3,990,495,0,4098,
4100,3,992,496,0,4099,4089,1,0,0,0,4099,4090,1,0,0,0,4099,4091,1,0,0,0,4099,
4092,1,0,0,0,4099,4093,1,0,0,0,4099,4094,1,0,0,0,4099,4095,1,0,0,0,4099,
4096,1,0,0,0,4099,4097,1,0,0,0,4099,4098,1,0,0,0,4100,947,1,0,0,0,4101,4105,
3,950,475,0,4102,4105,3,952,476,0,4103,4105,3,954,477,0,4104,4101,1,0,0,
0,4104,4102,1,0,0,0,4104,4103,1,0,0,0,4105,949,1,0,0,0,4106,4107,7,27,0,
0,4107,4108,5,44,0,0,4108,4109,3,996,498,0,4109,4110,5,45,0,0,4110,951,1,
0,0,0,4111,4112,7,28,0,0,4112,4113,5,44,0,0,4113,4114,3,1004,502,0,4114,
4115,5,45,0,0,4115,953,1,0,0,0,4116,4117,5,210,0,0,4117,4118,5,44,0,0,4118,
4119,3,1132,566,0,4119,4120,5,45,0,0,4120,955,1,0,0,0,4121,4122,5,64,0,0,
4122,4123,5,44,0,0,4123,4124,3,928,464,0,4124,4125,5,45,0,0,4125,957,1,0,
0,0,4126,4127,5,190,0,0,4127,4128,5,44,0,0,4128,4129,3,960,480,0,4129,4130,
5,34,0,0,4130,4131,3,962,481,0,4131,4132,5,45,0,0,4132,959,1,0,0,0,4133,
4134,3,928,464,0,4134,961,1,0,0,0,4135,4136,3,928,464,0,4136,963,1,0,0,0,
4137,4138,3,966,483,0,4138,4139,5,44,0,0,4139,4140,3,928,464,0,4140,4141,
5,45,0,0,4141,965,1,0,0,0,4142,4143,7,29,0,0,4143,967,1,0,0,0,4144,4148,
3,970,485,0,4145,4148,3,976,488,0,4146,4148,3,978,489,0,4147,4144,1,0,0,
0,4147,4145,1,0,0,0,4147,4146,1,0,0,0,4148,969,1,0,0,0,4149,4150,5,190,0,
0,4150,4151,5,44,0,0,4151,4152,3,972,486,0,4152,4153,5,34,0,0,4153,4154,
3,974,487,0,4154,4155,5,45,0,0,4155,971,1,0,0,0,4156,4157,3,928,464,0,4157,
973,1,0,0,0,4158,4159,3,928,464,0,4159,975,1,0,0,0,4160,4161,5,183,0,0,4161,
4162,5,44,0,0,4162,4163,3,928,464,0,4163,4164,5,45,0,0,4164,977,1,0,0,0,
4165,4166,5,177,0,0,4166,4167,5,44,0,0,4167,4168,3,928,464,0,4168,4169,5,
45,0,0,4169,979,1,0,0,0,4170,4171,5,133,0,0,4171,4172,5,44,0,0,4172,4173,
3,928,464,0,4173,4174,5,45,0,0,4174,981,1,0,0,0,4175,4176,5,214,0,0,4176,
4177,5,44,0,0,4177,4178,3,984,492,0,4178,4179,5,34,0,0,4179,4180,3,986,493,
0,4180,4181,5,45,0,0,4181,983,1,0,0,0,4182,4183,3,928,464,0,4183,985,1,0,
0,0,4184,4185,3,928,464,0,4185,987,1,0,0,0,4186,4187,5,238,0,0,4187,4188,
5,44,0,0,4188,4189,3,928,464,0,4189,4190,5,45,0,0,4190,989,1,0,0,0,4191,
4192,5,143,0,0,4192,4193,5,44,0,0,4193,4194,3,928,464,0,4194,4195,5,45,0,
0,4195,991,1,0,0,0,4196,4197,7,30,0,0,4197,4198,5,44,0,0,4198,4199,3,928,
464,0,4199,4200,5,45,0,0,4200,993,1,0,0,0,4201,4204,3,996,498,0,4202,4204,
3,1004,502,0,4203,4201,1,0,0,0,4203,4202,1,0,0,0,4204,995,1,0,0,0,4205,4208,
3,998,499,0,4206,4208,3,1000,500,0,4207,4205,1,0,0,0,4207,4206,1,0,0,0,4208,
997,1,0,0,0,4209,4210,3,1000,500,0,4210,4211,5,63,0,0,4211,4212,3,996,498,
0,4212,999,1,0,0,0,4213,4214,3,1002,501,0,4214,1001,1,0,0,0,4215,4218,3,
936,468,0,4216,4218,3,1012,506,0,4217,4215,1,0,0,0,4217,4216,1,0,0,0,4218,
1003,1,0,0,0,4219,4222,3,1010,505,0,4220,4222,3,1006,503,0,4221,4219,1,0,
0,0,4221,4220,1,0,0,0,4222,1005,1,0,0,0,4223,4224,3,1008,504,0,4224,1007,
1,0,0,0,4225,4228,3,936,468,0,4226,4228,3,1012,506,0,4227,4225,1,0,0,0,4227,
4226,1,0,0,0,4228,1009,1,0,0,0,4229,4230,3,1006,503,0,4230,4231,5,63,0,0,
4231,4232,3,1004,502,0,4232,1011,1,0,0,0,4233,4236,3,1014,507,0,4234,4236,
3,1036,518,0,4235,4233,1,0,0,0,4235,4234,1,0,0,0,4236,1013,1,0,0,0,4237,
4241,3,1016,508,0,4238,4241,3,1018,509,0,4239,4241,3,1032,516,0,4240,4237,
1,0,0,0,4240,4238,1,0,0,0,4240,4239,1,0,0,0,4241,1015,1,0,0,0,4242,4243,
7,31,0,0,4243,4244,5,44,0,0,4244,4245,3,996,498,0,4245,4246,5,45,0,0,4246,
1017,1,0,0,0,4247,4250,3,1020,510,0,4248,4250,3,1022,511,0,4249,4247,1,0,
0,0,4249,4248,1,0,0,0,4250,1019,1,0,0,0,4251,4252,5,250,0,0,4252,4253,5,
44,0,0,4253,4254,3,1024,512,0,4254,4255,5,45,0,0,4255,1021,1,0,0,0,4256,
4257,7,32,0,0,4257,4258,5,44,0,0,4258,4259,3,1026,513,0,4259,4260,5,34,0,
0,4260,4261,3,1030,515,0,4261,4262,1,0,0,0,4262,4263,5,45,0,0,4263,1023,
1,0,0,0,4264,4266,3,1028,514,0,4265,4264,1,0,0,0,4265,4266,1,0,0,0,4266,
4268,1,0,0,0,4267,4269,3,1030,515,0,4268,4267,1,0,0,0,4268,4269,1,0,0,0,
4269,4270,1,0,0,0,4270,4272,5,145,0,0,4271,4265,1,0,0,0,4271,4272,1,0,0,
0,4272,4273,1,0,0,0,4273,4274,3,1026,513,0,4274,1025,1,0,0,0,4275,4276,3,
996,498,0,4276,1027,1,0,0,0,4277,4278,7,33,0,0,4278,1029,1,0,0,0,4279,4280,
3,996,498,0,4280,1031,1,0,0,0,4281,4282,5,194,0,0,4282,4283,5,44,0,0,4283,
4284,3,996,498,0,4284,4285,5,34,0,0,4285,4286,3,1034,517,0,4286,4287,1,0,
0,0,4287,4288,5,45,0,0,4288,1033,1,0,0,0,4289,4290,7,34,0,0,4290,1035,1,
0,0,0,4291,4292,3,1038,519,0,4292,1037,1,0,0,0,4293,4294,5,250,0,0,4294,
4295,5,44,0,0,4295,4296,3,1040,520,0,4296,4297,5,45,0,0,4297,1039,1,0,0,
0,4298,4300,3,1028,514,0,4299,4298,1,0,0,0,4299,4300,1,0,0,0,4300,4302,1,
0,0,0,4301,4303,3,1044,522,0,4302,4301,1,0,0,0,4302,4303,1,0,0,0,4303,4304,
1,0,0,0,4304,4306,5,145,0,0,4305,4299,1,0,0,0,4305,4306,1,0,0,0,4306,4307,
1,0,0,0,4307,4308,3,1042,521,0,4308,1041,1,0,0,0,4309,4310,3,1004,502,0,
4310,1043,1,0,0,0,4311,4312,3,1004,502,0,4312,1045,1,0,0,0,4313,4314,3,928,
464,0,4314,1047,1,0,0,0,4315,4316,6,524,-1,0,4316,4322,3,1050,525,0,4317,
4318,3,1074,537,0,4318,4319,5,26,0,0,4319,4320,3,1050,525,0,4320,4322,1,
0,0,0,4321,4315,1,0,0,0,4321,4317,1,0,0,0,4322,4331,1,0,0,0,4323,4324,10,
2,0,0,4324,4325,5,26,0,0,4325,4330,3,1080,540,0,4326,4327,10,1,0,0,4327,
4328,5,27,0,0,4328,4330,3,1080,540,0,4329,4323,1,0,0,0,4329,4326,1,0,0,0,
4330,4333,1,0,0,0,4331,4329,1,0,0,0,4331,4332,1,0,0,0,4332,1049,1,0,0,0,
4333,4331,1,0,0,0,4334,4335,3,1052,526,0,4335,1051,1,0,0,0,4336,4337,3,1054,
527,0,4337,1053,1,0,0,0,4338,4341,3,936,468,0,4339,4341,3,1056,528,0,4340,
4338,1,0,0,0,4340,4339,1,0,0,0,4341,1055,1,0,0,0,4342,4348,3,1058,529,0,
4343,4348,3,1060,530,0,4344,4348,3,1064,532,0,4345,4348,3,1062,531,0,4346,
4348,3,1066,533,0,4347,4342,1,0,0,0,4347,4343,1,0,0,0,4347,4344,1,0,0,0,
4347,4345,1,0,0,0,4347,4346,1,0,0,0,4348,1057,1,0,0,0,4349,4357,5,106,0,
0,4350,4351,5,113,0,0,4351,4353,5,44,0,0,4352,4354,3,1068,534,0,4353,4352,
1,0,0,0,4353,4354,1,0,0,0,4354,4355,1,0,0,0,4355,4357,5,45,0,0,4356,4349,
1,0,0,0,4356,4350,1,0,0,0,4357,1059,1,0,0,0,4358,4366,5,110,0,0,4359,4360,
5,279,0,0,4360,4362,5,44,0,0,4361,4363,3,1070,535,0,4362,4361,1,0,0,0,4362,
4363,1,0,0,0,4363,4364,1,0,0,0,4364,4366,5,45,0,0,4365,4358,1,0,0,0,4365,
4359,1,0,0,0,4366,1061,1,0,0,0,4367,4368,5,180,0,0,4368,4370,5,44,0,0,4369,
4371,3,1070,535,0,4370,4369,1,0,0,0,4370,4371,1,0,0,0,4371,4373,1,0,0,0,
4372,4374,5,45,0,0,4373,4372,1,0,0,0,4373,4374,1,0,0,0,4374,1063,1,0,0,0,
4375,4383,5,111,0,0,4376,4377,5,278,0,0,4377,4379,5,44,0,0,4378,4380,3,1072,
536,0,4379,4378,1,0,0,0,4379,4380,1,0,0,0,4380,4381,1,0,0,0,4381,4383,5,
45,0,0,4382,4375,1,0,0,0,4382,4376,1,0,0,0,4383,1065,1,0,0,0,4384,4392,5,
181,0,0,4385,4386,5,179,0,0,4386,4388,5,44,0,0,4387,4389,3,1072,536,0,4388,
4387,1,0,0,0,4388,4389,1,0,0,0,4389,4390,1,0,0,0,4390,4392,5,45,0,0,4391,
4384,1,0,0,0,4391,4385,1,0,0,0,4392,1067,1,0,0,0,4393,4396,3,1226,613,0,
4394,4396,3,1124,562,0,4395,4393,1,0,0,0,4395,4394,1,0,0,0,4396,1069,1,0,
0,0,4397,4400,3,1228,614,0,4398,4400,3,1124,562,0,4399,4397,1,0,0,0,4399,
4398,1,0,0,0,4400,1071,1,0,0,0,4401,4404,3,1230,615,0,4402,4404,3,1124,562,
0,4403,4401,1,0,0,0,4403,4402,1,0,0,0,4404,1073,1,0,0,0,4405,4406,6,537,
-1,0,4406,4409,3,1080,540,0,4407,4409,3,1076,538,0,4408,4405,1,0,0,0,4408,
4407,1,0,0,0,4409,4418,1,0,0,0,4410,4411,10,3,0,0,4411,4412,5,26,0,0,4412,
4417,3,1080,540,0,4413,4414,10,2,0,0,4414,4415,5,27,0,0,4415,4417,3,1080,
540,0,4416,4410,1,0,0,0,4416,4413,1,0,0,0,4417,4420,1,0,0,0,4418,4416,1,
0,0,0,4418,4419,1,0,0,0,4419,1075,1,0,0,0,4420,4418,1,0,0,0,4421,4422,5,
127,0,0,4422,4423,5,44,0,0,4423,4424,3,1078,539,0,4424,4425,5,45,0,0,4425,
1077,1,0,0,0,4426,4427,3,1048,524,0,4427,4428,5,34,0,0,4428,4429,3,1048,
524,0,4429,1079,1,0,0,0,4430,4431,6,540,-1,0,4431,4437,3,1082,541,0,4432,
4433,3,930,465,0,4433,4434,5,30,0,0,4434,4435,3,1082,541,0,4435,4437,1,0,
0,0,4436,4430,1,0,0,0,4436,4432,1,0,0,0,4437,4446,1,0,0,0,4438,4439,10,3,
0,0,4439,4440,5,30,0,0,4440,4445,3,932,466,0,4441,4442,10,2,0,0,4442,4443,
5,48,0,0,4443,4445,3,932,466,0,4444,4438,1,0,0,0,4444,4441,1,0,0,0,4445,
4448,1,0,0,0,4446,4444,1,0,0,0,4446,4447,1,0,0,0,4447,1081,1,0,0,0,4448,
4446,1,0,0,0,4449,4451,5,372,0,0,4450,4449,1,0,0,0,4450,4451,1,0,0,0,4451,
4452,1,0,0,0,4452,4453,3,1084,542,0,4453,1083,1,0,0,0,4454,4457,3,936,468,
0,4455,4457,3,1096,548,0,4456,4454,1,0,0,0,4456,4455,1,0,0,0,4457,1085,1,
0,0,0,4458,4459,3,1074,537,0,4459,1087,1,0,0,0,4460,4461,3,1080,540,0,4461,
1089,1,0,0,0,4462,4463,3,1080,540,0,4463,1091,1,0,0,0,4464,4465,3,1048,524,
0,4465,1093,1,0,0,0,4466,4467,3,1048,524,0,4467,1095,1,0,0,0,4468,4471,3,
1098,549,0,4469,4471,3,1102,551,0,4470,4468,1,0,0,0,4470,4469,1,0,0,0,4471,
1097,1,0,0,0,4472,4473,5,126,0,0,4473,4474,5,44,0,0,4474,4475,3,1100,550,
0,4475,4476,5,45,0,0,4476,1099,1,0,0,0,4477,4480,3,1236,618,0,4478,4480,
3,1124,562,0,4479,4477,1,0,0,0,4479,4478,1,0,0,0,4480,1101,1,0,0,0,4481,
4482,5,64,0,0,4482,4483,5,44,0,0,4483,4484,3,1074,537,0,4484,4485,5,45,0,
0,4485,1103,1,0,0,0,4486,4489,3,1106,553,0,4487,4489,3,1108,554,0,4488,4486,
1,0,0,0,4488,4487,1,0,0,0,4489,1105,1,0,0,0,4490,4491,3,1108,554,0,4491,
4492,5,63,0,0,4492,4493,3,1104,552,0,4493,1107,1,0,0,0,4494,4497,3,1110,
555,0,4495,4497,3,936,468,0,4496,4494,1,0,0,0,4496,4495,1,0,0,0,4497,1109,
1,0,0,0,4498,4499,3,1112,556,0,4499,4500,3,1114,557,0,4500,1111,1,0,0,0,
4501,4502,5,250,0,0,4502,4503,5,44,0,0,4503,4504,3,1104,552,0,4504,4505,
5,34,0,0,4505,4506,3,928,464,0,4506,4507,5,45,0,0,4507,1113,1,0,0,0,4508,
4509,5,325,0,0,4509,4510,5,44,0,0,4510,4511,3,1132,566,0,4511,4512,5,45,
0,0,4512,1115,1,0,0,0,4513,4514,3,1118,559,0,4514,1117,1,0,0,0,4515,4516,
5,42,0,0,4516,4517,3,764,382,0,4517,4518,5,43,0,0,4518,4519,5,42,0,0,4519,
4520,3,1120,560,0,4520,4521,5,43,0,0,4521,1119,1,0,0,0,4522,4527,3,1122,
561,0,4523,4524,5,34,0,0,4524,4526,3,1122,561,0,4525,4523,1,0,0,0,4526,4529,
1,0,0,0,4527,4525,1,0,0,0,4527,4528,1,0,0,0,4528,1121,1,0,0,0,4529,4527,
1,0,0,0,4530,4531,3,894,447,0,4531,1123,1,0,0,0,4532,4534,5,219,0,0,4533,
4532,1,0,0,0,4533,4534,1,0,0,0,4534,4535,1,0,0,0,4535,4536,3,1126,563,0,
4536,1125,1,0,0,0,4537,4539,5,40,0,0,4538,4540,3,1128,564,0,4539,4538,1,
0,0,0,4539,4540,1,0,0,0,4540,4541,1,0,0,0,4541,4542,5,41,0,0,4542,1127,1,
0,0,0,4543,4548,3,1130,565,0,4544,4545,5,34,0,0,4545,4547,3,1130,565,0,4546,
4544,1,0,0,0,4547,4550,1,0,0,0,4548,4546,1,0,0,0,4548,4549,1,0,0,0,4549,
1129,1,0,0,0,4550,4548,1,0,0,0,4551,4552,3,1274,637,0,4552,4553,5,32,0,0,
4553,4554,3,894,447,0,4554,1131,1,0,0,0,4555,4558,3,1134,567,0,4556,4558,
3,1136,568,0,4557,4555,1,0,0,0,4557,4556,1,0,0,0,4558,1133,1,0,0,0,4559,
4560,3,1136,568,0,4560,4561,5,63,0,0,4561,4562,3,1132,566,0,4562,1135,1,
0,0,0,4563,4564,3,936,468,0,4564,1137,1,0,0,0,4565,4566,3,1140,570,0,4566,
1139,1,0,0,0,4567,4568,5,209,0,0,4568,4569,5,44,0,0,4569,4570,3,1142,571,
0,4570,4571,5,45,0,0,4571,1141,1,0,0,0,4572,4574,3,1144,572,0,4573,4575,
3,1146,573,0,4574,4573,1,0,0,0,4574,4575,1,0,0,0,4575,1143,1,0,0,0,4576,
4577,3,904,452,0,4577,1145,1,0,0,0,4578,4579,5,34,0,0,4579,4580,3,906,453,
0,4580,4581,5,34,0,0,4581,4582,3,904,452,0,4582,1147,1,0,0,0,4583,4584,3,
1150,575,0,4584,4585,5,54,0,0,4585,4586,3,1272,636,0,4586,1149,1,0,0,0,4587,
4591,3,904,452,0,4588,4591,3,906,453,0,4589,4591,3,908,454,0,4590,4587,1,
0,0,0,4590,4588,1,0,0,0,4590,4589,1,0,0,0,4591,1151,1,0,0,0,4592,4593,5,
267,0,0,4593,4594,3,54,27,0,4594,1153,1,0,0,0,4595,4598,3,1156,578,0,4596,
4598,3,1158,579,0,4597,4595,1,0,0,0,4597,4596,1,0,0,0,4598,1155,1,0,0,0,
4599,4600,5,198,0,0,4600,4601,5,44,0,0,4601,4602,3,894,447,0,4602,4603,5,
34,0,0,4603,4604,3,894,447,0,4604,4605,5,45,0,0,4605,4619,1,0,0,0,4606,4607,
5,97,0,0,4607,4608,5,44,0,0,4608,4613,3,894,447,0,4609,4610,5,34,0,0,4610,
4612,3,894,447,0,4611,4609,1,0,0,0,4612,4615,1,0,0,0,4613,4611,1,0,0,0,4613,
4614,1,0,0,0,4614,4616,1,0,0,0,4615,4613,1,0,0,0,4616,4617,5,45,0,0,4617,
4619,1,0,0,0,4618,4599,1,0,0,0,4618,4606,1,0,0,0,4619,1157,1,0,0,0,4620,
4623,3,1160,580,0,4621,4623,3,1162,581,0,4622,4620,1,0,0,0,4622,4621,1,0,
0,0,4623,1159,1,0,0,0,4624,4625,5,89,0,0,4625,4626,3,1170,585,0,4626,4628,
3,1164,582,0,4627,4629,3,1168,584,0,4628,4627,1,0,0,0,4628,4629,1,0,0,0,
4629,4630,1,0,0,0,4630,4631,5,130,0,0,4631,1161,1,0,0,0,4632,4633,5,89,0,
0,4633,4635,3,1166,583,0,4634,4636,3,1168,584,0,4635,4634,1,0,0,0,4635,4636,
1,0,0,0,4636,4637,1,0,0,0,4637,4638,5,130,0,0,4638,1163,1,0,0,0,4639,4640,
5,271,0,0,4640,4641,3,1172,586,0,4641,4642,5,246,0,0,4642,4643,3,1176,588,
0,4643,1165,1,0,0,0,4644,4645,5,271,0,0,4645,4646,3,832,416,0,4646,4647,
5,246,0,0,4647,4648,3,1176,588,0,4648,1167,1,0,0,0,4649,4650,5,129,0,0,4650,
4651,3,1176,588,0,4651,1169,1,0,0,0,4652,4655,3,940,470,0,4653,4655,3,300,
150,0,4654,4652,1,0,0,0,4654,4653,1,0,0,0,4655,1171,1,0,0,0,4656,4661,3,
1174,587,0,4657,4658,5,34,0,0,4658,4660,3,1174,587,0,4659,4657,1,0,0,0,4660,
4663,1,0,0,0,4661,4659,1,0,0,0,4661,4662,1,0,0,0,4662,1173,1,0,0,0,4663,
4661,1,0,0,0,4664,4673,3,940,470,0,4665,4673,3,838,419,0,4666,4673,3,848,
424,0,4667,4673,3,852,426,0,4668,4673,3,860,430,0,4669,4673,3,864,432,0,
4670,4673,3,872,436,0,4671,4673,3,874,437,0,4672,4664,1,0,0,0,4672,4665,
1,0,0,0,4672,4666,1,0,0,0,4672,4667,1,0,0,0,4672,4668,1,0,0,0,4672,4669,
1,0,0,0,4672,4670,1,0,0,0,4672,4671,1,0,0,0,4673,1175,1,0,0,0,4674,4677,
3,1178,589,0,4675,4677,5,196,0,0,4676,4674,1,0,0,0,4676,4675,1,0,0,0,4677,
1177,1,0,0,0,4678,4679,3,894,447,0,4679,1179,1,0,0,0,4680,4681,5,90,0,0,
4681,4682,5,44,0,0,4682,4683,3,1182,591,0,4683,4684,5,71,0,0,4684,4685,3,
1184,592,0,4685,4686,5,45,0,0,4686,1181,1,0,0,0,4687,4688,3,894,447,0,4688,
1183,1,0,0,0,4689,4690,3,682,341,0,4690,1185,1,0,0,0,4691,4692,5,128,0,0,
4692,4693,5,44,0,0,4693,4694,3,300,150,0,4694,4695,5,45,0,0,4695,1187,1,
0,0,0,4696,4697,5,173,0,0,4697,4698,3,234,117,0,4698,4699,5,153,0,0,4699,
4700,3,894,447,0,4700,4701,5,130,0,0,4701,1189,1,0,0,0,4702,4705,5,371,0,
0,4703,4705,3,1192,596,0,4704,4702,1,0,0,0,4704,4703,1,0,0,0,4705,1191,1,
0,0,0,4706,4710,3,1194,597,0,4707,4710,3,1244,622,0,4708,4710,3,1246,623,
0,4709,4706,1,0,0,0,4709,4707,1,0,0,0,4709,4708,1,0,0,0,4710,1193,1,0,0,
0,4711,4718,3,1198,599,0,4712,4718,3,1200,600,0,4713,4718,5,388,0,0,4714,
4718,3,1218,609,0,4715,4718,3,1234,617,0,4716,4718,3,1242,621,0,4717,4711,
1,0,0,0,4717,4712,1,0,0,0,4717,4713,1,0,0,0,4717,4714,1,0,0,0,4717,4715,
1,0,0,0,4717,4716,1,0,0,0,4718,1195,1,0,0,0,4719,4722,5,370,0,0,4720,4722,
3,1192,596,0,4721,4719,1,0,0,0,4721,4720,1,0,0,0,4722,1197,1,0,0,0,4723,
4724,7,26,0,0,4724,1199,1,0,0,0,4725,4729,3,1204,602,0,4726,4729,3,1206,
603,0,4727,4729,3,1208,604,0,4728,4725,1,0,0,0,4728,4726,1,0,0,0,4728,4727,
1,0,0,0,4729,1201,1,0,0,0,4730,4732,3,1210,605,0,4731,4730,1,0,0,0,4731,
4732,1,0,0,0,4732,4733,1,0,0,0,4733,4739,3,1212,606,0,4734,4736,3,1210,605,
0,4735,4734,1,0,0,0,4735,4736,1,0,0,0,4736,4737,1,0,0,0,4737,4739,3,1214,
607,0,4738,4731,1,0,0,0,4738,4735,1,0,0,0,4739,1203,1,0,0,0,4740,4742,3,
1210,605,0,4741,4740,1,0,0,0,4741,4742,1,0,0,0,4742,4743,1,0,0,0,4743,4748,
3,1212,606,0,4744,4745,5,52,0,0,4745,4747,3,1212,606,0,4746,4744,1,0,0,0,
4747,4750,1,0,0,0,4748,4746,1,0,0,0,4748,4749,1,0,0,0,4749,1205,1,0,0,0,
4750,4748,1,0,0,0,4751,4753,3,1210,605,0,4752,4751,1,0,0,0,4752,4753,1,0,
0,0,4753,4754,1,0,0,0,4754,4759,3,1214,607,0,4755,4756,5,52,0,0,4756,4758,
3,1214,607,0,4757,4755,1,0,0,0,4758,4761,1,0,0,0,4759,4757,1,0,0,0,4759,
4760,1,0,0,0,4760,1207,1,0,0,0,4761,4759,1,0,0,0,4762,4764,3,1210,605,0,
4763,4762,1,0,0,0,4763,4764,1,0,0,0,4764,4765,1,0,0,0,4765,4770,3,1216,608,
0,4766,4767,5,52,0,0,4767,4769,3,1216,608,0,4768,4766,1,0,0,0,4769,4772,
1,0,0,0,4770,4768,1,0,0,0,4770,4771,1,0,0,0,4771,1209,1,0,0,0,4772,4770,
1,0,0,0,4773,4774,5,56,0,0,4774,1211,1,0,0,0,4775,4776,5,389,0,0,4776,1213,
1,0,0,0,4777,4778,5,390,0,0,4778,1215,1,0,0,0,4779,4780,5,391,0,0,4780,1217,
1,0,0,0,4781,4786,3,1220,610,0,4782,4786,3,1222,611,0,4783,4786,3,1224,612,
0,4784,4786,3,1232,616,0,4785,4781,1,0,0,0,4785,4782,1,0,0,0,4785,4783,1,
0,0,0,4785,4784,1,0,0,0,4786,1219,1,0,0,0,4787,4788,5,113,0,0,4788,4789,
3,1202,601,0,4789,1221,1,0,0,0,4790,4791,5,247,0,0,4791,4792,3,1202,601,
0,4792,1223,1,0,0,0,4793,4794,5,114,0,0,4794,4798,3,1202,601,0,4795,4796,
5,248,0,0,4796,4798,3,1202,601,0,4797,4793,1,0,0,0,4797,4795,1,0,0,0,4798,
1225,1,0,0,0,4799,4800,3,1202,601,0,4800,1227,1,0,0,0,4801,4802,3,1202,601,
0,4802,1229,1,0,0,0,4803,4804,3,1202,601,0,4804,1231,1,0,0,0,4805,4806,5,
113,0,0,4806,4807,5,22,0,0,4807,4808,5,381,0,0,4808,4809,5,27,0,0,4809,4810,
5,382,0,0,4810,4811,5,27,0,0,4811,4812,5,382,0,0,4812,4848,5,22,0,0,4813,
4814,5,247,0,0,4814,4815,5,22,0,0,4815,4816,5,382,0,0,4816,4817,5,32,0,0,
4817,4818,5,382,0,0,4818,4819,5,32,0,0,4819,4820,5,382,0,0,4820,4848,5,22,
0,0,4821,4822,5,248,0,0,4822,4823,5,22,0,0,4823,4824,5,381,0,0,4824,4825,
5,27,0,0,4825,4826,5,382,0,0,4826,4827,5,27,0,0,4827,4828,5,382,0,0,4828,
4829,5,382,0,0,4829,4830,5,32,0,0,4830,4831,5,382,0,0,4831,4832,5,32,0,0,
4832,4833,5,382,0,0,4833,4848,5,22,0,0,4834,4835,5,114,0,0,4835,4836,5,22,
0,0,4836,4837,5,381,0,0,4837,4838,5,27,0,0,4838,4839,5,382,0,0,4839,4840,
5,27,0,0,4840,4841,5,382,0,0,4841,4842,5,382,0,0,4842,4843,5,32,0,0,4843,
4844,5,382,0,0,4844,4845,5,32,0,0,4845,4846,5,382,0,0,4846,4848,5,22,0,0,
4847,4805,1,0,0,0,4847,4813,1,0,0,0,4847,4821,1,0,0,0,4847,4834,1,0,0,0,
4848,1233,1,0,0,0,4849,4850,5,126,0,0,4850,4853,3,1236,618,0,4851,4853,3,
1238,619,0,4852,4849,1,0,0,0,4852,4851,1,0,0,0,4853,1235,1,0,0,0,4854,4855,
3,1202,601,0,4855,1237,1,0,0,0,4856,4857,5,383,0,0,4857,4858,3,1240,620,
0,4858,1239,1,0,0,0,4859,4860,7,35,0,0,4860,1241,1,0,0,0,4861,4862,5,196,
0,0,4862,1243,1,0,0,0,4863,4864,3,1118,559,0,4864,1245,1,0,0,0,4865,4866,
3,1124,562,0,4866,1247,1,0,0,0,4867,4868,3,1302,651,0,4868,1249,1,0,0,0,
4869,4870,5,399,0,0,4870,1251,1,0,0,0,4871,4872,3,1302,651,0,4872,1253,1,
0,0,0,4873,4874,3,1302,651,0,4874,1255,1,0,0,0,4875,4878,5,399,0,0,4876,
4878,3,1258,629,0,4877,4875,1,0,0,0,4877,4876,1,0,0,0,4878,1257,1,0,0,0,
4879,4880,3,1308,654,0,4880,1259,1,0,0,0,4881,4882,3,1302,651,0,4882,1261,
1,0,0,0,4883,4884,3,1302,651,0,4884,1263,1,0,0,0,4885,4888,5,399,0,0,4886,
4888,3,1266,633,0,4887,4885,1,0,0,0,4887,4886,1,0,0,0,4888,1265,1,0,0,0,
4889,4890,3,1308,654,0,4890,1267,1,0,0,0,4891,4892,3,1302,651,0,4892,1269,
1,0,0,0,4893,4894,3,1302,651,0,4894,1271,1,0,0,0,4895,4896,3,1302,651,0,
4896,1273,1,0,0,0,4897,4898,3,1302,651,0,4898,1275,1,0,0,0,4899,4900,5,35,
0,0,4900,4901,3,1304,652,0,4901,1277,1,0,0,0,4902,4908,3,1280,640,0,4903,
4908,3,1282,641,0,4904,4908,3,1292,646,0,4905,4908,3,1294,647,0,4906,4908,
3,1296,648,0,4907,4902,1,0,0,0,4907,4903,1,0,0,0,4907,4904,1,0,0,0,4907,
4905,1,0,0,0,4907,4906,1,0,0,0,4908,1279,1,0,0,0,4909,4910,3,1296,648,0,
4910,1281,1,0,0,0,4911,4914,3,1286,643,0,4912,4914,3,1284,642,0,4913,4911,
1,0,0,0,4913,4912,1,0,0,0,4914,1283,1,0,0,0,4915,4918,3,1288,644,0,4916,
4918,3,1290,645,0,4917,4915,1,0,0,0,4917,4916,1,0,0,0,4918,1285,1,0,0,0,
4919,4920,3,1296,648,0,4920,1287,1,0,0,0,4921,4922,3,1296,648,0,4922,1289,
1,0,0,0,4923,4924,5,399,0,0,4924,1291,1,0,0,0,4925,4926,3,1296,648,0,4926,
1293,1,0,0,0,4927,4928,3,1296,648,0,4928,1295,1,0,0,0,4929,4930,5,399,0,
0,4930,1297,1,0,0,0,4931,4934,3,1300,650,0,4932,4934,3,1318,659,0,4933,4931,
1,0,0,0,4933,4932,1,0,0,0,4934,1299,1,0,0,0,4935,4942,5,399,0,0,4936,4942,
3,1276,638,0,4937,4942,3,1310,655,0,4938,4942,5,370,0,0,4939,4942,5,388,
0,0,4940,4942,5,62,0,0,4941,4935,1,0,0,0,4941,4936,1,0,0,0,4941,4937,1,0,
0,0,4941,4938,1,0,0,0,4941,4939,1,0,0,0,4941,4940,1,0,0,0,4942,1301,1,0,
0,0,4943,4946,5,399,0,0,4944,4946,3,1308,654,0,4945,4943,1,0,0,0,4945,4944,
1,0,0,0,4946,1303,1,0,0,0,4947,4950,5,399,0,0,4948,4950,3,1308,654,0,4949,
4947,1,0,0,0,4949,4948,1,0,0,0,4950,1305,1,0,0,0,4951,4952,7,36,0,0,4952,
1307,1,0,0,0,4953,4956,3,1206,603,0,4954,4956,3,1208,604,0,4955,4953,1,0,
0,0,4955,4954,1,0,0,0,4956,1309,1,0,0,0,4957,4960,3,1312,656,0,4958,4960,
3,1316,658,0,4959,4957,1,0,0,0,4959,4958,1,0,0,0,4960,1311,1,0,0,0,4961,
4962,7,37,0,0,4962,1313,1,0,0,0,4963,4964,7,38,0,0,4964,1315,1,0,0,0,4965,
4966,7,39,0,0,4966,1317,1,0,0,0,4967,5005,5,416,0,0,4968,5005,3,1200,600,
0,4969,5005,5,63,0,0,4970,5005,3,1226,613,0,4971,5005,3,1230,615,0,4972,
5005,3,1308,654,0,4973,5005,3,1236,618,0,4974,5005,3,1228,614,0,4975,5005,
5,33,0,0,4976,5005,5,28,0,0,4977,5005,5,55,0,0,4978,5005,5,57,0,0,4979,5005,
5,58,0,0,4980,5005,5,59,0,0,4981,5005,5,60,0,0,4982,5005,5,61,0,0,4983,5005,
5,1,0,0,4984,5005,5,2,0,0,4985,5005,5,3,0,0,4986,5005,5,4,0,0,4987,5005,
5,5,0,0,4988,5005,5,6,0,0,4989,5005,5,7,0,0,4990,5005,5,8,0,0,4991,5005,
5,9,0,0,4992,5005,5,10,0,0,4993,5005,5,11,0,0,4994,5005,5,12,0,0,4995,5005,
5,13,0,0,4996,5005,5,14,0,0,4997,5005,5,15,0,0,4998,5005,5,16,0,0,4999,5005,
5,17,0,0,5000,5005,5,18,0,0,5001,5005,5,19,0,0,5002,5005,5,20,0,0,5003,5005,
5,21,0,0,5004,4967,1,0,0,0,5004,4968,1,0,0,0,5004,4969,1,0,0,0,5004,4970,
1,0,0,0,5004,4971,1,0,0,0,5004,4972,1,0,0,0,5004,4973,1,0,0,0,5004,4974,
1,0,0,0,5004,4975,1,0,0,0,5004,4976,1,0,0,0,5004,4977,1,0,0,0,5004,4978,
1,0,0,0,5004,4979,1,0,0,0,5004,4980,1,0,0,0,5004,4981,1,0,0,0,5004,4982,
1,0,0,0,5004,4983,1,0,0,0,5004,4984,1,0,0,0,5004,4985,1,0,0,0,5004,4986,
1,0,0,0,5004,4987,1,0,0,0,5004,4988,1,0,0,0,5004,4989,1,0,0,0,5004,4990,
1,0,0,0,5004,4991,1,0,0,0,5004,4992,1,0,0,0,5004,4993,1,0,0,0,5004,4994,
1,0,0,0,5004,4995,1,0,0,0,5004,4996,1,0,0,0,5004,4997,1,0,0,0,5004,4998,
1,0,0,0,5004,4999,1,0,0,0,5004,5000,1,0,0,0,5004,5001,1,0,0,0,5004,5002,
1,0,0,0,5004,5003,1,0,0,0,5005,1319,1,0,0,0,5006,5007,1,0,0,0,5007,1321,
1,0,0,0,5008,5009,7,40,0,0,5009,1323,1,0,0,0,5010,5011,7,41,0,0,5011,1325,
1,0,0,0,5012,5013,7,42,0,0,5013,1327,1,0,0,0,5014,5015,7,43,0,0,5015,1329,
1,0,0,0,521,1332,1336,1343,1347,1351,1359,1365,1379,1382,1389,1401,1404,
1410,1415,1422,1425,1432,1434,1438,1441,1446,1455,1459,1465,1484,1487,1494,
1499,1505,1511,1515,1520,1527,1530,1538,1545,1548,1560,1563,1575,1585,1598,
1603,1607,1615,1620,1627,1633,1637,1641,1646,1649,1655,1661,1664,1668,1671,
1677,1681,1684,1696,1700,1706,1711,1716,1720,1726,1731,1734,1740,1744,1749,
1757,1761,1766,1773,1777,1782,1786,1790,1796,1809,1814,1826,1839,1850,1854,
1873,1890,1895,1904,1909,1916,1932,1936,1942,1947,1954,1958,1975,1980,1987,
1997,2004,2009,2023,2026,2030,2033,2037,2040,2046,2050,2053,2057,2064,2069,
2076,2080,2084,2087,2090,2093,2096,2099,2101,2108,2112,2123,2130,2142,2145,
2152,2155,2161,2170,2175,2184,2204,2214,2220,2224,2227,2231,2241,2244,2248,
2251,2258,2262,2265,2270,2283,2287,2294,2298,2301,2307,2310,2313,2321,2326,
2329,2334,2337,2342,2345,2350,2353,2364,2371,2379,2386,2392,2403,2407,2414,
2417,2420,2423,2431,2435,2449,2457,2466,2500,2503,2507,2524,2533,2538,2545,
2561,2564,2567,2571,2574,2577,2584,2592,2597,2605,2617,2625,2629,2644,2677,
2684,2692,2699,2707,2713,2723,2732,2759,2769,2782,2786,2802,2805,2822,2827,
2839,2850,2854,2857,2867,2878,2895,2900,2906,2914,2918,2921,2930,2938,2943,
2947,2950,2959,2968,2977,3009,3025,3033,3036,3044,3047,3058,3096,3100,3109,
3114,3121,3129,3133,3142,3146,3153,3156,3163,3168,3171,3178,3181,3188,3191,
3193,3203,3207,3211,3215,3219,3223,3227,3231,3235,3239,3246,3249,3253,3256,
3259,3263,3267,3271,3275,3279,3283,3287,3294,3297,3301,3305,3309,3313,3317,
3321,3325,3329,3334,3341,3344,3349,3351,3358,3362,3365,3373,3377,3381,3385,
3389,3396,3400,3403,3407,3411,3414,3418,3425,3432,3438,3440,3445,3452,3454,
3458,3463,3469,3471,3476,3482,3484,3488,3494,3498,3502,3506,3510,3514,3518,
3521,3525,3529,3533,3536,3540,3544,3548,3558,3561,3569,3572,3574,3577,3584,
3588,3591,3595,3597,3601,3610,3615,3620,3635,3652,3658,3667,3673,3680,3685,
3687,3694,3702,3705,3713,3716,3725,3728,3734,3737,3743,3750,3757,3759,3778,
3790,3810,3817,3826,3836,3839,3848,3859,3863,3871,3877,3885,3900,3911,3924,
3928,3932,3936,3942,3952,3958,3961,3966,3969,3974,3993,4003,4007,4014,4017,
4023,4027,4041,4051,4054,4060,4064,4072,4082,4087,4099,4104,4147,4203,4207,
4217,4221,4227,4235,4240,4249,4265,4268,4271,4299,4302,4305,4321,4329,4331,
4340,4347,4353,4356,4362,4365,4370,4373,4379,4382,4388,4391,4395,4399,4403,
4408,4416,4418,4436,4444,4446,4450,4456,4470,4479,4488,4496,4527,4533,4539,
4548,4557,4574,4590,4597,4613,4618,4622,4628,4635,4654,4661,4672,4676,4704,
4709,4717,4721,4728,4731,4735,4738,4741,4748,4752,4759,4763,4770,4785,4797,
4847,4852,4877,4887,4907,4913,4917,4933,4941,4945,4949,4955,4959,5004];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class GqlParser extends antlr4.Parser {

    static grammarFileName = "java-escape";
    static literalNames = [ null, "'<-'", "'<~'", "'<-['", "'<~['", "'<->'", 
                            "'<-/'", "'<~/'", "'-['", "'-/'", "'->'", "']-'", 
                            "']~'", "']->'", "']~>'", "'/-'", "'/->'", "'/~'", 
                            "'/~>'", "'~['", "'~>'", "'~/'", "'''", "'\"'", 
                            "'`'", "'\\'", "'+'", "'-'", "'--'", "'&'", 
                            "'*'", "'^'", "':'", "'::'", "','", "'$'", "'='", 
                            "'!'", "'<'", "'>'", "'{'", "'}'", "'['", "']'", 
                            "'('", "')'", "'?'", "';'", "'/'", "'//'", "'~'", 
                            "'_'", "'|'", "'%'", "'.'", "'..'", "'@'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, "'\\u000D'", "'\\u000A'" ];
    static symbolicNames = [ null, "LEFT_ARROW", "LEFT_ARROW_TILDE", "LEFT_ARROW_BRACKET", 
                             "LEFT_ARROW_TILDE_BRACKET", "LEFT_MINUS_RIGHT", 
                             "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "MINUS_LEFT_BRACKET", 
                             "MINUS_SLASH", "RIGHT_ARROW", "RIGHT_BRACKET_MINUS", 
                             "RIGHT_BRACKET_TILDE", "BRACKET_RIGHT_ARROW", 
                             "BRACKET_TILDE_RIGHT_ARROW", "SLASH_MINUS", 
                             "SLASH_MINUS_RIGHT", "SLASH_TILDE", "SLASH_TILDE_RIGHT", 
                             "TILDE_LEFT_BRACKET", "TILDE_RIGHT_ARROW", 
                             "TILDE_SLASH", "QUOTE", "DOUBLE_QUOTE", "GRAVE_ACCENT", 
                             "REVERS_SOLIDUS", "PLUS", "MINUS", "DOUBLE_MINUS", 
                             "AMPERSAND", "ASTERISK", "CIRCUMFLEX", "COLON", 
                             "DOUBLE_COLON", "COMMA", "DOLLAR", "EQUALS", 
                             "EXCLAMATION", "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", 
                             "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", 
                             "RIGHT_BRACKET", "LEFT_PAREN", "RIGHT_PAREN", 
                             "QUESTION_MARK", "SEMICOLON", "SOLIDUS", "DOUBLE_SOLIDUS", 
                             "TILDE", "UNDERSCORE", "VERTICAL_BAR", "PERCENT", 
                             "PERIOD", "DOUBLE_PERIOD", "COMMERCIAL_AT", 
                             "NOT_EQUALS", "LESS_THAN", "GREATER_THAN", 
                             "LESS_THAN_OR_EQUALS", "GREATER_THAN_OR_EQUALS", 
                             "MULTISET_ALTERNATION", "CONCATENATION", "ABS", 
                             "ACOS", "ALL", "ALL_DIFFERENT", "AND", "ANY", 
                             "ARRAY", "AS", "ASC", "ASCENDING", "ASIN", 
                             "AT", "ATAN", "AVG", "BIG", "BIGINT", "BINARY", 
                             "BOOL", "BOOLEAN", "BOTH", "BTRIM", "BY", "BYTE_LENGTH", 
                             "BYTES", "CALL", "CASE", "CAST", "CEIL", "CEILING", 
                             "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
                             "CLOSE", "COALESCE", "COLLECT", "COMMIT", "COPY", 
                             "COS", "COSH", "COT", "COUNT", "CREATE", "CURRENT_DATE", 
                             "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
                             "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                             "CURRENT_USER", "DATE", "DATETIME", "DAY", 
                             "DEC", "DECIMAL", "DEGREES", "DELETE", "DESC", 
                             "DESCENDING", "DETACH", "DISTINCT", "DOUBLE", 
                             "DROP", "DURATION", "DURATION_BETWEEN", "ELEMENT_ID", 
                             "ELSE", "END", "EXCEPT", "EXISTS", "EXP", "FALSE", 
                             "FILTER", "FINISH", "FLOAT", "FLOAT16", "FLOAT32", 
                             "FLOAT64", "FLOAT128", "FLOAT256", "FLOOR", 
                             "FOR", "FROM", "GROUP", "HAVING", "HOME_GRAPH", 
                             "HOME_PROPERTY_GRAPH", "HOME_SCHEMA", "HOUR", 
                             "IF", "IN", "INSERT", "INT", "INTEGER", "INT8", 
                             "INTEGER8", "INT16", "INTEGER16", "INT32", 
                             "INTEGER32", "INT64", "INTEGER64", "INT128", 
                             "INTEGER128", "INT256", "INTEGER256", "INTERSECT", 
                             "INTERVAL", "IS", "LEADING", "LET", "LIKE", 
                             "LIMIT", "LIST", "LN", "LOCAL", "LOCAL_DATETIME", 
                             "LOCAL_TIME", "LOCAL_TIMESTAMP", "LOG", "LOG10", 
                             "LOWER", "LTRIM", "MATCH", "MAX", "MIN", "MINUTE", 
                             "MOD", "MONTH", "NEXT", "NODETACH", "NORMALIZE", 
                             "NOT", "NULL", "NULLS", "NULLIF", "OCTET_LENGTH", 
                             "OF", "OFFSET", "OPEN", "OPTIONAL", "OR", "ORDER", 
                             "OTHERWISE", "PARAMETER", "PARAMETERS", "PATH", 
                             "PATH_LENGTH", "PATHS", "PERCENTILE_CONT", 
                             "PERCENTILE_DISC", "POWER", "PRECISION", "PROPERTY_EXISTS", 
                             "RADIANS", "REAL", "RECORD", "REMOVE", "REPLACE", 
                             "RESET", "RETURN", "ROLLBACK", "RTRIM", "SAME", 
                             "SCHEMA", "SECOND", "SELECT", "SESSION", "SET", 
                             "SIGNED", "SIN", "SINH", "SKIP_", "SMALL", 
                             "SMALLINT", "SQRT", "START", "STDDEV_POP", 
                             "STDDEV_SAMP", "STRING", "SUM", "TAN", "TANH", 
                             "THEN", "TIME", "TIMESTAMP", "TRAILING", "TRIM", 
                             "TRUE", "TYPED", "UBIGINT", "UINT", "UINT8", 
                             "UINT16", "UINT32", "UINT64", "UINT128", "UINT256", 
                             "UNION", "UNKNOWN", "UNSIGNED", "UPPER", "USE", 
                             "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", 
                             "VARIABLE", "WHEN", "WHERE", "WITH", "XOR", 
                             "YEAR", "YIELD", "ZONED", "ZONED_DATETIME", 
                             "ZONED_TIME", "AGGREGATE", "AGGREGATES", "ALTER", 
                             "CATALOG", "CLEAR", "CLONE", "CONSTRAINT", 
                             "CURRENT_ROLE", "DATA", "DIRECTORY", "EXACT", 
                             "EXISTING", "FUNCTION", "GQLSTATUS", "GRANT", 
                             "INSTANT", "LEFT", "NOTHING", "NUMERIC", "ON", 
                             "PARTITION", "PROCEDURE", "PRODUCT", "PROJECT", 
                             "QUERY", "RECORDS", "REFERENCE", "RENAME", 
                             "REVOKE", "RIGHT", "SUBSTRING", "TEMPORAL", 
                             "UNIQUE", "UNIT", "VALUES", "ACYCLIC", "BINDING", 
                             "BINDINGS", "CONNECTING", "DESTINATION", "DIFFERENT", 
                             "DIRECTED", "EDGE", "EDGES", "ELEMENT", "ELEMENTS", 
                             "FIRST", "GRAPH", "GROUPS", "KEEP", "LABEL", 
                             "LABELED", "LABELS", "LAST", "NFC", "NFD", 
                             "NFKC", "NFKD", "NO", "NODE", "NORMALIZED", 
                             "ONLY", "ORDINALITY", "PROPERTY", "READ", "RELATIONSHIP", 
                             "RELATIONSHIPS", "REPEATABLE", "SHORTEST", 
                             "SIMPLE", "SOURCE", "TABLE", "TEMP", "TIMEZONE", 
                             "TO", "TRAIL", "TRANSACTION", "TYPE", "UNDIRECTED", 
                             "VERTEX", "WALK", "WITHOUT", "WRITE", "ZONE", 
                             "INTERVAL_DAY", "INTERVAL_WEEK", "INTERVAL_MONTH", 
                             "INTERVAL_YEAR", "IF_NOT_EXISTS", "IF_EXISTS", 
                             "UNSIGNED_NUMERIC_LITERAL", "SIGNED_NUMERIC_LITERAL", 
                             "SIGN", "EXACT_NUMERIC_LITERAL", "EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                             "EXACT_UNSIGNED_INT", "APROXIMATE_NUMERIC_LITERAL", 
                             "APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                             "APROXIMATE_UNSIGNED_INT", "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                             "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", 
                             "FOUR_DIGIT", "DOUBLE_DIGIT", "UNSIGNED_INT", 
                             "UNSIGNED_DECIMAL_INT", "UNSIGNED_HEX_INT", 
                             "UNSIGNED_OCTAL_INT", "UNSIGNED_BINARY_INT", 
                             "BYTE_STRING_LITERAL", "SINGLE_QUOTED_STRING_LITERAL", 
                             "DOUBLE_QUOTED_STRING_LITERAL", "ACCENT_QUOTED_STRING_LITERAL", 
                             "SIMPLE_COMMENT_LITERAL", "BRACKETED_COMMNET_LITERAL", 
                             "WS", "WHITESPACE", "NEW_LINE", "CARRIAGE_RETURN", 
                             "RETURN_SIGN", "REGULAR_IDENTIFIER", "EXTENDED_IDENTIFIER", 
                             "START_CHARS", "CONTINUE_CHARS", "ESCAPED_CHARS", 
                             "ESCAPED_REVERSE_SOLIDUS", "ESCAPED_QUOTE", 
                             "ESCAPED_SOUBLE_QUOTE", "ESCAPED_GRAVE_ACCENT", 
                             "ESCAPED_TAB", "ESCAPED_BACKSPACE", "ESCAPED_NEW_LINE", 
                             "ESCAPED_CARRIAGE_RETURN", "ESCAPED_FORM_FEED", 
                             "ESCAPED_UNICODE4_DIGIT_VALUE", "ESCAPED_UNICODE6_DIGIT_VALUE", 
                             "GQL_LANGUAGE_CHAR", "GQL_SPECIAL_CHAR" ];
    static ruleNames = [ "gqlProgram", "activity", "programActivity", "sessionActivity", 
                         "sessionSetCommand", "sessionSetSchemaClause", 
                         "sessionSetGraphClause", "sessionSetTimeZoneClause", 
                         "setTimeZoneValue", "sessionSetParameterClause", 
                         "sessionSetGraphParameterClause", "sessionSetBindingTableParameterCalues", 
                         "sessionSetValuesParameterClause", "sessionSetParameterName", 
                         "sessionResetCommand", "sessionResetArguments", 
                         "sessionCloseCommand", "transactionActivity", "transactionStartCommand", 
                         "transactionEndCommand", "transactionCharacteristics", 
                         "transactionMode", "transactionAccessMode", "implDefinedAccessMode", 
                         "nestedProcedureSpec", "procedureSpec", "nestedDataModProcedureSpec", 
                         "nestedQuerySpec", "procedureBody", "bindingVarDefBlock", 
                         "bindingVarDef", "statmentBlock", "statement", 
                         "nextStatment", "graphVarDef", "optTypedGraphInit", 
                         "graphInit", "bindingTableVarDef", "optTypedBindingTableInit", 
                         "bindingTableInit", "valueVarDef", "optTypedValueInit", 
                         "valueInit", "graphExpr", "currentGraph", "nestedGraphQuerySpec", 
                         "bindingTableExpr", "nestedBindingTableQuerySpec", 
                         "objectExprPrimary", "linearCatalogModStatment", 
                         "simpleCatalogModStatment", "primitiveCatalogModStatment", 
                         "createSchemeStatment", "dropSchemeStatment", "createGraphStatment", 
                         "createOnlyGraphStatment", "createOrReplaceGraphStatment", 
                         "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
                         "graphSource", "dropGraphStatment", "createGraphTypeStatment", 
                         "graphTypeSource", "copyOfGraphType", "dropGraphTypeStatment", 
                         "callCatalogModProcedureStatment", "linearDataModStatment", 
                         "focusedLinearDataModStatment", "focusedLinearDataModStatmentBody", 
                         "focusedNestedDataModProcedureSpec", "ambientLinearDataModStatment", 
                         "ambientLinearDataModStatmentBody", "simpleLinearDataAccessingStatment", 
                         "simpleDataAccessingStatment", "simpleDataModStatment", 
                         "primitiveDataModStatment", "insertStatment", "setStatment", 
                         "setItemList", "setItem", "setPropertyItem", "setAllPropertiesItem", 
                         "setLabelItem", "labelSetSpec", "removeStatment", 
                         "removeItemList", "removeItem", "removePropertyItem", 
                         "removeLabelItem", "deleteStatment", "deleteItemList", 
                         "deleteItem", "callDataModProcedureStatment", "compositeQueryStatment", 
                         "compositeQueryExpr", "queryConjunction", "setOperator", 
                         "compositeQueryPrimary", "linearQueryStatment", 
                         "focusedLinearQueryStatment", "focusedLinearQueryStatmentPart", 
                         "focusedLinearQueryAndPrimitiveResultStatmentPart", 
                         "focusedPrimitiveResultStatment", "focusedNestedQuerySpec", 
                         "ambientLinearQueryStatment", "simpleLinearQueryStatment", 
                         "simpleQueryStatment", "primitiveQueryStatment", 
                         "matchStatment", "simpleMatchStatment", "optionalMatchStatment", 
                         "optionalOperand", "matchStatmentBlock", "callQueryStatment", 
                         "filterStatment", "letStatment", "letVarDefList", 
                         "letVarDef", "forStatment", "forItem", "forItemAlias", 
                         "forOrdinalityOrOffset", "orderByAndPageStatment", 
                         "primitiveResultStatment", "returnStatment", "returnStatmentBody", 
                         "returnItemList", "returnItem", "returnItemAlias", 
                         "selectStatment", "selectItemList", "selectItem", 
                         "selectItemAlias", "havingClause", "selectStatmentBody", 
                         "selectGraphMatchList", "selectGraphMatch", "selectQuerySpec", 
                         "callProcedureStatment", "procedureCall", "inlineProcedureCall", 
                         "varScopeClause", "bindingVarRefList", "namedProcedureCall", 
                         "procedureArgList", "procedureArg", "useGraphClause", 
                         "atSchemaClause", "bindingVarRef", "elementVarRef", 
                         "pathVarRef", "parameter", "graphPatternBindingTable", 
                         "graphPatternYieldClause", "graphPatternYieldItemList", 
                         "graphPatternYieldItem", "graphPattern", "matchMode", 
                         "repeatableElementsMatchMode", "differentEdgesMatchMode", 
                         "elementBindingsOrElements", "edgeBindingsOrEdges", 
                         "pathPatternList", "pathPattern", "pathVarDeclaration", 
                         "keepClause", "graphPatternWhereClause", "pathPatternPrefix", 
                         "pathModePrefix", "pathMode", "pathSearchPrefix", 
                         "allPathSearch", "pathOrPaths", "anyPathSearch", 
                         "numberOfPaths", "shortestPathSearch", "allShortestPathSearch", 
                         "anyShortestPathSearch", "countedShortestPathSearch", 
                         "countedShortestGroupSearch", "groupOrGroups", 
                         "numberOfGroups", "pathPatternExpr", "pathMultisetAlternation", 
                         "pathPatternUnion", "pathTerm", "pathFactor", "quantifiedPathPrimary", 
                         "questionedPathPrimary", "pathPrimary", "elementPattern", 
                         "nodePattern", "elementPatternFiller", "elementVarDeclaration", 
                         "isLabelExpr", "elementPatternPredicate", "elementPatternWhereClause", 
                         "elementPropertySpec", "propertyKeyValuePairList", 
                         "propertyKeyValuePair", "edgePattern", "fullEdgePattern", 
                         "fullEdgePointingLeft", "fullEdgeUndirected", "fullEdgePointingRight", 
                         "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
                         "fullEdgeLeftOrRight", "fullEdgeAnyDirection", 
                         "abbreviatedEdgePattern", "parenthesizedPathPatternExpr", 
                         "subpathVarDeclaration", "parenthesizedPathPatternWhereClause", 
                         "insertGraphPattern", "insertGraphPatternList", 
                         "insertPathPattern", "insertNodePattern", "insertEdgePattern", 
                         "insertEdgePointingLeft", "insertEdgePointingRight", 
                         "insertEdgeUndirected", "insertElementPatternFiller", 
                         "labelAndPropertySetSpec", "labelExpr", "labelTerm", 
                         "labelFactor", "labelNegation", "labelPrimary", 
                         "wildcardLabel", "parenthesizedLabelExpr", "graphPatternQuantifier", 
                         "fixedQuantifier", "generalQuantifier", "lowerBound", 
                         "upperBound", "simplifiedPathPatternExpr", "simplifiedDefaultingLeft", 
                         "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
                         "simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
                         "simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
                         "simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
                         "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", 
                         "simplifiedQuntified", "simplifiedQuestioned", 
                         "simplifiedTertiary", "simplifiedDirectionOverride", 
                         "simplifiedOverrideLeft", "simplifiedOverrideUndirected", 
                         "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
                         "simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
                         "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
                         "simplifiedNegation", "simplifiedPrimary", "whereClause", 
                         "yieldClause", "yieldItemList", "yieldItem", "yieldItemName", 
                         "yieldItemAlias", "groupByClause", "groupingElementList", 
                         "groupingElement", "emptyGroupingSet", "orderByClause", 
                         "aggregateFunction", "generalSetFunction", "generalSetFunctionType", 
                         "setQuantifier", "binarySetFunction", "dependantValueExpr", 
                         "independentValueExpr", "sortSpecList", "sortSpec", 
                         "sortKey", "orderingSpec", "nullOrdering", "limitClause", 
                         "offsetClause", "offsetSynonym", "graphTypeSpec", 
                         "nestedGraphTypeSpec", "graphTypeSpecBody", "elementTypeDefList", 
                         "elementTypeDef", "nodeTypeDef", "nodeTypePattern", 
                         "nodeTypePhrase", "nodeTypeName", "nodeTypeFiller", 
                         "nodeTypeLabelSetDef", "nodeTypePropertyTypeSetDef", 
                         "edgeTypeDef", "edgeTypePattern", "edgeTypePhrase", 
                         "edgeTypeName", "edgeTypeFiller", "edgeTypeLabelSetDef", 
                         "edgeTypePropertyTypeSetDef", "fullEdgeTypePattern", 
                         "fullEdgeTypePatternPointingRight", "fullEdgeTypePatternPointingLeft", 
                         "fullEdgeTypePatternUndirected", "arcTypePointingRight", 
                         "arcTypePointingLeft", "arcTypeUndirected", "arcTypeFiller", 
                         "abbreviatedEdgeTypePattern", "abbreviatedEdgeTypePatternPointingRight", 
                         "abbreviatedEdgeTypePatternPointingLeft", "abbreviatedEdgeTypePatternUndirected", 
                         "nodeTypeRef", "sourceNodeTypeRef", "destinationNodeTypeRef", 
                         "edgeKind", "endpointDef", "enpointPairDef", "endpointPairDefPointingRight", 
                         "endpointPairDefPointingLeft", "endpointPairDefUndirected", 
                         "connectorPointingRight", "connectorPointingLeft", 
                         "connectorUndirected", "sourceNodeTypeName", "destinationNodeTypeName", 
                         "labelSetDef", "propertyTypeSetDef", "propertyTypeDefList", 
                         "propertyTypeDef", "propertyValueType", "bindingTableType", 
                         "valueType", "typed", "predefinedType", "booleanType", 
                         "charStringType", "byteStringType", "minLength", 
                         "maxLength", "fixedLength", "numericType", "exactNumericType", 
                         "binaryExactNumericType", "signedBinaryExactNumericType", 
                         "unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", 
                         "decimalExactNumericType", "precision", "scale", 
                         "approximateNumericType", "temporalType", "temporalInstantType", 
                         "temporalDurationType", "dateTimeType", "localDateTimeType", 
                         "dateType", "timeType", "localTimeType", "durationType", 
                         "refValueType", "graphRefValueType", "openGraphRefValueType", 
                         "closedGraphRefValueType", "bindingTableRefValueType", 
                         "nodeRefValueType", "openNodeRefValueType", "closedNodeRefValueType", 
                         "edgeRefValueType", "openEdgeRefValueType", "closedEdgeRefValueType", 
                         "constructedType", "listValueType", "listValueTypeName", 
                         "listValueTypeNameSynonym", "recordType", "fieldTypesSpec", 
                         "fieldTypeList", "dynamicUnionType", "openDynamicUnionType", 
                         "dynamicPropertyValueType", "closedDynamicUnionType", 
                         "componentTypeList", "componentType", "pathValueType", 
                         "notNull", "fieldType", "schemaRef", "absoluteCatalogSchemaRef", 
                         "catalogSchemaParentAndName", "relativeCatalogSchemaRef", 
                         "predefinedSchemaRef", "absoluteDirectoryPath", 
                         "relativeDirectoryPath", "simpleDirectoryPath", 
                         "graphRef", "catalogGraphParentAndName", "homeGraph", 
                         "graphTypeRef", "catalogGraphTypeParentAndName", 
                         "bindingTableRef", "catalogBindingTableParentAndName", 
                         "procedureRef", "catalogProcedureParentAndName", 
                         "catalogObjectParentRef", "refParameter", "externalObjectRef", 
                         "searchCondition", "predicate", "comparisonPredicate", 
                         "comparisonPredicatePart2", "comparisonOperator", 
                         "comparisonPredicand", "existsPredicate", "nullPredicate", 
                         "nullPredicatePart2", "valueTypePredicate", "valueTypePredicatePart2", 
                         "normalizedPredicate", "normalizedPredicatePart2", 
                         "directedPredicate", "directedPredicatePart2", 
                         "labeledPredicate", "labeledPredicatePart2", "isLabeledOrColon", 
                         "sourceOrDestinationPredicate", "nodeRef", "sourcePredicatePart2", 
                         "destinationPredicatePart2", "edgeRef", "allDifferentPredicate", 
                         "samePredicate", "propertyExistsPredicate", "valueSpec", 
                         "unsignedValueSpec", "unsignedIntSpec", "parameterValueSpec", 
                         "predefinedParameter", "valueExpr", "commonValueExpr", 
                         "refValueExpr", "graphRefValueExpr", "bindingTableRefValueExpr", 
                         "nodeRefValueExpr", "edgeRefValueExpr", "recordValueExpr", 
                         "aggregatingValueExpr", "booleanValueExpr", "booleanTerm", 
                         "booleanFactor", "booleanTest", "truthValue", "booleanPrimary", 
                         "booleanPredicand", "paranthisedBooleanValueExpr", 
                         "numericValueExpr", "term", "factor", "numericPrimary", 
                         "valueExprPrimary", "parenthesizedValueExpr", "nonParenthesizedValueExprPrimary", 
                         "nonParenthesizedValueExprPrimarySpecialCase", 
                         "collectionValueConstructor", "numericValueFunction", 
                         "lengthExpr", "charLengthExpr", "byteLengthExpr", 
                         "pathLengthExpr", "absoluteValueExpr", "modulusExpr", 
                         "numericValueExprDividen", "numericValueExprDivisor", 
                         "trigonometricFunction", "trigonometricFunctionName", 
                         "logarithmFunction", "generalLogarithmFunction", 
                         "generalLogarithmBase", "generalLogarithmArgument", 
                         "commonLogarithmFunction", "naturalLogarithmFunction", 
                         "exponentialFunction", "powerFunction", "numericValueExprBase", 
                         "numericValueExprExponent", "squareRootFunciton", 
                         "floorFunction", "ceilingFunction", "stringValueExpr", 
                         "charStringValueExpr", "charStringConcatenation", 
                         "charStringFactor", "charStringPrimary", "byteStringValueExpr", 
                         "byteStringFactor", "byteStringPrimary", "byteStringConcatenation", 
                         "stringValueFunction", "charStringFunction", "foldFunction", 
                         "trimFunction", "singleCharTrimFunction", "multiCharTrimFunction", 
                         "trimOperands", "trimSource", "trimSpec", "trimCharString", 
                         "normalizeFunction", "normalForm", "byteStringFunction", 
                         "byteStrinTrimFunction", "byteStringTrimOperands", 
                         "byteStringTrimSource", "trimByteString", "stringLength", 
                         "dateTimeValueExpr", "dateTimeTerm", "dateTimeFactor", 
                         "dateTimePrimary", "dateTimeValueFunction", "dateFunction", 
                         "timeFunction", "localTimeFunction", "dateTimeFunction", 
                         "localDatetimeFunction", "dateFunctionParameters", 
                         "timeFunctionParameters", "dateTimeFunctionParameters", 
                         "durationValueExpr", "dateTimeSubtraction", "dateTimeSubtractionParameters", 
                         "durationTerm", "durationFactor", "durationPrimary", 
                         "durationValueExpr1", "durationTerm1", "durationTerm2", 
                         "dateTimeValueExpr1", "dateTimeValueExpr2", "durationValueFunction", 
                         "durationFunction", "durationFunctionParameters", 
                         "durationAbsoluteValueFunction", "listValueExpr", 
                         "listConcatenation", "listPrimary", "listValueFunction", 
                         "trimListFunction", "elementsFunction", "listValueConstructor", 
                         "listValueConstructorByEnumeration", "listElementList", 
                         "listElement", "recordValueConstructor", "fieldsSpec", 
                         "fieldList", "field", "pathValueExpr", "pathValueConcatenation", 
                         "pathValuePrimary", "pathValueConstructor", "pathValueConstructorByEnumeration", 
                         "pathElementList", "pathElementListStart", "pathElementListStep", 
                         "propertyRef", "propertySource", "valueQueryExpr", 
                         "caseExpr", "caseAbbreviation", "caseSpecification", 
                         "simpleCase", "searchedCase", "simpleWhenClause", 
                         "searchedWhenClause", "elseClause", "caseOperand", 
                         "whenOperandList", "whenOperand", "result", "resultExpr", 
                         "castSpec", "castOperand", "castTarget", "elementIdFunction", 
                         "letValueExpr", "literal", "generalLiteral", "predefinedTypeLiteral", 
                         "unsignedLiteral", "booleanLiteral", "characterStringLiteral", 
                         "unbrokenCharacterStringLiteral", "singleQuotedCharacterSequence", 
                         "doubleQuotedCharacterSequence", "accentQuotedCharacterSequence", 
                         "noEscape", "unbrokenSingleQuotedCharacterSequence", 
                         "unbrokenDoubleQuotedCharacterSequence", "unbrokenAccentQuotedCharacterSequence", 
                         "temporalLiteral", "dateLiteral", "timeLiteral", 
                         "dateTimeLiteral", "dateString", "timeString", 
                         "dateTimeString", "sqlDateTimeLiteral", "durationLiteral", 
                         "durationString", "sqlIntervalLiteral", "sqlIntervalType", 
                         "nullLiteral", "listLiteral", "recordLiteral", 
                         "objectName", "objectNameOrBindingVar", "directoryName", 
                         "schemaName", "graphName", "delimitedGraphName", 
                         "graphTypeName", "elementTypeName", "bindingTableName", 
                         "delimitedBindingTableName", "procedureName", "labelName", 
                         "propertyName", "fieldName", "parameterName", "var", 
                         "graphVar", "graphPatternVar", "pathOrSubpathVar", 
                         "elementVar", "pathVar", "subpathVar", "bindingTableVar", 
                         "valueVar", "bindingVar", "token", "nonDelimiterToken", 
                         "identifier", "separatedIdentifier", "nonDelimitedIdentifier", 
                         "delimitedIdentifier", "keyWord", "reservedWord", 
                         "preReservedWord", "nonReservedWord", "delimiterToken", 
                         "bidirectionalControlCharacter", "comment", "edgeSynonym", 
                         "edgesSynonym", "nodeSynonym" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GqlParser.ruleNames;
        this.literalNames = GqlParser.literalNames;
        this.symbolicNames = GqlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 95:
    	    		return this.compositeQueryExpr_sempred(localctx, predIndex);
    	case 457:
    	    		return this.booleanTerm_sempred(localctx, predIndex);
    	case 524:
    	    		return this.dateTimeValueExpr_sempred(localctx, predIndex);
    	case 537:
    	    		return this.durationValueExpr_sempred(localctx, predIndex);
    	case 540:
    	    		return this.durationTerm_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    compositeQueryExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dateTimeValueExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    durationValueExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    durationTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 3);
    		case 7:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	gqlProgram() {
	    let localctx = new GqlProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GqlParser.RULE_gqlProgram);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===40 || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & 1090527233) !== 0) || ((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & 4218889) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & 2621441) !== 0) || ((((_la - 186)) & ~0x1f) == 0 && ((1 << (_la - 186)) & 688257) !== 0) || ((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & 560669) !== 0) || _la===265 || _la===267 || ((((_la - 316)) & ~0x1f) == 0 && ((1 << (_la - 316)) & 134219777) !== 0) || _la===351) {
	            this.state = 1330;
	            this.activity();
	            this.state = 1332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===47) {
	                this.state = 1331;
	                this.match(GqlParser.SEMICOLON);
	            }

	            this.state = 1338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1339;
	        this.match(GqlParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activity() {
	    let localctx = new ActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GqlParser.RULE_activity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1341;
	        this.programActivity();
	        this.state = 1343;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        if(la_===1) {
	            this.state = 1342;
	            this.sessionCloseCommand();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programActivity() {
	    let localctx = new ProgramActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GqlParser.RULE_programActivity);
	    try {
	        this.state = 1347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 222:
	        case 230:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1345;
	            this.sessionActivity();
	            break;
	        case 40:
	        case 75:
	        case 88:
	        case 99:
	        case 105:
	        case 122:
	        case 125:
	        case 135:
	        case 136:
	        case 144:
	        case 154:
	        case 173:
	        case 175:
	        case 186:
	        case 193:
	        case 201:
	        case 203:
	        case 205:
	        case 220:
	        case 223:
	        case 224:
	        case 229:
	        case 231:
	        case 235:
	        case 239:
	        case 265:
	        case 267:
	        case 316:
	        case 327:
	        case 343:
	        case 351:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1346;
	            this.transactionActivity();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionActivity() {
	    let localctx = new SessionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GqlParser.RULE_sessionActivity);
	    try {
	        this.state = 1351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1349;
	            this.sessionSetCommand();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1350;
	            this.sessionResetCommand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetCommand() {
	    let localctx = new SessionSetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GqlParser.RULE_sessionSetCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        this.match(GqlParser.SESSION);
	        this.state = 1354;
	        this.match(GqlParser.SET);
	        this.state = 1359;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1355;
	            this.sessionSetSchemaClause();
	            break;

	        case 2:
	            this.state = 1356;
	            this.sessionSetGraphClause();
	            break;

	        case 3:
	            this.state = 1357;
	            this.sessionSetTimeZoneClause();
	            break;

	        case 4:
	            this.state = 1358;
	            this.sessionSetParameterClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetSchemaClause() {
	    let localctx = new SessionSetSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GqlParser.RULE_sessionSetSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1361;
	        this.match(GqlParser.SCHEMA);
	        this.state = 1362;
	        this.schemaRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphClause() {
	    let localctx = new SessionSetGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GqlParser.RULE_sessionSetGraphClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 1364;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1367;
	        this.match(GqlParser.GRAPH);
	        this.state = 1368;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetTimeZoneClause() {
	    let localctx = new SessionSetTimeZoneClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GqlParser.RULE_sessionSetTimeZoneClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1370;
	        this.match(GqlParser.TIME);
	        this.state = 1371;
	        this.match(GqlParser.ZONE);
	        this.state = 1372;
	        this.setTimeZoneValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTimeZoneValue() {
	    let localctx = new SetTimeZoneValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GqlParser.RULE_setTimeZoneValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this.stringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterClause() {
	    let localctx = new SessionSetParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GqlParser.RULE_sessionSetParameterClause);
	    try {
	        this.state = 1379;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1376;
	            this.sessionSetGraphParameterClause();
	            break;
	        case 316:
	        case 351:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1377;
	            this.sessionSetBindingTableParameterCalues();
	            break;
	        case 267:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1378;
	            this.sessionSetValuesParameterClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphParameterClause() {
	    let localctx = new SessionSetGraphParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GqlParser.RULE_sessionSetGraphParameterClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 1381;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1384;
	        this.match(GqlParser.GRAPH);
	        this.state = 1385;
	        this.sessionSetParameterName();
	        this.state = 1386;
	        this.optTypedGraphInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetBindingTableParameterCalues() {
	    let localctx = new SessionSetBindingTableParameterCaluesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GqlParser.RULE_sessionSetBindingTableParameterCalues);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===316) {
	            this.state = 1388;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 1391;
	        this.match(GqlParser.TABLE);
	        this.state = 1392;
	        this.sessionSetParameterName();
	        this.state = 1393;
	        this.optTypedBindingTableInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetValuesParameterClause() {
	    let localctx = new SessionSetValuesParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GqlParser.RULE_sessionSetValuesParameterClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1395;
	        this.match(GqlParser.VALUE);
	        this.state = 1396;
	        this.sessionSetParameterName();
	        this.state = 1397;
	        this.optTypedValueInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterName() {
	    let localctx = new SessionSetParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GqlParser.RULE_sessionSetParameterName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1399;
	        this.parameterName();
	        this.state = 1401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 1400;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetCommand() {
	    let localctx = new SessionResetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GqlParser.RULE_sessionResetCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===230) {
	            this.state = 1403;
	            this.match(GqlParser.SESSION);
	        }

	        this.state = 1406;
	        this.match(GqlParser.RESET);
	        this.state = 1407;
	        this.sessionResetArguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetArguments() {
	    let localctx = new SessionResetArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GqlParser.RULE_sessionResetArguments);
	    var _la = 0; // Token type
	    try {
	        this.state = 1422;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	        case 95:
	        case 208:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===66) {
	                this.state = 1409;
	                this.match(GqlParser.ALL);
	            }

	            this.state = 1412;
	            _la = this._input.LA(1);
	            if(!(_la===95 || _la===208)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 227:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1413;
	            this.match(GqlParser.SCHEMA);
	            break;
	        case 327:
	        case 343:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===343) {
	                this.state = 1414;
	                this.match(GqlParser.PROPERTY);
	            }

	            this.state = 1417;
	            this.match(GqlParser.GRAPH);
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1418;
	            this.match(GqlParser.TIME);
	            this.state = 1419;
	            this.match(GqlParser.ZONE);
	            break;
	        case 207:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1420;
	            this.match(GqlParser.PARAMETER);
	            this.state = 1421;
	            this.parameterName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionCloseCommand() {
	    let localctx = new SessionCloseCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GqlParser.RULE_sessionCloseCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1425;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===230) {
	            this.state = 1424;
	            this.match(GqlParser.SESSION);
	        }

	        this.state = 1427;
	        this.match(GqlParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionActivity() {
	    let localctx = new TransactionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GqlParser.RULE_transactionActivity);
	    try {
	        this.state = 1441;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 239:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1429;
	            this.transactionStartCommand();
	            this.state = 1434;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	            if(la_===1) {
	                this.state = 1430;
	                this.procedureSpec();
	                this.state = 1432;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	                if(la_===1) {
	                    this.state = 1431;
	                    this.transactionEndCommand();

	                }

	            }
	            break;
	        case 40:
	        case 75:
	        case 88:
	        case 105:
	        case 122:
	        case 125:
	        case 135:
	        case 136:
	        case 144:
	        case 154:
	        case 173:
	        case 175:
	        case 186:
	        case 193:
	        case 201:
	        case 203:
	        case 205:
	        case 220:
	        case 223:
	        case 229:
	        case 231:
	        case 235:
	        case 265:
	        case 267:
	        case 316:
	        case 327:
	        case 343:
	        case 351:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1436;
	            this.procedureSpec();
	            this.state = 1438;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	            if(la_===1) {
	                this.state = 1437;
	                this.transactionEndCommand();

	            }
	            break;
	        case 99:
	        case 224:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1440;
	            this.transactionEndCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionStartCommand() {
	    let localctx = new TransactionStartCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GqlParser.RULE_transactionStartCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.match(GqlParser.START);
	        this.state = 1444;
	        this.match(GqlParser.TRANSACTION);
	        this.state = 1446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===344) {
	            this.state = 1445;
	            this.transactionCharacteristics();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionEndCommand() {
	    let localctx = new TransactionEndCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GqlParser.RULE_transactionEndCommand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1448;
	        _la = this._input.LA(1);
	        if(!(_la===99 || _la===224)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionCharacteristics() {
	    let localctx = new TransactionCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GqlParser.RULE_transactionCharacteristics);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this.transactionMode();
	        this.state = 1453; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1451;
	            this.match(GqlParser.COMMA);
	            this.state = 1452;
	            this.transactionMode();
	            this.state = 1455; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GqlParser.RULE_transactionMode);
	    try {
	        this.state = 1459;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 344:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1457;
	            this.transactionAccessMode();
	            break;
	        case -1:
	        case 34:
	        case 40:
	        case 47:
	        case 75:
	        case 88:
	        case 96:
	        case 99:
	        case 105:
	        case 122:
	        case 125:
	        case 135:
	        case 136:
	        case 144:
	        case 154:
	        case 173:
	        case 175:
	        case 186:
	        case 193:
	        case 201:
	        case 203:
	        case 205:
	        case 220:
	        case 222:
	        case 223:
	        case 224:
	        case 229:
	        case 230:
	        case 231:
	        case 235:
	        case 239:
	        case 265:
	        case 267:
	        case 316:
	        case 327:
	        case 343:
	        case 351:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1458;
	            this.implDefinedAccessMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionAccessMode() {
	    let localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, GqlParser.RULE_transactionAccessMode);
	    try {
	        this.state = 1465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1461;
	            this.match(GqlParser.READ);
	            this.state = 1462;
	            this.match(GqlParser.ONLY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1463;
	            this.match(GqlParser.READ);
	            this.state = 1464;
	            this.match(GqlParser.WRITE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implDefinedAccessMode() {
	    let localctx = new ImplDefinedAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GqlParser.RULE_implDefinedAccessMode);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedProcedureSpec() {
	    let localctx = new NestedProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, GqlParser.RULE_nestedProcedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1469;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1470;
	        this.procedureSpec();
	        this.state = 1471;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSpec() {
	    let localctx = new ProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GqlParser.RULE_procedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1473;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedDataModProcedureSpec() {
	    let localctx = new NestedDataModProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GqlParser.RULE_nestedDataModProcedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1475;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1476;
	        this.procedureBody();
	        this.state = 1477;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedQuerySpec() {
	    let localctx = new NestedQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GqlParser.RULE_nestedQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1479;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1480;
	        this.procedureBody();
	        this.state = 1481;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureBody() {
	    let localctx = new ProcedureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GqlParser.RULE_procedureBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 1483;
	            this.atSchemaClause();
	        }

	        this.state = 1487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===267 || ((((_la - 316)) & ~0x1f) == 0 && ((1 << (_la - 316)) & 134219777) !== 0) || _la===351) {
	            this.state = 1486;
	            this.bindingVarDefBlock();
	        }

	        this.state = 1489;
	        this.statmentBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarDefBlock() {
	    let localctx = new BindingVarDefBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GqlParser.RULE_bindingVarDefBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1492; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1491;
	            this.bindingVarDef();
	            this.state = 1494; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===267 || ((((_la - 316)) & ~0x1f) == 0 && ((1 << (_la - 316)) & 134219777) !== 0) || _la===351);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarDef() {
	    let localctx = new BindingVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GqlParser.RULE_bindingVarDef);
	    try {
	        this.state = 1499;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1496;
	            this.graphVarDef();
	            break;
	        case 316:
	        case 351:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1497;
	            this.bindingTableVarDef();
	            break;
	        case 267:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1498;
	            this.valueVarDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statmentBlock() {
	    let localctx = new StatmentBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GqlParser.RULE_statmentBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1501;
	        this.statement();
	        this.state = 1505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===192) {
	            this.state = 1502;
	            this.nextStatment();
	            this.state = 1507;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GqlParser.RULE_statement);
	    try {
	        this.state = 1511;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1508;
	            this.linearCatalogModStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1509;
	            this.linearDataModStatment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1510;
	            this.compositeQueryStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nextStatment() {
	    let localctx = new NextStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GqlParser.RULE_nextStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1513;
	        this.match(GqlParser.NEXT);
	        this.state = 1515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276) {
	            this.state = 1514;
	            this.yieldClause();
	        }

	        this.state = 1517;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVarDef() {
	    let localctx = new GraphVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GqlParser.RULE_graphVarDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 1519;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1522;
	        this.match(GqlParser.GRAPH);
	        this.state = 1523;
	        this.graphVar();
	        this.state = 1524;
	        this.optTypedGraphInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedGraphInit() {
	    let localctx = new OptTypedGraphInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GqlParser.RULE_optTypedGraphInit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33 || _la===202 || _la===252 || _la===327 || _la===343) {
	            this.state = 1527;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===252) {
	                this.state = 1526;
	                this.typed();
	            }

	            this.state = 1529;
	            this.graphRefValueType();
	        }

	        this.state = 1532;
	        this.graphInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphInit() {
	    let localctx = new GraphInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GqlParser.RULE_graphInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        this.match(GqlParser.EQUALS);
	        this.state = 1535;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVarDef() {
	    let localctx = new BindingTableVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GqlParser.RULE_bindingTableVarDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===316) {
	            this.state = 1537;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 1540;
	        this.match(GqlParser.TABLE);
	        this.state = 1541;
	        this.bindingTableVar();
	        this.state = 1542;
	        this.optTypedBindingTableInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedBindingTableInit() {
	    let localctx = new OptTypedBindingTableInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GqlParser.RULE_optTypedBindingTableInit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33 || _la===252 || _la===316 || _la===351) {
	            this.state = 1545;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===252) {
	                this.state = 1544;
	                this.typed();
	            }

	            this.state = 1547;
	            this.bindingTableRefValueType();
	        }

	        this.state = 1550;
	        this.bindingTableInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableInit() {
	    let localctx = new BindingTableInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GqlParser.RULE_bindingTableInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        this.match(GqlParser.EQUALS);
	        this.state = 1553;
	        this.bindingTableExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVarDef() {
	    let localctx = new ValueVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GqlParser.RULE_valueVarDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1555;
	        this.match(GqlParser.VALUE);
	        this.state = 1556;
	        this.valueVar();
	        this.state = 1557;
	        this.optTypedValueInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedValueInit() {
	    let localctx = new OptTypedValueInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GqlParser.RULE_optTypedValueInit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & 2177) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & 278019) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & 1056974873) !== 0) || ((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & 1082129921) !== 0) || ((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & 2164260865) !== 0) || ((((_la - 218)) & ~0x1f) == 0 && ((1 << (_la - 218)) & 1628192771) !== 0) || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & 33769983) !== 0) || ((((_la - 316)) & ~0x1f) == 0 && ((1 << (_la - 316)) & 679479393) !== 0) || ((((_la - 351)) & ~0x1f) == 0 && ((1 << (_la - 351)) & 385) !== 0)) {
	            this.state = 1560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===252) {
	                this.state = 1559;
	                this.typed();
	            }

	            this.state = 1562;
	            this.valueType();
	        }

	        this.state = 1565;
	        this.valueInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueInit() {
	    let localctx = new ValueInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GqlParser.RULE_valueInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1567;
	        this.match(GqlParser.EQUALS);
	        this.state = 1568;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphExpr() {
	    let localctx = new GraphExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GqlParser.RULE_graphExpr);
	    try {
	        this.state = 1575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1570;
	            this.nestedGraphQuerySpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1571;
	            this.objectExprPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1572;
	            this.graphRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1573;
	            this.objectNameOrBindingVar();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1574;
	            this.currentGraph();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentGraph() {
	    let localctx = new CurrentGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GqlParser.RULE_currentGraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1577;
	        _la = this._input.LA(1);
	        if(!(_la===107 || _la===108)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphQuerySpec() {
	    let localctx = new NestedGraphQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GqlParser.RULE_nestedGraphQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1579;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableExpr() {
	    let localctx = new BindingTableExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GqlParser.RULE_bindingTableExpr);
	    try {
	        this.state = 1585;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1581;
	            this.nestedBindingTableQuerySpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1582;
	            this.objectExprPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1583;
	            this.bindingTableRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1584;
	            this.objectNameOrBindingVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedBindingTableQuerySpec() {
	    let localctx = new NestedBindingTableQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GqlParser.RULE_nestedBindingTableQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1587;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectExprPrimary() {
	    let localctx = new ObjectExprPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GqlParser.RULE_objectExprPrimary);
	    try {
	        this.state = 1598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1589;
	            this.match(GqlParser.VARIABLE);
	            this.state = 1590;
	            this.valueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1591;
	            this.parenthesizedValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1592;
	            this.propertyRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1593;
	            this.unsignedValueSpec();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1594;
	            this.aggregateFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1595;
	            this.collectionValueConstructor();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1596;
	            this.valueQueryExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1597;
	            this.caseExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearCatalogModStatment() {
	    let localctx = new LinearCatalogModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GqlParser.RULE_linearCatalogModStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1601; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1600;
	        		this.simpleCatalogModStatment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1603; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,42, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCatalogModStatment() {
	    let localctx = new SimpleCatalogModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GqlParser.RULE_simpleCatalogModStatment);
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1605;
	            this.primitiveCatalogModStatment();
	            break;
	        case 88:
	        case 203:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1606;
	            this.callCatalogModProcedureStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveCatalogModStatment() {
	    let localctx = new PrimitiveCatalogModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GqlParser.RULE_primitiveCatalogModStatment);
	    try {
	        this.state = 1615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1609;
	            this.createSchemeStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1610;
	            this.createGraphStatment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1611;
	            this.createGraphTypeStatment();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1612;
	            this.dropSchemeStatment();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1613;
	            this.dropGraphStatment();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1614;
	            this.dropGraphTypeStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSchemeStatment() {
	    let localctx = new CreateSchemeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, GqlParser.RULE_createSchemeStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1617;
	        this.match(GqlParser.CREATE);
	        this.state = 1618;
	        this.match(GqlParser.SCHEMA);
	        this.state = 1620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 1619;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 1622;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSchemeStatment() {
	    let localctx = new DropSchemeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, GqlParser.RULE_dropSchemeStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1624;
	        this.match(GqlParser.DROP);
	        this.state = 1625;
	        this.match(GqlParser.SCHEMA);
	        this.state = 1627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 1626;
	            this.match(GqlParser.IF_EXISTS);
	        }

	        this.state = 1629;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphStatment() {
	    let localctx = new CreateGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, GqlParser.RULE_createGraphStatment);
	    try {
	        this.state = 1633;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1631;
	            this.createOnlyGraphStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1632;
	            this.createOrReplaceGraphStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createOnlyGraphStatment() {
	    let localctx = new CreateOnlyGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, GqlParser.RULE_createOnlyGraphStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1635;
	        this.match(GqlParser.CREATE);
	        this.state = 1637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 1636;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1639;
	        this.match(GqlParser.GRAPH);
	        this.state = 1641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 1640;
	            this.match(GqlParser.IF_NOT_EXISTS);
	        }

	        this.state = 1643;
	        this.catalogGraphParentAndName();
	        this.state = 1646;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 202:
	            this.state = 1644;
	            this.openGraphType();
	            break;
	        case 33:
	        case 35:
	        case 40:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 109:
	        case 150:
	        case 174:
	        case 252:
	        case 390:
	        case 391:
	        case 399:
	            this.state = 1645;
	            this.ofGraphType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 1648;
	            this.graphSource();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createOrReplaceGraphStatment() {
	    let localctx = new CreateOrReplaceGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, GqlParser.RULE_createOrReplaceGraphStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1651;
	        this.match(GqlParser.CREATE);
	        this.state = 1652;
	        this.match(GqlParser.OR);
	        this.state = 1653;
	        this.match(GqlParser.REPLACE);
	        this.state = 1655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 1654;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1657;
	        this.match(GqlParser.GRAPH);
	        this.state = 1658;
	        this.catalogGraphParentAndName();
	        this.state = 1661;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 202:
	            this.state = 1659;
	            this.openGraphType();
	            break;
	        case 33:
	        case 35:
	        case 40:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 109:
	        case 150:
	        case 174:
	        case 252:
	        case 390:
	        case 391:
	        case 399:
	            this.state = 1660;
	            this.ofGraphType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1664;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 1663;
	            this.graphSource();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphType() {
	    let localctx = new OpenGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, GqlParser.RULE_openGraphType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1666;
	        this.match(GqlParser.OPEN);
	        this.state = 1671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327 || _la===343) {
	            this.state = 1668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===343) {
	                this.state = 1667;
	                this.match(GqlParser.PROPERTY);
	            }

	            this.state = 1670;
	            this.match(GqlParser.GRAPH);
	        }

	        this.state = 1673;
	        this.match(GqlParser.TYPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofGraphType() {
	    let localctx = new OfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, GqlParser.RULE_ofGraphType);
	    var _la = 0; // Token type
	    try {
	        this.state = 1684;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1675;
	            this.graphTypeLikeGraph();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===252) {
	                this.state = 1676;
	                this.typed();
	            }

	            this.state = 1679;
	            this.graphTypeRef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===252) {
	                this.state = 1680;
	                this.typed();
	            }

	            this.state = 1683;
	            this.nestedGraphTypeSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeLikeGraph() {
	    let localctx = new GraphTypeLikeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, GqlParser.RULE_graphTypeLikeGraph);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1686;
	        this.match(GqlParser.LIKE);
	        this.state = 1687;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSource() {
	    let localctx = new GraphSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, GqlParser.RULE_graphSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1689;
	        this.match(GqlParser.AS);
	        this.state = 1690;
	        this.match(GqlParser.COPY);
	        this.state = 1691;
	        this.match(GqlParser.OF);
	        this.state = 1692;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphStatment() {
	    let localctx = new DropGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, GqlParser.RULE_dropGraphStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1694;
	        this.match(GqlParser.DROP);
	        this.state = 1696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 1695;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1698;
	        this.match(GqlParser.GRAPH);
	        this.state = 1700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 1699;
	            this.match(GqlParser.IF_EXISTS);
	        }

	        this.state = 1702;
	        this.catalogGraphParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphTypeStatment() {
	    let localctx = new CreateGraphTypeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, GqlParser.RULE_createGraphTypeStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this.match(GqlParser.CREATE);
	        this.state = 1720;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	        case 343:
	            this.state = 1706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===343) {
	                this.state = 1705;
	                this.match(GqlParser.PROPERTY);
	            }

	            this.state = 1708;
	            this.match(GqlParser.GRAPH);
	            this.state = 1709;
	            this.match(GqlParser.TYPE);
	            this.state = 1711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===368) {
	                this.state = 1710;
	                this.match(GqlParser.IF_NOT_EXISTS);
	            }

	            break;
	        case 204:
	            this.state = 1713;
	            this.match(GqlParser.OR);
	            this.state = 1714;
	            this.match(GqlParser.REPLACE);
	            this.state = 1716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===343) {
	                this.state = 1715;
	                this.match(GqlParser.PROPERTY);
	            }

	            this.state = 1718;
	            this.match(GqlParser.GRAPH);
	            this.state = 1719;
	            this.match(GqlParser.TYPE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1722;
	        this.catalogGraphTypeParentAndName();
	        this.state = 1723;
	        this.graphTypeSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSource() {
	    let localctx = new GraphTypeSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, GqlParser.RULE_graphTypeSource);
	    var _la = 0; // Token type
	    try {
	        this.state = 1734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===71) {
	                this.state = 1725;
	                this.match(GqlParser.AS);
	            }

	            this.state = 1728;
	            this.copyOfGraphType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1729;
	            this.graphTypeLikeGraph();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===71) {
	                this.state = 1730;
	                this.match(GqlParser.AS);
	            }

	            this.state = 1733;
	            this.nestedGraphTypeSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyOfGraphType() {
	    let localctx = new CopyOfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, GqlParser.RULE_copyOfGraphType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1736;
	        this.match(GqlParser.COPY);
	        this.state = 1737;
	        this.match(GqlParser.OF);
	        this.state = 1740;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 109:
	        case 150:
	        case 390:
	        case 391:
	        case 399:
	            this.state = 1738;
	            this.graphTypeRef();
	            break;
	        case -1:
	        case 40:
	        case 41:
	        case 47:
	        case 75:
	        case 88:
	        case 96:
	        case 99:
	        case 105:
	        case 122:
	        case 125:
	        case 135:
	        case 136:
	        case 144:
	        case 154:
	        case 173:
	        case 175:
	        case 186:
	        case 192:
	        case 193:
	        case 201:
	        case 203:
	        case 205:
	        case 220:
	        case 222:
	        case 223:
	        case 224:
	        case 229:
	        case 230:
	        case 231:
	        case 235:
	        case 239:
	        case 265:
	        case 267:
	        case 316:
	        case 327:
	        case 343:
	        case 351:
	            this.state = 1739;
	            this.externalObjectRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphTypeStatment() {
	    let localctx = new DropGraphTypeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, GqlParser.RULE_dropGraphTypeStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1742;
	        this.match(GqlParser.DROP);
	        this.state = 1744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 1743;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 1746;
	        this.match(GqlParser.GRAPH);
	        this.state = 1747;
	        this.match(GqlParser.TYPE);
	        this.state = 1749;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===369) {
	            this.state = 1748;
	            this.match(GqlParser.IF_EXISTS);
	        }

	        this.state = 1751;
	        this.catalogGraphTypeParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callCatalogModProcedureStatment() {
	    let localctx = new CallCatalogModProcedureStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, GqlParser.RULE_callCatalogModProcedureStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1753;
	        this.callProcedureStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearDataModStatment() {
	    let localctx = new LinearDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, GqlParser.RULE_linearDataModStatment);
	    try {
	        this.state = 1757;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 265:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1755;
	            this.focusedLinearDataModStatment();
	            break;
	        case 40:
	        case 88:
	        case 122:
	        case 135:
	        case 144:
	        case 154:
	        case 173:
	        case 175:
	        case 186:
	        case 193:
	        case 201:
	        case 203:
	        case 205:
	        case 220:
	        case 231:
	        case 235:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1756;
	            this.ambientLinearDataModStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModStatment() {
	    let localctx = new FocusedLinearDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, GqlParser.RULE_focusedLinearDataModStatment);
	    try {
	        this.state = 1761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1759;
	            this.focusedLinearDataModStatmentBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1760;
	            this.focusedNestedDataModProcedureSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModStatmentBody() {
	    let localctx = new FocusedLinearDataModStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, GqlParser.RULE_focusedLinearDataModStatmentBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1763;
	        this.useGraphClause();
	        this.state = 1764;
	        this.simpleLinearDataAccessingStatment();
	        this.state = 1766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 1765;
	            this.primitiveResultStatment();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedDataModProcedureSpec() {
	    let localctx = new FocusedNestedDataModProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, GqlParser.RULE_focusedNestedDataModProcedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1768;
	        this.useGraphClause();
	        this.state = 1769;
	        this.nestedDataModProcedureSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModStatment() {
	    let localctx = new AmbientLinearDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, GqlParser.RULE_ambientLinearDataModStatment);
	    try {
	        this.state = 1773;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	        case 122:
	        case 135:
	        case 144:
	        case 154:
	        case 173:
	        case 175:
	        case 186:
	        case 193:
	        case 201:
	        case 203:
	        case 205:
	        case 220:
	        case 231:
	        case 235:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1771;
	            this.ambientLinearDataModStatmentBody();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1772;
	            this.nestedDataModProcedureSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModStatmentBody() {
	    let localctx = new AmbientLinearDataModStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, GqlParser.RULE_ambientLinearDataModStatmentBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1775;
	        this.simpleLinearDataAccessingStatment();
	        this.state = 1777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        if(la_===1) {
	            this.state = 1776;
	            this.primitiveResultStatment();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearDataAccessingStatment() {
	    let localctx = new SimpleLinearDataAccessingStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, GqlParser.RULE_simpleLinearDataAccessingStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1780; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1779;
	        		this.simpleDataAccessingStatment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1782; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,77, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataAccessingStatment() {
	    let localctx = new SimpleDataAccessingStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, GqlParser.RULE_simpleDataAccessingStatment);
	    try {
	        this.state = 1786;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1784;
	            this.simpleQueryStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1785;
	            this.simpleDataModStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataModStatment() {
	    let localctx = new SimpleDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, GqlParser.RULE_simpleDataModStatment);
	    try {
	        this.state = 1790;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 122:
	        case 154:
	        case 193:
	        case 220:
	        case 231:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1788;
	            this.primitiveDataModStatment();
	            break;
	        case 88:
	        case 203:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1789;
	            this.callDataModProcedureStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveDataModStatment() {
	    let localctx = new PrimitiveDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, GqlParser.RULE_primitiveDataModStatment);
	    try {
	        this.state = 1796;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 154:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1792;
	            this.insertStatment();
	            break;
	        case 231:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1793;
	            this.setStatment();
	            break;
	        case 220:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1794;
	            this.removeStatment();
	            break;
	        case 122:
	        case 193:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1795;
	            this.deleteStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatment() {
	    let localctx = new InsertStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, GqlParser.RULE_insertStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1798;
	        this.match(GqlParser.INSERT);
	        this.state = 1799;
	        this.insertGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatment() {
	    let localctx = new SetStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, GqlParser.RULE_setStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.match(GqlParser.SET);
	        this.state = 1802;
	        this.setItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItemList() {
	    let localctx = new SetItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, GqlParser.RULE_setItemList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1804;
	        this.setItem();
	        this.state = 1807; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1805;
	            this.match(GqlParser.COMMA);
	            this.state = 1806;
	            this.setItem();
	            this.state = 1809; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItem() {
	    let localctx = new SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, GqlParser.RULE_setItem);
	    try {
	        this.state = 1814;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1811;
	            this.setPropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1812;
	            this.setAllPropertiesItem();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1813;
	            this.setLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPropertyItem() {
	    let localctx = new SetPropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, GqlParser.RULE_setPropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.bindingVarRef();
	        this.state = 1817;
	        this.match(GqlParser.PERIOD);
	        this.state = 1818;
	        this.propertyName();
	        this.state = 1819;
	        this.match(GqlParser.EQUALS);
	        this.state = 1820;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAllPropertiesItem() {
	    let localctx = new SetAllPropertiesItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, GqlParser.RULE_setAllPropertiesItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1822;
	        this.bindingVarRef();
	        this.state = 1823;
	        this.match(GqlParser.EQUALS);
	        this.state = 1824;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 1826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	            this.state = 1825;
	            this.propertyKeyValuePairList();
	        }

	        this.state = 1828;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setLabelItem() {
	    let localctx = new SetLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, GqlParser.RULE_setLabelItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1830;
	        this.bindingVarRef();
	        this.state = 1831;
	        _la = this._input.LA(1);
	        if(!(_la===32 || _la===171)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1832;
	        this.labelSetSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetSpec() {
	    let localctx = new LabelSetSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, GqlParser.RULE_labelSetSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1834;
	        this.labelName();
	        this.state = 1839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===29) {
	            this.state = 1835;
	            this.match(GqlParser.AMPERSAND);
	            this.state = 1836;
	            this.labelName();
	            this.state = 1841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeStatment() {
	    let localctx = new RemoveStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, GqlParser.RULE_removeStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1842;
	        this.match(GqlParser.REMOVE);
	        this.state = 1843;
	        this.removeItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItemList() {
	    let localctx = new RemoveItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, GqlParser.RULE_removeItemList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1845;
	        this.removeItem();
	        this.state = 1848; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1846;
	            this.match(GqlParser.COMMA);
	            this.state = 1847;
	            this.removeItem();
	            this.state = 1850; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItem() {
	    let localctx = new RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, GqlParser.RULE_removeItem);
	    try {
	        this.state = 1854;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1852;
	            this.removePropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1853;
	            this.removeLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removePropertyItem() {
	    let localctx = new RemovePropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, GqlParser.RULE_removePropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1856;
	        this.bindingVarRef();
	        this.state = 1857;
	        this.match(GqlParser.PERIOD);
	        this.state = 1858;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeLabelItem() {
	    let localctx = new RemoveLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, GqlParser.RULE_removeLabelItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1860;
	        this.bindingVarRef();
	        this.state = 1861;
	        _la = this._input.LA(1);
	        if(!(_la===32 || _la===171)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1862;
	        this.labelSetSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatment() {
	    let localctx = new DeleteStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, GqlParser.RULE_deleteStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1864;
	        _la = this._input.LA(1);
	        if(!(_la===122 || _la===193)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1865;
	        this.match(GqlParser.DELETE);
	        this.state = 1866;
	        this.deleteItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItemList() {
	    let localctx = new DeleteItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, GqlParser.RULE_deleteItemList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1868;
	        this.deleteItem();
	        this.state = 1871; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1869;
	            this.match(GqlParser.COMMA);
	            this.state = 1870;
	            this.deleteItem();
	            this.state = 1873; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItem() {
	    let localctx = new DeleteItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, GqlParser.RULE_deleteItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1875;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callDataModProcedureStatment() {
	    let localctx = new CallDataModProcedureStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, GqlParser.RULE_callDataModProcedureStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1877;
	        this.callProcedureStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryStatment() {
	    let localctx = new CompositeQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, GqlParser.RULE_compositeQueryStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1879;
	        this.compositeQueryExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	compositeQueryExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CompositeQueryExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 190;
	    this.enterRecursionRule(localctx, 190, GqlParser.RULE_compositeQueryExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1882;
	        this.compositeQueryPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1890;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CompositeQueryExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_compositeQueryExpr);
	                this.state = 1884;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1885;
	                this.queryConjunction();
	                this.state = 1886;
	                this.compositeQueryPrimary(); 
	            }
	            this.state = 1892;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryConjunction() {
	    let localctx = new QueryConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, GqlParser.RULE_queryConjunction);
	    try {
	        this.state = 1895;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 131:
	        case 169:
	        case 261:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1893;
	            this.setOperator();
	            break;
	        case 206:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1894;
	            this.match(GqlParser.OTHERWISE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOperator() {
	    let localctx = new SetOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, GqlParser.RULE_setOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1897;
	        _la = this._input.LA(1);
	        if(!(_la===131 || _la===169 || _la===261)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1898;
	        this.setQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryPrimary() {
	    let localctx = new CompositeQueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, GqlParser.RULE_compositeQueryPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1900;
	        this.linearQueryStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearQueryStatment() {
	    let localctx = new LinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, GqlParser.RULE_linearQueryStatment);
	    try {
	        this.state = 1904;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 229:
	        case 265:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1902;
	            this.focusedLinearQueryStatment();
	            break;
	        case 40:
	        case 88:
	        case 135:
	        case 136:
	        case 144:
	        case 173:
	        case 175:
	        case 186:
	        case 201:
	        case 203:
	        case 205:
	        case 223:
	        case 235:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1903;
	            this.ambientLinearQueryStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatment() {
	    let localctx = new FocusedLinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, GqlParser.RULE_focusedLinearQueryStatment);
	    try {
	        this.state = 1916;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1907; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1906;
	            		this.focusedLinearQueryStatmentPart();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1909; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,91, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1911;
	            this.focusedLinearQueryAndPrimitiveResultStatmentPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1913;
	            this.focusedPrimitiveResultStatment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1914;
	            this.focusedNestedQuerySpec();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1915;
	            this.selectStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatmentPart() {
	    let localctx = new FocusedLinearQueryStatmentPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, GqlParser.RULE_focusedLinearQueryStatmentPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1918;
	        this.useGraphClause();
	        this.state = 1919;
	        this.simpleLinearQueryStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryAndPrimitiveResultStatmentPart() {
	    let localctx = new FocusedLinearQueryAndPrimitiveResultStatmentPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1921;
	        this.useGraphClause();
	        this.state = 1922;
	        this.simpleLinearQueryStatment();
	        this.state = 1923;
	        this.primitiveResultStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedPrimitiveResultStatment() {
	    let localctx = new FocusedPrimitiveResultStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, GqlParser.RULE_focusedPrimitiveResultStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1925;
	        this.useGraphClause();
	        this.state = 1926;
	        this.primitiveResultStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedQuerySpec() {
	    let localctx = new FocusedNestedQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, GqlParser.RULE_focusedNestedQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1928;
	        this.useGraphClause();
	        this.state = 1929;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearQueryStatment() {
	    let localctx = new AmbientLinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, GqlParser.RULE_ambientLinearQueryStatment);
	    var _la = 0; // Token type
	    try {
	        this.state = 1936;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	        case 135:
	        case 136:
	        case 144:
	        case 173:
	        case 175:
	        case 186:
	        case 201:
	        case 203:
	        case 205:
	        case 223:
	        case 235:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===88 || _la===135 || _la===144 || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & 1342185477) !== 0) || _la===205 || _la===235) {
	                this.state = 1931;
	                this.simpleLinearQueryStatment();
	            }

	            this.state = 1934;
	            this.primitiveResultStatment();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1935;
	            this.nestedQuerySpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearQueryStatment() {
	    let localctx = new SimpleLinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, GqlParser.RULE_simpleLinearQueryStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1938;
	        this.simpleQueryStatment();
	        this.state = 1942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===88 || _la===135 || _la===144 || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & 1342185477) !== 0) || _la===205 || _la===235) {
	            this.state = 1939;
	            this.simpleQueryStatment();
	            this.state = 1944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleQueryStatment() {
	    let localctx = new SimpleQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, GqlParser.RULE_simpleQueryStatment);
	    try {
	        this.state = 1947;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1945;
	            this.primitiveQueryStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1946;
	            this.callQueryStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveQueryStatment() {
	    let localctx = new PrimitiveQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, GqlParser.RULE_primitiveQueryStatment);
	    try {
	        this.state = 1954;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 186:
	        case 203:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1949;
	            this.matchStatment();
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1950;
	            this.letStatment();
	            break;
	        case 144:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1951;
	            this.forStatment();
	            break;
	        case 135:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1952;
	            this.filterStatment();
	            break;
	        case 175:
	        case 201:
	        case 205:
	        case 235:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1953;
	            this.orderByAndPageStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatment() {
	    let localctx = new MatchStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, GqlParser.RULE_matchStatment);
	    try {
	        this.state = 1958;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 186:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1956;
	            this.simpleMatchStatment();
	            break;
	        case 203:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1957;
	            this.optionalMatchStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleMatchStatment() {
	    let localctx = new SimpleMatchStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, GqlParser.RULE_simpleMatchStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1960;
	        this.match(GqlParser.MATCH);
	        this.state = 1961;
	        this.graphPatternBindingTable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalMatchStatment() {
	    let localctx = new OptionalMatchStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, GqlParser.RULE_optionalMatchStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1963;
	        this.match(GqlParser.OPTIONAL);
	        this.state = 1964;
	        this.optionalOperand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalOperand() {
	    let localctx = new OptionalOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, GqlParser.RULE_optionalOperand);
	    try {
	        this.state = 1975;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 186:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1966;
	            this.simpleMatchStatment();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1967;
	            this.match(GqlParser.LEFT_BRACE);
	            this.state = 1968;
	            this.matchStatmentBlock();
	            this.state = 1969;
	            this.match(GqlParser.RIGHT_BRACE);
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1971;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 1972;
	            this.matchStatmentBlock();
	            this.state = 1973;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatmentBlock() {
	    let localctx = new MatchStatmentBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, GqlParser.RULE_matchStatmentBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1978; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1977;
	            this.matchStatment();
	            this.state = 1980; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===186 || _la===203);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callQueryStatment() {
	    let localctx = new CallQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, GqlParser.RULE_callQueryStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1982;
	        this.callProcedureStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterStatment() {
	    let localctx = new FilterStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, GqlParser.RULE_filterStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1984;
	        this.match(GqlParser.FILTER);
	        this.state = 1987;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 272:
	            this.state = 1985;
	            this.whereClause();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 64:
	        case 65:
	        case 67:
	        case 74:
	        case 76:
	        case 77:
	        case 84:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 118:
	        case 126:
	        case 127:
	        case 128:
	        case 132:
	        case 133:
	        case 134:
	        case 143:
	        case 173:
	        case 177:
	        case 179:
	        case 180:
	        case 181:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 190:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 199:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 216:
	        case 217:
	        case 219:
	        case 225:
	        case 226:
	        case 233:
	        case 234:
	        case 238:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 245:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 262:
	        case 264:
	        case 267:
	        case 278:
	        case 279:
	        case 316:
	        case 327:
	        case 343:
	        case 351:
	        case 370:
	        case 372:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.state = 1986;
	            this.searchCondition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatment() {
	    let localctx = new LetStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, GqlParser.RULE_letStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1989;
	        this.match(GqlParser.LET);
	        this.state = 1990;
	        this.letVarDefList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVarDefList() {
	    let localctx = new LetVarDefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, GqlParser.RULE_letVarDefList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1992;
	        this.letVarDef();
	        this.state = 1995; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1993;
	            this.match(GqlParser.COMMA);
	            this.state = 1994;
	            this.letVarDef();
	            this.state = 1997; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVarDef() {
	    let localctx = new LetVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, GqlParser.RULE_letVarDef);
	    try {
	        this.state = 2004;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 267:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1999;
	            this.valueVarDef();
	            break;
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2000;
	            this.valueVar();
	            this.state = 2001;
	            this.match(GqlParser.EQUALS);
	            this.state = 2002;
	            this.valueExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatment() {
	    let localctx = new ForStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, GqlParser.RULE_forStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2006;
	        this.match(GqlParser.FOR);
	        this.state = 2007;
	        this.forItem();
	        this.state = 2009;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===273) {
	            this.state = 2008;
	            this.forOrdinalityOrOffset();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItem() {
	    let localctx = new ForItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, GqlParser.RULE_forItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2011;
	        this.forItemAlias();
	        this.state = 2012;
	        this.listValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItemAlias() {
	    let localctx = new ForItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, GqlParser.RULE_forItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2014;
	        this.identifier();
	        this.state = 2015;
	        this.match(GqlParser.IN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forOrdinalityOrOffset() {
	    let localctx = new ForOrdinalityOrOffsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, GqlParser.RULE_forOrdinalityOrOffset);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2017;
	        this.match(GqlParser.WITH);
	        this.state = 2018;
	        _la = this._input.LA(1);
	        if(!(_la===201 || _la===342)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2019;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByAndPageStatment() {
	    let localctx = new OrderByAndPageStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, GqlParser.RULE_orderByAndPageStatment);
	    try {
	        this.state = 2033;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 205:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2021;
	            this.orderByClause();
	            this.state = 2023;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	            if(la_===1) {
	                this.state = 2022;
	                this.offsetClause();

	            }
	            this.state = 2026;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 2025;
	                this.limitClause();

	            }
	            break;
	        case 201:
	        case 235:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2028;
	            this.offsetClause();
	            this.state = 2030;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	            if(la_===1) {
	                this.state = 2029;
	                this.limitClause();

	            }
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2032;
	            this.limitClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveResultStatment() {
	    let localctx = new PrimitiveResultStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, GqlParser.RULE_primitiveResultStatment);
	    try {
	        this.state = 2040;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 223:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2035;
	            this.returnStatment();
	            this.state = 2037;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	            if(la_===1) {
	                this.state = 2036;
	                this.orderByAndPageStatment();

	            }
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2039;
	            this.match(GqlParser.FINISH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatment() {
	    let localctx = new ReturnStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, GqlParser.RULE_returnStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2042;
	        this.match(GqlParser.RETURN);
	        this.state = 2043;
	        this.returnStatmentBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatmentBody() {
	    let localctx = new ReturnStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, GqlParser.RULE_returnStatmentBody);
	    var _la = 0; // Token type
	    try {
	        this.state = 2057;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 74:
	        case 76:
	        case 77:
	        case 84:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 118:
	        case 123:
	        case 126:
	        case 127:
	        case 128:
	        case 132:
	        case 133:
	        case 134:
	        case 143:
	        case 173:
	        case 177:
	        case 179:
	        case 180:
	        case 181:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 190:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 199:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 216:
	        case 217:
	        case 219:
	        case 225:
	        case 226:
	        case 233:
	        case 234:
	        case 238:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 245:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 262:
	        case 264:
	        case 267:
	        case 278:
	        case 279:
	        case 316:
	        case 327:
	        case 343:
	        case 351:
	        case 370:
	        case 372:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2046;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===66 || _la===123) {
	                this.state = 2045;
	                this.setQuantifier();
	            }

	            this.state = 2050;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 30:
	                this.state = 2048;
	                this.match(GqlParser.ASTERISK);
	                break;
	            case 35:
	            case 40:
	            case 42:
	            case 44:
	            case 56:
	            case 64:
	            case 65:
	            case 67:
	            case 74:
	            case 76:
	            case 77:
	            case 84:
	            case 86:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 97:
	            case 98:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 106:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 118:
	            case 126:
	            case 127:
	            case 128:
	            case 132:
	            case 133:
	            case 134:
	            case 143:
	            case 173:
	            case 177:
	            case 179:
	            case 180:
	            case 181:
	            case 183:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 190:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 199:
	            case 209:
	            case 210:
	            case 212:
	            case 213:
	            case 214:
	            case 216:
	            case 217:
	            case 219:
	            case 225:
	            case 226:
	            case 233:
	            case 234:
	            case 238:
	            case 240:
	            case 241:
	            case 243:
	            case 244:
	            case 245:
	            case 247:
	            case 248:
	            case 250:
	            case 251:
	            case 262:
	            case 264:
	            case 267:
	            case 278:
	            case 279:
	            case 316:
	            case 327:
	            case 343:
	            case 351:
	            case 370:
	            case 372:
	            case 383:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 399:
	                this.state = 2049;
	                this.returnItemList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2053;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	            if(la_===1) {
	                this.state = 2052;
	                this.groupByClause();

	            }
	            break;
	        case 338:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2055;
	            this.match(GqlParser.NO);
	            this.state = 2056;
	            this.match(GqlParser.BINDINGS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemList() {
	    let localctx = new ReturnItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, GqlParser.RULE_returnItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2059;
	        this.returnItem();
	        this.state = 2064;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2060;
	                this.match(GqlParser.COMMA);
	                this.state = 2061;
	                this.returnItem(); 
	            }
	            this.state = 2066;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, GqlParser.RULE_returnItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2067;
	        this.aggregatingValueExpr();
	        this.state = 2069;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 2068;
	            this.returnItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemAlias() {
	    let localctx = new ReturnItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, GqlParser.RULE_returnItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2071;
	        this.match(GqlParser.AS);
	        this.state = 2072;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatment() {
	    let localctx = new SelectStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, GqlParser.RULE_selectStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2074;
	        this.match(GqlParser.SELECT);
	        this.state = 2076;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66 || _la===123) {
	            this.state = 2075;
	            this.setQuantifier();
	        }

	        this.state = 2080;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 64:
	        case 65:
	        case 67:
	        case 74:
	        case 76:
	        case 77:
	        case 84:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 118:
	        case 126:
	        case 127:
	        case 128:
	        case 132:
	        case 133:
	        case 134:
	        case 143:
	        case 173:
	        case 177:
	        case 179:
	        case 180:
	        case 181:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 190:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 199:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 216:
	        case 217:
	        case 219:
	        case 225:
	        case 226:
	        case 233:
	        case 234:
	        case 238:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 245:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 262:
	        case 264:
	        case 267:
	        case 278:
	        case 279:
	        case 316:
	        case 327:
	        case 343:
	        case 351:
	        case 370:
	        case 372:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.state = 2078;
	            this.selectItemList();
	            break;
	        case 30:
	            this.state = 2079;
	            this.match(GqlParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2101;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        if(la_===1) {
	            this.state = 2082;
	            this.selectStatmentBody();
	            this.state = 2084;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	            if(la_===1) {
	                this.state = 2083;
	                this.whereClause();

	            }
	            this.state = 2087;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	            if(la_===1) {
	                this.state = 2086;
	                this.groupByClause();

	            }
	            this.state = 2090;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 2089;
	                this.havingClause();

	            }
	            this.state = 2093;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	            if(la_===1) {
	                this.state = 2092;
	                this.orderByClause();

	            }
	            this.state = 2096;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	            if(la_===1) {
	                this.state = 2095;
	                this.offsetClause();

	            }
	            this.state = 2099;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	            if(la_===1) {
	                this.state = 2098;
	                this.limitClause();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemList() {
	    let localctx = new SelectItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, GqlParser.RULE_selectItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2103;
	        this.selectItem();
	        this.state = 2106; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2104;
	        		this.match(GqlParser.COMMA);
	        		this.state = 2105;
	        		this.selectItem();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2108; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,126, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, GqlParser.RULE_selectItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2110;
	        this.aggregatingValueExpr();
	        this.state = 2112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        if(la_===1) {
	            this.state = 2111;
	            this.selectItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemAlias() {
	    let localctx = new SelectItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, GqlParser.RULE_selectItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2114;
	        this.match(GqlParser.AS);
	        this.state = 2115;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, GqlParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2117;
	        this.match(GqlParser.HAVING);
	        this.state = 2118;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatmentBody() {
	    let localctx = new SelectStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, GqlParser.RULE_selectStatmentBody);
	    try {
	        this.state = 2123;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2120;
	            this.match(GqlParser.FROM);
	            this.state = 2121;
	            this.selectGraphMatchList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2122;
	            this.selectQuerySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatchList() {
	    let localctx = new SelectGraphMatchListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, GqlParser.RULE_selectGraphMatchList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2125;
	        this.selectGraphMatch();
	        this.state = 2130;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2126;
	                this.match(GqlParser.COMMA);
	                this.state = 2127;
	                this.selectGraphMatch(); 
	            }
	            this.state = 2132;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatch() {
	    let localctx = new SelectGraphMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, GqlParser.RULE_selectGraphMatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2133;
	        this.graphExpr();
	        this.state = 2134;
	        this.matchStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuerySpec() {
	    let localctx = new SelectQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, GqlParser.RULE_selectQuerySpec);
	    try {
	        this.state = 2142;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2136;
	            this.match(GqlParser.FROM);
	            this.state = 2137;
	            this.nestedQuerySpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2138;
	            this.match(GqlParser.FROM);
	            this.state = 2139;
	            this.graphExpr();
	            this.state = 2140;
	            this.nestedQuerySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callProcedureStatment() {
	    let localctx = new CallProcedureStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, GqlParser.RULE_callProcedureStatment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2145;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===203) {
	            this.state = 2144;
	            this.match(GqlParser.OPTIONAL);
	        }

	        this.state = 2147;
	        this.match(GqlParser.CALL);
	        this.state = 2148;
	        this.procedureCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureCall() {
	    let localctx = new ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, GqlParser.RULE_procedureCall);
	    try {
	        this.state = 2152;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2150;
	            this.inlineProcedureCall();
	            break;
	        case 35:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 109:
	        case 150:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2151;
	            this.namedProcedureCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineProcedureCall() {
	    let localctx = new InlineProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, GqlParser.RULE_inlineProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 2154;
	            this.varScopeClause();
	        }

	        this.state = 2157;
	        this.nestedProcedureSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varScopeClause() {
	    let localctx = new VarScopeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, GqlParser.RULE_varScopeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2159;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===399) {
	            this.state = 2160;
	            this.bindingVarRefList();
	        }

	        this.state = 2163;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarRefList() {
	    let localctx = new BindingVarRefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, GqlParser.RULE_bindingVarRefList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2165;
	        this.bindingVarRef();
	        this.state = 2168; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2166;
	            this.match(GqlParser.COMMA);
	            this.state = 2167;
	            this.bindingVarRef();
	            this.state = 2170; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedProcedureCall() {
	    let localctx = new NamedProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, GqlParser.RULE_namedProcedureCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2172;
	        this.procedureRef();
	        this.state = 2173;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2175;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & 1612710561) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & 3486123649) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & 2382511663) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & 1027) !== 0) || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & 115531217) !== 0) || ((((_la - 209)) & ~0x1f) == 0 && ((1 << (_la - 209)) & 2734884283) !== 0) || ((((_la - 241)) & ~0x1f) == 0 && ((1 << (_la - 241)) & 77596381) !== 0) || _la===278 || _la===279 || ((((_la - 316)) & ~0x1f) == 0 && ((1 << (_la - 316)) & 134219777) !== 0) || ((((_la - 351)) & ~0x1f) == 0 && ((1 << (_la - 351)) & 2621441) !== 0) || ((((_la - 383)) & ~0x1f) == 0 && ((1 << (_la - 383)) & 66017) !== 0)) {
	            this.state = 2174;
	            this.procedureArgList();
	        }

	        this.state = 2177;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgList() {
	    let localctx = new ProcedureArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, GqlParser.RULE_procedureArgList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2179;
	        this.procedureArg();
	        this.state = 2182; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2180;
	            this.match(GqlParser.COMMA);
	            this.state = 2181;
	            this.procedureArg();
	            this.state = 2184; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArg() {
	    let localctx = new ProcedureArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, GqlParser.RULE_procedureArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2186;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useGraphClause() {
	    let localctx = new UseGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, GqlParser.RULE_useGraphClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2188;
	        this.match(GqlParser.USE);
	        this.state = 2189;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atSchemaClause() {
	    let localctx = new AtSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, GqlParser.RULE_atSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2191;
	        this.match(GqlParser.AT);
	        this.state = 2192;
	        this.schemaRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarRef() {
	    let localctx = new BindingVarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, GqlParser.RULE_bindingVarRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2194;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVarRef() {
	    let localctx = new ElementVarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, GqlParser.RULE_elementVarRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2196;
	        this.bindingVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVarRef() {
	    let localctx = new PathVarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, GqlParser.RULE_pathVarRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2198;
	        this.bindingVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, GqlParser.RULE_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2200;
	        this.parameterName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternBindingTable() {
	    let localctx = new GraphPatternBindingTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, GqlParser.RULE_graphPatternBindingTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2202;
	        this.graphPattern();
	        this.state = 2204;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        if(la_===1) {
	            this.state = 2203;
	            this.graphPatternYieldClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldClause() {
	    let localctx = new GraphPatternYieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, GqlParser.RULE_graphPatternYieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2206;
	        this.match(GqlParser.YIELD);
	        this.state = 2207;
	        this.graphPatternYieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItemList() {
	    let localctx = new GraphPatternYieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, GqlParser.RULE_graphPatternYieldItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2209;
	        this.graphPatternYieldItem();
	        this.state = 2212; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2210;
	        		this.match(GqlParser.COMMA);
	        		this.state = 2211;
	        		this.graphPatternYieldItem();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2214; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,139, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItem() {
	    let localctx = new GraphPatternYieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, GqlParser.RULE_graphPatternYieldItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2216;
	        this.elementVarRef();
	        this.state = 2217;
	        this.pathVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, GqlParser.RULE_graphPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2220;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===320 || _la===347) {
	            this.state = 2219;
	            this.matchMode();
	        }

	        this.state = 2222;
	        this.pathPatternList();
	        this.state = 2224;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 2223;
	            this.keepClause();

	        }
	        this.state = 2227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        if(la_===1) {
	            this.state = 2226;
	            this.graphPatternWhereClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchMode() {
	    let localctx = new MatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, GqlParser.RULE_matchMode);
	    try {
	        this.state = 2231;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 347:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2229;
	            this.repeatableElementsMatchMode();
	            break;
	        case 320:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2230;
	            this.differentEdgesMatchMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatableElementsMatchMode() {
	    let localctx = new RepeatableElementsMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, GqlParser.RULE_repeatableElementsMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2233;
	        this.match(GqlParser.REPEATABLE);
	        this.state = 2234;
	        this.elementBindingsOrElements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	differentEdgesMatchMode() {
	    let localctx = new DifferentEdgesMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, GqlParser.RULE_differentEdgesMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2236;
	        this.match(GqlParser.DIFFERENT);
	        this.state = 2237;
	        this.edgeBindingsOrEdges();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementBindingsOrElements() {
	    let localctx = new ElementBindingsOrElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, GqlParser.RULE_elementBindingsOrElements);
	    var _la = 0; // Token type
	    try {
	        this.state = 2244;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 324:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2239;
	            this.match(GqlParser.ELEMENT);
	            this.state = 2241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===317) {
	                this.state = 2240;
	                this.match(GqlParser.BINDINGS);
	            }

	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2243;
	            this.match(GqlParser.ELEMENTS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeBindingsOrEdges() {
	    let localctx = new EdgeBindingsOrEdgesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, GqlParser.RULE_edgeBindingsOrEdges);
	    var _la = 0; // Token type
	    try {
	        this.state = 2251;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 322:
	        case 345:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2246;
	            this.edgeSynonym();
	            this.state = 2248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===317) {
	                this.state = 2247;
	                this.match(GqlParser.BINDINGS);
	            }

	            break;
	        case 323:
	        case 346:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2250;
	            this.edgesSynonym();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternList() {
	    let localctx = new PathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, GqlParser.RULE_pathPatternList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2253;
	        this.pathPattern();
	        this.state = 2258;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,148,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2254;
	                this.match(GqlParser.COMMA);
	                this.state = 2255;
	                this.pathPattern(); 
	            }
	            this.state = 2260;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,148,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPattern() {
	    let localctx = new PathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, GqlParser.RULE_pathPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===399) {
	            this.state = 2261;
	            this.pathVarDeclaration();
	        }

	        this.state = 2265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66 || _la===69 || _la===315 || ((((_la - 348)) & ~0x1f) == 0 && ((1 << (_la - 348)) & 4227) !== 0)) {
	            this.state = 2264;
	            this.pathPatternPrefix();
	        }

	        this.state = 2268; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2267;
	        		this.pathPatternExpr();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2270; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,151, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVarDeclaration() {
	    let localctx = new PathVarDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, GqlParser.RULE_pathVarDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2272;
	        this.pathVar();
	        this.state = 2273;
	        this.match(GqlParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keepClause() {
	    let localctx = new KeepClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, GqlParser.RULE_keepClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2275;
	        this.match(GqlParser.KEEP);
	        this.state = 2276;
	        this.pathPatternPrefix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternWhereClause() {
	    let localctx = new GraphPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, GqlParser.RULE_graphPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2278;
	        this.match(GqlParser.WHERE);
	        this.state = 2279;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternPrefix() {
	    let localctx = new PathPatternPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, GqlParser.RULE_pathPatternPrefix);
	    try {
	        this.state = 2283;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 315:
	        case 349:
	        case 355:
	        case 360:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2281;
	            this.pathModePrefix();
	            break;
	        case 66:
	        case 69:
	        case 348:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2282;
	            this.pathSearchPrefix();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathModePrefix() {
	    let localctx = new PathModePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, GqlParser.RULE_pathModePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2285;
	        this.pathMode();
	        this.state = 2287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        if(la_===1) {
	            this.state = 2286;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMode() {
	    let localctx = new PathModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, GqlParser.RULE_pathMode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2289;
	        _la = this._input.LA(1);
	        if(!(_la===315 || ((((_la - 349)) & ~0x1f) == 0 && ((1 << (_la - 349)) & 2113) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSearchPrefix() {
	    let localctx = new PathSearchPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, GqlParser.RULE_pathSearchPrefix);
	    try {
	        this.state = 2294;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2291;
	            this.allPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2292;
	            this.anyPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2293;
	            this.shortestPathSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allPathSearch() {
	    let localctx = new AllPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, GqlParser.RULE_allPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2296;
	        this.match(GqlParser.ALL);
	        this.state = 2298;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        if(la_===1) {
	            this.state = 2297;
	            this.pathMode();

	        }
	        this.state = 2301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        if(la_===1) {
	            this.state = 2300;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOrPaths() {
	    let localctx = new PathOrPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, GqlParser.RULE_pathOrPaths);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2303;
	        _la = this._input.LA(1);
	        if(!(_la===209 || _la===211)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyPathSearch() {
	    let localctx = new AnyPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, GqlParser.RULE_anyPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2305;
	        this.match(GqlParser.ANY);
	        this.state = 2307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        if(la_===1) {
	            this.state = 2306;
	            this.numberOfPaths();

	        }
	        this.state = 2310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 2309;
	            this.pathMode();

	        }
	        this.state = 2313;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        if(la_===1) {
	            this.state = 2312;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfPaths() {
	    let localctx = new NumberOfPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, GqlParser.RULE_numberOfPaths);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2315;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortestPathSearch() {
	    let localctx = new ShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, GqlParser.RULE_shortestPathSearch);
	    try {
	        this.state = 2321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2317;
	            this.allShortestPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2318;
	            this.anyShortestPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2319;
	            this.countedShortestPathSearch();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2320;
	            this.countedShortestGroupSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allShortestPathSearch() {
	    let localctx = new AllShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, GqlParser.RULE_allShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2323;
	        this.match(GqlParser.ALL);
	        this.state = 2324;
	        this.match(GqlParser.SHORTEST);
	        this.state = 2326;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 2325;
	            this.pathMode();

	        }
	        this.state = 2329;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        if(la_===1) {
	            this.state = 2328;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyShortestPathSearch() {
	    let localctx = new AnyShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, GqlParser.RULE_anyShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2331;
	        this.match(GqlParser.ANY);
	        this.state = 2332;
	        this.match(GqlParser.SHORTEST);
	        this.state = 2334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        if(la_===1) {
	            this.state = 2333;
	            this.pathMode();

	        }
	        this.state = 2337;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 2336;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestPathSearch() {
	    let localctx = new CountedShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, GqlParser.RULE_countedShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2339;
	        this.match(GqlParser.SHORTEST);
	        this.state = 2340;
	        this.numberOfPaths();
	        this.state = 2342;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        if(la_===1) {
	            this.state = 2341;
	            this.pathMode();

	        }
	        this.state = 2345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	        if(la_===1) {
	            this.state = 2344;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestGroupSearch() {
	    let localctx = new CountedShortestGroupSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, GqlParser.RULE_countedShortestGroupSearch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2347;
	        this.match(GqlParser.SHORTEST);
	        this.state = 2348;
	        this.numberOfGroups();
	        this.state = 2350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===315 || ((((_la - 349)) & ~0x1f) == 0 && ((1 << (_la - 349)) & 2113) !== 0)) {
	            this.state = 2349;
	            this.pathMode();
	        }

	        this.state = 2353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===209 || _la===211) {
	            this.state = 2352;
	            this.pathOrPaths();
	        }

	        this.state = 2355;
	        this.groupOrGroups();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupOrGroups() {
	    let localctx = new GroupOrGroupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, GqlParser.RULE_groupOrGroups);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2357;
	        _la = this._input.LA(1);
	        if(!(_la===146 || _la===328)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfGroups() {
	    let localctx = new NumberOfGroupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, GqlParser.RULE_numberOfGroups);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2359;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternExpr() {
	    let localctx = new PathPatternExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, GqlParser.RULE_pathPatternExpr);
	    try {
	        this.state = 2364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2361;
	            this.pathTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2362;
	            this.pathMultisetAlternation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2363;
	            this.pathPatternUnion();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMultisetAlternation() {
	    let localctx = new PathMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, GqlParser.RULE_pathMultisetAlternation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2366;
	        this.pathTerm();
	        this.state = 2371;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2367;
	                this.match(GqlParser.MULTISET_ALTERNATION);
	                this.state = 2368;
	                this.pathTerm(); 
	            }
	            this.state = 2373;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternUnion() {
	    let localctx = new PathPatternUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, GqlParser.RULE_pathPatternUnion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2374;
	        this.pathTerm();
	        this.state = 2379;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2375;
	                this.match(GqlParser.VERTICAL_BAR);
	                this.state = 2376;
	                this.pathTerm(); 
	            }
	            this.state = 2381;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathTerm() {
	    let localctx = new PathTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, GqlParser.RULE_pathTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2382;
	        this.pathFactor();
	        this.state = 2386;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,172,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2383;
	                this.pathFactor(); 
	            }
	            this.state = 2388;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,172,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathFactor() {
	    let localctx = new PathFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, GqlParser.RULE_pathFactor);
	    try {
	        this.state = 2392;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2389;
	            this.pathPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2390;
	            this.quantifiedPathPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2391;
	            this.questionedPathPrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedPathPrimary() {
	    let localctx = new QuantifiedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, GqlParser.RULE_quantifiedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2394;
	        this.pathPrimary();
	        this.state = 2395;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	questionedPathPrimary() {
	    let localctx = new QuestionedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, GqlParser.RULE_questionedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2397;
	        this.pathPrimary();
	        this.state = 2398;
	        this.match(GqlParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, GqlParser.RULE_pathPrimary);
	    try {
	        this.state = 2403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2400;
	            this.elementPattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2401;
	            this.parenthesizedPathPatternExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2402;
	            this.simplifiedPathPatternExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPattern() {
	    let localctx = new ElementPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, GqlParser.RULE_elementPattern);
	    try {
	        this.state = 2407;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2405;
	            this.nodePattern();
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 8:
	        case 10:
	        case 19:
	        case 20:
	        case 27:
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2406;
	            this.edgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePattern() {
	    let localctx = new NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, GqlParser.RULE_nodePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2409;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2410;
	        this.elementPatternFiller();
	        this.state = 2411;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternFiller() {
	    let localctx = new ElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, GqlParser.RULE_elementPatternFiller);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===352 || _la===399) {
	            this.state = 2413;
	            this.elementVarDeclaration();
	        }

	        this.state = 2417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32 || _la===171) {
	            this.state = 2416;
	            this.isLabelExpr();
	        }

	        this.state = 2420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40 || _la===272) {
	            this.state = 2419;
	            this.elementPatternPredicate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVarDeclaration() {
	    let localctx = new ElementVarDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, GqlParser.RULE_elementVarDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===352) {
	            this.state = 2422;
	            this.match(GqlParser.TEMP);
	        }

	        this.state = 2425;
	        this.elementVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabelExpr() {
	    let localctx = new IsLabelExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, GqlParser.RULE_isLabelExpr);
	    try {
	        this.state = 2431;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2427;
	            this.match(GqlParser.IS);
	            this.state = 2428;
	            this.labelExpr();
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2429;
	            this.match(GqlParser.COLON);
	            this.state = 2430;
	            this.labelExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternPredicate() {
	    let localctx = new ElementPatternPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, GqlParser.RULE_elementPatternPredicate);
	    try {
	        this.state = 2435;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 272:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2433;
	            this.elementPatternWhereClause();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2434;
	            this.elementPropertySpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternWhereClause() {
	    let localctx = new ElementPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, GqlParser.RULE_elementPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2437;
	        this.match(GqlParser.WHERE);
	        this.state = 2438;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPropertySpec() {
	    let localctx = new ElementPropertySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, GqlParser.RULE_elementPropertySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2440;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2441;
	        this.propertyKeyValuePairList();
	        this.state = 2442;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePairList() {
	    let localctx = new PropertyKeyValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, GqlParser.RULE_propertyKeyValuePairList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2444;
	        this.propertyKeyValuePair();
	        this.state = 2447; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2445;
	            this.match(GqlParser.COMMA);
	            this.state = 2446;
	            this.propertyKeyValuePair();
	            this.state = 2449; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePair() {
	    let localctx = new PropertyKeyValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, GqlParser.RULE_propertyKeyValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2451;
	        this.propertyName();
	        this.state = 2452;
	        this.match(GqlParser.COLON);
	        this.state = 2453;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgePattern() {
	    let localctx = new EdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, GqlParser.RULE_edgePattern);
	    try {
	        this.state = 2457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 8:
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2455;
	            this.fullEdgePattern();
	            break;
	        case 1:
	        case 2:
	        case 5:
	        case 10:
	        case 20:
	        case 27:
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2456;
	            this.abbreviatedEdgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePattern() {
	    let localctx = new FullEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, GqlParser.RULE_fullEdgePattern);
	    try {
	        this.state = 2466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2459;
	            this.fullEdgePointingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2460;
	            this.fullEdgeUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2461;
	            this.fullEdgePointingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2462;
	            this.fullEdgeLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2463;
	            this.fullEdgeUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2464;
	            this.fullEdgeLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2465;
	            this.fullEdgeAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingLeft() {
	    let localctx = new FullEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, GqlParser.RULE_fullEdgePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2468;
	        this.match(GqlParser.LEFT_ARROW_BRACKET);
	        this.state = 2469;
	        this.elementPatternFiller();
	        this.state = 2470;
	        this.match(GqlParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirected() {
	    let localctx = new FullEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, GqlParser.RULE_fullEdgeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2472;
	        this.match(GqlParser.TILDE_LEFT_BRACKET);
	        this.state = 2473;
	        this.elementPatternFiller();
	        this.state = 2474;
	        this.match(GqlParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingRight() {
	    let localctx = new FullEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, GqlParser.RULE_fullEdgePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2476;
	        this.match(GqlParser.MINUS_LEFT_BRACKET);
	        this.state = 2477;
	        this.elementPatternFiller();
	        this.state = 2478;
	        this.match(GqlParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrUndirected() {
	    let localctx = new FullEdgeLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, GqlParser.RULE_fullEdgeLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2480;
	        this.match(GqlParser.LEFT_ARROW_TILDE_BRACKET);
	        this.state = 2481;
	        this.elementPatternFiller();
	        this.state = 2482;
	        this.match(GqlParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirectedOrRight() {
	    let localctx = new FullEdgeUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, GqlParser.RULE_fullEdgeUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2484;
	        this.match(GqlParser.TILDE_LEFT_BRACKET);
	        this.state = 2485;
	        this.elementPatternFiller();
	        this.state = 2486;
	        this.match(GqlParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrRight() {
	    let localctx = new FullEdgeLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, GqlParser.RULE_fullEdgeLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2488;
	        this.match(GqlParser.LEFT_ARROW_BRACKET);
	        this.state = 2489;
	        this.elementPatternFiller();
	        this.state = 2490;
	        this.match(GqlParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeAnyDirection() {
	    let localctx = new FullEdgeAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, GqlParser.RULE_fullEdgeAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this.match(GqlParser.MINUS_LEFT_BRACKET);
	        this.state = 2493;
	        this.elementPatternFiller();
	        this.state = 2494;
	        this.match(GqlParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgePattern() {
	    let localctx = new AbbreviatedEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, GqlParser.RULE_abbreviatedEdgePattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2496;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 135267366) !== 0) || _la===50)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternExpr() {
	    let localctx = new ParenthesizedPathPatternExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, GqlParser.RULE_parenthesizedPathPatternExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2498;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===399) {
	            this.state = 2499;
	            this.subpathVarDeclaration();
	        }

	        this.state = 2503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===315 || ((((_la - 349)) & ~0x1f) == 0 && ((1 << (_la - 349)) & 2113) !== 0)) {
	            this.state = 2502;
	            this.pathModePrefix();
	        }

	        this.state = 2505;
	        this.pathPatternExpr();
	        this.state = 2507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===272) {
	            this.state = 2506;
	            this.parenthesizedPathPatternWhereClause();
	        }

	        this.state = 2509;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVarDeclaration() {
	    let localctx = new SubpathVarDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, GqlParser.RULE_subpathVarDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2511;
	        this.subpathVar();
	        this.state = 2512;
	        this.match(GqlParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternWhereClause() {
	    let localctx = new ParenthesizedPathPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, GqlParser.RULE_parenthesizedPathPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2514;
	        this.match(GqlParser.WHERE);
	        this.state = 2515;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertGraphPattern() {
	    let localctx = new InsertGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, GqlParser.RULE_insertGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2517;
	        this.insertGraphPatternList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertGraphPatternList() {
	    let localctx = new InsertGraphPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, GqlParser.RULE_insertGraphPatternList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2519;
	        this.insertPathPattern();
	        this.state = 2524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 2520;
	            this.match(GqlParser.COMMA);
	            this.state = 2521;
	            this.insertPathPattern();
	            this.state = 2526;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPathPattern() {
	    let localctx = new InsertPathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, GqlParser.RULE_insertPathPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2527;
	        this.insertNodePattern();
	        this.state = 2533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & 524552) !== 0)) {
	            this.state = 2528;
	            this.insertEdgePattern();
	            this.state = 2529;
	            this.insertNodePattern();
	            this.state = 2535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertNodePattern() {
	    let localctx = new InsertNodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, GqlParser.RULE_insertNodePattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2536;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40 || _la===56 || _la===352 || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	            this.state = 2537;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2540;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePattern() {
	    let localctx = new InsertEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, GqlParser.RULE_insertEdgePattern);
	    try {
	        this.state = 2545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2542;
	            this.insertEdgePointingLeft();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2543;
	            this.insertEdgePointingRight();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2544;
	            this.insertEdgeUndirected();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingLeft() {
	    let localctx = new InsertEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, GqlParser.RULE_insertEdgePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2547;
	        this.match(GqlParser.LEFT_ARROW_BRACKET);
	        this.state = 2548;
	        this.insertElementPatternFiller();
	        this.state = 2549;
	        this.match(GqlParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingRight() {
	    let localctx = new InsertEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, GqlParser.RULE_insertEdgePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2551;
	        this.match(GqlParser.MINUS_LEFT_BRACKET);
	        this.state = 2552;
	        this.insertElementPatternFiller();
	        this.state = 2553;
	        this.match(GqlParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgeUndirected() {
	    let localctx = new InsertEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, GqlParser.RULE_insertEdgeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        this.match(GqlParser.TILDE_LEFT_BRACKET);
	        this.state = 2556;
	        this.insertElementPatternFiller();
	        this.state = 2557;
	        this.match(GqlParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertElementPatternFiller() {
	    let localctx = new InsertElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, GqlParser.RULE_insertElementPatternFiller);
	    var _la = 0; // Token type
	    try {
	        this.state = 2567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2559;
	            this.elementVarDeclaration();
	            this.state = 2561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	                this.state = 2560;
	                this.labelAndPropertySetSpec();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2564;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	            if(la_===1) {
	                this.state = 2563;
	                this.elementVarDeclaration();

	            }
	            this.state = 2566;
	            this.labelAndPropertySetSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelAndPropertySetSpec() {
	    let localctx = new LabelAndPropertySetSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, GqlParser.RULE_labelAndPropertySetSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 2577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2569;
	            this.labelSetSpec();
	            this.state = 2571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40) {
	                this.state = 2570;
	                this.elementPropertySpec();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56 || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	                this.state = 2573;
	                this.labelSetSpec();
	            }

	            this.state = 2576;
	            this.elementPropertySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelExpr() {
	    let localctx = new LabelExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, GqlParser.RULE_labelExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2579;
	        this.labelTerm();
	        this.state = 2584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===52) {
	            this.state = 2580;
	            this.match(GqlParser.VERTICAL_BAR);
	            this.state = 2581;
	            this.labelTerm();
	            this.state = 2586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelTerm() {
	    let localctx = new LabelTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, GqlParser.RULE_labelTerm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2587;
	        this.labelFactor();
	        this.state = 2592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===29) {
	            this.state = 2588;
	            this.match(GqlParser.AMPERSAND);
	            this.state = 2589;
	            this.labelFactor();
	            this.state = 2594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelFactor() {
	    let localctx = new LabelFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, GqlParser.RULE_labelFactor);
	    try {
	        this.state = 2597;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	        case 53:
	        case 56:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2595;
	            this.labelPrimary();
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2596;
	            this.labelNegation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelNegation() {
	    let localctx = new LabelNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, GqlParser.RULE_labelNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2599;
	        this.match(GqlParser.EXCLAMATION);
	        this.state = 2600;
	        this.labelPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelPrimary() {
	    let localctx = new LabelPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, GqlParser.RULE_labelPrimary);
	    try {
	        this.state = 2605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2602;
	            this.labelName();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2603;
	            this.wildcardLabel();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2604;
	            this.parenthesizedLabelExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardLabel() {
	    let localctx = new WildcardLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, GqlParser.RULE_wildcardLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2607;
	        this.match(GqlParser.PERCENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedLabelExpr() {
	    let localctx = new ParenthesizedLabelExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, GqlParser.RULE_parenthesizedLabelExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2609;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2610;
	        this.labelExpr();
	        this.state = 2611;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternQuantifier() {
	    let localctx = new GraphPatternQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, GqlParser.RULE_graphPatternQuantifier);
	    try {
	        this.state = 2617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2613;
	            this.match(GqlParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2614;
	            this.match(GqlParser.PLUS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2615;
	            this.fixedQuantifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2616;
	            this.generalQuantifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedQuantifier() {
	    let localctx = new FixedQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, GqlParser.RULE_fixedQuantifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2619;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2620;
	        this.match(GqlParser.UNSIGNED_INT);
	        this.state = 2621;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalQuantifier() {
	    let localctx = new GeneralQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, GqlParser.RULE_generalQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2623;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===383) {
	            this.state = 2624;
	            this.lowerBound();
	        }

	        this.state = 2627;
	        this.match(GqlParser.COMMA);
	        this.state = 2629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===383) {
	            this.state = 2628;
	            this.upperBound();
	        }

	        this.state = 2631;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lowerBound() {
	    let localctx = new LowerBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, GqlParser.RULE_lowerBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2633;
	        this.match(GqlParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upperBound() {
	    let localctx = new UpperBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, GqlParser.RULE_upperBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2635;
	        this.match(GqlParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathPatternExpr() {
	    let localctx = new SimplifiedPathPatternExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, GqlParser.RULE_simplifiedPathPatternExpr);
	    try {
	        this.state = 2644;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2637;
	            this.simplifiedDefaultingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2638;
	            this.simplifiedDefaultingUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2639;
	            this.simplifiedDefaultingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2640;
	            this.simplifiedDefaultingLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2641;
	            this.simplifiedDefaultingUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2642;
	            this.simplifiedDefaultingLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2643;
	            this.simplifiedDefaultingAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeft() {
	    let localctx = new SimplifiedDefaultingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, GqlParser.RULE_simplifiedDefaultingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2646;
	        this.match(GqlParser.LEFT_MINUS_SLASH);
	        this.state = 2647;
	        this.simplifiedContents();
	        this.state = 2648;
	        this.match(GqlParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirected() {
	    let localctx = new SimplifiedDefaultingUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, GqlParser.RULE_simplifiedDefaultingUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2650;
	        this.match(GqlParser.TILDE_SLASH);
	        this.state = 2651;
	        this.simplifiedContents();
	        this.state = 2652;
	        this.match(GqlParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingRight() {
	    let localctx = new SimplifiedDefaultingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, GqlParser.RULE_simplifiedDefaultingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2654;
	        this.match(GqlParser.MINUS_SLASH);
	        this.state = 2655;
	        this.simplifiedContents();
	        this.state = 2656;
	        this.match(GqlParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrUndirected() {
	    let localctx = new SimplifiedDefaultingLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, GqlParser.RULE_simplifiedDefaultingLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2658;
	        this.match(GqlParser.LEFT_TILDE_SLASH);
	        this.state = 2659;
	        this.simplifiedContents();
	        this.state = 2660;
	        this.match(GqlParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirectedOrRight() {
	    let localctx = new SimplifiedDefaultingUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, GqlParser.RULE_simplifiedDefaultingUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2662;
	        this.match(GqlParser.TILDE_SLASH);
	        this.state = 2663;
	        this.simplifiedContents();
	        this.state = 2664;
	        this.match(GqlParser.SLASH_TILDE_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrRight() {
	    let localctx = new SimplifiedDefaultingLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, GqlParser.RULE_simplifiedDefaultingLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        this.match(GqlParser.LEFT_MINUS_SLASH);
	        this.state = 2667;
	        this.simplifiedContents();
	        this.state = 2668;
	        this.match(GqlParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingAnyDirection() {
	    let localctx = new SimplifiedDefaultingAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, GqlParser.RULE_simplifiedDefaultingAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2670;
	        this.match(GqlParser.MINUS_SLASH);
	        this.state = 2671;
	        this.simplifiedContents();
	        this.state = 2672;
	        this.match(GqlParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedContents() {
	    let localctx = new SimplifiedContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, GqlParser.RULE_simplifiedContents);
	    try {
	        this.state = 2677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2674;
	            this.simplifiedTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2675;
	            this.simplifiedPathUnion();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2676;
	            this.simplifiedMultisetAlternation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathUnion() {
	    let localctx = new SimplifiedPathUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, GqlParser.RULE_simplifiedPathUnion);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2679;
	        this.simplifiedTerm();
	        this.state = 2684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===52) {
	            this.state = 2680;
	            this.match(GqlParser.VERTICAL_BAR);
	            this.state = 2681;
	            this.simplifiedTerm();
	            this.state = 2686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedMultisetAlternation() {
	    let localctx = new SimplifiedMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, GqlParser.RULE_simplifiedMultisetAlternation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2687;
	        this.simplifiedTerm();
	        this.state = 2692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 2688;
	            this.match(GqlParser.MULTISET_ALTERNATION);
	            this.state = 2689;
	            this.simplifiedTerm();
	            this.state = 2694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTerm() {
	    let localctx = new SimplifiedTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, GqlParser.RULE_simplifiedTerm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2695;
	        this.simplifiedFactorLow();
	        this.state = 2699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===27 || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & 532611) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	            this.state = 2696;
	            this.simplifiedFactorLow();
	            this.state = 2701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedFactorLow() {
	    let localctx = new SimplifiedFactorLowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, GqlParser.RULE_simplifiedFactorLow);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2702;
	        this.simplifiedFactorHigh();
	        this.state = 2707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===29) {
	            this.state = 2703;
	            this.match(GqlParser.AMPERSAND);
	            this.state = 2704;
	            this.simplifiedFactorHigh();
	            this.state = 2709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedFactorHigh() {
	    let localctx = new SimplifiedFactorHighContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, GqlParser.RULE_simplifiedFactorHigh);
	    try {
	        this.state = 2713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2710;
	            this.simplifiedTertiary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2711;
	            this.simplifiedQuntified();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2712;
	            this.simplifiedQuestioned();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuntified() {
	    let localctx = new SimplifiedQuntifiedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, GqlParser.RULE_simplifiedQuntified);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2715;
	        this.simplifiedTertiary();
	        this.state = 2716;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuestioned() {
	    let localctx = new SimplifiedQuestionedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, GqlParser.RULE_simplifiedQuestioned);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2718;
	        this.simplifiedTertiary();
	        this.state = 2719;
	        this.match(GqlParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTertiary() {
	    let localctx = new SimplifiedTertiaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, GqlParser.RULE_simplifiedTertiary);
	    try {
	        this.state = 2723;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2721;
	            this.simplifiedDirectionOverride();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2722;
	            this.simplifiedSecondary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDirectionOverride() {
	    let localctx = new SimplifiedDirectionOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, GqlParser.RULE_simplifiedDirectionOverride);
	    try {
	        this.state = 2732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2725;
	            this.simplifiedOverrideLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2726;
	            this.simplifiedOverrideUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2727;
	            this.simplifiedOverrideRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2728;
	            this.simplifiedOverrideLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2729;
	            this.simplifiedOverrideUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2730;
	            this.simplifiedOverrideLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2731;
	            this.simplifiedOverrideAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeft() {
	    let localctx = new SimplifiedOverrideLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, GqlParser.RULE_simplifiedOverrideLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2734;
	        this.match(GqlParser.LEFT_ANGLE_BRACKET);
	        this.state = 2735;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirected() {
	    let localctx = new SimplifiedOverrideUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, GqlParser.RULE_simplifiedOverrideUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2737;
	        this.match(GqlParser.TILDE);
	        this.state = 2738;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideRight() {
	    let localctx = new SimplifiedOverrideRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, GqlParser.RULE_simplifiedOverrideRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2740;
	        this.simplifiedSecondary();
	        this.state = 2741;
	        this.match(GqlParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrUndirected() {
	    let localctx = new SimplifiedOverrideLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, GqlParser.RULE_simplifiedOverrideLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2743;
	        this.match(GqlParser.LEFT_ARROW_TILDE);
	        this.state = 2744;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirectedOrRight() {
	    let localctx = new SimplifiedOverrideUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, GqlParser.RULE_simplifiedOverrideUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2746;
	        this.match(GqlParser.TILDE);
	        this.state = 2747;
	        this.simplifiedSecondary();
	        this.state = 2748;
	        this.match(GqlParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrRight() {
	    let localctx = new SimplifiedOverrideLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, GqlParser.RULE_simplifiedOverrideLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2750;
	        this.match(GqlParser.LEFT_ANGLE_BRACKET);
	        this.state = 2751;
	        this.simplifiedSecondary();
	        this.state = 2752;
	        this.match(GqlParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideAnyDirection() {
	    let localctx = new SimplifiedOverrideAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, GqlParser.RULE_simplifiedOverrideAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2754;
	        this.match(GqlParser.MINUS);
	        this.state = 2755;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedSecondary() {
	    let localctx = new SimplifiedSecondaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, GqlParser.RULE_simplifiedSecondary);
	    try {
	        this.state = 2759;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	        case 56:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2757;
	            this.simplifiedPrimary();
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2758;
	            this.simplifiedNegation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedNegation() {
	    let localctx = new SimplifiedNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, GqlParser.RULE_simplifiedNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2761;
	        this.match(GqlParser.EXCLAMATION);
	        this.state = 2762;
	        this.simplifiedPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPrimary() {
	    let localctx = new SimplifiedPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, GqlParser.RULE_simplifiedPrimary);
	    try {
	        this.state = 2769;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2764;
	            this.labelName();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2765;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 2766;
	            this.simplifiedContents();
	            this.state = 2767;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, GqlParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2771;
	        this.match(GqlParser.WHERE);
	        this.state = 2772;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldClause() {
	    let localctx = new YieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, GqlParser.RULE_yieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2774;
	        this.match(GqlParser.YIELD);
	        this.state = 2775;
	        this.yieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemList() {
	    let localctx = new YieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, GqlParser.RULE_yieldItemList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2777;
	        this.yieldItem();
	        this.state = 2780; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2778;
	            this.match(GqlParser.COMMA);
	            this.state = 2779;
	            this.yieldItem();
	            this.state = 2782; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, GqlParser.RULE_yieldItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2784;
	        this.yieldItemName();
	        this.state = 2786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 2785;
	            this.yieldItemAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemName() {
	    let localctx = new YieldItemNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, GqlParser.RULE_yieldItemName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2788;
	        this.fieldName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemAlias() {
	    let localctx = new YieldItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, GqlParser.RULE_yieldItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2790;
	        this.match(GqlParser.AS);
	        this.state = 2791;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, GqlParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2793;
	        this.match(GqlParser.GROUP);
	        this.state = 2794;
	        this.match(GqlParser.BY);
	        this.state = 2795;
	        this.groupingElementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElementList() {
	    let localctx = new GroupingElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, GqlParser.RULE_groupingElementList);
	    try {
	        this.state = 2805;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2797;
	            this.groupingElement();
	            this.state = 2800; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2798;
	            		this.match(GqlParser.COMMA);
	            		this.state = 2799;
	            		this.groupingElement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2802; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,218, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2804;
	            this.emptyGroupingSet();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElement() {
	    let localctx = new GroupingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, GqlParser.RULE_groupingElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2807;
	        this.bindingVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyGroupingSet() {
	    let localctx = new EmptyGroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, GqlParser.RULE_emptyGroupingSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2809;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2810;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, GqlParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2812;
	        this.match(GqlParser.ORDER);
	        this.state = 2813;
	        this.match(GqlParser.BY);
	        this.state = 2814;
	        this.sortSpecList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunction() {
	    let localctx = new AggregateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, GqlParser.RULE_aggregateFunction);
	    try {
	        this.state = 2822;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2816;
	            this.match(GqlParser.COUNT);
	            this.state = 2817;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 2818;
	            this.match(GqlParser.ASTERISK);
	            this.state = 2819;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2820;
	            this.generalSetFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2821;
	            this.binarySetFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunction() {
	    let localctx = new GeneralSetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, GqlParser.RULE_generalSetFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2824;
	        this.generalSetFunctionType();
	        this.state = 2825;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66 || _la===123) {
	            this.state = 2826;
	            this.setQuantifier();
	        }

	        this.state = 2829;
	        this.valueExpr();
	        this.state = 2830;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunctionType() {
	    let localctx = new GeneralSetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, GqlParser.RULE_generalSetFunctionType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2832;
	        _la = this._input.LA(1);
	        if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & 136314881) !== 0) || _la===187 || _la===188 || ((((_la - 240)) & ~0x1f) == 0 && ((1 << (_la - 240)) & 11) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, GqlParser.RULE_setQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2834;
	        _la = this._input.LA(1);
	        if(!(_la===66 || _la===123)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binarySetFunction() {
	    let localctx = new BinarySetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, GqlParser.RULE_binarySetFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2836;
	        _la = this._input.LA(1);
	        if(!(_la===212 || _la===213)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dependantValueExpr() {
	    let localctx = new DependantValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, GqlParser.RULE_dependantValueExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66 || _la===123) {
	            this.state = 2838;
	            this.setQuantifier();
	        }

	        this.state = 2841;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	independentValueExpr() {
	    let localctx = new IndependentValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, GqlParser.RULE_independentValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2843;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecList() {
	    let localctx = new SortSpecListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, GqlParser.RULE_sortSpecList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2845;
	        this.sortSpec();
	        this.state = 2848; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2846;
	        		this.match(GqlParser.COMMA);
	        		this.state = 2847;
	        		this.sortSpec();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2850; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,223, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpec() {
	    let localctx = new SortSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, GqlParser.RULE_sortSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2852;
	        this.sortKey();
	        this.state = 2854;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        if(la_===1) {
	            this.state = 2853;
	            this.orderingSpec();

	        }
	        this.state = 2857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        if(la_===1) {
	            this.state = 2856;
	            this.nullOrdering();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortKey() {
	    let localctx = new SortKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, GqlParser.RULE_sortKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2859;
	        this.aggregatingValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderingSpec() {
	    let localctx = new OrderingSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, GqlParser.RULE_orderingSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2861;
	        _la = this._input.LA(1);
	        if(!(_la===72 || _la===73 || _la===120 || _la===121)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullOrdering() {
	    let localctx = new NullOrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, GqlParser.RULE_nullOrdering);
	    try {
	        this.state = 2867;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2863;
	            this.match(GqlParser.NULLS);
	            this.state = 2864;
	            this.match(GqlParser.FIRST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2865;
	            this.match(GqlParser.NULLS);
	            this.state = 2866;
	            this.match(GqlParser.LAST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, GqlParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2869;
	        this.match(GqlParser.LIMIT);
	        this.state = 2870;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, GqlParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2872;
	        this.offsetSynonym();
	        this.state = 2873;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetSynonym() {
	    let localctx = new OffsetSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, GqlParser.RULE_offsetSynonym);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2875;
	        _la = this._input.LA(1);
	        if(!(_la===201 || _la===235)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpec() {
	    let localctx = new GraphTypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, GqlParser.RULE_graphTypeSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2878;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 2877;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 2880;
	        this.match(GqlParser.GRAPH);
	        this.state = 2881;
	        this.match(GqlParser.TYPE);
	        this.state = 2882;
	        this.nestedGraphTypeSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphTypeSpec() {
	    let localctx = new NestedGraphTypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, GqlParser.RULE_nestedGraphTypeSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2884;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 2885;
	        this.graphTypeSpecBody();
	        this.state = 2886;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpecBody() {
	    let localctx = new GraphTypeSpecBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, GqlParser.RULE_graphTypeSpecBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2888;
	        this.elementTypeDefList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDefList() {
	    let localctx = new ElementTypeDefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, GqlParser.RULE_elementTypeDefList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2890;
	        this.elementTypeDef();
	        this.state = 2895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 2891;
	            this.match(GqlParser.COMMA);
	            this.state = 2892;
	            this.elementTypeDef();
	            this.state = 2897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDef() {
	    let localctx = new ElementTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, GqlParser.RULE_elementTypeDef);
	    try {
	        this.state = 2900;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2898;
	            this.nodeTypeDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2899;
	            this.edgeTypeDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeDef() {
	    let localctx = new NodeTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, GqlParser.RULE_nodeTypeDef);
	    try {
	        this.state = 2906;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2902;
	            this.nodeTypePattern();
	            break;
	        case 339:
	        case 359:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2903;
	            this.nodeSynonym();
	            this.state = 2904;
	            this.nodeTypePhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePattern() {
	    let localctx = new NodeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, GqlParser.RULE_nodeTypePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2908;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 2909;
	        this.nodeTypeName();
	        this.state = 2910;
	        this.nodeTypeFiller();
	        this.state = 2911;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePhrase() {
	    let localctx = new NodeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, GqlParser.RULE_nodeTypePhrase);
	    var _la = 0; // Token type
	    try {
	        this.state = 2921;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 357:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===357) {
	                this.state = 2913;
	                this.match(GqlParser.TYPE);
	            }

	            this.state = 2916;
	            this.nodeTypeName();
	            this.state = 2918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===40 || _la===171 || _la===330 || _la===332) {
	                this.state = 2917;
	                this.nodeTypeFiller();
	            }

	            break;
	        case 32:
	        case 40:
	        case 171:
	        case 330:
	        case 332:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2920;
	            this.nodeTypeFiller();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeName() {
	    let localctx = new NodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, GqlParser.RULE_nodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2923;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeFiller() {
	    let localctx = new NodeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, GqlParser.RULE_nodeTypeFiller);
	    try {
	        this.state = 2930;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2925;
	            this.nodeTypeLabelSetDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2926;
	            this.nodeTypePropertyTypeSetDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2927;
	            this.nodeTypeLabelSetDef();
	            this.state = 2928;
	            this.nodeTypePropertyTypeSetDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeLabelSetDef() {
	    let localctx = new NodeTypeLabelSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, GqlParser.RULE_nodeTypeLabelSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2932;
	        this.labelSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePropertyTypeSetDef() {
	    let localctx = new NodeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, GqlParser.RULE_nodeTypePropertyTypeSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2934;
	        this.propertyTypeSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeDef() {
	    let localctx = new EdgeTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, GqlParser.RULE_edgeTypeDef);
	    var _la = 0; // Token type
	    try {
	        this.state = 2943;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2936;
	            this.edgeTypePattern();
	            break;
	        case 321:
	        case 322:
	        case 345:
	        case 358:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===321 || _la===358) {
	                this.state = 2937;
	                this.edgeKind();
	            }

	            this.state = 2940;
	            this.edgeSynonym();
	            this.state = 2941;
	            this.edgeTypePhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePattern() {
	    let localctx = new EdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, GqlParser.RULE_edgeTypePattern);
	    try {
	        this.state = 2947;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2945;
	            this.fullEdgeTypePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2946;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePhrase() {
	    let localctx = new EdgeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, GqlParser.RULE_edgeTypePhrase);
	    var _la = 0; // Token type
	    try {
	        this.state = 2959;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 357:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===357) {
	                this.state = 2949;
	                this.match(GqlParser.TYPE);
	            }

	            this.state = 2952;
	            this.edgeTypeName();

	            this.state = 2953;
	            this.edgeTypeFiller();
	            this.state = 2954;
	            this.endpointDef();
	            break;
	        case 32:
	        case 40:
	        case 171:
	        case 330:
	        case 332:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2956;
	            this.edgeTypeFiller();
	            this.state = 2957;
	            this.endpointDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeName() {
	    let localctx = new EdgeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, GqlParser.RULE_edgeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2961;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeFiller() {
	    let localctx = new EdgeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, GqlParser.RULE_edgeTypeFiller);
	    try {
	        this.state = 2968;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2963;
	            this.edgeTypeLabelSetDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2964;
	            this.edgeTypePropertyTypeSetDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2965;
	            this.edgeTypeLabelSetDef();
	            this.state = 2966;
	            this.edgeTypePropertyTypeSetDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeLabelSetDef() {
	    let localctx = new EdgeTypeLabelSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, GqlParser.RULE_edgeTypeLabelSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2970;
	        this.labelSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePropertyTypeSetDef() {
	    let localctx = new EdgeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, GqlParser.RULE_edgeTypePropertyTypeSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2972;
	        this.propertyTypeSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePattern() {
	    let localctx = new FullEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, GqlParser.RULE_fullEdgeTypePattern);
	    try {
	        this.state = 2977;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2974;
	            this.fullEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2975;
	            this.fullEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2976;
	            this.fullEdgeTypePatternUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingRight() {
	    let localctx = new FullEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, GqlParser.RULE_fullEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2979;
	        this.sourceNodeTypeRef();
	        this.state = 2980;
	        this.arcTypePointingRight();
	        this.state = 2981;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingLeft() {
	    let localctx = new FullEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, GqlParser.RULE_fullEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2983;
	        this.destinationNodeTypeRef();
	        this.state = 2984;
	        this.arcTypePointingLeft();
	        this.state = 2985;
	        this.sourceNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternUndirected() {
	    let localctx = new FullEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, GqlParser.RULE_fullEdgeTypePatternUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2987;
	        this.sourceNodeTypeRef();
	        this.state = 2988;
	        this.arcTypeUndirected();
	        this.state = 2989;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingRight() {
	    let localctx = new ArcTypePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, GqlParser.RULE_arcTypePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2991;
	        this.match(GqlParser.MINUS_LEFT_BRACKET);
	        this.state = 2992;
	        this.arcTypeFiller();
	        this.state = 2993;
	        this.match(GqlParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingLeft() {
	    let localctx = new ArcTypePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, GqlParser.RULE_arcTypePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2995;
	        this.match(GqlParser.LEFT_ARROW_BRACKET);
	        this.state = 2996;
	        this.arcTypeFiller();
	        this.state = 2997;
	        this.match(GqlParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeUndirected() {
	    let localctx = new ArcTypeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, GqlParser.RULE_arcTypeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2999;
	        this.match(GqlParser.TILDE_LEFT_BRACKET);
	        this.state = 3000;
	        this.arcTypeFiller();
	        this.state = 3001;
	        this.match(GqlParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeFiller() {
	    let localctx = new ArcTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, GqlParser.RULE_arcTypeFiller);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3003;
	        this.edgeTypeName();
	        this.state = 3004;
	        this.edgeTypeFiller();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePattern() {
	    let localctx = new AbbreviatedEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, GqlParser.RULE_abbreviatedEdgeTypePattern);
	    try {
	        this.state = 3009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3006;
	            this.abbreviatedEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3007;
	            this.abbreviatedEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3008;
	            this.abbreviatedEdgeTypePatternUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingRight() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3011;
	        this.sourceNodeTypeRef();
	        this.state = 3012;
	        this.match(GqlParser.RIGHT_ARROW);
	        this.state = 3013;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingLeft() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3015;
	        this.destinationNodeTypeRef();
	        this.state = 3016;
	        this.match(GqlParser.LEFT_ARROW);
	        this.state = 3017;
	        this.sourceNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternUndirected() {
	    let localctx = new AbbreviatedEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, GqlParser.RULE_abbreviatedEdgeTypePatternUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3019;
	        this.sourceNodeTypeRef();
	        this.state = 3020;
	        this.match(GqlParser.TILDE);
	        this.state = 3021;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeRef() {
	    let localctx = new NodeTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, GqlParser.RULE_nodeTypeRef);
	    try {
	        this.state = 3025;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3023;
	            this.sourceNodeTypeRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3024;
	            this.destinationNodeTypeRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeRef() {
	    let localctx = new SourceNodeTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, GqlParser.RULE_sourceNodeTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.state = 3036;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3027;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3028;
	            this.sourceNodeTypeName();
	            this.state = 3029;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3031;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===40 || _la===171 || _la===330 || _la===332) {
	                this.state = 3032;
	                this.nodeTypeFiller();
	            }

	            this.state = 3035;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeRef() {
	    let localctx = new DestinationNodeTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, GqlParser.RULE_destinationNodeTypeRef);
	    var _la = 0; // Token type
	    try {
	        this.state = 3047;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3038;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3039;
	            this.destinationNodeTypeName();
	            this.state = 3040;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3042;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===40 || _la===171 || _la===330 || _la===332) {
	                this.state = 3043;
	                this.nodeTypeFiller();
	            }

	            this.state = 3046;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeKind() {
	    let localctx = new EdgeKindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, GqlParser.RULE_edgeKind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3049;
	        _la = this._input.LA(1);
	        if(!(_la===321 || _la===358)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointDef() {
	    let localctx = new EndpointDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, GqlParser.RULE_endpointDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3051;
	        this.match(GqlParser.CONNECTING);
	        this.state = 3052;
	        this.enpointPairDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enpointPairDef() {
	    let localctx = new EnpointPairDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, GqlParser.RULE_enpointPairDef);
	    try {
	        this.state = 3058;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3054;
	            this.endpointPairDefPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3055;
	            this.endpointPairDefPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3056;
	            this.endpointPairDefUndirected();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3057;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefPointingRight() {
	    let localctx = new EndpointPairDefPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, GqlParser.RULE_endpointPairDefPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3060;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3061;
	        this.sourceNodeTypeName();
	        this.state = 3062;
	        this.connectorPointingRight();
	        this.state = 3063;
	        this.destinationNodeTypeName();
	        this.state = 3064;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefPointingLeft() {
	    let localctx = new EndpointPairDefPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, GqlParser.RULE_endpointPairDefPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3066;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3067;
	        this.destinationNodeTypeName();
	        this.state = 3068;
	        this.connectorPointingLeft();
	        this.state = 3069;
	        this.sourceNodeTypeName();
	        this.state = 3070;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefUndirected() {
	    let localctx = new EndpointPairDefUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, GqlParser.RULE_endpointPairDefUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3072;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3073;
	        this.sourceNodeTypeName();
	        this.state = 3074;
	        this.connectorUndirected();
	        this.state = 3075;
	        this.destinationNodeTypeName();
	        this.state = 3076;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorPointingRight() {
	    let localctx = new ConnectorPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, GqlParser.RULE_connectorPointingRight);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3078;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===354)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorPointingLeft() {
	    let localctx = new ConnectorPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, GqlParser.RULE_connectorPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3080;
	        this.match(GqlParser.LEFT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorUndirected() {
	    let localctx = new ConnectorUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, GqlParser.RULE_connectorUndirected);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3082;
	        _la = this._input.LA(1);
	        if(!(_la===50 || _la===354)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeName() {
	    let localctx = new SourceNodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, GqlParser.RULE_sourceNodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3084;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeName() {
	    let localctx = new DestinationNodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, GqlParser.RULE_destinationNodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3086;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetDef() {
	    let localctx = new LabelSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, GqlParser.RULE_labelSetDef);
	    try {
	        this.state = 3096;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 330:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3088;
	            this.match(GqlParser.LABEL);
	            this.state = 3089;
	            this.labelName();
	            break;
	        case 332:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3090;
	            this.match(GqlParser.LABELS);
	            this.state = 3091;
	            this.labelSetSpec();
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3092;
	            this.match(GqlParser.IS);
	            this.state = 3093;
	            this.labelSetSpec();
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3094;
	            this.match(GqlParser.COLON);
	            this.state = 3095;
	            this.labelSetSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeSetDef() {
	    let localctx = new PropertyTypeSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, GqlParser.RULE_propertyTypeSetDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3098;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 3100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	            this.state = 3099;
	            this.propertyTypeDefList();
	        }

	        this.state = 3102;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDefList() {
	    let localctx = new PropertyTypeDefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, GqlParser.RULE_propertyTypeDefList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3104;
	        this.propertyTypeDef();
	        this.state = 3109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 3105;
	            this.match(GqlParser.COMMA);
	            this.state = 3106;
	            this.propertyTypeDef();
	            this.state = 3111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDef() {
	    let localctx = new PropertyTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, GqlParser.RULE_propertyTypeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3112;
	        this.propertyName();
	        this.state = 3114;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33 || _la===252) {
	            this.state = 3113;
	            this.typed();
	        }

	        this.state = 3116;
	        this.propertyValueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyValueType() {
	    let localctx = new PropertyValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, GqlParser.RULE_propertyValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3118;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableType() {
	    let localctx = new BindingTableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, GqlParser.RULE_bindingTableType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===316) {
	            this.state = 3120;
	            this.match(GqlParser.BINDING);
	        }

	        this.state = 3123;
	        this.match(GqlParser.TABLE);
	        this.state = 3124;
	        this.fieldTypesSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueType() {
	    let localctx = new ValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, GqlParser.RULE_valueType);
	    try {
	        this.state = 3129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3126;
	            this.predefinedType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3127;
	            this.constructedType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3128;
	            this.dynamicUnionType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typed() {
	    let localctx = new TypedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, GqlParser.RULE_typed);
	    try {
	        this.state = 3133;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3131;
	            this.match(GqlParser.DOUBLE_COLON);
	            break;
	        case 252:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3132;
	            this.match(GqlParser.TYPED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedType() {
	    let localctx = new PredefinedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, GqlParser.RULE_predefinedType);
	    try {
	        this.state = 3142;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	        case 82:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3135;
	            this.booleanType();
	            break;
	        case 242:
	        case 269:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3136;
	            this.charStringType();
	            break;
	        case 80:
	        case 87:
	        case 268:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3137;
	            this.byteStringType();
	            break;
	        case 78:
	        case 79:
	        case 116:
	        case 117:
	        case 124:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 218:
	        case 232:
	        case 236:
	        case 237:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 263:
	        case 266:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3138;
	            this.numericType();
	            break;
	        case 113:
	        case 126:
	        case 178:
	        case 247:
	        case 248:
	        case 277:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3139;
	            this.temporalType();
	            break;
	        case 44:
	        case 202:
	        case 316:
	        case 321:
	        case 322:
	        case 327:
	        case 339:
	        case 343:
	        case 345:
	        case 351:
	        case 358:
	        case 359:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3140;
	            this.refValueType();
	            break;
	        case 209:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3141;
	            this.pathValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanType() {
	    let localctx = new BooleanTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, GqlParser.RULE_booleanType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3144;
	        _la = this._input.LA(1);
	        if(!(_la===81 || _la===82)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3146;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	        if(la_===1) {
	            this.state = 3145;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringType() {
	    let localctx = new CharStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, GqlParser.RULE_charStringType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3148;
	        _la = this._input.LA(1);
	        if(!(_la===242 || _la===269)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3153;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        if(la_===1) {
	            this.state = 3149;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3150;
	            this.maxLength();
	            this.state = 3151;
	            this.match(GqlParser.RIGHT_PAREN);

	        }
	        this.state = 3156;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        if(la_===1) {
	            this.state = 3155;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringType() {
	    let localctx = new ByteStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, GqlParser.RULE_byteStringType);
	    try {
	        this.state = 3193;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3158;
	            this.match(GqlParser.BYTES);
	            this.state = 3168;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	            if(la_===1) {
	                this.state = 3159;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 3163;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	                if(la_===1) {
	                    this.state = 3160;
	                    this.minLength();
	                    this.state = 3161;
	                    this.match(GqlParser.COMMA);

	                }
	                this.state = 3165;
	                this.maxLength();
	                this.state = 3166;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            this.state = 3171;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	            if(la_===1) {
	                this.state = 3170;
	                this.notNull();

	            }
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3173;
	            this.match(GqlParser.BINARY);
	            this.state = 3178;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	            if(la_===1) {
	                this.state = 3174;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 3175;
	                this.fixedLength();
	                this.state = 3176;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            this.state = 3181;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	            if(la_===1) {
	                this.state = 3180;
	                this.notNull();

	            }
	            break;
	        case 268:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3183;
	            this.match(GqlParser.VARBINARY);
	            this.state = 3188;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
	            if(la_===1) {
	                this.state = 3184;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 3185;
	                this.maxLength();
	                this.state = 3186;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            this.state = 3191;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	            if(la_===1) {
	                this.state = 3190;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minLength() {
	    let localctx = new MinLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, GqlParser.RULE_minLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3195;
	        this.match(GqlParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maxLength() {
	    let localctx = new MaxLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, GqlParser.RULE_maxLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3197;
	        this.match(GqlParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedLength() {
	    let localctx = new FixedLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, GqlParser.RULE_fixedLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3199;
	        this.match(GqlParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, GqlParser.RULE_numericType);
	    try {
	        this.state = 3203;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	        case 79:
	        case 116:
	        case 117:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 232:
	        case 236:
	        case 237:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 263:
	        case 266:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3201;
	            this.exactNumericType();
	            break;
	        case 124:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 218:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3202;
	            this.approximateNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exactNumericType() {
	    let localctx = new ExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, GqlParser.RULE_exactNumericType);
	    try {
	        this.state = 3207;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	        case 79:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 232:
	        case 236:
	        case 237:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 263:
	        case 266:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3205;
	            this.binaryExactNumericType();
	            break;
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3206;
	            this.decimalExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryExactNumericType() {
	    let localctx = new BinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, GqlParser.RULE_binaryExactNumericType);
	    try {
	        this.state = 3211;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	        case 79:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 232:
	        case 236:
	        case 237:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3209;
	            this.signedBinaryExactNumericType();
	            break;
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 263:
	        case 266:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3210;
	            this.unsignedBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signedBinaryExactNumericType() {
	    let localctx = new SignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, GqlParser.RULE_signedBinaryExactNumericType);
	    var _la = 0; // Token type
	    try {
	        this.state = 3259;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 157:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3213;
	            this.match(GqlParser.INT8);
	            this.state = 3215;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	            if(la_===1) {
	                this.state = 3214;
	                this.notNull();

	            }
	            break;
	        case 159:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3217;
	            this.match(GqlParser.INT16);
	            this.state = 3219;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	            if(la_===1) {
	                this.state = 3218;
	                this.notNull();

	            }
	            break;
	        case 161:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3221;
	            this.match(GqlParser.INT32);
	            this.state = 3223;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	            if(la_===1) {
	                this.state = 3222;
	                this.notNull();

	            }
	            break;
	        case 163:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3225;
	            this.match(GqlParser.INT64);
	            this.state = 3227;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 3226;
	                this.notNull();

	            }
	            break;
	        case 165:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3229;
	            this.match(GqlParser.INT128);
	            this.state = 3231;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	            if(la_===1) {
	                this.state = 3230;
	                this.notNull();

	            }
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3233;
	            this.match(GqlParser.INT256);
	            this.state = 3235;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	            if(la_===1) {
	                this.state = 3234;
	                this.notNull();

	            }
	            break;
	        case 237:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3237;
	            this.match(GqlParser.SMALLINT);
	            this.state = 3239;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	            if(la_===1) {
	                this.state = 3238;
	                this.notNull();

	            }
	            break;
	        case 155:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3241;
	            this.match(GqlParser.INT);
	            this.state = 3246;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	            if(la_===1) {
	                this.state = 3242;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 3243;
	                this.precision();
	                this.state = 3244;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            this.state = 3249;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	            if(la_===1) {
	                this.state = 3248;
	                this.notNull();

	            }
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3251;
	            this.match(GqlParser.BIGINT);
	            this.state = 3253;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	            if(la_===1) {
	                this.state = 3252;
	                this.notNull();

	            }
	            break;
	        case 78:
	        case 156:
	        case 158:
	        case 160:
	        case 162:
	        case 164:
	        case 166:
	        case 168:
	        case 232:
	        case 236:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3256;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232) {
	                this.state = 3255;
	                this.match(GqlParser.SIGNED);
	            }

	            this.state = 3258;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedBinaryExactNumericType() {
	    let localctx = new UnsignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, GqlParser.RULE_unsignedBinaryExactNumericType);
	    try {
	        this.state = 3305;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 255:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3261;
	            this.match(GqlParser.UINT8);
	            this.state = 3263;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	            if(la_===1) {
	                this.state = 3262;
	                this.notNull();

	            }
	            break;
	        case 256:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3265;
	            this.match(GqlParser.UINT16);
	            this.state = 3267;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	            if(la_===1) {
	                this.state = 3266;
	                this.notNull();

	            }
	            break;
	        case 257:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3269;
	            this.match(GqlParser.UINT32);
	            this.state = 3271;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	            if(la_===1) {
	                this.state = 3270;
	                this.notNull();

	            }
	            break;
	        case 258:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3273;
	            this.match(GqlParser.UINT64);
	            this.state = 3275;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	            if(la_===1) {
	                this.state = 3274;
	                this.notNull();

	            }
	            break;
	        case 259:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3277;
	            this.match(GqlParser.UINT128);
	            this.state = 3279;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	            if(la_===1) {
	                this.state = 3278;
	                this.notNull();

	            }
	            break;
	        case 260:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3281;
	            this.match(GqlParser.UINT256);
	            this.state = 3283;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	            if(la_===1) {
	                this.state = 3282;
	                this.notNull();

	            }
	            break;
	        case 266:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3285;
	            this.match(GqlParser.USMALLINT);
	            this.state = 3287;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	            if(la_===1) {
	                this.state = 3286;
	                this.notNull();

	            }
	            break;
	        case 254:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3289;
	            this.match(GqlParser.UINT);
	            this.state = 3294;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	            if(la_===1) {
	                this.state = 3290;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 3291;
	                this.precision();
	                this.state = 3292;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            this.state = 3297;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	            if(la_===1) {
	                this.state = 3296;
	                this.notNull();

	            }
	            break;
	        case 253:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3299;
	            this.match(GqlParser.UBIGINT);
	            this.state = 3301;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	            if(la_===1) {
	                this.state = 3300;
	                this.notNull();

	            }
	            break;
	        case 263:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3303;
	            this.match(GqlParser.UNSIGNED);
	            this.state = 3304;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verboseBinaryExactNumericType() {
	    let localctx = new VerboseBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, GqlParser.RULE_verboseBinaryExactNumericType);
	    try {
	        this.state = 3351;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 158:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3307;
	            this.match(GqlParser.INTEGER8);
	            this.state = 3309;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	            if(la_===1) {
	                this.state = 3308;
	                this.notNull();

	            }
	            break;
	        case 160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3311;
	            this.match(GqlParser.INTEGER16);
	            this.state = 3313;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	            if(la_===1) {
	                this.state = 3312;
	                this.notNull();

	            }
	            break;
	        case 162:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3315;
	            this.match(GqlParser.INTEGER32);
	            this.state = 3317;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 3316;
	                this.notNull();

	            }
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3319;
	            this.match(GqlParser.INTEGER64);
	            this.state = 3321;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	            if(la_===1) {
	                this.state = 3320;
	                this.notNull();

	            }
	            break;
	        case 166:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3323;
	            this.match(GqlParser.INTEGER128);
	            this.state = 3325;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	            if(la_===1) {
	                this.state = 3324;
	                this.notNull();

	            }
	            break;
	        case 168:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3327;
	            this.match(GqlParser.INTEGER256);
	            this.state = 3329;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	            if(la_===1) {
	                this.state = 3328;
	                this.notNull();

	            }
	            break;
	        case 236:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3331;
	            this.match(GqlParser.SMALL);
	            this.state = 3332;
	            this.match(GqlParser.INTEGER);
	            this.state = 3334;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	            if(la_===1) {
	                this.state = 3333;
	                this.notNull();

	            }
	            break;
	        case 156:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3336;
	            this.match(GqlParser.INTEGER);
	            this.state = 3341;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	            if(la_===1) {
	                this.state = 3337;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 3338;
	                this.precision();
	                this.state = 3339;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            this.state = 3344;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	            if(la_===1) {
	                this.state = 3343;
	                this.notNull();

	            }
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3346;
	            this.match(GqlParser.BIG);
	            this.state = 3347;
	            this.match(GqlParser.INTEGER);
	            this.state = 3349;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	            if(la_===1) {
	                this.state = 3348;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalExactNumericType() {
	    let localctx = new DecimalExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, GqlParser.RULE_decimalExactNumericType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3353;
	        _la = this._input.LA(1);
	        if(!(_la===116 || _la===117)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        if(la_===1) {
	            this.state = 3354;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3355;
	            this.precision();
	            this.state = 3358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34) {
	                this.state = 3356;
	                this.match(GqlParser.COMMA);
	                this.state = 3357;
	                this.scale();
	            }

	            this.state = 3360;
	            this.match(GqlParser.RIGHT_PAREN);

	        }
	        this.state = 3365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	        if(la_===1) {
	            this.state = 3364;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precision() {
	    let localctx = new PrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, GqlParser.RULE_precision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3367;
	        this.match(GqlParser.UNSIGNED_DECIMAL_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scale() {
	    let localctx = new ScaleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, GqlParser.RULE_scale);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3369;
	        this.match(GqlParser.UNSIGNED_DECIMAL_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	approximateNumericType() {
	    let localctx = new ApproximateNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, GqlParser.RULE_approximateNumericType);
	    var _la = 0; // Token type
	    try {
	        this.state = 3414;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 138:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3371;
	            this.match(GqlParser.FLOAT16);
	            this.state = 3373;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	            if(la_===1) {
	                this.state = 3372;
	                this.notNull();

	            }
	            break;
	        case 139:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3375;
	            this.match(GqlParser.FLOAT32);
	            this.state = 3377;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	            if(la_===1) {
	                this.state = 3376;
	                this.notNull();

	            }
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3379;
	            this.match(GqlParser.FLOAT64);
	            this.state = 3381;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	            if(la_===1) {
	                this.state = 3380;
	                this.notNull();

	            }
	            break;
	        case 141:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3383;
	            this.match(GqlParser.FLOAT128);
	            this.state = 3385;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	            if(la_===1) {
	                this.state = 3384;
	                this.notNull();

	            }
	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3387;
	            this.match(GqlParser.FLOAT256);
	            this.state = 3389;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	            if(la_===1) {
	                this.state = 3388;
	                this.notNull();

	            }
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3391;
	            this.match(GqlParser.FLOAT);
	            this.state = 3400;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	            if(la_===1) {
	                this.state = 3392;
	                this.match(GqlParser.LEFT_PAREN);
	                this.state = 3393;
	                this.precision();
	                this.state = 3396;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===34) {
	                    this.state = 3394;
	                    this.match(GqlParser.COMMA);
	                    this.state = 3395;
	                    this.scale();
	                }

	                this.state = 3398;
	                this.match(GqlParser.RIGHT_PAREN);

	            }
	            this.state = 3403;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	            if(la_===1) {
	                this.state = 3402;
	                this.notNull();

	            }
	            break;
	        case 218:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3405;
	            this.match(GqlParser.REAL);
	            this.state = 3407;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	            if(la_===1) {
	                this.state = 3406;
	                this.notNull();

	            }
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3409;
	            this.match(GqlParser.DOUBLE);
	            this.state = 3411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===215) {
	                this.state = 3410;
	                this.match(GqlParser.PRECISION);
	            }

	            this.state = 3413;
	            this.notNull();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalType() {
	    let localctx = new TemporalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, GqlParser.RULE_temporalType);
	    try {
	        this.state = 3418;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	        case 178:
	        case 247:
	        case 248:
	        case 277:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3416;
	            this.temporalInstantType();
	            break;
	        case 126:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3417;
	            this.temporalDurationType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalInstantType() {
	    let localctx = new TemporalInstantTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, GqlParser.RULE_temporalInstantType);
	    try {
	        this.state = 3425;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3420;
	            this.dateTimeType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3421;
	            this.localDateTimeType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3422;
	            this.dateType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3423;
	            this.timeType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3424;
	            this.localTimeType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalDurationType() {
	    let localctx = new TemporalDurationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, GqlParser.RULE_temporalDurationType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3427;
	        this.durationType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeType() {
	    let localctx = new DateTimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, GqlParser.RULE_dateTimeType);
	    try {
	        this.state = 3440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3429;
	            this.match(GqlParser.ZONED);
	            this.state = 3430;
	            this.match(GqlParser.DATETIME);
	            this.state = 3432;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	            if(la_===1) {
	                this.state = 3431;
	                this.notNull();

	            }
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3434;
	            this.match(GqlParser.TIMESTAMP);
	            this.state = 3435;
	            this.match(GqlParser.WITH);
	            this.state = 3436;
	            this.match(GqlParser.TIMEZONE);
	            this.state = 3438;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	            if(la_===1) {
	                this.state = 3437;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localDateTimeType() {
	    let localctx = new LocalDateTimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, GqlParser.RULE_localDateTimeType);
	    try {
	        this.state = 3454;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 178:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3442;
	            this.match(GqlParser.LOCAL);
	            this.state = 3443;
	            this.match(GqlParser.DATETIME);
	            this.state = 3445;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	            if(la_===1) {
	                this.state = 3444;
	                this.notNull();

	            }
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3447;
	            this.match(GqlParser.TIMESTAMP);

	            this.state = 3448;
	            this.match(GqlParser.WITHOUT);
	            this.state = 3449;
	            this.match(GqlParser.TIMEZONE);
	            this.state = 3452;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	            if(la_===1) {
	                this.state = 3451;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateType() {
	    let localctx = new DateTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, GqlParser.RULE_dateType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3456;
	        this.match(GqlParser.DATE);
	        this.state = 3458;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	        if(la_===1) {
	            this.state = 3457;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeType() {
	    let localctx = new TimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, GqlParser.RULE_timeType);
	    try {
	        this.state = 3471;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3460;
	            this.match(GqlParser.ZONED);
	            this.state = 3461;
	            this.match(GqlParser.TIME);
	            this.state = 3463;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	            if(la_===1) {
	                this.state = 3462;
	                this.notNull();

	            }
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3465;
	            this.match(GqlParser.TIME);
	            this.state = 3466;
	            this.match(GqlParser.WITH);
	            this.state = 3467;
	            this.match(GqlParser.TIMEZONE);
	            this.state = 3469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            if(la_===1) {
	                this.state = 3468;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTimeType() {
	    let localctx = new LocalTimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, GqlParser.RULE_localTimeType);
	    try {
	        this.state = 3484;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 178:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3473;
	            this.match(GqlParser.LOCAL);
	            this.state = 3474;
	            this.match(GqlParser.TIME);
	            this.state = 3476;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	            if(la_===1) {
	                this.state = 3475;
	                this.notNull();

	            }
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3478;
	            this.match(GqlParser.TIME);
	            this.state = 3479;
	            this.match(GqlParser.WITHOUT);
	            this.state = 3480;
	            this.match(GqlParser.TIMEZONE);
	            this.state = 3482;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	            if(la_===1) {
	                this.state = 3481;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationType() {
	    let localctx = new DurationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, GqlParser.RULE_durationType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3486;
	        this.match(GqlParser.DURATION);
	        this.state = 3488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        if(la_===1) {
	            this.state = 3487;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refValueType() {
	    let localctx = new RefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, GqlParser.RULE_refValueType);
	    try {
	        this.state = 3494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3490;
	            this.graphRefValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3491;
	            this.bindingTableRefValueType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3492;
	            this.nodeRefValueType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3493;
	            this.edgeRefValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphRefValueType() {
	    let localctx = new GraphRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, GqlParser.RULE_graphRefValueType);
	    try {
	        this.state = 3498;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 202:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3496;
	            this.openGraphRefValueType();
	            break;
	        case 327:
	        case 343:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3497;
	            this.closedGraphRefValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphRefValueType() {
	    let localctx = new OpenGraphRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, GqlParser.RULE_openGraphRefValueType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3500;
	        this.match(GqlParser.OPEN);
	        this.state = 3502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===343) {
	            this.state = 3501;
	            this.match(GqlParser.PROPERTY);
	        }

	        this.state = 3504;
	        this.match(GqlParser.GRAPH);
	        this.state = 3506;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	        if(la_===1) {
	            this.state = 3505;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedGraphRefValueType() {
	    let localctx = new ClosedGraphRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, GqlParser.RULE_closedGraphRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3508;
	        this.graphTypeSpec();
	        this.state = 3510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	        if(la_===1) {
	            this.state = 3509;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableRefValueType() {
	    let localctx = new BindingTableRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, GqlParser.RULE_bindingTableRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3512;
	        this.bindingTableType();
	        this.state = 3514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	        if(la_===1) {
	            this.state = 3513;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeRefValueType() {
	    let localctx = new NodeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, GqlParser.RULE_nodeRefValueType);
	    try {
	        this.state = 3518;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 202:
	        case 339:
	        case 359:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3516;
	            this.openNodeRefValueType();
	            break;
	        case 44:
	        case 321:
	        case 322:
	        case 345:
	        case 358:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3517;
	            this.closedNodeRefValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openNodeRefValueType() {
	    let localctx = new OpenNodeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, GqlParser.RULE_openNodeRefValueType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===202) {
	            this.state = 3520;
	            this.match(GqlParser.OPEN);
	        }

	        this.state = 3523;
	        this.nodeSynonym();
	        this.state = 3525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	        if(la_===1) {
	            this.state = 3524;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedNodeRefValueType() {
	    let localctx = new ClosedNodeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, GqlParser.RULE_closedNodeRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3527;
	        this.edgeTypeDef();
	        this.state = 3529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        if(la_===1) {
	            this.state = 3528;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeRefValueType() {
	    let localctx = new EdgeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, GqlParser.RULE_edgeRefValueType);
	    try {
	        this.state = 3533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3531;
	            this.openEdgeRefValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3532;
	            this.closedEdgeRefValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openEdgeRefValueType() {
	    let localctx = new OpenEdgeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, GqlParser.RULE_openEdgeRefValueType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===202) {
	            this.state = 3535;
	            this.match(GqlParser.OPEN);
	        }

	        this.state = 3538;
	        this.edgeSynonym();
	        this.state = 3540;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	        if(la_===1) {
	            this.state = 3539;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedEdgeRefValueType() {
	    let localctx = new ClosedEdgeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, GqlParser.RULE_closedEdgeRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3542;
	        this.edgeTypeDef();
	        this.state = 3544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	        if(la_===1) {
	            this.state = 3543;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructedType() {
	    let localctx = new ConstructedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, GqlParser.RULE_constructedType);
	    try {
	        this.state = 3548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3546;
	            this.listValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3547;
	            this.recordType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueType() {
	    let localctx = new ListValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, GqlParser.RULE_listValueType);
	    try {
	        this.state = 3574;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 70:
	        case 146:
	        case 176:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3550;
	            this.listValueTypeName();
	            this.state = 3551;
	            this.match(GqlParser.LEFT_ANGLE_BRACKET);
	            this.state = 3552;
	            this.predefinedType();
	            this.state = 3553;
	            this.match(GqlParser.RIGHT_ANGLE_BRACKET);
	            this.state = 3558;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	            if(la_===1) {
	                this.state = 3554;
	                this.match(GqlParser.LEFT_BRACKET);
	                this.state = 3555;
	                this.maxLength();
	                this.state = 3556;
	                this.match(GqlParser.RIGHT_BRACKET);

	            }
	            this.state = 3561;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
	            if(la_===1) {
	                this.state = 3560;
	                this.notNull();

	            }
	            break;
	        case 44:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 87:
	        case 113:
	        case 116:
	        case 117:
	        case 124:
	        case 126:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 178:
	        case 202:
	        case 209:
	        case 218:
	        case 232:
	        case 236:
	        case 237:
	        case 242:
	        case 247:
	        case 248:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 263:
	        case 266:
	        case 268:
	        case 269:
	        case 277:
	        case 316:
	        case 321:
	        case 322:
	        case 327:
	        case 339:
	        case 343:
	        case 345:
	        case 351:
	        case 358:
	        case 359:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3563;
	            this.predefinedType();
	            this.state = 3564;
	            this.listValueTypeName();
	            this.state = 3569;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	            if(la_===1) {
	                this.state = 3565;
	                this.match(GqlParser.LEFT_BRACKET);
	                this.state = 3566;
	                this.maxLength();
	                this.state = 3567;
	                this.match(GqlParser.RIGHT_BRACKET);

	            }
	            this.state = 3572;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
	            if(la_===1) {
	                this.state = 3571;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeName() {
	    let localctx = new ListValueTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, GqlParser.RULE_listValueTypeName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 3576;
	            this.match(GqlParser.GROUP);
	        }

	        this.state = 3579;
	        this.listValueTypeNameSynonym();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeNameSynonym() {
	    let localctx = new ListValueTypeNameSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, GqlParser.RULE_listValueTypeNameSynonym);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3581;
	        _la = this._input.LA(1);
	        if(!(_la===70 || _la===176)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordType() {
	    let localctx = new RecordTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, GqlParser.RULE_recordType);
	    var _la = 0; // Token type
	    try {
	        this.state = 3597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===202) {
	                this.state = 3583;
	                this.match(GqlParser.OPEN);
	            }

	            this.state = 3586;
	            this.match(GqlParser.RECORD);
	            this.state = 3588;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	            if(la_===1) {
	                this.state = 3587;
	                this.notNull();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3591;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===219) {
	                this.state = 3590;
	                this.match(GqlParser.RECORD);
	            }

	            this.state = 3593;
	            this.fieldTypesSpec();
	            this.state = 3595;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
	            if(la_===1) {
	                this.state = 3594;
	                this.notNull();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypesSpec() {
	    let localctx = new FieldTypesSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, GqlParser.RULE_fieldTypesSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3599;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 3601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	            this.state = 3600;
	            this.fieldTypeList();
	        }

	        this.state = 3603;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypeList() {
	    let localctx = new FieldTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, GqlParser.RULE_fieldTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3605;
	        this.fieldType();
	        this.state = 3608; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3606;
	            this.match(GqlParser.COMMA);
	            this.state = 3607;
	            this.fieldType();
	            this.state = 3610; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicUnionType() {
	    let localctx = new DynamicUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, GqlParser.RULE_dynamicUnionType);
	    try {
	        this.state = 3615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3612;
	            this.openDynamicUnionType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3613;
	            this.dynamicPropertyValueType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3614;
	            this.closedDynamicUnionType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openDynamicUnionType() {
	    let localctx = new OpenDynamicUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, GqlParser.RULE_openDynamicUnionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3617;
	        this.match(GqlParser.ANY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicPropertyValueType() {
	    let localctx = new DynamicPropertyValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, GqlParser.RULE_dynamicPropertyValueType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 3619;
	            this.match(GqlParser.ANY);
	        }

	        this.state = 3622;
	        this.match(GqlParser.PROPERTY);
	        this.state = 3623;
	        this.match(GqlParser.VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedDynamicUnionType() {
	    let localctx = new ClosedDynamicUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, GqlParser.RULE_closedDynamicUnionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3625;
	        this.match(GqlParser.ANY);
	        this.state = 3626;
	        this.match(GqlParser.LEFT_ANGLE_BRACKET);
	        this.state = 3627;
	        this.componentTypeList();
	        this.state = 3628;
	        this.match(GqlParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentTypeList() {
	    let localctx = new ComponentTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, GqlParser.RULE_componentTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3630;
	        this.componentType();
	        this.state = 3635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===52) {
	            this.state = 3631;
	            this.match(GqlParser.VERTICAL_BAR);
	            this.state = 3632;
	            this.componentType();
	            this.state = 3637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentType() {
	    let localctx = new ComponentTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, GqlParser.RULE_componentType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3638;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueType() {
	    let localctx = new PathValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, GqlParser.RULE_pathValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3640;
	        this.match(GqlParser.PATH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notNull() {
	    let localctx = new NotNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, GqlParser.RULE_notNull);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3642;
	        this.match(GqlParser.NOT);
	        this.state = 3643;
	        this.match(GqlParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldType() {
	    let localctx = new FieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, GqlParser.RULE_fieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3645;
	        this.fieldName();

	        this.state = 3646;
	        this.typed();
	        this.state = 3647;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaRef() {
	    let localctx = new SchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, GqlParser.RULE_schemaRef);
	    try {
	        this.state = 3652;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 48:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3649;
	            this.absoluteCatalogSchemaRef();
	            break;
	        case 54:
	        case 55:
	        case 109:
	        case 150:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3650;
	            this.relativeCatalogSchemaRef();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3651;
	            this.refParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteCatalogSchemaRef() {
	    let localctx = new AbsoluteCatalogSchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, GqlParser.RULE_absoluteCatalogSchemaRef);
	    try {
	        this.state = 3658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3654;
	            this.match(GqlParser.SOLIDUS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3655;
	            this.absoluteDirectoryPath();
	            this.state = 3656;
	            this.schemaName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogSchemaParentAndName() {
	    let localctx = new CatalogSchemaParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, GqlParser.RULE_catalogSchemaParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3660;
	        this.absoluteDirectoryPath();
	        this.state = 3661;
	        this.schemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeCatalogSchemaRef() {
	    let localctx = new RelativeCatalogSchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, GqlParser.RULE_relativeCatalogSchemaRef);
	    try {
	        this.state = 3667;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 109:
	        case 150:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3663;
	            this.predefinedSchemaRef();
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3664;
	            this.relativeDirectoryPath();
	            this.state = 3665;
	            this.schemaName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedSchemaRef() {
	    let localctx = new PredefinedSchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, GqlParser.RULE_predefinedSchemaRef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3669;
	        _la = this._input.LA(1);
	        if(!(_la===54 || _la===109 || _la===150)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteDirectoryPath() {
	    let localctx = new AbsoluteDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, GqlParser.RULE_absoluteDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3671;
	        this.match(GqlParser.SOLIDUS);
	        this.state = 3673;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	        if(la_===1) {
	            this.state = 3672;
	            this.simpleDirectoryPath();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeDirectoryPath() {
	    let localctx = new RelativeDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, GqlParser.RULE_relativeDirectoryPath);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3675;
	        this.match(GqlParser.DOUBLE_PERIOD);
	        this.state = 3687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===48) {
	            this.state = 3680;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,370,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3676;
	                    this.match(GqlParser.SOLIDUS);
	                    this.state = 3677;
	                    this.match(GqlParser.DOUBLE_PERIOD); 
	                }
	                this.state = 3682;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,370,this._ctx);
	            }

	            this.state = 3683;
	            this.match(GqlParser.SOLIDUS);
	            this.state = 3685;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
	            if(la_===1) {
	                this.state = 3684;
	                this.simpleDirectoryPath();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDirectoryPath() {
	    let localctx = new SimpleDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, GqlParser.RULE_simpleDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3692; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3689;
	        		this.directoryName();
	        		this.state = 3690;
	        		this.match(GqlParser.SOLIDUS);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3694; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,373, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphRef() {
	    let localctx = new GraphRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, GqlParser.RULE_graphRef);
	    try {
	        this.state = 3702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,374,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3696;
	            this.catalogObjectParentRef();
	            this.state = 3697;
	            this.graphName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3699;
	            this.delimitedGraphName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3700;
	            this.homeGraph();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3701;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphParentAndName() {
	    let localctx = new CatalogGraphParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, GqlParser.RULE_catalogGraphParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3705;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	        if(la_===1) {
	            this.state = 3704;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3707;
	        this.graphName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	homeGraph() {
	    let localctx = new HomeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, GqlParser.RULE_homeGraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3709;
	        _la = this._input.LA(1);
	        if(!(_la===148 || _la===149)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeRef() {
	    let localctx = new GraphTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, GqlParser.RULE_graphTypeRef);
	    try {
	        this.state = 3713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3711;
	            this.catalogGraphTypeParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3712;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphTypeParentAndName() {
	    let localctx = new CatalogGraphTypeParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, GqlParser.RULE_catalogGraphTypeParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3716;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
	        if(la_===1) {
	            this.state = 3715;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3718;
	        this.graphTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableRef() {
	    let localctx = new BindingTableRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, GqlParser.RULE_bindingTableRef);
	    try {
	        this.state = 3725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3720;
	            this.catalogObjectParentRef();
	            this.state = 3721;
	            this.bindingTableName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3723;
	            this.delimitedBindingTableName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3724;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogBindingTableParentAndName() {
	    let localctx = new CatalogBindingTableParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, GqlParser.RULE_catalogBindingTableParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3728;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
	        if(la_===1) {
	            this.state = 3727;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3730;
	        this.bindingTableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureRef() {
	    let localctx = new ProcedureRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, GqlParser.RULE_procedureRef);
	    try {
	        this.state = 3734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3732;
	            this.catalogProcedureParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3733;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogProcedureParentAndName() {
	    let localctx = new CatalogProcedureParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, GqlParser.RULE_catalogProcedureParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	        if(la_===1) {
	            this.state = 3736;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3739;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogObjectParentRef() {
	    let localctx = new CatalogObjectParentRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, GqlParser.RULE_catalogObjectParentRef);
	    var _la = 0; // Token type
	    try {
	        this.state = 3759;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 48:
	        case 54:
	        case 55:
	        case 109:
	        case 150:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3741;
	            this.schemaRef();
	            this.state = 3743;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 3742;
	                this.match(GqlParser.SOLIDUS);
	            }

	            this.state = 3748; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3745;
	            		this.objectName();
	            		this.state = 3746;
	            		this.match(GqlParser.PERIOD);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3750; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,383, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 56:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3755; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3752;
	            		this.objectName();
	            		this.state = 3753;
	            		this.match(GqlParser.PERIOD);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3757; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,384, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refParameter() {
	    let localctx = new RefParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, GqlParser.RULE_refParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3761;
	        this.parameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalObjectRef() {
	    let localctx = new ExternalObjectRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, GqlParser.RULE_externalObjectRef);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchCondition() {
	    let localctx = new SearchConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, GqlParser.RULE_searchCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3765;
	        this.booleanValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, GqlParser.RULE_predicate);
	    try {
	        this.state = 3778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3767;
	            this.comparisonPredicate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3768;
	            this.existsPredicate();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3769;
	            this.nullPredicate();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3770;
	            this.valueTypePredicate();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3771;
	            this.normalizedPredicate();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3772;
	            this.directedPredicate();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3773;
	            this.labeledPredicate();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3774;
	            this.sourceOrDestinationPredicate();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3775;
	            this.allDifferentPredicate();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3776;
	            this.samePredicate();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3777;
	            this.propertyExistsPredicate();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicate() {
	    let localctx = new ComparisonPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, GqlParser.RULE_comparisonPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3780;
	        this.comparisonPredicand();
	        this.state = 3781;
	        this.comparisonPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicatePart2() {
	    let localctx = new ComparisonPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, GqlParser.RULE_comparisonPredicatePart2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3783;
	        this.comparisonOperator();
	        this.state = 3784;
	        this.comparisonPredicand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, GqlParser.RULE_comparisonOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3786;
	        _la = this._input.LA(1);
	        if(!(((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & 65011713) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicand() {
	    let localctx = new ComparisonPredicandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, GqlParser.RULE_comparisonPredicand);
	    try {
	        this.state = 3790;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,387,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3788;
	            this.commonValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3789;
	            this.booleanPredicand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsPredicate() {
	    let localctx = new ExistsPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, GqlParser.RULE_existsPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3792;
	        this.match(GqlParser.EXISTS);
	        this.state = 3810;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,388,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3793;
	            this.match(GqlParser.LEFT_BRACE);
	            this.state = 3794;
	            this.graphPattern();
	            this.state = 3795;
	            this.match(GqlParser.RIGHT_BRACE);
	            break;

	        case 2:
	            this.state = 3797;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3798;
	            this.graphPattern();
	            this.state = 3799;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 3:
	            this.state = 3801;
	            this.match(GqlParser.LEFT_BRACE);
	            this.state = 3802;
	            this.matchStatmentBlock();
	            this.state = 3803;
	            this.match(GqlParser.RIGHT_BRACE);
	            break;

	        case 4:
	            this.state = 3805;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 3806;
	            this.matchStatmentBlock();
	            this.state = 3807;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;

	        case 5:
	            this.state = 3809;
	            this.nestedQuerySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicate() {
	    let localctx = new NullPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, GqlParser.RULE_nullPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3812;
	        this.valueExprPrimary();
	        this.state = 3813;
	        this.nullPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicatePart2() {
	    let localctx = new NullPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, GqlParser.RULE_nullPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3815;
	        this.match(GqlParser.IS);
	        this.state = 3817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195) {
	            this.state = 3816;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3819;
	        this.match(GqlParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueTypePredicate() {
	    let localctx = new ValueTypePredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, GqlParser.RULE_valueTypePredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3821;
	        this.valueExprPrimary();
	        this.state = 3822;
	        this.valueTypePredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueTypePredicatePart2() {
	    let localctx = new ValueTypePredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, GqlParser.RULE_valueTypePredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3824;
	        this.match(GqlParser.IS);
	        this.state = 3826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195) {
	            this.state = 3825;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3828;
	        this.typed();
	        this.state = 3829;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicate() {
	    let localctx = new NormalizedPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, GqlParser.RULE_normalizedPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3831;
	        this.stringValueExpr();
	        this.state = 3832;
	        this.normalizedPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicatePart2() {
	    let localctx = new NormalizedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, GqlParser.RULE_normalizedPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3834;
	        this.match(GqlParser.IS);
	        this.state = 3836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195) {
	            this.state = 3835;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & 15) !== 0)) {
	            this.state = 3838;
	            this.normalForm();
	        }

	        this.state = 3841;
	        this.match(GqlParser.NORMALIZED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicate() {
	    let localctx = new DirectedPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, GqlParser.RULE_directedPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3843;
	        this.elementVarRef();
	        this.state = 3844;
	        this.directedPredicate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicatePart2() {
	    let localctx = new DirectedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, GqlParser.RULE_directedPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3846;
	        this.match(GqlParser.IS);
	        this.state = 3848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195) {
	            this.state = 3847;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3850;
	        this.match(GqlParser.DIRECTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicate() {
	    let localctx = new LabeledPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, GqlParser.RULE_labeledPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3852;
	        this.elementVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicatePart2() {
	    let localctx = new LabeledPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, GqlParser.RULE_labeledPredicatePart2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3854;
	        this.isLabeledOrColon();
	        this.state = 3855;
	        this.labelExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabeledOrColon() {
	    let localctx = new IsLabeledOrColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, GqlParser.RULE_isLabeledOrColon);
	    var _la = 0; // Token type
	    try {
	        this.state = 3863;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3857;
	            this.match(GqlParser.IS);
	            this.state = 3859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===195) {
	                this.state = 3858;
	                this.match(GqlParser.NOT);
	            }

	            this.state = 3861;
	            this.match(GqlParser.LABELED);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3862;
	            this.match(GqlParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceOrDestinationPredicate() {
	    let localctx = new SourceOrDestinationPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, GqlParser.RULE_sourceOrDestinationPredicate);
	    try {
	        this.state = 3871;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3865;
	            this.nodeRef();
	            this.state = 3866;
	            this.sourcePredicatePart2();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3868;
	            this.nodeRef();
	            this.state = 3869;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeRef() {
	    let localctx = new NodeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, GqlParser.RULE_nodeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3873;
	        this.elementVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourcePredicatePart2() {
	    let localctx = new SourcePredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, GqlParser.RULE_sourcePredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3875;
	        this.match(GqlParser.IS);
	        this.state = 3877;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195) {
	            this.state = 3876;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3879;
	        this.match(GqlParser.SOURCE);
	        this.state = 3880;
	        this.match(GqlParser.OF);
	        this.state = 3881;
	        this.edgeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationPredicatePart2() {
	    let localctx = new DestinationPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, GqlParser.RULE_destinationPredicatePart2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3883;
	        this.match(GqlParser.IS);
	        this.state = 3885;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195) {
	            this.state = 3884;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 3887;
	        this.match(GqlParser.DESTINATION);
	        this.state = 3888;
	        this.match(GqlParser.OF);
	        this.state = 3889;
	        this.edgeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeRef() {
	    let localctx = new EdgeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, GqlParser.RULE_edgeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3891;
	        this.elementVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allDifferentPredicate() {
	    let localctx = new AllDifferentPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, GqlParser.RULE_allDifferentPredicate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3893;
	        this.match(GqlParser.ALL_DIFFERENT);
	        this.state = 3894;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3895;
	        this.elementVarRef();
	        this.state = 3898; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3896;
	            this.match(GqlParser.COMMA);
	            this.state = 3897;
	            this.elementVarRef();
	            this.state = 3900; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	        this.state = 3902;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	samePredicate() {
	    let localctx = new SamePredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, GqlParser.RULE_samePredicate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3904;
	        this.match(GqlParser.SAME);
	        this.state = 3905;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3906;
	        this.elementVarRef();
	        this.state = 3909; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3907;
	            this.match(GqlParser.COMMA);
	            this.state = 3908;
	            this.elementVarRef();
	            this.state = 3911; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	        this.state = 3913;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyExistsPredicate() {
	    let localctx = new PropertyExistsPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, GqlParser.RULE_propertyExistsPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3915;
	        this.match(GqlParser.PROPERTY_EXISTS);
	        this.state = 3916;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 3917;
	        this.elementVarRef();
	        this.state = 3918;
	        this.match(GqlParser.COMMA);
	        this.state = 3919;
	        this.propertyName();
	        this.state = 3920;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueSpec() {
	    let localctx = new ValueSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, GqlParser.RULE_valueSpec);
	    try {
	        this.state = 3924;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 42:
	        case 56:
	        case 113:
	        case 114:
	        case 126:
	        case 134:
	        case 196:
	        case 219:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 371:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3922;
	            this.literal();
	            break;
	        case 35:
	        case 112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3923;
	            this.parameterValueSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedValueSpec() {
	    let localctx = new UnsignedValueSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, GqlParser.RULE_unsignedValueSpec);
	    try {
	        this.state = 3928;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 42:
	        case 56:
	        case 113:
	        case 114:
	        case 126:
	        case 134:
	        case 196:
	        case 219:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3926;
	            this.unsignedLiteral();
	            break;
	        case 35:
	        case 112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3927;
	            this.parameterValueSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedIntSpec() {
	    let localctx = new UnsignedIntSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, GqlParser.RULE_unsignedIntSpec);
	    try {
	        this.state = 3932;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 383:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3930;
	            this.match(GqlParser.UNSIGNED_INT);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3931;
	            this.parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterValueSpec() {
	    let localctx = new ParameterValueSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, GqlParser.RULE_parameterValueSpec);
	    try {
	        this.state = 3936;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3934;
	            this.parameter();
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3935;
	            this.predefinedParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedParameter() {
	    let localctx = new PredefinedParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, GqlParser.RULE_predefinedParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3938;
	        this.match(GqlParser.CURRENT_USER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExpr() {
	    let localctx = new ValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, GqlParser.RULE_valueExpr);
	    try {
	        this.state = 3942;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3940;
	            this.commonValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3941;
	            this.booleanValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonValueExpr() {
	    let localctx = new CommonValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, GqlParser.RULE_commonValueExpr);
	    try {
	        this.state = 3952;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3944;
	            this.numericValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3945;
	            this.stringValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3946;
	            this.dateTimeValueExpr(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3947;
	            this.durationValueExpr(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3948;
	            this.listValueExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3949;
	            this.recordValueExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3950;
	            this.pathValueExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3951;
	            this.refValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refValueExpr() {
	    let localctx = new RefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, GqlParser.RULE_refValueExpr);
	    try {
	        this.state = 3958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3954;
	            this.graphRefValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3955;
	            this.bindingTableRefValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3956;
	            this.nodeRefValueExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3957;
	            this.edgeRefValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphRefValueExpr() {
	    let localctx = new GraphRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, GqlParser.RULE_graphRefValueExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 3966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===343) {
	                this.state = 3960;
	                this.match(GqlParser.PROPERTY);
	            }

	            this.state = 3963;
	            this.match(GqlParser.GRAPH);
	            this.state = 3964;
	            this.graphExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3965;
	            this.valueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableRefValueExpr() {
	    let localctx = new BindingTableRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, GqlParser.RULE_bindingTableRefValueExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 3974;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 316:
	        case 351:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3969;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===316) {
	                this.state = 3968;
	                this.match(GqlParser.BINDING);
	            }

	            this.state = 3971;
	            this.match(GqlParser.TABLE);
	            this.state = 3972;
	            this.bindingTableExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3973;
	            this.valueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeRefValueExpr() {
	    let localctx = new NodeRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, GqlParser.RULE_nodeRefValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3976;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeRefValueExpr() {
	    let localctx = new EdgeRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, GqlParser.RULE_edgeRefValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3978;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueExpr() {
	    let localctx = new RecordValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, GqlParser.RULE_recordValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3980;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregatingValueExpr() {
	    let localctx = new AggregatingValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, GqlParser.RULE_aggregatingValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3982;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValueExpr() {
	    let localctx = new BooleanValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, GqlParser.RULE_booleanValueExpr);
	    try {
	        this.state = 3993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,412,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3984;
	            this.booleanTerm(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3985;
	            this.booleanTerm(0);
	            this.state = 3986;
	            this.match(GqlParser.OR);
	            this.state = 3987;
	            this.booleanValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3989;
	            this.booleanTerm(0);
	            this.state = 3990;
	            this.match(GqlParser.XOR);
	            this.state = 3991;
	            this.booleanValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 914;
	    this.enterRecursionRule(localctx, 914, GqlParser.RULE_booleanTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3996;
	        this.booleanFactor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4003;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,413,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BooleanTermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_booleanTerm);
	                this.state = 3998;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 3999;
	                this.match(GqlParser.AND);
	                this.state = 4000;
	                this.booleanFactor(); 
	            }
	            this.state = 4005;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,413,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	booleanFactor() {
	    let localctx = new BooleanFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, GqlParser.RULE_booleanFactor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===195) {
	            this.state = 4006;
	            this.match(GqlParser.NOT);
	        }

	        this.state = 4009;
	        this.booleanTest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanTest() {
	    let localctx = new BooleanTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, GqlParser.RULE_booleanTest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4011;
	        this.booleanPrimary();
	        this.state = 4017;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	        if(la_===1) {
	            this.state = 4012;
	            this.match(GqlParser.IS);
	            this.state = 4014;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===195) {
	                this.state = 4013;
	                this.match(GqlParser.NOT);
	            }

	            this.state = 4016;
	            this.truthValue();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truthValue() {
	    let localctx = new TruthValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, GqlParser.RULE_truthValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4019;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===251 || _la===262)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanPrimary() {
	    let localctx = new BooleanPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, GqlParser.RULE_booleanPrimary);
	    try {
	        this.state = 4023;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4021;
	            this.predicate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4022;
	            this.booleanPredicand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanPredicand() {
	    let localctx = new BooleanPredicandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, GqlParser.RULE_booleanPredicand);
	    try {
	        this.state = 4027;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4025;
	            this.paranthisedBooleanValueExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4026;
	            this.nonParenthesizedValueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paranthisedBooleanValueExpr() {
	    let localctx = new ParanthisedBooleanValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, GqlParser.RULE_paranthisedBooleanValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4029;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4030;
	        this.booleanValueExpr();
	        this.state = 4031;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExpr() {
	    let localctx = new NumericValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, GqlParser.RULE_numericValueExpr);
	    try {
	        this.state = 4041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4033;
	            this.term();
	            this.state = 4034;
	            this.match(GqlParser.PLUS);
	            this.state = 4035;
	            this.numericValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4037;
	            this.term();
	            this.state = 4038;
	            this.match(GqlParser.MINUS);
	            this.state = 4039;
	            this.numericValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, GqlParser.RULE_term);
	    try {
	        this.state = 4051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,420,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4043;
	            this.factor();
	            this.state = 4044;
	            this.match(GqlParser.ASTERISK);
	            this.state = 4045;
	            this.term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4047;
	            this.factor();
	            this.state = 4048;
	            this.match(GqlParser.SOLIDUS);
	            this.state = 4049;
	            this.term();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, GqlParser.RULE_factor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===372) {
	            this.state = 4053;
	            this.match(GqlParser.SIGN);
	        }

	        this.state = 4056;
	        this.numericPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericPrimary() {
	    let localctx = new NumericPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, GqlParser.RULE_numericPrimary);
	    try {
	        this.state = 4060;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4058;
	            this.valueExprPrimary();
	            break;
	        case 64:
	        case 65:
	        case 74:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 101:
	        case 102:
	        case 103:
	        case 118:
	        case 133:
	        case 143:
	        case 177:
	        case 183:
	        case 190:
	        case 199:
	        case 210:
	        case 214:
	        case 217:
	        case 233:
	        case 234:
	        case 238:
	        case 244:
	        case 245:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4059;
	            this.numericValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExprPrimary() {
	    let localctx = new ValueExprPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, GqlParser.RULE_valueExprPrimary);
	    try {
	        this.state = 4064;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4062;
	            this.parenthesizedValueExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4063;
	            this.nonParenthesizedValueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedValueExpr() {
	    let localctx = new ParenthesizedValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, GqlParser.RULE_parenthesizedValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4066;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4067;
	        this.valueExpr();
	        this.state = 4068;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonParenthesizedValueExprPrimary() {
	    let localctx = new NonParenthesizedValueExprPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, GqlParser.RULE_nonParenthesizedValueExprPrimary);
	    try {
	        this.state = 4072;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4070;
	            this.nonParenthesizedValueExprPrimarySpecialCase();
	            break;
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4071;
	            this.bindingVarRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonParenthesizedValueExprPrimarySpecialCase() {
	    let localctx = new NonParenthesizedValueExprPrimarySpecialCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, GqlParser.RULE_nonParenthesizedValueExprPrimarySpecialCase);
	    try {
	        this.state = 4082;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,425,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4074;
	            this.unsignedValueSpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4075;
	            this.aggregateFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4076;
	            this.collectionValueConstructor();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4077;
	            this.valueQueryExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4078;
	            this.caseExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4079;
	            this.letValueExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4080;
	            this.castSpec();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4081;
	            this.elementIdFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionValueConstructor() {
	    let localctx = new CollectionValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, GqlParser.RULE_collectionValueConstructor);
	    try {
	        this.state = 4087;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4084;
	            this.listValueConstructor();
	            break;
	        case 40:
	        case 219:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4085;
	            this.recordValueConstructor();
	            break;
	        case 209:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4086;
	            this.pathValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueFunction() {
	    let localctx = new NumericValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, GqlParser.RULE_numericValueFunction);
	    try {
	        this.state = 4099;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,427,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4089;
	            this.lengthExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4090;
	            this.absoluteValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4091;
	            this.modulusExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4092;
	            this.trigonometricFunction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4093;
	            this.logarithmFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4094;
	            this.exponentialFunction();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4095;
	            this.powerFunction();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4096;
	            this.squareRootFunciton();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4097;
	            this.floorFunction();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4098;
	            this.ceilingFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthExpr() {
	    let localctx = new LengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, GqlParser.RULE_lengthExpr);
	    try {
	        this.state = 4104;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4101;
	            this.charLengthExpr();
	            break;
	        case 86:
	        case 199:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4102;
	            this.byteLengthExpr();
	            break;
	        case 210:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4103;
	            this.pathLengthExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLengthExpr() {
	    let localctx = new CharLengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, GqlParser.RULE_charLengthExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4106;
	        _la = this._input.LA(1);
	        if(!(_la===93 || _la===94)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4107;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4108;
	        this.charStringValueExpr();
	        this.state = 4109;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteLengthExpr() {
	    let localctx = new ByteLengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, GqlParser.RULE_byteLengthExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4111;
	        _la = this._input.LA(1);
	        if(!(_la===86 || _la===199)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4112;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4113;
	        this.byteStringValueExpr();
	        this.state = 4114;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathLengthExpr() {
	    let localctx = new PathLengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, GqlParser.RULE_pathLengthExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4116;
	        this.match(GqlParser.PATH_LENGTH);
	        this.state = 4117;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4118;
	        this.pathValueExpr();
	        this.state = 4119;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteValueExpr() {
	    let localctx = new AbsoluteValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, GqlParser.RULE_absoluteValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4121;
	        this.match(GqlParser.ABS);
	        this.state = 4122;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4123;
	        this.numericValueExpr();
	        this.state = 4124;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modulusExpr() {
	    let localctx = new ModulusExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, GqlParser.RULE_modulusExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4126;
	        this.match(GqlParser.MOD);
	        this.state = 4127;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4128;
	        this.numericValueExprDividen();
	        this.state = 4129;
	        this.match(GqlParser.COMMA);
	        this.state = 4130;
	        this.numericValueExprDivisor();
	        this.state = 4131;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprDividen() {
	    let localctx = new NumericValueExprDividenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, GqlParser.RULE_numericValueExprDividen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4133;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprDivisor() {
	    let localctx = new NumericValueExprDivisorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, GqlParser.RULE_numericValueExprDivisor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4135;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigonometricFunction() {
	    let localctx = new TrigonometricFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, GqlParser.RULE_trigonometricFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4137;
	        this.trigonometricFunctionName();
	        this.state = 4138;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4139;
	        this.numericValueExpr();
	        this.state = 4140;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigonometricFunctionName() {
	    let localctx = new TrigonometricFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, GqlParser.RULE_trigonometricFunctionName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4142;
	        _la = this._input.LA(1);
	        if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & 2561) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & 131079) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & 402849793) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logarithmFunction() {
	    let localctx = new LogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, GqlParser.RULE_logarithmFunction);
	    try {
	        this.state = 4147;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 190:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4144;
	            this.generalLogarithmFunction();
	            break;
	        case 183:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4145;
	            this.commonLogarithmFunction();
	            break;
	        case 177:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4146;
	            this.naturalLogarithmFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmFunction() {
	    let localctx = new GeneralLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, GqlParser.RULE_generalLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4149;
	        this.match(GqlParser.MOD);
	        this.state = 4150;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4151;
	        this.generalLogarithmBase();
	        this.state = 4152;
	        this.match(GqlParser.COMMA);
	        this.state = 4153;
	        this.generalLogarithmArgument();
	        this.state = 4154;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmBase() {
	    let localctx = new GeneralLogarithmBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, GqlParser.RULE_generalLogarithmBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4156;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmArgument() {
	    let localctx = new GeneralLogarithmArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, GqlParser.RULE_generalLogarithmArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4158;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonLogarithmFunction() {
	    let localctx = new CommonLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, GqlParser.RULE_commonLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4160;
	        this.match(GqlParser.LOG10);
	        this.state = 4161;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4162;
	        this.numericValueExpr();
	        this.state = 4163;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	naturalLogarithmFunction() {
	    let localctx = new NaturalLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, GqlParser.RULE_naturalLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4165;
	        this.match(GqlParser.LN);
	        this.state = 4166;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4167;
	        this.numericValueExpr();
	        this.state = 4168;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exponentialFunction() {
	    let localctx = new ExponentialFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, GqlParser.RULE_exponentialFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4170;
	        this.match(GqlParser.EXP);
	        this.state = 4171;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4172;
	        this.numericValueExpr();
	        this.state = 4173;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powerFunction() {
	    let localctx = new PowerFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, GqlParser.RULE_powerFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4175;
	        this.match(GqlParser.POWER);
	        this.state = 4176;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4177;
	        this.numericValueExprBase();
	        this.state = 4178;
	        this.match(GqlParser.COMMA);
	        this.state = 4179;
	        this.numericValueExprExponent();
	        this.state = 4180;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprBase() {
	    let localctx = new NumericValueExprBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, GqlParser.RULE_numericValueExprBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4182;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprExponent() {
	    let localctx = new NumericValueExprExponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, GqlParser.RULE_numericValueExprExponent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4184;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	squareRootFunciton() {
	    let localctx = new SquareRootFuncitonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, GqlParser.RULE_squareRootFunciton);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4186;
	        this.match(GqlParser.SQRT);
	        this.state = 4187;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4188;
	        this.numericValueExpr();
	        this.state = 4189;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floorFunction() {
	    let localctx = new FloorFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, GqlParser.RULE_floorFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4191;
	        this.match(GqlParser.FLOOR);
	        this.state = 4192;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4193;
	        this.numericValueExpr();
	        this.state = 4194;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ceilingFunction() {
	    let localctx = new CeilingFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, GqlParser.RULE_ceilingFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4196;
	        _la = this._input.LA(1);
	        if(!(_la===91 || _la===92)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4197;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4198;
	        this.numericValueExpr();
	        this.state = 4199;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValueExpr() {
	    let localctx = new StringValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, GqlParser.RULE_stringValueExpr);
	    try {
	        this.state = 4203;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4201;
	            this.charStringValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4202;
	            this.byteStringValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringValueExpr() {
	    let localctx = new CharStringValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, GqlParser.RULE_charStringValueExpr);
	    try {
	        this.state = 4207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4205;
	            this.charStringConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4206;
	            this.charStringFactor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringConcatenation() {
	    let localctx = new CharStringConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, GqlParser.RULE_charStringConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4209;
	        this.charStringFactor();
	        this.state = 4210;
	        this.match(GqlParser.CONCATENATION);
	        this.state = 4211;
	        this.charStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringFactor() {
	    let localctx = new CharStringFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, GqlParser.RULE_charStringFactor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4213;
	        this.charStringPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringPrimary() {
	    let localctx = new CharStringPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, GqlParser.RULE_charStringPrimary);
	    try {
	        this.state = 4217;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4215;
	            this.valueExprPrimary();
	            break;
	        case 84:
	        case 184:
	        case 185:
	        case 194:
	        case 225:
	        case 250:
	        case 264:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4216;
	            this.stringValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringValueExpr() {
	    let localctx = new ByteStringValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, GqlParser.RULE_byteStringValueExpr);
	    try {
	        this.state = 4221;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4219;
	            this.byteStringConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4220;
	            this.byteStringFactor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringFactor() {
	    let localctx = new ByteStringFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, GqlParser.RULE_byteStringFactor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4223;
	        this.byteStringPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringPrimary() {
	    let localctx = new ByteStringPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, GqlParser.RULE_byteStringPrimary);
	    try {
	        this.state = 4227;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4225;
	            this.valueExprPrimary();
	            break;
	        case 84:
	        case 184:
	        case 185:
	        case 194:
	        case 225:
	        case 250:
	        case 264:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4226;
	            this.stringValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringConcatenation() {
	    let localctx = new ByteStringConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, GqlParser.RULE_byteStringConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4229;
	        this.byteStringFactor();
	        this.state = 4230;
	        this.match(GqlParser.CONCATENATION);
	        this.state = 4231;
	        this.byteStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValueFunction() {
	    let localctx = new StringValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, GqlParser.RULE_stringValueFunction);
	    try {
	        this.state = 4235;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,435,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4233;
	            this.charStringFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4234;
	            this.byteStringFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringFunction() {
	    let localctx = new CharStringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, GqlParser.RULE_charStringFunction);
	    try {
	        this.state = 4240;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 184:
	        case 264:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4237;
	            this.foldFunction();
	            break;
	        case 84:
	        case 185:
	        case 225:
	        case 250:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4238;
	            this.trimFunction();
	            break;
	        case 194:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4239;
	            this.normalizeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foldFunction() {
	    let localctx = new FoldFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, GqlParser.RULE_foldFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4242;
	        _la = this._input.LA(1);
	        if(!(_la===184 || _la===264)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4243;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4244;
	        this.charStringValueExpr();
	        this.state = 4245;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimFunction() {
	    let localctx = new TrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, GqlParser.RULE_trimFunction);
	    try {
	        this.state = 4249;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 250:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4247;
	            this.singleCharTrimFunction();
	            break;
	        case 84:
	        case 185:
	        case 225:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4248;
	            this.multiCharTrimFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleCharTrimFunction() {
	    let localctx = new SingleCharTrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, GqlParser.RULE_singleCharTrimFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4251;
	        this.match(GqlParser.TRIM);
	        this.state = 4252;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4253;
	        this.trimOperands();
	        this.state = 4254;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiCharTrimFunction() {
	    let localctx = new MultiCharTrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, GqlParser.RULE_multiCharTrimFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4256;
	        _la = this._input.LA(1);
	        if(!(_la===84 || _la===185 || _la===225)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4257;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4258;
	        this.trimSource();

	        this.state = 4259;
	        this.match(GqlParser.COMMA);
	        this.state = 4260;
	        this.trimCharString();
	        this.state = 4262;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimOperands() {
	    let localctx = new TrimOperandsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, GqlParser.RULE_trimOperands);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	        if(la_===1) {
	            this.state = 4265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83 || _la===172 || _la===249) {
	                this.state = 4264;
	                this.trimSpec();
	            }

	            this.state = 4268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & 137375873) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & 4276231) !== 0) || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & 44095489) !== 0) || ((((_la - 209)) & ~0x1f) == 0 && ((1 << (_la - 209)) & 2147550233) !== 0) || ((((_la - 241)) & ~0x1f) == 0 && ((1 << (_la - 241)) & 77596357) !== 0) || ((((_la - 370)) & ~0x1f) == 0 && ((1 << (_la - 370)) & 540811265) !== 0)) {
	                this.state = 4267;
	                this.trimCharString();
	            }

	            this.state = 4270;
	            this.match(GqlParser.FROM);

	        }
	        this.state = 4273;
	        this.trimSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimSource() {
	    let localctx = new TrimSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, GqlParser.RULE_trimSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4275;
	        this.charStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimSpec() {
	    let localctx = new TrimSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, GqlParser.RULE_trimSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4277;
	        _la = this._input.LA(1);
	        if(!(_la===83 || _la===172 || _la===249)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimCharString() {
	    let localctx = new TrimCharStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, GqlParser.RULE_trimCharString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4279;
	        this.charStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizeFunction() {
	    let localctx = new NormalizeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, GqlParser.RULE_normalizeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4281;
	        this.match(GqlParser.NORMALIZE);
	        this.state = 4282;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4283;
	        this.charStringValueExpr();

	        this.state = 4284;
	        this.match(GqlParser.COMMA);
	        this.state = 4285;
	        this.normalForm();
	        this.state = 4287;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalForm() {
	    let localctx = new NormalFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, GqlParser.RULE_normalForm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4289;
	        _la = this._input.LA(1);
	        if(!(((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringFunction() {
	    let localctx = new ByteStringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, GqlParser.RULE_byteStringFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4291;
	        this.byteStrinTrimFunction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStrinTrimFunction() {
	    let localctx = new ByteStrinTrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, GqlParser.RULE_byteStrinTrimFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4293;
	        this.match(GqlParser.TRIM);
	        this.state = 4294;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4295;
	        this.byteStringTrimOperands();
	        this.state = 4296;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringTrimOperands() {
	    let localctx = new ByteStringTrimOperandsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, GqlParser.RULE_byteStringTrimOperands);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	        if(la_===1) {
	            this.state = 4299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83 || _la===172 || _la===249) {
	                this.state = 4298;
	                this.trimSpec();
	            }

	            this.state = 4302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & 137375873) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & 4276231) !== 0) || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & 44095489) !== 0) || ((((_la - 209)) & ~0x1f) == 0 && ((1 << (_la - 209)) & 2147550233) !== 0) || ((((_la - 241)) & ~0x1f) == 0 && ((1 << (_la - 241)) & 77596357) !== 0) || ((((_la - 370)) & ~0x1f) == 0 && ((1 << (_la - 370)) & 540811265) !== 0)) {
	                this.state = 4301;
	                this.trimByteString();
	            }

	            this.state = 4304;
	            this.match(GqlParser.FROM);

	        }
	        this.state = 4307;
	        this.byteStringTrimSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringTrimSource() {
	    let localctx = new ByteStringTrimSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, GqlParser.RULE_byteStringTrimSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4309;
	        this.byteStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimByteString() {
	    let localctx = new TrimByteStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, GqlParser.RULE_trimByteString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4311;
	        this.byteStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLength() {
	    let localctx = new StringLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, GqlParser.RULE_stringLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4313;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	dateTimeValueExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DateTimeValueExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1048;
	    this.enterRecursionRule(localctx, 1048, GqlParser.RULE_dateTimeValueExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,444,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4316;
	            this.dateTimeTerm();
	            break;

	        case 2:
	            this.state = 4317;
	            this.durationValueExpr(0);
	            this.state = 4318;
	            this.match(GqlParser.PLUS);
	            this.state = 4319;
	            this.dateTimeTerm();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4331;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,446,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4329;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,445,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_dateTimeValueExpr);
	                    this.state = 4323;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4324;
	                    this.match(GqlParser.PLUS);
	                    this.state = 4325;
	                    this.durationTerm(0);
	                    break;

	                case 2:
	                    localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_dateTimeValueExpr);
	                    this.state = 4326;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 4327;
	                    this.match(GqlParser.MINUS);
	                    this.state = 4328;
	                    this.durationTerm(0);
	                    break;

	                } 
	            }
	            this.state = 4333;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,446,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	dateTimeTerm() {
	    let localctx = new DateTimeTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, GqlParser.RULE_dateTimeTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4334;
	        this.dateTimeFactor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeFactor() {
	    let localctx = new DateTimeFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, GqlParser.RULE_dateTimeFactor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4336;
	        this.dateTimePrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimePrimary() {
	    let localctx = new DateTimePrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, GqlParser.RULE_dateTimePrimary);
	    try {
	        this.state = 4340;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4338;
	            this.valueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4339;
	            this.dateTimeValueFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValueFunction() {
	    let localctx = new DateTimeValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, GqlParser.RULE_dateTimeValueFunction);
	    try {
	        this.state = 4347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 106:
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4342;
	            this.dateFunction();
	            break;
	        case 110:
	        case 279:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4343;
	            this.timeFunction();
	            break;
	        case 111:
	        case 278:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4344;
	            this.dateTimeFunction();
	            break;
	        case 180:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4345;
	            this.localTimeFunction();
	            break;
	        case 179:
	        case 181:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4346;
	            this.localDatetimeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunction() {
	    let localctx = new DateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, GqlParser.RULE_dateFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4356;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 106:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4349;
	            this.match(GqlParser.CURRENT_DATE);
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4350;
	            this.match(GqlParser.DATE);
	            this.state = 4351;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===219 || _la===389 || _la===390) {
	                this.state = 4352;
	                this.dateFunctionParameters();
	            }

	            this.state = 4355;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunction() {
	    let localctx = new TimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, GqlParser.RULE_timeFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4365;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4358;
	            this.match(GqlParser.CURRENT_TIME);
	            break;
	        case 279:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4359;
	            this.match(GqlParser.ZONED_TIME);
	            this.state = 4360;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4362;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===219 || _la===389 || _la===390) {
	                this.state = 4361;
	                this.timeFunctionParameters();
	            }

	            this.state = 4364;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTimeFunction() {
	    let localctx = new LocalTimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, GqlParser.RULE_localTimeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4367;
	        this.match(GqlParser.LOCAL_TIME);
	        this.state = 4368;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
	        if(la_===1) {
	            this.state = 4369;
	            this.timeFunctionParameters();

	        }
	        this.state = 4373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,454,this._ctx);
	        if(la_===1) {
	            this.state = 4372;
	            this.match(GqlParser.RIGHT_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeFunction() {
	    let localctx = new DateTimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, GqlParser.RULE_dateTimeFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4382;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4375;
	            this.match(GqlParser.CURRENT_TIMESTAMP);
	            break;
	        case 278:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4376;
	            this.match(GqlParser.ZONED_DATETIME);
	            this.state = 4377;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===219 || _la===389 || _la===390) {
	                this.state = 4378;
	                this.dateTimeFunctionParameters();
	            }

	            this.state = 4381;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localDatetimeFunction() {
	    let localctx = new LocalDatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, GqlParser.RULE_localDatetimeFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 4391;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 181:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4384;
	            this.match(GqlParser.LOCAL_TIMESTAMP);
	            break;
	        case 179:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4385;
	            this.match(GqlParser.LOCAL_DATETIME);
	            this.state = 4386;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===219 || _la===389 || _la===390) {
	                this.state = 4387;
	                this.dateTimeFunctionParameters();
	            }

	            this.state = 4390;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunctionParameters() {
	    let localctx = new DateFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, GqlParser.RULE_dateFunctionParameters);
	    try {
	        this.state = 4395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 389:
	        case 390:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4393;
	            this.dateString();
	            break;
	        case 40:
	        case 219:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4394;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunctionParameters() {
	    let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, GqlParser.RULE_timeFunctionParameters);
	    try {
	        this.state = 4399;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 389:
	        case 390:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4397;
	            this.timeString();
	            break;
	        case 40:
	        case 219:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4398;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeFunctionParameters() {
	    let localctx = new DateTimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, GqlParser.RULE_dateTimeFunctionParameters);
	    try {
	        this.state = 4403;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 389:
	        case 390:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4401;
	            this.dateTimeString();
	            break;
	        case 40:
	        case 219:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4402;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	durationValueExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DurationValueExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1074;
	    this.enterRecursionRule(localctx, 1074, GqlParser.RULE_durationValueExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4408;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 64:
	        case 65:
	        case 74:
	        case 76:
	        case 77:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 118:
	        case 126:
	        case 128:
	        case 133:
	        case 134:
	        case 143:
	        case 173:
	        case 177:
	        case 183:
	        case 187:
	        case 188:
	        case 190:
	        case 196:
	        case 198:
	        case 199:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 217:
	        case 219:
	        case 233:
	        case 234:
	        case 238:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 245:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 372:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.state = 4406;
	            this.durationTerm(0);
	            break;
	        case 127:
	            this.state = 4407;
	            this.dateTimeSubtraction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4418;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,464,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4416;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DurationValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpr);
	                    this.state = 4410;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 4411;
	                    this.match(GqlParser.PLUS);
	                    this.state = 4412;
	                    this.durationTerm(0);
	                    break;

	                case 2:
	                    localctx = new DurationValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpr);
	                    this.state = 4413;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4414;
	                    this.match(GqlParser.MINUS);
	                    this.state = 4415;
	                    this.durationTerm(0);
	                    break;

	                } 
	            }
	            this.state = 4420;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,464,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	dateTimeSubtraction() {
	    let localctx = new DateTimeSubtractionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, GqlParser.RULE_dateTimeSubtraction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4421;
	        this.match(GqlParser.DURATION_BETWEEN);
	        this.state = 4422;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4423;
	        this.dateTimeSubtractionParameters();
	        this.state = 4424;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeSubtractionParameters() {
	    let localctx = new DateTimeSubtractionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, GqlParser.RULE_dateTimeSubtractionParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4426;
	        this.dateTimeValueExpr(0);
	        this.state = 4427;
	        this.match(GqlParser.COMMA);
	        this.state = 4428;
	        this.dateTimeValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	durationTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DurationTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1080;
	    this.enterRecursionRule(localctx, 1080, GqlParser.RULE_durationTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4431;
	            this.durationFactor();
	            break;

	        case 2:
	            this.state = 4432;
	            this.term();
	            this.state = 4433;
	            this.match(GqlParser.ASTERISK);
	            this.state = 4434;
	            this.durationFactor();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4446;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,467,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4444;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DurationTermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
	                    this.state = 4438;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 4439;
	                    this.match(GqlParser.ASTERISK);
	                    this.state = 4440;
	                    this.factor();
	                    break;

	                case 2:
	                    localctx = new DurationTermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
	                    this.state = 4441;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4442;
	                    this.match(GqlParser.SOLIDUS);
	                    this.state = 4443;
	                    this.factor();
	                    break;

	                } 
	            }
	            this.state = 4448;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,467,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	durationFactor() {
	    let localctx = new DurationFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, GqlParser.RULE_durationFactor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===372) {
	            this.state = 4449;
	            this.match(GqlParser.SIGN);
	        }

	        this.state = 4452;
	        this.durationPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationPrimary() {
	    let localctx = new DurationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, GqlParser.RULE_durationPrimary);
	    try {
	        this.state = 4456;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,469,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4454;
	            this.valueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4455;
	            this.durationValueFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValueExpr1() {
	    let localctx = new DurationValueExpr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, GqlParser.RULE_durationValueExpr1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4458;
	        this.durationValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationTerm1() {
	    let localctx = new DurationTerm1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, GqlParser.RULE_durationTerm1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4460;
	        this.durationTerm(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationTerm2() {
	    let localctx = new DurationTerm2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, GqlParser.RULE_durationTerm2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4462;
	        this.durationTerm(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValueExpr1() {
	    let localctx = new DateTimeValueExpr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, GqlParser.RULE_dateTimeValueExpr1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4464;
	        this.dateTimeValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValueExpr2() {
	    let localctx = new DateTimeValueExpr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, GqlParser.RULE_dateTimeValueExpr2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4466;
	        this.dateTimeValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValueFunction() {
	    let localctx = new DurationValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, GqlParser.RULE_durationValueFunction);
	    try {
	        this.state = 4470;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 126:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4468;
	            this.durationFunction();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4469;
	            this.durationAbsoluteValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunction() {
	    let localctx = new DurationFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, GqlParser.RULE_durationFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4472;
	        this.match(GqlParser.DURATION);
	        this.state = 4473;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4474;
	        this.durationFunctionParameters();
	        this.state = 4475;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunctionParameters() {
	    let localctx = new DurationFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, GqlParser.RULE_durationFunctionParameters);
	    try {
	        this.state = 4479;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 389:
	        case 390:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4477;
	            this.durationString();
	            break;
	        case 40:
	        case 219:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4478;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationAbsoluteValueFunction() {
	    let localctx = new DurationAbsoluteValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, GqlParser.RULE_durationAbsoluteValueFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4481;
	        this.match(GqlParser.ABS);
	        this.state = 4482;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4483;
	        this.durationValueExpr(0);
	        this.state = 4484;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueExpr() {
	    let localctx = new ListValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, GqlParser.RULE_listValueExpr);
	    try {
	        this.state = 4488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4486;
	            this.listConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4487;
	            this.listPrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listConcatenation() {
	    let localctx = new ListConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, GqlParser.RULE_listConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4490;
	        this.listPrimary();
	        this.state = 4491;
	        this.match(GqlParser.CONCATENATION);
	        this.state = 4492;
	        this.listValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPrimary() {
	    let localctx = new ListPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, GqlParser.RULE_listPrimary);
	    try {
	        this.state = 4496;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 250:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4494;
	            this.listValueFunction();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 77:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 104:
	        case 112:
	        case 113:
	        case 114:
	        case 126:
	        case 128:
	        case 134:
	        case 173:
	        case 187:
	        case 188:
	        case 196:
	        case 198:
	        case 209:
	        case 212:
	        case 213:
	        case 219:
	        case 240:
	        case 241:
	        case 243:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 267:
	        case 370:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4495;
	            this.valueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueFunction() {
	    let localctx = new ListValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, GqlParser.RULE_listValueFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4498;
	        this.trimListFunction();
	        this.state = 4499;
	        this.elementsFunction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimListFunction() {
	    let localctx = new TrimListFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, GqlParser.RULE_trimListFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4501;
	        this.match(GqlParser.TRIM);
	        this.state = 4502;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4503;
	        this.listValueExpr();
	        this.state = 4504;
	        this.match(GqlParser.COMMA);
	        this.state = 4505;
	        this.numericValueExpr();
	        this.state = 4506;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementsFunction() {
	    let localctx = new ElementsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, GqlParser.RULE_elementsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4508;
	        this.match(GqlParser.ELEMENTS);
	        this.state = 4509;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4510;
	        this.pathValueExpr();
	        this.state = 4511;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructor() {
	    let localctx = new ListValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, GqlParser.RULE_listValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4513;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructorByEnumeration() {
	    let localctx = new ListValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, GqlParser.RULE_listValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4515;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 4516;
	        this.listValueTypeName();
	        this.state = 4517;
	        this.match(GqlParser.RIGHT_BRACKET);
	        this.state = 4518;
	        this.match(GqlParser.LEFT_BRACKET);
	        this.state = 4519;
	        this.listElementList();
	        this.state = 4520;
	        this.match(GqlParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listElementList() {
	    let localctx = new ListElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, GqlParser.RULE_listElementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4522;
	        this.listElement();
	        this.state = 4527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 4523;
	            this.match(GqlParser.COMMA);
	            this.state = 4524;
	            this.listElement();
	            this.state = 4529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listElement() {
	    let localctx = new ListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, GqlParser.RULE_listElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4530;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueConstructor() {
	    let localctx = new RecordValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, GqlParser.RULE_recordValueConstructor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===219) {
	            this.state = 4532;
	            this.match(GqlParser.RECORD);
	        }

	        this.state = 4535;
	        this.fieldsSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldsSpec() {
	    let localctx = new FieldsSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, GqlParser.RULE_fieldsSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4537;
	        this.match(GqlParser.LEFT_BRACE);
	        this.state = 4539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & 515) !== 0)) {
	            this.state = 4538;
	            this.fieldList();
	        }

	        this.state = 4541;
	        this.match(GqlParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldList() {
	    let localctx = new FieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, GqlParser.RULE_fieldList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4543;
	        this.field();
	        this.state = 4548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 4544;
	            this.match(GqlParser.COMMA);
	            this.state = 4545;
	            this.field();
	            this.state = 4550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, GqlParser.RULE_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4551;
	        this.fieldName();
	        this.state = 4552;
	        this.match(GqlParser.COLON);
	        this.state = 4553;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueExpr() {
	    let localctx = new PathValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, GqlParser.RULE_pathValueExpr);
	    try {
	        this.state = 4557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4555;
	            this.pathValueConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4556;
	            this.pathValuePrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConcatenation() {
	    let localctx = new PathValueConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, GqlParser.RULE_pathValueConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4559;
	        this.pathValuePrimary();
	        this.state = 4560;
	        this.match(GqlParser.CONCATENATION);
	        this.state = 4561;
	        this.pathValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValuePrimary() {
	    let localctx = new PathValuePrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, GqlParser.RULE_pathValuePrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4563;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConstructor() {
	    let localctx = new PathValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, GqlParser.RULE_pathValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4565;
	        this.pathValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConstructorByEnumeration() {
	    let localctx = new PathValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, GqlParser.RULE_pathValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4567;
	        this.match(GqlParser.PATH);
	        this.state = 4568;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4569;
	        this.pathElementList();
	        this.state = 4570;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementList() {
	    let localctx = new PathElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, GqlParser.RULE_pathElementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4572;
	        this.pathElementListStart();
	        this.state = 4574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 4573;
	            this.pathElementListStep();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementListStart() {
	    let localctx = new PathElementListStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, GqlParser.RULE_pathElementListStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4576;
	        this.nodeRefValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementListStep() {
	    let localctx = new PathElementListStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, GqlParser.RULE_pathElementListStep);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4578;
	        this.match(GqlParser.COMMA);
	        this.state = 4579;
	        this.edgeRefValueExpr();
	        this.state = 4580;
	        this.match(GqlParser.COMMA);
	        this.state = 4581;
	        this.nodeRefValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyRef() {
	    let localctx = new PropertyRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, GqlParser.RULE_propertyRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4583;
	        this.propertySource();
	        this.state = 4584;
	        this.match(GqlParser.PERIOD);
	        this.state = 4585;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertySource() {
	    let localctx = new PropertySourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, GqlParser.RULE_propertySource);
	    try {
	        this.state = 4590;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,480,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4587;
	            this.nodeRefValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4588;
	            this.edgeRefValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4589;
	            this.recordValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueQueryExpr() {
	    let localctx = new ValueQueryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, GqlParser.RULE_valueQueryExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4592;
	        this.match(GqlParser.VALUE);
	        this.state = 4593;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpr() {
	    let localctx = new CaseExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, GqlParser.RULE_caseExpr);
	    try {
	        this.state = 4597;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	        case 198:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4595;
	            this.caseAbbreviation();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4596;
	            this.caseSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAbbreviation() {
	    let localctx = new CaseAbbreviationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, GqlParser.RULE_caseAbbreviation);
	    var _la = 0; // Token type
	    try {
	        this.state = 4618;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4599;
	            this.match(GqlParser.NULLIF);
	            this.state = 4600;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4601;
	            this.valueExpr();
	            this.state = 4602;
	            this.match(GqlParser.COMMA);
	            this.state = 4603;
	            this.valueExpr();
	            this.state = 4604;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4606;
	            this.match(GqlParser.COALESCE);
	            this.state = 4607;
	            this.match(GqlParser.LEFT_PAREN);
	            this.state = 4608;
	            this.valueExpr();
	            this.state = 4613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===34) {
	                this.state = 4609;
	                this.match(GqlParser.COMMA);
	                this.state = 4610;
	                this.valueExpr();
	                this.state = 4615;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4616;
	            this.match(GqlParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseSpecification() {
	    let localctx = new CaseSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, GqlParser.RULE_caseSpecification);
	    try {
	        this.state = 4622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4620;
	            this.simpleCase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4621;
	            this.searchedCase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCase() {
	    let localctx = new SimpleCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, GqlParser.RULE_simpleCase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4624;
	        this.match(GqlParser.CASE);
	        this.state = 4625;
	        this.caseOperand();
	        this.state = 4626;
	        this.simpleWhenClause();
	        this.state = 4628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 4627;
	            this.elseClause();
	        }

	        this.state = 4630;
	        this.match(GqlParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedCase() {
	    let localctx = new SearchedCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, GqlParser.RULE_searchedCase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4632;
	        this.match(GqlParser.CASE);
	        this.state = 4633;
	        this.searchedWhenClause();
	        this.state = 4635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 4634;
	            this.elseClause();
	        }

	        this.state = 4637;
	        this.match(GqlParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleWhenClause() {
	    let localctx = new SimpleWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, GqlParser.RULE_simpleWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4639;
	        this.match(GqlParser.WHEN);
	        this.state = 4640;
	        this.whenOperandList();
	        this.state = 4641;
	        this.match(GqlParser.THEN);
	        this.state = 4642;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedWhenClause() {
	    let localctx = new SearchedWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, GqlParser.RULE_searchedWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4644;
	        this.match(GqlParser.WHEN);
	        this.state = 4645;
	        this.searchCondition();
	        this.state = 4646;
	        this.match(GqlParser.THEN);
	        this.state = 4647;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseClause() {
	    let localctx = new ElseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, GqlParser.RULE_elseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4649;
	        this.match(GqlParser.ELSE);
	        this.state = 4650;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseOperand() {
	    let localctx = new CaseOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, GqlParser.RULE_caseOperand);
	    try {
	        this.state = 4654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4652;
	            this.nonParenthesizedValueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4653;
	            this.elementVarRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperandList() {
	    let localctx = new WhenOperandListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, GqlParser.RULE_whenOperandList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4656;
	        this.whenOperand();
	        this.state = 4661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 4657;
	            this.match(GqlParser.COMMA);
	            this.state = 4658;
	            this.whenOperand();
	            this.state = 4663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperand() {
	    let localctx = new WhenOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, GqlParser.RULE_whenOperand);
	    try {
	        this.state = 4672;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4664;
	            this.nonParenthesizedValueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4665;
	            this.comparisonPredicatePart2();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4666;
	            this.nullPredicatePart2();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4667;
	            this.valueTypePredicatePart2();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4668;
	            this.directedPredicatePart2();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4669;
	            this.labeledPredicatePart2();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4670;
	            this.sourcePredicatePart2();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4671;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, GqlParser.RULE_result);
	    try {
	        this.state = 4676;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4674;
	            this.resultExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4675;
	            this.match(GqlParser.NULL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resultExpr() {
	    let localctx = new ResultExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, GqlParser.RULE_resultExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4678;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castSpec() {
	    let localctx = new CastSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, GqlParser.RULE_castSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4680;
	        this.match(GqlParser.CAST);
	        this.state = 4681;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4682;
	        this.castOperand();
	        this.state = 4683;
	        this.match(GqlParser.AS);
	        this.state = 4684;
	        this.castTarget();
	        this.state = 4685;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castOperand() {
	    let localctx = new CastOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, GqlParser.RULE_castOperand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4687;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castTarget() {
	    let localctx = new CastTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, GqlParser.RULE_castTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4689;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementIdFunction() {
	    let localctx = new ElementIdFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, GqlParser.RULE_elementIdFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4691;
	        this.match(GqlParser.ELEMENT_ID);
	        this.state = 4692;
	        this.match(GqlParser.LEFT_PAREN);
	        this.state = 4693;
	        this.elementVarRef();
	        this.state = 4694;
	        this.match(GqlParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letValueExpr() {
	    let localctx = new LetValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, GqlParser.RULE_letValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4696;
	        this.match(GqlParser.LET);
	        this.state = 4697;
	        this.letVarDefList();
	        this.state = 4698;
	        this.match(GqlParser.IN);
	        this.state = 4699;
	        this.valueExpr();
	        this.state = 4700;
	        this.match(GqlParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, GqlParser.RULE_literal);
	    try {
	        this.state = 4704;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 371:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4702;
	            this.match(GqlParser.SIGNED_NUMERIC_LITERAL);
	            break;
	        case 40:
	        case 42:
	        case 56:
	        case 113:
	        case 114:
	        case 126:
	        case 134:
	        case 196:
	        case 219:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4703;
	            this.generalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLiteral() {
	    let localctx = new GeneralLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, GqlParser.RULE_generalLiteral);
	    try {
	        this.state = 4709;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 113:
	        case 114:
	        case 126:
	        case 134:
	        case 196:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4706;
	            this.predefinedTypeLiteral();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4707;
	            this.listLiteral();
	            break;
	        case 40:
	        case 219:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4708;
	            this.recordLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedTypeLiteral() {
	    let localctx = new PredefinedTypeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, GqlParser.RULE_predefinedTypeLiteral);
	    try {
	        this.state = 4717;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 134:
	        case 251:
	        case 262:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4711;
	            this.booleanLiteral();
	            break;
	        case 56:
	        case 389:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4712;
	            this.characterStringLiteral();
	            break;
	        case 388:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4713;
	            this.match(GqlParser.BYTE_STRING_LITERAL);
	            break;
	        case 113:
	        case 114:
	        case 247:
	        case 248:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4714;
	            this.temporalLiteral();
	            break;
	        case 126:
	        case 383:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4715;
	            this.durationLiteral();
	            break;
	        case 196:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4716;
	            this.nullLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedLiteral() {
	    let localctx = new UnsignedLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, GqlParser.RULE_unsignedLiteral);
	    try {
	        this.state = 4721;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 370:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4719;
	            this.match(GqlParser.UNSIGNED_NUMERIC_LITERAL);
	            break;
	        case 40:
	        case 42:
	        case 56:
	        case 113:
	        case 114:
	        case 126:
	        case 134:
	        case 196:
	        case 219:
	        case 247:
	        case 248:
	        case 251:
	        case 262:
	        case 383:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4720;
	            this.generalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1198, GqlParser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4723;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===251 || _la===262)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringLiteral() {
	    let localctx = new CharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, GqlParser.RULE_characterStringLiteral);
	    try {
	        this.state = 4728;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4725;
	            this.singleQuotedCharacterSequence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4726;
	            this.doubleQuotedCharacterSequence();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4727;
	            this.accentQuotedCharacterSequence();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenCharacterStringLiteral() {
	    let localctx = new UnbrokenCharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, GqlParser.RULE_unbrokenCharacterStringLiteral);
	    var _la = 0; // Token type
	    try {
	        this.state = 4738;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,498,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 4730;
	                this.noEscape();
	            }

	            this.state = 4733;
	            this.unbrokenSingleQuotedCharacterSequence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 4734;
	                this.noEscape();
	            }

	            this.state = 4737;
	            this.unbrokenDoubleQuotedCharacterSequence();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleQuotedCharacterSequence() {
	    let localctx = new SingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, GqlParser.RULE_singleQuotedCharacterSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4741;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 4740;
	            this.noEscape();
	        }

	        this.state = 4743;
	        this.unbrokenSingleQuotedCharacterSequence();
	        this.state = 4748;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,500,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4744;
	                this.match(GqlParser.VERTICAL_BAR);
	                this.state = 4745;
	                this.unbrokenSingleQuotedCharacterSequence(); 
	            }
	            this.state = 4750;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,500,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doubleQuotedCharacterSequence() {
	    let localctx = new DoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1206, GqlParser.RULE_doubleQuotedCharacterSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 4751;
	            this.noEscape();
	        }

	        this.state = 4754;
	        this.unbrokenDoubleQuotedCharacterSequence();
	        this.state = 4759;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,502,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4755;
	                this.match(GqlParser.VERTICAL_BAR);
	                this.state = 4756;
	                this.unbrokenDoubleQuotedCharacterSequence(); 
	            }
	            this.state = 4761;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,502,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accentQuotedCharacterSequence() {
	    let localctx = new AccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1208, GqlParser.RULE_accentQuotedCharacterSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 4762;
	            this.noEscape();
	        }

	        this.state = 4765;
	        this.unbrokenAccentQuotedCharacterSequence();
	        this.state = 4770;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,504,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4766;
	                this.match(GqlParser.VERTICAL_BAR);
	                this.state = 4767;
	                this.unbrokenAccentQuotedCharacterSequence(); 
	            }
	            this.state = 4772;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,504,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noEscape() {
	    let localctx = new NoEscapeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1210, GqlParser.RULE_noEscape);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4773;
	        this.match(GqlParser.COMMERCIAL_AT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenSingleQuotedCharacterSequence() {
	    let localctx = new UnbrokenSingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1212, GqlParser.RULE_unbrokenSingleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4775;
	        this.match(GqlParser.SINGLE_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenDoubleQuotedCharacterSequence() {
	    let localctx = new UnbrokenDoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1214, GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4777;
	        this.match(GqlParser.DOUBLE_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenAccentQuotedCharacterSequence() {
	    let localctx = new UnbrokenAccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1216, GqlParser.RULE_unbrokenAccentQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4779;
	        this.match(GqlParser.ACCENT_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalLiteral() {
	    let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1218, GqlParser.RULE_temporalLiteral);
	    try {
	        this.state = 4785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4781;
	            this.dateLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4782;
	            this.timeLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4783;
	            this.dateTimeLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4784;
	            this.sqlDateTimeLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1220, GqlParser.RULE_dateLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4787;
	        this.match(GqlParser.DATE);
	        this.state = 4788;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeLiteral() {
	    let localctx = new TimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1222, GqlParser.RULE_timeLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4790;
	        this.match(GqlParser.TIME);
	        this.state = 4791;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeLiteral() {
	    let localctx = new DateTimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1224, GqlParser.RULE_dateTimeLiteral);
	    try {
	        this.state = 4797;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4793;
	            this.match(GqlParser.DATETIME);
	            this.state = 4794;
	            this.unbrokenCharacterStringLiteral();
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4795;
	            this.match(GqlParser.TIMESTAMP);
	            this.state = 4796;
	            this.unbrokenCharacterStringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateString() {
	    let localctx = new DateStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1226, GqlParser.RULE_dateString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4799;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeString() {
	    let localctx = new TimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1228, GqlParser.RULE_timeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4801;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeString() {
	    let localctx = new DateTimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1230, GqlParser.RULE_dateTimeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4803;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlDateTimeLiteral() {
	    let localctx = new SqlDateTimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1232, GqlParser.RULE_sqlDateTimeLiteral);
	    try {
	        this.state = 4847;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4805;
	            this.match(GqlParser.DATE);
	            this.state = 4806;
	            this.match(GqlParser.QUOTE);
	            this.state = 4807;
	            this.match(GqlParser.FOUR_DIGIT);
	            this.state = 4808;
	            this.match(GqlParser.MINUS);
	            this.state = 4809;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4810;
	            this.match(GqlParser.MINUS);
	            this.state = 4811;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4812;
	            this.match(GqlParser.QUOTE);
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4813;
	            this.match(GqlParser.TIME);
	            this.state = 4814;
	            this.match(GqlParser.QUOTE);
	            this.state = 4815;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4816;
	            this.match(GqlParser.COLON);
	            this.state = 4817;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4818;
	            this.match(GqlParser.COLON);
	            this.state = 4819;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4820;
	            this.match(GqlParser.QUOTE);
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4821;
	            this.match(GqlParser.TIMESTAMP);
	            this.state = 4822;
	            this.match(GqlParser.QUOTE);
	            this.state = 4823;
	            this.match(GqlParser.FOUR_DIGIT);
	            this.state = 4824;
	            this.match(GqlParser.MINUS);
	            this.state = 4825;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4826;
	            this.match(GqlParser.MINUS);
	            this.state = 4827;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4828;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4829;
	            this.match(GqlParser.COLON);
	            this.state = 4830;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4831;
	            this.match(GqlParser.COLON);
	            this.state = 4832;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4833;
	            this.match(GqlParser.QUOTE);
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4834;
	            this.match(GqlParser.DATETIME);
	            this.state = 4835;
	            this.match(GqlParser.QUOTE);
	            this.state = 4836;
	            this.match(GqlParser.FOUR_DIGIT);
	            this.state = 4837;
	            this.match(GqlParser.MINUS);
	            this.state = 4838;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4839;
	            this.match(GqlParser.MINUS);
	            this.state = 4840;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4841;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4842;
	            this.match(GqlParser.COLON);
	            this.state = 4843;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4844;
	            this.match(GqlParser.COLON);
	            this.state = 4845;
	            this.match(GqlParser.DOUBLE_DIGIT);
	            this.state = 4846;
	            this.match(GqlParser.QUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationLiteral() {
	    let localctx = new DurationLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1234, GqlParser.RULE_durationLiteral);
	    try {
	        this.state = 4852;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 126:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4849;
	            this.match(GqlParser.DURATION);
	            this.state = 4850;
	            this.durationString();
	            break;
	        case 383:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4851;
	            this.sqlIntervalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationString() {
	    let localctx = new DurationStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1236, GqlParser.RULE_durationString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4854;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlIntervalLiteral() {
	    let localctx = new SqlIntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1238, GqlParser.RULE_sqlIntervalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4856;
	        this.match(GqlParser.UNSIGNED_INT);
	        this.state = 4857;
	        this.sqlIntervalType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlIntervalType() {
	    let localctx = new SqlIntervalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1240, GqlParser.RULE_sqlIntervalType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4859;
	        _la = this._input.LA(1);
	        if(!(((((_la - 364)) & ~0x1f) == 0 && ((1 << (_la - 364)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1242, GqlParser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4861;
	        this.match(GqlParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1244, GqlParser.RULE_listLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4863;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordLiteral() {
	    let localctx = new RecordLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1246, GqlParser.RULE_recordLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4865;
	        this.recordValueConstructor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectName() {
	    let localctx = new ObjectNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1248, GqlParser.RULE_objectName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4867;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectNameOrBindingVar() {
	    let localctx = new ObjectNameOrBindingVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1250, GqlParser.RULE_objectNameOrBindingVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4869;
	        this.match(GqlParser.REGULAR_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directoryName() {
	    let localctx = new DirectoryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1252, GqlParser.RULE_directoryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4871;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaName() {
	    let localctx = new SchemaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1254, GqlParser.RULE_schemaName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4873;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphName() {
	    let localctx = new GraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1256, GqlParser.RULE_graphName);
	    try {
	        this.state = 4877;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4875;
	            this.match(GqlParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4876;
	            this.delimitedGraphName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedGraphName() {
	    let localctx = new DelimitedGraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1258, GqlParser.RULE_delimitedGraphName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4879;
	        this.delimitedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeName() {
	    let localctx = new GraphTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1260, GqlParser.RULE_graphTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4881;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeName() {
	    let localctx = new ElementTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1262, GqlParser.RULE_elementTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4883;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableName() {
	    let localctx = new BindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1264, GqlParser.RULE_bindingTableName);
	    try {
	        this.state = 4887;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4885;
	            this.match(GqlParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4886;
	            this.delimitedBindingTableName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedBindingTableName() {
	    let localctx = new DelimitedBindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1266, GqlParser.RULE_delimitedBindingTableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4889;
	        this.delimitedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureName() {
	    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1268, GqlParser.RULE_procedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4891;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelName() {
	    let localctx = new LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1270, GqlParser.RULE_labelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4893;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1272, GqlParser.RULE_propertyName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4895;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldName() {
	    let localctx = new FieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1274, GqlParser.RULE_fieldName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4897;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterName() {
	    let localctx = new ParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1276, GqlParser.RULE_parameterName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4899;
	        this.match(GqlParser.DOLLAR);
	        this.state = 4900;
	        this.separatedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new VarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1278, GqlParser.RULE_var);
	    try {
	        this.state = 4907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4902;
	            this.graphVar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4903;
	            this.graphPatternVar();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4904;
	            this.bindingTableVar();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4905;
	            this.valueVar();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4906;
	            this.bindingVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVar() {
	    let localctx = new GraphVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1280, GqlParser.RULE_graphVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4909;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternVar() {
	    let localctx = new GraphPatternVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1282, GqlParser.RULE_graphPatternVar);
	    try {
	        this.state = 4913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,512,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4911;
	            this.elementVar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4912;
	            this.pathOrSubpathVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOrSubpathVar() {
	    let localctx = new PathOrSubpathVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1284, GqlParser.RULE_pathOrSubpathVar);
	    try {
	        this.state = 4917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,513,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4915;
	            this.pathVar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4916;
	            this.subpathVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVar() {
	    let localctx = new ElementVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1286, GqlParser.RULE_elementVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4919;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVar() {
	    let localctx = new PathVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1288, GqlParser.RULE_pathVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4921;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVar() {
	    let localctx = new SubpathVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1290, GqlParser.RULE_subpathVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4923;
	        this.match(GqlParser.REGULAR_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVar() {
	    let localctx = new BindingTableVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1292, GqlParser.RULE_bindingTableVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4925;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVar() {
	    let localctx = new ValueVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1294, GqlParser.RULE_valueVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4927;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVar() {
	    let localctx = new BindingVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1296, GqlParser.RULE_bindingVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4929;
	        this.match(GqlParser.REGULAR_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	token() {
	    let localctx = new TokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1298, GqlParser.RULE_token);
	    try {
	        this.state = 4933;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 62:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 370:
	        case 388:
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4931;
	            this.nonDelimiterToken();
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 28:
	        case 33:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 63:
	        case 389:
	        case 390:
	        case 391:
	        case 416:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4932;
	            this.delimiterToken();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonDelimiterToken() {
	    let localctx = new NonDelimiterTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1300, GqlParser.RULE_nonDelimiterToken);
	    try {
	        this.state = 4941;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4935;
	            this.match(GqlParser.REGULAR_IDENTIFIER);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4936;
	            this.parameterName();
	            break;
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4937;
	            this.keyWord();
	            break;
	        case 370:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4938;
	            this.match(GqlParser.UNSIGNED_NUMERIC_LITERAL);
	            break;
	        case 388:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4939;
	            this.match(GqlParser.BYTE_STRING_LITERAL);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4940;
	            this.match(GqlParser.MULTISET_ALTERNATION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1302, GqlParser.RULE_identifier);
	    try {
	        this.state = 4945;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4943;
	            this.match(GqlParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4944;
	            this.delimitedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	separatedIdentifier() {
	    let localctx = new SeparatedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1304, GqlParser.RULE_separatedIdentifier);
	    try {
	        this.state = 4949;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 399:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4947;
	            this.match(GqlParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 390:
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4948;
	            this.delimitedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonDelimitedIdentifier() {
	    let localctx = new NonDelimitedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1306, GqlParser.RULE_nonDelimitedIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4951;
	        _la = this._input.LA(1);
	        if(!(_la===399 || _la===400)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedIdentifier() {
	    let localctx = new DelimitedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1308, GqlParser.RULE_delimitedIdentifier);
	    try {
	        this.state = 4955;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4953;
	            this.doubleQuotedCharacterSequence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4954;
	            this.accentQuotedCharacterSequence();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyWord() {
	    let localctx = new KeyWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1310, GqlParser.RULE_keyWord);
	    try {
	        this.state = 4959;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4957;
	            this.reservedWord();
	            break;
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4958;
	            this.nonReservedWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1312, GqlParser.RULE_reservedWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4961;
	        _la = this._input.LA(1);
	        if(!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & 16777215) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preReservedWord() {
	    let localctx = new PreReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1314, GqlParser.RULE_preReservedWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4963;
	        _la = this._input.LA(1);
	        if(!(((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & 4294967295) !== 0) || ((((_la - 312)) & ~0x1f) == 0 && ((1 << (_la - 312)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReservedWord() {
	    let localctx = new NonReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1316, GqlParser.RULE_nonReservedWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4965;
	        _la = this._input.LA(1);
	        if(!(((((_la - 315)) & ~0x1f) == 0 && ((1 << (_la - 315)) & 4294967295) !== 0) || ((((_la - 347)) & ~0x1f) == 0 && ((1 << (_la - 347)) & 131071) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimiterToken() {
	    let localctx = new DelimiterTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1318, GqlParser.RULE_delimiterToken);
	    try {
	        this.state = 5004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,520,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4967;
	            this.match(GqlParser.GQL_SPECIAL_CHAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4968;
	            this.characterStringLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4969;
	            this.match(GqlParser.CONCATENATION);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4970;
	            this.dateString();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4971;
	            this.dateTimeString();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4972;
	            this.delimitedIdentifier();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4973;
	            this.durationString();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4974;
	            this.timeString();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4975;
	            this.match(GqlParser.DOUBLE_COLON);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4976;
	            this.match(GqlParser.DOUBLE_MINUS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4977;
	            this.match(GqlParser.DOUBLE_PERIOD);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4978;
	            this.match(GqlParser.NOT_EQUALS);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4979;
	            this.match(GqlParser.LESS_THAN);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4980;
	            this.match(GqlParser.GREATER_THAN);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 4981;
	            this.match(GqlParser.LESS_THAN_OR_EQUALS);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 4982;
	            this.match(GqlParser.GREATER_THAN_OR_EQUALS);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 4983;
	            this.match(GqlParser.LEFT_ARROW);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 4984;
	            this.match(GqlParser.LEFT_ARROW_TILDE);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 4985;
	            this.match(GqlParser.LEFT_ARROW_BRACKET);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 4986;
	            this.match(GqlParser.LEFT_ARROW_TILDE_BRACKET);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 4987;
	            this.match(GqlParser.LEFT_MINUS_RIGHT);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 4988;
	            this.match(GqlParser.LEFT_MINUS_SLASH);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 4989;
	            this.match(GqlParser.LEFT_TILDE_SLASH);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 4990;
	            this.match(GqlParser.MINUS_LEFT_BRACKET);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 4991;
	            this.match(GqlParser.MINUS_SLASH);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 4992;
	            this.match(GqlParser.RIGHT_ARROW);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 4993;
	            this.match(GqlParser.RIGHT_BRACKET_MINUS);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 4994;
	            this.match(GqlParser.RIGHT_BRACKET_TILDE);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 4995;
	            this.match(GqlParser.BRACKET_RIGHT_ARROW);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 4996;
	            this.match(GqlParser.BRACKET_TILDE_RIGHT_ARROW);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 4997;
	            this.match(GqlParser.SLASH_MINUS);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 4998;
	            this.match(GqlParser.SLASH_MINUS_RIGHT);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 4999;
	            this.match(GqlParser.SLASH_TILDE);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 5000;
	            this.match(GqlParser.SLASH_TILDE_RIGHT);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 5001;
	            this.match(GqlParser.TILDE_LEFT_BRACKET);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 5002;
	            this.match(GqlParser.TILDE_RIGHT_ARROW);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 5003;
	            this.match(GqlParser.TILDE_SLASH);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bidirectionalControlCharacter() {
	    let localctx = new BidirectionalControlCharacterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1320, GqlParser.RULE_bidirectionalControlCharacter);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1322, GqlParser.RULE_comment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5008;
	        _la = this._input.LA(1);
	        if(!(_la===392 || _la===393)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeSynonym() {
	    let localctx = new EdgeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1324, GqlParser.RULE_edgeSynonym);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5010;
	        _la = this._input.LA(1);
	        if(!(_la===322 || _la===345)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgesSynonym() {
	    let localctx = new EdgesSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1326, GqlParser.RULE_edgesSynonym);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5012;
	        _la = this._input.LA(1);
	        if(!(_la===323 || _la===346)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeSynonym() {
	    let localctx = new NodeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1328, GqlParser.RULE_nodeSynonym);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5014;
	        _la = this._input.LA(1);
	        if(!(_la===339 || _la===359)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GqlParser.EOF = antlr4.Token.EOF;
GqlParser.LEFT_ARROW = 1;
GqlParser.LEFT_ARROW_TILDE = 2;
GqlParser.LEFT_ARROW_BRACKET = 3;
GqlParser.LEFT_ARROW_TILDE_BRACKET = 4;
GqlParser.LEFT_MINUS_RIGHT = 5;
GqlParser.LEFT_MINUS_SLASH = 6;
GqlParser.LEFT_TILDE_SLASH = 7;
GqlParser.MINUS_LEFT_BRACKET = 8;
GqlParser.MINUS_SLASH = 9;
GqlParser.RIGHT_ARROW = 10;
GqlParser.RIGHT_BRACKET_MINUS = 11;
GqlParser.RIGHT_BRACKET_TILDE = 12;
GqlParser.BRACKET_RIGHT_ARROW = 13;
GqlParser.BRACKET_TILDE_RIGHT_ARROW = 14;
GqlParser.SLASH_MINUS = 15;
GqlParser.SLASH_MINUS_RIGHT = 16;
GqlParser.SLASH_TILDE = 17;
GqlParser.SLASH_TILDE_RIGHT = 18;
GqlParser.TILDE_LEFT_BRACKET = 19;
GqlParser.TILDE_RIGHT_ARROW = 20;
GqlParser.TILDE_SLASH = 21;
GqlParser.QUOTE = 22;
GqlParser.DOUBLE_QUOTE = 23;
GqlParser.GRAVE_ACCENT = 24;
GqlParser.REVERS_SOLIDUS = 25;
GqlParser.PLUS = 26;
GqlParser.MINUS = 27;
GqlParser.DOUBLE_MINUS = 28;
GqlParser.AMPERSAND = 29;
GqlParser.ASTERISK = 30;
GqlParser.CIRCUMFLEX = 31;
GqlParser.COLON = 32;
GqlParser.DOUBLE_COLON = 33;
GqlParser.COMMA = 34;
GqlParser.DOLLAR = 35;
GqlParser.EQUALS = 36;
GqlParser.EXCLAMATION = 37;
GqlParser.LEFT_ANGLE_BRACKET = 38;
GqlParser.RIGHT_ANGLE_BRACKET = 39;
GqlParser.LEFT_BRACE = 40;
GqlParser.RIGHT_BRACE = 41;
GqlParser.LEFT_BRACKET = 42;
GqlParser.RIGHT_BRACKET = 43;
GqlParser.LEFT_PAREN = 44;
GqlParser.RIGHT_PAREN = 45;
GqlParser.QUESTION_MARK = 46;
GqlParser.SEMICOLON = 47;
GqlParser.SOLIDUS = 48;
GqlParser.DOUBLE_SOLIDUS = 49;
GqlParser.TILDE = 50;
GqlParser.UNDERSCORE = 51;
GqlParser.VERTICAL_BAR = 52;
GqlParser.PERCENT = 53;
GqlParser.PERIOD = 54;
GqlParser.DOUBLE_PERIOD = 55;
GqlParser.COMMERCIAL_AT = 56;
GqlParser.NOT_EQUALS = 57;
GqlParser.LESS_THAN = 58;
GqlParser.GREATER_THAN = 59;
GqlParser.LESS_THAN_OR_EQUALS = 60;
GqlParser.GREATER_THAN_OR_EQUALS = 61;
GqlParser.MULTISET_ALTERNATION = 62;
GqlParser.CONCATENATION = 63;
GqlParser.ABS = 64;
GqlParser.ACOS = 65;
GqlParser.ALL = 66;
GqlParser.ALL_DIFFERENT = 67;
GqlParser.AND = 68;
GqlParser.ANY = 69;
GqlParser.ARRAY = 70;
GqlParser.AS = 71;
GqlParser.ASC = 72;
GqlParser.ASCENDING = 73;
GqlParser.ASIN = 74;
GqlParser.AT = 75;
GqlParser.ATAN = 76;
GqlParser.AVG = 77;
GqlParser.BIG = 78;
GqlParser.BIGINT = 79;
GqlParser.BINARY = 80;
GqlParser.BOOL = 81;
GqlParser.BOOLEAN = 82;
GqlParser.BOTH = 83;
GqlParser.BTRIM = 84;
GqlParser.BY = 85;
GqlParser.BYTE_LENGTH = 86;
GqlParser.BYTES = 87;
GqlParser.CALL = 88;
GqlParser.CASE = 89;
GqlParser.CAST = 90;
GqlParser.CEIL = 91;
GqlParser.CEILING = 92;
GqlParser.CHAR_LENGTH = 93;
GqlParser.CHARACTER_LENGTH = 94;
GqlParser.CHARACTERISTICS = 95;
GqlParser.CLOSE = 96;
GqlParser.COALESCE = 97;
GqlParser.COLLECT = 98;
GqlParser.COMMIT = 99;
GqlParser.COPY = 100;
GqlParser.COS = 101;
GqlParser.COSH = 102;
GqlParser.COT = 103;
GqlParser.COUNT = 104;
GqlParser.CREATE = 105;
GqlParser.CURRENT_DATE = 106;
GqlParser.CURRENT_GRAPH = 107;
GqlParser.CURRENT_PROPERTY_GRAPH = 108;
GqlParser.CURRENT_SCHEMA = 109;
GqlParser.CURRENT_TIME = 110;
GqlParser.CURRENT_TIMESTAMP = 111;
GqlParser.CURRENT_USER = 112;
GqlParser.DATE = 113;
GqlParser.DATETIME = 114;
GqlParser.DAY = 115;
GqlParser.DEC = 116;
GqlParser.DECIMAL = 117;
GqlParser.DEGREES = 118;
GqlParser.DELETE = 119;
GqlParser.DESC = 120;
GqlParser.DESCENDING = 121;
GqlParser.DETACH = 122;
GqlParser.DISTINCT = 123;
GqlParser.DOUBLE = 124;
GqlParser.DROP = 125;
GqlParser.DURATION = 126;
GqlParser.DURATION_BETWEEN = 127;
GqlParser.ELEMENT_ID = 128;
GqlParser.ELSE = 129;
GqlParser.END = 130;
GqlParser.EXCEPT = 131;
GqlParser.EXISTS = 132;
GqlParser.EXP = 133;
GqlParser.FALSE = 134;
GqlParser.FILTER = 135;
GqlParser.FINISH = 136;
GqlParser.FLOAT = 137;
GqlParser.FLOAT16 = 138;
GqlParser.FLOAT32 = 139;
GqlParser.FLOAT64 = 140;
GqlParser.FLOAT128 = 141;
GqlParser.FLOAT256 = 142;
GqlParser.FLOOR = 143;
GqlParser.FOR = 144;
GqlParser.FROM = 145;
GqlParser.GROUP = 146;
GqlParser.HAVING = 147;
GqlParser.HOME_GRAPH = 148;
GqlParser.HOME_PROPERTY_GRAPH = 149;
GqlParser.HOME_SCHEMA = 150;
GqlParser.HOUR = 151;
GqlParser.IF = 152;
GqlParser.IN = 153;
GqlParser.INSERT = 154;
GqlParser.INT = 155;
GqlParser.INTEGER = 156;
GqlParser.INT8 = 157;
GqlParser.INTEGER8 = 158;
GqlParser.INT16 = 159;
GqlParser.INTEGER16 = 160;
GqlParser.INT32 = 161;
GqlParser.INTEGER32 = 162;
GqlParser.INT64 = 163;
GqlParser.INTEGER64 = 164;
GqlParser.INT128 = 165;
GqlParser.INTEGER128 = 166;
GqlParser.INT256 = 167;
GqlParser.INTEGER256 = 168;
GqlParser.INTERSECT = 169;
GqlParser.INTERVAL = 170;
GqlParser.IS = 171;
GqlParser.LEADING = 172;
GqlParser.LET = 173;
GqlParser.LIKE = 174;
GqlParser.LIMIT = 175;
GqlParser.LIST = 176;
GqlParser.LN = 177;
GqlParser.LOCAL = 178;
GqlParser.LOCAL_DATETIME = 179;
GqlParser.LOCAL_TIME = 180;
GqlParser.LOCAL_TIMESTAMP = 181;
GqlParser.LOG = 182;
GqlParser.LOG10 = 183;
GqlParser.LOWER = 184;
GqlParser.LTRIM = 185;
GqlParser.MATCH = 186;
GqlParser.MAX = 187;
GqlParser.MIN = 188;
GqlParser.MINUTE = 189;
GqlParser.MOD = 190;
GqlParser.MONTH = 191;
GqlParser.NEXT = 192;
GqlParser.NODETACH = 193;
GqlParser.NORMALIZE = 194;
GqlParser.NOT = 195;
GqlParser.NULL = 196;
GqlParser.NULLS = 197;
GqlParser.NULLIF = 198;
GqlParser.OCTET_LENGTH = 199;
GqlParser.OF = 200;
GqlParser.OFFSET = 201;
GqlParser.OPEN = 202;
GqlParser.OPTIONAL = 203;
GqlParser.OR = 204;
GqlParser.ORDER = 205;
GqlParser.OTHERWISE = 206;
GqlParser.PARAMETER = 207;
GqlParser.PARAMETERS = 208;
GqlParser.PATH = 209;
GqlParser.PATH_LENGTH = 210;
GqlParser.PATHS = 211;
GqlParser.PERCENTILE_CONT = 212;
GqlParser.PERCENTILE_DISC = 213;
GqlParser.POWER = 214;
GqlParser.PRECISION = 215;
GqlParser.PROPERTY_EXISTS = 216;
GqlParser.RADIANS = 217;
GqlParser.REAL = 218;
GqlParser.RECORD = 219;
GqlParser.REMOVE = 220;
GqlParser.REPLACE = 221;
GqlParser.RESET = 222;
GqlParser.RETURN = 223;
GqlParser.ROLLBACK = 224;
GqlParser.RTRIM = 225;
GqlParser.SAME = 226;
GqlParser.SCHEMA = 227;
GqlParser.SECOND = 228;
GqlParser.SELECT = 229;
GqlParser.SESSION = 230;
GqlParser.SET = 231;
GqlParser.SIGNED = 232;
GqlParser.SIN = 233;
GqlParser.SINH = 234;
GqlParser.SKIP_ = 235;
GqlParser.SMALL = 236;
GqlParser.SMALLINT = 237;
GqlParser.SQRT = 238;
GqlParser.START = 239;
GqlParser.STDDEV_POP = 240;
GqlParser.STDDEV_SAMP = 241;
GqlParser.STRING = 242;
GqlParser.SUM = 243;
GqlParser.TAN = 244;
GqlParser.TANH = 245;
GqlParser.THEN = 246;
GqlParser.TIME = 247;
GqlParser.TIMESTAMP = 248;
GqlParser.TRAILING = 249;
GqlParser.TRIM = 250;
GqlParser.TRUE = 251;
GqlParser.TYPED = 252;
GqlParser.UBIGINT = 253;
GqlParser.UINT = 254;
GqlParser.UINT8 = 255;
GqlParser.UINT16 = 256;
GqlParser.UINT32 = 257;
GqlParser.UINT64 = 258;
GqlParser.UINT128 = 259;
GqlParser.UINT256 = 260;
GqlParser.UNION = 261;
GqlParser.UNKNOWN = 262;
GqlParser.UNSIGNED = 263;
GqlParser.UPPER = 264;
GqlParser.USE = 265;
GqlParser.USMALLINT = 266;
GqlParser.VALUE = 267;
GqlParser.VARBINARY = 268;
GqlParser.VARCHAR = 269;
GqlParser.VARIABLE = 270;
GqlParser.WHEN = 271;
GqlParser.WHERE = 272;
GqlParser.WITH = 273;
GqlParser.XOR = 274;
GqlParser.YEAR = 275;
GqlParser.YIELD = 276;
GqlParser.ZONED = 277;
GqlParser.ZONED_DATETIME = 278;
GqlParser.ZONED_TIME = 279;
GqlParser.AGGREGATE = 280;
GqlParser.AGGREGATES = 281;
GqlParser.ALTER = 282;
GqlParser.CATALOG = 283;
GqlParser.CLEAR = 284;
GqlParser.CLONE = 285;
GqlParser.CONSTRAINT = 286;
GqlParser.CURRENT_ROLE = 287;
GqlParser.DATA = 288;
GqlParser.DIRECTORY = 289;
GqlParser.EXACT = 290;
GqlParser.EXISTING = 291;
GqlParser.FUNCTION = 292;
GqlParser.GQLSTATUS = 293;
GqlParser.GRANT = 294;
GqlParser.INSTANT = 295;
GqlParser.LEFT = 296;
GqlParser.NOTHING = 297;
GqlParser.NUMERIC = 298;
GqlParser.ON = 299;
GqlParser.PARTITION = 300;
GqlParser.PROCEDURE = 301;
GqlParser.PRODUCT = 302;
GqlParser.PROJECT = 303;
GqlParser.QUERY = 304;
GqlParser.RECORDS = 305;
GqlParser.REFERENCE = 306;
GqlParser.RENAME = 307;
GqlParser.REVOKE = 308;
GqlParser.RIGHT = 309;
GqlParser.SUBSTRING = 310;
GqlParser.TEMPORAL = 311;
GqlParser.UNIQUE = 312;
GqlParser.UNIT = 313;
GqlParser.VALUES = 314;
GqlParser.ACYCLIC = 315;
GqlParser.BINDING = 316;
GqlParser.BINDINGS = 317;
GqlParser.CONNECTING = 318;
GqlParser.DESTINATION = 319;
GqlParser.DIFFERENT = 320;
GqlParser.DIRECTED = 321;
GqlParser.EDGE = 322;
GqlParser.EDGES = 323;
GqlParser.ELEMENT = 324;
GqlParser.ELEMENTS = 325;
GqlParser.FIRST = 326;
GqlParser.GRAPH = 327;
GqlParser.GROUPS = 328;
GqlParser.KEEP = 329;
GqlParser.LABEL = 330;
GqlParser.LABELED = 331;
GqlParser.LABELS = 332;
GqlParser.LAST = 333;
GqlParser.NFC = 334;
GqlParser.NFD = 335;
GqlParser.NFKC = 336;
GqlParser.NFKD = 337;
GqlParser.NO = 338;
GqlParser.NODE = 339;
GqlParser.NORMALIZED = 340;
GqlParser.ONLY = 341;
GqlParser.ORDINALITY = 342;
GqlParser.PROPERTY = 343;
GqlParser.READ = 344;
GqlParser.RELATIONSHIP = 345;
GqlParser.RELATIONSHIPS = 346;
GqlParser.REPEATABLE = 347;
GqlParser.SHORTEST = 348;
GqlParser.SIMPLE = 349;
GqlParser.SOURCE = 350;
GqlParser.TABLE = 351;
GqlParser.TEMP = 352;
GqlParser.TIMEZONE = 353;
GqlParser.TO = 354;
GqlParser.TRAIL = 355;
GqlParser.TRANSACTION = 356;
GqlParser.TYPE = 357;
GqlParser.UNDIRECTED = 358;
GqlParser.VERTEX = 359;
GqlParser.WALK = 360;
GqlParser.WITHOUT = 361;
GqlParser.WRITE = 362;
GqlParser.ZONE = 363;
GqlParser.INTERVAL_DAY = 364;
GqlParser.INTERVAL_WEEK = 365;
GqlParser.INTERVAL_MONTH = 366;
GqlParser.INTERVAL_YEAR = 367;
GqlParser.IF_NOT_EXISTS = 368;
GqlParser.IF_EXISTS = 369;
GqlParser.UNSIGNED_NUMERIC_LITERAL = 370;
GqlParser.SIGNED_NUMERIC_LITERAL = 371;
GqlParser.SIGN = 372;
GqlParser.EXACT_NUMERIC_LITERAL = 373;
GqlParser.EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 374;
GqlParser.EXACT_UNSIGNED_INT = 375;
GqlParser.APROXIMATE_NUMERIC_LITERAL = 376;
GqlParser.APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 377;
GqlParser.APROXIMATE_UNSIGNED_INT = 378;
GqlParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 379;
GqlParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION = 380;
GqlParser.FOUR_DIGIT = 381;
GqlParser.DOUBLE_DIGIT = 382;
GqlParser.UNSIGNED_INT = 383;
GqlParser.UNSIGNED_DECIMAL_INT = 384;
GqlParser.UNSIGNED_HEX_INT = 385;
GqlParser.UNSIGNED_OCTAL_INT = 386;
GqlParser.UNSIGNED_BINARY_INT = 387;
GqlParser.BYTE_STRING_LITERAL = 388;
GqlParser.SINGLE_QUOTED_STRING_LITERAL = 389;
GqlParser.DOUBLE_QUOTED_STRING_LITERAL = 390;
GqlParser.ACCENT_QUOTED_STRING_LITERAL = 391;
GqlParser.SIMPLE_COMMENT_LITERAL = 392;
GqlParser.BRACKETED_COMMNET_LITERAL = 393;
GqlParser.WS = 394;
GqlParser.WHITESPACE = 395;
GqlParser.NEW_LINE = 396;
GqlParser.CARRIAGE_RETURN = 397;
GqlParser.RETURN_SIGN = 398;
GqlParser.REGULAR_IDENTIFIER = 399;
GqlParser.EXTENDED_IDENTIFIER = 400;
GqlParser.START_CHARS = 401;
GqlParser.CONTINUE_CHARS = 402;
GqlParser.ESCAPED_CHARS = 403;
GqlParser.ESCAPED_REVERSE_SOLIDUS = 404;
GqlParser.ESCAPED_QUOTE = 405;
GqlParser.ESCAPED_SOUBLE_QUOTE = 406;
GqlParser.ESCAPED_GRAVE_ACCENT = 407;
GqlParser.ESCAPED_TAB = 408;
GqlParser.ESCAPED_BACKSPACE = 409;
GqlParser.ESCAPED_NEW_LINE = 410;
GqlParser.ESCAPED_CARRIAGE_RETURN = 411;
GqlParser.ESCAPED_FORM_FEED = 412;
GqlParser.ESCAPED_UNICODE4_DIGIT_VALUE = 413;
GqlParser.ESCAPED_UNICODE6_DIGIT_VALUE = 414;
GqlParser.GQL_LANGUAGE_CHAR = 415;
GqlParser.GQL_SPECIAL_CHAR = 416;

GqlParser.RULE_gqlProgram = 0;
GqlParser.RULE_activity = 1;
GqlParser.RULE_programActivity = 2;
GqlParser.RULE_sessionActivity = 3;
GqlParser.RULE_sessionSetCommand = 4;
GqlParser.RULE_sessionSetSchemaClause = 5;
GqlParser.RULE_sessionSetGraphClause = 6;
GqlParser.RULE_sessionSetTimeZoneClause = 7;
GqlParser.RULE_setTimeZoneValue = 8;
GqlParser.RULE_sessionSetParameterClause = 9;
GqlParser.RULE_sessionSetGraphParameterClause = 10;
GqlParser.RULE_sessionSetBindingTableParameterCalues = 11;
GqlParser.RULE_sessionSetValuesParameterClause = 12;
GqlParser.RULE_sessionSetParameterName = 13;
GqlParser.RULE_sessionResetCommand = 14;
GqlParser.RULE_sessionResetArguments = 15;
GqlParser.RULE_sessionCloseCommand = 16;
GqlParser.RULE_transactionActivity = 17;
GqlParser.RULE_transactionStartCommand = 18;
GqlParser.RULE_transactionEndCommand = 19;
GqlParser.RULE_transactionCharacteristics = 20;
GqlParser.RULE_transactionMode = 21;
GqlParser.RULE_transactionAccessMode = 22;
GqlParser.RULE_implDefinedAccessMode = 23;
GqlParser.RULE_nestedProcedureSpec = 24;
GqlParser.RULE_procedureSpec = 25;
GqlParser.RULE_nestedDataModProcedureSpec = 26;
GqlParser.RULE_nestedQuerySpec = 27;
GqlParser.RULE_procedureBody = 28;
GqlParser.RULE_bindingVarDefBlock = 29;
GqlParser.RULE_bindingVarDef = 30;
GqlParser.RULE_statmentBlock = 31;
GqlParser.RULE_statement = 32;
GqlParser.RULE_nextStatment = 33;
GqlParser.RULE_graphVarDef = 34;
GqlParser.RULE_optTypedGraphInit = 35;
GqlParser.RULE_graphInit = 36;
GqlParser.RULE_bindingTableVarDef = 37;
GqlParser.RULE_optTypedBindingTableInit = 38;
GqlParser.RULE_bindingTableInit = 39;
GqlParser.RULE_valueVarDef = 40;
GqlParser.RULE_optTypedValueInit = 41;
GqlParser.RULE_valueInit = 42;
GqlParser.RULE_graphExpr = 43;
GqlParser.RULE_currentGraph = 44;
GqlParser.RULE_nestedGraphQuerySpec = 45;
GqlParser.RULE_bindingTableExpr = 46;
GqlParser.RULE_nestedBindingTableQuerySpec = 47;
GqlParser.RULE_objectExprPrimary = 48;
GqlParser.RULE_linearCatalogModStatment = 49;
GqlParser.RULE_simpleCatalogModStatment = 50;
GqlParser.RULE_primitiveCatalogModStatment = 51;
GqlParser.RULE_createSchemeStatment = 52;
GqlParser.RULE_dropSchemeStatment = 53;
GqlParser.RULE_createGraphStatment = 54;
GqlParser.RULE_createOnlyGraphStatment = 55;
GqlParser.RULE_createOrReplaceGraphStatment = 56;
GqlParser.RULE_openGraphType = 57;
GqlParser.RULE_ofGraphType = 58;
GqlParser.RULE_graphTypeLikeGraph = 59;
GqlParser.RULE_graphSource = 60;
GqlParser.RULE_dropGraphStatment = 61;
GqlParser.RULE_createGraphTypeStatment = 62;
GqlParser.RULE_graphTypeSource = 63;
GqlParser.RULE_copyOfGraphType = 64;
GqlParser.RULE_dropGraphTypeStatment = 65;
GqlParser.RULE_callCatalogModProcedureStatment = 66;
GqlParser.RULE_linearDataModStatment = 67;
GqlParser.RULE_focusedLinearDataModStatment = 68;
GqlParser.RULE_focusedLinearDataModStatmentBody = 69;
GqlParser.RULE_focusedNestedDataModProcedureSpec = 70;
GqlParser.RULE_ambientLinearDataModStatment = 71;
GqlParser.RULE_ambientLinearDataModStatmentBody = 72;
GqlParser.RULE_simpleLinearDataAccessingStatment = 73;
GqlParser.RULE_simpleDataAccessingStatment = 74;
GqlParser.RULE_simpleDataModStatment = 75;
GqlParser.RULE_primitiveDataModStatment = 76;
GqlParser.RULE_insertStatment = 77;
GqlParser.RULE_setStatment = 78;
GqlParser.RULE_setItemList = 79;
GqlParser.RULE_setItem = 80;
GqlParser.RULE_setPropertyItem = 81;
GqlParser.RULE_setAllPropertiesItem = 82;
GqlParser.RULE_setLabelItem = 83;
GqlParser.RULE_labelSetSpec = 84;
GqlParser.RULE_removeStatment = 85;
GqlParser.RULE_removeItemList = 86;
GqlParser.RULE_removeItem = 87;
GqlParser.RULE_removePropertyItem = 88;
GqlParser.RULE_removeLabelItem = 89;
GqlParser.RULE_deleteStatment = 90;
GqlParser.RULE_deleteItemList = 91;
GqlParser.RULE_deleteItem = 92;
GqlParser.RULE_callDataModProcedureStatment = 93;
GqlParser.RULE_compositeQueryStatment = 94;
GqlParser.RULE_compositeQueryExpr = 95;
GqlParser.RULE_queryConjunction = 96;
GqlParser.RULE_setOperator = 97;
GqlParser.RULE_compositeQueryPrimary = 98;
GqlParser.RULE_linearQueryStatment = 99;
GqlParser.RULE_focusedLinearQueryStatment = 100;
GqlParser.RULE_focusedLinearQueryStatmentPart = 101;
GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart = 102;
GqlParser.RULE_focusedPrimitiveResultStatment = 103;
GqlParser.RULE_focusedNestedQuerySpec = 104;
GqlParser.RULE_ambientLinearQueryStatment = 105;
GqlParser.RULE_simpleLinearQueryStatment = 106;
GqlParser.RULE_simpleQueryStatment = 107;
GqlParser.RULE_primitiveQueryStatment = 108;
GqlParser.RULE_matchStatment = 109;
GqlParser.RULE_simpleMatchStatment = 110;
GqlParser.RULE_optionalMatchStatment = 111;
GqlParser.RULE_optionalOperand = 112;
GqlParser.RULE_matchStatmentBlock = 113;
GqlParser.RULE_callQueryStatment = 114;
GqlParser.RULE_filterStatment = 115;
GqlParser.RULE_letStatment = 116;
GqlParser.RULE_letVarDefList = 117;
GqlParser.RULE_letVarDef = 118;
GqlParser.RULE_forStatment = 119;
GqlParser.RULE_forItem = 120;
GqlParser.RULE_forItemAlias = 121;
GqlParser.RULE_forOrdinalityOrOffset = 122;
GqlParser.RULE_orderByAndPageStatment = 123;
GqlParser.RULE_primitiveResultStatment = 124;
GqlParser.RULE_returnStatment = 125;
GqlParser.RULE_returnStatmentBody = 126;
GqlParser.RULE_returnItemList = 127;
GqlParser.RULE_returnItem = 128;
GqlParser.RULE_returnItemAlias = 129;
GqlParser.RULE_selectStatment = 130;
GqlParser.RULE_selectItemList = 131;
GqlParser.RULE_selectItem = 132;
GqlParser.RULE_selectItemAlias = 133;
GqlParser.RULE_havingClause = 134;
GqlParser.RULE_selectStatmentBody = 135;
GqlParser.RULE_selectGraphMatchList = 136;
GqlParser.RULE_selectGraphMatch = 137;
GqlParser.RULE_selectQuerySpec = 138;
GqlParser.RULE_callProcedureStatment = 139;
GqlParser.RULE_procedureCall = 140;
GqlParser.RULE_inlineProcedureCall = 141;
GqlParser.RULE_varScopeClause = 142;
GqlParser.RULE_bindingVarRefList = 143;
GqlParser.RULE_namedProcedureCall = 144;
GqlParser.RULE_procedureArgList = 145;
GqlParser.RULE_procedureArg = 146;
GqlParser.RULE_useGraphClause = 147;
GqlParser.RULE_atSchemaClause = 148;
GqlParser.RULE_bindingVarRef = 149;
GqlParser.RULE_elementVarRef = 150;
GqlParser.RULE_pathVarRef = 151;
GqlParser.RULE_parameter = 152;
GqlParser.RULE_graphPatternBindingTable = 153;
GqlParser.RULE_graphPatternYieldClause = 154;
GqlParser.RULE_graphPatternYieldItemList = 155;
GqlParser.RULE_graphPatternYieldItem = 156;
GqlParser.RULE_graphPattern = 157;
GqlParser.RULE_matchMode = 158;
GqlParser.RULE_repeatableElementsMatchMode = 159;
GqlParser.RULE_differentEdgesMatchMode = 160;
GqlParser.RULE_elementBindingsOrElements = 161;
GqlParser.RULE_edgeBindingsOrEdges = 162;
GqlParser.RULE_pathPatternList = 163;
GqlParser.RULE_pathPattern = 164;
GqlParser.RULE_pathVarDeclaration = 165;
GqlParser.RULE_keepClause = 166;
GqlParser.RULE_graphPatternWhereClause = 167;
GqlParser.RULE_pathPatternPrefix = 168;
GqlParser.RULE_pathModePrefix = 169;
GqlParser.RULE_pathMode = 170;
GqlParser.RULE_pathSearchPrefix = 171;
GqlParser.RULE_allPathSearch = 172;
GqlParser.RULE_pathOrPaths = 173;
GqlParser.RULE_anyPathSearch = 174;
GqlParser.RULE_numberOfPaths = 175;
GqlParser.RULE_shortestPathSearch = 176;
GqlParser.RULE_allShortestPathSearch = 177;
GqlParser.RULE_anyShortestPathSearch = 178;
GqlParser.RULE_countedShortestPathSearch = 179;
GqlParser.RULE_countedShortestGroupSearch = 180;
GqlParser.RULE_groupOrGroups = 181;
GqlParser.RULE_numberOfGroups = 182;
GqlParser.RULE_pathPatternExpr = 183;
GqlParser.RULE_pathMultisetAlternation = 184;
GqlParser.RULE_pathPatternUnion = 185;
GqlParser.RULE_pathTerm = 186;
GqlParser.RULE_pathFactor = 187;
GqlParser.RULE_quantifiedPathPrimary = 188;
GqlParser.RULE_questionedPathPrimary = 189;
GqlParser.RULE_pathPrimary = 190;
GqlParser.RULE_elementPattern = 191;
GqlParser.RULE_nodePattern = 192;
GqlParser.RULE_elementPatternFiller = 193;
GqlParser.RULE_elementVarDeclaration = 194;
GqlParser.RULE_isLabelExpr = 195;
GqlParser.RULE_elementPatternPredicate = 196;
GqlParser.RULE_elementPatternWhereClause = 197;
GqlParser.RULE_elementPropertySpec = 198;
GqlParser.RULE_propertyKeyValuePairList = 199;
GqlParser.RULE_propertyKeyValuePair = 200;
GqlParser.RULE_edgePattern = 201;
GqlParser.RULE_fullEdgePattern = 202;
GqlParser.RULE_fullEdgePointingLeft = 203;
GqlParser.RULE_fullEdgeUndirected = 204;
GqlParser.RULE_fullEdgePointingRight = 205;
GqlParser.RULE_fullEdgeLeftOrUndirected = 206;
GqlParser.RULE_fullEdgeUndirectedOrRight = 207;
GqlParser.RULE_fullEdgeLeftOrRight = 208;
GqlParser.RULE_fullEdgeAnyDirection = 209;
GqlParser.RULE_abbreviatedEdgePattern = 210;
GqlParser.RULE_parenthesizedPathPatternExpr = 211;
GqlParser.RULE_subpathVarDeclaration = 212;
GqlParser.RULE_parenthesizedPathPatternWhereClause = 213;
GqlParser.RULE_insertGraphPattern = 214;
GqlParser.RULE_insertGraphPatternList = 215;
GqlParser.RULE_insertPathPattern = 216;
GqlParser.RULE_insertNodePattern = 217;
GqlParser.RULE_insertEdgePattern = 218;
GqlParser.RULE_insertEdgePointingLeft = 219;
GqlParser.RULE_insertEdgePointingRight = 220;
GqlParser.RULE_insertEdgeUndirected = 221;
GqlParser.RULE_insertElementPatternFiller = 222;
GqlParser.RULE_labelAndPropertySetSpec = 223;
GqlParser.RULE_labelExpr = 224;
GqlParser.RULE_labelTerm = 225;
GqlParser.RULE_labelFactor = 226;
GqlParser.RULE_labelNegation = 227;
GqlParser.RULE_labelPrimary = 228;
GqlParser.RULE_wildcardLabel = 229;
GqlParser.RULE_parenthesizedLabelExpr = 230;
GqlParser.RULE_graphPatternQuantifier = 231;
GqlParser.RULE_fixedQuantifier = 232;
GqlParser.RULE_generalQuantifier = 233;
GqlParser.RULE_lowerBound = 234;
GqlParser.RULE_upperBound = 235;
GqlParser.RULE_simplifiedPathPatternExpr = 236;
GqlParser.RULE_simplifiedDefaultingLeft = 237;
GqlParser.RULE_simplifiedDefaultingUndirected = 238;
GqlParser.RULE_simplifiedDefaultingRight = 239;
GqlParser.RULE_simplifiedDefaultingLeftOrUndirected = 240;
GqlParser.RULE_simplifiedDefaultingUndirectedOrRight = 241;
GqlParser.RULE_simplifiedDefaultingLeftOrRight = 242;
GqlParser.RULE_simplifiedDefaultingAnyDirection = 243;
GqlParser.RULE_simplifiedContents = 244;
GqlParser.RULE_simplifiedPathUnion = 245;
GqlParser.RULE_simplifiedMultisetAlternation = 246;
GqlParser.RULE_simplifiedTerm = 247;
GqlParser.RULE_simplifiedFactorLow = 248;
GqlParser.RULE_simplifiedFactorHigh = 249;
GqlParser.RULE_simplifiedQuntified = 250;
GqlParser.RULE_simplifiedQuestioned = 251;
GqlParser.RULE_simplifiedTertiary = 252;
GqlParser.RULE_simplifiedDirectionOverride = 253;
GqlParser.RULE_simplifiedOverrideLeft = 254;
GqlParser.RULE_simplifiedOverrideUndirected = 255;
GqlParser.RULE_simplifiedOverrideRight = 256;
GqlParser.RULE_simplifiedOverrideLeftOrUndirected = 257;
GqlParser.RULE_simplifiedOverrideUndirectedOrRight = 258;
GqlParser.RULE_simplifiedOverrideLeftOrRight = 259;
GqlParser.RULE_simplifiedOverrideAnyDirection = 260;
GqlParser.RULE_simplifiedSecondary = 261;
GqlParser.RULE_simplifiedNegation = 262;
GqlParser.RULE_simplifiedPrimary = 263;
GqlParser.RULE_whereClause = 264;
GqlParser.RULE_yieldClause = 265;
GqlParser.RULE_yieldItemList = 266;
GqlParser.RULE_yieldItem = 267;
GqlParser.RULE_yieldItemName = 268;
GqlParser.RULE_yieldItemAlias = 269;
GqlParser.RULE_groupByClause = 270;
GqlParser.RULE_groupingElementList = 271;
GqlParser.RULE_groupingElement = 272;
GqlParser.RULE_emptyGroupingSet = 273;
GqlParser.RULE_orderByClause = 274;
GqlParser.RULE_aggregateFunction = 275;
GqlParser.RULE_generalSetFunction = 276;
GqlParser.RULE_generalSetFunctionType = 277;
GqlParser.RULE_setQuantifier = 278;
GqlParser.RULE_binarySetFunction = 279;
GqlParser.RULE_dependantValueExpr = 280;
GqlParser.RULE_independentValueExpr = 281;
GqlParser.RULE_sortSpecList = 282;
GqlParser.RULE_sortSpec = 283;
GqlParser.RULE_sortKey = 284;
GqlParser.RULE_orderingSpec = 285;
GqlParser.RULE_nullOrdering = 286;
GqlParser.RULE_limitClause = 287;
GqlParser.RULE_offsetClause = 288;
GqlParser.RULE_offsetSynonym = 289;
GqlParser.RULE_graphTypeSpec = 290;
GqlParser.RULE_nestedGraphTypeSpec = 291;
GqlParser.RULE_graphTypeSpecBody = 292;
GqlParser.RULE_elementTypeDefList = 293;
GqlParser.RULE_elementTypeDef = 294;
GqlParser.RULE_nodeTypeDef = 295;
GqlParser.RULE_nodeTypePattern = 296;
GqlParser.RULE_nodeTypePhrase = 297;
GqlParser.RULE_nodeTypeName = 298;
GqlParser.RULE_nodeTypeFiller = 299;
GqlParser.RULE_nodeTypeLabelSetDef = 300;
GqlParser.RULE_nodeTypePropertyTypeSetDef = 301;
GqlParser.RULE_edgeTypeDef = 302;
GqlParser.RULE_edgeTypePattern = 303;
GqlParser.RULE_edgeTypePhrase = 304;
GqlParser.RULE_edgeTypeName = 305;
GqlParser.RULE_edgeTypeFiller = 306;
GqlParser.RULE_edgeTypeLabelSetDef = 307;
GqlParser.RULE_edgeTypePropertyTypeSetDef = 308;
GqlParser.RULE_fullEdgeTypePattern = 309;
GqlParser.RULE_fullEdgeTypePatternPointingRight = 310;
GqlParser.RULE_fullEdgeTypePatternPointingLeft = 311;
GqlParser.RULE_fullEdgeTypePatternUndirected = 312;
GqlParser.RULE_arcTypePointingRight = 313;
GqlParser.RULE_arcTypePointingLeft = 314;
GqlParser.RULE_arcTypeUndirected = 315;
GqlParser.RULE_arcTypeFiller = 316;
GqlParser.RULE_abbreviatedEdgeTypePattern = 317;
GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight = 318;
GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft = 319;
GqlParser.RULE_abbreviatedEdgeTypePatternUndirected = 320;
GqlParser.RULE_nodeTypeRef = 321;
GqlParser.RULE_sourceNodeTypeRef = 322;
GqlParser.RULE_destinationNodeTypeRef = 323;
GqlParser.RULE_edgeKind = 324;
GqlParser.RULE_endpointDef = 325;
GqlParser.RULE_enpointPairDef = 326;
GqlParser.RULE_endpointPairDefPointingRight = 327;
GqlParser.RULE_endpointPairDefPointingLeft = 328;
GqlParser.RULE_endpointPairDefUndirected = 329;
GqlParser.RULE_connectorPointingRight = 330;
GqlParser.RULE_connectorPointingLeft = 331;
GqlParser.RULE_connectorUndirected = 332;
GqlParser.RULE_sourceNodeTypeName = 333;
GqlParser.RULE_destinationNodeTypeName = 334;
GqlParser.RULE_labelSetDef = 335;
GqlParser.RULE_propertyTypeSetDef = 336;
GqlParser.RULE_propertyTypeDefList = 337;
GqlParser.RULE_propertyTypeDef = 338;
GqlParser.RULE_propertyValueType = 339;
GqlParser.RULE_bindingTableType = 340;
GqlParser.RULE_valueType = 341;
GqlParser.RULE_typed = 342;
GqlParser.RULE_predefinedType = 343;
GqlParser.RULE_booleanType = 344;
GqlParser.RULE_charStringType = 345;
GqlParser.RULE_byteStringType = 346;
GqlParser.RULE_minLength = 347;
GqlParser.RULE_maxLength = 348;
GqlParser.RULE_fixedLength = 349;
GqlParser.RULE_numericType = 350;
GqlParser.RULE_exactNumericType = 351;
GqlParser.RULE_binaryExactNumericType = 352;
GqlParser.RULE_signedBinaryExactNumericType = 353;
GqlParser.RULE_unsignedBinaryExactNumericType = 354;
GqlParser.RULE_verboseBinaryExactNumericType = 355;
GqlParser.RULE_decimalExactNumericType = 356;
GqlParser.RULE_precision = 357;
GqlParser.RULE_scale = 358;
GqlParser.RULE_approximateNumericType = 359;
GqlParser.RULE_temporalType = 360;
GqlParser.RULE_temporalInstantType = 361;
GqlParser.RULE_temporalDurationType = 362;
GqlParser.RULE_dateTimeType = 363;
GqlParser.RULE_localDateTimeType = 364;
GqlParser.RULE_dateType = 365;
GqlParser.RULE_timeType = 366;
GqlParser.RULE_localTimeType = 367;
GqlParser.RULE_durationType = 368;
GqlParser.RULE_refValueType = 369;
GqlParser.RULE_graphRefValueType = 370;
GqlParser.RULE_openGraphRefValueType = 371;
GqlParser.RULE_closedGraphRefValueType = 372;
GqlParser.RULE_bindingTableRefValueType = 373;
GqlParser.RULE_nodeRefValueType = 374;
GqlParser.RULE_openNodeRefValueType = 375;
GqlParser.RULE_closedNodeRefValueType = 376;
GqlParser.RULE_edgeRefValueType = 377;
GqlParser.RULE_openEdgeRefValueType = 378;
GqlParser.RULE_closedEdgeRefValueType = 379;
GqlParser.RULE_constructedType = 380;
GqlParser.RULE_listValueType = 381;
GqlParser.RULE_listValueTypeName = 382;
GqlParser.RULE_listValueTypeNameSynonym = 383;
GqlParser.RULE_recordType = 384;
GqlParser.RULE_fieldTypesSpec = 385;
GqlParser.RULE_fieldTypeList = 386;
GqlParser.RULE_dynamicUnionType = 387;
GqlParser.RULE_openDynamicUnionType = 388;
GqlParser.RULE_dynamicPropertyValueType = 389;
GqlParser.RULE_closedDynamicUnionType = 390;
GqlParser.RULE_componentTypeList = 391;
GqlParser.RULE_componentType = 392;
GqlParser.RULE_pathValueType = 393;
GqlParser.RULE_notNull = 394;
GqlParser.RULE_fieldType = 395;
GqlParser.RULE_schemaRef = 396;
GqlParser.RULE_absoluteCatalogSchemaRef = 397;
GqlParser.RULE_catalogSchemaParentAndName = 398;
GqlParser.RULE_relativeCatalogSchemaRef = 399;
GqlParser.RULE_predefinedSchemaRef = 400;
GqlParser.RULE_absoluteDirectoryPath = 401;
GqlParser.RULE_relativeDirectoryPath = 402;
GqlParser.RULE_simpleDirectoryPath = 403;
GqlParser.RULE_graphRef = 404;
GqlParser.RULE_catalogGraphParentAndName = 405;
GqlParser.RULE_homeGraph = 406;
GqlParser.RULE_graphTypeRef = 407;
GqlParser.RULE_catalogGraphTypeParentAndName = 408;
GqlParser.RULE_bindingTableRef = 409;
GqlParser.RULE_catalogBindingTableParentAndName = 410;
GqlParser.RULE_procedureRef = 411;
GqlParser.RULE_catalogProcedureParentAndName = 412;
GqlParser.RULE_catalogObjectParentRef = 413;
GqlParser.RULE_refParameter = 414;
GqlParser.RULE_externalObjectRef = 415;
GqlParser.RULE_searchCondition = 416;
GqlParser.RULE_predicate = 417;
GqlParser.RULE_comparisonPredicate = 418;
GqlParser.RULE_comparisonPredicatePart2 = 419;
GqlParser.RULE_comparisonOperator = 420;
GqlParser.RULE_comparisonPredicand = 421;
GqlParser.RULE_existsPredicate = 422;
GqlParser.RULE_nullPredicate = 423;
GqlParser.RULE_nullPredicatePart2 = 424;
GqlParser.RULE_valueTypePredicate = 425;
GqlParser.RULE_valueTypePredicatePart2 = 426;
GqlParser.RULE_normalizedPredicate = 427;
GqlParser.RULE_normalizedPredicatePart2 = 428;
GqlParser.RULE_directedPredicate = 429;
GqlParser.RULE_directedPredicatePart2 = 430;
GqlParser.RULE_labeledPredicate = 431;
GqlParser.RULE_labeledPredicatePart2 = 432;
GqlParser.RULE_isLabeledOrColon = 433;
GqlParser.RULE_sourceOrDestinationPredicate = 434;
GqlParser.RULE_nodeRef = 435;
GqlParser.RULE_sourcePredicatePart2 = 436;
GqlParser.RULE_destinationPredicatePart2 = 437;
GqlParser.RULE_edgeRef = 438;
GqlParser.RULE_allDifferentPredicate = 439;
GqlParser.RULE_samePredicate = 440;
GqlParser.RULE_propertyExistsPredicate = 441;
GqlParser.RULE_valueSpec = 442;
GqlParser.RULE_unsignedValueSpec = 443;
GqlParser.RULE_unsignedIntSpec = 444;
GqlParser.RULE_parameterValueSpec = 445;
GqlParser.RULE_predefinedParameter = 446;
GqlParser.RULE_valueExpr = 447;
GqlParser.RULE_commonValueExpr = 448;
GqlParser.RULE_refValueExpr = 449;
GqlParser.RULE_graphRefValueExpr = 450;
GqlParser.RULE_bindingTableRefValueExpr = 451;
GqlParser.RULE_nodeRefValueExpr = 452;
GqlParser.RULE_edgeRefValueExpr = 453;
GqlParser.RULE_recordValueExpr = 454;
GqlParser.RULE_aggregatingValueExpr = 455;
GqlParser.RULE_booleanValueExpr = 456;
GqlParser.RULE_booleanTerm = 457;
GqlParser.RULE_booleanFactor = 458;
GqlParser.RULE_booleanTest = 459;
GqlParser.RULE_truthValue = 460;
GqlParser.RULE_booleanPrimary = 461;
GqlParser.RULE_booleanPredicand = 462;
GqlParser.RULE_paranthisedBooleanValueExpr = 463;
GqlParser.RULE_numericValueExpr = 464;
GqlParser.RULE_term = 465;
GqlParser.RULE_factor = 466;
GqlParser.RULE_numericPrimary = 467;
GqlParser.RULE_valueExprPrimary = 468;
GqlParser.RULE_parenthesizedValueExpr = 469;
GqlParser.RULE_nonParenthesizedValueExprPrimary = 470;
GqlParser.RULE_nonParenthesizedValueExprPrimarySpecialCase = 471;
GqlParser.RULE_collectionValueConstructor = 472;
GqlParser.RULE_numericValueFunction = 473;
GqlParser.RULE_lengthExpr = 474;
GqlParser.RULE_charLengthExpr = 475;
GqlParser.RULE_byteLengthExpr = 476;
GqlParser.RULE_pathLengthExpr = 477;
GqlParser.RULE_absoluteValueExpr = 478;
GqlParser.RULE_modulusExpr = 479;
GqlParser.RULE_numericValueExprDividen = 480;
GqlParser.RULE_numericValueExprDivisor = 481;
GqlParser.RULE_trigonometricFunction = 482;
GqlParser.RULE_trigonometricFunctionName = 483;
GqlParser.RULE_logarithmFunction = 484;
GqlParser.RULE_generalLogarithmFunction = 485;
GqlParser.RULE_generalLogarithmBase = 486;
GqlParser.RULE_generalLogarithmArgument = 487;
GqlParser.RULE_commonLogarithmFunction = 488;
GqlParser.RULE_naturalLogarithmFunction = 489;
GqlParser.RULE_exponentialFunction = 490;
GqlParser.RULE_powerFunction = 491;
GqlParser.RULE_numericValueExprBase = 492;
GqlParser.RULE_numericValueExprExponent = 493;
GqlParser.RULE_squareRootFunciton = 494;
GqlParser.RULE_floorFunction = 495;
GqlParser.RULE_ceilingFunction = 496;
GqlParser.RULE_stringValueExpr = 497;
GqlParser.RULE_charStringValueExpr = 498;
GqlParser.RULE_charStringConcatenation = 499;
GqlParser.RULE_charStringFactor = 500;
GqlParser.RULE_charStringPrimary = 501;
GqlParser.RULE_byteStringValueExpr = 502;
GqlParser.RULE_byteStringFactor = 503;
GqlParser.RULE_byteStringPrimary = 504;
GqlParser.RULE_byteStringConcatenation = 505;
GqlParser.RULE_stringValueFunction = 506;
GqlParser.RULE_charStringFunction = 507;
GqlParser.RULE_foldFunction = 508;
GqlParser.RULE_trimFunction = 509;
GqlParser.RULE_singleCharTrimFunction = 510;
GqlParser.RULE_multiCharTrimFunction = 511;
GqlParser.RULE_trimOperands = 512;
GqlParser.RULE_trimSource = 513;
GqlParser.RULE_trimSpec = 514;
GqlParser.RULE_trimCharString = 515;
GqlParser.RULE_normalizeFunction = 516;
GqlParser.RULE_normalForm = 517;
GqlParser.RULE_byteStringFunction = 518;
GqlParser.RULE_byteStrinTrimFunction = 519;
GqlParser.RULE_byteStringTrimOperands = 520;
GqlParser.RULE_byteStringTrimSource = 521;
GqlParser.RULE_trimByteString = 522;
GqlParser.RULE_stringLength = 523;
GqlParser.RULE_dateTimeValueExpr = 524;
GqlParser.RULE_dateTimeTerm = 525;
GqlParser.RULE_dateTimeFactor = 526;
GqlParser.RULE_dateTimePrimary = 527;
GqlParser.RULE_dateTimeValueFunction = 528;
GqlParser.RULE_dateFunction = 529;
GqlParser.RULE_timeFunction = 530;
GqlParser.RULE_localTimeFunction = 531;
GqlParser.RULE_dateTimeFunction = 532;
GqlParser.RULE_localDatetimeFunction = 533;
GqlParser.RULE_dateFunctionParameters = 534;
GqlParser.RULE_timeFunctionParameters = 535;
GqlParser.RULE_dateTimeFunctionParameters = 536;
GqlParser.RULE_durationValueExpr = 537;
GqlParser.RULE_dateTimeSubtraction = 538;
GqlParser.RULE_dateTimeSubtractionParameters = 539;
GqlParser.RULE_durationTerm = 540;
GqlParser.RULE_durationFactor = 541;
GqlParser.RULE_durationPrimary = 542;
GqlParser.RULE_durationValueExpr1 = 543;
GqlParser.RULE_durationTerm1 = 544;
GqlParser.RULE_durationTerm2 = 545;
GqlParser.RULE_dateTimeValueExpr1 = 546;
GqlParser.RULE_dateTimeValueExpr2 = 547;
GqlParser.RULE_durationValueFunction = 548;
GqlParser.RULE_durationFunction = 549;
GqlParser.RULE_durationFunctionParameters = 550;
GqlParser.RULE_durationAbsoluteValueFunction = 551;
GqlParser.RULE_listValueExpr = 552;
GqlParser.RULE_listConcatenation = 553;
GqlParser.RULE_listPrimary = 554;
GqlParser.RULE_listValueFunction = 555;
GqlParser.RULE_trimListFunction = 556;
GqlParser.RULE_elementsFunction = 557;
GqlParser.RULE_listValueConstructor = 558;
GqlParser.RULE_listValueConstructorByEnumeration = 559;
GqlParser.RULE_listElementList = 560;
GqlParser.RULE_listElement = 561;
GqlParser.RULE_recordValueConstructor = 562;
GqlParser.RULE_fieldsSpec = 563;
GqlParser.RULE_fieldList = 564;
GqlParser.RULE_field = 565;
GqlParser.RULE_pathValueExpr = 566;
GqlParser.RULE_pathValueConcatenation = 567;
GqlParser.RULE_pathValuePrimary = 568;
GqlParser.RULE_pathValueConstructor = 569;
GqlParser.RULE_pathValueConstructorByEnumeration = 570;
GqlParser.RULE_pathElementList = 571;
GqlParser.RULE_pathElementListStart = 572;
GqlParser.RULE_pathElementListStep = 573;
GqlParser.RULE_propertyRef = 574;
GqlParser.RULE_propertySource = 575;
GqlParser.RULE_valueQueryExpr = 576;
GqlParser.RULE_caseExpr = 577;
GqlParser.RULE_caseAbbreviation = 578;
GqlParser.RULE_caseSpecification = 579;
GqlParser.RULE_simpleCase = 580;
GqlParser.RULE_searchedCase = 581;
GqlParser.RULE_simpleWhenClause = 582;
GqlParser.RULE_searchedWhenClause = 583;
GqlParser.RULE_elseClause = 584;
GqlParser.RULE_caseOperand = 585;
GqlParser.RULE_whenOperandList = 586;
GqlParser.RULE_whenOperand = 587;
GqlParser.RULE_result = 588;
GqlParser.RULE_resultExpr = 589;
GqlParser.RULE_castSpec = 590;
GqlParser.RULE_castOperand = 591;
GqlParser.RULE_castTarget = 592;
GqlParser.RULE_elementIdFunction = 593;
GqlParser.RULE_letValueExpr = 594;
GqlParser.RULE_literal = 595;
GqlParser.RULE_generalLiteral = 596;
GqlParser.RULE_predefinedTypeLiteral = 597;
GqlParser.RULE_unsignedLiteral = 598;
GqlParser.RULE_booleanLiteral = 599;
GqlParser.RULE_characterStringLiteral = 600;
GqlParser.RULE_unbrokenCharacterStringLiteral = 601;
GqlParser.RULE_singleQuotedCharacterSequence = 602;
GqlParser.RULE_doubleQuotedCharacterSequence = 603;
GqlParser.RULE_accentQuotedCharacterSequence = 604;
GqlParser.RULE_noEscape = 605;
GqlParser.RULE_unbrokenSingleQuotedCharacterSequence = 606;
GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence = 607;
GqlParser.RULE_unbrokenAccentQuotedCharacterSequence = 608;
GqlParser.RULE_temporalLiteral = 609;
GqlParser.RULE_dateLiteral = 610;
GqlParser.RULE_timeLiteral = 611;
GqlParser.RULE_dateTimeLiteral = 612;
GqlParser.RULE_dateString = 613;
GqlParser.RULE_timeString = 614;
GqlParser.RULE_dateTimeString = 615;
GqlParser.RULE_sqlDateTimeLiteral = 616;
GqlParser.RULE_durationLiteral = 617;
GqlParser.RULE_durationString = 618;
GqlParser.RULE_sqlIntervalLiteral = 619;
GqlParser.RULE_sqlIntervalType = 620;
GqlParser.RULE_nullLiteral = 621;
GqlParser.RULE_listLiteral = 622;
GqlParser.RULE_recordLiteral = 623;
GqlParser.RULE_objectName = 624;
GqlParser.RULE_objectNameOrBindingVar = 625;
GqlParser.RULE_directoryName = 626;
GqlParser.RULE_schemaName = 627;
GqlParser.RULE_graphName = 628;
GqlParser.RULE_delimitedGraphName = 629;
GqlParser.RULE_graphTypeName = 630;
GqlParser.RULE_elementTypeName = 631;
GqlParser.RULE_bindingTableName = 632;
GqlParser.RULE_delimitedBindingTableName = 633;
GqlParser.RULE_procedureName = 634;
GqlParser.RULE_labelName = 635;
GqlParser.RULE_propertyName = 636;
GqlParser.RULE_fieldName = 637;
GqlParser.RULE_parameterName = 638;
GqlParser.RULE_var = 639;
GqlParser.RULE_graphVar = 640;
GqlParser.RULE_graphPatternVar = 641;
GqlParser.RULE_pathOrSubpathVar = 642;
GqlParser.RULE_elementVar = 643;
GqlParser.RULE_pathVar = 644;
GqlParser.RULE_subpathVar = 645;
GqlParser.RULE_bindingTableVar = 646;
GqlParser.RULE_valueVar = 647;
GqlParser.RULE_bindingVar = 648;
GqlParser.RULE_token = 649;
GqlParser.RULE_nonDelimiterToken = 650;
GqlParser.RULE_identifier = 651;
GqlParser.RULE_separatedIdentifier = 652;
GqlParser.RULE_nonDelimitedIdentifier = 653;
GqlParser.RULE_delimitedIdentifier = 654;
GqlParser.RULE_keyWord = 655;
GqlParser.RULE_reservedWord = 656;
GqlParser.RULE_preReservedWord = 657;
GqlParser.RULE_nonReservedWord = 658;
GqlParser.RULE_delimiterToken = 659;
GqlParser.RULE_bidirectionalControlCharacter = 660;
GqlParser.RULE_comment = 661;
GqlParser.RULE_edgeSynonym = 662;
GqlParser.RULE_edgesSynonym = 663;
GqlParser.RULE_nodeSynonym = 664;

class GqlProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_gqlProgram;
    }

	EOF() {
	    return this.getToken(GqlParser.EOF, 0);
	};

	activity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActivityContext);
	    } else {
	        return this.getTypedRuleContext(ActivityContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SEMICOLON);
	    } else {
	        return this.getToken(GqlParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGqlProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGqlProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGqlProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_activity;
    }

	programActivity() {
	    return this.getTypedRuleContext(ProgramActivityContext,0);
	};

	sessionCloseCommand() {
	    return this.getTypedRuleContext(SessionCloseCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitActivity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitActivity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProgramActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_programActivity;
    }

	sessionActivity() {
	    return this.getTypedRuleContext(SessionActivityContext,0);
	};

	transactionActivity() {
	    return this.getTypedRuleContext(TransactionActivityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProgramActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProgramActivity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProgramActivity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionActivity;
    }

	sessionSetCommand() {
	    return this.getTypedRuleContext(SessionSetCommandContext,0);
	};

	sessionResetCommand() {
	    return this.getTypedRuleContext(SessionResetCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionActivity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionActivity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetCommand;
    }

	SESSION() {
	    return this.getToken(GqlParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	sessionSetSchemaClause() {
	    return this.getTypedRuleContext(SessionSetSchemaClauseContext,0);
	};

	sessionSetGraphClause() {
	    return this.getTypedRuleContext(SessionSetGraphClauseContext,0);
	};

	sessionSetTimeZoneClause() {
	    return this.getTypedRuleContext(SessionSetTimeZoneClauseContext,0);
	};

	sessionSetParameterClause() {
	    return this.getTypedRuleContext(SessionSetParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetCommand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetSchemaClause;
    }

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetSchemaClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetSchemaClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetGraphClause;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetGraphClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetGraphClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetTimeZoneClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetTimeZoneClause;
    }

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GqlParser.ZONE, 0);
	};

	setTimeZoneValue() {
	    return this.getTypedRuleContext(SetTimeZoneValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetTimeZoneClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetTimeZoneClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetTimeZoneClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetTimeZoneValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setTimeZoneValue;
    }

	stringValueExpr() {
	    return this.getTypedRuleContext(StringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetTimeZoneValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetTimeZoneValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetTimeZoneValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetParameterClause;
    }

	sessionSetGraphParameterClause() {
	    return this.getTypedRuleContext(SessionSetGraphParameterClauseContext,0);
	};

	sessionSetBindingTableParameterCalues() {
	    return this.getTypedRuleContext(SessionSetBindingTableParameterCaluesContext,0);
	};

	sessionSetValuesParameterClause() {
	    return this.getTypedRuleContext(SessionSetValuesParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetParameterClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetParameterClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetGraphParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetGraphParameterClause;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedGraphInit() {
	    return this.getTypedRuleContext(OptTypedGraphInitContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetGraphParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetGraphParameterClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetGraphParameterClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetBindingTableParameterCaluesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetBindingTableParameterCalues;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedBindingTableInit() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetBindingTableParameterCalues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetBindingTableParameterCalues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetBindingTableParameterCalues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetValuesParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetValuesParameterClause;
    }

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedValueInit() {
	    return this.getTypedRuleContext(OptTypedValueInitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetValuesParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetValuesParameterClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetValuesParameterClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionSetParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionSetParameterName;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionSetParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionSetParameterName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionSetParameterName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionResetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionResetCommand;
    }

	RESET() {
	    return this.getToken(GqlParser.RESET, 0);
	};

	sessionResetArguments() {
	    return this.getTypedRuleContext(SessionResetArgumentsContext,0);
	};

	SESSION() {
	    return this.getToken(GqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionResetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionResetCommand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionResetCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionResetArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionResetArguments;
    }

	PARAMETERS() {
	    return this.getToken(GqlParser.PARAMETERS, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(GqlParser.CHARACTERISTICS, 0);
	};

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GqlParser.ZONE, 0);
	};

	PARAMETER() {
	    return this.getToken(GqlParser.PARAMETER, 0);
	};

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionResetArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionResetArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionResetArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SessionCloseCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sessionCloseCommand;
    }

	CLOSE() {
	    return this.getToken(GqlParser.CLOSE, 0);
	};

	SESSION() {
	    return this.getToken(GqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSessionCloseCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSessionCloseCommand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSessionCloseCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionActivity;
    }

	transactionStartCommand() {
	    return this.getTypedRuleContext(TransactionStartCommandContext,0);
	};

	procedureSpec() {
	    return this.getTypedRuleContext(ProcedureSpecContext,0);
	};

	transactionEndCommand() {
	    return this.getTypedRuleContext(TransactionEndCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionActivity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTransactionActivity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionStartCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionStartCommand;
    }

	START() {
	    return this.getToken(GqlParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(GqlParser.TRANSACTION, 0);
	};

	transactionCharacteristics() {
	    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionStartCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionStartCommand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTransactionStartCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionEndCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionEndCommand;
    }

	ROLLBACK() {
	    return this.getToken(GqlParser.ROLLBACK, 0);
	};

	COMMIT() {
	    return this.getToken(GqlParser.COMMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionEndCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionEndCommand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTransactionEndCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionCharacteristics;
    }

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionCharacteristics(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTransactionCharacteristics(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionMode;
    }

	transactionAccessMode() {
	    return this.getTypedRuleContext(TransactionAccessModeContext,0);
	};

	implDefinedAccessMode() {
	    return this.getTypedRuleContext(ImplDefinedAccessModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTransactionMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_transactionAccessMode;
    }

	READ() {
	    return this.getToken(GqlParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(GqlParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(GqlParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTransactionAccessMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImplDefinedAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_implDefinedAccessMode;
    }


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterImplDefinedAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitImplDefinedAccessMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitImplDefinedAccessMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedProcedureSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	procedureSpec() {
	    return this.getTypedRuleContext(ProcedureSpecContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedProcedureSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNestedProcedureSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureSpec;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProcedureSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedDataModProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedDataModProcedureSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedDataModProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedDataModProcedureSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNestedDataModProcedureSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedQuerySpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedQuerySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNestedQuerySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureBody;
    }

	statmentBlock() {
	    return this.getTypedRuleContext(StatmentBlockContext,0);
	};

	atSchemaClause() {
	    return this.getTypedRuleContext(AtSchemaClauseContext,0);
	};

	bindingVarDefBlock() {
	    return this.getTypedRuleContext(BindingVarDefBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProcedureBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingVarDefBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVarDefBlock;
    }

	bindingVarDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVarDefContext);
	    } else {
	        return this.getTypedRuleContext(BindingVarDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVarDefBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVarDefBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingVarDefBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVarDef;
    }

	graphVarDef() {
	    return this.getTypedRuleContext(GraphVarDefContext,0);
	};

	bindingTableVarDef() {
	    return this.getTypedRuleContext(BindingTableVarDefContext,0);
	};

	valueVarDef() {
	    return this.getTypedRuleContext(ValueVarDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVarDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingVarDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatmentBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_statmentBlock;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	nextStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NextStatmentContext);
	    } else {
	        return this.getTypedRuleContext(NextStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStatmentBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStatmentBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitStatmentBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_statement;
    }

	linearCatalogModStatment() {
	    return this.getTypedRuleContext(LinearCatalogModStatmentContext,0);
	};

	linearDataModStatment() {
	    return this.getTypedRuleContext(LinearDataModStatmentContext,0);
	};

	compositeQueryStatment() {
	    return this.getTypedRuleContext(CompositeQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NextStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nextStatment;
    }

	NEXT() {
	    return this.getToken(GqlParser.NEXT, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNextStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNextStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNextStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphVarDef;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	graphVar() {
	    return this.getTypedRuleContext(GraphVarContext,0);
	};

	optTypedGraphInit() {
	    return this.getTypedRuleContext(OptTypedGraphInitContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphVarDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphVarDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptTypedGraphInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_optTypedGraphInit;
    }

	graphInit() {
	    return this.getTypedRuleContext(GraphInitContext,0);
	};

	graphRefValueType() {
	    return this.getTypedRuleContext(GraphRefValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOptTypedGraphInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOptTypedGraphInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOptTypedGraphInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphInit;
    }

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableVarDef;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	bindingTableVar() {
	    return this.getTypedRuleContext(BindingTableVarContext,0);
	};

	optTypedBindingTableInit() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableVarDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableVarDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptTypedBindingTableInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_optTypedBindingTableInit;
    }

	bindingTableInit() {
	    return this.getTypedRuleContext(BindingTableInitContext,0);
	};

	bindingTableRefValueType() {
	    return this.getTypedRuleContext(BindingTableRefValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOptTypedBindingTableInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOptTypedBindingTableInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOptTypedBindingTableInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableInit;
    }

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	bindingTableExpr() {
	    return this.getTypedRuleContext(BindingTableExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueVarDef;
    }

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	valueVar() {
	    return this.getTypedRuleContext(ValueVarContext,0);
	};

	optTypedValueInit() {
	    return this.getTypedRuleContext(OptTypedValueInitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueVarDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueVarDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptTypedValueInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_optTypedValueInit;
    }

	valueInit() {
	    return this.getTypedRuleContext(ValueInitContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOptTypedValueInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOptTypedValueInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOptTypedValueInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueInit;
    }

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphExpr;
    }

	nestedGraphQuerySpec() {
	    return this.getTypedRuleContext(NestedGraphQuerySpecContext,0);
	};

	objectExprPrimary() {
	    return this.getTypedRuleContext(ObjectExprPrimaryContext,0);
	};

	graphRef() {
	    return this.getTypedRuleContext(GraphRefContext,0);
	};

	objectNameOrBindingVar() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVarContext,0);
	};

	currentGraph() {
	    return this.getTypedRuleContext(CurrentGraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CurrentGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_currentGraph;
    }

	CURRENT_PROPERTY_GRAPH() {
	    return this.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0);
	};

	CURRENT_GRAPH() {
	    return this.getToken(GqlParser.CURRENT_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCurrentGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCurrentGraph(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCurrentGraph(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedGraphQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedGraphQuerySpec;
    }

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedGraphQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedGraphQuerySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNestedGraphQuerySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableExpr;
    }

	nestedBindingTableQuerySpec() {
	    return this.getTypedRuleContext(NestedBindingTableQuerySpecContext,0);
	};

	objectExprPrimary() {
	    return this.getTypedRuleContext(ObjectExprPrimaryContext,0);
	};

	bindingTableRef() {
	    return this.getTypedRuleContext(BindingTableRefContext,0);
	};

	objectNameOrBindingVar() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedBindingTableQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedBindingTableQuerySpec;
    }

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedBindingTableQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedBindingTableQuerySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNestedBindingTableQuerySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectExprPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_objectExprPrimary;
    }

	VARIABLE() {
	    return this.getToken(GqlParser.VARIABLE, 0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	parenthesizedValueExpr() {
	    return this.getTypedRuleContext(ParenthesizedValueExprContext,0);
	};

	propertyRef() {
	    return this.getTypedRuleContext(PropertyRefContext,0);
	};

	unsignedValueSpec() {
	    return this.getTypedRuleContext(UnsignedValueSpecContext,0);
	};

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	collectionValueConstructor() {
	    return this.getTypedRuleContext(CollectionValueConstructorContext,0);
	};

	valueQueryExpr() {
	    return this.getTypedRuleContext(ValueQueryExprContext,0);
	};

	caseExpr() {
	    return this.getTypedRuleContext(CaseExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterObjectExprPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitObjectExprPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitObjectExprPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinearCatalogModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_linearCatalogModStatment;
    }

	simpleCatalogModStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleCatalogModStatmentContext);
	    } else {
	        return this.getTypedRuleContext(SimpleCatalogModStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLinearCatalogModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLinearCatalogModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLinearCatalogModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleCatalogModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleCatalogModStatment;
    }

	primitiveCatalogModStatment() {
	    return this.getTypedRuleContext(PrimitiveCatalogModStatmentContext,0);
	};

	callCatalogModProcedureStatment() {
	    return this.getTypedRuleContext(CallCatalogModProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleCatalogModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleCatalogModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleCatalogModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveCatalogModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveCatalogModStatment;
    }

	createSchemeStatment() {
	    return this.getTypedRuleContext(CreateSchemeStatmentContext,0);
	};

	createGraphStatment() {
	    return this.getTypedRuleContext(CreateGraphStatmentContext,0);
	};

	createGraphTypeStatment() {
	    return this.getTypedRuleContext(CreateGraphTypeStatmentContext,0);
	};

	dropSchemeStatment() {
	    return this.getTypedRuleContext(DropSchemeStatmentContext,0);
	};

	dropGraphStatment() {
	    return this.getTypedRuleContext(DropGraphStatmentContext,0);
	};

	dropGraphTypeStatment() {
	    return this.getTypedRuleContext(DropGraphTypeStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveCatalogModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveCatalogModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPrimitiveCatalogModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateSchemeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createSchemeStatment;
    }

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateSchemeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateSchemeStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCreateSchemeStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropSchemeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropSchemeStatment;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropSchemeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropSchemeStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDropSchemeStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createGraphStatment;
    }

	createOnlyGraphStatment() {
	    return this.getTypedRuleContext(CreateOnlyGraphStatmentContext,0);
	};

	createOrReplaceGraphStatment() {
	    return this.getTypedRuleContext(CreateOrReplaceGraphStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateGraphStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCreateGraphStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateOnlyGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createOnlyGraphStatment;
    }

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	openGraphType() {
	    return this.getTypedRuleContext(OpenGraphTypeContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	graphSource() {
	    return this.getTypedRuleContext(GraphSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateOnlyGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateOnlyGraphStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCreateOnlyGraphStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateOrReplaceGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createOrReplaceGraphStatment;
    }

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	openGraphType() {
	    return this.getTypedRuleContext(OpenGraphTypeContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	graphSource() {
	    return this.getTypedRuleContext(GraphSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateOrReplaceGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateOrReplaceGraphStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCreateOrReplaceGraphStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_openGraphType;
    }

	OPEN() {
	    return this.getToken(GqlParser.OPEN, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOpenGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOpenGraphType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOpenGraphType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ofGraphType;
    }

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	graphTypeRef() {
	    return this.getTypedRuleContext(GraphTypeRefContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	nestedGraphTypeSpec() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOfGraphType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOfGraphType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphTypeLikeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeLikeGraph;
    }

	LIKE() {
	    return this.getToken(GqlParser.LIKE, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeLikeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeLikeGraph(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphTypeLikeGraph(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphSource;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	COPY() {
	    return this.getToken(GqlParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropGraphStatment;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropGraphStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDropGraphStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateGraphTypeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_createGraphTypeStatment;
    }

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	graphTypeSource() {
	    return this.getTypedRuleContext(GraphTypeSourceContext,0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCreateGraphTypeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCreateGraphTypeStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCreateGraphTypeStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphTypeSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeSource;
    }

	copyOfGraphType() {
	    return this.getTypedRuleContext(CopyOfGraphTypeContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	nestedGraphTypeSpec() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphTypeSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CopyOfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_copyOfGraphType;
    }

	COPY() {
	    return this.getToken(GqlParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	graphTypeRef() {
	    return this.getTypedRuleContext(GraphTypeRefContext,0);
	};

	externalObjectRef() {
	    return this.getTypedRuleContext(ExternalObjectRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCopyOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCopyOfGraphType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCopyOfGraphType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropGraphTypeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dropGraphTypeStatment;
    }

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	IF_EXISTS() {
	    return this.getToken(GqlParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDropGraphTypeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDropGraphTypeStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDropGraphTypeStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallCatalogModProcedureStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callCatalogModProcedureStatment;
    }

	callProcedureStatment() {
	    return this.getTypedRuleContext(CallProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallCatalogModProcedureStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallCatalogModProcedureStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCallCatalogModProcedureStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinearDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_linearDataModStatment;
    }

	focusedLinearDataModStatment() {
	    return this.getTypedRuleContext(FocusedLinearDataModStatmentContext,0);
	};

	ambientLinearDataModStatment() {
	    return this.getTypedRuleContext(AmbientLinearDataModStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLinearDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLinearDataModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLinearDataModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedLinearDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearDataModStatment;
    }

	focusedLinearDataModStatmentBody() {
	    return this.getTypedRuleContext(FocusedLinearDataModStatmentBodyContext,0);
	};

	focusedNestedDataModProcedureSpec() {
	    return this.getTypedRuleContext(FocusedNestedDataModProcedureSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearDataModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedLinearDataModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedLinearDataModStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearDataModStatmentBody;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearDataAccessingStatment() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearDataModStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearDataModStatmentBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedLinearDataModStatmentBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedNestedDataModProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedNestedDataModProcedureSpec;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedDataModProcedureSpec() {
	    return this.getTypedRuleContext(NestedDataModProcedureSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedNestedDataModProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedNestedDataModProcedureSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedNestedDataModProcedureSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AmbientLinearDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ambientLinearDataModStatment;
    }

	ambientLinearDataModStatmentBody() {
	    return this.getTypedRuleContext(AmbientLinearDataModStatmentBodyContext,0);
	};

	nestedDataModProcedureSpec() {
	    return this.getTypedRuleContext(NestedDataModProcedureSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAmbientLinearDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAmbientLinearDataModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAmbientLinearDataModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AmbientLinearDataModStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ambientLinearDataModStatmentBody;
    }

	simpleLinearDataAccessingStatment() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAmbientLinearDataModStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAmbientLinearDataModStatmentBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAmbientLinearDataModStatmentBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleLinearDataAccessingStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleLinearDataAccessingStatment;
    }

	simpleDataAccessingStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleDataAccessingStatmentContext);
	    } else {
	        return this.getTypedRuleContext(SimpleDataAccessingStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleLinearDataAccessingStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleLinearDataAccessingStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleLinearDataAccessingStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleDataAccessingStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleDataAccessingStatment;
    }

	simpleQueryStatment() {
	    return this.getTypedRuleContext(SimpleQueryStatmentContext,0);
	};

	simpleDataModStatment() {
	    return this.getTypedRuleContext(SimpleDataModStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleDataAccessingStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleDataAccessingStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleDataAccessingStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleDataModStatment;
    }

	primitiveDataModStatment() {
	    return this.getTypedRuleContext(PrimitiveDataModStatmentContext,0);
	};

	callDataModProcedureStatment() {
	    return this.getTypedRuleContext(CallDataModProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleDataModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleDataModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveDataModStatment;
    }

	insertStatment() {
	    return this.getTypedRuleContext(InsertStatmentContext,0);
	};

	setStatment() {
	    return this.getTypedRuleContext(SetStatmentContext,0);
	};

	removeStatment() {
	    return this.getTypedRuleContext(RemoveStatmentContext,0);
	};

	deleteStatment() {
	    return this.getTypedRuleContext(DeleteStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveDataModStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPrimitiveDataModStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertStatment;
    }

	INSERT() {
	    return this.getToken(GqlParser.INSERT, 0);
	};

	insertGraphPattern() {
	    return this.getTypedRuleContext(InsertGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setStatment;
    }

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	setItemList() {
	    return this.getTypedRuleContext(SetItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setItemList;
    }

	setItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetItemContext);
	    } else {
	        return this.getTypedRuleContext(SetItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setItem;
    }

	setPropertyItem() {
	    return this.getTypedRuleContext(SetPropertyItemContext,0);
	};

	setAllPropertiesItem() {
	    return this.getTypedRuleContext(SetAllPropertiesItemContext,0);
	};

	setLabelItem() {
	    return this.getTypedRuleContext(SetLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetPropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setPropertyItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetPropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetPropertyItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetPropertyItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetAllPropertiesItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setAllPropertiesItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetAllPropertiesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetAllPropertiesItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetAllPropertiesItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setLabelItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetLabelItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetLabelItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelSetSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelSetSpec;
    }

	labelName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelNameContext);
	    } else {
	        return this.getTypedRuleContext(LabelNameContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.AMPERSAND);
	    } else {
	        return this.getToken(GqlParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelSetSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelSetSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelSetSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeStatment;
    }

	REMOVE() {
	    return this.getToken(GqlParser.REMOVE, 0);
	};

	removeItemList() {
	    return this.getTypedRuleContext(RemoveItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRemoveStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeItemList;
    }

	removeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(RemoveItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRemoveItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeItem;
    }

	removePropertyItem() {
	    return this.getTypedRuleContext(RemovePropertyItemContext,0);
	};

	removeLabelItem() {
	    return this.getTypedRuleContext(RemoveLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRemoveItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemovePropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removePropertyItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemovePropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemovePropertyItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRemovePropertyItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_removeLabelItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRemoveLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRemoveLabelItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRemoveLabelItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_deleteStatment;
    }

	DELETE() {
	    return this.getToken(GqlParser.DELETE, 0);
	};

	deleteItemList() {
	    return this.getTypedRuleContext(DeleteItemListContext,0);
	};

	DETACH() {
	    return this.getToken(GqlParser.DETACH, 0);
	};

	NODETACH() {
	    return this.getToken(GqlParser.NODETACH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDeleteStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDeleteStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDeleteStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_deleteItemList;
    }

	deleteItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteItemContext);
	    } else {
	        return this.getTypedRuleContext(DeleteItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDeleteItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDeleteItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDeleteItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_deleteItem;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDeleteItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDeleteItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDeleteItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallDataModProcedureStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callDataModProcedureStatment;
    }

	callProcedureStatment() {
	    return this.getTypedRuleContext(CallProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallDataModProcedureStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallDataModProcedureStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCallDataModProcedureStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompositeQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compositeQueryStatment;
    }

	compositeQueryExpr() {
	    return this.getTypedRuleContext(CompositeQueryExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompositeQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompositeQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCompositeQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompositeQueryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compositeQueryExpr;
    }

	compositeQueryPrimary() {
	    return this.getTypedRuleContext(CompositeQueryPrimaryContext,0);
	};

	compositeQueryExpr() {
	    return this.getTypedRuleContext(CompositeQueryExprContext,0);
	};

	queryConjunction() {
	    return this.getTypedRuleContext(QueryConjunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompositeQueryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompositeQueryExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCompositeQueryExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_queryConjunction;
    }

	setOperator() {
	    return this.getTypedRuleContext(SetOperatorContext,0);
	};

	OTHERWISE() {
	    return this.getToken(GqlParser.OTHERWISE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQueryConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQueryConjunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitQueryConjunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setOperator;
    }

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	UNION() {
	    return this.getToken(GqlParser.UNION, 0);
	};

	EXCEPT() {
	    return this.getToken(GqlParser.EXCEPT, 0);
	};

	INTERSECT() {
	    return this.getToken(GqlParser.INTERSECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompositeQueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_compositeQueryPrimary;
    }

	linearQueryStatment() {
	    return this.getTypedRuleContext(LinearQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCompositeQueryPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCompositeQueryPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCompositeQueryPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_linearQueryStatment;
    }

	focusedLinearQueryStatment() {
	    return this.getTypedRuleContext(FocusedLinearQueryStatmentContext,0);
	};

	ambientLinearQueryStatment() {
	    return this.getTypedRuleContext(AmbientLinearQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLinearQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLinearQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedLinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearQueryStatment;
    }

	focusedLinearQueryAndPrimitiveResultStatmentPart() {
	    return this.getTypedRuleContext(FocusedLinearQueryAndPrimitiveResultStatmentPartContext,0);
	};

	focusedLinearQueryStatmentPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FocusedLinearQueryStatmentPartContext);
	    } else {
	        return this.getTypedRuleContext(FocusedLinearQueryStatmentPartContext,i);
	    }
	};

	focusedPrimitiveResultStatment() {
	    return this.getTypedRuleContext(FocusedPrimitiveResultStatmentContext,0);
	};

	focusedNestedQuerySpec() {
	    return this.getTypedRuleContext(FocusedNestedQuerySpecContext,0);
	};

	selectStatment() {
	    return this.getTypedRuleContext(SelectStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedLinearQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedLinearQueryStatmentPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearQueryStatmentPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatment() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearQueryStatmentPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearQueryStatmentPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedLinearQueryStatmentPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedLinearQueryAndPrimitiveResultStatmentPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatment() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatmentContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedPrimitiveResultStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedPrimitiveResultStatment;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedPrimitiveResultStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedPrimitiveResultStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedPrimitiveResultStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FocusedNestedQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_focusedNestedQuerySpec;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFocusedNestedQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFocusedNestedQuerySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFocusedNestedQuerySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AmbientLinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ambientLinearQueryStatment;
    }

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	simpleLinearQueryStatment() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatmentContext,0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAmbientLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAmbientLinearQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAmbientLinearQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleLinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleLinearQueryStatment;
    }

	simpleQueryStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleQueryStatmentContext);
	    } else {
	        return this.getTypedRuleContext(SimpleQueryStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleLinearQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleLinearQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleQueryStatment;
    }

	primitiveQueryStatment() {
	    return this.getTypedRuleContext(PrimitiveQueryStatmentContext,0);
	};

	callQueryStatment() {
	    return this.getTypedRuleContext(CallQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveQueryStatment;
    }

	matchStatment() {
	    return this.getTypedRuleContext(MatchStatmentContext,0);
	};

	letStatment() {
	    return this.getTypedRuleContext(LetStatmentContext,0);
	};

	forStatment() {
	    return this.getTypedRuleContext(ForStatmentContext,0);
	};

	filterStatment() {
	    return this.getTypedRuleContext(FilterStatmentContext,0);
	};

	orderByAndPageStatment() {
	    return this.getTypedRuleContext(OrderByAndPageStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPrimitiveQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_matchStatment;
    }

	simpleMatchStatment() {
	    return this.getTypedRuleContext(SimpleMatchStatmentContext,0);
	};

	optionalMatchStatment() {
	    return this.getTypedRuleContext(OptionalMatchStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMatchStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMatchStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitMatchStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleMatchStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleMatchStatment;
    }

	MATCH() {
	    return this.getToken(GqlParser.MATCH, 0);
	};

	graphPatternBindingTable() {
	    return this.getTypedRuleContext(GraphPatternBindingTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleMatchStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleMatchStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleMatchStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionalMatchStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_optionalMatchStatment;
    }

	OPTIONAL() {
	    return this.getToken(GqlParser.OPTIONAL, 0);
	};

	optionalOperand() {
	    return this.getTypedRuleContext(OptionalOperandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOptionalMatchStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOptionalMatchStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOptionalMatchStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionalOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_optionalOperand;
    }

	simpleMatchStatment() {
	    return this.getTypedRuleContext(SimpleMatchStatmentContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	matchStatmentBlock() {
	    return this.getTypedRuleContext(MatchStatmentBlockContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOptionalOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOptionalOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOptionalOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchStatmentBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_matchStatmentBlock;
    }

	matchStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchStatmentContext);
	    } else {
	        return this.getTypedRuleContext(MatchStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMatchStatmentBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMatchStatmentBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitMatchStatmentBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callQueryStatment;
    }

	callProcedureStatment() {
	    return this.getTypedRuleContext(CallProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallQueryStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCallQueryStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_filterStatment;
    }

	FILTER() {
	    return this.getToken(GqlParser.FILTER, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFilterStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFilterStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFilterStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LetStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_letStatment;
    }

	LET() {
	    return this.getToken(GqlParser.LET, 0);
	};

	letVarDefList() {
	    return this.getTypedRuleContext(LetVarDefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLetStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLetStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLetStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LetVarDefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_letVarDefList;
    }

	letVarDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetVarDefContext);
	    } else {
	        return this.getTypedRuleContext(LetVarDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLetVarDefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLetVarDefList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLetVarDefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LetVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_letVarDef;
    }

	valueVarDef() {
	    return this.getTypedRuleContext(ValueVarDefContext,0);
	};

	valueVar() {
	    return this.getTypedRuleContext(ValueVarContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLetVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLetVarDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLetVarDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forStatment;
    }

	FOR() {
	    return this.getToken(GqlParser.FOR, 0);
	};

	forItem() {
	    return this.getTypedRuleContext(ForItemContext,0);
	};

	forOrdinalityOrOffset() {
	    return this.getTypedRuleContext(ForOrdinalityOrOffsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitForStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forItem;
    }

	forItemAlias() {
	    return this.getTypedRuleContext(ForItemAliasContext,0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitForItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forItemAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(GqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForItemAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitForItemAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForOrdinalityOrOffsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_forOrdinalityOrOffset;
    }

	WITH() {
	    return this.getToken(GqlParser.WITH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ORDINALITY() {
	    return this.getToken(GqlParser.ORDINALITY, 0);
	};

	OFFSET() {
	    return this.getToken(GqlParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterForOrdinalityOrOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitForOrdinalityOrOffset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitForOrdinalityOrOffset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByAndPageStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderByAndPageStatment;
    }

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderByAndPageStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderByAndPageStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOrderByAndPageStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveResultStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_primitiveResultStatment;
    }

	returnStatment() {
	    return this.getTypedRuleContext(ReturnStatmentContext,0);
	};

	orderByAndPageStatment() {
	    return this.getTypedRuleContext(OrderByAndPageStatmentContext,0);
	};

	FINISH() {
	    return this.getToken(GqlParser.FINISH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrimitiveResultStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrimitiveResultStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPrimitiveResultStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnStatment;
    }

	RETURN() {
	    return this.getToken(GqlParser.RETURN, 0);
	};

	returnStatmentBody() {
	    return this.getTypedRuleContext(ReturnStatmentBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitReturnStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnStatmentBody;
    }

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	returnItemList() {
	    return this.getTypedRuleContext(ReturnItemListContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	NO() {
	    return this.getToken(GqlParser.NO, 0);
	};

	BINDINGS() {
	    return this.getToken(GqlParser.BINDINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnStatmentBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitReturnStatmentBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnItemList;
    }

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitReturnItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnItem;
    }

	aggregatingValueExpr() {
	    return this.getTypedRuleContext(AggregatingValueExprContext,0);
	};

	returnItemAlias() {
	    return this.getTypedRuleContext(ReturnItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitReturnItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_returnItemAlias;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReturnItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReturnItemAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitReturnItemAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectStatment;
    }

	SELECT() {
	    return this.getToken(GqlParser.SELECT, 0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	selectStatmentBody() {
	    return this.getTypedRuleContext(SelectStatmentBodyContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectItemList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectItem;
    }

	aggregatingValueExpr() {
	    return this.getTypedRuleContext(AggregatingValueExprContext,0);
	};

	selectItemAlias() {
	    return this.getTypedRuleContext(SelectItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectItemAlias;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectItemAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectItemAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(GqlParser.HAVING, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitHavingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectStatmentBody;
    }

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	selectGraphMatchList() {
	    return this.getTypedRuleContext(SelectGraphMatchListContext,0);
	};

	selectQuerySpec() {
	    return this.getTypedRuleContext(SelectQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectStatmentBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectStatmentBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectGraphMatchListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectGraphMatchList;
    }

	selectGraphMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectGraphMatchContext);
	    } else {
	        return this.getTypedRuleContext(SelectGraphMatchContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectGraphMatchList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectGraphMatchList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectGraphMatchList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectGraphMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectGraphMatch;
    }

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	matchStatment() {
	    return this.getTypedRuleContext(MatchStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectGraphMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectGraphMatch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectGraphMatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_selectQuerySpec;
    }

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSelectQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSelectQuerySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSelectQuerySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallProcedureStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_callProcedureStatment;
    }

	CALL() {
	    return this.getToken(GqlParser.CALL, 0);
	};

	procedureCall() {
	    return this.getTypedRuleContext(ProcedureCallContext,0);
	};

	OPTIONAL() {
	    return this.getToken(GqlParser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCallProcedureStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCallProcedureStatment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCallProcedureStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureCall;
    }

	inlineProcedureCall() {
	    return this.getTypedRuleContext(InlineProcedureCallContext,0);
	};

	namedProcedureCall() {
	    return this.getTypedRuleContext(NamedProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProcedureCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InlineProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_inlineProcedureCall;
    }

	nestedProcedureSpec() {
	    return this.getTypedRuleContext(NestedProcedureSpecContext,0);
	};

	varScopeClause() {
	    return this.getTypedRuleContext(VarScopeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInlineProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInlineProcedureCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInlineProcedureCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarScopeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_varScopeClause;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	bindingVarRefList() {
	    return this.getTypedRuleContext(BindingVarRefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterVarScopeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitVarScopeClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitVarScopeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingVarRefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVarRefList;
    }

	bindingVarRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVarRefContext);
	    } else {
	        return this.getTypedRuleContext(BindingVarRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVarRefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVarRefList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingVarRefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamedProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_namedProcedureCall;
    }

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	procedureArgList() {
	    return this.getTypedRuleContext(ProcedureArgListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNamedProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNamedProcedureCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNamedProcedureCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureArgList;
    }

	procedureArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureArgContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureArgContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureArgList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProcedureArgList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureArg;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProcedureArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_useGraphClause;
    }

	USE() {
	    return this.getToken(GqlParser.USE, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUseGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUseGraphClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUseGraphClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_atSchemaClause;
    }

	AT() {
	    return this.getToken(GqlParser.AT, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAtSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAtSchemaClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAtSchemaClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingVarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVarRef;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVarRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingVarRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementVarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementVarRef;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementVarRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementVarRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathVarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathVarRef;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathVarRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathVarRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameter;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternBindingTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternBindingTable;
    }

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	graphPatternYieldClause() {
	    return this.getTypedRuleContext(GraphPatternYieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternBindingTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternBindingTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPatternBindingTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternYieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternYieldClause;
    }

	YIELD() {
	    return this.getToken(GqlParser.YIELD, 0);
	};

	graphPatternYieldItemList() {
	    return this.getTypedRuleContext(GraphPatternYieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternYieldClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPatternYieldClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternYieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternYieldItemList;
    }

	graphPatternYieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphPatternYieldItemContext);
	    } else {
	        return this.getTypedRuleContext(GraphPatternYieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternYieldItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPatternYieldItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternYieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternYieldItem;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	pathVarRef() {
	    return this.getTypedRuleContext(PathVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternYieldItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPatternYieldItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPattern;
    }

	pathPatternList() {
	    return this.getTypedRuleContext(PathPatternListContext,0);
	};

	matchMode() {
	    return this.getTypedRuleContext(MatchModeContext,0);
	};

	keepClause() {
	    return this.getTypedRuleContext(KeepClauseContext,0);
	};

	graphPatternWhereClause() {
	    return this.getTypedRuleContext(GraphPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_matchMode;
    }

	repeatableElementsMatchMode() {
	    return this.getTypedRuleContext(RepeatableElementsMatchModeContext,0);
	};

	differentEdgesMatchMode() {
	    return this.getTypedRuleContext(DifferentEdgesMatchModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMatchMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitMatchMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepeatableElementsMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_repeatableElementsMatchMode;
    }

	REPEATABLE() {
	    return this.getToken(GqlParser.REPEATABLE, 0);
	};

	elementBindingsOrElements() {
	    return this.getTypedRuleContext(ElementBindingsOrElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRepeatableElementsMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRepeatableElementsMatchMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRepeatableElementsMatchMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DifferentEdgesMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_differentEdgesMatchMode;
    }

	DIFFERENT() {
	    return this.getToken(GqlParser.DIFFERENT, 0);
	};

	edgeBindingsOrEdges() {
	    return this.getTypedRuleContext(EdgeBindingsOrEdgesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDifferentEdgesMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDifferentEdgesMatchMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDifferentEdgesMatchMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementBindingsOrElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementBindingsOrElements;
    }

	ELEMENT() {
	    return this.getToken(GqlParser.ELEMENT, 0);
	};

	BINDINGS() {
	    return this.getToken(GqlParser.BINDINGS, 0);
	};

	ELEMENTS() {
	    return this.getToken(GqlParser.ELEMENTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementBindingsOrElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementBindingsOrElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementBindingsOrElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeBindingsOrEdgesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeBindingsOrEdges;
    }

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	BINDINGS() {
	    return this.getToken(GqlParser.BINDINGS, 0);
	};

	edgesSynonym() {
	    return this.getTypedRuleContext(EdgesSynonymContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeBindingsOrEdges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeBindingsOrEdges(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeBindingsOrEdges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternList;
    }

	pathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathPatternContext);
	    } else {
	        return this.getTypedRuleContext(PathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathPatternList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPattern;
    }

	pathVarDeclaration() {
	    return this.getTypedRuleContext(PathVarDeclarationContext,0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	pathPatternExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathPatternExprContext);
	    } else {
	        return this.getTypedRuleContext(PathPatternExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathVarDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathVarDeclaration;
    }

	pathVar() {
	    return this.getTypedRuleContext(PathVarContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathVarDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathVarDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathVarDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeepClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_keepClause;
    }

	KEEP() {
	    return this.getToken(GqlParser.KEEP, 0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterKeepClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitKeepClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitKeepClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPatternWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathPatternPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternPrefix;
    }

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	pathSearchPrefix() {
	    return this.getTypedRuleContext(PathSearchPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternPrefix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathPatternPrefix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathModePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathModePrefix;
    }

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathModePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathModePrefix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathModePrefix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathMode;
    }

	WALK() {
	    return this.getToken(GqlParser.WALK, 0);
	};

	TRAIL() {
	    return this.getToken(GqlParser.TRAIL, 0);
	};

	SIMPLE() {
	    return this.getToken(GqlParser.SIMPLE, 0);
	};

	ACYCLIC() {
	    return this.getToken(GqlParser.ACYCLIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathSearchPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathSearchPrefix;
    }

	allPathSearch() {
	    return this.getTypedRuleContext(AllPathSearchContext,0);
	};

	anyPathSearch() {
	    return this.getTypedRuleContext(AnyPathSearchContext,0);
	};

	shortestPathSearch() {
	    return this.getTypedRuleContext(ShortestPathSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathSearchPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathSearchPrefix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathSearchPrefix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AllPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_allPathSearch;
    }

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAllPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAllPathSearch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAllPathSearch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathOrPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathOrPaths;
    }

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	PATHS() {
	    return this.getToken(GqlParser.PATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathOrPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathOrPaths(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathOrPaths(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnyPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_anyPathSearch;
    }

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAnyPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAnyPathSearch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAnyPathSearch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumberOfPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numberOfPaths;
    }

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumberOfPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumberOfPaths(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumberOfPaths(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_shortestPathSearch;
    }

	allShortestPathSearch() {
	    return this.getTypedRuleContext(AllShortestPathSearchContext,0);
	};

	anyShortestPathSearch() {
	    return this.getTypedRuleContext(AnyShortestPathSearchContext,0);
	};

	countedShortestPathSearch() {
	    return this.getTypedRuleContext(CountedShortestPathSearchContext,0);
	};

	countedShortestGroupSearch() {
	    return this.getTypedRuleContext(CountedShortestGroupSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitShortestPathSearch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitShortestPathSearch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AllShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_allShortestPathSearch;
    }

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAllShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAllShortestPathSearch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAllShortestPathSearch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnyShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_anyShortestPathSearch;
    }

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAnyShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAnyShortestPathSearch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAnyShortestPathSearch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CountedShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_countedShortestPathSearch;
    }

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCountedShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCountedShortestPathSearch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCountedShortestPathSearch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CountedShortestGroupSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_countedShortestGroupSearch;
    }

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	numberOfGroups() {
	    return this.getTypedRuleContext(NumberOfGroupsContext,0);
	};

	groupOrGroups() {
	    return this.getTypedRuleContext(GroupOrGroupsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCountedShortestGroupSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCountedShortestGroupSearch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCountedShortestGroupSearch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupOrGroupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_groupOrGroups;
    }

	GROUP() {
	    return this.getToken(GqlParser.GROUP, 0);
	};

	GROUPS() {
	    return this.getToken(GqlParser.GROUPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGroupOrGroups(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGroupOrGroups(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGroupOrGroups(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumberOfGroupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numberOfGroups;
    }

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumberOfGroups(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumberOfGroups(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumberOfGroups(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathPatternExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternExpr;
    }

	pathTerm() {
	    return this.getTypedRuleContext(PathTermContext,0);
	};

	pathMultisetAlternation() {
	    return this.getTypedRuleContext(PathMultisetAlternationContext,0);
	};

	pathPatternUnion() {
	    return this.getTypedRuleContext(PathPatternUnionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathPatternExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathMultisetAlternation;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	MULTISET_ALTERNATION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.MULTISET_ALTERNATION);
	    } else {
	        return this.getToken(GqlParser.MULTISET_ALTERNATION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathMultisetAlternation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathMultisetAlternation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathPatternUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPatternUnion;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPatternUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPatternUnion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathPatternUnion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathTerm;
    }

	pathFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathFactorContext);
	    } else {
	        return this.getTypedRuleContext(PathFactorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathFactor;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	quantifiedPathPrimary() {
	    return this.getTypedRuleContext(QuantifiedPathPrimaryContext,0);
	};

	questionedPathPrimary() {
	    return this.getTypedRuleContext(QuestionedPathPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuantifiedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_quantifiedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQuantifiedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQuantifiedPathPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitQuantifiedPathPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuestionedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_questionedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GqlParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterQuestionedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitQuestionedPathPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitQuestionedPathPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathPrimary;
    }

	elementPattern() {
	    return this.getTypedRuleContext(ElementPatternContext,0);
	};

	parenthesizedPathPatternExpr() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternExprContext,0);
	};

	simplifiedPathPatternExpr() {
	    return this.getTypedRuleContext(SimplifiedPathPatternExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPattern;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	edgePattern() {
	    return this.getTypedRuleContext(EdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPatternFiller;
    }

	elementVarDeclaration() {
	    return this.getTypedRuleContext(ElementVarDeclarationContext,0);
	};

	isLabelExpr() {
	    return this.getTypedRuleContext(IsLabelExprContext,0);
	};

	elementPatternPredicate() {
	    return this.getTypedRuleContext(ElementPatternPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPatternFiller(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementPatternFiller(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementVarDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementVarDeclaration;
    }

	elementVar() {
	    return this.getTypedRuleContext(ElementVarContext,0);
	};

	TEMP() {
	    return this.getToken(GqlParser.TEMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementVarDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementVarDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementVarDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsLabelExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_isLabelExpr;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	labelExpr() {
	    return this.getTypedRuleContext(LabelExprContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIsLabelExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIsLabelExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitIsLabelExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementPatternPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPatternPredicate;
    }

	elementPatternWhereClause() {
	    return this.getTypedRuleContext(ElementPatternWhereClauseContext,0);
	};

	elementPropertySpec() {
	    return this.getTypedRuleContext(ElementPropertySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPatternPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPatternPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementPatternPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPatternWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementPatternWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementPropertySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementPropertySpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementPropertySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementPropertySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementPropertySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyKeyValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyKeyValuePairList;
    }

	propertyKeyValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyKeyValuePairContext);
	    } else {
	        return this.getTypedRuleContext(PropertyKeyValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyKeyValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyKeyValuePairList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyKeyValuePairList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyKeyValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyKeyValuePair;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyKeyValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyKeyValuePair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyKeyValuePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgePattern;
    }

	fullEdgePattern() {
	    return this.getTypedRuleContext(FullEdgePatternContext,0);
	};

	abbreviatedEdgePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgePattern;
    }

	fullEdgePointingLeft() {
	    return this.getTypedRuleContext(FullEdgePointingLeftContext,0);
	};

	fullEdgeUndirected() {
	    return this.getTypedRuleContext(FullEdgeUndirectedContext,0);
	};

	fullEdgePointingRight() {
	    return this.getTypedRuleContext(FullEdgePointingRightContext,0);
	};

	fullEdgeLeftOrUndirected() {
	    return this.getTypedRuleContext(FullEdgeLeftOrUndirectedContext,0);
	};

	fullEdgeUndirectedOrRight() {
	    return this.getTypedRuleContext(FullEdgeUndirectedOrRightContext,0);
	};

	fullEdgeLeftOrRight() {
	    return this.getTypedRuleContext(FullEdgeLeftOrRightContext,0);
	};

	fullEdgeAnyDirection() {
	    return this.getTypedRuleContext(FullEdgeAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgePointingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgePointingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgePointingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgePointingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeLeftOrUndirected;
    }

	LEFT_ARROW_TILDE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeLeftOrUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeLeftOrUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeUndirectedOrRight;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeUndirectedOrRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeUndirectedOrRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeLeftOrRight;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeLeftOrRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeLeftOrRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeAnyDirection;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeAnyDirection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeAnyDirection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbbreviatedEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgePattern;
    }

	LEFT_ARROW() {
	    return this.getToken(GqlParser.LEFT_ARROW, 0);
	};

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GqlParser.RIGHT_ARROW, 0);
	};

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	};

	LEFT_MINUS_RIGHT() {
	    return this.getToken(GqlParser.LEFT_MINUS_RIGHT, 0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbbreviatedEdgePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesizedPathPatternExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedPathPatternExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	pathPatternExpr() {
	    return this.getTypedRuleContext(PathPatternExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	subpathVarDeclaration() {
	    return this.getTypedRuleContext(SubpathVarDeclarationContext,0);
	};

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	parenthesizedPathPatternWhereClause() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedPathPatternExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedPathPatternExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParenthesizedPathPatternExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubpathVarDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_subpathVarDeclaration;
    }

	subpathVar() {
	    return this.getTypedRuleContext(SubpathVarContext,0);
	};

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSubpathVarDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSubpathVarDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSubpathVarDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesizedPathPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedPathPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedPathPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedPathPatternWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParenthesizedPathPatternWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertGraphPattern;
    }

	insertGraphPatternList() {
	    return this.getTypedRuleContext(InsertGraphPatternListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertGraphPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertGraphPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertGraphPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertGraphPatternList;
    }

	insertPathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPathPatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertPathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertGraphPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertGraphPatternList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertGraphPatternList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertPathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertPathPattern;
    }

	insertNodePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertNodePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertNodePatternContext,i);
	    }
	};

	insertEdgePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertEdgePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertEdgePatternContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertPathPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertPathPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertNodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertNodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertNodePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertNodePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertEdgePattern;
    }

	insertEdgePointingLeft() {
	    return this.getTypedRuleContext(InsertEdgePointingLeftContext,0);
	};

	insertEdgePointingRight() {
	    return this.getTypedRuleContext(InsertEdgePointingRightContext,0);
	};

	insertEdgeUndirected() {
	    return this.getTypedRuleContext(InsertEdgeUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertEdgePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertEdgePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertEdgePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertEdgePointingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertEdgePointingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertEdgePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertEdgePointingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertEdgePointingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertEdgeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertEdgeUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertEdgeUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_insertElementPatternFiller;
    }

	elementVarDeclaration() {
	    return this.getTypedRuleContext(ElementVarDeclarationContext,0);
	};

	labelAndPropertySetSpec() {
	    return this.getTypedRuleContext(LabelAndPropertySetSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterInsertElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitInsertElementPatternFiller(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitInsertElementPatternFiller(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelAndPropertySetSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelAndPropertySetSpec;
    }

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	elementPropertySpec() {
	    return this.getTypedRuleContext(ElementPropertySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelAndPropertySetSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelAndPropertySetSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelAndPropertySetSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelExpr;
    }

	labelTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelTermContext);
	    } else {
	        return this.getTypedRuleContext(LabelTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelTerm;
    }

	labelFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelFactorContext);
	    } else {
	        return this.getTypedRuleContext(LabelFactorContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.AMPERSAND);
	    } else {
	        return this.getToken(GqlParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelFactor;
    }

	labelPrimary() {
	    return this.getTypedRuleContext(LabelPrimaryContext,0);
	};

	labelNegation() {
	    return this.getTypedRuleContext(LabelNegationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelNegation;
    }

	EXCLAMATION() {
	    return this.getToken(GqlParser.EXCLAMATION, 0);
	};

	labelPrimary() {
	    return this.getTypedRuleContext(LabelPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelNegation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelNegation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelPrimary;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	wildcardLabel() {
	    return this.getTypedRuleContext(WildcardLabelContext,0);
	};

	parenthesizedLabelExpr() {
	    return this.getTypedRuleContext(ParenthesizedLabelExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_wildcardLabel;
    }

	PERCENT() {
	    return this.getToken(GqlParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWildcardLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWildcardLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitWildcardLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesizedLabelExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedLabelExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	labelExpr() {
	    return this.getTypedRuleContext(LabelExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedLabelExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedLabelExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParenthesizedLabelExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternQuantifier;
    }

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	fixedQuantifier() {
	    return this.getTypedRuleContext(FixedQuantifierContext,0);
	};

	generalQuantifier() {
	    return this.getTypedRuleContext(GeneralQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternQuantifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPatternQuantifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FixedQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fixedQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFixedQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFixedQuantifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFixedQuantifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	lowerBound() {
	    return this.getTypedRuleContext(LowerBoundContext,0);
	};

	upperBound() {
	    return this.getTypedRuleContext(UpperBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralQuantifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGeneralQuantifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LowerBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_lowerBound;
    }

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLowerBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLowerBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLowerBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpperBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_upperBound;
    }

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUpperBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUpperBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUpperBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedPathPatternExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedPathPatternExpr;
    }

	simplifiedDefaultingLeft() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftContext,0);
	};

	simplifiedDefaultingUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedContext,0);
	};

	simplifiedDefaultingRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingRightContext,0);
	};

	simplifiedDefaultingLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrUndirectedContext,0);
	};

	simplifiedDefaultingUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedOrRightContext,0);
	};

	simplifiedDefaultingLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrRightContext,0);
	};

	simplifiedDefaultingAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedDefaultingAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedPathPatternExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedPathPatternExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedPathPatternExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDefaultingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingLeft;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GqlParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDefaultingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDefaultingUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingUndirected;
    }

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDefaultingUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDefaultingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingRight;
    }

	MINUS_SLASH() {
	    return this.getToken(GqlParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDefaultingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDefaultingLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingLeftOrUndirected;
    }

	LEFT_TILDE_SLASH() {
	    return this.getToken(GqlParser.LEFT_TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDefaultingLeftOrUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDefaultingUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingUndirectedOrRight;
    }

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE_RIGHT() {
	    return this.getToken(GqlParser.SLASH_TILDE_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDefaultingUndirectedOrRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDefaultingLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingLeftOrRight;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDefaultingLeftOrRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDefaultingAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDefaultingAnyDirection;
    }

	MINUS_SLASH() {
	    return this.getToken(GqlParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GqlParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDefaultingAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDefaultingAnyDirection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDefaultingAnyDirection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedContents;
    }

	simplifiedTerm() {
	    return this.getTypedRuleContext(SimplifiedTermContext,0);
	};

	simplifiedPathUnion() {
	    return this.getTypedRuleContext(SimplifiedPathUnionContext,0);
	};

	simplifiedMultisetAlternation() {
	    return this.getTypedRuleContext(SimplifiedMultisetAlternationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedContents(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedContents(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedPathUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedPathUnion;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedPathUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedPathUnion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedPathUnion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedMultisetAlternation;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	MULTISET_ALTERNATION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.MULTISET_ALTERNATION);
	    } else {
	        return this.getToken(GqlParser.MULTISET_ALTERNATION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedMultisetAlternation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedMultisetAlternation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedTerm;
    }

	simplifiedFactorLow = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedFactorLowContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedFactorLowContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedFactorLowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedFactorLow;
    }

	simplifiedFactorHigh = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedFactorHighContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedFactorHighContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.AMPERSAND);
	    } else {
	        return this.getToken(GqlParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedFactorLow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedFactorLow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedFactorLow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedFactorHighContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedFactorHigh;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	simplifiedQuntified() {
	    return this.getTypedRuleContext(SimplifiedQuntifiedContext,0);
	};

	simplifiedQuestioned() {
	    return this.getTypedRuleContext(SimplifiedQuestionedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedFactorHigh(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedFactorHigh(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedFactorHigh(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedQuntifiedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedQuntified;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedQuntified(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedQuntified(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedQuntified(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedQuestionedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedQuestioned;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GqlParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedQuestioned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedQuestioned(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedQuestioned(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedTertiaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedTertiary;
    }

	simplifiedDirectionOverride() {
	    return this.getTypedRuleContext(SimplifiedDirectionOverrideContext,0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedTertiary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedTertiary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedTertiary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedDirectionOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedDirectionOverride;
    }

	simplifiedOverrideLeft() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftContext,0);
	};

	simplifiedOverrideUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedContext,0);
	};

	simplifiedOverrideRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideRightContext,0);
	};

	simplifiedOverrideLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrUndirectedContext,0);
	};

	simplifiedOverrideUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedOrRightContext,0);
	};

	simplifiedOverrideLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrRightContext,0);
	};

	simplifiedOverrideAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedOverrideAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedDirectionOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedDirectionOverride(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedDirectionOverride(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedOverrideLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideLeft;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedOverrideLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedOverrideUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideUndirected;
    }

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedOverrideUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedOverrideRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideRight;
    }

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedOverrideRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedOverrideLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideLeftOrUndirected;
    }

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedOverrideLeftOrUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedOverrideUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideUndirectedOrRight;
    }

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedOverrideUndirectedOrRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedOverrideLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideLeftOrRight;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedOverrideLeftOrRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedOverrideAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedOverrideAnyDirection;
    }

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedOverrideAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedOverrideAnyDirection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedOverrideAnyDirection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedSecondaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedSecondary;
    }

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	simplifiedNegation() {
	    return this.getTypedRuleContext(SimplifiedNegationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedSecondary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedSecondary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedSecondary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedNegation;
    }

	EXCLAMATION() {
	    return this.getToken(GqlParser.EXCLAMATION, 0);
	};

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedNegation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedNegation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplifiedPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simplifiedPrimary;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimplifiedPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimplifiedPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimplifiedPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldClause;
    }

	YIELD() {
	    return this.getToken(GqlParser.YIELD, 0);
	};

	yieldItemList() {
	    return this.getTypedRuleContext(YieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitYieldClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldItemList;
    }

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitYieldItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldItem;
    }

	yieldItemName() {
	    return this.getTypedRuleContext(YieldItemNameContext,0);
	};

	yieldItemAlias() {
	    return this.getTypedRuleContext(YieldItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitYieldItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldItemNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldItemName;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldItemName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldItemName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitYieldItemName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_yieldItemAlias;
    }

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterYieldItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitYieldItemAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitYieldItemAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_groupByClause;
    }

	GROUP() {
	    return this.getToken(GqlParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(GqlParser.BY, 0);
	};

	groupingElementList() {
	    return this.getTypedRuleContext(GroupingElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_groupingElementList;
    }

	groupingElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingElementContext);
	    } else {
	        return this.getTypedRuleContext(GroupingElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	emptyGroupingSet() {
	    return this.getTypedRuleContext(EmptyGroupingSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGroupingElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGroupingElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGroupingElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_groupingElement;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGroupingElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGroupingElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGroupingElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyGroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_emptyGroupingSet;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEmptyGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEmptyGroupingSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEmptyGroupingSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(GqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(GqlParser.BY, 0);
	};

	sortSpecList() {
	    return this.getTypedRuleContext(SortSpecListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_aggregateFunction;
    }

	COUNT() {
	    return this.getToken(GqlParser.COUNT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	generalSetFunction() {
	    return this.getTypedRuleContext(GeneralSetFunctionContext,0);
	};

	binarySetFunction() {
	    return this.getTypedRuleContext(BinarySetFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAggregateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAggregateFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAggregateFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralSetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalSetFunction;
    }

	generalSetFunctionType() {
	    return this.getTypedRuleContext(GeneralSetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralSetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralSetFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGeneralSetFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralSetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalSetFunctionType;
    }

	AVG() {
	    return this.getToken(GqlParser.AVG, 0);
	};

	COUNT() {
	    return this.getToken(GqlParser.COUNT, 0);
	};

	MAX() {
	    return this.getToken(GqlParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(GqlParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(GqlParser.SUM, 0);
	};

	COLLECT() {
	    return this.getToken(GqlParser.COLLECT, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(GqlParser.STDDEV_SAMP, 0);
	};

	STDDEV_POP() {
	    return this.getToken(GqlParser.STDDEV_POP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralSetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralSetFunctionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGeneralSetFunctionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(GqlParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSetQuantifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSetQuantifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BinarySetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_binarySetFunction;
    }

	PERCENTILE_CONT() {
	    return this.getToken(GqlParser.PERCENTILE_CONT, 0);
	};

	PERCENTILE_DISC() {
	    return this.getToken(GqlParser.PERCENTILE_DISC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBinarySetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBinarySetFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBinarySetFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DependantValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dependantValueExpr;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDependantValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDependantValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDependantValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndependentValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_independentValueExpr;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIndependentValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIndependentValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitIndependentValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortSpecListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sortSpecList;
    }

	sortSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortSpecContext);
	    } else {
	        return this.getTypedRuleContext(SortSpecContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSortSpecList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSortSpecList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSortSpecList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sortSpec;
    }

	sortKey() {
	    return this.getTypedRuleContext(SortKeyContext,0);
	};

	orderingSpec() {
	    return this.getTypedRuleContext(OrderingSpecContext,0);
	};

	nullOrdering() {
	    return this.getTypedRuleContext(NullOrderingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSortSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSortSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSortSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sortKey;
    }

	aggregatingValueExpr() {
	    return this.getTypedRuleContext(AggregatingValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSortKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSortKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSortKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderingSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_orderingSpec;
    }

	ASC() {
	    return this.getToken(GqlParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(GqlParser.ASCENDING, 0);
	};

	DESC() {
	    return this.getToken(GqlParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(GqlParser.DESCENDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOrderingSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOrderingSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOrderingSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullOrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nullOrdering;
    }

	NULLS() {
	    return this.getToken(GqlParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(GqlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(GqlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNullOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNullOrdering(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNullOrdering(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(GqlParser.LIMIT, 0);
	};

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_offsetClause;
    }

	offsetSynonym() {
	    return this.getTypedRuleContext(OffsetSynonymContext,0);
	};

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOffsetClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OffsetSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_offsetSynonym;
    }

	OFFSET() {
	    return this.getToken(GqlParser.OFFSET, 0);
	};

	SKIP_() {
	    return this.getToken(GqlParser.SKIP_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOffsetSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOffsetSynonym(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOffsetSynonym(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphTypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeSpec;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	nestedGraphTypeSpec() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphTypeSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedGraphTypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nestedGraphTypeSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	graphTypeSpecBody() {
	    return this.getTypedRuleContext(GraphTypeSpecBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNestedGraphTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNestedGraphTypeSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNestedGraphTypeSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphTypeSpecBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeSpecBody;
    }

	elementTypeDefList() {
	    return this.getTypedRuleContext(ElementTypeDefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeSpecBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeSpecBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphTypeSpecBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementTypeDefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementTypeDefList;
    }

	elementTypeDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementTypeDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementTypeDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementTypeDefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementTypeDefList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementTypeDefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementTypeDef;
    }

	nodeTypeDef() {
	    return this.getTypedRuleContext(NodeTypeDefContext,0);
	};

	edgeTypeDef() {
	    return this.getTypedRuleContext(EdgeTypeDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeDef;
    }

	nodeTypePattern() {
	    return this.getTypedRuleContext(NodeTypePatternContext,0);
	};

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	nodeTypePhrase() {
	    return this.getTypedRuleContext(NodeTypePhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypePhrase;
    }

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypePhrase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypePhrase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeFiller;
    }

	nodeTypeLabelSetDef() {
	    return this.getTypedRuleContext(NodeTypeLabelSetDefContext,0);
	};

	nodeTypePropertyTypeSetDef() {
	    return this.getTypedRuleContext(NodeTypePropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeFiller(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypeFiller(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypeLabelSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeLabelSetDef;
    }

	labelSetDef() {
	    return this.getTypedRuleContext(LabelSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeLabelSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeLabelSetDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypeLabelSetDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypePropertyTypeSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypePropertyTypeSetDef;
    }

	propertyTypeSetDef() {
	    return this.getTypedRuleContext(PropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypePropertyTypeSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypePropertyTypeSetDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypePropertyTypeSetDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypeDef;
    }

	edgeTypePattern() {
	    return this.getTypedRuleContext(EdgeTypePatternContext,0);
	};

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	edgeTypePhrase() {
	    return this.getTypedRuleContext(EdgeTypePhraseContext,0);
	};

	edgeKind() {
	    return this.getTypedRuleContext(EdgeKindContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypePattern;
    }

	fullEdgeTypePattern() {
	    return this.getTypedRuleContext(FullEdgeTypePatternContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeTypePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypePhrase;
    }

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	endpointDef() {
	    return this.getTypedRuleContext(EndpointDefContext,0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypePhrase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeTypePhrase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypeFiller;
    }

	edgeTypeLabelSetDef() {
	    return this.getTypedRuleContext(EdgeTypeLabelSetDefContext,0);
	};

	edgeTypePropertyTypeSetDef() {
	    return this.getTypedRuleContext(EdgeTypePropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypeFiller(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeTypeFiller(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeTypeLabelSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypeLabelSetDef;
    }

	labelSetDef() {
	    return this.getTypedRuleContext(LabelSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypeLabelSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypeLabelSetDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeTypeLabelSetDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeTypePropertyTypeSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeTypePropertyTypeSetDef;
    }

	propertyTypeSetDef() {
	    return this.getTypedRuleContext(PropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeTypePropertyTypeSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeTypePropertyTypeSetDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeTypePropertyTypeSetDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePattern;
    }

	fullEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingRightContext,0);
	};

	fullEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingLeftContext,0);
	};

	fullEdgeTypePatternUndirected() {
	    return this.getTypedRuleContext(FullEdgeTypePatternUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeTypePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePatternPointingRight;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	arcTypePointingRight() {
	    return this.getTypedRuleContext(ArcTypePointingRightContext,0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePatternPointingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeTypePatternPointingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	arcTypePointingLeft() {
	    return this.getTypedRuleContext(ArcTypePointingLeftContext,0);
	};

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePatternPointingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeTypePatternPointingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FullEdgeTypePatternUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fullEdgeTypePatternUndirected;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	arcTypeUndirected() {
	    return this.getTypedRuleContext(ArcTypeUndirectedContext,0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFullEdgeTypePatternUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFullEdgeTypePatternUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFullEdgeTypePatternUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArcTypePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypePointingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitArcTypePointingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArcTypePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypePointingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitArcTypePointingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArcTypeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypeUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitArcTypeUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArcTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_arcTypeFiller;
    }

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterArcTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitArcTypeFiller(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitArcTypeFiller(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbbreviatedEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePattern;
    }

	abbreviatedEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingRightContext,0);
	};

	abbreviatedEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingLeftContext,0);
	};

	abbreviatedEdgeTypePatternUndirected() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbbreviatedEdgeTypePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbbreviatedEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GqlParser.RIGHT_ARROW, 0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbbreviatedEdgeTypePatternPointingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbbreviatedEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	LEFT_ARROW() {
	    return this.getToken(GqlParser.LEFT_ARROW, 0);
	};

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbbreviatedEdgeTypePatternPointingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbbreviatedEdgeTypePatternUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_abbreviatedEdgeTypePatternUndirected;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbbreviatedEdgeTypePatternUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeTypeRef;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeTypeRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeTypeRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceNodeTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sourceNodeTypeRef;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSourceNodeTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSourceNodeTypeRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSourceNodeTypeRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestinationNodeTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_destinationNodeTypeRef;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDestinationNodeTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDestinationNodeTypeRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDestinationNodeTypeRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeKindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeKind;
    }

	DIRECTED() {
	    return this.getToken(GqlParser.DIRECTED, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GqlParser.UNDIRECTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeKind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeKind(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeKind(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndpointDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointDef;
    }

	CONNECTING() {
	    return this.getToken(GqlParser.CONNECTING, 0);
	};

	enpointPairDef() {
	    return this.getTypedRuleContext(EnpointPairDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEndpointDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnpointPairDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_enpointPairDef;
    }

	endpointPairDefPointingRight() {
	    return this.getTypedRuleContext(EndpointPairDefPointingRightContext,0);
	};

	endpointPairDefPointingLeft() {
	    return this.getTypedRuleContext(EndpointPairDefPointingLeftContext,0);
	};

	endpointPairDefUndirected() {
	    return this.getTypedRuleContext(EndpointPairDefUndirectedContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEnpointPairDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEnpointPairDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEnpointPairDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndpointPairDefPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointPairDefPointingRight;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	connectorPointingRight() {
	    return this.getTypedRuleContext(ConnectorPointingRightContext,0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointPairDefPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointPairDefPointingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEndpointPairDefPointingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndpointPairDefPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointPairDefPointingLeft;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	connectorPointingLeft() {
	    return this.getTypedRuleContext(ConnectorPointingLeftContext,0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointPairDefPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointPairDefPointingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEndpointPairDefPointingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndpointPairDefUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_endpointPairDefUndirected;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	connectorUndirected() {
	    return this.getTypedRuleContext(ConnectorUndirectedContext,0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEndpointPairDefUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEndpointPairDefUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEndpointPairDefUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConnectorPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_connectorPointingRight;
    }

	TO() {
	    return this.getToken(GqlParser.TO, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GqlParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConnectorPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConnectorPointingRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitConnectorPointingRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConnectorPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_connectorPointingLeft;
    }

	LEFT_ARROW() {
	    return this.getToken(GqlParser.LEFT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConnectorPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConnectorPointingLeft(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitConnectorPointingLeft(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConnectorUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_connectorUndirected;
    }

	TO() {
	    return this.getToken(GqlParser.TO, 0);
	};

	TILDE() {
	    return this.getToken(GqlParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConnectorUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConnectorUndirected(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitConnectorUndirected(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceNodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sourceNodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSourceNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSourceNodeTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSourceNodeTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestinationNodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_destinationNodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDestinationNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDestinationNodeTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDestinationNodeTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelSetDef;
    }

	LABEL() {
	    return this.getToken(GqlParser.LABEL, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LABELS() {
	    return this.getToken(GqlParser.LABELS, 0);
	};

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelSetDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelSetDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyTypeSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyTypeSetDef;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	propertyTypeDefList() {
	    return this.getTypedRuleContext(PropertyTypeDefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyTypeSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyTypeSetDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyTypeSetDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyTypeDefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyTypeDefList;
    }

	propertyTypeDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyTypeDefContext);
	    } else {
	        return this.getTypedRuleContext(PropertyTypeDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyTypeDefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyTypeDefList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyTypeDefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyTypeDef;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	propertyValueType() {
	    return this.getTypedRuleContext(PropertyValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyValueType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableType;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	fieldTypesSpec() {
	    return this.getTypedRuleContext(FieldTypesSpecContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueType;
    }

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	constructedType() {
	    return this.getTypedRuleContext(ConstructedTypeContext,0);
	};

	dynamicUnionType() {
	    return this.getTypedRuleContext(DynamicUnionTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_typed;
    }

	DOUBLE_COLON() {
	    return this.getToken(GqlParser.DOUBLE_COLON, 0);
	};

	TYPED() {
	    return this.getToken(GqlParser.TYPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTyped(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTyped(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTyped(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredefinedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedType;
    }

	booleanType() {
	    return this.getTypedRuleContext(BooleanTypeContext,0);
	};

	charStringType() {
	    return this.getTypedRuleContext(CharStringTypeContext,0);
	};

	byteStringType() {
	    return this.getTypedRuleContext(ByteStringTypeContext,0);
	};

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	temporalType() {
	    return this.getTypedRuleContext(TemporalTypeContext,0);
	};

	refValueType() {
	    return this.getTypedRuleContext(RefValueTypeContext,0);
	};

	pathValueType() {
	    return this.getTypedRuleContext(PathValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPredefinedType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanType;
    }

	BOOL() {
	    return this.getToken(GqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(GqlParser.BOOLEAN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charStringType;
    }

	STRING() {
	    return this.getToken(GqlParser.STRING, 0);
	};

	VARCHAR() {
	    return this.getToken(GqlParser.VARCHAR, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharStringType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharStringType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringType;
    }

	BYTES() {
	    return this.getToken(GqlParser.BYTES, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	minLength() {
	    return this.getTypedRuleContext(MinLengthContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	BINARY() {
	    return this.getToken(GqlParser.BINARY, 0);
	};

	fixedLength() {
	    return this.getTypedRuleContext(FixedLengthContext,0);
	};

	VARBINARY() {
	    return this.getToken(GqlParser.VARBINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MinLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_minLength;
    }

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMinLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMinLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitMinLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MaxLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_maxLength;
    }

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMaxLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMaxLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitMaxLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FixedLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fixedLength;
    }

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFixedLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFixedLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFixedLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericType;
    }

	exactNumericType() {
	    return this.getTypedRuleContext(ExactNumericTypeContext,0);
	};

	approximateNumericType() {
	    return this.getTypedRuleContext(ApproximateNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_exactNumericType;
    }

	binaryExactNumericType() {
	    return this.getTypedRuleContext(BinaryExactNumericTypeContext,0);
	};

	decimalExactNumericType() {
	    return this.getTypedRuleContext(DecimalExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExactNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitExactNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_binaryExactNumericType;
    }

	signedBinaryExactNumericType() {
	    return this.getTypedRuleContext(SignedBinaryExactNumericTypeContext,0);
	};

	unsignedBinaryExactNumericType() {
	    return this.getTypedRuleContext(UnsignedBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBinaryExactNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBinaryExactNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_signedBinaryExactNumericType;
    }

	INT8() {
	    return this.getToken(GqlParser.INT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INT16() {
	    return this.getToken(GqlParser.INT16, 0);
	};

	INT32() {
	    return this.getToken(GqlParser.INT32, 0);
	};

	INT64() {
	    return this.getToken(GqlParser.INT64, 0);
	};

	INT128() {
	    return this.getToken(GqlParser.INT128, 0);
	};

	INT256() {
	    return this.getToken(GqlParser.INT256, 0);
	};

	SMALLINT() {
	    return this.getToken(GqlParser.SMALLINT, 0);
	};

	INT() {
	    return this.getToken(GqlParser.INT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	BIGINT() {
	    return this.getToken(GqlParser.BIGINT, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	SIGNED() {
	    return this.getToken(GqlParser.SIGNED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSignedBinaryExactNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSignedBinaryExactNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnsignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedBinaryExactNumericType;
    }

	UINT8() {
	    return this.getToken(GqlParser.UINT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	UINT16() {
	    return this.getToken(GqlParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(GqlParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(GqlParser.UINT64, 0);
	};

	UINT128() {
	    return this.getToken(GqlParser.UINT128, 0);
	};

	UINT256() {
	    return this.getToken(GqlParser.UINT256, 0);
	};

	USMALLINT() {
	    return this.getToken(GqlParser.USMALLINT, 0);
	};

	UINT() {
	    return this.getToken(GqlParser.UINT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	UBIGINT() {
	    return this.getToken(GqlParser.UBIGINT, 0);
	};

	UNSIGNED() {
	    return this.getToken(GqlParser.UNSIGNED, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedBinaryExactNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnsignedBinaryExactNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VerboseBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_verboseBinaryExactNumericType;
    }

	INTEGER8() {
	    return this.getToken(GqlParser.INTEGER8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INTEGER16() {
	    return this.getToken(GqlParser.INTEGER16, 0);
	};

	INTEGER32() {
	    return this.getToken(GqlParser.INTEGER32, 0);
	};

	INTEGER64() {
	    return this.getToken(GqlParser.INTEGER64, 0);
	};

	INTEGER128() {
	    return this.getToken(GqlParser.INTEGER128, 0);
	};

	INTEGER256() {
	    return this.getToken(GqlParser.INTEGER256, 0);
	};

	SMALL() {
	    return this.getToken(GqlParser.SMALL, 0);
	};

	INTEGER() {
	    return this.getToken(GqlParser.INTEGER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	BIG() {
	    return this.getToken(GqlParser.BIG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterVerboseBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitVerboseBinaryExactNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitVerboseBinaryExactNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecimalExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_decimalExactNumericType;
    }

	DECIMAL() {
	    return this.getToken(GqlParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(GqlParser.DEC, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDecimalExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDecimalExactNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDecimalExactNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_precision;
    }

	UNSIGNED_DECIMAL_INT() {
	    return this.getToken(GqlParser.UNSIGNED_DECIMAL_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPrecision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPrecision(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPrecision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScaleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_scale;
    }

	UNSIGNED_DECIMAL_INT() {
	    return this.getToken(GqlParser.UNSIGNED_DECIMAL_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterScale(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitScale(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitScale(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ApproximateNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_approximateNumericType;
    }

	FLOAT16() {
	    return this.getToken(GqlParser.FLOAT16, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	FLOAT32() {
	    return this.getToken(GqlParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(GqlParser.FLOAT64, 0);
	};

	FLOAT128() {
	    return this.getToken(GqlParser.FLOAT128, 0);
	};

	FLOAT256() {
	    return this.getToken(GqlParser.FLOAT256, 0);
	};

	FLOAT() {
	    return this.getToken(GqlParser.FLOAT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	REAL() {
	    return this.getToken(GqlParser.REAL, 0);
	};

	DOUBLE() {
	    return this.getToken(GqlParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(GqlParser.PRECISION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterApproximateNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitApproximateNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitApproximateNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemporalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_temporalType;
    }

	temporalInstantType() {
	    return this.getTypedRuleContext(TemporalInstantTypeContext,0);
	};

	temporalDurationType() {
	    return this.getTypedRuleContext(TemporalDurationTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTemporalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTemporalType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTemporalType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemporalInstantTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_temporalInstantType;
    }

	dateTimeType() {
	    return this.getTypedRuleContext(DateTimeTypeContext,0);
	};

	localDateTimeType() {
	    return this.getTypedRuleContext(LocalDateTimeTypeContext,0);
	};

	dateType() {
	    return this.getTypedRuleContext(DateTypeContext,0);
	};

	timeType() {
	    return this.getTypedRuleContext(TimeTypeContext,0);
	};

	localTimeType() {
	    return this.getTypedRuleContext(LocalTimeTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTemporalInstantType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTemporalInstantType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTemporalInstantType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemporalDurationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_temporalDurationType;
    }

	durationType() {
	    return this.getTypedRuleContext(DurationTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTemporalDurationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTemporalDurationType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTemporalDurationType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeType;
    }

	ZONED() {
	    return this.getToken(GqlParser.ZONED, 0);
	};

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GqlParser.TIMESTAMP, 0);
	};

	WITH() {
	    return this.getToken(GqlParser.WITH, 0);
	};

	TIMEZONE() {
	    return this.getToken(GqlParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalDateTimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localDateTimeType;
    }

	LOCAL() {
	    return this.getToken(GqlParser.LOCAL, 0);
	};

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GqlParser.TIMESTAMP, 0);
	};

	WITHOUT() {
	    return this.getToken(GqlParser.WITHOUT, 0);
	};

	TIMEZONE() {
	    return this.getToken(GqlParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalDateTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalDateTimeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLocalDateTimeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateType;
    }

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeType;
    }

	ZONED() {
	    return this.getToken(GqlParser.ZONED, 0);
	};

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITH() {
	    return this.getToken(GqlParser.WITH, 0);
	};

	TIMEZONE() {
	    return this.getToken(GqlParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTimeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalTimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localTimeType;
    }

	LOCAL() {
	    return this.getToken(GqlParser.LOCAL, 0);
	};

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITHOUT() {
	    return this.getToken(GqlParser.WITHOUT, 0);
	};

	TIMEZONE() {
	    return this.getToken(GqlParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalTimeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLocalTimeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationType;
    }

	DURATION() {
	    return this.getToken(GqlParser.DURATION, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_refValueType;
    }

	graphRefValueType() {
	    return this.getTypedRuleContext(GraphRefValueTypeContext,0);
	};

	bindingTableRefValueType() {
	    return this.getTypedRuleContext(BindingTableRefValueTypeContext,0);
	};

	nodeRefValueType() {
	    return this.getTypedRuleContext(NodeRefValueTypeContext,0);
	};

	edgeRefValueType() {
	    return this.getTypedRuleContext(EdgeRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphRefValueType;
    }

	openGraphRefValueType() {
	    return this.getTypedRuleContext(OpenGraphRefValueTypeContext,0);
	};

	closedGraphRefValueType() {
	    return this.getTypedRuleContext(ClosedGraphRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenGraphRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_openGraphRefValueType;
    }

	OPEN() {
	    return this.getToken(GqlParser.OPEN, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOpenGraphRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOpenGraphRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOpenGraphRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClosedGraphRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_closedGraphRefValueType;
    }

	graphTypeSpec() {
	    return this.getTypedRuleContext(GraphTypeSpecContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterClosedGraphRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitClosedGraphRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitClosedGraphRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableRefValueType;
    }

	bindingTableType() {
	    return this.getTypedRuleContext(BindingTableTypeContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeRefValueType;
    }

	openNodeRefValueType() {
	    return this.getTypedRuleContext(OpenNodeRefValueTypeContext,0);
	};

	closedNodeRefValueType() {
	    return this.getTypedRuleContext(ClosedNodeRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenNodeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_openNodeRefValueType;
    }

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	OPEN() {
	    return this.getToken(GqlParser.OPEN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOpenNodeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOpenNodeRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOpenNodeRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClosedNodeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_closedNodeRefValueType;
    }

	edgeTypeDef() {
	    return this.getTypedRuleContext(EdgeTypeDefContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterClosedNodeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitClosedNodeRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitClosedNodeRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeRefValueType;
    }

	openEdgeRefValueType() {
	    return this.getTypedRuleContext(OpenEdgeRefValueTypeContext,0);
	};

	closedEdgeRefValueType() {
	    return this.getTypedRuleContext(ClosedEdgeRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenEdgeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_openEdgeRefValueType;
    }

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	OPEN() {
	    return this.getToken(GqlParser.OPEN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOpenEdgeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOpenEdgeRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOpenEdgeRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClosedEdgeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_closedEdgeRefValueType;
    }

	edgeTypeDef() {
	    return this.getTypedRuleContext(EdgeTypeDefContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterClosedEdgeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitClosedEdgeRefValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitClosedEdgeRefValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_constructedType;
    }

	listValueType() {
	    return this.getTypedRuleContext(ListValueTypeContext,0);
	};

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterConstructedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitConstructedType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitConstructedType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueType;
    }

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	};

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GqlParser.LEFT_BRACKET, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListValueTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueTypeName;
    }

	listValueTypeNameSynonym() {
	    return this.getTypedRuleContext(ListValueTypeNameSynonymContext,0);
	};

	GROUP() {
	    return this.getToken(GqlParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListValueTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListValueTypeNameSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueTypeNameSynonym;
    }

	LIST() {
	    return this.getToken(GqlParser.LIST, 0);
	};

	ARRAY() {
	    return this.getToken(GqlParser.ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueTypeNameSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueTypeNameSynonym(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListValueTypeNameSynonym(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordType;
    }

	RECORD() {
	    return this.getToken(GqlParser.RECORD, 0);
	};

	OPEN() {
	    return this.getToken(GqlParser.OPEN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	fieldTypesSpec() {
	    return this.getTypedRuleContext(FieldTypesSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRecordType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldTypesSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldTypesSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	fieldTypeList() {
	    return this.getTypedRuleContext(FieldTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldTypesSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldTypesSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFieldTypesSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldTypeList;
    }

	fieldType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldTypeContext);
	    } else {
	        return this.getTypedRuleContext(FieldTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFieldTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dynamicUnionType;
    }

	openDynamicUnionType() {
	    return this.getTypedRuleContext(OpenDynamicUnionTypeContext,0);
	};

	dynamicPropertyValueType() {
	    return this.getTypedRuleContext(DynamicPropertyValueTypeContext,0);
	};

	closedDynamicUnionType() {
	    return this.getTypedRuleContext(ClosedDynamicUnionTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDynamicUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDynamicUnionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDynamicUnionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenDynamicUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_openDynamicUnionType;
    }

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterOpenDynamicUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitOpenDynamicUnionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitOpenDynamicUnionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicPropertyValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dynamicPropertyValueType;
    }

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDynamicPropertyValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDynamicPropertyValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDynamicPropertyValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClosedDynamicUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_closedDynamicUnionType;
    }

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	};

	componentTypeList() {
	    return this.getTypedRuleContext(ComponentTypeListContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterClosedDynamicUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitClosedDynamicUnionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitClosedDynamicUnionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComponentTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_componentTypeList;
    }

	componentType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentTypeContext);
	    } else {
	        return this.getTypedRuleContext(ComponentTypeContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComponentTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComponentTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitComponentTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComponentTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_componentType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComponentType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComponentType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitComponentType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathValueType;
    }

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathValueType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathValueType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NotNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_notNull;
    }

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNotNull(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNotNull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldType;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFieldType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_schemaRef;
    }

	absoluteCatalogSchemaRef() {
	    return this.getTypedRuleContext(AbsoluteCatalogSchemaRefContext,0);
	};

	relativeCatalogSchemaRef() {
	    return this.getTypedRuleContext(RelativeCatalogSchemaRefContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSchemaRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSchemaRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbsoluteCatalogSchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_absoluteCatalogSchemaRef;
    }

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbsoluteCatalogSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbsoluteCatalogSchemaRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbsoluteCatalogSchemaRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatalogSchemaParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogSchemaParentAndName;
    }

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogSchemaParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogSchemaParentAndName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCatalogSchemaParentAndName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelativeCatalogSchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_relativeCatalogSchemaRef;
    }

	predefinedSchemaRef() {
	    return this.getTypedRuleContext(PredefinedSchemaRefContext,0);
	};

	relativeDirectoryPath() {
	    return this.getTypedRuleContext(RelativeDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRelativeCatalogSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRelativeCatalogSchemaRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRelativeCatalogSchemaRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredefinedSchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedSchemaRef;
    }

	HOME_SCHEMA() {
	    return this.getToken(GqlParser.HOME_SCHEMA, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(GqlParser.CURRENT_SCHEMA, 0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedSchemaRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPredefinedSchemaRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbsoluteDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_absoluteDirectoryPath;
    }

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbsoluteDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbsoluteDirectoryPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbsoluteDirectoryPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelativeDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_relativeDirectoryPath;
    }

	DOUBLE_PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DOUBLE_PERIOD);
	    } else {
	        return this.getToken(GqlParser.DOUBLE_PERIOD, i);
	    }
	};


	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SOLIDUS);
	    } else {
	        return this.getToken(GqlParser.SOLIDUS, i);
	    }
	};


	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRelativeDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRelativeDirectoryPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRelativeDirectoryPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleDirectoryPath;
    }

	directoryName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirectoryNameContext);
	    } else {
	        return this.getTypedRuleContext(DirectoryNameContext,i);
	    }
	};

	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.SOLIDUS);
	    } else {
	        return this.getToken(GqlParser.SOLIDUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleDirectoryPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleDirectoryPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphRef;
    }

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	homeGraph() {
	    return this.getTypedRuleContext(HomeGraphContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatalogGraphParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogGraphParentAndName;
    }

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogGraphParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogGraphParentAndName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCatalogGraphParentAndName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HomeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_homeGraph;
    }

	HOME_PROPERTY_GRAPH() {
	    return this.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0);
	};

	HOME_GRAPH() {
	    return this.getToken(GqlParser.HOME_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterHomeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitHomeGraph(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitHomeGraph(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeRef;
    }

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphTypeRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatalogGraphTypeParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogGraphTypeParentAndName;
    }

	graphTypeName() {
	    return this.getTypedRuleContext(GraphTypeNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogGraphTypeParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogGraphTypeParentAndName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCatalogGraphTypeParentAndName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableRef;
    }

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	bindingTableName() {
	    return this.getTypedRuleContext(BindingTableNameContext,0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatalogBindingTableParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogBindingTableParentAndName;
    }

	bindingTableName() {
	    return this.getTypedRuleContext(BindingTableNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogBindingTableParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogBindingTableParentAndName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCatalogBindingTableParentAndName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureRef;
    }

	catalogProcedureParentAndName() {
	    return this.getTypedRuleContext(CatalogProcedureParentAndNameContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProcedureRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatalogProcedureParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogProcedureParentAndName;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogProcedureParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogProcedureParentAndName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCatalogProcedureParentAndName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatalogObjectParentRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_catalogObjectParentRef;
    }

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	objectName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectNameContext);
	    } else {
	        return this.getTypedRuleContext(ObjectNameContext,i);
	    }
	};

	PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.PERIOD);
	    } else {
	        return this.getToken(GqlParser.PERIOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCatalogObjectParentRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCatalogObjectParentRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCatalogObjectParentRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_refParameter;
    }

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRefParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRefParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRefParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternalObjectRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_externalObjectRef;
    }


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExternalObjectRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExternalObjectRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitExternalObjectRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SearchConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_searchCondition;
    }

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSearchCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSearchCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSearchCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predicate;
    }

	comparisonPredicate() {
	    return this.getTypedRuleContext(ComparisonPredicateContext,0);
	};

	existsPredicate() {
	    return this.getTypedRuleContext(ExistsPredicateContext,0);
	};

	nullPredicate() {
	    return this.getTypedRuleContext(NullPredicateContext,0);
	};

	valueTypePredicate() {
	    return this.getTypedRuleContext(ValueTypePredicateContext,0);
	};

	normalizedPredicate() {
	    return this.getTypedRuleContext(NormalizedPredicateContext,0);
	};

	directedPredicate() {
	    return this.getTypedRuleContext(DirectedPredicateContext,0);
	};

	labeledPredicate() {
	    return this.getTypedRuleContext(LabeledPredicateContext,0);
	};

	sourceOrDestinationPredicate() {
	    return this.getTypedRuleContext(SourceOrDestinationPredicateContext,0);
	};

	allDifferentPredicate() {
	    return this.getTypedRuleContext(AllDifferentPredicateContext,0);
	};

	samePredicate() {
	    return this.getTypedRuleContext(SamePredicateContext,0);
	};

	propertyExistsPredicate() {
	    return this.getTypedRuleContext(PropertyExistsPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comparisonPredicate;
    }

	comparisonPredicand() {
	    return this.getTypedRuleContext(ComparisonPredicandContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComparisonPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComparisonPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitComparisonPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comparisonPredicatePart2;
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	comparisonPredicand() {
	    return this.getTypedRuleContext(ComparisonPredicandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComparisonPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComparisonPredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitComparisonPredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comparisonOperator;
    }

	EQUALS() {
	    return this.getToken(GqlParser.EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(GqlParser.NOT_EQUALS, 0);
	};

	LESS_THAN() {
	    return this.getToken(GqlParser.LESS_THAN, 0);
	};

	GREATER_THAN() {
	    return this.getToken(GqlParser.GREATER_THAN, 0);
	};

	LESS_THAN_OR_EQUALS() {
	    return this.getToken(GqlParser.LESS_THAN_OR_EQUALS, 0);
	};

	GREATER_THAN_OR_EQUALS() {
	    return this.getToken(GqlParser.GREATER_THAN_OR_EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitComparisonOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonPredicandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comparisonPredicand;
    }

	commonValueExpr() {
	    return this.getTypedRuleContext(CommonValueExprContext,0);
	};

	booleanPredicand() {
	    return this.getTypedRuleContext(BooleanPredicandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComparisonPredicand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComparisonPredicand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitComparisonPredicand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExistsPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_existsPredicate;
    }

	EXISTS() {
	    return this.getToken(GqlParser.EXISTS, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	matchStatmentBlock() {
	    return this.getTypedRuleContext(MatchStatmentBlockContext,0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExistsPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExistsPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitExistsPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nullPredicate;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNullPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNullPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nullPredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNullPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNullPredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNullPredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueTypePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueTypePredicate;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	valueTypePredicatePart2() {
	    return this.getTypedRuleContext(ValueTypePredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueTypePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueTypePredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueTypePredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueTypePredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueTypePredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueTypePredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueTypePredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueTypePredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalizedPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalizedPredicate;
    }

	stringValueExpr() {
	    return this.getTypedRuleContext(StringValueExprContext,0);
	};

	normalizedPredicatePart2() {
	    return this.getTypedRuleContext(NormalizedPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalizedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalizedPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNormalizedPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalizedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalizedPredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	NORMALIZED() {
	    return this.getToken(GqlParser.NORMALIZED, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalizedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalizedPredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNormalizedPredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DirectedPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_directedPredicate;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	directedPredicate() {
	    return this.getTypedRuleContext(DirectedPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDirectedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDirectedPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDirectedPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DirectedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_directedPredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	DIRECTED() {
	    return this.getToken(GqlParser.DIRECTED, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDirectedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDirectedPredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDirectedPredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labeledPredicate;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabeledPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabeledPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabeledPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labeledPredicatePart2;
    }

	isLabeledOrColon() {
	    return this.getTypedRuleContext(IsLabeledOrColonContext,0);
	};

	labelExpr() {
	    return this.getTypedRuleContext(LabelExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabeledPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabeledPredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabeledPredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsLabeledOrColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_isLabeledOrColon;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	LABELED() {
	    return this.getToken(GqlParser.LABELED, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIsLabeledOrColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIsLabeledOrColon(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitIsLabeledOrColon(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceOrDestinationPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sourceOrDestinationPredicate;
    }

	nodeRef() {
	    return this.getTypedRuleContext(NodeRefContext,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSourceOrDestinationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSourceOrDestinationPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSourceOrDestinationPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeRef;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourcePredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sourcePredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	SOURCE() {
	    return this.getToken(GqlParser.SOURCE, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	edgeRef() {
	    return this.getTypedRuleContext(EdgeRefContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSourcePredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSourcePredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSourcePredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestinationPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_destinationPredicatePart2;
    }

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	DESTINATION() {
	    return this.getToken(GqlParser.DESTINATION, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	edgeRef() {
	    return this.getTypedRuleContext(EdgeRefContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDestinationPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDestinationPredicatePart2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDestinationPredicatePart2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeRef;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AllDifferentPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_allDifferentPredicate;
    }

	ALL_DIFFERENT() {
	    return this.getToken(GqlParser.ALL_DIFFERENT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementVarRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVarRefContext);
	    } else {
	        return this.getTypedRuleContext(ElementVarRefContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAllDifferentPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAllDifferentPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAllDifferentPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SamePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_samePredicate;
    }

	SAME() {
	    return this.getToken(GqlParser.SAME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementVarRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVarRefContext);
	    } else {
	        return this.getTypedRuleContext(ElementVarRefContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSamePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSamePredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSamePredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyExistsPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyExistsPredicate;
    }

	PROPERTY_EXISTS() {
	    return this.getToken(GqlParser.PROPERTY_EXISTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyExistsPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyExistsPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyExistsPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueSpec;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	parameterValueSpec() {
	    return this.getTypedRuleContext(ParameterValueSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnsignedValueSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedValueSpec;
    }

	unsignedLiteral() {
	    return this.getTypedRuleContext(UnsignedLiteralContext,0);
	};

	parameterValueSpec() {
	    return this.getTypedRuleContext(ParameterValueSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedValueSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedValueSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnsignedValueSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnsignedIntSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedIntSpec;
    }

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedIntSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedIntSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnsignedIntSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterValueSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameterValueSpec;
    }

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	predefinedParameter() {
	    return this.getTypedRuleContext(PredefinedParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameterValueSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameterValueSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParameterValueSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredefinedParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedParameter;
    }

	CURRENT_USER() {
	    return this.getToken(GqlParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPredefinedParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueExpr;
    }

	commonValueExpr() {
	    return this.getTypedRuleContext(CommonValueExprContext,0);
	};

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommonValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_commonValueExpr;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	stringValueExpr() {
	    return this.getTypedRuleContext(StringValueExprContext,0);
	};

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	recordValueExpr() {
	    return this.getTypedRuleContext(RecordValueExprContext,0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	refValueExpr() {
	    return this.getTypedRuleContext(RefValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCommonValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCommonValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCommonValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_refValueExpr;
    }

	graphRefValueExpr() {
	    return this.getTypedRuleContext(GraphRefValueExprContext,0);
	};

	bindingTableRefValueExpr() {
	    return this.getTypedRuleContext(BindingTableRefValueExprContext,0);
	};

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	edgeRefValueExpr() {
	    return this.getTypedRuleContext(EdgeRefValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRefValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRefValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphRefValueExpr;
    }

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphRefValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphRefValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableRefValueExpr;
    }

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	bindingTableExpr() {
	    return this.getTypedRuleContext(BindingTableExprContext,0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableRefValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableRefValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeRefValueExpr;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeRefValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeRefValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeRefValueExpr;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeRefValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeRefValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordValueExpr;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRecordValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregatingValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_aggregatingValueExpr;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAggregatingValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAggregatingValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAggregatingValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanValueExpr;
    }

	booleanTerm() {
	    return this.getTypedRuleContext(BooleanTermContext,0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	XOR() {
	    return this.getToken(GqlParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanTerm;
    }

	booleanFactor() {
	    return this.getTypedRuleContext(BooleanFactorContext,0);
	};

	booleanTerm() {
	    return this.getTypedRuleContext(BooleanTermContext,0);
	};

	AND() {
	    return this.getToken(GqlParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanFactor;
    }

	booleanTest() {
	    return this.getTypedRuleContext(BooleanTestContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanTest;
    }

	booleanPrimary() {
	    return this.getTypedRuleContext(BooleanPrimaryContext,0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	truthValue() {
	    return this.getTypedRuleContext(TruthValueContext,0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanTest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanTest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruthValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_truthValue;
    }

	TRUE() {
	    return this.getToken(GqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(GqlParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(GqlParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTruthValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTruthValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTruthValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanPrimary;
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	booleanPredicand() {
	    return this.getTypedRuleContext(BooleanPredicandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanPredicandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanPredicand;
    }

	paranthisedBooleanValueExpr() {
	    return this.getTypedRuleContext(ParanthisedBooleanValueExprContext,0);
	};

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanPredicand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanPredicand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanPredicand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParanthisedBooleanValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_paranthisedBooleanValueExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParanthisedBooleanValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParanthisedBooleanValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParanthisedBooleanValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueExpr;
    }

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_term;
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_factor;
    }

	numericPrimary() {
	    return this.getTypedRuleContext(NumericPrimaryContext,0);
	};

	SIGN() {
	    return this.getToken(GqlParser.SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	numericValueFunction() {
	    return this.getTypedRuleContext(NumericValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueExprPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueExprPrimary;
    }

	parenthesizedValueExpr() {
	    return this.getTypedRuleContext(ParenthesizedValueExprContext,0);
	};

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueExprPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueExprPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueExprPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesizedValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parenthesizedValueExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParenthesizedValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParenthesizedValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParenthesizedValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonParenthesizedValueExprPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonParenthesizedValueExprPrimary;
    }

	nonParenthesizedValueExprPrimarySpecialCase() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimarySpecialCaseContext,0);
	};

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonParenthesizedValueExprPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonParenthesizedValueExprPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNonParenthesizedValueExprPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonParenthesizedValueExprPrimarySpecialCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonParenthesizedValueExprPrimarySpecialCase;
    }

	unsignedValueSpec() {
	    return this.getTypedRuleContext(UnsignedValueSpecContext,0);
	};

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	collectionValueConstructor() {
	    return this.getTypedRuleContext(CollectionValueConstructorContext,0);
	};

	valueQueryExpr() {
	    return this.getTypedRuleContext(ValueQueryExprContext,0);
	};

	caseExpr() {
	    return this.getTypedRuleContext(CaseExprContext,0);
	};

	letValueExpr() {
	    return this.getTypedRuleContext(LetValueExprContext,0);
	};

	castSpec() {
	    return this.getTypedRuleContext(CastSpecContext,0);
	};

	elementIdFunction() {
	    return this.getTypedRuleContext(ElementIdFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNonParenthesizedValueExprPrimarySpecialCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CollectionValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_collectionValueConstructor;
    }

	listValueConstructor() {
	    return this.getTypedRuleContext(ListValueConstructorContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	pathValueConstructor() {
	    return this.getTypedRuleContext(PathValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCollectionValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCollectionValueConstructor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCollectionValueConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueFunction;
    }

	lengthExpr() {
	    return this.getTypedRuleContext(LengthExprContext,0);
	};

	absoluteValueExpr() {
	    return this.getTypedRuleContext(AbsoluteValueExprContext,0);
	};

	modulusExpr() {
	    return this.getTypedRuleContext(ModulusExprContext,0);
	};

	trigonometricFunction() {
	    return this.getTypedRuleContext(TrigonometricFunctionContext,0);
	};

	logarithmFunction() {
	    return this.getTypedRuleContext(LogarithmFunctionContext,0);
	};

	exponentialFunction() {
	    return this.getTypedRuleContext(ExponentialFunctionContext,0);
	};

	powerFunction() {
	    return this.getTypedRuleContext(PowerFunctionContext,0);
	};

	squareRootFunciton() {
	    return this.getTypedRuleContext(SquareRootFuncitonContext,0);
	};

	floorFunction() {
	    return this.getTypedRuleContext(FloorFunctionContext,0);
	};

	ceilingFunction() {
	    return this.getTypedRuleContext(CeilingFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericValueFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_lengthExpr;
    }

	charLengthExpr() {
	    return this.getTypedRuleContext(CharLengthExprContext,0);
	};

	byteLengthExpr() {
	    return this.getTypedRuleContext(ByteLengthExprContext,0);
	};

	pathLengthExpr() {
	    return this.getTypedRuleContext(PathLengthExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLengthExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLengthExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharLengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charLengthExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(GqlParser.CHAR_LENGTH, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(GqlParser.CHARACTER_LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharLengthExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharLengthExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteLengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteLengthExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	BYTE_LENGTH() {
	    return this.getToken(GqlParser.BYTE_LENGTH, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(GqlParser.OCTET_LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteLengthExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteLengthExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathLengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathLengthExpr;
    }

	PATH_LENGTH() {
	    return this.getToken(GqlParser.PATH_LENGTH, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathLengthExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathLengthExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbsoluteValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_absoluteValueExpr;
    }

	ABS() {
	    return this.getToken(GqlParser.ABS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAbsoluteValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAbsoluteValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAbsoluteValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModulusExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_modulusExpr;
    }

	MOD() {
	    return this.getToken(GqlParser.MOD, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExprDividen() {
	    return this.getTypedRuleContext(NumericValueExprDividenContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	numericValueExprDivisor() {
	    return this.getTypedRuleContext(NumericValueExprDivisorContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterModulusExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitModulusExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitModulusExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericValueExprDividenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueExprDividen;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueExprDividen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueExprDividen(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericValueExprDividen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericValueExprDivisorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueExprDivisor;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueExprDivisor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueExprDivisor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericValueExprDivisor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrigonometricFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trigonometricFunction;
    }

	trigonometricFunctionName() {
	    return this.getTypedRuleContext(TrigonometricFunctionNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrigonometricFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrigonometricFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrigonometricFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrigonometricFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trigonometricFunctionName;
    }

	SIN() {
	    return this.getToken(GqlParser.SIN, 0);
	};

	COS() {
	    return this.getToken(GqlParser.COS, 0);
	};

	TAN() {
	    return this.getToken(GqlParser.TAN, 0);
	};

	COT() {
	    return this.getToken(GqlParser.COT, 0);
	};

	SINH() {
	    return this.getToken(GqlParser.SINH, 0);
	};

	COSH() {
	    return this.getToken(GqlParser.COSH, 0);
	};

	TANH() {
	    return this.getToken(GqlParser.TANH, 0);
	};

	ASIN() {
	    return this.getToken(GqlParser.ASIN, 0);
	};

	ACOS() {
	    return this.getToken(GqlParser.ACOS, 0);
	};

	ATAN() {
	    return this.getToken(GqlParser.ATAN, 0);
	};

	DEGREES() {
	    return this.getToken(GqlParser.DEGREES, 0);
	};

	RADIANS() {
	    return this.getToken(GqlParser.RADIANS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrigonometricFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrigonometricFunctionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrigonometricFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_logarithmFunction;
    }

	generalLogarithmFunction() {
	    return this.getTypedRuleContext(GeneralLogarithmFunctionContext,0);
	};

	commonLogarithmFunction() {
	    return this.getTypedRuleContext(CommonLogarithmFunctionContext,0);
	};

	naturalLogarithmFunction() {
	    return this.getTypedRuleContext(NaturalLogarithmFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLogarithmFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLogarithmFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalLogarithmFunction;
    }

	MOD() {
	    return this.getToken(GqlParser.MOD, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	generalLogarithmBase() {
	    return this.getTypedRuleContext(GeneralLogarithmBaseContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	generalLogarithmArgument() {
	    return this.getTypedRuleContext(GeneralLogarithmArgumentContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralLogarithmFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGeneralLogarithmFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralLogarithmBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalLogarithmBase;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralLogarithmBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralLogarithmBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGeneralLogarithmBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralLogarithmArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalLogarithmArgument;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralLogarithmArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralLogarithmArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGeneralLogarithmArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommonLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_commonLogarithmFunction;
    }

	LOG10() {
	    return this.getToken(GqlParser.LOG10, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCommonLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCommonLogarithmFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCommonLogarithmFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NaturalLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_naturalLogarithmFunction;
    }

	LN() {
	    return this.getToken(GqlParser.LN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNaturalLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNaturalLogarithmFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNaturalLogarithmFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExponentialFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_exponentialFunction;
    }

	EXP() {
	    return this.getToken(GqlParser.EXP, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterExponentialFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitExponentialFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitExponentialFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PowerFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_powerFunction;
    }

	POWER() {
	    return this.getToken(GqlParser.POWER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExprBase() {
	    return this.getTypedRuleContext(NumericValueExprBaseContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	numericValueExprExponent() {
	    return this.getTypedRuleContext(NumericValueExprExponentContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPowerFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPowerFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPowerFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericValueExprBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueExprBase;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueExprBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueExprBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericValueExprBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericValueExprExponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_numericValueExprExponent;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNumericValueExprExponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNumericValueExprExponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNumericValueExprExponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SquareRootFuncitonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_squareRootFunciton;
    }

	SQRT() {
	    return this.getToken(GqlParser.SQRT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSquareRootFunciton(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSquareRootFunciton(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSquareRootFunciton(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloorFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_floorFunction;
    }

	FLOOR() {
	    return this.getToken(GqlParser.FLOOR, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFloorFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFloorFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFloorFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CeilingFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_ceilingFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	CEIL() {
	    return this.getToken(GqlParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(GqlParser.CEILING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCeilingFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCeilingFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCeilingFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_stringValueExpr;
    }

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStringValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStringValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitStringValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharStringValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charStringValueExpr;
    }

	charStringConcatenation() {
	    return this.getTypedRuleContext(CharStringConcatenationContext,0);
	};

	charStringFactor() {
	    return this.getTypedRuleContext(CharStringFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharStringValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharStringValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharStringValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharStringConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charStringConcatenation;
    }

	charStringFactor() {
	    return this.getTypedRuleContext(CharStringFactorContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GqlParser.CONCATENATION, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharStringConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharStringConcatenation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharStringConcatenation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharStringFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charStringFactor;
    }

	charStringPrimary() {
	    return this.getTypedRuleContext(CharStringPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharStringFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharStringFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharStringFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharStringPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charStringPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	stringValueFunction() {
	    return this.getTypedRuleContext(StringValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharStringPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharStringPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharStringPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringValueExpr;
    }

	byteStringConcatenation() {
	    return this.getTypedRuleContext(ByteStringConcatenationContext,0);
	};

	byteStringFactor() {
	    return this.getTypedRuleContext(ByteStringFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringFactor;
    }

	byteStringPrimary() {
	    return this.getTypedRuleContext(ByteStringPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	stringValueFunction() {
	    return this.getTypedRuleContext(StringValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringConcatenation;
    }

	byteStringFactor() {
	    return this.getTypedRuleContext(ByteStringFactorContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GqlParser.CONCATENATION, 0);
	};

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringConcatenation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringConcatenation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_stringValueFunction;
    }

	charStringFunction() {
	    return this.getTypedRuleContext(CharStringFunctionContext,0);
	};

	byteStringFunction() {
	    return this.getTypedRuleContext(ByteStringFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStringValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStringValueFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitStringValueFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharStringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_charStringFunction;
    }

	foldFunction() {
	    return this.getTypedRuleContext(FoldFunctionContext,0);
	};

	trimFunction() {
	    return this.getTypedRuleContext(TrimFunctionContext,0);
	};

	normalizeFunction() {
	    return this.getTypedRuleContext(NormalizeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FoldFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_foldFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	UPPER() {
	    return this.getToken(GqlParser.UPPER, 0);
	};

	LOWER() {
	    return this.getToken(GqlParser.LOWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFoldFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFoldFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFoldFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimFunction;
    }

	singleCharTrimFunction() {
	    return this.getTypedRuleContext(SingleCharTrimFunctionContext,0);
	};

	multiCharTrimFunction() {
	    return this.getTypedRuleContext(MultiCharTrimFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrimFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleCharTrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_singleCharTrimFunction;
    }

	TRIM() {
	    return this.getToken(GqlParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	trimOperands() {
	    return this.getTypedRuleContext(TrimOperandsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSingleCharTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSingleCharTrimFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSingleCharTrimFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiCharTrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_multiCharTrimFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	trimSource() {
	    return this.getTypedRuleContext(TrimSourceContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	BTRIM() {
	    return this.getToken(GqlParser.BTRIM, 0);
	};

	LTRIM() {
	    return this.getToken(GqlParser.LTRIM, 0);
	};

	RTRIM() {
	    return this.getToken(GqlParser.RTRIM, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	trimCharString() {
	    return this.getTypedRuleContext(TrimCharStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterMultiCharTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitMultiCharTrimFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitMultiCharTrimFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimOperandsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimOperands;
    }

	trimSource() {
	    return this.getTypedRuleContext(TrimSourceContext,0);
	};

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	trimSpec() {
	    return this.getTypedRuleContext(TrimSpecContext,0);
	};

	trimCharString() {
	    return this.getTypedRuleContext(TrimCharStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimOperands(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimOperands(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrimOperands(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimSource;
    }

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrimSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimSpec;
    }

	LEADING() {
	    return this.getToken(GqlParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(GqlParser.TRAILING, 0);
	};

	BOTH() {
	    return this.getToken(GqlParser.BOTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrimSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimCharStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimCharString;
    }

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimCharString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimCharString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrimCharString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalizeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalizeFunction;
    }

	NORMALIZE() {
	    return this.getToken(GqlParser.NORMALIZE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalizeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalizeFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNormalizeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_normalForm;
    }

	NFC() {
	    return this.getToken(GqlParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GqlParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GqlParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GqlParser.NFKD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNormalForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNormalForm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNormalForm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringFunction;
    }

	byteStrinTrimFunction() {
	    return this.getTypedRuleContext(ByteStrinTrimFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStrinTrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStrinTrimFunction;
    }

	TRIM() {
	    return this.getToken(GqlParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	byteStringTrimOperands() {
	    return this.getTypedRuleContext(ByteStringTrimOperandsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStrinTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStrinTrimFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStrinTrimFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringTrimOperandsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringTrimOperands;
    }

	byteStringTrimSource() {
	    return this.getTypedRuleContext(ByteStringTrimSourceContext,0);
	};

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	trimSpec() {
	    return this.getTypedRuleContext(TrimSpecContext,0);
	};

	trimByteString() {
	    return this.getTypedRuleContext(TrimByteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringTrimOperands(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringTrimOperands(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringTrimOperands(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ByteStringTrimSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_byteStringTrimSource;
    }

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterByteStringTrimSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitByteStringTrimSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitByteStringTrimSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimByteStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimByteString;
    }

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimByteString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimByteString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrimByteString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_stringLength;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterStringLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitStringLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitStringLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeValueExpr;
    }

	dateTimeTerm() {
	    return this.getTypedRuleContext(DateTimeTermContext,0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeTerm;
    }

	dateTimeFactor() {
	    return this.getTypedRuleContext(DateTimeFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeFactor;
    }

	dateTimePrimary() {
	    return this.getTypedRuleContext(DateTimePrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimePrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimePrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	dateTimeValueFunction() {
	    return this.getTypedRuleContext(DateTimeValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimePrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimePrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimePrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeValueFunction;
    }

	dateFunction() {
	    return this.getTypedRuleContext(DateFunctionContext,0);
	};

	timeFunction() {
	    return this.getTypedRuleContext(TimeFunctionContext,0);
	};

	dateTimeFunction() {
	    return this.getTypedRuleContext(DateTimeFunctionContext,0);
	};

	localTimeFunction() {
	    return this.getTypedRuleContext(LocalTimeFunctionContext,0);
	};

	localDatetimeFunction() {
	    return this.getTypedRuleContext(LocalDatetimeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeValueFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeValueFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateFunction;
    }

	CURRENT_DATE() {
	    return this.getToken(GqlParser.CURRENT_DATE, 0);
	};

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	dateFunctionParameters() {
	    return this.getTypedRuleContext(DateFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeFunction;
    }

	CURRENT_TIME() {
	    return this.getToken(GqlParser.CURRENT_TIME, 0);
	};

	ZONED_TIME() {
	    return this.getToken(GqlParser.ZONED_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTimeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalTimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localTimeFunction;
    }

	LOCAL_TIME() {
	    return this.getToken(GqlParser.LOCAL_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalTimeFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLocalTimeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeFunction;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(GqlParser.CURRENT_TIMESTAMP, 0);
	};

	ZONED_DATETIME() {
	    return this.getToken(GqlParser.ZONED_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	dateTimeFunctionParameters() {
	    return this.getTypedRuleContext(DateTimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalDatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_localDatetimeFunction;
    }

	LOCAL_TIMESTAMP() {
	    return this.getToken(GqlParser.LOCAL_TIMESTAMP, 0);
	};

	LOCAL_DATETIME() {
	    return this.getToken(GqlParser.LOCAL_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	dateTimeFunctionParameters() {
	    return this.getTypedRuleContext(DateTimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLocalDatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLocalDatetimeFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLocalDatetimeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateFunctionParameters;
    }

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeFunctionParameters;
    }

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTimeFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeFunctionParameters;
    }

	dateTimeString() {
	    return this.getTypedRuleContext(DateTimeStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationValueExpr;
    }

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	dateTimeSubtraction() {
	    return this.getTypedRuleContext(DateTimeSubtractionContext,0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	PLUS() {
	    return this.getToken(GqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeSubtractionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeSubtraction;
    }

	DURATION_BETWEEN() {
	    return this.getToken(GqlParser.DURATION_BETWEEN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	dateTimeSubtractionParameters() {
	    return this.getTypedRuleContext(DateTimeSubtractionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeSubtraction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeSubtraction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeSubtraction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeSubtractionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeSubtractionParameters;
    }

	dateTimeValueExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeValueExprContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeValueExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeSubtractionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeSubtractionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeSubtractionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationTerm;
    }

	durationFactor() {
	    return this.getTypedRuleContext(DurationFactorContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	ASTERISK() {
	    return this.getToken(GqlParser.ASTERISK, 0);
	};

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GqlParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationFactor;
    }

	durationPrimary() {
	    return this.getTypedRuleContext(DurationPrimaryContext,0);
	};

	SIGN() {
	    return this.getToken(GqlParser.SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	durationValueFunction() {
	    return this.getTypedRuleContext(DurationValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationValueExpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationValueExpr1;
    }

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationValueExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationValueExpr1(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationValueExpr1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationTerm1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationTerm1;
    }

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationTerm1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationTerm1(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationTerm1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationTerm2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationTerm2;
    }

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationTerm2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationTerm2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationTerm2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeValueExpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeValueExpr1;
    }

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeValueExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeValueExpr1(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeValueExpr1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeValueExpr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeValueExpr2;
    }

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeValueExpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeValueExpr2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeValueExpr2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationValueFunction;
    }

	durationFunction() {
	    return this.getTypedRuleContext(DurationFunctionContext,0);
	};

	durationAbsoluteValueFunction() {
	    return this.getTypedRuleContext(DurationAbsoluteValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationValueFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationValueFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationFunction;
    }

	DURATION() {
	    return this.getToken(GqlParser.DURATION, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	durationFunctionParameters() {
	    return this.getTypedRuleContext(DurationFunctionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationFunctionParameters;
    }

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationAbsoluteValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationAbsoluteValueFunction;
    }

	ABS() {
	    return this.getToken(GqlParser.ABS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationAbsoluteValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationAbsoluteValueFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationAbsoluteValueFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueExpr;
    }

	listConcatenation() {
	    return this.getTypedRuleContext(ListConcatenationContext,0);
	};

	listPrimary() {
	    return this.getTypedRuleContext(ListPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listConcatenation;
    }

	listPrimary() {
	    return this.getTypedRuleContext(ListPrimaryContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GqlParser.CONCATENATION, 0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListConcatenation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListConcatenation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listPrimary;
    }

	listValueFunction() {
	    return this.getTypedRuleContext(ListValueFunctionContext,0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueFunction;
    }

	trimListFunction() {
	    return this.getTypedRuleContext(TrimListFunctionContext,0);
	};

	elementsFunction() {
	    return this.getTypedRuleContext(ElementsFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListValueFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimListFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_trimListFunction;
    }

	TRIM() {
	    return this.getToken(GqlParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	COMMA() {
	    return this.getToken(GqlParser.COMMA, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTrimListFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTrimListFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTrimListFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementsFunction;
    }

	ELEMENTS() {
	    return this.getToken(GqlParser.ELEMENTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementsFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementsFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueConstructor;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueConstructor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListValueConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listValueConstructorByEnumeration;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.LEFT_BRACKET, i);
	    }
	};


	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GqlParser.RIGHT_BRACKET, i);
	    }
	};


	listElementList() {
	    return this.getTypedRuleContext(ListElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListValueConstructorByEnumeration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListValueConstructorByEnumeration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listElementList;
    }

	listElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListElementContext);
	    } else {
	        return this.getTypedRuleContext(ListElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listElement;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordValueConstructor;
    }

	fieldsSpec() {
	    return this.getTypedRuleContext(FieldsSpecContext,0);
	};

	RECORD() {
	    return this.getToken(GqlParser.RECORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordValueConstructor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRecordValueConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldsSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldsSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GqlParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GqlParser.RIGHT_BRACE, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldsSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldsSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFieldsSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldList;
    }

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFieldList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_field;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	COLON() {
	    return this.getToken(GqlParser.COLON, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathValueExpr;
    }

	pathValueConcatenation() {
	    return this.getTypedRuleContext(PathValueConcatenationContext,0);
	};

	pathValuePrimary() {
	    return this.getTypedRuleContext(PathValuePrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathValueConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathValueConcatenation;
    }

	pathValuePrimary() {
	    return this.getTypedRuleContext(PathValuePrimaryContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GqlParser.CONCATENATION, 0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathValueConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathValueConcatenation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathValueConcatenation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathValuePrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathValuePrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathValuePrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathValuePrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathValuePrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathValueConstructor;
    }

	pathValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(PathValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathValueConstructor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathValueConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathValueConstructorByEnumeration;
    }

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	pathElementList() {
	    return this.getTypedRuleContext(PathElementListContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathValueConstructorByEnumeration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathValueConstructorByEnumeration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathElementList;
    }

	pathElementListStart() {
	    return this.getTypedRuleContext(PathElementListStartContext,0);
	};

	pathElementListStep() {
	    return this.getTypedRuleContext(PathElementListStepContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathElementListStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathElementListStart;
    }

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathElementListStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathElementListStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathElementListStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathElementListStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathElementListStep;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	edgeRefValueExpr() {
	    return this.getTypedRuleContext(EdgeRefValueExprContext,0);
	};

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathElementListStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathElementListStep(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathElementListStep(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyRef;
    }

	propertySource() {
	    return this.getTypedRuleContext(PropertySourceContext,0);
	};

	PERIOD() {
	    return this.getToken(GqlParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertySourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertySource;
    }

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	edgeRefValueExpr() {
	    return this.getTypedRuleContext(EdgeRefValueExprContext,0);
	};

	recordValueExpr() {
	    return this.getTypedRuleContext(RecordValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertySource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertySource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertySource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueQueryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueQueryExpr;
    }

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueQueryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueQueryExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueQueryExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_caseExpr;
    }

	caseAbbreviation() {
	    return this.getTypedRuleContext(CaseAbbreviationContext,0);
	};

	caseSpecification() {
	    return this.getTypedRuleContext(CaseSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCaseExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCaseExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCaseExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseAbbreviationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_caseAbbreviation;
    }

	NULLIF() {
	    return this.getToken(GqlParser.NULLIF, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	valueExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExprContext);
	    } else {
	        return this.getTypedRuleContext(ValueExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	COALESCE() {
	    return this.getToken(GqlParser.COALESCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCaseAbbreviation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCaseAbbreviation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCaseAbbreviation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_caseSpecification;
    }

	simpleCase() {
	    return this.getTypedRuleContext(SimpleCaseContext,0);
	};

	searchedCase() {
	    return this.getTypedRuleContext(SearchedCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCaseSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCaseSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCaseSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleCase;
    }

	CASE() {
	    return this.getToken(GqlParser.CASE, 0);
	};

	caseOperand() {
	    return this.getTypedRuleContext(CaseOperandContext,0);
	};

	simpleWhenClause() {
	    return this.getTypedRuleContext(SimpleWhenClauseContext,0);
	};

	END() {
	    return this.getToken(GqlParser.END, 0);
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SearchedCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_searchedCase;
    }

	CASE() {
	    return this.getToken(GqlParser.CASE, 0);
	};

	searchedWhenClause() {
	    return this.getTypedRuleContext(SearchedWhenClauseContext,0);
	};

	END() {
	    return this.getToken(GqlParser.END, 0);
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSearchedCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSearchedCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_simpleWhenClause;
    }

	WHEN() {
	    return this.getToken(GqlParser.WHEN, 0);
	};

	whenOperandList() {
	    return this.getTypedRuleContext(WhenOperandListContext,0);
	};

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSimpleWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSimpleWhenClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSimpleWhenClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SearchedWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_searchedWhenClause;
    }

	WHEN() {
	    return this.getToken(GqlParser.WHEN, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSearchedWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSearchedWhenClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSearchedWhenClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elseClause;
    }

	ELSE() {
	    return this.getToken(GqlParser.ELSE, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_caseOperand;
    }

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCaseOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCaseOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCaseOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenOperandListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whenOperandList;
    }

	whenOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenOperandContext);
	    } else {
	        return this.getTypedRuleContext(WhenOperandContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COMMA);
	    } else {
	        return this.getToken(GqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhenOperandList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhenOperandList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitWhenOperandList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_whenOperand;
    }

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	valueTypePredicatePart2() {
	    return this.getTypedRuleContext(ValueTypePredicatePart2Context,0);
	};

	directedPredicatePart2() {
	    return this.getTypedRuleContext(DirectedPredicatePart2Context,0);
	};

	labeledPredicatePart2() {
	    return this.getTypedRuleContext(LabeledPredicatePart2Context,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterWhenOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitWhenOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitWhenOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_result;
    }

	resultExpr() {
	    return this.getTypedRuleContext(ResultExprContext,0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitResult(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitResult(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResultExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_resultExpr;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterResultExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitResultExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitResultExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_castSpec;
    }

	CAST() {
	    return this.getToken(GqlParser.CAST, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	castOperand() {
	    return this.getTypedRuleContext(CastOperandContext,0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	castTarget() {
	    return this.getTypedRuleContext(CastTargetContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCastSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCastSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCastSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_castOperand;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCastOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCastOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCastOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_castTarget;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCastTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCastTarget(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCastTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementIdFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementIdFunction;
    }

	ELEMENT_ID() {
	    return this.getToken(GqlParser.ELEMENT_ID, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GqlParser.LEFT_PAREN, 0);
	};

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GqlParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementIdFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementIdFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementIdFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LetValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_letValueExpr;
    }

	LET() {
	    return this.getToken(GqlParser.LET, 0);
	};

	letVarDefList() {
	    return this.getTypedRuleContext(LetVarDefListContext,0);
	};

	IN() {
	    return this.getToken(GqlParser.IN, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	END() {
	    return this.getToken(GqlParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLetValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLetValueExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLetValueExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_literal;
    }

	SIGNED_NUMERIC_LITERAL() {
	    return this.getToken(GqlParser.SIGNED_NUMERIC_LITERAL, 0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneralLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_generalLiteral;
    }

	predefinedTypeLiteral() {
	    return this.getTypedRuleContext(PredefinedTypeLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	recordLiteral() {
	    return this.getTypedRuleContext(RecordLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGeneralLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGeneralLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGeneralLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredefinedTypeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_predefinedTypeLiteral;
    }

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	BYTE_STRING_LITERAL() {
	    return this.getToken(GqlParser.BYTE_STRING_LITERAL, 0);
	};

	temporalLiteral() {
	    return this.getTypedRuleContext(TemporalLiteralContext,0);
	};

	durationLiteral() {
	    return this.getTypedRuleContext(DurationLiteralContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPredefinedTypeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPredefinedTypeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPredefinedTypeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnsignedLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unsignedLiteral;
    }

	UNSIGNED_NUMERIC_LITERAL() {
	    return this.getToken(GqlParser.UNSIGNED_NUMERIC_LITERAL, 0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnsignedLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnsignedLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnsignedLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(GqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(GqlParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(GqlParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBooleanLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_characterStringLiteral;
    }

	singleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(SingleQuotedCharacterSequenceContext,0);
	};

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	accentQuotedCharacterSequence() {
	    return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitCharacterStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitCharacterStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnbrokenCharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenCharacterStringLiteral;
    }

	unbrokenSingleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,0);
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	unbrokenDoubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenCharacterStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnbrokenCharacterStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_singleQuotedCharacterSequence;
    }

	unbrokenSingleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenSingleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,i);
	    }
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSingleQuotedCharacterSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSingleQuotedCharacterSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_doubleQuotedCharacterSequence;
    }

	unbrokenDoubleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenDoubleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,i);
	    }
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDoubleQuotedCharacterSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDoubleQuotedCharacterSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AccentQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_accentQuotedCharacterSequence;
    }

	unbrokenAccentQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenAccentQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenAccentQuotedCharacterSequenceContext,i);
	    }
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GqlParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterAccentQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitAccentQuotedCharacterSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitAccentQuotedCharacterSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoEscapeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_noEscape;
    }

	COMMERCIAL_AT() {
	    return this.getToken(GqlParser.COMMERCIAL_AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNoEscape(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNoEscape(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNoEscape(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnbrokenSingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenSingleQuotedCharacterSequence;
    }

	SINGLE_QUOTED_STRING_LITERAL() {
	    return this.getToken(GqlParser.SINGLE_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenSingleQuotedCharacterSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnbrokenSingleQuotedCharacterSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnbrokenDoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence;
    }

	DOUBLE_QUOTED_STRING_LITERAL() {
	    return this.getToken(GqlParser.DOUBLE_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnbrokenDoubleQuotedCharacterSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnbrokenAccentQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_unbrokenAccentQuotedCharacterSequence;
    }

	ACCENT_QUOTED_STRING_LITERAL() {
	    return this.getToken(GqlParser.ACCENT_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterUnbrokenAccentQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitUnbrokenAccentQuotedCharacterSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitUnbrokenAccentQuotedCharacterSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemporalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_temporalLiteral;
    }

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timeLiteral() {
	    return this.getTypedRuleContext(TimeLiteralContext,0);
	};

	dateTimeLiteral() {
	    return this.getTypedRuleContext(DateTimeLiteralContext,0);
	};

	sqlDateTimeLiteral() {
	    return this.getTypedRuleContext(SqlDateTimeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTemporalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTemporalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTemporalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateLiteral;
    }

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeLiteral;
    }

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTimeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeLiteral;
    }

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GqlParser.TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_timeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterTimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitTimeString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitTimeString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_dateTimeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDateTimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDateTimeString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDateTimeString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlDateTimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sqlDateTimeLiteral;
    }

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	QUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.QUOTE);
	    } else {
	        return this.getToken(GqlParser.QUOTE, i);
	    }
	};


	FOUR_DIGIT() {
	    return this.getToken(GqlParser.FOUR_DIGIT, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.MINUS);
	    } else {
	        return this.getToken(GqlParser.MINUS, i);
	    }
	};


	DOUBLE_DIGIT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.DOUBLE_DIGIT);
	    } else {
	        return this.getToken(GqlParser.DOUBLE_DIGIT, i);
	    }
	};


	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GqlParser.COLON);
	    } else {
	        return this.getToken(GqlParser.COLON, i);
	    }
	};


	TIMESTAMP() {
	    return this.getToken(GqlParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSqlDateTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSqlDateTimeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSqlDateTimeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationLiteral;
    }

	DURATION() {
	    return this.getToken(GqlParser.DURATION, 0);
	};

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	sqlIntervalLiteral() {
	    return this.getTypedRuleContext(SqlIntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_durationString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDurationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDurationString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDurationString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlIntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sqlIntervalLiteral;
    }

	UNSIGNED_INT() {
	    return this.getToken(GqlParser.UNSIGNED_INT, 0);
	};

	sqlIntervalType() {
	    return this.getTypedRuleContext(SqlIntervalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSqlIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSqlIntervalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSqlIntervalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlIntervalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_sqlIntervalType;
    }

	INTERVAL_DAY() {
	    return this.getToken(GqlParser.INTERVAL_DAY, 0);
	};

	INTERVAL_WEEK() {
	    return this.getToken(GqlParser.INTERVAL_WEEK, 0);
	};

	INTERVAL_MONTH() {
	    return this.getToken(GqlParser.INTERVAL_MONTH, 0);
	};

	INTERVAL_YEAR() {
	    return this.getToken(GqlParser.INTERVAL_YEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSqlIntervalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSqlIntervalType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSqlIntervalType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nullLiteral;
    }

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNullLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_listLiteral;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitListLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitListLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_recordLiteral;
    }

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterRecordLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitRecordLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitRecordLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_objectName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterObjectName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitObjectName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitObjectName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectNameOrBindingVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_objectNameOrBindingVar;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterObjectNameOrBindingVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitObjectNameOrBindingVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitObjectNameOrBindingVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DirectoryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_directoryName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDirectoryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDirectoryName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDirectoryName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SchemaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_schemaName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSchemaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSchemaName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSchemaName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphName;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelimitedGraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_delimitedGraphName;
    }

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDelimitedGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDelimitedGraphName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDelimitedGraphName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableName;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelimitedBindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_delimitedBindingTableName;
    }

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDelimitedBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDelimitedBindingTableName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDelimitedBindingTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_procedureName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitProcedureName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitProcedureName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_labelName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterLabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitLabelName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitLabelName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_propertyName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPropertyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_fieldName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitFieldName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitFieldName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_parameterName;
    }

	DOLLAR() {
	    return this.getToken(GqlParser.DOLLAR, 0);
	};

	separatedIdentifier() {
	    return this.getTypedRuleContext(SeparatedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitParameterName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitParameterName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_var;
    }

	graphVar() {
	    return this.getTypedRuleContext(GraphVarContext,0);
	};

	graphPatternVar() {
	    return this.getTypedRuleContext(GraphPatternVarContext,0);
	};

	bindingTableVar() {
	    return this.getTypedRuleContext(BindingTableVarContext,0);
	};

	valueVar() {
	    return this.getTypedRuleContext(ValueVarContext,0);
	};

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphPatternVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_graphPatternVar;
    }

	elementVar() {
	    return this.getTypedRuleContext(ElementVarContext,0);
	};

	pathOrSubpathVar() {
	    return this.getTypedRuleContext(PathOrSubpathVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterGraphPatternVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitGraphPatternVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitGraphPatternVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathOrSubpathVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathOrSubpathVar;
    }

	pathVar() {
	    return this.getTypedRuleContext(PathVarContext,0);
	};

	subpathVar() {
	    return this.getTypedRuleContext(SubpathVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathOrSubpathVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathOrSubpathVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathOrSubpathVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_elementVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterElementVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitElementVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitElementVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_pathVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPathVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPathVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPathVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubpathVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_subpathVar;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSubpathVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSubpathVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSubpathVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingTableVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingTableVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingTableVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingTableVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingTableVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_valueVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterValueVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitValueVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitValueVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bindingVar;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBindingVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBindingVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBindingVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_token;
    }

	nonDelimiterToken() {
	    return this.getTypedRuleContext(NonDelimiterTokenContext,0);
	};

	delimiterToken() {
	    return this.getTypedRuleContext(DelimiterTokenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonDelimiterTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonDelimiterToken;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	keyWord() {
	    return this.getTypedRuleContext(KeyWordContext,0);
	};

	UNSIGNED_NUMERIC_LITERAL() {
	    return this.getToken(GqlParser.UNSIGNED_NUMERIC_LITERAL, 0);
	};

	BYTE_STRING_LITERAL() {
	    return this.getToken(GqlParser.BYTE_STRING_LITERAL, 0);
	};

	MULTISET_ALTERNATION() {
	    return this.getToken(GqlParser.MULTISET_ALTERNATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonDelimiterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonDelimiterToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNonDelimiterToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_identifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeparatedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_separatedIdentifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterSeparatedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitSeparatedIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitSeparatedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonDelimitedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonDelimitedIdentifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	};

	EXTENDED_IDENTIFIER() {
	    return this.getToken(GqlParser.EXTENDED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonDelimitedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonDelimitedIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNonDelimitedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelimitedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_delimitedIdentifier;
    }

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	accentQuotedCharacterSequence() {
	    return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDelimitedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDelimitedIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDelimitedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_keyWord;
    }

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	nonReservedWord() {
	    return this.getTypedRuleContext(NonReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterKeyWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitKeyWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitKeyWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_reservedWord;
    }

	ABS() {
	    return this.getToken(GqlParser.ABS, 0);
	};

	ACOS() {
	    return this.getToken(GqlParser.ACOS, 0);
	};

	ALL() {
	    return this.getToken(GqlParser.ALL, 0);
	};

	ALL_DIFFERENT() {
	    return this.getToken(GqlParser.ALL_DIFFERENT, 0);
	};

	AND() {
	    return this.getToken(GqlParser.AND, 0);
	};

	ANY() {
	    return this.getToken(GqlParser.ANY, 0);
	};

	ARRAY() {
	    return this.getToken(GqlParser.ARRAY, 0);
	};

	AS() {
	    return this.getToken(GqlParser.AS, 0);
	};

	ASC() {
	    return this.getToken(GqlParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(GqlParser.ASCENDING, 0);
	};

	ASIN() {
	    return this.getToken(GqlParser.ASIN, 0);
	};

	AT() {
	    return this.getToken(GqlParser.AT, 0);
	};

	ATAN() {
	    return this.getToken(GqlParser.ATAN, 0);
	};

	AVG() {
	    return this.getToken(GqlParser.AVG, 0);
	};

	BIG() {
	    return this.getToken(GqlParser.BIG, 0);
	};

	BIGINT() {
	    return this.getToken(GqlParser.BIGINT, 0);
	};

	BINARY() {
	    return this.getToken(GqlParser.BINARY, 0);
	};

	BOOL() {
	    return this.getToken(GqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(GqlParser.BOOLEAN, 0);
	};

	BOTH() {
	    return this.getToken(GqlParser.BOTH, 0);
	};

	BTRIM() {
	    return this.getToken(GqlParser.BTRIM, 0);
	};

	BY() {
	    return this.getToken(GqlParser.BY, 0);
	};

	BYTE_LENGTH() {
	    return this.getToken(GqlParser.BYTE_LENGTH, 0);
	};

	BYTES() {
	    return this.getToken(GqlParser.BYTES, 0);
	};

	CALL() {
	    return this.getToken(GqlParser.CALL, 0);
	};

	CASE() {
	    return this.getToken(GqlParser.CASE, 0);
	};

	CAST() {
	    return this.getToken(GqlParser.CAST, 0);
	};

	CEIL() {
	    return this.getToken(GqlParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(GqlParser.CEILING, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(GqlParser.CHAR_LENGTH, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(GqlParser.CHARACTER_LENGTH, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(GqlParser.CHARACTERISTICS, 0);
	};

	CLOSE() {
	    return this.getToken(GqlParser.CLOSE, 0);
	};

	COALESCE() {
	    return this.getToken(GqlParser.COALESCE, 0);
	};

	COLLECT() {
	    return this.getToken(GqlParser.COLLECT, 0);
	};

	COMMIT() {
	    return this.getToken(GqlParser.COMMIT, 0);
	};

	COPY() {
	    return this.getToken(GqlParser.COPY, 0);
	};

	COS() {
	    return this.getToken(GqlParser.COS, 0);
	};

	COSH() {
	    return this.getToken(GqlParser.COSH, 0);
	};

	COT() {
	    return this.getToken(GqlParser.COT, 0);
	};

	COUNT() {
	    return this.getToken(GqlParser.COUNT, 0);
	};

	CREATE() {
	    return this.getToken(GqlParser.CREATE, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(GqlParser.CURRENT_DATE, 0);
	};

	CURRENT_GRAPH() {
	    return this.getToken(GqlParser.CURRENT_GRAPH, 0);
	};

	CURRENT_PROPERTY_GRAPH() {
	    return this.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(GqlParser.CURRENT_SCHEMA, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(GqlParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(GqlParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_USER() {
	    return this.getToken(GqlParser.CURRENT_USER, 0);
	};

	DATE() {
	    return this.getToken(GqlParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(GqlParser.DATETIME, 0);
	};

	DAY() {
	    return this.getToken(GqlParser.DAY, 0);
	};

	DEC() {
	    return this.getToken(GqlParser.DEC, 0);
	};

	DECIMAL() {
	    return this.getToken(GqlParser.DECIMAL, 0);
	};

	DEGREES() {
	    return this.getToken(GqlParser.DEGREES, 0);
	};

	DELETE() {
	    return this.getToken(GqlParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(GqlParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(GqlParser.DESCENDING, 0);
	};

	DETACH() {
	    return this.getToken(GqlParser.DETACH, 0);
	};

	DISTINCT() {
	    return this.getToken(GqlParser.DISTINCT, 0);
	};

	DOUBLE() {
	    return this.getToken(GqlParser.DOUBLE, 0);
	};

	DROP() {
	    return this.getToken(GqlParser.DROP, 0);
	};

	DURATION() {
	    return this.getToken(GqlParser.DURATION, 0);
	};

	DURATION_BETWEEN() {
	    return this.getToken(GqlParser.DURATION_BETWEEN, 0);
	};

	ELEMENT_ID() {
	    return this.getToken(GqlParser.ELEMENT_ID, 0);
	};

	ELSE() {
	    return this.getToken(GqlParser.ELSE, 0);
	};

	END() {
	    return this.getToken(GqlParser.END, 0);
	};

	EXCEPT() {
	    return this.getToken(GqlParser.EXCEPT, 0);
	};

	EXISTS() {
	    return this.getToken(GqlParser.EXISTS, 0);
	};

	EXP() {
	    return this.getToken(GqlParser.EXP, 0);
	};

	FALSE() {
	    return this.getToken(GqlParser.FALSE, 0);
	};

	FILTER() {
	    return this.getToken(GqlParser.FILTER, 0);
	};

	FINISH() {
	    return this.getToken(GqlParser.FINISH, 0);
	};

	FLOAT() {
	    return this.getToken(GqlParser.FLOAT, 0);
	};

	FLOAT16() {
	    return this.getToken(GqlParser.FLOAT16, 0);
	};

	FLOAT32() {
	    return this.getToken(GqlParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(GqlParser.FLOAT64, 0);
	};

	FLOAT128() {
	    return this.getToken(GqlParser.FLOAT128, 0);
	};

	FLOAT256() {
	    return this.getToken(GqlParser.FLOAT256, 0);
	};

	FLOOR() {
	    return this.getToken(GqlParser.FLOOR, 0);
	};

	FOR() {
	    return this.getToken(GqlParser.FOR, 0);
	};

	FROM() {
	    return this.getToken(GqlParser.FROM, 0);
	};

	GROUP() {
	    return this.getToken(GqlParser.GROUP, 0);
	};

	HAVING() {
	    return this.getToken(GqlParser.HAVING, 0);
	};

	HOME_GRAPH() {
	    return this.getToken(GqlParser.HOME_GRAPH, 0);
	};

	HOME_PROPERTY_GRAPH() {
	    return this.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0);
	};

	HOME_SCHEMA() {
	    return this.getToken(GqlParser.HOME_SCHEMA, 0);
	};

	HOUR() {
	    return this.getToken(GqlParser.HOUR, 0);
	};

	IF() {
	    return this.getToken(GqlParser.IF, 0);
	};

	IN() {
	    return this.getToken(GqlParser.IN, 0);
	};

	INSERT() {
	    return this.getToken(GqlParser.INSERT, 0);
	};

	INT() {
	    return this.getToken(GqlParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(GqlParser.INTEGER, 0);
	};

	INT8() {
	    return this.getToken(GqlParser.INT8, 0);
	};

	INTEGER8() {
	    return this.getToken(GqlParser.INTEGER8, 0);
	};

	INT16() {
	    return this.getToken(GqlParser.INT16, 0);
	};

	INTEGER16() {
	    return this.getToken(GqlParser.INTEGER16, 0);
	};

	INT32() {
	    return this.getToken(GqlParser.INT32, 0);
	};

	INTEGER32() {
	    return this.getToken(GqlParser.INTEGER32, 0);
	};

	INT64() {
	    return this.getToken(GqlParser.INT64, 0);
	};

	INTEGER64() {
	    return this.getToken(GqlParser.INTEGER64, 0);
	};

	INT128() {
	    return this.getToken(GqlParser.INT128, 0);
	};

	INTEGER128() {
	    return this.getToken(GqlParser.INTEGER128, 0);
	};

	INT256() {
	    return this.getToken(GqlParser.INT256, 0);
	};

	INTEGER256() {
	    return this.getToken(GqlParser.INTEGER256, 0);
	};

	INTERSECT() {
	    return this.getToken(GqlParser.INTERSECT, 0);
	};

	INTERVAL() {
	    return this.getToken(GqlParser.INTERVAL, 0);
	};

	IS() {
	    return this.getToken(GqlParser.IS, 0);
	};

	LEADING() {
	    return this.getToken(GqlParser.LEADING, 0);
	};

	LET() {
	    return this.getToken(GqlParser.LET, 0);
	};

	LIKE() {
	    return this.getToken(GqlParser.LIKE, 0);
	};

	LIMIT() {
	    return this.getToken(GqlParser.LIMIT, 0);
	};

	LIST() {
	    return this.getToken(GqlParser.LIST, 0);
	};

	LN() {
	    return this.getToken(GqlParser.LN, 0);
	};

	LOCAL() {
	    return this.getToken(GqlParser.LOCAL, 0);
	};

	LOCAL_DATETIME() {
	    return this.getToken(GqlParser.LOCAL_DATETIME, 0);
	};

	LOCAL_TIME() {
	    return this.getToken(GqlParser.LOCAL_TIME, 0);
	};

	LOCAL_TIMESTAMP() {
	    return this.getToken(GqlParser.LOCAL_TIMESTAMP, 0);
	};

	LOG() {
	    return this.getToken(GqlParser.LOG, 0);
	};

	LOG10() {
	    return this.getToken(GqlParser.LOG10, 0);
	};

	LOWER() {
	    return this.getToken(GqlParser.LOWER, 0);
	};

	LTRIM() {
	    return this.getToken(GqlParser.LTRIM, 0);
	};

	MATCH() {
	    return this.getToken(GqlParser.MATCH, 0);
	};

	MAX() {
	    return this.getToken(GqlParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(GqlParser.MIN, 0);
	};

	MINUTE() {
	    return this.getToken(GqlParser.MINUTE, 0);
	};

	MOD() {
	    return this.getToken(GqlParser.MOD, 0);
	};

	MONTH() {
	    return this.getToken(GqlParser.MONTH, 0);
	};

	NEXT() {
	    return this.getToken(GqlParser.NEXT, 0);
	};

	NODETACH() {
	    return this.getToken(GqlParser.NODETACH, 0);
	};

	NORMALIZE() {
	    return this.getToken(GqlParser.NORMALIZE, 0);
	};

	NOT() {
	    return this.getToken(GqlParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(GqlParser.NULL, 0);
	};

	NULLS() {
	    return this.getToken(GqlParser.NULLS, 0);
	};

	NULLIF() {
	    return this.getToken(GqlParser.NULLIF, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(GqlParser.OCTET_LENGTH, 0);
	};

	OF() {
	    return this.getToken(GqlParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(GqlParser.OFFSET, 0);
	};

	OPEN() {
	    return this.getToken(GqlParser.OPEN, 0);
	};

	OPTIONAL() {
	    return this.getToken(GqlParser.OPTIONAL, 0);
	};

	OR() {
	    return this.getToken(GqlParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(GqlParser.ORDER, 0);
	};

	OTHERWISE() {
	    return this.getToken(GqlParser.OTHERWISE, 0);
	};

	PARAMETER() {
	    return this.getToken(GqlParser.PARAMETER, 0);
	};

	PARAMETERS() {
	    return this.getToken(GqlParser.PARAMETERS, 0);
	};

	PATH() {
	    return this.getToken(GqlParser.PATH, 0);
	};

	PATH_LENGTH() {
	    return this.getToken(GqlParser.PATH_LENGTH, 0);
	};

	PATHS() {
	    return this.getToken(GqlParser.PATHS, 0);
	};

	PERCENTILE_CONT() {
	    return this.getToken(GqlParser.PERCENTILE_CONT, 0);
	};

	PERCENTILE_DISC() {
	    return this.getToken(GqlParser.PERCENTILE_DISC, 0);
	};

	POWER() {
	    return this.getToken(GqlParser.POWER, 0);
	};

	PRECISION() {
	    return this.getToken(GqlParser.PRECISION, 0);
	};

	PROPERTY_EXISTS() {
	    return this.getToken(GqlParser.PROPERTY_EXISTS, 0);
	};

	RADIANS() {
	    return this.getToken(GqlParser.RADIANS, 0);
	};

	REAL() {
	    return this.getToken(GqlParser.REAL, 0);
	};

	RECORD() {
	    return this.getToken(GqlParser.RECORD, 0);
	};

	REMOVE() {
	    return this.getToken(GqlParser.REMOVE, 0);
	};

	REPLACE() {
	    return this.getToken(GqlParser.REPLACE, 0);
	};

	RESET() {
	    return this.getToken(GqlParser.RESET, 0);
	};

	RETURN() {
	    return this.getToken(GqlParser.RETURN, 0);
	};

	ROLLBACK() {
	    return this.getToken(GqlParser.ROLLBACK, 0);
	};

	RTRIM() {
	    return this.getToken(GqlParser.RTRIM, 0);
	};

	SAME() {
	    return this.getToken(GqlParser.SAME, 0);
	};

	SCHEMA() {
	    return this.getToken(GqlParser.SCHEMA, 0);
	};

	SECOND() {
	    return this.getToken(GqlParser.SECOND, 0);
	};

	SELECT() {
	    return this.getToken(GqlParser.SELECT, 0);
	};

	SESSION() {
	    return this.getToken(GqlParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(GqlParser.SET, 0);
	};

	SIGNED() {
	    return this.getToken(GqlParser.SIGNED, 0);
	};

	SIN() {
	    return this.getToken(GqlParser.SIN, 0);
	};

	SINH() {
	    return this.getToken(GqlParser.SINH, 0);
	};

	SKIP_() {
	    return this.getToken(GqlParser.SKIP_, 0);
	};

	SMALL() {
	    return this.getToken(GqlParser.SMALL, 0);
	};

	SMALLINT() {
	    return this.getToken(GqlParser.SMALLINT, 0);
	};

	SQRT() {
	    return this.getToken(GqlParser.SQRT, 0);
	};

	START() {
	    return this.getToken(GqlParser.START, 0);
	};

	STDDEV_POP() {
	    return this.getToken(GqlParser.STDDEV_POP, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(GqlParser.STDDEV_SAMP, 0);
	};

	STRING() {
	    return this.getToken(GqlParser.STRING, 0);
	};

	SUM() {
	    return this.getToken(GqlParser.SUM, 0);
	};

	TAN() {
	    return this.getToken(GqlParser.TAN, 0);
	};

	TANH() {
	    return this.getToken(GqlParser.TANH, 0);
	};

	THEN() {
	    return this.getToken(GqlParser.THEN, 0);
	};

	TIME() {
	    return this.getToken(GqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(GqlParser.TIMESTAMP, 0);
	};

	TRAILING() {
	    return this.getToken(GqlParser.TRAILING, 0);
	};

	TRIM() {
	    return this.getToken(GqlParser.TRIM, 0);
	};

	TRUE() {
	    return this.getToken(GqlParser.TRUE, 0);
	};

	TYPED() {
	    return this.getToken(GqlParser.TYPED, 0);
	};

	UBIGINT() {
	    return this.getToken(GqlParser.UBIGINT, 0);
	};

	UINT() {
	    return this.getToken(GqlParser.UINT, 0);
	};

	UINT8() {
	    return this.getToken(GqlParser.UINT8, 0);
	};

	UINT16() {
	    return this.getToken(GqlParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(GqlParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(GqlParser.UINT64, 0);
	};

	UINT128() {
	    return this.getToken(GqlParser.UINT128, 0);
	};

	UINT256() {
	    return this.getToken(GqlParser.UINT256, 0);
	};

	UNION() {
	    return this.getToken(GqlParser.UNION, 0);
	};

	UNKNOWN() {
	    return this.getToken(GqlParser.UNKNOWN, 0);
	};

	UNSIGNED() {
	    return this.getToken(GqlParser.UNSIGNED, 0);
	};

	UPPER() {
	    return this.getToken(GqlParser.UPPER, 0);
	};

	USE() {
	    return this.getToken(GqlParser.USE, 0);
	};

	USMALLINT() {
	    return this.getToken(GqlParser.USMALLINT, 0);
	};

	VALUE() {
	    return this.getToken(GqlParser.VALUE, 0);
	};

	VARBINARY() {
	    return this.getToken(GqlParser.VARBINARY, 0);
	};

	VARCHAR() {
	    return this.getToken(GqlParser.VARCHAR, 0);
	};

	VARIABLE() {
	    return this.getToken(GqlParser.VARIABLE, 0);
	};

	WHEN() {
	    return this.getToken(GqlParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(GqlParser.WHERE, 0);
	};

	WITH() {
	    return this.getToken(GqlParser.WITH, 0);
	};

	XOR() {
	    return this.getToken(GqlParser.XOR, 0);
	};

	YEAR() {
	    return this.getToken(GqlParser.YEAR, 0);
	};

	YIELD() {
	    return this.getToken(GqlParser.YIELD, 0);
	};

	ZONED() {
	    return this.getToken(GqlParser.ZONED, 0);
	};

	ZONED_DATETIME() {
	    return this.getToken(GqlParser.ZONED_DATETIME, 0);
	};

	ZONED_TIME() {
	    return this.getToken(GqlParser.ZONED_TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_preReservedWord;
    }

	AGGREGATE() {
	    return this.getToken(GqlParser.AGGREGATE, 0);
	};

	AGGREGATES() {
	    return this.getToken(GqlParser.AGGREGATES, 0);
	};

	ALTER() {
	    return this.getToken(GqlParser.ALTER, 0);
	};

	CATALOG() {
	    return this.getToken(GqlParser.CATALOG, 0);
	};

	CLEAR() {
	    return this.getToken(GqlParser.CLEAR, 0);
	};

	CLONE() {
	    return this.getToken(GqlParser.CLONE, 0);
	};

	CONSTRAINT() {
	    return this.getToken(GqlParser.CONSTRAINT, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(GqlParser.CURRENT_ROLE, 0);
	};

	DATA() {
	    return this.getToken(GqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(GqlParser.DIRECTORY, 0);
	};

	EXACT() {
	    return this.getToken(GqlParser.EXACT, 0);
	};

	EXISTING() {
	    return this.getToken(GqlParser.EXISTING, 0);
	};

	FUNCTION() {
	    return this.getToken(GqlParser.FUNCTION, 0);
	};

	GQLSTATUS() {
	    return this.getToken(GqlParser.GQLSTATUS, 0);
	};

	GRANT() {
	    return this.getToken(GqlParser.GRANT, 0);
	};

	INSTANT() {
	    return this.getToken(GqlParser.INSTANT, 0);
	};

	LEFT() {
	    return this.getToken(GqlParser.LEFT, 0);
	};

	NOTHING() {
	    return this.getToken(GqlParser.NOTHING, 0);
	};

	NUMERIC() {
	    return this.getToken(GqlParser.NUMERIC, 0);
	};

	ON() {
	    return this.getToken(GqlParser.ON, 0);
	};

	PARTITION() {
	    return this.getToken(GqlParser.PARTITION, 0);
	};

	PROCEDURE() {
	    return this.getToken(GqlParser.PROCEDURE, 0);
	};

	PRODUCT() {
	    return this.getToken(GqlParser.PRODUCT, 0);
	};

	PROJECT() {
	    return this.getToken(GqlParser.PROJECT, 0);
	};

	QUERY() {
	    return this.getToken(GqlParser.QUERY, 0);
	};

	RECORDS() {
	    return this.getToken(GqlParser.RECORDS, 0);
	};

	REFERENCE() {
	    return this.getToken(GqlParser.REFERENCE, 0);
	};

	RENAME() {
	    return this.getToken(GqlParser.RENAME, 0);
	};

	REVOKE() {
	    return this.getToken(GqlParser.REVOKE, 0);
	};

	RIGHT() {
	    return this.getToken(GqlParser.RIGHT, 0);
	};

	SUBSTRING() {
	    return this.getToken(GqlParser.SUBSTRING, 0);
	};

	TEMPORAL() {
	    return this.getToken(GqlParser.TEMPORAL, 0);
	};

	UNIQUE() {
	    return this.getToken(GqlParser.UNIQUE, 0);
	};

	UNIT() {
	    return this.getToken(GqlParser.UNIT, 0);
	};

	VALUES() {
	    return this.getToken(GqlParser.VALUES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterPreReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitPreReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitPreReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nonReservedWord;
    }

	ACYCLIC() {
	    return this.getToken(GqlParser.ACYCLIC, 0);
	};

	BINDING() {
	    return this.getToken(GqlParser.BINDING, 0);
	};

	BINDINGS() {
	    return this.getToken(GqlParser.BINDINGS, 0);
	};

	CONNECTING() {
	    return this.getToken(GqlParser.CONNECTING, 0);
	};

	DESTINATION() {
	    return this.getToken(GqlParser.DESTINATION, 0);
	};

	DIFFERENT() {
	    return this.getToken(GqlParser.DIFFERENT, 0);
	};

	DIRECTED() {
	    return this.getToken(GqlParser.DIRECTED, 0);
	};

	EDGE() {
	    return this.getToken(GqlParser.EDGE, 0);
	};

	EDGES() {
	    return this.getToken(GqlParser.EDGES, 0);
	};

	ELEMENT() {
	    return this.getToken(GqlParser.ELEMENT, 0);
	};

	ELEMENTS() {
	    return this.getToken(GqlParser.ELEMENTS, 0);
	};

	FIRST() {
	    return this.getToken(GqlParser.FIRST, 0);
	};

	GRAPH() {
	    return this.getToken(GqlParser.GRAPH, 0);
	};

	GROUPS() {
	    return this.getToken(GqlParser.GROUPS, 0);
	};

	KEEP() {
	    return this.getToken(GqlParser.KEEP, 0);
	};

	LABEL() {
	    return this.getToken(GqlParser.LABEL, 0);
	};

	LABELED() {
	    return this.getToken(GqlParser.LABELED, 0);
	};

	LABELS() {
	    return this.getToken(GqlParser.LABELS, 0);
	};

	LAST() {
	    return this.getToken(GqlParser.LAST, 0);
	};

	NFC() {
	    return this.getToken(GqlParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GqlParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GqlParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GqlParser.NFKD, 0);
	};

	NO() {
	    return this.getToken(GqlParser.NO, 0);
	};

	NODE() {
	    return this.getToken(GqlParser.NODE, 0);
	};

	NORMALIZED() {
	    return this.getToken(GqlParser.NORMALIZED, 0);
	};

	ONLY() {
	    return this.getToken(GqlParser.ONLY, 0);
	};

	ORDINALITY() {
	    return this.getToken(GqlParser.ORDINALITY, 0);
	};

	PROPERTY() {
	    return this.getToken(GqlParser.PROPERTY, 0);
	};

	READ() {
	    return this.getToken(GqlParser.READ, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GqlParser.RELATIONSHIP, 0);
	};

	RELATIONSHIPS() {
	    return this.getToken(GqlParser.RELATIONSHIPS, 0);
	};

	REPEATABLE() {
	    return this.getToken(GqlParser.REPEATABLE, 0);
	};

	SHORTEST() {
	    return this.getToken(GqlParser.SHORTEST, 0);
	};

	SIMPLE() {
	    return this.getToken(GqlParser.SIMPLE, 0);
	};

	SOURCE() {
	    return this.getToken(GqlParser.SOURCE, 0);
	};

	TABLE() {
	    return this.getToken(GqlParser.TABLE, 0);
	};

	TEMP() {
	    return this.getToken(GqlParser.TEMP, 0);
	};

	TIMEZONE() {
	    return this.getToken(GqlParser.TIMEZONE, 0);
	};

	TO() {
	    return this.getToken(GqlParser.TO, 0);
	};

	TRAIL() {
	    return this.getToken(GqlParser.TRAIL, 0);
	};

	TRANSACTION() {
	    return this.getToken(GqlParser.TRANSACTION, 0);
	};

	TYPE() {
	    return this.getToken(GqlParser.TYPE, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GqlParser.UNDIRECTED, 0);
	};

	VERTEX() {
	    return this.getToken(GqlParser.VERTEX, 0);
	};

	WALK() {
	    return this.getToken(GqlParser.WALK, 0);
	};

	WITHOUT() {
	    return this.getToken(GqlParser.WITHOUT, 0);
	};

	WRITE() {
	    return this.getToken(GqlParser.WRITE, 0);
	};

	ZONE() {
	    return this.getToken(GqlParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNonReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNonReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNonReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelimiterTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_delimiterToken;
    }

	GQL_SPECIAL_CHAR() {
	    return this.getToken(GqlParser.GQL_SPECIAL_CHAR, 0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GqlParser.CONCATENATION, 0);
	};

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	dateTimeString() {
	    return this.getTypedRuleContext(DateTimeStringContext,0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	DOUBLE_COLON() {
	    return this.getToken(GqlParser.DOUBLE_COLON, 0);
	};

	DOUBLE_MINUS() {
	    return this.getToken(GqlParser.DOUBLE_MINUS, 0);
	};

	DOUBLE_PERIOD() {
	    return this.getToken(GqlParser.DOUBLE_PERIOD, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(GqlParser.NOT_EQUALS, 0);
	};

	LESS_THAN() {
	    return this.getToken(GqlParser.LESS_THAN, 0);
	};

	GREATER_THAN() {
	    return this.getToken(GqlParser.GREATER_THAN, 0);
	};

	LESS_THAN_OR_EQUALS() {
	    return this.getToken(GqlParser.LESS_THAN_OR_EQUALS, 0);
	};

	GREATER_THAN_OR_EQUALS() {
	    return this.getToken(GqlParser.GREATER_THAN_OR_EQUALS, 0);
	};

	LEFT_ARROW() {
	    return this.getToken(GqlParser.LEFT_ARROW, 0);
	};

	LEFT_ARROW_TILDE() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	};

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	};

	LEFT_ARROW_TILDE_BRACKET() {
	    return this.getToken(GqlParser.LEFT_ARROW_TILDE_BRACKET, 0);
	};

	LEFT_MINUS_RIGHT() {
	    return this.getToken(GqlParser.LEFT_MINUS_RIGHT, 0);
	};

	LEFT_MINUS_SLASH() {
	    return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	};

	LEFT_TILDE_SLASH() {
	    return this.getToken(GqlParser.LEFT_TILDE_SLASH, 0);
	};

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	};

	MINUS_SLASH() {
	    return this.getToken(GqlParser.MINUS_SLASH, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GqlParser.RIGHT_ARROW, 0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	};

	BRACKET_TILDE_RIGHT_ARROW() {
	    return this.getToken(GqlParser.BRACKET_TILDE_RIGHT_ARROW, 0);
	};

	SLASH_MINUS() {
	    return this.getToken(GqlParser.SLASH_MINUS, 0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	};

	SLASH_TILDE() {
	    return this.getToken(GqlParser.SLASH_TILDE, 0);
	};

	SLASH_TILDE_RIGHT() {
	    return this.getToken(GqlParser.SLASH_TILDE_RIGHT, 0);
	};

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	};

	TILDE_SLASH() {
	    return this.getToken(GqlParser.TILDE_SLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterDelimiterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitDelimiterToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitDelimiterToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BidirectionalControlCharacterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_bidirectionalControlCharacter;
    }


	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterBidirectionalControlCharacter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitBidirectionalControlCharacter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitBidirectionalControlCharacter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_comment;
    }

	SIMPLE_COMMENT_LITERAL() {
	    return this.getToken(GqlParser.SIMPLE_COMMENT_LITERAL, 0);
	};

	BRACKETED_COMMNET_LITERAL() {
	    return this.getToken(GqlParser.BRACKETED_COMMNET_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgeSynonym;
    }

	EDGE() {
	    return this.getToken(GqlParser.EDGE, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GqlParser.RELATIONSHIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgeSynonym(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgeSynonym(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EdgesSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_edgesSynonym;
    }

	EDGES() {
	    return this.getToken(GqlParser.EDGES, 0);
	};

	RELATIONSHIPS() {
	    return this.getToken(GqlParser.RELATIONSHIPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterEdgesSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitEdgesSynonym(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitEdgesSynonym(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GqlParser.RULE_nodeSynonym;
    }

	NODE() {
	    return this.getToken(GqlParser.NODE, 0);
	};

	VERTEX() {
	    return this.getToken(GqlParser.VERTEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.enterNodeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GqlParserListener ) {
	        listener.exitNodeSynonym(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GqlParserVisitor ) {
	        return visitor.visitNodeSynonym(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




GqlParser.GqlProgramContext = GqlProgramContext; 
GqlParser.ActivityContext = ActivityContext; 
GqlParser.ProgramActivityContext = ProgramActivityContext; 
GqlParser.SessionActivityContext = SessionActivityContext; 
GqlParser.SessionSetCommandContext = SessionSetCommandContext; 
GqlParser.SessionSetSchemaClauseContext = SessionSetSchemaClauseContext; 
GqlParser.SessionSetGraphClauseContext = SessionSetGraphClauseContext; 
GqlParser.SessionSetTimeZoneClauseContext = SessionSetTimeZoneClauseContext; 
GqlParser.SetTimeZoneValueContext = SetTimeZoneValueContext; 
GqlParser.SessionSetParameterClauseContext = SessionSetParameterClauseContext; 
GqlParser.SessionSetGraphParameterClauseContext = SessionSetGraphParameterClauseContext; 
GqlParser.SessionSetBindingTableParameterCaluesContext = SessionSetBindingTableParameterCaluesContext; 
GqlParser.SessionSetValuesParameterClauseContext = SessionSetValuesParameterClauseContext; 
GqlParser.SessionSetParameterNameContext = SessionSetParameterNameContext; 
GqlParser.SessionResetCommandContext = SessionResetCommandContext; 
GqlParser.SessionResetArgumentsContext = SessionResetArgumentsContext; 
GqlParser.SessionCloseCommandContext = SessionCloseCommandContext; 
GqlParser.TransactionActivityContext = TransactionActivityContext; 
GqlParser.TransactionStartCommandContext = TransactionStartCommandContext; 
GqlParser.TransactionEndCommandContext = TransactionEndCommandContext; 
GqlParser.TransactionCharacteristicsContext = TransactionCharacteristicsContext; 
GqlParser.TransactionModeContext = TransactionModeContext; 
GqlParser.TransactionAccessModeContext = TransactionAccessModeContext; 
GqlParser.ImplDefinedAccessModeContext = ImplDefinedAccessModeContext; 
GqlParser.NestedProcedureSpecContext = NestedProcedureSpecContext; 
GqlParser.ProcedureSpecContext = ProcedureSpecContext; 
GqlParser.NestedDataModProcedureSpecContext = NestedDataModProcedureSpecContext; 
GqlParser.NestedQuerySpecContext = NestedQuerySpecContext; 
GqlParser.ProcedureBodyContext = ProcedureBodyContext; 
GqlParser.BindingVarDefBlockContext = BindingVarDefBlockContext; 
GqlParser.BindingVarDefContext = BindingVarDefContext; 
GqlParser.StatmentBlockContext = StatmentBlockContext; 
GqlParser.StatementContext = StatementContext; 
GqlParser.NextStatmentContext = NextStatmentContext; 
GqlParser.GraphVarDefContext = GraphVarDefContext; 
GqlParser.OptTypedGraphInitContext = OptTypedGraphInitContext; 
GqlParser.GraphInitContext = GraphInitContext; 
GqlParser.BindingTableVarDefContext = BindingTableVarDefContext; 
GqlParser.OptTypedBindingTableInitContext = OptTypedBindingTableInitContext; 
GqlParser.BindingTableInitContext = BindingTableInitContext; 
GqlParser.ValueVarDefContext = ValueVarDefContext; 
GqlParser.OptTypedValueInitContext = OptTypedValueInitContext; 
GqlParser.ValueInitContext = ValueInitContext; 
GqlParser.GraphExprContext = GraphExprContext; 
GqlParser.CurrentGraphContext = CurrentGraphContext; 
GqlParser.NestedGraphQuerySpecContext = NestedGraphQuerySpecContext; 
GqlParser.BindingTableExprContext = BindingTableExprContext; 
GqlParser.NestedBindingTableQuerySpecContext = NestedBindingTableQuerySpecContext; 
GqlParser.ObjectExprPrimaryContext = ObjectExprPrimaryContext; 
GqlParser.LinearCatalogModStatmentContext = LinearCatalogModStatmentContext; 
GqlParser.SimpleCatalogModStatmentContext = SimpleCatalogModStatmentContext; 
GqlParser.PrimitiveCatalogModStatmentContext = PrimitiveCatalogModStatmentContext; 
GqlParser.CreateSchemeStatmentContext = CreateSchemeStatmentContext; 
GqlParser.DropSchemeStatmentContext = DropSchemeStatmentContext; 
GqlParser.CreateGraphStatmentContext = CreateGraphStatmentContext; 
GqlParser.CreateOnlyGraphStatmentContext = CreateOnlyGraphStatmentContext; 
GqlParser.CreateOrReplaceGraphStatmentContext = CreateOrReplaceGraphStatmentContext; 
GqlParser.OpenGraphTypeContext = OpenGraphTypeContext; 
GqlParser.OfGraphTypeContext = OfGraphTypeContext; 
GqlParser.GraphTypeLikeGraphContext = GraphTypeLikeGraphContext; 
GqlParser.GraphSourceContext = GraphSourceContext; 
GqlParser.DropGraphStatmentContext = DropGraphStatmentContext; 
GqlParser.CreateGraphTypeStatmentContext = CreateGraphTypeStatmentContext; 
GqlParser.GraphTypeSourceContext = GraphTypeSourceContext; 
GqlParser.CopyOfGraphTypeContext = CopyOfGraphTypeContext; 
GqlParser.DropGraphTypeStatmentContext = DropGraphTypeStatmentContext; 
GqlParser.CallCatalogModProcedureStatmentContext = CallCatalogModProcedureStatmentContext; 
GqlParser.LinearDataModStatmentContext = LinearDataModStatmentContext; 
GqlParser.FocusedLinearDataModStatmentContext = FocusedLinearDataModStatmentContext; 
GqlParser.FocusedLinearDataModStatmentBodyContext = FocusedLinearDataModStatmentBodyContext; 
GqlParser.FocusedNestedDataModProcedureSpecContext = FocusedNestedDataModProcedureSpecContext; 
GqlParser.AmbientLinearDataModStatmentContext = AmbientLinearDataModStatmentContext; 
GqlParser.AmbientLinearDataModStatmentBodyContext = AmbientLinearDataModStatmentBodyContext; 
GqlParser.SimpleLinearDataAccessingStatmentContext = SimpleLinearDataAccessingStatmentContext; 
GqlParser.SimpleDataAccessingStatmentContext = SimpleDataAccessingStatmentContext; 
GqlParser.SimpleDataModStatmentContext = SimpleDataModStatmentContext; 
GqlParser.PrimitiveDataModStatmentContext = PrimitiveDataModStatmentContext; 
GqlParser.InsertStatmentContext = InsertStatmentContext; 
GqlParser.SetStatmentContext = SetStatmentContext; 
GqlParser.SetItemListContext = SetItemListContext; 
GqlParser.SetItemContext = SetItemContext; 
GqlParser.SetPropertyItemContext = SetPropertyItemContext; 
GqlParser.SetAllPropertiesItemContext = SetAllPropertiesItemContext; 
GqlParser.SetLabelItemContext = SetLabelItemContext; 
GqlParser.LabelSetSpecContext = LabelSetSpecContext; 
GqlParser.RemoveStatmentContext = RemoveStatmentContext; 
GqlParser.RemoveItemListContext = RemoveItemListContext; 
GqlParser.RemoveItemContext = RemoveItemContext; 
GqlParser.RemovePropertyItemContext = RemovePropertyItemContext; 
GqlParser.RemoveLabelItemContext = RemoveLabelItemContext; 
GqlParser.DeleteStatmentContext = DeleteStatmentContext; 
GqlParser.DeleteItemListContext = DeleteItemListContext; 
GqlParser.DeleteItemContext = DeleteItemContext; 
GqlParser.CallDataModProcedureStatmentContext = CallDataModProcedureStatmentContext; 
GqlParser.CompositeQueryStatmentContext = CompositeQueryStatmentContext; 
GqlParser.CompositeQueryExprContext = CompositeQueryExprContext; 
GqlParser.QueryConjunctionContext = QueryConjunctionContext; 
GqlParser.SetOperatorContext = SetOperatorContext; 
GqlParser.CompositeQueryPrimaryContext = CompositeQueryPrimaryContext; 
GqlParser.LinearQueryStatmentContext = LinearQueryStatmentContext; 
GqlParser.FocusedLinearQueryStatmentContext = FocusedLinearQueryStatmentContext; 
GqlParser.FocusedLinearQueryStatmentPartContext = FocusedLinearQueryStatmentPartContext; 
GqlParser.FocusedLinearQueryAndPrimitiveResultStatmentPartContext = FocusedLinearQueryAndPrimitiveResultStatmentPartContext; 
GqlParser.FocusedPrimitiveResultStatmentContext = FocusedPrimitiveResultStatmentContext; 
GqlParser.FocusedNestedQuerySpecContext = FocusedNestedQuerySpecContext; 
GqlParser.AmbientLinearQueryStatmentContext = AmbientLinearQueryStatmentContext; 
GqlParser.SimpleLinearQueryStatmentContext = SimpleLinearQueryStatmentContext; 
GqlParser.SimpleQueryStatmentContext = SimpleQueryStatmentContext; 
GqlParser.PrimitiveQueryStatmentContext = PrimitiveQueryStatmentContext; 
GqlParser.MatchStatmentContext = MatchStatmentContext; 
GqlParser.SimpleMatchStatmentContext = SimpleMatchStatmentContext; 
GqlParser.OptionalMatchStatmentContext = OptionalMatchStatmentContext; 
GqlParser.OptionalOperandContext = OptionalOperandContext; 
GqlParser.MatchStatmentBlockContext = MatchStatmentBlockContext; 
GqlParser.CallQueryStatmentContext = CallQueryStatmentContext; 
GqlParser.FilterStatmentContext = FilterStatmentContext; 
GqlParser.LetStatmentContext = LetStatmentContext; 
GqlParser.LetVarDefListContext = LetVarDefListContext; 
GqlParser.LetVarDefContext = LetVarDefContext; 
GqlParser.ForStatmentContext = ForStatmentContext; 
GqlParser.ForItemContext = ForItemContext; 
GqlParser.ForItemAliasContext = ForItemAliasContext; 
GqlParser.ForOrdinalityOrOffsetContext = ForOrdinalityOrOffsetContext; 
GqlParser.OrderByAndPageStatmentContext = OrderByAndPageStatmentContext; 
GqlParser.PrimitiveResultStatmentContext = PrimitiveResultStatmentContext; 
GqlParser.ReturnStatmentContext = ReturnStatmentContext; 
GqlParser.ReturnStatmentBodyContext = ReturnStatmentBodyContext; 
GqlParser.ReturnItemListContext = ReturnItemListContext; 
GqlParser.ReturnItemContext = ReturnItemContext; 
GqlParser.ReturnItemAliasContext = ReturnItemAliasContext; 
GqlParser.SelectStatmentContext = SelectStatmentContext; 
GqlParser.SelectItemListContext = SelectItemListContext; 
GqlParser.SelectItemContext = SelectItemContext; 
GqlParser.SelectItemAliasContext = SelectItemAliasContext; 
GqlParser.HavingClauseContext = HavingClauseContext; 
GqlParser.SelectStatmentBodyContext = SelectStatmentBodyContext; 
GqlParser.SelectGraphMatchListContext = SelectGraphMatchListContext; 
GqlParser.SelectGraphMatchContext = SelectGraphMatchContext; 
GqlParser.SelectQuerySpecContext = SelectQuerySpecContext; 
GqlParser.CallProcedureStatmentContext = CallProcedureStatmentContext; 
GqlParser.ProcedureCallContext = ProcedureCallContext; 
GqlParser.InlineProcedureCallContext = InlineProcedureCallContext; 
GqlParser.VarScopeClauseContext = VarScopeClauseContext; 
GqlParser.BindingVarRefListContext = BindingVarRefListContext; 
GqlParser.NamedProcedureCallContext = NamedProcedureCallContext; 
GqlParser.ProcedureArgListContext = ProcedureArgListContext; 
GqlParser.ProcedureArgContext = ProcedureArgContext; 
GqlParser.UseGraphClauseContext = UseGraphClauseContext; 
GqlParser.AtSchemaClauseContext = AtSchemaClauseContext; 
GqlParser.BindingVarRefContext = BindingVarRefContext; 
GqlParser.ElementVarRefContext = ElementVarRefContext; 
GqlParser.PathVarRefContext = PathVarRefContext; 
GqlParser.ParameterContext = ParameterContext; 
GqlParser.GraphPatternBindingTableContext = GraphPatternBindingTableContext; 
GqlParser.GraphPatternYieldClauseContext = GraphPatternYieldClauseContext; 
GqlParser.GraphPatternYieldItemListContext = GraphPatternYieldItemListContext; 
GqlParser.GraphPatternYieldItemContext = GraphPatternYieldItemContext; 
GqlParser.GraphPatternContext = GraphPatternContext; 
GqlParser.MatchModeContext = MatchModeContext; 
GqlParser.RepeatableElementsMatchModeContext = RepeatableElementsMatchModeContext; 
GqlParser.DifferentEdgesMatchModeContext = DifferentEdgesMatchModeContext; 
GqlParser.ElementBindingsOrElementsContext = ElementBindingsOrElementsContext; 
GqlParser.EdgeBindingsOrEdgesContext = EdgeBindingsOrEdgesContext; 
GqlParser.PathPatternListContext = PathPatternListContext; 
GqlParser.PathPatternContext = PathPatternContext; 
GqlParser.PathVarDeclarationContext = PathVarDeclarationContext; 
GqlParser.KeepClauseContext = KeepClauseContext; 
GqlParser.GraphPatternWhereClauseContext = GraphPatternWhereClauseContext; 
GqlParser.PathPatternPrefixContext = PathPatternPrefixContext; 
GqlParser.PathModePrefixContext = PathModePrefixContext; 
GqlParser.PathModeContext = PathModeContext; 
GqlParser.PathSearchPrefixContext = PathSearchPrefixContext; 
GqlParser.AllPathSearchContext = AllPathSearchContext; 
GqlParser.PathOrPathsContext = PathOrPathsContext; 
GqlParser.AnyPathSearchContext = AnyPathSearchContext; 
GqlParser.NumberOfPathsContext = NumberOfPathsContext; 
GqlParser.ShortestPathSearchContext = ShortestPathSearchContext; 
GqlParser.AllShortestPathSearchContext = AllShortestPathSearchContext; 
GqlParser.AnyShortestPathSearchContext = AnyShortestPathSearchContext; 
GqlParser.CountedShortestPathSearchContext = CountedShortestPathSearchContext; 
GqlParser.CountedShortestGroupSearchContext = CountedShortestGroupSearchContext; 
GqlParser.GroupOrGroupsContext = GroupOrGroupsContext; 
GqlParser.NumberOfGroupsContext = NumberOfGroupsContext; 
GqlParser.PathPatternExprContext = PathPatternExprContext; 
GqlParser.PathMultisetAlternationContext = PathMultisetAlternationContext; 
GqlParser.PathPatternUnionContext = PathPatternUnionContext; 
GqlParser.PathTermContext = PathTermContext; 
GqlParser.PathFactorContext = PathFactorContext; 
GqlParser.QuantifiedPathPrimaryContext = QuantifiedPathPrimaryContext; 
GqlParser.QuestionedPathPrimaryContext = QuestionedPathPrimaryContext; 
GqlParser.PathPrimaryContext = PathPrimaryContext; 
GqlParser.ElementPatternContext = ElementPatternContext; 
GqlParser.NodePatternContext = NodePatternContext; 
GqlParser.ElementPatternFillerContext = ElementPatternFillerContext; 
GqlParser.ElementVarDeclarationContext = ElementVarDeclarationContext; 
GqlParser.IsLabelExprContext = IsLabelExprContext; 
GqlParser.ElementPatternPredicateContext = ElementPatternPredicateContext; 
GqlParser.ElementPatternWhereClauseContext = ElementPatternWhereClauseContext; 
GqlParser.ElementPropertySpecContext = ElementPropertySpecContext; 
GqlParser.PropertyKeyValuePairListContext = PropertyKeyValuePairListContext; 
GqlParser.PropertyKeyValuePairContext = PropertyKeyValuePairContext; 
GqlParser.EdgePatternContext = EdgePatternContext; 
GqlParser.FullEdgePatternContext = FullEdgePatternContext; 
GqlParser.FullEdgePointingLeftContext = FullEdgePointingLeftContext; 
GqlParser.FullEdgeUndirectedContext = FullEdgeUndirectedContext; 
GqlParser.FullEdgePointingRightContext = FullEdgePointingRightContext; 
GqlParser.FullEdgeLeftOrUndirectedContext = FullEdgeLeftOrUndirectedContext; 
GqlParser.FullEdgeUndirectedOrRightContext = FullEdgeUndirectedOrRightContext; 
GqlParser.FullEdgeLeftOrRightContext = FullEdgeLeftOrRightContext; 
GqlParser.FullEdgeAnyDirectionContext = FullEdgeAnyDirectionContext; 
GqlParser.AbbreviatedEdgePatternContext = AbbreviatedEdgePatternContext; 
GqlParser.ParenthesizedPathPatternExprContext = ParenthesizedPathPatternExprContext; 
GqlParser.SubpathVarDeclarationContext = SubpathVarDeclarationContext; 
GqlParser.ParenthesizedPathPatternWhereClauseContext = ParenthesizedPathPatternWhereClauseContext; 
GqlParser.InsertGraphPatternContext = InsertGraphPatternContext; 
GqlParser.InsertGraphPatternListContext = InsertGraphPatternListContext; 
GqlParser.InsertPathPatternContext = InsertPathPatternContext; 
GqlParser.InsertNodePatternContext = InsertNodePatternContext; 
GqlParser.InsertEdgePatternContext = InsertEdgePatternContext; 
GqlParser.InsertEdgePointingLeftContext = InsertEdgePointingLeftContext; 
GqlParser.InsertEdgePointingRightContext = InsertEdgePointingRightContext; 
GqlParser.InsertEdgeUndirectedContext = InsertEdgeUndirectedContext; 
GqlParser.InsertElementPatternFillerContext = InsertElementPatternFillerContext; 
GqlParser.LabelAndPropertySetSpecContext = LabelAndPropertySetSpecContext; 
GqlParser.LabelExprContext = LabelExprContext; 
GqlParser.LabelTermContext = LabelTermContext; 
GqlParser.LabelFactorContext = LabelFactorContext; 
GqlParser.LabelNegationContext = LabelNegationContext; 
GqlParser.LabelPrimaryContext = LabelPrimaryContext; 
GqlParser.WildcardLabelContext = WildcardLabelContext; 
GqlParser.ParenthesizedLabelExprContext = ParenthesizedLabelExprContext; 
GqlParser.GraphPatternQuantifierContext = GraphPatternQuantifierContext; 
GqlParser.FixedQuantifierContext = FixedQuantifierContext; 
GqlParser.GeneralQuantifierContext = GeneralQuantifierContext; 
GqlParser.LowerBoundContext = LowerBoundContext; 
GqlParser.UpperBoundContext = UpperBoundContext; 
GqlParser.SimplifiedPathPatternExprContext = SimplifiedPathPatternExprContext; 
GqlParser.SimplifiedDefaultingLeftContext = SimplifiedDefaultingLeftContext; 
GqlParser.SimplifiedDefaultingUndirectedContext = SimplifiedDefaultingUndirectedContext; 
GqlParser.SimplifiedDefaultingRightContext = SimplifiedDefaultingRightContext; 
GqlParser.SimplifiedDefaultingLeftOrUndirectedContext = SimplifiedDefaultingLeftOrUndirectedContext; 
GqlParser.SimplifiedDefaultingUndirectedOrRightContext = SimplifiedDefaultingUndirectedOrRightContext; 
GqlParser.SimplifiedDefaultingLeftOrRightContext = SimplifiedDefaultingLeftOrRightContext; 
GqlParser.SimplifiedDefaultingAnyDirectionContext = SimplifiedDefaultingAnyDirectionContext; 
GqlParser.SimplifiedContentsContext = SimplifiedContentsContext; 
GqlParser.SimplifiedPathUnionContext = SimplifiedPathUnionContext; 
GqlParser.SimplifiedMultisetAlternationContext = SimplifiedMultisetAlternationContext; 
GqlParser.SimplifiedTermContext = SimplifiedTermContext; 
GqlParser.SimplifiedFactorLowContext = SimplifiedFactorLowContext; 
GqlParser.SimplifiedFactorHighContext = SimplifiedFactorHighContext; 
GqlParser.SimplifiedQuntifiedContext = SimplifiedQuntifiedContext; 
GqlParser.SimplifiedQuestionedContext = SimplifiedQuestionedContext; 
GqlParser.SimplifiedTertiaryContext = SimplifiedTertiaryContext; 
GqlParser.SimplifiedDirectionOverrideContext = SimplifiedDirectionOverrideContext; 
GqlParser.SimplifiedOverrideLeftContext = SimplifiedOverrideLeftContext; 
GqlParser.SimplifiedOverrideUndirectedContext = SimplifiedOverrideUndirectedContext; 
GqlParser.SimplifiedOverrideRightContext = SimplifiedOverrideRightContext; 
GqlParser.SimplifiedOverrideLeftOrUndirectedContext = SimplifiedOverrideLeftOrUndirectedContext; 
GqlParser.SimplifiedOverrideUndirectedOrRightContext = SimplifiedOverrideUndirectedOrRightContext; 
GqlParser.SimplifiedOverrideLeftOrRightContext = SimplifiedOverrideLeftOrRightContext; 
GqlParser.SimplifiedOverrideAnyDirectionContext = SimplifiedOverrideAnyDirectionContext; 
GqlParser.SimplifiedSecondaryContext = SimplifiedSecondaryContext; 
GqlParser.SimplifiedNegationContext = SimplifiedNegationContext; 
GqlParser.SimplifiedPrimaryContext = SimplifiedPrimaryContext; 
GqlParser.WhereClauseContext = WhereClauseContext; 
GqlParser.YieldClauseContext = YieldClauseContext; 
GqlParser.YieldItemListContext = YieldItemListContext; 
GqlParser.YieldItemContext = YieldItemContext; 
GqlParser.YieldItemNameContext = YieldItemNameContext; 
GqlParser.YieldItemAliasContext = YieldItemAliasContext; 
GqlParser.GroupByClauseContext = GroupByClauseContext; 
GqlParser.GroupingElementListContext = GroupingElementListContext; 
GqlParser.GroupingElementContext = GroupingElementContext; 
GqlParser.EmptyGroupingSetContext = EmptyGroupingSetContext; 
GqlParser.OrderByClauseContext = OrderByClauseContext; 
GqlParser.AggregateFunctionContext = AggregateFunctionContext; 
GqlParser.GeneralSetFunctionContext = GeneralSetFunctionContext; 
GqlParser.GeneralSetFunctionTypeContext = GeneralSetFunctionTypeContext; 
GqlParser.SetQuantifierContext = SetQuantifierContext; 
GqlParser.BinarySetFunctionContext = BinarySetFunctionContext; 
GqlParser.DependantValueExprContext = DependantValueExprContext; 
GqlParser.IndependentValueExprContext = IndependentValueExprContext; 
GqlParser.SortSpecListContext = SortSpecListContext; 
GqlParser.SortSpecContext = SortSpecContext; 
GqlParser.SortKeyContext = SortKeyContext; 
GqlParser.OrderingSpecContext = OrderingSpecContext; 
GqlParser.NullOrderingContext = NullOrderingContext; 
GqlParser.LimitClauseContext = LimitClauseContext; 
GqlParser.OffsetClauseContext = OffsetClauseContext; 
GqlParser.OffsetSynonymContext = OffsetSynonymContext; 
GqlParser.GraphTypeSpecContext = GraphTypeSpecContext; 
GqlParser.NestedGraphTypeSpecContext = NestedGraphTypeSpecContext; 
GqlParser.GraphTypeSpecBodyContext = GraphTypeSpecBodyContext; 
GqlParser.ElementTypeDefListContext = ElementTypeDefListContext; 
GqlParser.ElementTypeDefContext = ElementTypeDefContext; 
GqlParser.NodeTypeDefContext = NodeTypeDefContext; 
GqlParser.NodeTypePatternContext = NodeTypePatternContext; 
GqlParser.NodeTypePhraseContext = NodeTypePhraseContext; 
GqlParser.NodeTypeNameContext = NodeTypeNameContext; 
GqlParser.NodeTypeFillerContext = NodeTypeFillerContext; 
GqlParser.NodeTypeLabelSetDefContext = NodeTypeLabelSetDefContext; 
GqlParser.NodeTypePropertyTypeSetDefContext = NodeTypePropertyTypeSetDefContext; 
GqlParser.EdgeTypeDefContext = EdgeTypeDefContext; 
GqlParser.EdgeTypePatternContext = EdgeTypePatternContext; 
GqlParser.EdgeTypePhraseContext = EdgeTypePhraseContext; 
GqlParser.EdgeTypeNameContext = EdgeTypeNameContext; 
GqlParser.EdgeTypeFillerContext = EdgeTypeFillerContext; 
GqlParser.EdgeTypeLabelSetDefContext = EdgeTypeLabelSetDefContext; 
GqlParser.EdgeTypePropertyTypeSetDefContext = EdgeTypePropertyTypeSetDefContext; 
GqlParser.FullEdgeTypePatternContext = FullEdgeTypePatternContext; 
GqlParser.FullEdgeTypePatternPointingRightContext = FullEdgeTypePatternPointingRightContext; 
GqlParser.FullEdgeTypePatternPointingLeftContext = FullEdgeTypePatternPointingLeftContext; 
GqlParser.FullEdgeTypePatternUndirectedContext = FullEdgeTypePatternUndirectedContext; 
GqlParser.ArcTypePointingRightContext = ArcTypePointingRightContext; 
GqlParser.ArcTypePointingLeftContext = ArcTypePointingLeftContext; 
GqlParser.ArcTypeUndirectedContext = ArcTypeUndirectedContext; 
GqlParser.ArcTypeFillerContext = ArcTypeFillerContext; 
GqlParser.AbbreviatedEdgeTypePatternContext = AbbreviatedEdgeTypePatternContext; 
GqlParser.AbbreviatedEdgeTypePatternPointingRightContext = AbbreviatedEdgeTypePatternPointingRightContext; 
GqlParser.AbbreviatedEdgeTypePatternPointingLeftContext = AbbreviatedEdgeTypePatternPointingLeftContext; 
GqlParser.AbbreviatedEdgeTypePatternUndirectedContext = AbbreviatedEdgeTypePatternUndirectedContext; 
GqlParser.NodeTypeRefContext = NodeTypeRefContext; 
GqlParser.SourceNodeTypeRefContext = SourceNodeTypeRefContext; 
GqlParser.DestinationNodeTypeRefContext = DestinationNodeTypeRefContext; 
GqlParser.EdgeKindContext = EdgeKindContext; 
GqlParser.EndpointDefContext = EndpointDefContext; 
GqlParser.EnpointPairDefContext = EnpointPairDefContext; 
GqlParser.EndpointPairDefPointingRightContext = EndpointPairDefPointingRightContext; 
GqlParser.EndpointPairDefPointingLeftContext = EndpointPairDefPointingLeftContext; 
GqlParser.EndpointPairDefUndirectedContext = EndpointPairDefUndirectedContext; 
GqlParser.ConnectorPointingRightContext = ConnectorPointingRightContext; 
GqlParser.ConnectorPointingLeftContext = ConnectorPointingLeftContext; 
GqlParser.ConnectorUndirectedContext = ConnectorUndirectedContext; 
GqlParser.SourceNodeTypeNameContext = SourceNodeTypeNameContext; 
GqlParser.DestinationNodeTypeNameContext = DestinationNodeTypeNameContext; 
GqlParser.LabelSetDefContext = LabelSetDefContext; 
GqlParser.PropertyTypeSetDefContext = PropertyTypeSetDefContext; 
GqlParser.PropertyTypeDefListContext = PropertyTypeDefListContext; 
GqlParser.PropertyTypeDefContext = PropertyTypeDefContext; 
GqlParser.PropertyValueTypeContext = PropertyValueTypeContext; 
GqlParser.BindingTableTypeContext = BindingTableTypeContext; 
GqlParser.ValueTypeContext = ValueTypeContext; 
GqlParser.TypedContext = TypedContext; 
GqlParser.PredefinedTypeContext = PredefinedTypeContext; 
GqlParser.BooleanTypeContext = BooleanTypeContext; 
GqlParser.CharStringTypeContext = CharStringTypeContext; 
GqlParser.ByteStringTypeContext = ByteStringTypeContext; 
GqlParser.MinLengthContext = MinLengthContext; 
GqlParser.MaxLengthContext = MaxLengthContext; 
GqlParser.FixedLengthContext = FixedLengthContext; 
GqlParser.NumericTypeContext = NumericTypeContext; 
GqlParser.ExactNumericTypeContext = ExactNumericTypeContext; 
GqlParser.BinaryExactNumericTypeContext = BinaryExactNumericTypeContext; 
GqlParser.SignedBinaryExactNumericTypeContext = SignedBinaryExactNumericTypeContext; 
GqlParser.UnsignedBinaryExactNumericTypeContext = UnsignedBinaryExactNumericTypeContext; 
GqlParser.VerboseBinaryExactNumericTypeContext = VerboseBinaryExactNumericTypeContext; 
GqlParser.DecimalExactNumericTypeContext = DecimalExactNumericTypeContext; 
GqlParser.PrecisionContext = PrecisionContext; 
GqlParser.ScaleContext = ScaleContext; 
GqlParser.ApproximateNumericTypeContext = ApproximateNumericTypeContext; 
GqlParser.TemporalTypeContext = TemporalTypeContext; 
GqlParser.TemporalInstantTypeContext = TemporalInstantTypeContext; 
GqlParser.TemporalDurationTypeContext = TemporalDurationTypeContext; 
GqlParser.DateTimeTypeContext = DateTimeTypeContext; 
GqlParser.LocalDateTimeTypeContext = LocalDateTimeTypeContext; 
GqlParser.DateTypeContext = DateTypeContext; 
GqlParser.TimeTypeContext = TimeTypeContext; 
GqlParser.LocalTimeTypeContext = LocalTimeTypeContext; 
GqlParser.DurationTypeContext = DurationTypeContext; 
GqlParser.RefValueTypeContext = RefValueTypeContext; 
GqlParser.GraphRefValueTypeContext = GraphRefValueTypeContext; 
GqlParser.OpenGraphRefValueTypeContext = OpenGraphRefValueTypeContext; 
GqlParser.ClosedGraphRefValueTypeContext = ClosedGraphRefValueTypeContext; 
GqlParser.BindingTableRefValueTypeContext = BindingTableRefValueTypeContext; 
GqlParser.NodeRefValueTypeContext = NodeRefValueTypeContext; 
GqlParser.OpenNodeRefValueTypeContext = OpenNodeRefValueTypeContext; 
GqlParser.ClosedNodeRefValueTypeContext = ClosedNodeRefValueTypeContext; 
GqlParser.EdgeRefValueTypeContext = EdgeRefValueTypeContext; 
GqlParser.OpenEdgeRefValueTypeContext = OpenEdgeRefValueTypeContext; 
GqlParser.ClosedEdgeRefValueTypeContext = ClosedEdgeRefValueTypeContext; 
GqlParser.ConstructedTypeContext = ConstructedTypeContext; 
GqlParser.ListValueTypeContext = ListValueTypeContext; 
GqlParser.ListValueTypeNameContext = ListValueTypeNameContext; 
GqlParser.ListValueTypeNameSynonymContext = ListValueTypeNameSynonymContext; 
GqlParser.RecordTypeContext = RecordTypeContext; 
GqlParser.FieldTypesSpecContext = FieldTypesSpecContext; 
GqlParser.FieldTypeListContext = FieldTypeListContext; 
GqlParser.DynamicUnionTypeContext = DynamicUnionTypeContext; 
GqlParser.OpenDynamicUnionTypeContext = OpenDynamicUnionTypeContext; 
GqlParser.DynamicPropertyValueTypeContext = DynamicPropertyValueTypeContext; 
GqlParser.ClosedDynamicUnionTypeContext = ClosedDynamicUnionTypeContext; 
GqlParser.ComponentTypeListContext = ComponentTypeListContext; 
GqlParser.ComponentTypeContext = ComponentTypeContext; 
GqlParser.PathValueTypeContext = PathValueTypeContext; 
GqlParser.NotNullContext = NotNullContext; 
GqlParser.FieldTypeContext = FieldTypeContext; 
GqlParser.SchemaRefContext = SchemaRefContext; 
GqlParser.AbsoluteCatalogSchemaRefContext = AbsoluteCatalogSchemaRefContext; 
GqlParser.CatalogSchemaParentAndNameContext = CatalogSchemaParentAndNameContext; 
GqlParser.RelativeCatalogSchemaRefContext = RelativeCatalogSchemaRefContext; 
GqlParser.PredefinedSchemaRefContext = PredefinedSchemaRefContext; 
GqlParser.AbsoluteDirectoryPathContext = AbsoluteDirectoryPathContext; 
GqlParser.RelativeDirectoryPathContext = RelativeDirectoryPathContext; 
GqlParser.SimpleDirectoryPathContext = SimpleDirectoryPathContext; 
GqlParser.GraphRefContext = GraphRefContext; 
GqlParser.CatalogGraphParentAndNameContext = CatalogGraphParentAndNameContext; 
GqlParser.HomeGraphContext = HomeGraphContext; 
GqlParser.GraphTypeRefContext = GraphTypeRefContext; 
GqlParser.CatalogGraphTypeParentAndNameContext = CatalogGraphTypeParentAndNameContext; 
GqlParser.BindingTableRefContext = BindingTableRefContext; 
GqlParser.CatalogBindingTableParentAndNameContext = CatalogBindingTableParentAndNameContext; 
GqlParser.ProcedureRefContext = ProcedureRefContext; 
GqlParser.CatalogProcedureParentAndNameContext = CatalogProcedureParentAndNameContext; 
GqlParser.CatalogObjectParentRefContext = CatalogObjectParentRefContext; 
GqlParser.RefParameterContext = RefParameterContext; 
GqlParser.ExternalObjectRefContext = ExternalObjectRefContext; 
GqlParser.SearchConditionContext = SearchConditionContext; 
GqlParser.PredicateContext = PredicateContext; 
GqlParser.ComparisonPredicateContext = ComparisonPredicateContext; 
GqlParser.ComparisonPredicatePart2Context = ComparisonPredicatePart2Context; 
GqlParser.ComparisonOperatorContext = ComparisonOperatorContext; 
GqlParser.ComparisonPredicandContext = ComparisonPredicandContext; 
GqlParser.ExistsPredicateContext = ExistsPredicateContext; 
GqlParser.NullPredicateContext = NullPredicateContext; 
GqlParser.NullPredicatePart2Context = NullPredicatePart2Context; 
GqlParser.ValueTypePredicateContext = ValueTypePredicateContext; 
GqlParser.ValueTypePredicatePart2Context = ValueTypePredicatePart2Context; 
GqlParser.NormalizedPredicateContext = NormalizedPredicateContext; 
GqlParser.NormalizedPredicatePart2Context = NormalizedPredicatePart2Context; 
GqlParser.DirectedPredicateContext = DirectedPredicateContext; 
GqlParser.DirectedPredicatePart2Context = DirectedPredicatePart2Context; 
GqlParser.LabeledPredicateContext = LabeledPredicateContext; 
GqlParser.LabeledPredicatePart2Context = LabeledPredicatePart2Context; 
GqlParser.IsLabeledOrColonContext = IsLabeledOrColonContext; 
GqlParser.SourceOrDestinationPredicateContext = SourceOrDestinationPredicateContext; 
GqlParser.NodeRefContext = NodeRefContext; 
GqlParser.SourcePredicatePart2Context = SourcePredicatePart2Context; 
GqlParser.DestinationPredicatePart2Context = DestinationPredicatePart2Context; 
GqlParser.EdgeRefContext = EdgeRefContext; 
GqlParser.AllDifferentPredicateContext = AllDifferentPredicateContext; 
GqlParser.SamePredicateContext = SamePredicateContext; 
GqlParser.PropertyExistsPredicateContext = PropertyExistsPredicateContext; 
GqlParser.ValueSpecContext = ValueSpecContext; 
GqlParser.UnsignedValueSpecContext = UnsignedValueSpecContext; 
GqlParser.UnsignedIntSpecContext = UnsignedIntSpecContext; 
GqlParser.ParameterValueSpecContext = ParameterValueSpecContext; 
GqlParser.PredefinedParameterContext = PredefinedParameterContext; 
GqlParser.ValueExprContext = ValueExprContext; 
GqlParser.CommonValueExprContext = CommonValueExprContext; 
GqlParser.RefValueExprContext = RefValueExprContext; 
GqlParser.GraphRefValueExprContext = GraphRefValueExprContext; 
GqlParser.BindingTableRefValueExprContext = BindingTableRefValueExprContext; 
GqlParser.NodeRefValueExprContext = NodeRefValueExprContext; 
GqlParser.EdgeRefValueExprContext = EdgeRefValueExprContext; 
GqlParser.RecordValueExprContext = RecordValueExprContext; 
GqlParser.AggregatingValueExprContext = AggregatingValueExprContext; 
GqlParser.BooleanValueExprContext = BooleanValueExprContext; 
GqlParser.BooleanTermContext = BooleanTermContext; 
GqlParser.BooleanFactorContext = BooleanFactorContext; 
GqlParser.BooleanTestContext = BooleanTestContext; 
GqlParser.TruthValueContext = TruthValueContext; 
GqlParser.BooleanPrimaryContext = BooleanPrimaryContext; 
GqlParser.BooleanPredicandContext = BooleanPredicandContext; 
GqlParser.ParanthisedBooleanValueExprContext = ParanthisedBooleanValueExprContext; 
GqlParser.NumericValueExprContext = NumericValueExprContext; 
GqlParser.TermContext = TermContext; 
GqlParser.FactorContext = FactorContext; 
GqlParser.NumericPrimaryContext = NumericPrimaryContext; 
GqlParser.ValueExprPrimaryContext = ValueExprPrimaryContext; 
GqlParser.ParenthesizedValueExprContext = ParenthesizedValueExprContext; 
GqlParser.NonParenthesizedValueExprPrimaryContext = NonParenthesizedValueExprPrimaryContext; 
GqlParser.NonParenthesizedValueExprPrimarySpecialCaseContext = NonParenthesizedValueExprPrimarySpecialCaseContext; 
GqlParser.CollectionValueConstructorContext = CollectionValueConstructorContext; 
GqlParser.NumericValueFunctionContext = NumericValueFunctionContext; 
GqlParser.LengthExprContext = LengthExprContext; 
GqlParser.CharLengthExprContext = CharLengthExprContext; 
GqlParser.ByteLengthExprContext = ByteLengthExprContext; 
GqlParser.PathLengthExprContext = PathLengthExprContext; 
GqlParser.AbsoluteValueExprContext = AbsoluteValueExprContext; 
GqlParser.ModulusExprContext = ModulusExprContext; 
GqlParser.NumericValueExprDividenContext = NumericValueExprDividenContext; 
GqlParser.NumericValueExprDivisorContext = NumericValueExprDivisorContext; 
GqlParser.TrigonometricFunctionContext = TrigonometricFunctionContext; 
GqlParser.TrigonometricFunctionNameContext = TrigonometricFunctionNameContext; 
GqlParser.LogarithmFunctionContext = LogarithmFunctionContext; 
GqlParser.GeneralLogarithmFunctionContext = GeneralLogarithmFunctionContext; 
GqlParser.GeneralLogarithmBaseContext = GeneralLogarithmBaseContext; 
GqlParser.GeneralLogarithmArgumentContext = GeneralLogarithmArgumentContext; 
GqlParser.CommonLogarithmFunctionContext = CommonLogarithmFunctionContext; 
GqlParser.NaturalLogarithmFunctionContext = NaturalLogarithmFunctionContext; 
GqlParser.ExponentialFunctionContext = ExponentialFunctionContext; 
GqlParser.PowerFunctionContext = PowerFunctionContext; 
GqlParser.NumericValueExprBaseContext = NumericValueExprBaseContext; 
GqlParser.NumericValueExprExponentContext = NumericValueExprExponentContext; 
GqlParser.SquareRootFuncitonContext = SquareRootFuncitonContext; 
GqlParser.FloorFunctionContext = FloorFunctionContext; 
GqlParser.CeilingFunctionContext = CeilingFunctionContext; 
GqlParser.StringValueExprContext = StringValueExprContext; 
GqlParser.CharStringValueExprContext = CharStringValueExprContext; 
GqlParser.CharStringConcatenationContext = CharStringConcatenationContext; 
GqlParser.CharStringFactorContext = CharStringFactorContext; 
GqlParser.CharStringPrimaryContext = CharStringPrimaryContext; 
GqlParser.ByteStringValueExprContext = ByteStringValueExprContext; 
GqlParser.ByteStringFactorContext = ByteStringFactorContext; 
GqlParser.ByteStringPrimaryContext = ByteStringPrimaryContext; 
GqlParser.ByteStringConcatenationContext = ByteStringConcatenationContext; 
GqlParser.StringValueFunctionContext = StringValueFunctionContext; 
GqlParser.CharStringFunctionContext = CharStringFunctionContext; 
GqlParser.FoldFunctionContext = FoldFunctionContext; 
GqlParser.TrimFunctionContext = TrimFunctionContext; 
GqlParser.SingleCharTrimFunctionContext = SingleCharTrimFunctionContext; 
GqlParser.MultiCharTrimFunctionContext = MultiCharTrimFunctionContext; 
GqlParser.TrimOperandsContext = TrimOperandsContext; 
GqlParser.TrimSourceContext = TrimSourceContext; 
GqlParser.TrimSpecContext = TrimSpecContext; 
GqlParser.TrimCharStringContext = TrimCharStringContext; 
GqlParser.NormalizeFunctionContext = NormalizeFunctionContext; 
GqlParser.NormalFormContext = NormalFormContext; 
GqlParser.ByteStringFunctionContext = ByteStringFunctionContext; 
GqlParser.ByteStrinTrimFunctionContext = ByteStrinTrimFunctionContext; 
GqlParser.ByteStringTrimOperandsContext = ByteStringTrimOperandsContext; 
GqlParser.ByteStringTrimSourceContext = ByteStringTrimSourceContext; 
GqlParser.TrimByteStringContext = TrimByteStringContext; 
GqlParser.StringLengthContext = StringLengthContext; 
GqlParser.DateTimeValueExprContext = DateTimeValueExprContext; 
GqlParser.DateTimeTermContext = DateTimeTermContext; 
GqlParser.DateTimeFactorContext = DateTimeFactorContext; 
GqlParser.DateTimePrimaryContext = DateTimePrimaryContext; 
GqlParser.DateTimeValueFunctionContext = DateTimeValueFunctionContext; 
GqlParser.DateFunctionContext = DateFunctionContext; 
GqlParser.TimeFunctionContext = TimeFunctionContext; 
GqlParser.LocalTimeFunctionContext = LocalTimeFunctionContext; 
GqlParser.DateTimeFunctionContext = DateTimeFunctionContext; 
GqlParser.LocalDatetimeFunctionContext = LocalDatetimeFunctionContext; 
GqlParser.DateFunctionParametersContext = DateFunctionParametersContext; 
GqlParser.TimeFunctionParametersContext = TimeFunctionParametersContext; 
GqlParser.DateTimeFunctionParametersContext = DateTimeFunctionParametersContext; 
GqlParser.DurationValueExprContext = DurationValueExprContext; 
GqlParser.DateTimeSubtractionContext = DateTimeSubtractionContext; 
GqlParser.DateTimeSubtractionParametersContext = DateTimeSubtractionParametersContext; 
GqlParser.DurationTermContext = DurationTermContext; 
GqlParser.DurationFactorContext = DurationFactorContext; 
GqlParser.DurationPrimaryContext = DurationPrimaryContext; 
GqlParser.DurationValueExpr1Context = DurationValueExpr1Context; 
GqlParser.DurationTerm1Context = DurationTerm1Context; 
GqlParser.DurationTerm2Context = DurationTerm2Context; 
GqlParser.DateTimeValueExpr1Context = DateTimeValueExpr1Context; 
GqlParser.DateTimeValueExpr2Context = DateTimeValueExpr2Context; 
GqlParser.DurationValueFunctionContext = DurationValueFunctionContext; 
GqlParser.DurationFunctionContext = DurationFunctionContext; 
GqlParser.DurationFunctionParametersContext = DurationFunctionParametersContext; 
GqlParser.DurationAbsoluteValueFunctionContext = DurationAbsoluteValueFunctionContext; 
GqlParser.ListValueExprContext = ListValueExprContext; 
GqlParser.ListConcatenationContext = ListConcatenationContext; 
GqlParser.ListPrimaryContext = ListPrimaryContext; 
GqlParser.ListValueFunctionContext = ListValueFunctionContext; 
GqlParser.TrimListFunctionContext = TrimListFunctionContext; 
GqlParser.ElementsFunctionContext = ElementsFunctionContext; 
GqlParser.ListValueConstructorContext = ListValueConstructorContext; 
GqlParser.ListValueConstructorByEnumerationContext = ListValueConstructorByEnumerationContext; 
GqlParser.ListElementListContext = ListElementListContext; 
GqlParser.ListElementContext = ListElementContext; 
GqlParser.RecordValueConstructorContext = RecordValueConstructorContext; 
GqlParser.FieldsSpecContext = FieldsSpecContext; 
GqlParser.FieldListContext = FieldListContext; 
GqlParser.FieldContext = FieldContext; 
GqlParser.PathValueExprContext = PathValueExprContext; 
GqlParser.PathValueConcatenationContext = PathValueConcatenationContext; 
GqlParser.PathValuePrimaryContext = PathValuePrimaryContext; 
GqlParser.PathValueConstructorContext = PathValueConstructorContext; 
GqlParser.PathValueConstructorByEnumerationContext = PathValueConstructorByEnumerationContext; 
GqlParser.PathElementListContext = PathElementListContext; 
GqlParser.PathElementListStartContext = PathElementListStartContext; 
GqlParser.PathElementListStepContext = PathElementListStepContext; 
GqlParser.PropertyRefContext = PropertyRefContext; 
GqlParser.PropertySourceContext = PropertySourceContext; 
GqlParser.ValueQueryExprContext = ValueQueryExprContext; 
GqlParser.CaseExprContext = CaseExprContext; 
GqlParser.CaseAbbreviationContext = CaseAbbreviationContext; 
GqlParser.CaseSpecificationContext = CaseSpecificationContext; 
GqlParser.SimpleCaseContext = SimpleCaseContext; 
GqlParser.SearchedCaseContext = SearchedCaseContext; 
GqlParser.SimpleWhenClauseContext = SimpleWhenClauseContext; 
GqlParser.SearchedWhenClauseContext = SearchedWhenClauseContext; 
GqlParser.ElseClauseContext = ElseClauseContext; 
GqlParser.CaseOperandContext = CaseOperandContext; 
GqlParser.WhenOperandListContext = WhenOperandListContext; 
GqlParser.WhenOperandContext = WhenOperandContext; 
GqlParser.ResultContext = ResultContext; 
GqlParser.ResultExprContext = ResultExprContext; 
GqlParser.CastSpecContext = CastSpecContext; 
GqlParser.CastOperandContext = CastOperandContext; 
GqlParser.CastTargetContext = CastTargetContext; 
GqlParser.ElementIdFunctionContext = ElementIdFunctionContext; 
GqlParser.LetValueExprContext = LetValueExprContext; 
GqlParser.LiteralContext = LiteralContext; 
GqlParser.GeneralLiteralContext = GeneralLiteralContext; 
GqlParser.PredefinedTypeLiteralContext = PredefinedTypeLiteralContext; 
GqlParser.UnsignedLiteralContext = UnsignedLiteralContext; 
GqlParser.BooleanLiteralContext = BooleanLiteralContext; 
GqlParser.CharacterStringLiteralContext = CharacterStringLiteralContext; 
GqlParser.UnbrokenCharacterStringLiteralContext = UnbrokenCharacterStringLiteralContext; 
GqlParser.SingleQuotedCharacterSequenceContext = SingleQuotedCharacterSequenceContext; 
GqlParser.DoubleQuotedCharacterSequenceContext = DoubleQuotedCharacterSequenceContext; 
GqlParser.AccentQuotedCharacterSequenceContext = AccentQuotedCharacterSequenceContext; 
GqlParser.NoEscapeContext = NoEscapeContext; 
GqlParser.UnbrokenSingleQuotedCharacterSequenceContext = UnbrokenSingleQuotedCharacterSequenceContext; 
GqlParser.UnbrokenDoubleQuotedCharacterSequenceContext = UnbrokenDoubleQuotedCharacterSequenceContext; 
GqlParser.UnbrokenAccentQuotedCharacterSequenceContext = UnbrokenAccentQuotedCharacterSequenceContext; 
GqlParser.TemporalLiteralContext = TemporalLiteralContext; 
GqlParser.DateLiteralContext = DateLiteralContext; 
GqlParser.TimeLiteralContext = TimeLiteralContext; 
GqlParser.DateTimeLiteralContext = DateTimeLiteralContext; 
GqlParser.DateStringContext = DateStringContext; 
GqlParser.TimeStringContext = TimeStringContext; 
GqlParser.DateTimeStringContext = DateTimeStringContext; 
GqlParser.SqlDateTimeLiteralContext = SqlDateTimeLiteralContext; 
GqlParser.DurationLiteralContext = DurationLiteralContext; 
GqlParser.DurationStringContext = DurationStringContext; 
GqlParser.SqlIntervalLiteralContext = SqlIntervalLiteralContext; 
GqlParser.SqlIntervalTypeContext = SqlIntervalTypeContext; 
GqlParser.NullLiteralContext = NullLiteralContext; 
GqlParser.ListLiteralContext = ListLiteralContext; 
GqlParser.RecordLiteralContext = RecordLiteralContext; 
GqlParser.ObjectNameContext = ObjectNameContext; 
GqlParser.ObjectNameOrBindingVarContext = ObjectNameOrBindingVarContext; 
GqlParser.DirectoryNameContext = DirectoryNameContext; 
GqlParser.SchemaNameContext = SchemaNameContext; 
GqlParser.GraphNameContext = GraphNameContext; 
GqlParser.DelimitedGraphNameContext = DelimitedGraphNameContext; 
GqlParser.GraphTypeNameContext = GraphTypeNameContext; 
GqlParser.ElementTypeNameContext = ElementTypeNameContext; 
GqlParser.BindingTableNameContext = BindingTableNameContext; 
GqlParser.DelimitedBindingTableNameContext = DelimitedBindingTableNameContext; 
GqlParser.ProcedureNameContext = ProcedureNameContext; 
GqlParser.LabelNameContext = LabelNameContext; 
GqlParser.PropertyNameContext = PropertyNameContext; 
GqlParser.FieldNameContext = FieldNameContext; 
GqlParser.ParameterNameContext = ParameterNameContext; 
GqlParser.VarContext = VarContext; 
GqlParser.GraphVarContext = GraphVarContext; 
GqlParser.GraphPatternVarContext = GraphPatternVarContext; 
GqlParser.PathOrSubpathVarContext = PathOrSubpathVarContext; 
GqlParser.ElementVarContext = ElementVarContext; 
GqlParser.PathVarContext = PathVarContext; 
GqlParser.SubpathVarContext = SubpathVarContext; 
GqlParser.BindingTableVarContext = BindingTableVarContext; 
GqlParser.ValueVarContext = ValueVarContext; 
GqlParser.BindingVarContext = BindingVarContext; 
GqlParser.TokenContext = TokenContext; 
GqlParser.NonDelimiterTokenContext = NonDelimiterTokenContext; 
GqlParser.IdentifierContext = IdentifierContext; 
GqlParser.SeparatedIdentifierContext = SeparatedIdentifierContext; 
GqlParser.NonDelimitedIdentifierContext = NonDelimitedIdentifierContext; 
GqlParser.DelimitedIdentifierContext = DelimitedIdentifierContext; 
GqlParser.KeyWordContext = KeyWordContext; 
GqlParser.ReservedWordContext = ReservedWordContext; 
GqlParser.PreReservedWordContext = PreReservedWordContext; 
GqlParser.NonReservedWordContext = NonReservedWordContext; 
GqlParser.DelimiterTokenContext = DelimiterTokenContext; 
GqlParser.BidirectionalControlCharacterContext = BidirectionalControlCharacterContext; 
GqlParser.CommentContext = CommentContext; 
GqlParser.EdgeSynonymContext = EdgeSynonymContext; 
GqlParser.EdgesSynonymContext = EdgesSynonymContext; 
GqlParser.NodeSynonymContext = NodeSynonymContext; 
