// Generated from src/versions/latest/antlr/GqlParser.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols

import {
	ATN,
	ATNDeserializer, DecisionState, DFA, FailedPredicateException,
	RecognitionException, NoViableAltException, BailErrorStrategy,
	Parser, ParserATNSimulator,
	RuleContext, ParserRuleContext, PredictionMode, PredictionContextCache,
	TerminalNode, RuleNode,
	Token, TokenStream,
	Interval, IntervalSet
} from '@gql-grammar/antlr4';
import GqlParserListener from "./GqlParserListener.js";
// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;

export default class GqlParser extends Parser {
	public static readonly LEFT_ARROW = 1;
	public static readonly LEFT_ARROW_TILDE = 2;
	public static readonly LEFT_ARROW_BRACKET = 3;
	public static readonly LEFT_ARROW_TILDE_BRACKET = 4;
	public static readonly LEFT_MINUS_RIGHT = 5;
	public static readonly LEFT_MINUS_SLASH = 6;
	public static readonly LEFT_TILDE_SLASH = 7;
	public static readonly MINUS_LEFT_BRACKET = 8;
	public static readonly MINUS_SLASH = 9;
	public static readonly RIGHT_ARROW = 10;
	public static readonly RIGHT_BRACKET_MINUS = 11;
	public static readonly RIGHT_BRACKET_TILDE = 12;
	public static readonly BRACKET_RIGHT_ARROW = 13;
	public static readonly BRACKET_TILDE_RIGHT_ARROW = 14;
	public static readonly SLASH_MINUS = 15;
	public static readonly SLASH_MINUS_RIGHT = 16;
	public static readonly SLASH_TILDE = 17;
	public static readonly SLASH_TILDE_RIGHT = 18;
	public static readonly TILDE_LEFT_BRACKET = 19;
	public static readonly TILDE_RIGHT_ARROW = 20;
	public static readonly TILDE_SLASH = 21;
	public static readonly QUOTE = 22;
	public static readonly DOUBLE_QUOTE = 23;
	public static readonly GRAVE_ACCENT = 24;
	public static readonly REVERS_SOLIDUS = 25;
	public static readonly PLUS = 26;
	public static readonly MINUS = 27;
	public static readonly DOUBLE_MINUS = 28;
	public static readonly AMPERSAND = 29;
	public static readonly ASTERISK = 30;
	public static readonly CIRCUMFLEX = 31;
	public static readonly COLON = 32;
	public static readonly DOUBLE_COLON = 33;
	public static readonly COMMA = 34;
	public static readonly DOLLAR = 35;
	public static readonly EQUALS = 36;
	public static readonly EXCLAMATION = 37;
	public static readonly LEFT_ANGLE_BRACKET = 38;
	public static readonly RIGHT_ANGLE_BRACKET = 39;
	public static readonly LEFT_BRACE = 40;
	public static readonly RIGHT_BRACE = 41;
	public static readonly LEFT_BRACKET = 42;
	public static readonly RIGHT_BRACKET = 43;
	public static readonly LEFT_PAREN = 44;
	public static readonly RIGHT_PAREN = 45;
	public static readonly QUESTION_MARK = 46;
	public static readonly SEMICOLON = 47;
	public static readonly SOLIDUS = 48;
	public static readonly DOUBLE_SOLIDUS = 49;
	public static readonly TILDE = 50;
	public static readonly UNDERSCORE = 51;
	public static readonly VERTICAL_BAR = 52;
	public static readonly PERCENT = 53;
	public static readonly PERIOD = 54;
	public static readonly DOUBLE_PERIOD = 55;
	public static readonly COMMERCIAL_AT = 56;
	public static readonly HASH = 57;
	public static readonly MULTISET_ALTERNATION = 58;
	public static readonly CONCATENATION = 59;
	public static readonly ABS = 60;
	public static readonly ACOS = 61;
	public static readonly ALL = 62;
	public static readonly ALL_DIFFERENT = 63;
	public static readonly AND = 64;
	public static readonly ANY = 65;
	public static readonly ARRAY = 66;
	public static readonly AS = 67;
	public static readonly ASC = 68;
	public static readonly ASCENDING = 69;
	public static readonly ASIN = 70;
	public static readonly AT = 71;
	public static readonly ATAN = 72;
	public static readonly AVG = 73;
	public static readonly BIG = 74;
	public static readonly BIGINT = 75;
	public static readonly BINARY = 76;
	public static readonly BOOL = 77;
	public static readonly BOOLEAN = 78;
	public static readonly BOTH = 79;
	public static readonly BTRIM = 80;
	public static readonly BY = 81;
	public static readonly BYTE_LENGTH = 82;
	public static readonly BYTES = 83;
	public static readonly CALL = 84;
	public static readonly CASE = 85;
	public static readonly CAST = 86;
	public static readonly CEIL = 87;
	public static readonly CEILING = 88;
	public static readonly CHAR_LENGTH = 89;
	public static readonly CHARACTER_LENGTH = 90;
	public static readonly CHARACTERISTICS = 91;
	public static readonly CLOSE = 92;
	public static readonly COALESCE = 93;
	public static readonly COLLECT = 94;
	public static readonly COMMIT = 95;
	public static readonly COPY = 96;
	public static readonly COS = 97;
	public static readonly COSH = 98;
	public static readonly COT = 99;
	public static readonly COUNT = 100;
	public static readonly CREATE = 101;
	public static readonly CURRENT_DATE = 102;
	public static readonly CURRENT_GRAPH = 103;
	public static readonly CURRENT_PROPERTY_GRAPH = 104;
	public static readonly CURRENT_SCHEMA = 105;
	public static readonly CURRENT_TIME = 106;
	public static readonly CURRENT_TIMESTAMP = 107;
	public static readonly CURRENT_USER = 108;
	public static readonly DATE = 109;
	public static readonly DATETIME = 110;
	public static readonly DAY = 111;
	public static readonly DEC = 112;
	public static readonly DECIMAL = 113;
	public static readonly DEGREES = 114;
	public static readonly DELETE = 115;
	public static readonly DESC = 116;
	public static readonly DESCENDING = 117;
	public static readonly DETACH = 118;
	public static readonly DISTINCT = 119;
	public static readonly DOUBLE = 120;
	public static readonly DROP = 121;
	public static readonly DURATION = 122;
	public static readonly DURATION_BETWEEN = 123;
	public static readonly ELEMENT_ID = 124;
	public static readonly ELSE = 125;
	public static readonly END = 126;
	public static readonly EXCEPT = 127;
	public static readonly EXISTS = 128;
	public static readonly EXP = 129;
	public static readonly FALSE = 130;
	public static readonly FILTER = 131;
	public static readonly FINISH = 132;
	public static readonly FLOAT = 133;
	public static readonly FLOAT16 = 134;
	public static readonly FLOAT32 = 135;
	public static readonly FLOAT64 = 136;
	public static readonly FLOAT128 = 137;
	public static readonly FLOAT256 = 138;
	public static readonly FLOOR = 139;
	public static readonly FOR = 140;
	public static readonly FROM = 141;
	public static readonly GROUP = 142;
	public static readonly HAVING = 143;
	public static readonly HOME_GRAPH = 144;
	public static readonly HOME_PROPERTY_GRAPH = 145;
	public static readonly HOME_SCHEMA = 146;
	public static readonly HOUR = 147;
	public static readonly IF = 148;
	public static readonly IN = 149;
	public static readonly INSERT = 150;
	public static readonly INT = 151;
	public static readonly INTEGER = 152;
	public static readonly INT8 = 153;
	public static readonly INTEGER8 = 154;
	public static readonly INT16 = 155;
	public static readonly INTEGER16 = 156;
	public static readonly INT32 = 157;
	public static readonly INTEGER32 = 158;
	public static readonly INT64 = 159;
	public static readonly INTEGER64 = 160;
	public static readonly INT128 = 161;
	public static readonly INTEGER128 = 162;
	public static readonly INT256 = 163;
	public static readonly INTEGER256 = 164;
	public static readonly INTERSECT = 165;
	public static readonly INTERVAL = 166;
	public static readonly IS = 167;
	public static readonly LEADING = 168;
	public static readonly LET = 169;
	public static readonly LIKE = 170;
	public static readonly LIMIT = 171;
	public static readonly LIST = 172;
	public static readonly LN = 173;
	public static readonly LOCAL = 174;
	public static readonly LOCAL_DATETIME = 175;
	public static readonly LOCAL_TIME = 176;
	public static readonly LOCAL_TIMESTAMP = 177;
	public static readonly LOG = 178;
	public static readonly LOG10 = 179;
	public static readonly LOWER = 180;
	public static readonly LTRIM = 181;
	public static readonly MATCH = 182;
	public static readonly MAX = 183;
	public static readonly MIN = 184;
	public static readonly MINUTE = 185;
	public static readonly MOD = 186;
	public static readonly MONTH = 187;
	public static readonly NEXT = 188;
	public static readonly NODETACH = 189;
	public static readonly NORMALIZE = 190;
	public static readonly NOT = 191;
	public static readonly NULL = 192;
	public static readonly NULLS = 193;
	public static readonly NULLIF = 194;
	public static readonly OCTET_LENGTH = 195;
	public static readonly OF = 196;
	public static readonly OFFSET = 197;
	public static readonly OPEN = 198;
	public static readonly OPTIONAL = 199;
	public static readonly OR = 200;
	public static readonly ORDER = 201;
	public static readonly OTHERWISE = 202;
	public static readonly PARAMETER = 203;
	public static readonly PARAMETERS = 204;
	public static readonly PATH = 205;
	public static readonly PATH_LENGTH = 206;
	public static readonly PATHS = 207;
	public static readonly PERCENTILE_CONT = 208;
	public static readonly PERCENTILE_DISC = 209;
	public static readonly POWER = 210;
	public static readonly PRECISION = 211;
	public static readonly PROPERTY_EXISTS = 212;
	public static readonly RADIANS = 213;
	public static readonly REAL = 214;
	public static readonly RECORD = 215;
	public static readonly REMOVE = 216;
	public static readonly REPLACE = 217;
	public static readonly RESET = 218;
	public static readonly RETURN = 219;
	public static readonly ROLLBACK = 220;
	public static readonly RTRIM = 221;
	public static readonly SAME = 222;
	public static readonly SCHEMA = 223;
	public static readonly SECOND = 224;
	public static readonly SELECT = 225;
	public static readonly SESSION = 226;
	public static readonly SET = 227;
	public static readonly SIGNED = 228;
	public static readonly SIN = 229;
	public static readonly SINH = 230;
	public static readonly SKIP_ = 231;
	public static readonly SMALL = 232;
	public static readonly SMALLINT = 233;
	public static readonly SQRT = 234;
	public static readonly START = 235;
	public static readonly STDDEV_POP = 236;
	public static readonly STDDEV_SAMP = 237;
	public static readonly STRING = 238;
	public static readonly SUM = 239;
	public static readonly TAN = 240;
	public static readonly TANH = 241;
	public static readonly THEN = 242;
	public static readonly TIME = 243;
	public static readonly TIMESTAMP = 244;
	public static readonly TRAILING = 245;
	public static readonly TRIM = 246;
	public static readonly TRUE = 247;
	public static readonly TYPED = 248;
	public static readonly UBIGINT = 249;
	public static readonly UINT = 250;
	public static readonly UINT8 = 251;
	public static readonly UINT16 = 252;
	public static readonly UINT32 = 253;
	public static readonly UINT64 = 254;
	public static readonly UINT128 = 255;
	public static readonly UINT256 = 256;
	public static readonly UNION = 257;
	public static readonly UNKNOWN = 258;
	public static readonly UNSIGNED = 259;
	public static readonly UPPER = 260;
	public static readonly USE = 261;
	public static readonly USMALLINT = 262;
	public static readonly VALUE = 263;
	public static readonly VARBINARY = 264;
	public static readonly VARCHAR = 265;
	public static readonly VARIABLE = 266;
	public static readonly WHEN = 267;
	public static readonly WHERE = 268;
	public static readonly WITH = 269;
	public static readonly XOR = 270;
	public static readonly YEAR = 271;
	public static readonly YIELD = 272;
	public static readonly ZONED = 273;
	public static readonly ZONED_DATETIME = 274;
	public static readonly ZONED_TIME = 275;
	public static readonly AGGREGATE = 276;
	public static readonly AGGREGATES = 277;
	public static readonly ALTER = 278;
	public static readonly CATALOG = 279;
	public static readonly CLEAR = 280;
	public static readonly CLONE = 281;
	public static readonly CONSTRAINT = 282;
	public static readonly CURRENT_ROLE = 283;
	public static readonly DATA = 284;
	public static readonly DIRECTORY = 285;
	public static readonly EXACT = 286;
	public static readonly EXISTING = 287;
	public static readonly FUNCTION = 288;
	public static readonly GQLSTATUS = 289;
	public static readonly GRANT = 290;
	public static readonly INSTANT = 291;
	public static readonly LEFT = 292;
	public static readonly NOTHING = 293;
	public static readonly NUMERIC = 294;
	public static readonly ON = 295;
	public static readonly PARTITION = 296;
	public static readonly PROCEDURE = 297;
	public static readonly PRODUCT = 298;
	public static readonly PROJECT = 299;
	public static readonly QUERY = 300;
	public static readonly RECORDS = 301;
	public static readonly REFERENCE = 302;
	public static readonly RENAME = 303;
	public static readonly REVOKE = 304;
	public static readonly RIGHT = 305;
	public static readonly SUBSTRING = 306;
	public static readonly TEMPORAL = 307;
	public static readonly UNIQUE = 308;
	public static readonly UNIT = 309;
	public static readonly VALUES = 310;
	public static readonly ACYCLIC = 311;
	public static readonly BINDING = 312;
	public static readonly BINDINGS = 313;
	public static readonly CONNECTING = 314;
	public static readonly DESTINATION = 315;
	public static readonly DIFFERENT = 316;
	public static readonly DIRECTED = 317;
	public static readonly EDGE = 318;
	public static readonly EDGES = 319;
	public static readonly ELEMENT = 320;
	public static readonly ELEMENTS = 321;
	public static readonly FIRST = 322;
	public static readonly GRAPH = 323;
	public static readonly GROUPS = 324;
	public static readonly KEEP = 325;
	public static readonly LABEL = 326;
	public static readonly LABELED = 327;
	public static readonly LABELS = 328;
	public static readonly LAST = 329;
	public static readonly NFC = 330;
	public static readonly NFD = 331;
	public static readonly NFKC = 332;
	public static readonly NFKD = 333;
	public static readonly NO = 334;
	public static readonly NODE = 335;
	public static readonly NORMALIZED = 336;
	public static readonly ONLY = 337;
	public static readonly ORDINALITY = 338;
	public static readonly PROPERTY = 339;
	public static readonly READ = 340;
	public static readonly RELATIONSHIP = 341;
	public static readonly RELATIONSHIPS = 342;
	public static readonly REPEATABLE = 343;
	public static readonly SHORTEST = 344;
	public static readonly SIMPLE = 345;
	public static readonly SOURCE = 346;
	public static readonly TABLE = 347;
	public static readonly TEMP = 348;
	public static readonly TIMEZONE = 349;
	public static readonly TO = 350;
	public static readonly TRAIL = 351;
	public static readonly TRANSACTION = 352;
	public static readonly TYPE = 353;
	public static readonly UNDIRECTED = 354;
	public static readonly VERTEX = 355;
	public static readonly WALK = 356;
	public static readonly WITHOUT = 357;
	public static readonly WRITE = 358;
	public static readonly ZONE = 359;
	public static readonly INTERVAL_DAY = 360;
	public static readonly INTERVAL_WEEK = 361;
	public static readonly INTERVAL_MONTH = 362;
	public static readonly INTERVAL_YEAR = 363;
	public static readonly IF_NOT_EXISTS = 364;
	public static readonly IF_EXISTS = 365;
	public static readonly UNSIGNED_NUMERIC_LITERAL = 366;
	public static readonly SIGNED_NUMERIC_LITERAL = 367;
	public static readonly SIGN = 368;
	public static readonly EXACT_NUMERIC_LITERAL = 369;
	public static readonly EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 370;
	public static readonly EXACT_UNSIGNED_INT = 371;
	public static readonly APROXIMATE_NUMERIC_LITERAL = 372;
	public static readonly APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 373;
	public static readonly APROXIMATE_UNSIGNED_INT = 374;
	public static readonly UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 375;
	public static readonly UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION = 376;
	public static readonly FOUR_DIGIT = 377;
	public static readonly DOUBLE_DIGIT = 378;
	public static readonly UNSIGNED_INT = 379;
	public static readonly UNSIGNED_DECIMAL_INT = 380;
	public static readonly UNSIGNED_HEX_INT = 381;
	public static readonly UNSIGNED_OCTAL_INT = 382;
	public static readonly UNSIGNED_BINARY_INT = 383;
	public static readonly BYTE_STRING_LITERAL = 384;
	public static readonly SINGLE_QUOTED_STRING_LITERAL = 385;
	public static readonly DOUBLE_QUOTED_STRING_LITERAL = 386;
	public static readonly ACCENT_QUOTED_STRING_LITERAL = 387;
	public static readonly COMMENT = 388;
	public static readonly SIMPLE_COMMENT_LITERAL = 389;
	public static readonly BRACKETED_COMMNET_LITERAL = 390;
	public static readonly WS = 391;
	public static readonly WHITESPACE = 392;
	public static readonly NEW_LINE = 393;
	public static readonly CARRIAGE_RETURN = 394;
	public static readonly RETURN_SIGN = 395;
	public static readonly REGULAR_IDENTIFIER = 396;
	public static readonly EXTENDED_IDENTIFIER = 397;
	public static readonly START_CHARS = 398;
	public static readonly CONTINUE_CHARS = 399;
	public static readonly BIDIRECTIONAL_CONTROL_CHARACTER = 400;
	public static readonly ESCAPED_CHARS = 401;
	public static readonly ESCAPED_REVERSE_SOLIDUS = 402;
	public static readonly ESCAPED_QUOTE = 403;
	public static readonly ESCAPED_SOUBLE_QUOTE = 404;
	public static readonly ESCAPED_GRAVE_ACCENT = 405;
	public static readonly ESCAPED_TAB = 406;
	public static readonly ESCAPED_BACKSPACE = 407;
	public static readonly ESCAPED_NEW_LINE = 408;
	public static readonly ESCAPED_CARRIAGE_RETURN = 409;
	public static readonly ESCAPED_FORM_FEED = 410;
	public static readonly ESCAPED_UNICODE4_DIGIT_VALUE = 411;
	public static readonly ESCAPED_UNICODE6_DIGIT_VALUE = 412;
	public static readonly FF = 413;
	public static readonly RS = 414;
	public static readonly GS = 415;
	public static readonly FS = 416;
	public static readonly CR = 417;
	public static readonly SPACE = 418;
	public static readonly TAB = 419;
	public static readonly LF = 420;
	public static readonly VT = 421;
	public static readonly US = 422;
	public static readonly DIGIT16 = 423;
	public static readonly DIGIT10 = 424;
	public static readonly DIGIT8 = 425;
	public static readonly DIGIT2 = 426;
	public static readonly LETTER = 427;
	public static readonly GQL_LANGUAGE_CHAR = 428;
	public static readonly GQL_SPECIAL_CHAR = 429;
	public static readonly EOF = Token.EOF;
	public static readonly RULE_gqlProgram = 0;
	public static readonly RULE_activity = 1;
	public static readonly RULE_programActivity = 2;
	public static readonly RULE_sessionActivity = 3;
	public static readonly RULE_sessionSetCommand = 4;
	public static readonly RULE_sessionSetSchemaClause = 5;
	public static readonly RULE_sessionSetGraphClause = 6;
	public static readonly RULE_sessionSetTimeZoneClause = 7;
	public static readonly RULE_setTimeZoneValue = 8;
	public static readonly RULE_sessionSetParameterClause = 9;
	public static readonly RULE_sessionSetGraphParameterClause = 10;
	public static readonly RULE_sessionSetBindingTableParameterCalues = 11;
	public static readonly RULE_sessionSetValuesParameterClause = 12;
	public static readonly RULE_sessionSetParameterName = 13;
	public static readonly RULE_sessionResetCommand = 14;
	public static readonly RULE_sessionResetArguments = 15;
	public static readonly RULE_sessionCloseCommand = 16;
	public static readonly RULE_transactionActivity = 17;
	public static readonly RULE_transactionStartCommand = 18;
	public static readonly RULE_transactionEndCommand = 19;
	public static readonly RULE_transactionCharacteristics = 20;
	public static readonly RULE_transactionMode = 21;
	public static readonly RULE_transactionAccessMode = 22;
	public static readonly RULE_implDefinedAccessMode = 23;
	public static readonly RULE_nestedProcedureSpec = 24;
	public static readonly RULE_procedureSpec = 25;
	public static readonly RULE_nestedDataModProcedureSpec = 26;
	public static readonly RULE_nestedQuerySpec = 27;
	public static readonly RULE_procedureBody = 28;
	public static readonly RULE_bindingVarDefBlock = 29;
	public static readonly RULE_bindingVarDef = 30;
	public static readonly RULE_statmentBlock = 31;
	public static readonly RULE_statement = 32;
	public static readonly RULE_nextStatment = 33;
	public static readonly RULE_graphVarDef = 34;
	public static readonly RULE_optTypedGraphInit = 35;
	public static readonly RULE_graphInit = 36;
	public static readonly RULE_bindingTableVarDef = 37;
	public static readonly RULE_optTypedBindingTableInit = 38;
	public static readonly RULE_bindingTableInit = 39;
	public static readonly RULE_valueVarDef = 40;
	public static readonly RULE_optTypedValueInit = 41;
	public static readonly RULE_valueInit = 42;
	public static readonly RULE_graphExpr = 43;
	public static readonly RULE_currentGraph = 44;
	public static readonly RULE_nestedGraphQuerySpec = 45;
	public static readonly RULE_bindingTableExpr = 46;
	public static readonly RULE_nestedBindingTableQuerySpec = 47;
	public static readonly RULE_objectExprPrimary = 48;
	public static readonly RULE_linearCatalogModStatment = 49;
	public static readonly RULE_simpleCatalogModStatment = 50;
	public static readonly RULE_primitiveCatalogModStatment = 51;
	public static readonly RULE_createSchemeStatment = 52;
	public static readonly RULE_dropSchemeStatment = 53;
	public static readonly RULE_createGraphStatment = 54;
	public static readonly RULE_createOnlyGraphStatment = 55;
	public static readonly RULE_createOrReplaceGraphStatment = 56;
	public static readonly RULE_openGraphType = 57;
	public static readonly RULE_ofGraphType = 58;
	public static readonly RULE_graphTypeLikeGraph = 59;
	public static readonly RULE_graphSource = 60;
	public static readonly RULE_dropGraphStatment = 61;
	public static readonly RULE_createGraphTypeStatment = 62;
	public static readonly RULE_graphTypeSource = 63;
	public static readonly RULE_copyOfGraphType = 64;
	public static readonly RULE_dropGraphTypeStatment = 65;
	public static readonly RULE_callCatalogModProcedureStatment = 66;
	public static readonly RULE_linearDataModStatment = 67;
	public static readonly RULE_focusedLinearDataModStatment = 68;
	public static readonly RULE_focusedLinearDataModStatmentBody = 69;
	public static readonly RULE_focusedNestedDataModProcedureSpec = 70;
	public static readonly RULE_ambientLinearDataModStatment = 71;
	public static readonly RULE_ambientLinearDataModStatmentBody = 72;
	public static readonly RULE_simpleLinearDataAccessingStatment = 73;
	public static readonly RULE_simpleDataAccessingStatment = 74;
	public static readonly RULE_simpleDataModStatment = 75;
	public static readonly RULE_primitiveDataModStatment = 76;
	public static readonly RULE_insertStatment = 77;
	public static readonly RULE_setStatment = 78;
	public static readonly RULE_setItemList = 79;
	public static readonly RULE_setItem = 80;
	public static readonly RULE_setPropertyItem = 81;
	public static readonly RULE_setAllPropertiesItem = 82;
	public static readonly RULE_setLabelItem = 83;
	public static readonly RULE_labelSetSpec = 84;
	public static readonly RULE_removeStatment = 85;
	public static readonly RULE_removeItemList = 86;
	public static readonly RULE_removeItem = 87;
	public static readonly RULE_removePropertyItem = 88;
	public static readonly RULE_removeLabelItem = 89;
	public static readonly RULE_deleteStatment = 90;
	public static readonly RULE_deleteItemList = 91;
	public static readonly RULE_deleteItem = 92;
	public static readonly RULE_callDataModProcedureStatment = 93;
	public static readonly RULE_compositeQueryStatment = 94;
	public static readonly RULE_compositeQueryExpr = 95;
	public static readonly RULE_queryConjunction = 96;
	public static readonly RULE_setOperator = 97;
	public static readonly RULE_compositeQueryPrimary = 98;
	public static readonly RULE_linearQueryStatment = 99;
	public static readonly RULE_focusedLinearQueryStatment = 100;
	public static readonly RULE_focusedLinearQueryStatmentPart = 101;
	public static readonly RULE_focusedLinearQueryAndPrimitiveResultStatmentPart = 102;
	public static readonly RULE_focusedPrimitiveResultStatment = 103;
	public static readonly RULE_focusedNestedQuerySpec = 104;
	public static readonly RULE_ambientLinearQueryStatment = 105;
	public static readonly RULE_simpleLinearQueryStatment = 106;
	public static readonly RULE_simpleQueryStatment = 107;
	public static readonly RULE_primitiveQueryStatment = 108;
	public static readonly RULE_matchStatment = 109;
	public static readonly RULE_simpleMatchStatment = 110;
	public static readonly RULE_optionalMatchStatment = 111;
	public static readonly RULE_optionalOperand = 112;
	public static readonly RULE_matchStatmentBlock = 113;
	public static readonly RULE_callQueryStatment = 114;
	public static readonly RULE_filterStatment = 115;
	public static readonly RULE_letStatment = 116;
	public static readonly RULE_letVarDefList = 117;
	public static readonly RULE_letVarDef = 118;
	public static readonly RULE_forStatment = 119;
	public static readonly RULE_forItem = 120;
	public static readonly RULE_forItemAlias = 121;
	public static readonly RULE_forOrdinalityOrOffset = 122;
	public static readonly RULE_orderByAndPageStatment = 123;
	public static readonly RULE_primitiveResultStatment = 124;
	public static readonly RULE_returnStatment = 125;
	public static readonly RULE_returnStatmentBody = 126;
	public static readonly RULE_returnItemList = 127;
	public static readonly RULE_returnItem = 128;
	public static readonly RULE_returnItemAlias = 129;
	public static readonly RULE_selectStatment = 130;
	public static readonly RULE_selectItemList = 131;
	public static readonly RULE_selectItem = 132;
	public static readonly RULE_selectItemAlias = 133;
	public static readonly RULE_havingClause = 134;
	public static readonly RULE_selectStatmentBody = 135;
	public static readonly RULE_selectGraphMatchList = 136;
	public static readonly RULE_selectGraphMatch = 137;
	public static readonly RULE_selectQuerySpec = 138;
	public static readonly RULE_callProcedureStatment = 139;
	public static readonly RULE_procedureCall = 140;
	public static readonly RULE_inlineProcedureCall = 141;
	public static readonly RULE_varScopeClause = 142;
	public static readonly RULE_bindingVarRefList = 143;
	public static readonly RULE_namedProcedureCall = 144;
	public static readonly RULE_procedureArgList = 145;
	public static readonly RULE_procedureArg = 146;
	public static readonly RULE_useGraphClause = 147;
	public static readonly RULE_atSchemaClause = 148;
	public static readonly RULE_bindingVarRef = 149;
	public static readonly RULE_elementVarRef = 150;
	public static readonly RULE_pathVarRef = 151;
	public static readonly RULE_parameter = 152;
	public static readonly RULE_graphPatternBindingTable = 153;
	public static readonly RULE_graphPatternYieldClause = 154;
	public static readonly RULE_graphPatternYieldItemList = 155;
	public static readonly RULE_graphPatternYieldItem = 156;
	public static readonly RULE_graphPattern = 157;
	public static readonly RULE_matchMode = 158;
	public static readonly RULE_repeatableElementsMatchMode = 159;
	public static readonly RULE_differentEdgesMatchMode = 160;
	public static readonly RULE_elementBindingsOrElements = 161;
	public static readonly RULE_edgeBindingsOrEdges = 162;
	public static readonly RULE_pathPatternList = 163;
	public static readonly RULE_pathPattern = 164;
	public static readonly RULE_pathVarDeclaration = 165;
	public static readonly RULE_keepClause = 166;
	public static readonly RULE_graphPatternWhereClause = 167;
	public static readonly RULE_pathPatternPrefix = 168;
	public static readonly RULE_pathModePrefix = 169;
	public static readonly RULE_pathMode = 170;
	public static readonly RULE_pathSearchPrefix = 171;
	public static readonly RULE_allPathSearch = 172;
	public static readonly RULE_pathOrPaths = 173;
	public static readonly RULE_anyPathSearch = 174;
	public static readonly RULE_numberOfPaths = 175;
	public static readonly RULE_shortestPathSearch = 176;
	public static readonly RULE_allShortestPathSearch = 177;
	public static readonly RULE_anyShortestPathSearch = 178;
	public static readonly RULE_countedShortestPathSearch = 179;
	public static readonly RULE_countedShortestGroupSearch = 180;
	public static readonly RULE_groupOrGroups = 181;
	public static readonly RULE_numberOfGroups = 182;
	public static readonly RULE_pathPatternExpr = 183;
	public static readonly RULE_pathMultisetAlternation = 184;
	public static readonly RULE_pathPatternUnion = 185;
	public static readonly RULE_pathTerm = 186;
	public static readonly RULE_pathFactor = 187;
	public static readonly RULE_quantifiedPathPrimary = 188;
	public static readonly RULE_questionedPathPrimary = 189;
	public static readonly RULE_pathPrimary = 190;
	public static readonly RULE_elementPattern = 191;
	public static readonly RULE_nodePattern = 192;
	public static readonly RULE_elementPatternFiller = 193;
	public static readonly RULE_elementVarDeclaration = 194;
	public static readonly RULE_isLabelExpr = 195;
	public static readonly RULE_isOrColon = 196;
	public static readonly RULE_elementPatternPredicate = 197;
	public static readonly RULE_elementPatternWhereClause = 198;
	public static readonly RULE_elementPropertySpec = 199;
	public static readonly RULE_propertyKeyValuePairList = 200;
	public static readonly RULE_propertyKeyValuePair = 201;
	public static readonly RULE_edgePattern = 202;
	public static readonly RULE_fullEdgePattern = 203;
	public static readonly RULE_fullEdgePointingLeft = 204;
	public static readonly RULE_fullEdgeUndirected = 205;
	public static readonly RULE_fullEdgePointingRight = 206;
	public static readonly RULE_fullEdgeLeftOrUndirected = 207;
	public static readonly RULE_fullEdgeUndirectedOrRight = 208;
	public static readonly RULE_fullEdgeLeftOrRight = 209;
	public static readonly RULE_fullEdgeAnyDirection = 210;
	public static readonly RULE_abbreviatedEdgePattern = 211;
	public static readonly RULE_parenthesizedPathPatternExpr = 212;
	public static readonly RULE_subpathVarDeclaration = 213;
	public static readonly RULE_parenthesizedPathPatternWhereClause = 214;
	public static readonly RULE_insertGraphPattern = 215;
	public static readonly RULE_insertGraphPatternList = 216;
	public static readonly RULE_insertPathPattern = 217;
	public static readonly RULE_insertNodePattern = 218;
	public static readonly RULE_insertEdgePattern = 219;
	public static readonly RULE_insertEdgePointingLeft = 220;
	public static readonly RULE_insertEdgePointingRight = 221;
	public static readonly RULE_insertEdgeUndirected = 222;
	public static readonly RULE_insertElementPatternFiller = 223;
	public static readonly RULE_labelAndPropertySetSpec = 224;
	public static readonly RULE_labelExpr = 225;
	public static readonly RULE_labelTerm = 226;
	public static readonly RULE_labelFactor = 227;
	public static readonly RULE_labelNegation = 228;
	public static readonly RULE_labelPrimary = 229;
	public static readonly RULE_wildcardLabel = 230;
	public static readonly RULE_parenthesizedLabelExpr = 231;
	public static readonly RULE_graphPatternQuantifier = 232;
	public static readonly RULE_fixedQuantifier = 233;
	public static readonly RULE_generalQuantifier = 234;
	public static readonly RULE_lowerBound = 235;
	public static readonly RULE_upperBound = 236;
	public static readonly RULE_simplifiedPathPatternExpr = 237;
	public static readonly RULE_simplifiedDefaultingLeft = 238;
	public static readonly RULE_simplifiedDefaultingUndirected = 239;
	public static readonly RULE_simplifiedDefaultingRight = 240;
	public static readonly RULE_simplifiedDefaultingLeftOrUndirected = 241;
	public static readonly RULE_simplifiedDefaultingUndirectedOrRight = 242;
	public static readonly RULE_simplifiedDefaultingLeftOrRight = 243;
	public static readonly RULE_simplifiedDefaultingAnyDirection = 244;
	public static readonly RULE_simplifiedContents = 245;
	public static readonly RULE_simplifiedPathUnion = 246;
	public static readonly RULE_simplifiedMultisetAlternation = 247;
	public static readonly RULE_simplifiedTerm = 248;
	public static readonly RULE_simplifiedFactorLow = 249;
	public static readonly RULE_simplifiedFactorHigh = 250;
	public static readonly RULE_simplifiedQuntified = 251;
	public static readonly RULE_simplifiedQuestioned = 252;
	public static readonly RULE_simplifiedTertiary = 253;
	public static readonly RULE_simplifiedDirectionOverride = 254;
	public static readonly RULE_simplifiedOverrideLeft = 255;
	public static readonly RULE_simplifiedOverrideUndirected = 256;
	public static readonly RULE_simplifiedOverrideRight = 257;
	public static readonly RULE_simplifiedOverrideLeftOrUndirected = 258;
	public static readonly RULE_simplifiedOverrideUndirectedOrRight = 259;
	public static readonly RULE_simplifiedOverrideLeftOrRight = 260;
	public static readonly RULE_simplifiedOverrideAnyDirection = 261;
	public static readonly RULE_simplifiedSecondary = 262;
	public static readonly RULE_simplifiedNegation = 263;
	public static readonly RULE_simplifiedPrimary = 264;
	public static readonly RULE_whereClause = 265;
	public static readonly RULE_yieldClause = 266;
	public static readonly RULE_yieldItemList = 267;
	public static readonly RULE_yieldItem = 268;
	public static readonly RULE_yieldItemName = 269;
	public static readonly RULE_yieldItemAlias = 270;
	public static readonly RULE_groupByClause = 271;
	public static readonly RULE_groupingElementList = 272;
	public static readonly RULE_groupingElement = 273;
	public static readonly RULE_emptyGroupingSet = 274;
	public static readonly RULE_orderByClause = 275;
	public static readonly RULE_aggregateFunction = 276;
	public static readonly RULE_generalSetFunction = 277;
	public static readonly RULE_generalSetFunctionType = 278;
	public static readonly RULE_setQuantifier = 279;
	public static readonly RULE_binarySetFunction = 280;
	public static readonly RULE_dependantValueExpr = 281;
	public static readonly RULE_independentValueExpr = 282;
	public static readonly RULE_sortSpecList = 283;
	public static readonly RULE_sortSpec = 284;
	public static readonly RULE_sortKey = 285;
	public static readonly RULE_orderingSpec = 286;
	public static readonly RULE_nullOrdering = 287;
	public static readonly RULE_limitClause = 288;
	public static readonly RULE_offsetClause = 289;
	public static readonly RULE_offsetSynonym = 290;
	public static readonly RULE_graphTypeSpec = 291;
	public static readonly RULE_nestedGraphTypeSpec = 292;
	public static readonly RULE_graphTypeSpecBody = 293;
	public static readonly RULE_elementTypeDefList = 294;
	public static readonly RULE_elementTypeDef = 295;
	public static readonly RULE_nodeTypeDef = 296;
	public static readonly RULE_nodeTypePattern = 297;
	public static readonly RULE_nodeTypePhrase = 298;
	public static readonly RULE_nodeTypeName = 299;
	public static readonly RULE_nodeTypeFiller = 300;
	public static readonly RULE_nodeTypeLabelSetDef = 301;
	public static readonly RULE_nodeTypePropertyTypeSetDef = 302;
	public static readonly RULE_edgeTypeDef = 303;
	public static readonly RULE_edgeTypePattern = 304;
	public static readonly RULE_edgeTypePhrase = 305;
	public static readonly RULE_edgeTypeName = 306;
	public static readonly RULE_edgeTypeFiller = 307;
	public static readonly RULE_edgeTypeLabelSetDef = 308;
	public static readonly RULE_edgeTypePropertyTypeSetDef = 309;
	public static readonly RULE_fullEdgeTypePattern = 310;
	public static readonly RULE_fullEdgeTypePatternPointingRight = 311;
	public static readonly RULE_fullEdgeTypePatternPointingLeft = 312;
	public static readonly RULE_fullEdgeTypePatternUndirected = 313;
	public static readonly RULE_arcTypePointingRight = 314;
	public static readonly RULE_arcTypePointingLeft = 315;
	public static readonly RULE_arcTypeUndirected = 316;
	public static readonly RULE_arcTypeFiller = 317;
	public static readonly RULE_abbreviatedEdgeTypePattern = 318;
	public static readonly RULE_abbreviatedEdgeTypePatternPointingRight = 319;
	public static readonly RULE_abbreviatedEdgeTypePatternPointingLeft = 320;
	public static readonly RULE_abbreviatedEdgeTypePatternUndirected = 321;
	public static readonly RULE_nodeTypeRef = 322;
	public static readonly RULE_sourceNodeTypeRef = 323;
	public static readonly RULE_destinationNodeTypeRef = 324;
	public static readonly RULE_edgeKind = 325;
	public static readonly RULE_endpointDef = 326;
	public static readonly RULE_enpointPairDef = 327;
	public static readonly RULE_endpointPairDefPointingRight = 328;
	public static readonly RULE_endpointPairDefPointingLeft = 329;
	public static readonly RULE_endpointPairDefUndirected = 330;
	public static readonly RULE_connectorPointingRight = 331;
	public static readonly RULE_connectorPointingLeft = 332;
	public static readonly RULE_connectorUndirected = 333;
	public static readonly RULE_sourceNodeTypeName = 334;
	public static readonly RULE_destinationNodeTypeName = 335;
	public static readonly RULE_labelSetDef = 336;
	public static readonly RULE_propertyTypeSetDef = 337;
	public static readonly RULE_propertyTypeDefList = 338;
	public static readonly RULE_propertyTypeDef = 339;
	public static readonly RULE_propertyValueType = 340;
	public static readonly RULE_bindingTableType = 341;
	public static readonly RULE_valueType = 342;
	public static readonly RULE_typed = 343;
	public static readonly RULE_predefinedType = 344;
	public static readonly RULE_booleanType = 345;
	public static readonly RULE_charStringType = 346;
	public static readonly RULE_byteStringType = 347;
	public static readonly RULE_minLength = 348;
	public static readonly RULE_maxLength = 349;
	public static readonly RULE_fixedLength = 350;
	public static readonly RULE_numericType = 351;
	public static readonly RULE_exactNumericType = 352;
	public static readonly RULE_binaryExactNumericType = 353;
	public static readonly RULE_signedBinaryExactNumericType = 354;
	public static readonly RULE_unsignedBinaryExactNumericType = 355;
	public static readonly RULE_verboseBinaryExactNumericType = 356;
	public static readonly RULE_decimalExactNumericType = 357;
	public static readonly RULE_precision = 358;
	public static readonly RULE_scale = 359;
	public static readonly RULE_approximateNumericType = 360;
	public static readonly RULE_temporalType = 361;
	public static readonly RULE_temporalInstantType = 362;
	public static readonly RULE_temporalDurationType = 363;
	public static readonly RULE_dateTimeType = 364;
	public static readonly RULE_localDateTimeType = 365;
	public static readonly RULE_dateType = 366;
	public static readonly RULE_timeType = 367;
	public static readonly RULE_localTimeType = 368;
	public static readonly RULE_durationType = 369;
	public static readonly RULE_refValueType = 370;
	public static readonly RULE_graphRefValueType = 371;
	public static readonly RULE_openGraphRefValueType = 372;
	public static readonly RULE_closedGraphRefValueType = 373;
	public static readonly RULE_bindingTableRefValueType = 374;
	public static readonly RULE_nodeRefValueType = 375;
	public static readonly RULE_openNodeRefValueType = 376;
	public static readonly RULE_closedNodeRefValueType = 377;
	public static readonly RULE_edgeRefValueType = 378;
	public static readonly RULE_openEdgeRefValueType = 379;
	public static readonly RULE_closedEdgeRefValueType = 380;
	public static readonly RULE_constructedType = 381;
	public static readonly RULE_listValueType = 382;
	public static readonly RULE_listValueTypeName = 383;
	public static readonly RULE_listValueTypeNameSynonym = 384;
	public static readonly RULE_recordType = 385;
	public static readonly RULE_fieldTypesSpec = 386;
	public static readonly RULE_fieldTypeList = 387;
	public static readonly RULE_dynamicUnionType = 388;
	public static readonly RULE_openDynamicUnionType = 389;
	public static readonly RULE_dynamicPropertyValueType = 390;
	public static readonly RULE_closedDynamicUnionType = 391;
	public static readonly RULE_componentTypeList = 392;
	public static readonly RULE_componentType = 393;
	public static readonly RULE_pathValueType = 394;
	public static readonly RULE_notNull = 395;
	public static readonly RULE_fieldType = 396;
	public static readonly RULE_schemaRef = 397;
	public static readonly RULE_absoluteCatalogSchemaRef = 398;
	public static readonly RULE_catalogSchemaParentAndName = 399;
	public static readonly RULE_relativeCatalogSchemaRef = 400;
	public static readonly RULE_predefinedSchemaRef = 401;
	public static readonly RULE_absoluteDirectoryPath = 402;
	public static readonly RULE_relativeDirectoryPath = 403;
	public static readonly RULE_simpleDirectoryPath = 404;
	public static readonly RULE_graphRef = 405;
	public static readonly RULE_catalogGraphParentAndName = 406;
	public static readonly RULE_homeGraph = 407;
	public static readonly RULE_graphTypeRef = 408;
	public static readonly RULE_catalogGraphTypeParentAndName = 409;
	public static readonly RULE_bindingTableRef = 410;
	public static readonly RULE_catalogBindingTableParentAndName = 411;
	public static readonly RULE_procedureRef = 412;
	public static readonly RULE_catalogProcedureParentAndName = 413;
	public static readonly RULE_catalogObjectParentRef = 414;
	public static readonly RULE_refParameter = 415;
	public static readonly RULE_externalObjectRef = 416;
	public static readonly RULE_searchCondition = 417;
	public static readonly RULE_predicate = 418;
	public static readonly RULE_comparisonPredicate = 419;
	public static readonly RULE_comparisonPredicatePart2 = 420;
	public static readonly RULE_comparisonOperator = 421;
	public static readonly RULE_equals = 422;
	public static readonly RULE_notEquals = 423;
	public static readonly RULE_lessThen = 424;
	public static readonly RULE_greaterThan = 425;
	public static readonly RULE_lessThanOrEquals = 426;
	public static readonly RULE_graterThanOrEquals = 427;
	public static readonly RULE_comparisonPredicand = 428;
	public static readonly RULE_existsPredicate = 429;
	public static readonly RULE_nullPredicate = 430;
	public static readonly RULE_nullPredicatePart2 = 431;
	public static readonly RULE_valueTypePredicate = 432;
	public static readonly RULE_valueTypePredicatePart2 = 433;
	public static readonly RULE_normalizedPredicate = 434;
	public static readonly RULE_normalizedPredicatePart2 = 435;
	public static readonly RULE_directedPredicate = 436;
	public static readonly RULE_directedPredicatePart2 = 437;
	public static readonly RULE_labeledPredicate = 438;
	public static readonly RULE_labeledPredicatePart2 = 439;
	public static readonly RULE_isLabeledOrColon = 440;
	public static readonly RULE_sourceOrDestinationPredicate = 441;
	public static readonly RULE_nodeRef = 442;
	public static readonly RULE_sourcePredicatePart2 = 443;
	public static readonly RULE_destinationPredicatePart2 = 444;
	public static readonly RULE_edgeRef = 445;
	public static readonly RULE_allDifferentPredicate = 446;
	public static readonly RULE_samePredicate = 447;
	public static readonly RULE_propertyExistsPredicate = 448;
	public static readonly RULE_valueSpec = 449;
	public static readonly RULE_unsignedValueSpec = 450;
	public static readonly RULE_unsignedIntSpec = 451;
	public static readonly RULE_parameterValueSpec = 452;
	public static readonly RULE_predefinedParameter = 453;
	public static readonly RULE_valueExpr = 454;
	public static readonly RULE_commonValueExpr = 455;
	public static readonly RULE_commonValuePropertiesGroup = 456;
	public static readonly RULE_refValueExpr = 457;
	public static readonly RULE_graphRefValueExpr = 458;
	public static readonly RULE_bindingTableRefValueExpr = 459;
	public static readonly RULE_nodeRefValueExpr = 460;
	public static readonly RULE_edgeRefValueExpr = 461;
	public static readonly RULE_recordValueExpr = 462;
	public static readonly RULE_aggregatingValueExpr = 463;
	public static readonly RULE_booleanValueExpr = 464;
	public static readonly RULE_booleanTerm = 465;
	public static readonly RULE_booleanFactor = 466;
	public static readonly RULE_booleanTest = 467;
	public static readonly RULE_truthValue = 468;
	public static readonly RULE_booleanPrimary = 469;
	public static readonly RULE_booleanPredicand = 470;
	public static readonly RULE_paranthisedBooleanValueExpr = 471;
	public static readonly RULE_numericValueExpr = 472;
	public static readonly RULE_term = 473;
	public static readonly RULE_factor = 474;
	public static readonly RULE_numericPrimary = 475;
	public static readonly RULE_valueExprPrimary = 476;
	public static readonly RULE_parenthesizedValueExpr = 477;
	public static readonly RULE_nonParenthesizedValueExprPrimary = 478;
	public static readonly RULE_nonParenthesizedValueExprPrimarySpecialCase = 479;
	public static readonly RULE_collectionValueConstructor = 480;
	public static readonly RULE_numericValueFunction = 481;
	public static readonly RULE_lengthExpr = 482;
	public static readonly RULE_charLengthExpr = 483;
	public static readonly RULE_byteLengthExpr = 484;
	public static readonly RULE_pathLengthExpr = 485;
	public static readonly RULE_absoluteValueExpr = 486;
	public static readonly RULE_modulusExpr = 487;
	public static readonly RULE_numericValueExprDividen = 488;
	public static readonly RULE_numericValueExprDivisor = 489;
	public static readonly RULE_trigonometricFunction = 490;
	public static readonly RULE_trigonometricFunctionName = 491;
	public static readonly RULE_logarithmFunction = 492;
	public static readonly RULE_generalLogarithmFunction = 493;
	public static readonly RULE_generalLogarithmBase = 494;
	public static readonly RULE_generalLogarithmArgument = 495;
	public static readonly RULE_commonLogarithmFunction = 496;
	public static readonly RULE_naturalLogarithmFunction = 497;
	public static readonly RULE_exponentialFunction = 498;
	public static readonly RULE_powerFunction = 499;
	public static readonly RULE_numericValueExprBase = 500;
	public static readonly RULE_numericValueExprExponent = 501;
	public static readonly RULE_squareRootFunciton = 502;
	public static readonly RULE_floorFunction = 503;
	public static readonly RULE_ceilingFunction = 504;
	public static readonly RULE_stringValueExpr = 505;
	public static readonly RULE_charStringValueExpr = 506;
	public static readonly RULE_charStringConcatenation = 507;
	public static readonly RULE_charStringFactor = 508;
	public static readonly RULE_charStringPrimary = 509;
	public static readonly RULE_byteStringValueExpr = 510;
	public static readonly RULE_byteStringFactor = 511;
	public static readonly RULE_byteStringPrimary = 512;
	public static readonly RULE_byteStringConcatenation = 513;
	public static readonly RULE_stringValueFunction = 514;
	public static readonly RULE_charStringFunction = 515;
	public static readonly RULE_foldFunction = 516;
	public static readonly RULE_trimFunction = 517;
	public static readonly RULE_singleCharTrimFunction = 518;
	public static readonly RULE_multiCharTrimFunction = 519;
	public static readonly RULE_trimOperands = 520;
	public static readonly RULE_trimSource = 521;
	public static readonly RULE_trimSpec = 522;
	public static readonly RULE_trimCharString = 523;
	public static readonly RULE_normalizeFunction = 524;
	public static readonly RULE_normalForm = 525;
	public static readonly RULE_byteStringFunction = 526;
	public static readonly RULE_byteStrinTrimFunction = 527;
	public static readonly RULE_byteStringTrimOperands = 528;
	public static readonly RULE_byteStringTrimSource = 529;
	public static readonly RULE_trimByteString = 530;
	public static readonly RULE_stringLength = 531;
	public static readonly RULE_dateTimeValueExpr = 532;
	public static readonly RULE_dateTimeTerm = 533;
	public static readonly RULE_dateTimeFactor = 534;
	public static readonly RULE_dateTimePrimary = 535;
	public static readonly RULE_dateTimeValueFunction = 536;
	public static readonly RULE_dateFunction = 537;
	public static readonly RULE_timeFunction = 538;
	public static readonly RULE_localTimeFunction = 539;
	public static readonly RULE_dateTimeFunction = 540;
	public static readonly RULE_localDatetimeFunction = 541;
	public static readonly RULE_dateFunctionParameters = 542;
	public static readonly RULE_timeFunctionParameters = 543;
	public static readonly RULE_dateTimeFunctionParameters = 544;
	public static readonly RULE_durationValueExpr = 545;
	public static readonly RULE_dateTimeSubtraction = 546;
	public static readonly RULE_dateTimeSubtractionParameters = 547;
	public static readonly RULE_durationTerm = 548;
	public static readonly RULE_durationFactor = 549;
	public static readonly RULE_durationPrimary = 550;
	public static readonly RULE_durationValueExpr1 = 551;
	public static readonly RULE_durationTerm1 = 552;
	public static readonly RULE_durationTerm2 = 553;
	public static readonly RULE_dateTimeValueExpr1 = 554;
	public static readonly RULE_dateTimeValueExpr2 = 555;
	public static readonly RULE_durationValueFunction = 556;
	public static readonly RULE_durationFunction = 557;
	public static readonly RULE_durationFunctionParameters = 558;
	public static readonly RULE_durationAbsoluteValueFunction = 559;
	public static readonly RULE_listValueExpr = 560;
	public static readonly RULE_listConcatenation = 561;
	public static readonly RULE_listPrimary = 562;
	public static readonly RULE_listValueFunction = 563;
	public static readonly RULE_trimListFunction = 564;
	public static readonly RULE_elementsFunction = 565;
	public static readonly RULE_listValueConstructor = 566;
	public static readonly RULE_listValueConstructorByEnumeration = 567;
	public static readonly RULE_listElementList = 568;
	public static readonly RULE_listElement = 569;
	public static readonly RULE_recordValueConstructor = 570;
	public static readonly RULE_fieldsSpec = 571;
	public static readonly RULE_fieldList = 572;
	public static readonly RULE_field = 573;
	public static readonly RULE_pathValueExpr = 574;
	public static readonly RULE_pathValueConcatenation = 575;
	public static readonly RULE_pathValuePrimary = 576;
	public static readonly RULE_pathValueConstructor = 577;
	public static readonly RULE_pathValueConstructorByEnumeration = 578;
	public static readonly RULE_pathElementList = 579;
	public static readonly RULE_pathElementListStart = 580;
	public static readonly RULE_pathElementListStep = 581;
	public static readonly RULE_propertyRef = 582;
	public static readonly RULE_propertySource = 583;
	public static readonly RULE_valueQueryExpr = 584;
	public static readonly RULE_caseExpr = 585;
	public static readonly RULE_caseAbbreviation = 586;
	public static readonly RULE_caseSpecification = 587;
	public static readonly RULE_simpleCase = 588;
	public static readonly RULE_searchedCase = 589;
	public static readonly RULE_simpleWhenClause = 590;
	public static readonly RULE_searchedWhenClause = 591;
	public static readonly RULE_elseClause = 592;
	public static readonly RULE_caseOperand = 593;
	public static readonly RULE_whenOperandList = 594;
	public static readonly RULE_whenOperand = 595;
	public static readonly RULE_result = 596;
	public static readonly RULE_resultExpr = 597;
	public static readonly RULE_castSpec = 598;
	public static readonly RULE_castOperand = 599;
	public static readonly RULE_castTarget = 600;
	public static readonly RULE_elementIdFunction = 601;
	public static readonly RULE_letValueExpr = 602;
	public static readonly RULE_literal = 603;
	public static readonly RULE_generalLiteral = 604;
	public static readonly RULE_predefinedTypeLiteral = 605;
	public static readonly RULE_unsignedLiteral = 606;
	public static readonly RULE_booleanLiteral = 607;
	public static readonly RULE_characterStringLiteral = 608;
	public static readonly RULE_unbrokenCharacterStringLiteral = 609;
	public static readonly RULE_singleQuotedCharacterSequence = 610;
	public static readonly RULE_doubleQuotedCharacterSequence = 611;
	public static readonly RULE_accentQuotedCharacterSequence = 612;
	public static readonly RULE_noEscape = 613;
	public static readonly RULE_unbrokenSingleQuotedCharacterSequence = 614;
	public static readonly RULE_unbrokenDoubleQuotedCharacterSequence = 615;
	public static readonly RULE_unbrokenAccentQuotedCharacterSequence = 616;
	public static readonly RULE_temporalLiteral = 617;
	public static readonly RULE_dateLiteral = 618;
	public static readonly RULE_timeLiteral = 619;
	public static readonly RULE_dateTimeLiteral = 620;
	public static readonly RULE_dateString = 621;
	public static readonly RULE_timeString = 622;
	public static readonly RULE_dateTimeString = 623;
	public static readonly RULE_sqlDateTimeLiteral = 624;
	public static readonly RULE_durationLiteral = 625;
	public static readonly RULE_durationString = 626;
	public static readonly RULE_sqlIntervalLiteral = 627;
	public static readonly RULE_sqlIntervalType = 628;
	public static readonly RULE_nullLiteral = 629;
	public static readonly RULE_listLiteral = 630;
	public static readonly RULE_recordLiteral = 631;
	public static readonly RULE_objectName = 632;
	public static readonly RULE_objectNameOrBindingVar = 633;
	public static readonly RULE_directoryName = 634;
	public static readonly RULE_schemaName = 635;
	public static readonly RULE_graphName = 636;
	public static readonly RULE_delimitedGraphName = 637;
	public static readonly RULE_graphTypeName = 638;
	public static readonly RULE_elementTypeName = 639;
	public static readonly RULE_bindingTableName = 640;
	public static readonly RULE_delimitedBindingTableName = 641;
	public static readonly RULE_procedureName = 642;
	public static readonly RULE_labelName = 643;
	public static readonly RULE_propertyName = 644;
	public static readonly RULE_fieldName = 645;
	public static readonly RULE_parameterName = 646;
	public static readonly RULE_var = 647;
	public static readonly RULE_graphVar = 648;
	public static readonly RULE_graphPatternVar = 649;
	public static readonly RULE_pathOrSubpathVar = 650;
	public static readonly RULE_elementVar = 651;
	public static readonly RULE_pathVar = 652;
	public static readonly RULE_subpathVar = 653;
	public static readonly RULE_bindingTableVar = 654;
	public static readonly RULE_valueVar = 655;
	public static readonly RULE_bindingVar = 656;
	public static readonly RULE_token = 657;
	public static readonly RULE_nonDelimiterToken = 658;
	public static readonly RULE_identifier = 659;
	public static readonly RULE_separatedIdentifier = 660;
	public static readonly RULE_nonDelimitedIdentifier = 661;
	public static readonly RULE_delimitedIdentifier = 662;
	public static readonly RULE_keyWord = 663;
	public static readonly RULE_reservedWord = 664;
	public static readonly RULE_preReservedWord = 665;
	public static readonly RULE_nonReservedWord = 666;
	public static readonly RULE_delimiterToken = 667;
	public static readonly RULE_edgeSynonym = 668;
	public static readonly RULE_edgesSynonym = 669;
	public static readonly RULE_nodeSynonym = 670;
	public static readonly literalNames: (string | null)[] = [ null, "'<-'", 
                                                            "'<~'", "'<-['", 
                                                            "'<~['", "'<->'", 
                                                            "'<-/'", "'<~/'", 
                                                            "'-['", "'-/'", 
                                                            "'->'", "']-'", 
                                                            "']~'", "']->'", 
                                                            "']~>'", "'/-'", 
                                                            "'/->'", "'/~'", 
                                                            "'/~>'", "'~['", 
                                                            "'~>'", "'~/'", 
                                                            "'''", "'\"'", 
                                                            "'`'", "'\\'", 
                                                            "'+'", "'-'", 
                                                            "'--'", "'&'", 
                                                            "'*'", "'^'", 
                                                            "':'", "'::'", 
                                                            "','", "'$'", 
                                                            "'='", "'!'", 
                                                            "'<'", "'>'", 
                                                            "'{'", "'}'", 
                                                            "'['", "']'", 
                                                            "'('", "')'", 
                                                            "'?'", "';'", 
                                                            "'/'", "'//'", 
                                                            "'~'", "'_'", 
                                                            "'|'", "'%'", 
                                                            "'.'", "'..'", 
                                                            "'@'", "'#'", 
                                                            null, null, 
                                                            "'abs'", "'acos'", 
                                                            "'all'", "'all_different'", 
                                                            "'and'", "'any'", 
                                                            "'array'", "'as'", 
                                                            "'asc'", "'ascending'", 
                                                            "'asin'", "'at'", 
                                                            "'atan'", "'avg'", 
                                                            "'big'", "'bigint'", 
                                                            "'binary'", 
                                                            "'bool'", "'boolean'", 
                                                            "'both'", "'btrim'", 
                                                            "'by'", "'byte_length'", 
                                                            "'bytes'", "'call'", 
                                                            "'case'", "'cast'", 
                                                            "'ceil'", "'ceiling'", 
                                                            "'char_length'", 
                                                            "'character_length'", 
                                                            "'characteristics'", 
                                                            "'close'", "'coalesce'", 
                                                            "'collect'", 
                                                            "'commit'", 
                                                            "'copy'", "'cos'", 
                                                            "'cosh'", "'cot'", 
                                                            "'count'", "'create'", 
                                                            "'current_date'", 
                                                            "'current_graph'", 
                                                            "'current_property_graph'", 
                                                            "'current_schema'", 
                                                            "'current_time'", 
                                                            "'current_timestamp'", 
                                                            "'current_user'", 
                                                            "'date'", "'datetime'", 
                                                            "'day'", "'dec'", 
                                                            "'decimal'", 
                                                            "'degrees'", 
                                                            "'delete'", 
                                                            "'desc'", "'descending'", 
                                                            "'detach'", 
                                                            "'distinct'", 
                                                            "'double'", 
                                                            "'drop'", "'duration'", 
                                                            "'duration_between'", 
                                                            "'element_id'", 
                                                            "'else'", "'end'", 
                                                            "'expect'", 
                                                            "'exists'", 
                                                            "'exp'", "'false'", 
                                                            "'filter'", 
                                                            "'finish'", 
                                                            "'float'", "'float16'", 
                                                            "'float32'", 
                                                            "'float64'", 
                                                            "'float128'", 
                                                            "'float256'", 
                                                            "'floor'", "'for'", 
                                                            "'from'", "'group'", 
                                                            "'having'", 
                                                            "'home_graph'", 
                                                            "'home_property_graph'", 
                                                            "'home_schema'", 
                                                            "'hour'", "'if'", 
                                                            "'in'", "'insert'", 
                                                            "'int'", "'integer'", 
                                                            "'int8'", "'integer8'", 
                                                            "'int16'", "'integer16'", 
                                                            "'int32'", "'integer32'", 
                                                            "'int64'", "'integer64'", 
                                                            "'int128'", 
                                                            "'integer128'", 
                                                            "'int256'", 
                                                            "'integer256'", 
                                                            "'intersect'", 
                                                            "'interval'", 
                                                            "'is'", "'leading'", 
                                                            "'let'", "'like'", 
                                                            "'limit'", "'list'", 
                                                            "'ln'", "'local'", 
                                                            "'local_datetime'", 
                                                            "'local_time'", 
                                                            "'local_timestamp'", 
                                                            "'log'", "'log10'", 
                                                            "'lower'", "'ltrim'", 
                                                            "'match'", "'max'", 
                                                            "'min'", "'minute'", 
                                                            "'mod'", "'month'", 
                                                            "'next'", "'nodetach'", 
                                                            "'normalize'", 
                                                            "'not'", "'null'", 
                                                            "'nulls'", "'nullif'", 
                                                            "'octet_length'", 
                                                            "'of'", "'offset'", 
                                                            "'open'", "'optional'", 
                                                            "'or'", "'order'", 
                                                            "'otherwise'", 
                                                            "'parameter'", 
                                                            "'parameters'", 
                                                            "'path'", "'path_length'", 
                                                            "'paths'", "'percentile_cont'", 
                                                            "'percentile_disc'", 
                                                            "'power'", "'precision'", 
                                                            "'property_exists'", 
                                                            "'radians'", 
                                                            "'real'", "'record'", 
                                                            "'remove'", 
                                                            "'replace'", 
                                                            "'reset'", "'return'", 
                                                            "'rollback'", 
                                                            "'rtrim'", "'same'", 
                                                            "'schema'", 
                                                            "'second'", 
                                                            "'select'", 
                                                            "'session'", 
                                                            "'set'", "'signed'", 
                                                            "'sin'", "'sinh'", 
                                                            "'skip'", "'small'", 
                                                            "'smallint'", 
                                                            "'sqrt'", "'start'", 
                                                            "'stddev_pop'", 
                                                            "'stddev_samp'", 
                                                            "'string'", 
                                                            "'sum'", "'tan'", 
                                                            "'tanh'", "'then'", 
                                                            "'time'", "'timestamp'", 
                                                            "'trailing'", 
                                                            "'trim'", "'true'", 
                                                            "'typed'", "'ubigint'", 
                                                            "'uint'", "'uint8'", 
                                                            "'uint16'", 
                                                            "'uint32'", 
                                                            "'uint64'", 
                                                            "'uint128'", 
                                                            "'uint256'", 
                                                            "'union'", "'unknown'", 
                                                            "'unsigned'", 
                                                            "'upper'", "'use'", 
                                                            "'usmallint'", 
                                                            "'value'", "'varbinary'", 
                                                            "'varchar'", 
                                                            "'variable'", 
                                                            "'when'", "'where'", 
                                                            "'with'", "'xor'", 
                                                            "'year'", "'yield'", 
                                                            "'zoned'", "'zoned_datetime'", 
                                                            "'zoned_time'", 
                                                            "'aggregate'", 
                                                            "'aggregates'", 
                                                            "'alter'", "'catalog'", 
                                                            "'clear'", "'clone'", 
                                                            "'contraint'", 
                                                            "'current_role'", 
                                                            "'data'", "'directory'", 
                                                            "'exact'", "'existing'", 
                                                            "'function'", 
                                                            "'gqlstatus'", 
                                                            "'grant'", "'instant'", 
                                                            "'left'", "'nothing'", 
                                                            "'numeric'", 
                                                            "'on'", "'partion'", 
                                                            "'procedure'", 
                                                            "'product'", 
                                                            "'project'", 
                                                            "'query'", "'records'", 
                                                            "'reference'", 
                                                            "'rename'", 
                                                            "'revoke'", 
                                                            "'right'", "'substring'", 
                                                            "'temporal'", 
                                                            "'unique'", 
                                                            "'unit'", "'values'", 
                                                            "'acyclic'", 
                                                            "'binding'", 
                                                            "'bindings'", 
                                                            "'connecting'", 
                                                            "'destination'", 
                                                            "'different'", 
                                                            "'directed'", 
                                                            "'edge'", "'eges'", 
                                                            "'element'", 
                                                            "'elements'", 
                                                            "'first'", "'graph'", 
                                                            "'groups'", 
                                                            "'keep'", "'label'", 
                                                            "'labeled'", 
                                                            "'labels'", 
                                                            "'last'", "'nfc'", 
                                                            "'nfd'", "'nfkc'", 
                                                            "'nfkd'", "'no'", 
                                                            "'node'", "'normalized'", 
                                                            "'only'", "'ordinality'", 
                                                            "'propery'", 
                                                            "'read'", "'relationship'", 
                                                            "'relationships'", 
                                                            "'repetable'", 
                                                            "'shortest'", 
                                                            "'simple'", 
                                                            "'source'", 
                                                            "'table'", "'temp'", 
                                                            "'timezone'", 
                                                            "'to'", "'trail'", 
                                                            "'transaction'", 
                                                            "'type'", "'undirected'", 
                                                            "'vertex'", 
                                                            "'walk'", "'without'", 
                                                            "'write'", "'zone'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "LEFT_ARROW", 
                                                             "LEFT_ARROW_TILDE", 
                                                             "LEFT_ARROW_BRACKET", 
                                                             "LEFT_ARROW_TILDE_BRACKET", 
                                                             "LEFT_MINUS_RIGHT", 
                                                             "LEFT_MINUS_SLASH", 
                                                             "LEFT_TILDE_SLASH", 
                                                             "MINUS_LEFT_BRACKET", 
                                                             "MINUS_SLASH", 
                                                             "RIGHT_ARROW", 
                                                             "RIGHT_BRACKET_MINUS", 
                                                             "RIGHT_BRACKET_TILDE", 
                                                             "BRACKET_RIGHT_ARROW", 
                                                             "BRACKET_TILDE_RIGHT_ARROW", 
                                                             "SLASH_MINUS", 
                                                             "SLASH_MINUS_RIGHT", 
                                                             "SLASH_TILDE", 
                                                             "SLASH_TILDE_RIGHT", 
                                                             "TILDE_LEFT_BRACKET", 
                                                             "TILDE_RIGHT_ARROW", 
                                                             "TILDE_SLASH", 
                                                             "QUOTE", "DOUBLE_QUOTE", 
                                                             "GRAVE_ACCENT", 
                                                             "REVERS_SOLIDUS", 
                                                             "PLUS", "MINUS", 
                                                             "DOUBLE_MINUS", 
                                                             "AMPERSAND", 
                                                             "ASTERISK", 
                                                             "CIRCUMFLEX", 
                                                             "COLON", "DOUBLE_COLON", 
                                                             "COMMA", "DOLLAR", 
                                                             "EQUALS", "EXCLAMATION", 
                                                             "LEFT_ANGLE_BRACKET", 
                                                             "RIGHT_ANGLE_BRACKET", 
                                                             "LEFT_BRACE", 
                                                             "RIGHT_BRACE", 
                                                             "LEFT_BRACKET", 
                                                             "RIGHT_BRACKET", 
                                                             "LEFT_PAREN", 
                                                             "RIGHT_PAREN", 
                                                             "QUESTION_MARK", 
                                                             "SEMICOLON", 
                                                             "SOLIDUS", 
                                                             "DOUBLE_SOLIDUS", 
                                                             "TILDE", "UNDERSCORE", 
                                                             "VERTICAL_BAR", 
                                                             "PERCENT", 
                                                             "PERIOD", "DOUBLE_PERIOD", 
                                                             "COMMERCIAL_AT", 
                                                             "HASH", "MULTISET_ALTERNATION", 
                                                             "CONCATENATION", 
                                                             "ABS", "ACOS", 
                                                             "ALL", "ALL_DIFFERENT", 
                                                             "AND", "ANY", 
                                                             "ARRAY", "AS", 
                                                             "ASC", "ASCENDING", 
                                                             "ASIN", "AT", 
                                                             "ATAN", "AVG", 
                                                             "BIG", "BIGINT", 
                                                             "BINARY", "BOOL", 
                                                             "BOOLEAN", 
                                                             "BOTH", "BTRIM", 
                                                             "BY", "BYTE_LENGTH", 
                                                             "BYTES", "CALL", 
                                                             "CASE", "CAST", 
                                                             "CEIL", "CEILING", 
                                                             "CHAR_LENGTH", 
                                                             "CHARACTER_LENGTH", 
                                                             "CHARACTERISTICS", 
                                                             "CLOSE", "COALESCE", 
                                                             "COLLECT", 
                                                             "COMMIT", "COPY", 
                                                             "COS", "COSH", 
                                                             "COT", "COUNT", 
                                                             "CREATE", "CURRENT_DATE", 
                                                             "CURRENT_GRAPH", 
                                                             "CURRENT_PROPERTY_GRAPH", 
                                                             "CURRENT_SCHEMA", 
                                                             "CURRENT_TIME", 
                                                             "CURRENT_TIMESTAMP", 
                                                             "CURRENT_USER", 
                                                             "DATE", "DATETIME", 
                                                             "DAY", "DEC", 
                                                             "DECIMAL", 
                                                             "DEGREES", 
                                                             "DELETE", "DESC", 
                                                             "DESCENDING", 
                                                             "DETACH", "DISTINCT", 
                                                             "DOUBLE", "DROP", 
                                                             "DURATION", 
                                                             "DURATION_BETWEEN", 
                                                             "ELEMENT_ID", 
                                                             "ELSE", "END", 
                                                             "EXCEPT", "EXISTS", 
                                                             "EXP", "FALSE", 
                                                             "FILTER", "FINISH", 
                                                             "FLOAT", "FLOAT16", 
                                                             "FLOAT32", 
                                                             "FLOAT64", 
                                                             "FLOAT128", 
                                                             "FLOAT256", 
                                                             "FLOOR", "FOR", 
                                                             "FROM", "GROUP", 
                                                             "HAVING", "HOME_GRAPH", 
                                                             "HOME_PROPERTY_GRAPH", 
                                                             "HOME_SCHEMA", 
                                                             "HOUR", "IF", 
                                                             "IN", "INSERT", 
                                                             "INT", "INTEGER", 
                                                             "INT8", "INTEGER8", 
                                                             "INT16", "INTEGER16", 
                                                             "INT32", "INTEGER32", 
                                                             "INT64", "INTEGER64", 
                                                             "INT128", "INTEGER128", 
                                                             "INT256", "INTEGER256", 
                                                             "INTERSECT", 
                                                             "INTERVAL", 
                                                             "IS", "LEADING", 
                                                             "LET", "LIKE", 
                                                             "LIMIT", "LIST", 
                                                             "LN", "LOCAL", 
                                                             "LOCAL_DATETIME", 
                                                             "LOCAL_TIME", 
                                                             "LOCAL_TIMESTAMP", 
                                                             "LOG", "LOG10", 
                                                             "LOWER", "LTRIM", 
                                                             "MATCH", "MAX", 
                                                             "MIN", "MINUTE", 
                                                             "MOD", "MONTH", 
                                                             "NEXT", "NODETACH", 
                                                             "NORMALIZE", 
                                                             "NOT", "NULL", 
                                                             "NULLS", "NULLIF", 
                                                             "OCTET_LENGTH", 
                                                             "OF", "OFFSET", 
                                                             "OPEN", "OPTIONAL", 
                                                             "OR", "ORDER", 
                                                             "OTHERWISE", 
                                                             "PARAMETER", 
                                                             "PARAMETERS", 
                                                             "PATH", "PATH_LENGTH", 
                                                             "PATHS", "PERCENTILE_CONT", 
                                                             "PERCENTILE_DISC", 
                                                             "POWER", "PRECISION", 
                                                             "PROPERTY_EXISTS", 
                                                             "RADIANS", 
                                                             "REAL", "RECORD", 
                                                             "REMOVE", "REPLACE", 
                                                             "RESET", "RETURN", 
                                                             "ROLLBACK", 
                                                             "RTRIM", "SAME", 
                                                             "SCHEMA", "SECOND", 
                                                             "SELECT", "SESSION", 
                                                             "SET", "SIGNED", 
                                                             "SIN", "SINH", 
                                                             "SKIP_", "SMALL", 
                                                             "SMALLINT", 
                                                             "SQRT", "START", 
                                                             "STDDEV_POP", 
                                                             "STDDEV_SAMP", 
                                                             "STRING", "SUM", 
                                                             "TAN", "TANH", 
                                                             "THEN", "TIME", 
                                                             "TIMESTAMP", 
                                                             "TRAILING", 
                                                             "TRIM", "TRUE", 
                                                             "TYPED", "UBIGINT", 
                                                             "UINT", "UINT8", 
                                                             "UINT16", "UINT32", 
                                                             "UINT64", "UINT128", 
                                                             "UINT256", 
                                                             "UNION", "UNKNOWN", 
                                                             "UNSIGNED", 
                                                             "UPPER", "USE", 
                                                             "USMALLINT", 
                                                             "VALUE", "VARBINARY", 
                                                             "VARCHAR", 
                                                             "VARIABLE", 
                                                             "WHEN", "WHERE", 
                                                             "WITH", "XOR", 
                                                             "YEAR", "YIELD", 
                                                             "ZONED", "ZONED_DATETIME", 
                                                             "ZONED_TIME", 
                                                             "AGGREGATE", 
                                                             "AGGREGATES", 
                                                             "ALTER", "CATALOG", 
                                                             "CLEAR", "CLONE", 
                                                             "CONSTRAINT", 
                                                             "CURRENT_ROLE", 
                                                             "DATA", "DIRECTORY", 
                                                             "EXACT", "EXISTING", 
                                                             "FUNCTION", 
                                                             "GQLSTATUS", 
                                                             "GRANT", "INSTANT", 
                                                             "LEFT", "NOTHING", 
                                                             "NUMERIC", 
                                                             "ON", "PARTITION", 
                                                             "PROCEDURE", 
                                                             "PRODUCT", 
                                                             "PROJECT", 
                                                             "QUERY", "RECORDS", 
                                                             "REFERENCE", 
                                                             "RENAME", "REVOKE", 
                                                             "RIGHT", "SUBSTRING", 
                                                             "TEMPORAL", 
                                                             "UNIQUE", "UNIT", 
                                                             "VALUES", "ACYCLIC", 
                                                             "BINDING", 
                                                             "BINDINGS", 
                                                             "CONNECTING", 
                                                             "DESTINATION", 
                                                             "DIFFERENT", 
                                                             "DIRECTED", 
                                                             "EDGE", "EDGES", 
                                                             "ELEMENT", 
                                                             "ELEMENTS", 
                                                             "FIRST", "GRAPH", 
                                                             "GROUPS", "KEEP", 
                                                             "LABEL", "LABELED", 
                                                             "LABELS", "LAST", 
                                                             "NFC", "NFD", 
                                                             "NFKC", "NFKD", 
                                                             "NO", "NODE", 
                                                             "NORMALIZED", 
                                                             "ONLY", "ORDINALITY", 
                                                             "PROPERTY", 
                                                             "READ", "RELATIONSHIP", 
                                                             "RELATIONSHIPS", 
                                                             "REPEATABLE", 
                                                             "SHORTEST", 
                                                             "SIMPLE", "SOURCE", 
                                                             "TABLE", "TEMP", 
                                                             "TIMEZONE", 
                                                             "TO", "TRAIL", 
                                                             "TRANSACTION", 
                                                             "TYPE", "UNDIRECTED", 
                                                             "VERTEX", "WALK", 
                                                             "WITHOUT", 
                                                             "WRITE", "ZONE", 
                                                             "INTERVAL_DAY", 
                                                             "INTERVAL_WEEK", 
                                                             "INTERVAL_MONTH", 
                                                             "INTERVAL_YEAR", 
                                                             "IF_NOT_EXISTS", 
                                                             "IF_EXISTS", 
                                                             "UNSIGNED_NUMERIC_LITERAL", 
                                                             "SIGNED_NUMERIC_LITERAL", 
                                                             "SIGN", "EXACT_NUMERIC_LITERAL", 
                                                             "EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                                                             "EXACT_UNSIGNED_INT", 
                                                             "APROXIMATE_NUMERIC_LITERAL", 
                                                             "APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                                                             "APROXIMATE_UNSIGNED_INT", 
                                                             "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                                                             "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", 
                                                             "FOUR_DIGIT", 
                                                             "DOUBLE_DIGIT", 
                                                             "UNSIGNED_INT", 
                                                             "UNSIGNED_DECIMAL_INT", 
                                                             "UNSIGNED_HEX_INT", 
                                                             "UNSIGNED_OCTAL_INT", 
                                                             "UNSIGNED_BINARY_INT", 
                                                             "BYTE_STRING_LITERAL", 
                                                             "SINGLE_QUOTED_STRING_LITERAL", 
                                                             "DOUBLE_QUOTED_STRING_LITERAL", 
                                                             "ACCENT_QUOTED_STRING_LITERAL", 
                                                             "COMMENT", 
                                                             "SIMPLE_COMMENT_LITERAL", 
                                                             "BRACKETED_COMMNET_LITERAL", 
                                                             "WS", "WHITESPACE", 
                                                             "NEW_LINE", 
                                                             "CARRIAGE_RETURN", 
                                                             "RETURN_SIGN", 
                                                             "REGULAR_IDENTIFIER", 
                                                             "EXTENDED_IDENTIFIER", 
                                                             "START_CHARS", 
                                                             "CONTINUE_CHARS", 
                                                             "BIDIRECTIONAL_CONTROL_CHARACTER", 
                                                             "ESCAPED_CHARS", 
                                                             "ESCAPED_REVERSE_SOLIDUS", 
                                                             "ESCAPED_QUOTE", 
                                                             "ESCAPED_SOUBLE_QUOTE", 
                                                             "ESCAPED_GRAVE_ACCENT", 
                                                             "ESCAPED_TAB", 
                                                             "ESCAPED_BACKSPACE", 
                                                             "ESCAPED_NEW_LINE", 
                                                             "ESCAPED_CARRIAGE_RETURN", 
                                                             "ESCAPED_FORM_FEED", 
                                                             "ESCAPED_UNICODE4_DIGIT_VALUE", 
                                                             "ESCAPED_UNICODE6_DIGIT_VALUE", 
                                                             "FF", "RS", 
                                                             "GS", "FS", 
                                                             "CR", "SPACE", 
                                                             "TAB", "LF", 
                                                             "VT", "US", 
                                                             "DIGIT16", 
                                                             "DIGIT10", 
                                                             "DIGIT8", "DIGIT2", 
                                                             "LETTER", "GQL_LANGUAGE_CHAR", 
                                                             "GQL_SPECIAL_CHAR" ];
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"gqlProgram", "activity", "programActivity", "sessionActivity", "sessionSetCommand", 
		"sessionSetSchemaClause", "sessionSetGraphClause", "sessionSetTimeZoneClause", 
		"setTimeZoneValue", "sessionSetParameterClause", "sessionSetGraphParameterClause", 
		"sessionSetBindingTableParameterCalues", "sessionSetValuesParameterClause", 
		"sessionSetParameterName", "sessionResetCommand", "sessionResetArguments", 
		"sessionCloseCommand", "transactionActivity", "transactionStartCommand", 
		"transactionEndCommand", "transactionCharacteristics", "transactionMode", 
		"transactionAccessMode", "implDefinedAccessMode", "nestedProcedureSpec", 
		"procedureSpec", "nestedDataModProcedureSpec", "nestedQuerySpec", "procedureBody", 
		"bindingVarDefBlock", "bindingVarDef", "statmentBlock", "statement", "nextStatment", 
		"graphVarDef", "optTypedGraphInit", "graphInit", "bindingTableVarDef", 
		"optTypedBindingTableInit", "bindingTableInit", "valueVarDef", "optTypedValueInit", 
		"valueInit", "graphExpr", "currentGraph", "nestedGraphQuerySpec", "bindingTableExpr", 
		"nestedBindingTableQuerySpec", "objectExprPrimary", "linearCatalogModStatment", 
		"simpleCatalogModStatment", "primitiveCatalogModStatment", "createSchemeStatment", 
		"dropSchemeStatment", "createGraphStatment", "createOnlyGraphStatment", 
		"createOrReplaceGraphStatment", "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
		"graphSource", "dropGraphStatment", "createGraphTypeStatment", "graphTypeSource", 
		"copyOfGraphType", "dropGraphTypeStatment", "callCatalogModProcedureStatment", 
		"linearDataModStatment", "focusedLinearDataModStatment", "focusedLinearDataModStatmentBody", 
		"focusedNestedDataModProcedureSpec", "ambientLinearDataModStatment", "ambientLinearDataModStatmentBody", 
		"simpleLinearDataAccessingStatment", "simpleDataAccessingStatment", "simpleDataModStatment", 
		"primitiveDataModStatment", "insertStatment", "setStatment", "setItemList", 
		"setItem", "setPropertyItem", "setAllPropertiesItem", "setLabelItem", 
		"labelSetSpec", "removeStatment", "removeItemList", "removeItem", "removePropertyItem", 
		"removeLabelItem", "deleteStatment", "deleteItemList", "deleteItem", "callDataModProcedureStatment", 
		"compositeQueryStatment", "compositeQueryExpr", "queryConjunction", "setOperator", 
		"compositeQueryPrimary", "linearQueryStatment", "focusedLinearQueryStatment", 
		"focusedLinearQueryStatmentPart", "focusedLinearQueryAndPrimitiveResultStatmentPart", 
		"focusedPrimitiveResultStatment", "focusedNestedQuerySpec", "ambientLinearQueryStatment", 
		"simpleLinearQueryStatment", "simpleQueryStatment", "primitiveQueryStatment", 
		"matchStatment", "simpleMatchStatment", "optionalMatchStatment", "optionalOperand", 
		"matchStatmentBlock", "callQueryStatment", "filterStatment", "letStatment", 
		"letVarDefList", "letVarDef", "forStatment", "forItem", "forItemAlias", 
		"forOrdinalityOrOffset", "orderByAndPageStatment", "primitiveResultStatment", 
		"returnStatment", "returnStatmentBody", "returnItemList", "returnItem", 
		"returnItemAlias", "selectStatment", "selectItemList", "selectItem", "selectItemAlias", 
		"havingClause", "selectStatmentBody", "selectGraphMatchList", "selectGraphMatch", 
		"selectQuerySpec", "callProcedureStatment", "procedureCall", "inlineProcedureCall", 
		"varScopeClause", "bindingVarRefList", "namedProcedureCall", "procedureArgList", 
		"procedureArg", "useGraphClause", "atSchemaClause", "bindingVarRef", "elementVarRef", 
		"pathVarRef", "parameter", "graphPatternBindingTable", "graphPatternYieldClause", 
		"graphPatternYieldItemList", "graphPatternYieldItem", "graphPattern", 
		"matchMode", "repeatableElementsMatchMode", "differentEdgesMatchMode", 
		"elementBindingsOrElements", "edgeBindingsOrEdges", "pathPatternList", 
		"pathPattern", "pathVarDeclaration", "keepClause", "graphPatternWhereClause", 
		"pathPatternPrefix", "pathModePrefix", "pathMode", "pathSearchPrefix", 
		"allPathSearch", "pathOrPaths", "anyPathSearch", "numberOfPaths", "shortestPathSearch", 
		"allShortestPathSearch", "anyShortestPathSearch", "countedShortestPathSearch", 
		"countedShortestGroupSearch", "groupOrGroups", "numberOfGroups", "pathPatternExpr", 
		"pathMultisetAlternation", "pathPatternUnion", "pathTerm", "pathFactor", 
		"quantifiedPathPrimary", "questionedPathPrimary", "pathPrimary", "elementPattern", 
		"nodePattern", "elementPatternFiller", "elementVarDeclaration", "isLabelExpr", 
		"isOrColon", "elementPatternPredicate", "elementPatternWhereClause", "elementPropertySpec", 
		"propertyKeyValuePairList", "propertyKeyValuePair", "edgePattern", "fullEdgePattern", 
		"fullEdgePointingLeft", "fullEdgeUndirected", "fullEdgePointingRight", 
		"fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", "fullEdgeLeftOrRight", 
		"fullEdgeAnyDirection", "abbreviatedEdgePattern", "parenthesizedPathPatternExpr", 
		"subpathVarDeclaration", "parenthesizedPathPatternWhereClause", "insertGraphPattern", 
		"insertGraphPatternList", "insertPathPattern", "insertNodePattern", "insertEdgePattern", 
		"insertEdgePointingLeft", "insertEdgePointingRight", "insertEdgeUndirected", 
		"insertElementPatternFiller", "labelAndPropertySetSpec", "labelExpr", 
		"labelTerm", "labelFactor", "labelNegation", "labelPrimary", "wildcardLabel", 
		"parenthesizedLabelExpr", "graphPatternQuantifier", "fixedQuantifier", 
		"generalQuantifier", "lowerBound", "upperBound", "simplifiedPathPatternExpr", 
		"simplifiedDefaultingLeft", "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
		"simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
		"simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
		"simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
		"simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", "simplifiedQuntified", 
		"simplifiedQuestioned", "simplifiedTertiary", "simplifiedDirectionOverride", 
		"simplifiedOverrideLeft", "simplifiedOverrideUndirected", "simplifiedOverrideRight", 
		"simplifiedOverrideLeftOrUndirected", "simplifiedOverrideUndirectedOrRight", 
		"simplifiedOverrideLeftOrRight", "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
		"simplifiedNegation", "simplifiedPrimary", "whereClause", "yieldClause", 
		"yieldItemList", "yieldItem", "yieldItemName", "yieldItemAlias", "groupByClause", 
		"groupingElementList", "groupingElement", "emptyGroupingSet", "orderByClause", 
		"aggregateFunction", "generalSetFunction", "generalSetFunctionType", "setQuantifier", 
		"binarySetFunction", "dependantValueExpr", "independentValueExpr", "sortSpecList", 
		"sortSpec", "sortKey", "orderingSpec", "nullOrdering", "limitClause", 
		"offsetClause", "offsetSynonym", "graphTypeSpec", "nestedGraphTypeSpec", 
		"graphTypeSpecBody", "elementTypeDefList", "elementTypeDef", "nodeTypeDef", 
		"nodeTypePattern", "nodeTypePhrase", "nodeTypeName", "nodeTypeFiller", 
		"nodeTypeLabelSetDef", "nodeTypePropertyTypeSetDef", "edgeTypeDef", "edgeTypePattern", 
		"edgeTypePhrase", "edgeTypeName", "edgeTypeFiller", "edgeTypeLabelSetDef", 
		"edgeTypePropertyTypeSetDef", "fullEdgeTypePattern", "fullEdgeTypePatternPointingRight", 
		"fullEdgeTypePatternPointingLeft", "fullEdgeTypePatternUndirected", "arcTypePointingRight", 
		"arcTypePointingLeft", "arcTypeUndirected", "arcTypeFiller", "abbreviatedEdgeTypePattern", 
		"abbreviatedEdgeTypePatternPointingRight", "abbreviatedEdgeTypePatternPointingLeft", 
		"abbreviatedEdgeTypePatternUndirected", "nodeTypeRef", "sourceNodeTypeRef", 
		"destinationNodeTypeRef", "edgeKind", "endpointDef", "enpointPairDef", 
		"endpointPairDefPointingRight", "endpointPairDefPointingLeft", "endpointPairDefUndirected", 
		"connectorPointingRight", "connectorPointingLeft", "connectorUndirected", 
		"sourceNodeTypeName", "destinationNodeTypeName", "labelSetDef", "propertyTypeSetDef", 
		"propertyTypeDefList", "propertyTypeDef", "propertyValueType", "bindingTableType", 
		"valueType", "typed", "predefinedType", "booleanType", "charStringType", 
		"byteStringType", "minLength", "maxLength", "fixedLength", "numericType", 
		"exactNumericType", "binaryExactNumericType", "signedBinaryExactNumericType", 
		"unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", "decimalExactNumericType", 
		"precision", "scale", "approximateNumericType", "temporalType", "temporalInstantType", 
		"temporalDurationType", "dateTimeType", "localDateTimeType", "dateType", 
		"timeType", "localTimeType", "durationType", "refValueType", "graphRefValueType", 
		"openGraphRefValueType", "closedGraphRefValueType", "bindingTableRefValueType", 
		"nodeRefValueType", "openNodeRefValueType", "closedNodeRefValueType", 
		"edgeRefValueType", "openEdgeRefValueType", "closedEdgeRefValueType", 
		"constructedType", "listValueType", "listValueTypeName", "listValueTypeNameSynonym", 
		"recordType", "fieldTypesSpec", "fieldTypeList", "dynamicUnionType", "openDynamicUnionType", 
		"dynamicPropertyValueType", "closedDynamicUnionType", "componentTypeList", 
		"componentType", "pathValueType", "notNull", "fieldType", "schemaRef", 
		"absoluteCatalogSchemaRef", "catalogSchemaParentAndName", "relativeCatalogSchemaRef", 
		"predefinedSchemaRef", "absoluteDirectoryPath", "relativeDirectoryPath", 
		"simpleDirectoryPath", "graphRef", "catalogGraphParentAndName", "homeGraph", 
		"graphTypeRef", "catalogGraphTypeParentAndName", "bindingTableRef", "catalogBindingTableParentAndName", 
		"procedureRef", "catalogProcedureParentAndName", "catalogObjectParentRef", 
		"refParameter", "externalObjectRef", "searchCondition", "predicate", "comparisonPredicate", 
		"comparisonPredicatePart2", "comparisonOperator", "equals", "notEquals", 
		"lessThen", "greaterThan", "lessThanOrEquals", "graterThanOrEquals", "comparisonPredicand", 
		"existsPredicate", "nullPredicate", "nullPredicatePart2", "valueTypePredicate", 
		"valueTypePredicatePart2", "normalizedPredicate", "normalizedPredicatePart2", 
		"directedPredicate", "directedPredicatePart2", "labeledPredicate", "labeledPredicatePart2", 
		"isLabeledOrColon", "sourceOrDestinationPredicate", "nodeRef", "sourcePredicatePart2", 
		"destinationPredicatePart2", "edgeRef", "allDifferentPredicate", "samePredicate", 
		"propertyExistsPredicate", "valueSpec", "unsignedValueSpec", "unsignedIntSpec", 
		"parameterValueSpec", "predefinedParameter", "valueExpr", "commonValueExpr", 
		"commonValuePropertiesGroup", "refValueExpr", "graphRefValueExpr", "bindingTableRefValueExpr", 
		"nodeRefValueExpr", "edgeRefValueExpr", "recordValueExpr", "aggregatingValueExpr", 
		"booleanValueExpr", "booleanTerm", "booleanFactor", "booleanTest", "truthValue", 
		"booleanPrimary", "booleanPredicand", "paranthisedBooleanValueExpr", "numericValueExpr", 
		"term", "factor", "numericPrimary", "valueExprPrimary", "parenthesizedValueExpr", 
		"nonParenthesizedValueExprPrimary", "nonParenthesizedValueExprPrimarySpecialCase", 
		"collectionValueConstructor", "numericValueFunction", "lengthExpr", "charLengthExpr", 
		"byteLengthExpr", "pathLengthExpr", "absoluteValueExpr", "modulusExpr", 
		"numericValueExprDividen", "numericValueExprDivisor", "trigonometricFunction", 
		"trigonometricFunctionName", "logarithmFunction", "generalLogarithmFunction", 
		"generalLogarithmBase", "generalLogarithmArgument", "commonLogarithmFunction", 
		"naturalLogarithmFunction", "exponentialFunction", "powerFunction", "numericValueExprBase", 
		"numericValueExprExponent", "squareRootFunciton", "floorFunction", "ceilingFunction", 
		"stringValueExpr", "charStringValueExpr", "charStringConcatenation", "charStringFactor", 
		"charStringPrimary", "byteStringValueExpr", "byteStringFactor", "byteStringPrimary", 
		"byteStringConcatenation", "stringValueFunction", "charStringFunction", 
		"foldFunction", "trimFunction", "singleCharTrimFunction", "multiCharTrimFunction", 
		"trimOperands", "trimSource", "trimSpec", "trimCharString", "normalizeFunction", 
		"normalForm", "byteStringFunction", "byteStrinTrimFunction", "byteStringTrimOperands", 
		"byteStringTrimSource", "trimByteString", "stringLength", "dateTimeValueExpr", 
		"dateTimeTerm", "dateTimeFactor", "dateTimePrimary", "dateTimeValueFunction", 
		"dateFunction", "timeFunction", "localTimeFunction", "dateTimeFunction", 
		"localDatetimeFunction", "dateFunctionParameters", "timeFunctionParameters", 
		"dateTimeFunctionParameters", "durationValueExpr", "dateTimeSubtraction", 
		"dateTimeSubtractionParameters", "durationTerm", "durationFactor", "durationPrimary", 
		"durationValueExpr1", "durationTerm1", "durationTerm2", "dateTimeValueExpr1", 
		"dateTimeValueExpr2", "durationValueFunction", "durationFunction", "durationFunctionParameters", 
		"durationAbsoluteValueFunction", "listValueExpr", "listConcatenation", 
		"listPrimary", "listValueFunction", "trimListFunction", "elementsFunction", 
		"listValueConstructor", "listValueConstructorByEnumeration", "listElementList", 
		"listElement", "recordValueConstructor", "fieldsSpec", "fieldList", "field", 
		"pathValueExpr", "pathValueConcatenation", "pathValuePrimary", "pathValueConstructor", 
		"pathValueConstructorByEnumeration", "pathElementList", "pathElementListStart", 
		"pathElementListStep", "propertyRef", "propertySource", "valueQueryExpr", 
		"caseExpr", "caseAbbreviation", "caseSpecification", "simpleCase", "searchedCase", 
		"simpleWhenClause", "searchedWhenClause", "elseClause", "caseOperand", 
		"whenOperandList", "whenOperand", "result", "resultExpr", "castSpec", 
		"castOperand", "castTarget", "elementIdFunction", "letValueExpr", "literal", 
		"generalLiteral", "predefinedTypeLiteral", "unsignedLiteral", "booleanLiteral", 
		"characterStringLiteral", "unbrokenCharacterStringLiteral", "singleQuotedCharacterSequence", 
		"doubleQuotedCharacterSequence", "accentQuotedCharacterSequence", "noEscape", 
		"unbrokenSingleQuotedCharacterSequence", "unbrokenDoubleQuotedCharacterSequence", 
		"unbrokenAccentQuotedCharacterSequence", "temporalLiteral", "dateLiteral", 
		"timeLiteral", "dateTimeLiteral", "dateString", "timeString", "dateTimeString", 
		"sqlDateTimeLiteral", "durationLiteral", "durationString", "sqlIntervalLiteral", 
		"sqlIntervalType", "nullLiteral", "listLiteral", "recordLiteral", "objectName", 
		"objectNameOrBindingVar", "directoryName", "schemaName", "graphName", 
		"delimitedGraphName", "graphTypeName", "elementTypeName", "bindingTableName", 
		"delimitedBindingTableName", "procedureName", "labelName", "propertyName", 
		"fieldName", "parameterName", "var", "graphVar", "graphPatternVar", "pathOrSubpathVar", 
		"elementVar", "pathVar", "subpathVar", "bindingTableVar", "valueVar", 
		"bindingVar", "token", "nonDelimiterToken", "identifier", "separatedIdentifier", 
		"nonDelimitedIdentifier", "delimitedIdentifier", "keyWord", "reservedWord", 
		"preReservedWord", "nonReservedWord", "delimiterToken", "edgeSynonym", 
		"edgesSynonym", "nodeSynonym",
	];
	public get grammarFileName(): string { return "GqlParser.g4"; }
	public get literalNames(): (string | null)[] { return GqlParser.literalNames; }
	public get symbolicNames(): (string | null)[] { return GqlParser.symbolicNames; }
	public get ruleNames(): string[] { return GqlParser.ruleNames; }
	public get serializedATN(): number[] { return GqlParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(this, GqlParser._ATN, GqlParser.DecisionsToDFA, new PredictionContextCache());
	}
	// @RuleVersion(0)
	public gqlProgram(): GqlProgramContext {
		let localctx: GqlProgramContext = new GqlProgramContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, GqlParser.RULE_gqlProgram);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===40 || _la===71 || ((((_la - 84)) & ~0x1F) === 0 && ((1 << (_la - 84)) & 133121) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4218889) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2621441) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & 688257) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 560669) !== 0) || _la===261 || _la===263 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347) {
				{
				{
				this.state = 1342;
				this.activity();
				}
				}
				this.state = 1347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1348;
			this.match(GqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public activity(): ActivityContext {
		let localctx: ActivityContext = new ActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, GqlParser.RULE_activity);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1350;
			this.programActivity();
			this.state = 1352;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1, this._ctx) ) {
			case 1:
				{
				this.state = 1351;
				this.sessionCloseCommand();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public programActivity(): ProgramActivityContext {
		let localctx: ProgramActivityContext = new ProgramActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, GqlParser.RULE_programActivity);
		try {
			this.state = 1356;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 218:
			case 226:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1354;
				this.sessionActivity();
				}
				break;
			case 40:
			case 71:
			case 84:
			case 95:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 219:
			case 220:
			case 225:
			case 227:
			case 231:
			case 235:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1355;
				this.transactionActivity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionActivity(): SessionActivityContext {
		let localctx: SessionActivityContext = new SessionActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, GqlParser.RULE_sessionActivity);
		try {
			this.state = 1360;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 3, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1358;
				this.sessionSetCommand();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1359;
				this.sessionResetCommand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetCommand(): SessionSetCommandContext {
		let localctx: SessionSetCommandContext = new SessionSetCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, GqlParser.RULE_sessionSetCommand);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1362;
			this.match(GqlParser.SESSION);
			this.state = 1363;
			this.match(GqlParser.SET);
			this.state = 1368;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				{
				this.state = 1364;
				this.sessionSetSchemaClause();
				}
				break;
			case 2:
				{
				this.state = 1365;
				this.sessionSetGraphClause();
				}
				break;
			case 3:
				{
				this.state = 1366;
				this.sessionSetTimeZoneClause();
				}
				break;
			case 4:
				{
				this.state = 1367;
				this.sessionSetParameterClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetSchemaClause(): SessionSetSchemaClauseContext {
		let localctx: SessionSetSchemaClauseContext = new SessionSetSchemaClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, GqlParser.RULE_sessionSetSchemaClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1370;
			this.match(GqlParser.SCHEMA);
			this.state = 1371;
			this.schemaRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetGraphClause(): SessionSetGraphClauseContext {
		let localctx: SessionSetGraphClauseContext = new SessionSetGraphClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, GqlParser.RULE_sessionSetGraphClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1374;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1373;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 1376;
			this.match(GqlParser.GRAPH);
			this.state = 1377;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetTimeZoneClause(): SessionSetTimeZoneClauseContext {
		let localctx: SessionSetTimeZoneClauseContext = new SessionSetTimeZoneClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, GqlParser.RULE_sessionSetTimeZoneClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1379;
			this.match(GqlParser.TIME);
			this.state = 1380;
			this.match(GqlParser.ZONE);
			this.state = 1381;
			this.setTimeZoneValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setTimeZoneValue(): SetTimeZoneValueContext {
		let localctx: SetTimeZoneValueContext = new SetTimeZoneValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, GqlParser.RULE_setTimeZoneValue);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1383;
			this.stringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetParameterClause(): SessionSetParameterClauseContext {
		let localctx: SessionSetParameterClauseContext = new SessionSetParameterClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, GqlParser.RULE_sessionSetParameterClause);
		try {
			this.state = 1388;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1385;
				this.sessionSetGraphParameterClause();
				}
				break;
			case 312:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1386;
				this.sessionSetBindingTableParameterCalues();
				}
				break;
			case 263:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1387;
				this.sessionSetValuesParameterClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetGraphParameterClause(): SessionSetGraphParameterClauseContext {
		let localctx: SessionSetGraphParameterClauseContext = new SessionSetGraphParameterClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, GqlParser.RULE_sessionSetGraphParameterClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1391;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1390;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 1393;
			this.match(GqlParser.GRAPH);
			this.state = 1394;
			this.sessionSetParameterName();
			this.state = 1395;
			this.optTypedGraphInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetBindingTableParameterCalues(): SessionSetBindingTableParameterCaluesContext {
		let localctx: SessionSetBindingTableParameterCaluesContext = new SessionSetBindingTableParameterCaluesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, GqlParser.RULE_sessionSetBindingTableParameterCalues);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1398;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===312) {
				{
				this.state = 1397;
				this.match(GqlParser.BINDING);
				}
			}

			this.state = 1400;
			this.match(GqlParser.TABLE);
			this.state = 1401;
			this.sessionSetParameterName();
			this.state = 1402;
			this.optTypedBindingTableInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetValuesParameterClause(): SessionSetValuesParameterClauseContext {
		let localctx: SessionSetValuesParameterClauseContext = new SessionSetValuesParameterClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, GqlParser.RULE_sessionSetValuesParameterClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1404;
			this.match(GqlParser.VALUE);
			this.state = 1405;
			this.sessionSetParameterName();
			this.state = 1406;
			this.optTypedValueInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetParameterName(): SessionSetParameterNameContext {
		let localctx: SessionSetParameterNameContext = new SessionSetParameterNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, GqlParser.RULE_sessionSetParameterName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===364) {
				{
				this.state = 1408;
				this.match(GqlParser.IF_NOT_EXISTS);
				}
			}

			this.state = 1411;
			this.parameterName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionResetCommand(): SessionResetCommandContext {
		let localctx: SessionResetCommandContext = new SessionResetCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, GqlParser.RULE_sessionResetCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1414;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===226) {
				{
				this.state = 1413;
				this.match(GqlParser.SESSION);
				}
			}

			this.state = 1416;
			this.match(GqlParser.RESET);
			this.state = 1417;
			this.sessionResetArguments();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionResetArguments(): SessionResetArgumentsContext {
		let localctx: SessionResetArgumentsContext = new SessionResetArgumentsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, GqlParser.RULE_sessionResetArguments);
		let _la: number;
		try {
			this.state = 1432;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 62:
			case 91:
			case 204:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1420;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===62) {
					{
					this.state = 1419;
					this.match(GqlParser.ALL);
					}
				}

				this.state = 1422;
				_la = this._input.LA(1);
				if(!(_la===91 || _la===204)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 223:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1423;
				this.match(GqlParser.SCHEMA);
				}
				break;
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1425;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 1424;
					this.match(GqlParser.PROPERTY);
					}
				}

				this.state = 1427;
				this.match(GqlParser.GRAPH);
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1428;
				this.match(GqlParser.TIME);
				this.state = 1429;
				this.match(GqlParser.ZONE);
				}
				break;
			case 203:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1430;
				this.match(GqlParser.PARAMETER);
				this.state = 1431;
				this.parameterName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionCloseCommand(): SessionCloseCommandContext {
		let localctx: SessionCloseCommandContext = new SessionCloseCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, GqlParser.RULE_sessionCloseCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1435;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===226) {
				{
				this.state = 1434;
				this.match(GqlParser.SESSION);
				}
			}

			this.state = 1437;
			this.match(GqlParser.CLOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionActivity(): TransactionActivityContext {
		let localctx: TransactionActivityContext = new TransactionActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, GqlParser.RULE_transactionActivity);
		try {
			this.state = 1451;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 235:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1439;
				this.transactionStartCommand();
				this.state = 1444;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 16, this._ctx) ) {
				case 1:
					{
					this.state = 1440;
					this.procedureSpec();
					this.state = 1442;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 15, this._ctx) ) {
					case 1:
						{
						this.state = 1441;
						this.transactionEndCommand();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 40:
			case 71:
			case 84:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 219:
			case 225:
			case 227:
			case 231:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1446;
				this.procedureSpec();
				this.state = 1448;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 17, this._ctx) ) {
				case 1:
					{
					this.state = 1447;
					this.transactionEndCommand();
					}
					break;
				}
				}
				break;
			case 95:
			case 220:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1450;
				this.transactionEndCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionStartCommand(): TransactionStartCommandContext {
		let localctx: TransactionStartCommandContext = new TransactionStartCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, GqlParser.RULE_transactionStartCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1453;
			this.match(GqlParser.START);
			this.state = 1454;
			this.match(GqlParser.TRANSACTION);
			this.state = 1456;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===34 || _la===340) {
				{
				this.state = 1455;
				this.transactionCharacteristics();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionEndCommand(): TransactionEndCommandContext {
		let localctx: TransactionEndCommandContext = new TransactionEndCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, GqlParser.RULE_transactionEndCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1458;
			_la = this._input.LA(1);
			if(!(_la===95 || _la===220)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		let localctx: TransactionCharacteristicsContext = new TransactionCharacteristicsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, GqlParser.RULE_transactionCharacteristics);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1460;
			this.transactionMode();
			this.state = 1463;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1461;
				this.match(GqlParser.COMMA);
				this.state = 1462;
				this.transactionMode();
				}
				}
				this.state = 1465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let localctx: TransactionModeContext = new TransactionModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, GqlParser.RULE_transactionMode);
		try {
			this.state = 1469;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 340:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1467;
				this.transactionAccessMode();
				}
				break;
			case -1:
			case 34:
			case 40:
			case 71:
			case 84:
			case 92:
			case 95:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 218:
			case 219:
			case 220:
			case 225:
			case 226:
			case 227:
			case 231:
			case 235:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1468;
				this.implDefinedAccessMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionAccessMode(): TransactionAccessModeContext {
		let localctx: TransactionAccessModeContext = new TransactionAccessModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, GqlParser.RULE_transactionAccessMode);
		try {
			this.state = 1475;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 22, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1471;
				this.match(GqlParser.READ);
				this.state = 1472;
				this.match(GqlParser.ONLY);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1473;
				this.match(GqlParser.READ);
				this.state = 1474;
				this.match(GqlParser.WRITE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public implDefinedAccessMode(): ImplDefinedAccessModeContext {
		let localctx: ImplDefinedAccessModeContext = new ImplDefinedAccessModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, GqlParser.RULE_implDefinedAccessMode);
		try {
			this.enterOuterAlt(localctx, 1);
			// tslint:disable-next-line:no-empty
			{
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedProcedureSpec(): NestedProcedureSpecContext {
		let localctx: NestedProcedureSpecContext = new NestedProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, GqlParser.RULE_nestedProcedureSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1479;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 1480;
			this.procedureSpec();
			this.state = 1481;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureSpec(): ProcedureSpecContext {
		let localctx: ProcedureSpecContext = new ProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, GqlParser.RULE_procedureSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1483;
			this.procedureBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedDataModProcedureSpec(): NestedDataModProcedureSpecContext {
		let localctx: NestedDataModProcedureSpecContext = new NestedDataModProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, GqlParser.RULE_nestedDataModProcedureSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1485;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 1486;
			this.procedureBody();
			this.state = 1487;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedQuerySpec(): NestedQuerySpecContext {
		let localctx: NestedQuerySpecContext = new NestedQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, GqlParser.RULE_nestedQuerySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1489;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 1490;
			this.procedureBody();
			this.state = 1491;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureBody(): ProcedureBodyContext {
		let localctx: ProcedureBodyContext = new ProcedureBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, GqlParser.RULE_procedureBody);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1494;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===71) {
				{
				this.state = 1493;
				this.atSchemaClause();
				}
			}

			this.state = 1497;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===263 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347) {
				{
				this.state = 1496;
				this.bindingVarDefBlock();
				}
			}

			this.state = 1499;
			this.statmentBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarDefBlock(): BindingVarDefBlockContext {
		let localctx: BindingVarDefBlockContext = new BindingVarDefBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, GqlParser.RULE_bindingVarDefBlock);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1502;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1501;
				this.bindingVarDef();
				}
				}
				this.state = 1504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===263 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarDef(): BindingVarDefContext {
		let localctx: BindingVarDefContext = new BindingVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, GqlParser.RULE_bindingVarDef);
		try {
			this.state = 1509;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1506;
				this.graphVarDef();
				}
				break;
			case 312:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1507;
				this.bindingTableVarDef();
				}
				break;
			case 263:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1508;
				this.valueVarDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public statmentBlock(): StatmentBlockContext {
		let localctx: StatmentBlockContext = new StatmentBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, GqlParser.RULE_statmentBlock);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1511;
			this.statement();
			this.state = 1515;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===188) {
				{
				{
				this.state = 1512;
				this.nextStatment();
				}
				}
				this.state = 1517;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let localctx: StatementContext = new StatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, GqlParser.RULE_statement);
		try {
			this.state = 1521;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 28, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1518;
				this.linearCatalogModStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1519;
				this.linearDataModStatment();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1520;
				this.compositeQueryStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nextStatment(): NextStatmentContext {
		let localctx: NextStatmentContext = new NextStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, GqlParser.RULE_nextStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1523;
			this.match(GqlParser.NEXT);
			this.state = 1525;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===272) {
				{
				this.state = 1524;
				this.yieldClause();
				}
			}

			this.state = 1527;
			this.statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphVarDef(): GraphVarDefContext {
		let localctx: GraphVarDefContext = new GraphVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, GqlParser.RULE_graphVarDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1529;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 1532;
			this.match(GqlParser.GRAPH);
			this.state = 1533;
			this.graphVar();
			this.state = 1534;
			this.optTypedGraphInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optTypedGraphInit(): OptTypedGraphInitContext {
		let localctx: OptTypedGraphInitContext = new OptTypedGraphInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, GqlParser.RULE_optTypedGraphInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===33 || _la===198 || _la===248 || _la===323 || _la===339) {
				{
				this.state = 1537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1536;
					this.typed();
					}
				}

				this.state = 1539;
				this.graphRefValueType();
				}
			}

			this.state = 1542;
			this.graphInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphInit(): GraphInitContext {
		let localctx: GraphInitContext = new GraphInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, GqlParser.RULE_graphInit);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1544;
			this.match(GqlParser.EQUALS);
			this.state = 1545;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableVarDef(): BindingTableVarDefContext {
		let localctx: BindingTableVarDefContext = new BindingTableVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, GqlParser.RULE_bindingTableVarDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1548;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===312) {
				{
				this.state = 1547;
				this.match(GqlParser.BINDING);
				}
			}

			this.state = 1550;
			this.match(GqlParser.TABLE);
			this.state = 1551;
			this.bindingTableVar();
			this.state = 1552;
			this.optTypedBindingTableInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optTypedBindingTableInit(): OptTypedBindingTableInitContext {
		let localctx: OptTypedBindingTableInitContext = new OptTypedBindingTableInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, GqlParser.RULE_optTypedBindingTableInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===33 || _la===248 || _la===312 || _la===347) {
				{
				this.state = 1555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1554;
					this.typed();
					}
				}

				this.state = 1557;
				this.bindingTableRefValueType();
				}
			}

			this.state = 1560;
			this.bindingTableInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableInit(): BindingTableInitContext {
		let localctx: BindingTableInitContext = new BindingTableInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, GqlParser.RULE_bindingTableInit);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1562;
			this.match(GqlParser.EQUALS);
			this.state = 1563;
			this.bindingTableExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueVarDef(): ValueVarDefContext {
		let localctx: ValueVarDefContext = new ValueVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, GqlParser.RULE_valueVarDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1565;
			this.match(GqlParser.VALUE);
			this.state = 1566;
			this.valueVar();
			this.state = 1567;
			this.optTypedValueInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optTypedValueInit(): OptTypedValueInitContext {
		let localctx: OptTypedValueInitContext = new OptTypedValueInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, GqlParser.RULE_optTypedValueInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1573;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 2177) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 278019) !== 0) || ((((_la - 109)) & ~0x1F) === 0 && ((1 << (_la - 109)) & 1056974873) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 1082129921) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 2164260865) !== 0) || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 1628192771) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 33769983) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 679479393) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 385) !== 0)) {
				{
				this.state = 1570;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1569;
					this.typed();
					}
				}

				this.state = 1572;
				this.valueType();
				}
			}

			this.state = 1575;
			this.valueInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueInit(): ValueInitContext {
		let localctx: ValueInitContext = new ValueInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, GqlParser.RULE_valueInit);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1577;
			this.match(GqlParser.EQUALS);
			this.state = 1578;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphExpr(): GraphExprContext {
		let localctx: GraphExprContext = new GraphExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, GqlParser.RULE_graphExpr);
		try {
			this.state = 1585;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 38, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1580;
				this.nestedGraphQuerySpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1581;
				this.objectExprPrimary();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1582;
				this.graphRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1583;
				this.objectNameOrBindingVar();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1584;
				this.currentGraph();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public currentGraph(): CurrentGraphContext {
		let localctx: CurrentGraphContext = new CurrentGraphContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, GqlParser.RULE_currentGraph);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1587;
			_la = this._input.LA(1);
			if(!(_la===103 || _la===104)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedGraphQuerySpec(): NestedGraphQuerySpecContext {
		let localctx: NestedGraphQuerySpecContext = new NestedGraphQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, GqlParser.RULE_nestedGraphQuerySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1589;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableExpr(): BindingTableExprContext {
		let localctx: BindingTableExprContext = new BindingTableExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, GqlParser.RULE_bindingTableExpr);
		try {
			this.state = 1595;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 39, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1591;
				this.nestedBindingTableQuerySpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1592;
				this.objectExprPrimary();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1593;
				this.bindingTableRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1594;
				this.objectNameOrBindingVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedBindingTableQuerySpec(): NestedBindingTableQuerySpecContext {
		let localctx: NestedBindingTableQuerySpecContext = new NestedBindingTableQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, GqlParser.RULE_nestedBindingTableQuerySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1597;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public objectExprPrimary(): ObjectExprPrimaryContext {
		let localctx: ObjectExprPrimaryContext = new ObjectExprPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, GqlParser.RULE_objectExprPrimary);
		try {
			this.state = 1608;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 40, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1599;
				this.match(GqlParser.VARIABLE);
				this.state = 1600;
				this.valueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1601;
				this.parenthesizedValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1602;
				this.propertyRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1603;
				this.unsignedValueSpec();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1604;
				this.aggregateFunction();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1605;
				this.collectionValueConstructor();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1606;
				this.valueQueryExpr();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1607;
				this.caseExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public linearCatalogModStatment(): LinearCatalogModStatmentContext {
		let localctx: LinearCatalogModStatmentContext = new LinearCatalogModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, GqlParser.RULE_linearCatalogModStatment);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1611;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1610;
					this.simpleCatalogModStatment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1613;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleCatalogModStatment(): SimpleCatalogModStatmentContext {
		let localctx: SimpleCatalogModStatmentContext = new SimpleCatalogModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, GqlParser.RULE_simpleCatalogModStatment);
		try {
			this.state = 1617;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 101:
			case 121:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1615;
				this.primitiveCatalogModStatment();
				}
				break;
			case 84:
			case 199:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1616;
				this.callCatalogModProcedureStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveCatalogModStatment(): PrimitiveCatalogModStatmentContext {
		let localctx: PrimitiveCatalogModStatmentContext = new PrimitiveCatalogModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, GqlParser.RULE_primitiveCatalogModStatment);
		try {
			this.state = 1625;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 43, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1619;
				this.createSchemeStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1620;
				this.createGraphStatment();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1621;
				this.createGraphTypeStatment();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1622;
				this.dropSchemeStatment();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1623;
				this.dropGraphStatment();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1624;
				this.dropGraphTypeStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createSchemeStatment(): CreateSchemeStatmentContext {
		let localctx: CreateSchemeStatmentContext = new CreateSchemeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, GqlParser.RULE_createSchemeStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1627;
			this.match(GqlParser.CREATE);
			this.state = 1628;
			this.match(GqlParser.SCHEMA);
			this.state = 1630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===364) {
				{
				this.state = 1629;
				this.match(GqlParser.IF_NOT_EXISTS);
				}
			}

			this.state = 1632;
			this.catalogSchemaParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropSchemeStatment(): DropSchemeStatmentContext {
		let localctx: DropSchemeStatmentContext = new DropSchemeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, GqlParser.RULE_dropSchemeStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1634;
			this.match(GqlParser.DROP);
			this.state = 1635;
			this.match(GqlParser.SCHEMA);
			this.state = 1637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===365) {
				{
				this.state = 1636;
				this.match(GqlParser.IF_EXISTS);
				}
			}

			this.state = 1639;
			this.catalogSchemaParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createGraphStatment(): CreateGraphStatmentContext {
		let localctx: CreateGraphStatmentContext = new CreateGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, GqlParser.RULE_createGraphStatment);
		try {
			this.state = 1643;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 46, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1641;
				this.createOnlyGraphStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1642;
				this.createOrReplaceGraphStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createOnlyGraphStatment(): CreateOnlyGraphStatmentContext {
		let localctx: CreateOnlyGraphStatmentContext = new CreateOnlyGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, GqlParser.RULE_createOnlyGraphStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1645;
			this.match(GqlParser.CREATE);
			this.state = 1647;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1646;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 1649;
			this.match(GqlParser.GRAPH);
			this.state = 1651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===364) {
				{
				this.state = 1650;
				this.match(GqlParser.IF_NOT_EXISTS);
				}
			}

			this.state = 1653;
			this.catalogGraphParentAndName();
			this.state = 1656;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
				{
				this.state = 1654;
				this.openGraphType();
				}
				break;
			case 33:
			case 35:
			case 40:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 170:
			case 248:
			case 386:
			case 387:
			case 396:
				{
				this.state = 1655;
				this.ofGraphType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1659;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===67) {
				{
				this.state = 1658;
				this.graphSource();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createOrReplaceGraphStatment(): CreateOrReplaceGraphStatmentContext {
		let localctx: CreateOrReplaceGraphStatmentContext = new CreateOrReplaceGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, GqlParser.RULE_createOrReplaceGraphStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1661;
			this.match(GqlParser.CREATE);
			this.state = 1662;
			this.match(GqlParser.OR);
			this.state = 1663;
			this.match(GqlParser.REPLACE);
			this.state = 1665;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1664;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 1667;
			this.match(GqlParser.GRAPH);
			this.state = 1668;
			this.catalogGraphParentAndName();
			this.state = 1671;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
				{
				this.state = 1669;
				this.openGraphType();
				}
				break;
			case 33:
			case 35:
			case 40:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 170:
			case 248:
			case 386:
			case 387:
			case 396:
				{
				this.state = 1670;
				this.ofGraphType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1674;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===67) {
				{
				this.state = 1673;
				this.graphSource();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openGraphType(): OpenGraphTypeContext {
		let localctx: OpenGraphTypeContext = new OpenGraphTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, GqlParser.RULE_openGraphType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1676;
			this.match(GqlParser.OPEN);
			this.state = 1681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===323 || _la===339) {
				{
				this.state = 1678;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 1677;
					this.match(GqlParser.PROPERTY);
					}
				}

				this.state = 1680;
				this.match(GqlParser.GRAPH);
				}
			}

			this.state = 1683;
			this.match(GqlParser.TYPE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ofGraphType(): OfGraphTypeContext {
		let localctx: OfGraphTypeContext = new OfGraphTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, GqlParser.RULE_ofGraphType);
		let _la: number;
		try {
			this.state = 1694;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 58, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1685;
				this.graphTypeLikeGraph();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1687;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1686;
					this.typed();
					}
				}

				this.state = 1689;
				this.graphTypeRef();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1690;
					this.typed();
					}
				}

				this.state = 1693;
				this.nestedGraphTypeSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeLikeGraph(): GraphTypeLikeGraphContext {
		let localctx: GraphTypeLikeGraphContext = new GraphTypeLikeGraphContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, GqlParser.RULE_graphTypeLikeGraph);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1696;
			this.match(GqlParser.LIKE);
			this.state = 1697;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphSource(): GraphSourceContext {
		let localctx: GraphSourceContext = new GraphSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, GqlParser.RULE_graphSource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1699;
			this.match(GqlParser.AS);
			this.state = 1700;
			this.match(GqlParser.COPY);
			this.state = 1701;
			this.match(GqlParser.OF);
			this.state = 1702;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropGraphStatment(): DropGraphStatmentContext {
		let localctx: DropGraphStatmentContext = new DropGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, GqlParser.RULE_dropGraphStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1704;
			this.match(GqlParser.DROP);
			this.state = 1706;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1705;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 1708;
			this.match(GqlParser.GRAPH);
			this.state = 1710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===365) {
				{
				this.state = 1709;
				this.match(GqlParser.IF_EXISTS);
				}
			}

			this.state = 1712;
			this.catalogGraphParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createGraphTypeStatment(): CreateGraphTypeStatmentContext {
		let localctx: CreateGraphTypeStatmentContext = new CreateGraphTypeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, GqlParser.RULE_createGraphTypeStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1714;
			this.match(GqlParser.CREATE);
			this.state = 1730;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				{
				{
				this.state = 1716;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 1715;
					this.match(GqlParser.PROPERTY);
					}
				}

				this.state = 1718;
				this.match(GqlParser.GRAPH);
				this.state = 1719;
				this.match(GqlParser.TYPE);
				this.state = 1721;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===364) {
					{
					this.state = 1720;
					this.match(GqlParser.IF_NOT_EXISTS);
					}
				}

				}
				}
				break;
			case 200:
				{
				{
				this.state = 1723;
				this.match(GqlParser.OR);
				this.state = 1724;
				this.match(GqlParser.REPLACE);
				this.state = 1726;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 1725;
					this.match(GqlParser.PROPERTY);
					}
				}

				this.state = 1728;
				this.match(GqlParser.GRAPH);
				this.state = 1729;
				this.match(GqlParser.TYPE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1732;
			this.catalogGraphTypeParentAndName();
			this.state = 1733;
			this.graphTypeSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeSource(): GraphTypeSourceContext {
		let localctx: GraphTypeSourceContext = new GraphTypeSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, GqlParser.RULE_graphTypeSource);
		let _la: number;
		try {
			this.state = 1744;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 67, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===67) {
					{
					this.state = 1735;
					this.match(GqlParser.AS);
					}
				}

				this.state = 1738;
				this.copyOfGraphType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1739;
				this.graphTypeLikeGraph();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1741;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===67) {
					{
					this.state = 1740;
					this.match(GqlParser.AS);
					}
				}

				this.state = 1743;
				this.nestedGraphTypeSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public copyOfGraphType(): CopyOfGraphTypeContext {
		let localctx: CopyOfGraphTypeContext = new CopyOfGraphTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, GqlParser.RULE_copyOfGraphType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1746;
			this.match(GqlParser.COPY);
			this.state = 1747;
			this.match(GqlParser.OF);
			this.state = 1750;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 386:
			case 387:
			case 396:
				{
				this.state = 1748;
				this.graphTypeRef();
				}
				break;
			case -1:
			case 40:
			case 41:
			case 71:
			case 84:
			case 92:
			case 95:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 188:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 218:
			case 219:
			case 220:
			case 225:
			case 226:
			case 227:
			case 231:
			case 235:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
				{
				this.state = 1749;
				this.externalObjectRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropGraphTypeStatment(): DropGraphTypeStatmentContext {
		let localctx: DropGraphTypeStatmentContext = new DropGraphTypeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, GqlParser.RULE_dropGraphTypeStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1752;
			this.match(GqlParser.DROP);
			this.state = 1754;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1753;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 1756;
			this.match(GqlParser.GRAPH);
			this.state = 1757;
			this.match(GqlParser.TYPE);
			this.state = 1759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===365) {
				{
				this.state = 1758;
				this.match(GqlParser.IF_EXISTS);
				}
			}

			this.state = 1761;
			this.catalogGraphTypeParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callCatalogModProcedureStatment(): CallCatalogModProcedureStatmentContext {
		let localctx: CallCatalogModProcedureStatmentContext = new CallCatalogModProcedureStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, GqlParser.RULE_callCatalogModProcedureStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1763;
			this.callProcedureStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public linearDataModStatment(): LinearDataModStatmentContext {
		let localctx: LinearDataModStatmentContext = new LinearDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, GqlParser.RULE_linearDataModStatment);
		try {
			this.state = 1767;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 261:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1765;
				this.focusedLinearDataModStatment();
				}
				break;
			case 40:
			case 84:
			case 118:
			case 131:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 227:
			case 231:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1766;
				this.ambientLinearDataModStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearDataModStatment(): FocusedLinearDataModStatmentContext {
		let localctx: FocusedLinearDataModStatmentContext = new FocusedLinearDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, GqlParser.RULE_focusedLinearDataModStatment);
		try {
			this.state = 1771;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 72, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1769;
				this.focusedLinearDataModStatmentBody();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1770;
				this.focusedNestedDataModProcedureSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearDataModStatmentBody(): FocusedLinearDataModStatmentBodyContext {
		let localctx: FocusedLinearDataModStatmentBodyContext = new FocusedLinearDataModStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, GqlParser.RULE_focusedLinearDataModStatmentBody);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1773;
			this.useGraphClause();
			this.state = 1774;
			this.simpleLinearDataAccessingStatment();
			this.state = 1776;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 73, this._ctx) ) {
			case 1:
				{
				this.state = 1775;
				this.primitiveResultStatment();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedNestedDataModProcedureSpec(): FocusedNestedDataModProcedureSpecContext {
		let localctx: FocusedNestedDataModProcedureSpecContext = new FocusedNestedDataModProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, GqlParser.RULE_focusedNestedDataModProcedureSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1778;
			this.useGraphClause();
			this.state = 1779;
			this.nestedDataModProcedureSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ambientLinearDataModStatment(): AmbientLinearDataModStatmentContext {
		let localctx: AmbientLinearDataModStatmentContext = new AmbientLinearDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, GqlParser.RULE_ambientLinearDataModStatment);
		try {
			this.state = 1783;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 84:
			case 118:
			case 131:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 227:
			case 231:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1781;
				this.ambientLinearDataModStatmentBody();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1782;
				this.nestedDataModProcedureSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ambientLinearDataModStatmentBody(): AmbientLinearDataModStatmentBodyContext {
		let localctx: AmbientLinearDataModStatmentBodyContext = new AmbientLinearDataModStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, GqlParser.RULE_ambientLinearDataModStatmentBody);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1785;
			this.simpleLinearDataAccessingStatment();
			this.state = 1787;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				{
				this.state = 1786;
				this.primitiveResultStatment();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleLinearDataAccessingStatment(): SimpleLinearDataAccessingStatmentContext {
		let localctx: SimpleLinearDataAccessingStatmentContext = new SimpleLinearDataAccessingStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, GqlParser.RULE_simpleLinearDataAccessingStatment);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1790;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1789;
					this.simpleDataAccessingStatment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1792;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 76, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleDataAccessingStatment(): SimpleDataAccessingStatmentContext {
		let localctx: SimpleDataAccessingStatmentContext = new SimpleDataAccessingStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, GqlParser.RULE_simpleDataAccessingStatment);
		try {
			this.state = 1796;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 77, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1794;
				this.simpleQueryStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1795;
				this.simpleDataModStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleDataModStatment(): SimpleDataModStatmentContext {
		let localctx: SimpleDataModStatmentContext = new SimpleDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, GqlParser.RULE_simpleDataModStatment);
		try {
			this.state = 1800;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 118:
			case 150:
			case 189:
			case 216:
			case 227:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1798;
				this.primitiveDataModStatment();
				}
				break;
			case 84:
			case 199:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1799;
				this.callDataModProcedureStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveDataModStatment(): PrimitiveDataModStatmentContext {
		let localctx: PrimitiveDataModStatmentContext = new PrimitiveDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, GqlParser.RULE_primitiveDataModStatment);
		try {
			this.state = 1806;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 150:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1802;
				this.insertStatment();
				}
				break;
			case 227:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1803;
				this.setStatment();
				}
				break;
			case 216:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1804;
				this.removeStatment();
				}
				break;
			case 118:
			case 189:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1805;
				this.deleteStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertStatment(): InsertStatmentContext {
		let localctx: InsertStatmentContext = new InsertStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, GqlParser.RULE_insertStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1808;
			this.match(GqlParser.INSERT);
			this.state = 1809;
			this.insertGraphPattern();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setStatment(): SetStatmentContext {
		let localctx: SetStatmentContext = new SetStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, GqlParser.RULE_setStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1811;
			this.match(GqlParser.SET);
			this.state = 1812;
			this.setItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setItemList(): SetItemListContext {
		let localctx: SetItemListContext = new SetItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, GqlParser.RULE_setItemList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1814;
			this.setItem();
			this.state = 1817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1815;
				this.match(GqlParser.COMMA);
				this.state = 1816;
				this.setItem();
				}
				}
				this.state = 1819;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setItem(): SetItemContext {
		let localctx: SetItemContext = new SetItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, GqlParser.RULE_setItem);
		try {
			this.state = 1824;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 81, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1821;
				this.setPropertyItem();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1822;
				this.setAllPropertiesItem();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1823;
				this.setLabelItem();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setPropertyItem(): SetPropertyItemContext {
		let localctx: SetPropertyItemContext = new SetPropertyItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, GqlParser.RULE_setPropertyItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1826;
			this.bindingVarRef();
			this.state = 1827;
			this.match(GqlParser.PERIOD);
			this.state = 1828;
			this.propertyName();
			this.state = 1829;
			this.match(GqlParser.EQUALS);
			this.state = 1830;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setAllPropertiesItem(): SetAllPropertiesItemContext {
		let localctx: SetAllPropertiesItemContext = new SetAllPropertiesItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, GqlParser.RULE_setAllPropertiesItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1832;
			this.bindingVarRef();
			this.state = 1833;
			this.match(GqlParser.EQUALS);
			this.state = 1834;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 1836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
				{
				this.state = 1835;
				this.propertyKeyValuePairList();
				}
			}

			this.state = 1838;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setLabelItem(): SetLabelItemContext {
		let localctx: SetLabelItemContext = new SetLabelItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, GqlParser.RULE_setLabelItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1840;
			this.bindingVarRef();
			this.state = 1841;
			this.isOrColon();
			this.state = 1842;
			this.labelSetSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelSetSpec(): LabelSetSpecContext {
		let localctx: LabelSetSpecContext = new LabelSetSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, GqlParser.RULE_labelSetSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1844;
			this.labelName();
			this.state = 1849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===29) {
				{
				{
				this.state = 1845;
				this.match(GqlParser.AMPERSAND);
				this.state = 1846;
				this.labelName();
				}
				}
				this.state = 1851;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeStatment(): RemoveStatmentContext {
		let localctx: RemoveStatmentContext = new RemoveStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, GqlParser.RULE_removeStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1852;
			this.match(GqlParser.REMOVE);
			this.state = 1853;
			this.removeItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeItemList(): RemoveItemListContext {
		let localctx: RemoveItemListContext = new RemoveItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, GqlParser.RULE_removeItemList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1855;
			this.removeItem();
			this.state = 1858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1856;
				this.match(GqlParser.COMMA);
				this.state = 1857;
				this.removeItem();
				}
				}
				this.state = 1860;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeItem(): RemoveItemContext {
		let localctx: RemoveItemContext = new RemoveItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, GqlParser.RULE_removeItem);
		try {
			this.state = 1864;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 85, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1862;
				this.removePropertyItem();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1863;
				this.removeLabelItem();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removePropertyItem(): RemovePropertyItemContext {
		let localctx: RemovePropertyItemContext = new RemovePropertyItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, GqlParser.RULE_removePropertyItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1866;
			this.bindingVarRef();
			this.state = 1867;
			this.match(GqlParser.PERIOD);
			this.state = 1868;
			this.propertyName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeLabelItem(): RemoveLabelItemContext {
		let localctx: RemoveLabelItemContext = new RemoveLabelItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, GqlParser.RULE_removeLabelItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1870;
			this.bindingVarRef();
			this.state = 1871;
			this.isOrColon();
			this.state = 1872;
			this.labelSetSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteStatment(): DeleteStatmentContext {
		let localctx: DeleteStatmentContext = new DeleteStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, GqlParser.RULE_deleteStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1874;
			_la = this._input.LA(1);
			if(!(_la===118 || _la===189)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1875;
			this.match(GqlParser.DELETE);
			this.state = 1876;
			this.deleteItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteItemList(): DeleteItemListContext {
		let localctx: DeleteItemListContext = new DeleteItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, GqlParser.RULE_deleteItemList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1878;
			this.deleteItem();
			this.state = 1881;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1879;
				this.match(GqlParser.COMMA);
				this.state = 1880;
				this.deleteItem();
				}
				}
				this.state = 1883;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteItem(): DeleteItemContext {
		let localctx: DeleteItemContext = new DeleteItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, GqlParser.RULE_deleteItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1885;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callDataModProcedureStatment(): CallDataModProcedureStatmentContext {
		let localctx: CallDataModProcedureStatmentContext = new CallDataModProcedureStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, GqlParser.RULE_callDataModProcedureStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1887;
			this.callProcedureStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compositeQueryStatment(): CompositeQueryStatmentContext {
		let localctx: CompositeQueryStatmentContext = new CompositeQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, GqlParser.RULE_compositeQueryStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1889;
			this.compositeQueryExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public compositeQueryExpr(): CompositeQueryExprContext;
	public compositeQueryExpr(_p: number): CompositeQueryExprContext;
	// @RuleVersion(0)
	public compositeQueryExpr(_p?: number): CompositeQueryExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: CompositeQueryExprContext = new CompositeQueryExprContext(this, this._ctx, _parentState);
		let _prevctx: CompositeQueryExprContext = localctx;
		let _startState: number = 190;
		this.enterRecursionRule(localctx, 190, GqlParser.RULE_compositeQueryExpr, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			this.state = 1892;
			this.compositeQueryPrimary();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1900;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new CompositeQueryExprContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_compositeQueryExpr);
					this.state = 1894;
					if (!(this.precpred(this._ctx, 2))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
					}
					this.state = 1895;
					this.queryConjunction();
					this.state = 1896;
					this.compositeQueryPrimary();
					}
					}
				}
				this.state = 1902;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryConjunction(): QueryConjunctionContext {
		let localctx: QueryConjunctionContext = new QueryConjunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 192, GqlParser.RULE_queryConjunction);
		try {
			this.state = 1905;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 127:
			case 165:
			case 257:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1903;
				this.setOperator();
				}
				break;
			case 202:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1904;
				this.match(GqlParser.OTHERWISE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setOperator(): SetOperatorContext {
		let localctx: SetOperatorContext = new SetOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, GqlParser.RULE_setOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1907;
			_la = this._input.LA(1);
			if(!(_la===127 || _la===165 || _la===257)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1908;
			this.setQuantifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compositeQueryPrimary(): CompositeQueryPrimaryContext {
		let localctx: CompositeQueryPrimaryContext = new CompositeQueryPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, GqlParser.RULE_compositeQueryPrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1910;
			this.linearQueryStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public linearQueryStatment(): LinearQueryStatmentContext {
		let localctx: LinearQueryStatmentContext = new LinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, GqlParser.RULE_linearQueryStatment);
		try {
			this.state = 1914;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 225:
			case 261:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1912;
				this.focusedLinearQueryStatment();
				}
				break;
			case 40:
			case 84:
			case 131:
			case 132:
			case 140:
			case 169:
			case 171:
			case 182:
			case 197:
			case 199:
			case 201:
			case 219:
			case 231:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1913;
				this.ambientLinearQueryStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearQueryStatment(): FocusedLinearQueryStatmentContext {
		let localctx: FocusedLinearQueryStatmentContext = new FocusedLinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 200, GqlParser.RULE_focusedLinearQueryStatment);
		try {
			let _alt: number;
			this.state = 1926;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 91, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1917;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1916;
						this.focusedLinearQueryStatmentPart();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1919;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 90, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 1921;
				this.focusedLinearQueryAndPrimitiveResultStatmentPart();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1923;
				this.focusedPrimitiveResultStatment();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1924;
				this.focusedNestedQuerySpec();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1925;
				this.selectStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearQueryStatmentPart(): FocusedLinearQueryStatmentPartContext {
		let localctx: FocusedLinearQueryStatmentPartContext = new FocusedLinearQueryStatmentPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, GqlParser.RULE_focusedLinearQueryStatmentPart);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1928;
			this.useGraphClause();
			this.state = 1929;
			this.simpleLinearQueryStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearQueryAndPrimitiveResultStatmentPart(): FocusedLinearQueryAndPrimitiveResultStatmentPartContext {
		let localctx: FocusedLinearQueryAndPrimitiveResultStatmentPartContext = new FocusedLinearQueryAndPrimitiveResultStatmentPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1931;
			this.useGraphClause();
			this.state = 1932;
			this.simpleLinearQueryStatment();
			this.state = 1933;
			this.primitiveResultStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedPrimitiveResultStatment(): FocusedPrimitiveResultStatmentContext {
		let localctx: FocusedPrimitiveResultStatmentContext = new FocusedPrimitiveResultStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, GqlParser.RULE_focusedPrimitiveResultStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1935;
			this.useGraphClause();
			this.state = 1936;
			this.primitiveResultStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedNestedQuerySpec(): FocusedNestedQuerySpecContext {
		let localctx: FocusedNestedQuerySpecContext = new FocusedNestedQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, GqlParser.RULE_focusedNestedQuerySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1938;
			this.useGraphClause();
			this.state = 1939;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ambientLinearQueryStatment(): AmbientLinearQueryStatmentContext {
		let localctx: AmbientLinearQueryStatmentContext = new AmbientLinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, GqlParser.RULE_ambientLinearQueryStatment);
		let _la: number;
		try {
			this.state = 1946;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 84:
			case 131:
			case 132:
			case 140:
			case 169:
			case 171:
			case 182:
			case 197:
			case 199:
			case 201:
			case 219:
			case 231:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===84 || _la===131 || _la===140 || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & 1342185477) !== 0) || _la===201 || _la===231) {
					{
					this.state = 1941;
					this.simpleLinearQueryStatment();
					}
				}

				this.state = 1944;
				this.primitiveResultStatment();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1945;
				this.nestedQuerySpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		let localctx: SimpleLinearQueryStatmentContext = new SimpleLinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, GqlParser.RULE_simpleLinearQueryStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1948;
			this.simpleQueryStatment();
			this.state = 1952;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===84 || _la===131 || _la===140 || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & 1342185477) !== 0) || _la===201 || _la===231) {
				{
				{
				this.state = 1949;
				this.simpleQueryStatment();
				}
				}
				this.state = 1954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleQueryStatment(): SimpleQueryStatmentContext {
		let localctx: SimpleQueryStatmentContext = new SimpleQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 214, GqlParser.RULE_simpleQueryStatment);
		try {
			this.state = 1957;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 95, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1955;
				this.primitiveQueryStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1956;
				this.callQueryStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveQueryStatment(): PrimitiveQueryStatmentContext {
		let localctx: PrimitiveQueryStatmentContext = new PrimitiveQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, GqlParser.RULE_primitiveQueryStatment);
		try {
			this.state = 1964;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 182:
			case 199:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1959;
				this.matchStatment();
				}
				break;
			case 169:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1960;
				this.letStatment();
				}
				break;
			case 140:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1961;
				this.forStatment();
				}
				break;
			case 131:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1962;
				this.filterStatment();
				}
				break;
			case 171:
			case 197:
			case 201:
			case 231:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1963;
				this.orderByAndPageStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public matchStatment(): MatchStatmentContext {
		let localctx: MatchStatmentContext = new MatchStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 218, GqlParser.RULE_matchStatment);
		try {
			this.state = 1968;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 182:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1966;
				this.simpleMatchStatment();
				}
				break;
			case 199:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1967;
				this.optionalMatchStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleMatchStatment(): SimpleMatchStatmentContext {
		let localctx: SimpleMatchStatmentContext = new SimpleMatchStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, GqlParser.RULE_simpleMatchStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1970;
			this.match(GqlParser.MATCH);
			this.state = 1971;
			this.graphPatternBindingTable();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionalMatchStatment(): OptionalMatchStatmentContext {
		let localctx: OptionalMatchStatmentContext = new OptionalMatchStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, GqlParser.RULE_optionalMatchStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1973;
			this.match(GqlParser.OPTIONAL);
			this.state = 1974;
			this.optionalOperand();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionalOperand(): OptionalOperandContext {
		let localctx: OptionalOperandContext = new OptionalOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, GqlParser.RULE_optionalOperand);
		try {
			this.state = 1985;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 182:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1976;
				this.simpleMatchStatment();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1977;
				this.match(GqlParser.LEFT_BRACE);
				this.state = 1978;
				this.matchStatmentBlock();
				this.state = 1979;
				this.match(GqlParser.RIGHT_BRACE);
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1981;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 1982;
				this.matchStatmentBlock();
				this.state = 1983;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public matchStatmentBlock(): MatchStatmentBlockContext {
		let localctx: MatchStatmentBlockContext = new MatchStatmentBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, GqlParser.RULE_matchStatmentBlock);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1987;
				this.matchStatment();
				}
				}
				this.state = 1990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===182 || _la===199);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callQueryStatment(): CallQueryStatmentContext {
		let localctx: CallQueryStatmentContext = new CallQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, GqlParser.RULE_callQueryStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1992;
			this.callProcedureStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterStatment(): FilterStatmentContext {
		let localctx: FilterStatmentContext = new FilterStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, GqlParser.RULE_filterStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1994;
			this.match(GqlParser.FILTER);
			this.state = 1997;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 268:
				{
				this.state = 1995;
				this.whereClause();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 63:
			case 70:
			case 72:
			case 73:
			case 80:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 102:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 114:
			case 122:
			case 123:
			case 124:
			case 128:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 175:
			case 176:
			case 177:
			case 179:
			case 180:
			case 181:
			case 183:
			case 184:
			case 186:
			case 190:
			case 191:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 215:
			case 221:
			case 222:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 246:
			case 247:
			case 258:
			case 260:
			case 263:
			case 274:
			case 275:
			case 312:
			case 323:
			case 339:
			case 347:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				{
				this.state = 1996;
				this.searchCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letStatment(): LetStatmentContext {
		let localctx: LetStatmentContext = new LetStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, GqlParser.RULE_letStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1999;
			this.match(GqlParser.LET);
			this.state = 2000;
			this.letVarDefList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letVarDefList(): LetVarDefListContext {
		let localctx: LetVarDefListContext = new LetVarDefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, GqlParser.RULE_letVarDefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2002;
			this.letVarDef();
			this.state = 2005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2003;
				this.match(GqlParser.COMMA);
				this.state = 2004;
				this.letVarDef();
				}
				}
				this.state = 2007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letVarDef(): LetVarDefContext {
		let localctx: LetVarDefContext = new LetVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, GqlParser.RULE_letVarDef);
		try {
			this.state = 2014;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 263:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2009;
				this.valueVarDef();
				}
				break;
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2010;
				this.valueVar();
				this.state = 2011;
				this.match(GqlParser.EQUALS);
				this.state = 2012;
				this.valueExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forStatment(): ForStatmentContext {
		let localctx: ForStatmentContext = new ForStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, GqlParser.RULE_forStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2016;
			this.match(GqlParser.FOR);
			this.state = 2017;
			this.forItem();
			this.state = 2019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===269) {
				{
				this.state = 2018;
				this.forOrdinalityOrOffset();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forItem(): ForItemContext {
		let localctx: ForItemContext = new ForItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, GqlParser.RULE_forItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2021;
			this.forItemAlias();
			this.state = 2022;
			this.listValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forItemAlias(): ForItemAliasContext {
		let localctx: ForItemAliasContext = new ForItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, GqlParser.RULE_forItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2024;
			this.identifier();
			this.state = 2025;
			this.match(GqlParser.IN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forOrdinalityOrOffset(): ForOrdinalityOrOffsetContext {
		let localctx: ForOrdinalityOrOffsetContext = new ForOrdinalityOrOffsetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, GqlParser.RULE_forOrdinalityOrOffset);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2027;
			this.match(GqlParser.WITH);
			this.state = 2028;
			_la = this._input.LA(1);
			if(!(_la===197 || _la===338)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2029;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderByAndPageStatment(): OrderByAndPageStatmentContext {
		let localctx: OrderByAndPageStatmentContext = new OrderByAndPageStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, GqlParser.RULE_orderByAndPageStatment);
		try {
			this.state = 2043;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 201:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2031;
				this.orderByClause();
				this.state = 2033;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 104, this._ctx) ) {
				case 1:
					{
					this.state = 2032;
					this.offsetClause();
					}
					break;
				}
				this.state = 2036;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 105, this._ctx) ) {
				case 1:
					{
					this.state = 2035;
					this.limitClause();
					}
					break;
				}
				}
				break;
			case 197:
			case 231:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2038;
				this.offsetClause();
				this.state = 2040;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 106, this._ctx) ) {
				case 1:
					{
					this.state = 2039;
					this.limitClause();
					}
					break;
				}
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2042;
				this.limitClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		let localctx: PrimitiveResultStatmentContext = new PrimitiveResultStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, GqlParser.RULE_primitiveResultStatment);
		try {
			this.state = 2050;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 219:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2045;
				this.returnStatment();
				this.state = 2047;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 108, this._ctx) ) {
				case 1:
					{
					this.state = 2046;
					this.orderByAndPageStatment();
					}
					break;
				}
				}
				break;
			case 132:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2049;
				this.match(GqlParser.FINISH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnStatment(): ReturnStatmentContext {
		let localctx: ReturnStatmentContext = new ReturnStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 250, GqlParser.RULE_returnStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2052;
			this.match(GqlParser.RETURN);
			this.state = 2053;
			this.returnStatmentBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnStatmentBody(): ReturnStatmentBodyContext {
		let localctx: ReturnStatmentBodyContext = new ReturnStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, GqlParser.RULE_returnStatmentBody);
		let _la: number;
		try {
			this.state = 2067;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 30:
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 62:
			case 63:
			case 70:
			case 72:
			case 73:
			case 80:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 102:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 114:
			case 119:
			case 122:
			case 123:
			case 124:
			case 128:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 175:
			case 176:
			case 177:
			case 179:
			case 180:
			case 181:
			case 183:
			case 184:
			case 186:
			case 190:
			case 191:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 215:
			case 221:
			case 222:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 246:
			case 247:
			case 258:
			case 260:
			case 263:
			case 274:
			case 275:
			case 312:
			case 323:
			case 339:
			case 347:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2056;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===62 || _la===119) {
					{
					this.state = 2055;
					this.setQuantifier();
					}
				}

				this.state = 2060;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 30:
					{
					this.state = 2058;
					this.match(GqlParser.ASTERISK);
					}
					break;
				case 35:
				case 40:
				case 42:
				case 44:
				case 56:
				case 60:
				case 61:
				case 63:
				case 70:
				case 72:
				case 73:
				case 80:
				case 82:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 93:
				case 94:
				case 97:
				case 98:
				case 99:
				case 100:
				case 102:
				case 106:
				case 107:
				case 108:
				case 109:
				case 110:
				case 114:
				case 122:
				case 123:
				case 124:
				case 128:
				case 129:
				case 130:
				case 139:
				case 169:
				case 173:
				case 175:
				case 176:
				case 177:
				case 179:
				case 180:
				case 181:
				case 183:
				case 184:
				case 186:
				case 190:
				case 191:
				case 192:
				case 194:
				case 195:
				case 205:
				case 206:
				case 208:
				case 209:
				case 210:
				case 212:
				case 213:
				case 215:
				case 221:
				case 222:
				case 229:
				case 230:
				case 234:
				case 236:
				case 237:
				case 239:
				case 240:
				case 241:
				case 243:
				case 244:
				case 246:
				case 247:
				case 258:
				case 260:
				case 263:
				case 274:
				case 275:
				case 312:
				case 323:
				case 339:
				case 347:
				case 366:
				case 368:
				case 379:
				case 384:
				case 385:
				case 386:
				case 387:
				case 396:
					{
					this.state = 2059;
					this.returnItemList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2063;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 112, this._ctx) ) {
				case 1:
					{
					this.state = 2062;
					this.groupByClause();
					}
					break;
				}
				}
				break;
			case 334:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2065;
				this.match(GqlParser.NO);
				this.state = 2066;
				this.match(GqlParser.BINDINGS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnItemList(): ReturnItemListContext {
		let localctx: ReturnItemListContext = new ReturnItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, GqlParser.RULE_returnItemList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2069;
			this.returnItem();
			this.state = 2074;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 114, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2070;
					this.match(GqlParser.COMMA);
					this.state = 2071;
					this.returnItem();
					}
					}
				}
				this.state = 2076;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 114, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnItem(): ReturnItemContext {
		let localctx: ReturnItemContext = new ReturnItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, GqlParser.RULE_returnItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2077;
			this.aggregatingValueExpr();
			this.state = 2079;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				{
				this.state = 2078;
				this.returnItemAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnItemAlias(): ReturnItemAliasContext {
		let localctx: ReturnItemAliasContext = new ReturnItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, GqlParser.RULE_returnItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2081;
			this.match(GqlParser.AS);
			this.state = 2082;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatment(): SelectStatmentContext {
		let localctx: SelectStatmentContext = new SelectStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, GqlParser.RULE_selectStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2084;
			this.match(GqlParser.SELECT);
			this.state = 2086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===119) {
				{
				this.state = 2085;
				this.setQuantifier();
				}
			}

			this.state = 2090;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 63:
			case 70:
			case 72:
			case 73:
			case 80:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 102:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 114:
			case 122:
			case 123:
			case 124:
			case 128:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 175:
			case 176:
			case 177:
			case 179:
			case 180:
			case 181:
			case 183:
			case 184:
			case 186:
			case 190:
			case 191:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 215:
			case 221:
			case 222:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 246:
			case 247:
			case 258:
			case 260:
			case 263:
			case 274:
			case 275:
			case 312:
			case 323:
			case 339:
			case 347:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				{
				this.state = 2088;
				this.selectItemList();
				}
				break;
			case 30:
				{
				this.state = 2089;
				this.match(GqlParser.ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2111;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 124, this._ctx) ) {
			case 1:
				{
				this.state = 2092;
				this.selectStatmentBody();
				this.state = 2094;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 118, this._ctx) ) {
				case 1:
					{
					this.state = 2093;
					this.whereClause();
					}
					break;
				}
				this.state = 2097;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 119, this._ctx) ) {
				case 1:
					{
					this.state = 2096;
					this.groupByClause();
					}
					break;
				}
				this.state = 2100;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 120, this._ctx) ) {
				case 1:
					{
					this.state = 2099;
					this.havingClause();
					}
					break;
				}
				this.state = 2103;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 121, this._ctx) ) {
				case 1:
					{
					this.state = 2102;
					this.orderByClause();
					}
					break;
				}
				this.state = 2106;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 122, this._ctx) ) {
				case 1:
					{
					this.state = 2105;
					this.offsetClause();
					}
					break;
				}
				this.state = 2109;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 123, this._ctx) ) {
				case 1:
					{
					this.state = 2108;
					this.limitClause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItemList(): SelectItemListContext {
		let localctx: SelectItemListContext = new SelectItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, GqlParser.RULE_selectItemList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2113;
			this.selectItem();
			this.state = 2116;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2114;
					this.match(GqlParser.COMMA);
					this.state = 2115;
					this.selectItem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2118;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 125, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let localctx: SelectItemContext = new SelectItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 264, GqlParser.RULE_selectItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2120;
			this.aggregatingValueExpr();
			this.state = 2122;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 126, this._ctx) ) {
			case 1:
				{
				this.state = 2121;
				this.selectItemAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItemAlias(): SelectItemAliasContext {
		let localctx: SelectItemAliasContext = new SelectItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 266, GqlParser.RULE_selectItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2124;
			this.match(GqlParser.AS);
			this.state = 2125;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let localctx: HavingClauseContext = new HavingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 268, GqlParser.RULE_havingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2127;
			this.match(GqlParser.HAVING);
			this.state = 2128;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatmentBody(): SelectStatmentBodyContext {
		let localctx: SelectStatmentBodyContext = new SelectStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 270, GqlParser.RULE_selectStatmentBody);
		try {
			this.state = 2133;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 127, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2130;
				this.match(GqlParser.FROM);
				this.state = 2131;
				this.selectGraphMatchList();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2132;
				this.selectQuerySpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectGraphMatchList(): SelectGraphMatchListContext {
		let localctx: SelectGraphMatchListContext = new SelectGraphMatchListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 272, GqlParser.RULE_selectGraphMatchList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2135;
			this.selectGraphMatch();
			this.state = 2140;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 128, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2136;
					this.match(GqlParser.COMMA);
					this.state = 2137;
					this.selectGraphMatch();
					}
					}
				}
				this.state = 2142;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 128, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectGraphMatch(): SelectGraphMatchContext {
		let localctx: SelectGraphMatchContext = new SelectGraphMatchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 274, GqlParser.RULE_selectGraphMatch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2143;
			this.graphExpr();
			this.state = 2144;
			this.matchStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectQuerySpec(): SelectQuerySpecContext {
		let localctx: SelectQuerySpecContext = new SelectQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 276, GqlParser.RULE_selectQuerySpec);
		try {
			this.state = 2152;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 129, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2146;
				this.match(GqlParser.FROM);
				this.state = 2147;
				this.nestedQuerySpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2148;
				this.match(GqlParser.FROM);
				this.state = 2149;
				this.graphExpr();
				this.state = 2150;
				this.nestedQuerySpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callProcedureStatment(): CallProcedureStatmentContext {
		let localctx: CallProcedureStatmentContext = new CallProcedureStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 278, GqlParser.RULE_callProcedureStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2155;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===199) {
				{
				this.state = 2154;
				this.match(GqlParser.OPTIONAL);
				}
			}

			this.state = 2157;
			this.match(GqlParser.CALL);
			this.state = 2158;
			this.procedureCall();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureCall(): ProcedureCallContext {
		let localctx: ProcedureCallContext = new ProcedureCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 280, GqlParser.RULE_procedureCall);
		try {
			this.state = 2162;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 40:
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2160;
				this.inlineProcedureCall();
				}
				break;
			case 35:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2161;
				this.namedProcedureCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public inlineProcedureCall(): InlineProcedureCallContext {
		let localctx: InlineProcedureCallContext = new InlineProcedureCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 282, GqlParser.RULE_inlineProcedureCall);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2165;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===44) {
				{
				this.state = 2164;
				this.varScopeClause();
				}
			}

			this.state = 2167;
			this.nestedProcedureSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public varScopeClause(): VarScopeClauseContext {
		let localctx: VarScopeClauseContext = new VarScopeClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 284, GqlParser.RULE_varScopeClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2169;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===396) {
				{
				this.state = 2170;
				this.bindingVarRefList();
				}
			}

			this.state = 2173;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarRefList(): BindingVarRefListContext {
		let localctx: BindingVarRefListContext = new BindingVarRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 286, GqlParser.RULE_bindingVarRefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2175;
			this.bindingVarRef();
			this.state = 2178;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2176;
				this.match(GqlParser.COMMA);
				this.state = 2177;
				this.bindingVarRef();
				}
				}
				this.state = 2180;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public namedProcedureCall(): NamedProcedureCallContext {
		let localctx: NamedProcedureCallContext = new NamedProcedureCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 288, GqlParser.RULE_namedProcedureCall);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2182;
			this.procedureRef();
			this.state = 2183;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2185;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 371196577) !== 0) || ((((_la - 70)) & ~0x1F) === 0 && ((1 << (_la - 70)) & 2040501261) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & 477106673) !== 0) || _la===139 || _la===169 || ((((_la - 173)) & ~0x1F) === 0 && ((1 << (_la - 173)) & 7220701) !== 0) || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 2734884283) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 77596381) !== 0) || _la===274 || _la===275 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 2621441) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 131553) !== 0)) {
				{
				this.state = 2184;
				this.procedureArgList();
				}
			}

			this.state = 2187;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureArgList(): ProcedureArgListContext {
		let localctx: ProcedureArgListContext = new ProcedureArgListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 290, GqlParser.RULE_procedureArgList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2189;
			this.procedureArg();
			this.state = 2192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2190;
				this.match(GqlParser.COMMA);
				this.state = 2191;
				this.procedureArg();
				}
				}
				this.state = 2194;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureArg(): ProcedureArgContext {
		let localctx: ProcedureArgContext = new ProcedureArgContext(this, this._ctx, this.state);
		this.enterRule(localctx, 292, GqlParser.RULE_procedureArg);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2196;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public useGraphClause(): UseGraphClauseContext {
		let localctx: UseGraphClauseContext = new UseGraphClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 294, GqlParser.RULE_useGraphClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2198;
			this.match(GqlParser.USE);
			this.state = 2199;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public atSchemaClause(): AtSchemaClauseContext {
		let localctx: AtSchemaClauseContext = new AtSchemaClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 296, GqlParser.RULE_atSchemaClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2201;
			this.match(GqlParser.AT);
			this.state = 2202;
			this.schemaRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarRef(): BindingVarRefContext {
		let localctx: BindingVarRefContext = new BindingVarRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 298, GqlParser.RULE_bindingVarRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2204;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementVarRef(): ElementVarRefContext {
		let localctx: ElementVarRefContext = new ElementVarRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 300, GqlParser.RULE_elementVarRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2206;
			this.bindingVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathVarRef(): PathVarRefContext {
		let localctx: PathVarRefContext = new PathVarRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 302, GqlParser.RULE_pathVarRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2208;
			this.bindingVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameter(): ParameterContext {
		let localctx: ParameterContext = new ParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 304, GqlParser.RULE_parameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2210;
			this.parameterName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternBindingTable(): GraphPatternBindingTableContext {
		let localctx: GraphPatternBindingTableContext = new GraphPatternBindingTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 306, GqlParser.RULE_graphPatternBindingTable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2212;
			this.graphPattern();
			this.state = 2214;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 137, this._ctx) ) {
			case 1:
				{
				this.state = 2213;
				this.graphPatternYieldClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternYieldClause(): GraphPatternYieldClauseContext {
		let localctx: GraphPatternYieldClauseContext = new GraphPatternYieldClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 308, GqlParser.RULE_graphPatternYieldClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2216;
			this.match(GqlParser.YIELD);
			this.state = 2217;
			this.graphPatternYieldItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternYieldItemList(): GraphPatternYieldItemListContext {
		let localctx: GraphPatternYieldItemListContext = new GraphPatternYieldItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 310, GqlParser.RULE_graphPatternYieldItemList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2219;
			this.graphPatternYieldItem();
			this.state = 2222;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2220;
					this.match(GqlParser.COMMA);
					this.state = 2221;
					this.graphPatternYieldItem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2224;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 138, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternYieldItem(): GraphPatternYieldItemContext {
		let localctx: GraphPatternYieldItemContext = new GraphPatternYieldItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 312, GqlParser.RULE_graphPatternYieldItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2226;
			this.elementVarRef();
			this.state = 2227;
			this.pathVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPattern(): GraphPatternContext {
		let localctx: GraphPatternContext = new GraphPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 314, GqlParser.RULE_graphPattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2230;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===316 || _la===343) {
				{
				this.state = 2229;
				this.matchMode();
				}
			}

			this.state = 2232;
			this.pathPatternList();
			this.state = 2234;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 140, this._ctx) ) {
			case 1:
				{
				this.state = 2233;
				this.keepClause();
				}
				break;
			}
			this.state = 2237;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 141, this._ctx) ) {
			case 1:
				{
				this.state = 2236;
				this.graphPatternWhereClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public matchMode(): MatchModeContext {
		let localctx: MatchModeContext = new MatchModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 316, GqlParser.RULE_matchMode);
		try {
			this.state = 2241;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 343:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2239;
				this.repeatableElementsMatchMode();
				}
				break;
			case 316:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2240;
				this.differentEdgesMatchMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public repeatableElementsMatchMode(): RepeatableElementsMatchModeContext {
		let localctx: RepeatableElementsMatchModeContext = new RepeatableElementsMatchModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 318, GqlParser.RULE_repeatableElementsMatchMode);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2243;
			this.match(GqlParser.REPEATABLE);
			this.state = 2244;
			this.elementBindingsOrElements();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public differentEdgesMatchMode(): DifferentEdgesMatchModeContext {
		let localctx: DifferentEdgesMatchModeContext = new DifferentEdgesMatchModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 320, GqlParser.RULE_differentEdgesMatchMode);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2246;
			this.match(GqlParser.DIFFERENT);
			this.state = 2247;
			this.edgeBindingsOrEdges();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementBindingsOrElements(): ElementBindingsOrElementsContext {
		let localctx: ElementBindingsOrElementsContext = new ElementBindingsOrElementsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 322, GqlParser.RULE_elementBindingsOrElements);
		let _la: number;
		try {
			this.state = 2254;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 320:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2249;
				this.match(GqlParser.ELEMENT);
				this.state = 2251;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===313) {
					{
					this.state = 2250;
					this.match(GqlParser.BINDINGS);
					}
				}

				}
				break;
			case 321:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2253;
				this.match(GqlParser.ELEMENTS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeBindingsOrEdges(): EdgeBindingsOrEdgesContext {
		let localctx: EdgeBindingsOrEdgesContext = new EdgeBindingsOrEdgesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 324, GqlParser.RULE_edgeBindingsOrEdges);
		let _la: number;
		try {
			this.state = 2261;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 318:
			case 341:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2256;
				this.edgeSynonym();
				this.state = 2258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===313) {
					{
					this.state = 2257;
					this.match(GqlParser.BINDINGS);
					}
				}

				}
				break;
			case 319:
			case 342:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2260;
				this.edgesSynonym();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternList(): PathPatternListContext {
		let localctx: PathPatternListContext = new PathPatternListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 326, GqlParser.RULE_pathPatternList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2263;
			this.pathPattern();
			this.state = 2268;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 147, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2264;
					this.match(GqlParser.COMMA);
					this.state = 2265;
					this.pathPattern();
					}
					}
				}
				this.state = 2270;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 147, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPattern(): PathPatternContext {
		let localctx: PathPatternContext = new PathPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 328, GqlParser.RULE_pathPattern);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2272;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===396) {
				{
				this.state = 2271;
				this.pathVarDeclaration();
				}
			}

			this.state = 2275;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===65 || _la===311 || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4227) !== 0)) {
				{
				this.state = 2274;
				this.pathPatternPrefix();
				}
			}

			this.state = 2278;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2277;
					this.pathPatternExpr();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2280;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 150, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathVarDeclaration(): PathVarDeclarationContext {
		let localctx: PathVarDeclarationContext = new PathVarDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 330, GqlParser.RULE_pathVarDeclaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2282;
			this.pathVar();
			this.state = 2283;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keepClause(): KeepClauseContext {
		let localctx: KeepClauseContext = new KeepClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 332, GqlParser.RULE_keepClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2285;
			this.match(GqlParser.KEEP);
			this.state = 2286;
			this.pathPatternPrefix();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternWhereClause(): GraphPatternWhereClauseContext {
		let localctx: GraphPatternWhereClauseContext = new GraphPatternWhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 334, GqlParser.RULE_graphPatternWhereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2288;
			this.match(GqlParser.WHERE);
			this.state = 2289;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternPrefix(): PathPatternPrefixContext {
		let localctx: PathPatternPrefixContext = new PathPatternPrefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 336, GqlParser.RULE_pathPatternPrefix);
		try {
			this.state = 2293;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 311:
			case 345:
			case 351:
			case 356:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2291;
				this.pathModePrefix();
				}
				break;
			case 62:
			case 65:
			case 344:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2292;
				this.pathSearchPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathModePrefix(): PathModePrefixContext {
		let localctx: PathModePrefixContext = new PathModePrefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 338, GqlParser.RULE_pathModePrefix);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2295;
			this.pathMode();
			this.state = 2297;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				{
				this.state = 2296;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathMode(): PathModeContext {
		let localctx: PathModeContext = new PathModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 340, GqlParser.RULE_pathMode);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2299;
			_la = this._input.LA(1);
			if(!(_la===311 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 2113) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathSearchPrefix(): PathSearchPrefixContext {
		let localctx: PathSearchPrefixContext = new PathSearchPrefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 342, GqlParser.RULE_pathSearchPrefix);
		try {
			this.state = 2304;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 153, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2301;
				this.allPathSearch();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2302;
				this.anyPathSearch();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2303;
				this.shortestPathSearch();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public allPathSearch(): AllPathSearchContext {
		let localctx: AllPathSearchContext = new AllPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 344, GqlParser.RULE_allPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2306;
			this.match(GqlParser.ALL);
			this.state = 2308;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				{
				this.state = 2307;
				this.pathMode();
				}
				break;
			}
			this.state = 2311;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				{
				this.state = 2310;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathOrPaths(): PathOrPathsContext {
		let localctx: PathOrPathsContext = new PathOrPathsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 346, GqlParser.RULE_pathOrPaths);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2313;
			_la = this._input.LA(1);
			if(!(_la===205 || _la===207)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public anyPathSearch(): AnyPathSearchContext {
		let localctx: AnyPathSearchContext = new AnyPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 348, GqlParser.RULE_anyPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2315;
			this.match(GqlParser.ANY);
			this.state = 2317;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 2316;
				this.numberOfPaths();
				}
				break;
			}
			this.state = 2320;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 157, this._ctx) ) {
			case 1:
				{
				this.state = 2319;
				this.pathMode();
				}
				break;
			}
			this.state = 2323;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 158, this._ctx) ) {
			case 1:
				{
				this.state = 2322;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numberOfPaths(): NumberOfPathsContext {
		let localctx: NumberOfPathsContext = new NumberOfPathsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 350, GqlParser.RULE_numberOfPaths);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2325;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public shortestPathSearch(): ShortestPathSearchContext {
		let localctx: ShortestPathSearchContext = new ShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 352, GqlParser.RULE_shortestPathSearch);
		try {
			this.state = 2331;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 159, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2327;
				this.allShortestPathSearch();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2328;
				this.anyShortestPathSearch();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2329;
				this.countedShortestPathSearch();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2330;
				this.countedShortestGroupSearch();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public allShortestPathSearch(): AllShortestPathSearchContext {
		let localctx: AllShortestPathSearchContext = new AllShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 354, GqlParser.RULE_allShortestPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2333;
			this.match(GqlParser.ALL);
			this.state = 2334;
			this.match(GqlParser.SHORTEST);
			this.state = 2336;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 160, this._ctx) ) {
			case 1:
				{
				this.state = 2335;
				this.pathMode();
				}
				break;
			}
			this.state = 2339;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 161, this._ctx) ) {
			case 1:
				{
				this.state = 2338;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public anyShortestPathSearch(): AnyShortestPathSearchContext {
		let localctx: AnyShortestPathSearchContext = new AnyShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 356, GqlParser.RULE_anyShortestPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2341;
			this.match(GqlParser.ANY);
			this.state = 2342;
			this.match(GqlParser.SHORTEST);
			this.state = 2344;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 162, this._ctx) ) {
			case 1:
				{
				this.state = 2343;
				this.pathMode();
				}
				break;
			}
			this.state = 2347;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				{
				this.state = 2346;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public countedShortestPathSearch(): CountedShortestPathSearchContext {
		let localctx: CountedShortestPathSearchContext = new CountedShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 358, GqlParser.RULE_countedShortestPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2349;
			this.match(GqlParser.SHORTEST);
			this.state = 2350;
			this.numberOfPaths();
			this.state = 2352;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 164, this._ctx) ) {
			case 1:
				{
				this.state = 2351;
				this.pathMode();
				}
				break;
			}
			this.state = 2355;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 165, this._ctx) ) {
			case 1:
				{
				this.state = 2354;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public countedShortestGroupSearch(): CountedShortestGroupSearchContext {
		let localctx: CountedShortestGroupSearchContext = new CountedShortestGroupSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 360, GqlParser.RULE_countedShortestGroupSearch);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2357;
			this.match(GqlParser.SHORTEST);
			this.state = 2358;
			this.numberOfGroups();
			this.state = 2360;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===311 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 2113) !== 0)) {
				{
				this.state = 2359;
				this.pathMode();
				}
			}

			this.state = 2363;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===205 || _la===207) {
				{
				this.state = 2362;
				this.pathOrPaths();
				}
			}

			this.state = 2365;
			this.groupOrGroups();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupOrGroups(): GroupOrGroupsContext {
		let localctx: GroupOrGroupsContext = new GroupOrGroupsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 362, GqlParser.RULE_groupOrGroups);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2367;
			_la = this._input.LA(1);
			if(!(_la===142 || _la===324)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numberOfGroups(): NumberOfGroupsContext {
		let localctx: NumberOfGroupsContext = new NumberOfGroupsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 364, GqlParser.RULE_numberOfGroups);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2369;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternExpr(): PathPatternExprContext {
		let localctx: PathPatternExprContext = new PathPatternExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 366, GqlParser.RULE_pathPatternExpr);
		try {
			this.state = 2374;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 168, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2371;
				this.pathTerm();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2372;
				this.pathMultisetAlternation();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2373;
				this.pathPatternUnion();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathMultisetAlternation(): PathMultisetAlternationContext {
		let localctx: PathMultisetAlternationContext = new PathMultisetAlternationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 368, GqlParser.RULE_pathMultisetAlternation);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2376;
			this.pathTerm();
			this.state = 2381;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 169, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2377;
					this.match(GqlParser.MULTISET_ALTERNATION);
					this.state = 2378;
					this.pathTerm();
					}
					}
				}
				this.state = 2383;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 169, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternUnion(): PathPatternUnionContext {
		let localctx: PathPatternUnionContext = new PathPatternUnionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 370, GqlParser.RULE_pathPatternUnion);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2384;
			this.pathTerm();
			this.state = 2389;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 170, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2385;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 2386;
					this.pathTerm();
					}
					}
				}
				this.state = 2391;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 170, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathTerm(): PathTermContext {
		let localctx: PathTermContext = new PathTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 372, GqlParser.RULE_pathTerm);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2392;
			this.pathFactor();
			this.state = 2396;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 171, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2393;
					this.pathFactor();
					}
					}
				}
				this.state = 2398;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 171, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathFactor(): PathFactorContext {
		let localctx: PathFactorContext = new PathFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 374, GqlParser.RULE_pathFactor);
		try {
			this.state = 2402;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 172, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2399;
				this.pathPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2400;
				this.quantifiedPathPrimary();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2401;
				this.questionedPathPrimary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public quantifiedPathPrimary(): QuantifiedPathPrimaryContext {
		let localctx: QuantifiedPathPrimaryContext = new QuantifiedPathPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 376, GqlParser.RULE_quantifiedPathPrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2404;
			this.pathPrimary();
			this.state = 2405;
			this.graphPatternQuantifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public questionedPathPrimary(): QuestionedPathPrimaryContext {
		let localctx: QuestionedPathPrimaryContext = new QuestionedPathPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 378, GqlParser.RULE_questionedPathPrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2407;
			this.pathPrimary();
			this.state = 2408;
			this.match(GqlParser.QUESTION_MARK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPrimary(): PathPrimaryContext {
		let localctx: PathPrimaryContext = new PathPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 380, GqlParser.RULE_pathPrimary);
		try {
			this.state = 2413;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 173, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2410;
				this.elementPattern();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2411;
				this.parenthesizedPathPatternExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2412;
				this.simplifiedPathPatternExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPattern(): ElementPatternContext {
		let localctx: ElementPatternContext = new ElementPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 382, GqlParser.RULE_elementPattern);
		try {
			this.state = 2417;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2415;
				this.nodePattern();
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 8:
			case 10:
			case 19:
			case 20:
			case 27:
			case 50:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2416;
				this.edgePattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodePattern(): NodePatternContext {
		let localctx: NodePatternContext = new NodePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 384, GqlParser.RULE_nodePattern);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2419;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2420;
			this.elementPatternFiller();
			this.state = 2421;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPatternFiller(): ElementPatternFillerContext {
		let localctx: ElementPatternFillerContext = new ElementPatternFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 386, GqlParser.RULE_elementPatternFiller);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===348 || _la===396) {
				{
				this.state = 2423;
				this.elementVarDeclaration();
				}
			}

			this.state = 2427;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===32 || _la===167) {
				{
				this.state = 2426;
				this.isLabelExpr();
				}
			}

			this.state = 2430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===40 || _la===268) {
				{
				this.state = 2429;
				this.elementPatternPredicate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementVarDeclaration(): ElementVarDeclarationContext {
		let localctx: ElementVarDeclarationContext = new ElementVarDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 388, GqlParser.RULE_elementVarDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===348) {
				{
				this.state = 2432;
				this.match(GqlParser.TEMP);
				}
			}

			this.state = 2435;
			this.elementVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isLabelExpr(): IsLabelExprContext {
		let localctx: IsLabelExprContext = new IsLabelExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 390, GqlParser.RULE_isLabelExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2437;
			this.isOrColon();
			this.state = 2438;
			this.labelExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isOrColon(): IsOrColonContext {
		let localctx: IsOrColonContext = new IsOrColonContext(this, this._ctx, this.state);
		this.enterRule(localctx, 392, GqlParser.RULE_isOrColon);
		try {
			this.state = 2442;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 167:
				this.enterOuterAlt(localctx, 1);
				{
				{
				this.state = 2440;
				this.match(GqlParser.IS);
				}
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2441;
				this.match(GqlParser.COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPatternPredicate(): ElementPatternPredicateContext {
		let localctx: ElementPatternPredicateContext = new ElementPatternPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 394, GqlParser.RULE_elementPatternPredicate);
		try {
			this.state = 2446;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 268:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2444;
				this.elementPatternWhereClause();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2445;
				this.elementPropertySpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPatternWhereClause(): ElementPatternWhereClauseContext {
		let localctx: ElementPatternWhereClauseContext = new ElementPatternWhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 396, GqlParser.RULE_elementPatternWhereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2448;
			this.match(GqlParser.WHERE);
			this.state = 2449;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPropertySpec(): ElementPropertySpecContext {
		let localctx: ElementPropertySpecContext = new ElementPropertySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 398, GqlParser.RULE_elementPropertySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2451;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 2452;
			this.propertyKeyValuePairList();
			this.state = 2453;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
		let localctx: PropertyKeyValuePairListContext = new PropertyKeyValuePairListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 400, GqlParser.RULE_propertyKeyValuePairList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2455;
			this.propertyKeyValuePair();
			this.state = 2460;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===34) {
				{
				{
				this.state = 2456;
				this.match(GqlParser.COMMA);
				this.state = 2457;
				this.propertyKeyValuePair();
				}
				}
				this.state = 2462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyKeyValuePair(): PropertyKeyValuePairContext {
		let localctx: PropertyKeyValuePairContext = new PropertyKeyValuePairContext(this, this._ctx, this.state);
		this.enterRule(localctx, 402, GqlParser.RULE_propertyKeyValuePair);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2463;
			this.propertyName();
			this.state = 2464;
			this.match(GqlParser.COLON);
			this.state = 2465;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgePattern(): EdgePatternContext {
		let localctx: EdgePatternContext = new EdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 404, GqlParser.RULE_edgePattern);
		try {
			this.state = 2469;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 3:
			case 4:
			case 8:
			case 19:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2467;
				this.fullEdgePattern();
				}
				break;
			case 1:
			case 2:
			case 5:
			case 10:
			case 20:
			case 27:
			case 50:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2468;
				this.abbreviatedEdgePattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgePattern(): FullEdgePatternContext {
		let localctx: FullEdgePatternContext = new FullEdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 406, GqlParser.RULE_fullEdgePattern);
		try {
			this.state = 2478;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2471;
				this.fullEdgePointingLeft();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2472;
				this.fullEdgeUndirected();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2473;
				this.fullEdgePointingRight();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2474;
				this.fullEdgeLeftOrUndirected();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2475;
				this.fullEdgeUndirectedOrRight();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2476;
				this.fullEdgeLeftOrRight();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2477;
				this.fullEdgeAnyDirection();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgePointingLeft(): FullEdgePointingLeftContext {
		let localctx: FullEdgePointingLeftContext = new FullEdgePointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 408, GqlParser.RULE_fullEdgePointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2480;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 2481;
			this.elementPatternFiller();
			this.state = 2482;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeUndirected(): FullEdgeUndirectedContext {
		let localctx: FullEdgeUndirectedContext = new FullEdgeUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 410, GqlParser.RULE_fullEdgeUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2484;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 2485;
			this.elementPatternFiller();
			this.state = 2486;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgePointingRight(): FullEdgePointingRightContext {
		let localctx: FullEdgePointingRightContext = new FullEdgePointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 412, GqlParser.RULE_fullEdgePointingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2488;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 2489;
			this.elementPatternFiller();
			this.state = 2490;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeLeftOrUndirected(): FullEdgeLeftOrUndirectedContext {
		let localctx: FullEdgeLeftOrUndirectedContext = new FullEdgeLeftOrUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 414, GqlParser.RULE_fullEdgeLeftOrUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2492;
			this.match(GqlParser.LEFT_ARROW_TILDE_BRACKET);
			this.state = 2493;
			this.elementPatternFiller();
			this.state = 2494;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeUndirectedOrRight(): FullEdgeUndirectedOrRightContext {
		let localctx: FullEdgeUndirectedOrRightContext = new FullEdgeUndirectedOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 416, GqlParser.RULE_fullEdgeUndirectedOrRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2496;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 2497;
			this.elementPatternFiller();
			this.state = 2498;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeLeftOrRight(): FullEdgeLeftOrRightContext {
		let localctx: FullEdgeLeftOrRightContext = new FullEdgeLeftOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 418, GqlParser.RULE_fullEdgeLeftOrRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2500;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 2501;
			this.elementPatternFiller();
			this.state = 2502;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeAnyDirection(): FullEdgeAnyDirectionContext {
		let localctx: FullEdgeAnyDirectionContext = new FullEdgeAnyDirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 420, GqlParser.RULE_fullEdgeAnyDirection);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2504;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 2505;
			this.elementPatternFiller();
			this.state = 2506;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgePattern(): AbbreviatedEdgePatternContext {
		let localctx: AbbreviatedEdgePatternContext = new AbbreviatedEdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 422, GqlParser.RULE_abbreviatedEdgePattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2508;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 135267366) !== 0) || _la===50)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedPathPatternExpr(): ParenthesizedPathPatternExprContext {
		let localctx: ParenthesizedPathPatternExprContext = new ParenthesizedPathPatternExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 424, GqlParser.RULE_parenthesizedPathPatternExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2510;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===396) {
				{
				this.state = 2511;
				this.subpathVarDeclaration();
				}
			}

			this.state = 2515;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===311 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 2113) !== 0)) {
				{
				this.state = 2514;
				this.pathModePrefix();
				}
			}

			this.state = 2517;
			this.pathPatternExpr();
			this.state = 2519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===268) {
				{
				this.state = 2518;
				this.parenthesizedPathPatternWhereClause();
				}
			}

			this.state = 2521;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subpathVarDeclaration(): SubpathVarDeclarationContext {
		let localctx: SubpathVarDeclarationContext = new SubpathVarDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 426, GqlParser.RULE_subpathVarDeclaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2523;
			this.subpathVar();
			this.state = 2524;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedPathPatternWhereClause(): ParenthesizedPathPatternWhereClauseContext {
		let localctx: ParenthesizedPathPatternWhereClauseContext = new ParenthesizedPathPatternWhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 428, GqlParser.RULE_parenthesizedPathPatternWhereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2526;
			this.match(GqlParser.WHERE);
			this.state = 2527;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertGraphPattern(): InsertGraphPatternContext {
		let localctx: InsertGraphPatternContext = new InsertGraphPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 430, GqlParser.RULE_insertGraphPattern);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2529;
			this.insertGraphPatternList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertGraphPatternList(): InsertGraphPatternListContext {
		let localctx: InsertGraphPatternListContext = new InsertGraphPatternListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 432, GqlParser.RULE_insertGraphPatternList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2531;
			this.insertPathPattern();
			this.state = 2536;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===34) {
				{
				{
				this.state = 2532;
				this.match(GqlParser.COMMA);
				this.state = 2533;
				this.insertPathPattern();
				}
				}
				this.state = 2538;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertPathPattern(): InsertPathPatternContext {
		let localctx: InsertPathPatternContext = new InsertPathPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 434, GqlParser.RULE_insertPathPattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2539;
			this.insertNodePattern();
			this.state = 2545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 524552) !== 0)) {
				{
				{
				this.state = 2540;
				this.insertEdgePattern();
				this.state = 2541;
				this.insertNodePattern();
				}
				}
				this.state = 2547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertNodePattern(): InsertNodePatternContext {
		let localctx: InsertNodePatternContext = new InsertNodePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 436, GqlParser.RULE_insertNodePattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2548;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2550;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===32 || _la===167 || _la===348 || _la===396) {
				{
				this.state = 2549;
				this.insertElementPatternFiller();
				}
			}

			this.state = 2552;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgePattern(): InsertEdgePatternContext {
		let localctx: InsertEdgePatternContext = new InsertEdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 438, GqlParser.RULE_insertEdgePattern);
		try {
			this.state = 2557;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 3:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2554;
				this.insertEdgePointingLeft();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2555;
				this.insertEdgePointingRight();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2556;
				this.insertEdgeUndirected();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgePointingLeft(): InsertEdgePointingLeftContext {
		let localctx: InsertEdgePointingLeftContext = new InsertEdgePointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 440, GqlParser.RULE_insertEdgePointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2559;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 2560;
			this.insertElementPatternFiller();
			this.state = 2561;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgePointingRight(): InsertEdgePointingRightContext {
		let localctx: InsertEdgePointingRightContext = new InsertEdgePointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 442, GqlParser.RULE_insertEdgePointingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2563;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 2564;
			this.insertElementPatternFiller();
			this.state = 2565;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgeUndirected(): InsertEdgeUndirectedContext {
		let localctx: InsertEdgeUndirectedContext = new InsertEdgeUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 444, GqlParser.RULE_insertEdgeUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2567;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 2568;
			this.insertElementPatternFiller();
			this.state = 2569;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		let localctx: InsertElementPatternFillerContext = new InsertElementPatternFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 446, GqlParser.RULE_insertElementPatternFiller);
		let _la: number;
		try {
			this.state = 2579;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 193, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2571;
				this.elementVarDeclaration();
				this.state = 2573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===32 || _la===167) {
					{
					this.state = 2572;
					this.labelAndPropertySetSpec();
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===348 || _la===396) {
					{
					this.state = 2575;
					this.elementVarDeclaration();
					}
				}

				this.state = 2578;
				this.labelAndPropertySetSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelAndPropertySetSpec(): LabelAndPropertySetSpecContext {
		let localctx: LabelAndPropertySetSpecContext = new LabelAndPropertySetSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 448, GqlParser.RULE_labelAndPropertySetSpec);
		try {
			this.state = 2595;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 194, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				{
				this.state = 2581;
				this.isOrColon();
				this.state = 2582;
				this.labelSetSpec();
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				{
				this.state = 2584;
				this.isOrColon();
				this.state = 2585;
				this.labelSetSpec();
				this.state = 2586;
				this.elementPropertySpec();
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				{
				this.state = 2588;
				this.isOrColon();
				this.state = 2589;
				this.elementPropertySpec();
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				{
				this.state = 2591;
				this.isOrColon();
				this.state = 2592;
				this.labelSetSpec();
				this.state = 2593;
				this.elementPropertySpec();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelExpr(): LabelExprContext {
		let localctx: LabelExprContext = new LabelExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 450, GqlParser.RULE_labelExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2597;
			this.labelTerm();
			this.state = 2602;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===52) {
				{
				{
				this.state = 2598;
				this.match(GqlParser.VERTICAL_BAR);
				this.state = 2599;
				this.labelTerm();
				}
				}
				this.state = 2604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelTerm(): LabelTermContext {
		let localctx: LabelTermContext = new LabelTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 452, GqlParser.RULE_labelTerm);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2605;
			this.labelFactor();
			this.state = 2610;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===29) {
				{
				{
				this.state = 2606;
				this.match(GqlParser.AMPERSAND);
				this.state = 2607;
				this.labelFactor();
				}
				}
				this.state = 2612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelFactor(): LabelFactorContext {
		let localctx: LabelFactorContext = new LabelFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 454, GqlParser.RULE_labelFactor);
		try {
			this.state = 2615;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
			case 53:
			case 56:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2613;
				this.labelPrimary();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2614;
				this.labelNegation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelNegation(): LabelNegationContext {
		let localctx: LabelNegationContext = new LabelNegationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 456, GqlParser.RULE_labelNegation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2617;
			this.match(GqlParser.EXCLAMATION);
			this.state = 2618;
			this.labelPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelPrimary(): LabelPrimaryContext {
		let localctx: LabelPrimaryContext = new LabelPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 458, GqlParser.RULE_labelPrimary);
		try {
			this.state = 2623;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2620;
				this.labelName();
				}
				break;
			case 53:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2621;
				this.wildcardLabel();
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2622;
				this.parenthesizedLabelExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public wildcardLabel(): WildcardLabelContext {
		let localctx: WildcardLabelContext = new WildcardLabelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 460, GqlParser.RULE_wildcardLabel);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2625;
			this.match(GqlParser.PERCENT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedLabelExpr(): ParenthesizedLabelExprContext {
		let localctx: ParenthesizedLabelExprContext = new ParenthesizedLabelExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 462, GqlParser.RULE_parenthesizedLabelExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2627;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2628;
			this.labelExpr();
			this.state = 2629;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternQuantifier(): GraphPatternQuantifierContext {
		let localctx: GraphPatternQuantifierContext = new GraphPatternQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 464, GqlParser.RULE_graphPatternQuantifier);
		try {
			this.state = 2635;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 199, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2631;
				this.match(GqlParser.ASTERISK);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2632;
				this.match(GqlParser.PLUS);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2633;
				this.fixedQuantifier();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2634;
				this.generalQuantifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fixedQuantifier(): FixedQuantifierContext {
		let localctx: FixedQuantifierContext = new FixedQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 466, GqlParser.RULE_fixedQuantifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2637;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 2638;
			this.match(GqlParser.UNSIGNED_INT);
			this.state = 2639;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalQuantifier(): GeneralQuantifierContext {
		let localctx: GeneralQuantifierContext = new GeneralQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 468, GqlParser.RULE_generalQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2641;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 2643;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===379) {
				{
				this.state = 2642;
				this.lowerBound();
				}
			}

			this.state = 2645;
			this.match(GqlParser.COMMA);
			this.state = 2647;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===379) {
				{
				this.state = 2646;
				this.upperBound();
				}
			}

			this.state = 2649;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lowerBound(): LowerBoundContext {
		let localctx: LowerBoundContext = new LowerBoundContext(this, this._ctx, this.state);
		this.enterRule(localctx, 470, GqlParser.RULE_lowerBound);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2651;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public upperBound(): UpperBoundContext {
		let localctx: UpperBoundContext = new UpperBoundContext(this, this._ctx, this.state);
		this.enterRule(localctx, 472, GqlParser.RULE_upperBound);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2653;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedPathPatternExpr(): SimplifiedPathPatternExprContext {
		let localctx: SimplifiedPathPatternExprContext = new SimplifiedPathPatternExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 474, GqlParser.RULE_simplifiedPathPatternExpr);
		try {
			this.state = 2662;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 202, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2655;
				this.simplifiedDefaultingLeft();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2656;
				this.simplifiedDefaultingUndirected();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2657;
				this.simplifiedDefaultingRight();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2658;
				this.simplifiedDefaultingLeftOrUndirected();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2659;
				this.simplifiedDefaultingUndirectedOrRight();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2660;
				this.simplifiedDefaultingLeftOrRight();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2661;
				this.simplifiedDefaultingAnyDirection();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingLeft(): SimplifiedDefaultingLeftContext {
		let localctx: SimplifiedDefaultingLeftContext = new SimplifiedDefaultingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 476, GqlParser.RULE_simplifiedDefaultingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2664;
			this.match(GqlParser.LEFT_MINUS_SLASH);
			this.state = 2665;
			this.simplifiedContents();
			this.state = 2666;
			this.match(GqlParser.SLASH_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingUndirected(): SimplifiedDefaultingUndirectedContext {
		let localctx: SimplifiedDefaultingUndirectedContext = new SimplifiedDefaultingUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 478, GqlParser.RULE_simplifiedDefaultingUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2668;
			this.match(GqlParser.TILDE_SLASH);
			this.state = 2669;
			this.simplifiedContents();
			this.state = 2670;
			this.match(GqlParser.SLASH_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingRight(): SimplifiedDefaultingRightContext {
		let localctx: SimplifiedDefaultingRightContext = new SimplifiedDefaultingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 480, GqlParser.RULE_simplifiedDefaultingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2672;
			this.match(GqlParser.MINUS_SLASH);
			this.state = 2673;
			this.simplifiedContents();
			this.state = 2674;
			this.match(GqlParser.SLASH_MINUS_RIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingLeftOrUndirected(): SimplifiedDefaultingLeftOrUndirectedContext {
		let localctx: SimplifiedDefaultingLeftOrUndirectedContext = new SimplifiedDefaultingLeftOrUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 482, GqlParser.RULE_simplifiedDefaultingLeftOrUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2676;
			this.match(GqlParser.LEFT_TILDE_SLASH);
			this.state = 2677;
			this.simplifiedContents();
			this.state = 2678;
			this.match(GqlParser.SLASH_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingUndirectedOrRight(): SimplifiedDefaultingUndirectedOrRightContext {
		let localctx: SimplifiedDefaultingUndirectedOrRightContext = new SimplifiedDefaultingUndirectedOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 484, GqlParser.RULE_simplifiedDefaultingUndirectedOrRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2680;
			this.match(GqlParser.TILDE_SLASH);
			this.state = 2681;
			this.simplifiedContents();
			this.state = 2682;
			this.match(GqlParser.SLASH_TILDE_RIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingLeftOrRight(): SimplifiedDefaultingLeftOrRightContext {
		let localctx: SimplifiedDefaultingLeftOrRightContext = new SimplifiedDefaultingLeftOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 486, GqlParser.RULE_simplifiedDefaultingLeftOrRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2684;
			this.match(GqlParser.LEFT_MINUS_SLASH);
			this.state = 2685;
			this.simplifiedContents();
			this.state = 2686;
			this.match(GqlParser.SLASH_MINUS_RIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingAnyDirection(): SimplifiedDefaultingAnyDirectionContext {
		let localctx: SimplifiedDefaultingAnyDirectionContext = new SimplifiedDefaultingAnyDirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 488, GqlParser.RULE_simplifiedDefaultingAnyDirection);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2688;
			this.match(GqlParser.MINUS_SLASH);
			this.state = 2689;
			this.simplifiedContents();
			this.state = 2690;
			this.match(GqlParser.SLASH_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedContents(): SimplifiedContentsContext {
		let localctx: SimplifiedContentsContext = new SimplifiedContentsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 490, GqlParser.RULE_simplifiedContents);
		try {
			this.state = 2695;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 203, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2692;
				this.simplifiedTerm();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2693;
				this.simplifiedPathUnion();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2694;
				this.simplifiedMultisetAlternation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedPathUnion(): SimplifiedPathUnionContext {
		let localctx: SimplifiedPathUnionContext = new SimplifiedPathUnionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 492, GqlParser.RULE_simplifiedPathUnion);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2697;
			this.simplifiedTerm();
			this.state = 2702;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===52) {
				{
				{
				this.state = 2698;
				this.match(GqlParser.VERTICAL_BAR);
				this.state = 2699;
				this.simplifiedTerm();
				}
				}
				this.state = 2704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedMultisetAlternation(): SimplifiedMultisetAlternationContext {
		let localctx: SimplifiedMultisetAlternationContext = new SimplifiedMultisetAlternationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 494, GqlParser.RULE_simplifiedMultisetAlternation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2705;
			this.simplifiedTerm();
			this.state = 2710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===58) {
				{
				{
				this.state = 2706;
				this.match(GqlParser.MULTISET_ALTERNATION);
				this.state = 2707;
				this.simplifiedTerm();
				}
				}
				this.state = 2712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedTerm(): SimplifiedTermContext {
		let localctx: SimplifiedTermContext = new SimplifiedTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 496, GqlParser.RULE_simplifiedTerm);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2713;
			this.simplifiedFactorLow();
			this.state = 2717;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===2 || _la===27 || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & 532611) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
				{
				{
				this.state = 2714;
				this.simplifiedFactorLow();
				}
				}
				this.state = 2719;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedFactorLow(): SimplifiedFactorLowContext {
		let localctx: SimplifiedFactorLowContext = new SimplifiedFactorLowContext(this, this._ctx, this.state);
		this.enterRule(localctx, 498, GqlParser.RULE_simplifiedFactorLow);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2720;
			this.simplifiedFactorHigh();
			this.state = 2725;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===29) {
				{
				{
				this.state = 2721;
				this.match(GqlParser.AMPERSAND);
				this.state = 2722;
				this.simplifiedFactorHigh();
				}
				}
				this.state = 2727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedFactorHigh(): SimplifiedFactorHighContext {
		let localctx: SimplifiedFactorHighContext = new SimplifiedFactorHighContext(this, this._ctx, this.state);
		this.enterRule(localctx, 500, GqlParser.RULE_simplifiedFactorHigh);
		try {
			this.state = 2731;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 208, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2728;
				this.simplifiedTertiary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2729;
				this.simplifiedQuntified();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2730;
				this.simplifiedQuestioned();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedQuntified(): SimplifiedQuntifiedContext {
		let localctx: SimplifiedQuntifiedContext = new SimplifiedQuntifiedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 502, GqlParser.RULE_simplifiedQuntified);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2733;
			this.simplifiedTertiary();
			this.state = 2734;
			this.graphPatternQuantifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedQuestioned(): SimplifiedQuestionedContext {
		let localctx: SimplifiedQuestionedContext = new SimplifiedQuestionedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 504, GqlParser.RULE_simplifiedQuestioned);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2736;
			this.simplifiedTertiary();
			this.state = 2737;
			this.match(GqlParser.QUESTION_MARK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		let localctx: SimplifiedTertiaryContext = new SimplifiedTertiaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 506, GqlParser.RULE_simplifiedTertiary);
		try {
			this.state = 2741;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 209, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2739;
				this.simplifiedDirectionOverride();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2740;
				this.simplifiedSecondary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDirectionOverride(): SimplifiedDirectionOverrideContext {
		let localctx: SimplifiedDirectionOverrideContext = new SimplifiedDirectionOverrideContext(this, this._ctx, this.state);
		this.enterRule(localctx, 508, GqlParser.RULE_simplifiedDirectionOverride);
		try {
			this.state = 2750;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2743;
				this.simplifiedOverrideLeft();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2744;
				this.simplifiedOverrideUndirected();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2745;
				this.simplifiedOverrideRight();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2746;
				this.simplifiedOverrideLeftOrUndirected();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2747;
				this.simplifiedOverrideUndirectedOrRight();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2748;
				this.simplifiedOverrideLeftOrRight();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2749;
				this.simplifiedOverrideAnyDirection();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideLeft(): SimplifiedOverrideLeftContext {
		let localctx: SimplifiedOverrideLeftContext = new SimplifiedOverrideLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 510, GqlParser.RULE_simplifiedOverrideLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2752;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 2753;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideUndirected(): SimplifiedOverrideUndirectedContext {
		let localctx: SimplifiedOverrideUndirectedContext = new SimplifiedOverrideUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 512, GqlParser.RULE_simplifiedOverrideUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2755;
			this.match(GqlParser.TILDE);
			this.state = 2756;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideRight(): SimplifiedOverrideRightContext {
		let localctx: SimplifiedOverrideRightContext = new SimplifiedOverrideRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 514, GqlParser.RULE_simplifiedOverrideRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2758;
			this.simplifiedSecondary();
			this.state = 2759;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideLeftOrUndirected(): SimplifiedOverrideLeftOrUndirectedContext {
		let localctx: SimplifiedOverrideLeftOrUndirectedContext = new SimplifiedOverrideLeftOrUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 516, GqlParser.RULE_simplifiedOverrideLeftOrUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2761;
			this.match(GqlParser.LEFT_ARROW_TILDE);
			this.state = 2762;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideUndirectedOrRight(): SimplifiedOverrideUndirectedOrRightContext {
		let localctx: SimplifiedOverrideUndirectedOrRightContext = new SimplifiedOverrideUndirectedOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 518, GqlParser.RULE_simplifiedOverrideUndirectedOrRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2764;
			this.match(GqlParser.TILDE);
			this.state = 2765;
			this.simplifiedSecondary();
			this.state = 2766;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideLeftOrRight(): SimplifiedOverrideLeftOrRightContext {
		let localctx: SimplifiedOverrideLeftOrRightContext = new SimplifiedOverrideLeftOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 520, GqlParser.RULE_simplifiedOverrideLeftOrRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2768;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 2769;
			this.simplifiedSecondary();
			this.state = 2770;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideAnyDirection(): SimplifiedOverrideAnyDirectionContext {
		let localctx: SimplifiedOverrideAnyDirectionContext = new SimplifiedOverrideAnyDirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 522, GqlParser.RULE_simplifiedOverrideAnyDirection);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2772;
			this.match(GqlParser.MINUS);
			this.state = 2773;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		let localctx: SimplifiedSecondaryContext = new SimplifiedSecondaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 524, GqlParser.RULE_simplifiedSecondary);
		try {
			this.state = 2777;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
			case 56:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2775;
				this.simplifiedPrimary();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2776;
				this.simplifiedNegation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedNegation(): SimplifiedNegationContext {
		let localctx: SimplifiedNegationContext = new SimplifiedNegationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 526, GqlParser.RULE_simplifiedNegation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2779;
			this.match(GqlParser.EXCLAMATION);
			this.state = 2780;
			this.simplifiedPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedPrimary(): SimplifiedPrimaryContext {
		let localctx: SimplifiedPrimaryContext = new SimplifiedPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 528, GqlParser.RULE_simplifiedPrimary);
		try {
			this.state = 2787;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2782;
				this.labelName();
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2783;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 2784;
				this.simplifiedContents();
				this.state = 2785;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whereClause(): WhereClauseContext {
		let localctx: WhereClauseContext = new WhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 530, GqlParser.RULE_whereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2789;
			this.match(GqlParser.WHERE);
			this.state = 2790;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldClause(): YieldClauseContext {
		let localctx: YieldClauseContext = new YieldClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 532, GqlParser.RULE_yieldClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2792;
			this.match(GqlParser.YIELD);
			this.state = 2793;
			this.yieldItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItemList(): YieldItemListContext {
		let localctx: YieldItemListContext = new YieldItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 534, GqlParser.RULE_yieldItemList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2795;
			this.yieldItem();
			this.state = 2798;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2796;
				this.match(GqlParser.COMMA);
				this.state = 2797;
				this.yieldItem();
				}
				}
				this.state = 2800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItem(): YieldItemContext {
		let localctx: YieldItemContext = new YieldItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 536, GqlParser.RULE_yieldItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2802;
			this.yieldItemName();
			this.state = 2804;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===67) {
				{
				this.state = 2803;
				this.yieldItemAlias();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItemName(): YieldItemNameContext {
		let localctx: YieldItemNameContext = new YieldItemNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 538, GqlParser.RULE_yieldItemName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2806;
			this.fieldName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItemAlias(): YieldItemAliasContext {
		let localctx: YieldItemAliasContext = new YieldItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 540, GqlParser.RULE_yieldItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2808;
			this.match(GqlParser.AS);
			this.state = 2809;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let localctx: GroupByClauseContext = new GroupByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 542, GqlParser.RULE_groupByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2811;
			this.match(GqlParser.GROUP);
			this.state = 2812;
			this.match(GqlParser.BY);
			this.state = 2813;
			this.groupingElementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingElementList(): GroupingElementListContext {
		let localctx: GroupingElementListContext = new GroupingElementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 544, GqlParser.RULE_groupingElementList);
		try {
			let _alt: number;
			this.state = 2823;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2815;
				this.groupingElement();
				this.state = 2818;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2816;
						this.match(GqlParser.COMMA);
						this.state = 2817;
						this.groupingElement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2820;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 215, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2822;
				this.emptyGroupingSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingElement(): GroupingElementContext {
		let localctx: GroupingElementContext = new GroupingElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 546, GqlParser.RULE_groupingElement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2825;
			this.bindingVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public emptyGroupingSet(): EmptyGroupingSetContext {
		let localctx: EmptyGroupingSetContext = new EmptyGroupingSetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 548, GqlParser.RULE_emptyGroupingSet);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2827;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2828;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let localctx: OrderByClauseContext = new OrderByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 550, GqlParser.RULE_orderByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2830;
			this.match(GqlParser.ORDER);
			this.state = 2831;
			this.match(GqlParser.BY);
			this.state = 2832;
			this.sortSpecList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public aggregateFunction(): AggregateFunctionContext {
		let localctx: AggregateFunctionContext = new AggregateFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 552, GqlParser.RULE_aggregateFunction);
		try {
			this.state = 2840;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 217, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2834;
				this.match(GqlParser.COUNT);
				this.state = 2835;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 2836;
				this.match(GqlParser.ASTERISK);
				this.state = 2837;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2838;
				this.generalSetFunction();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2839;
				this.binarySetFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalSetFunction(): GeneralSetFunctionContext {
		let localctx: GeneralSetFunctionContext = new GeneralSetFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 554, GqlParser.RULE_generalSetFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2842;
			this.generalSetFunctionType();
			this.state = 2843;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===119) {
				{
				this.state = 2844;
				this.setQuantifier();
				}
			}

			this.state = 2847;
			this.valueExpr();
			this.state = 2848;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalSetFunctionType(): GeneralSetFunctionTypeContext {
		let localctx: GeneralSetFunctionTypeContext = new GeneralSetFunctionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 556, GqlParser.RULE_generalSetFunctionType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2850;
			_la = this._input.LA(1);
			if(!(((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 136314881) !== 0) || _la===183 || _la===184 || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 11) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setQuantifier(): SetQuantifierContext {
		let localctx: SetQuantifierContext = new SetQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 558, GqlParser.RULE_setQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2852;
			_la = this._input.LA(1);
			if(!(_la===62 || _la===119)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public binarySetFunction(): BinarySetFunctionContext {
		let localctx: BinarySetFunctionContext = new BinarySetFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 560, GqlParser.RULE_binarySetFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2854;
			_la = this._input.LA(1);
			if(!(_la===208 || _la===209)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dependantValueExpr(): DependantValueExprContext {
		let localctx: DependantValueExprContext = new DependantValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 562, GqlParser.RULE_dependantValueExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===119) {
				{
				this.state = 2856;
				this.setQuantifier();
				}
			}

			this.state = 2859;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public independentValueExpr(): IndependentValueExprContext {
		let localctx: IndependentValueExprContext = new IndependentValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 564, GqlParser.RULE_independentValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2861;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sortSpecList(): SortSpecListContext {
		let localctx: SortSpecListContext = new SortSpecListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 566, GqlParser.RULE_sortSpecList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2863;
			this.sortSpec();
			this.state = 2866;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2864;
					this.match(GqlParser.COMMA);
					this.state = 2865;
					this.sortSpec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2868;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 220, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sortSpec(): SortSpecContext {
		let localctx: SortSpecContext = new SortSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 568, GqlParser.RULE_sortSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2870;
			this.sortKey();
			this.state = 2872;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 221, this._ctx) ) {
			case 1:
				{
				this.state = 2871;
				this.orderingSpec();
				}
				break;
			}
			this.state = 2875;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 222, this._ctx) ) {
			case 1:
				{
				this.state = 2874;
				this.nullOrdering();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sortKey(): SortKeyContext {
		let localctx: SortKeyContext = new SortKeyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 570, GqlParser.RULE_sortKey);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2877;
			this.aggregatingValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderingSpec(): OrderingSpecContext {
		let localctx: OrderingSpecContext = new OrderingSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 572, GqlParser.RULE_orderingSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2879;
			_la = this._input.LA(1);
			if(!(_la===68 || _la===69 || _la===116 || _la===117)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullOrdering(): NullOrderingContext {
		let localctx: NullOrderingContext = new NullOrderingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 574, GqlParser.RULE_nullOrdering);
		try {
			this.state = 2885;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 223, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2881;
				this.match(GqlParser.NULLS);
				this.state = 2882;
				this.match(GqlParser.FIRST);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2883;
				this.match(GqlParser.NULLS);
				this.state = 2884;
				this.match(GqlParser.LAST);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let localctx: LimitClauseContext = new LimitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 576, GqlParser.RULE_limitClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2887;
			this.match(GqlParser.LIMIT);
			this.state = 2888;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public offsetClause(): OffsetClauseContext {
		let localctx: OffsetClauseContext = new OffsetClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 578, GqlParser.RULE_offsetClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2890;
			this.offsetSynonym();
			this.state = 2891;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public offsetSynonym(): OffsetSynonymContext {
		let localctx: OffsetSynonymContext = new OffsetSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 580, GqlParser.RULE_offsetSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2893;
			_la = this._input.LA(1);
			if(!(_la===197 || _la===231)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeSpec(): GraphTypeSpecContext {
		let localctx: GraphTypeSpecContext = new GraphTypeSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 582, GqlParser.RULE_graphTypeSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2896;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 2895;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 2898;
			this.match(GqlParser.GRAPH);
			this.state = 2899;
			this.match(GqlParser.TYPE);
			this.state = 2900;
			this.nestedGraphTypeSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		let localctx: NestedGraphTypeSpecContext = new NestedGraphTypeSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 584, GqlParser.RULE_nestedGraphTypeSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2902;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 2903;
			this.graphTypeSpecBody();
			this.state = 2904;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeSpecBody(): GraphTypeSpecBodyContext {
		let localctx: GraphTypeSpecBodyContext = new GraphTypeSpecBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 586, GqlParser.RULE_graphTypeSpecBody);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2906;
			this.elementTypeDefList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementTypeDefList(): ElementTypeDefListContext {
		let localctx: ElementTypeDefListContext = new ElementTypeDefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 588, GqlParser.RULE_elementTypeDefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2908;
			this.elementTypeDef();
			this.state = 2913;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===34) {
				{
				{
				this.state = 2909;
				this.match(GqlParser.COMMA);
				this.state = 2910;
				this.elementTypeDef();
				}
				}
				this.state = 2915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementTypeDef(): ElementTypeDefContext {
		let localctx: ElementTypeDefContext = new ElementTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 590, GqlParser.RULE_elementTypeDef);
		try {
			this.state = 2918;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 226, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2916;
				this.nodeTypeDef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2917;
				this.edgeTypeDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeDef(): NodeTypeDefContext {
		let localctx: NodeTypeDefContext = new NodeTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 592, GqlParser.RULE_nodeTypeDef);
		try {
			this.state = 2924;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2920;
				this.nodeTypePattern();
				}
				break;
			case 335:
			case 355:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2921;
				this.nodeSynonym();
				this.state = 2922;
				this.nodeTypePhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypePattern(): NodeTypePatternContext {
		let localctx: NodeTypePatternContext = new NodeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 594, GqlParser.RULE_nodeTypePattern);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2926;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2927;
			this.nodeTypeName();
			this.state = 2928;
			this.nodeTypeFiller();
			this.state = 2929;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypePhrase(): NodeTypePhraseContext {
		let localctx: NodeTypePhraseContext = new NodeTypePhraseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 596, GqlParser.RULE_nodeTypePhrase);
		let _la: number;
		try {
			this.state = 2939;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 353:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===353) {
					{
					this.state = 2931;
					this.match(GqlParser.TYPE);
					}
				}

				this.state = 2934;
				this.nodeTypeName();
				this.state = 2936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
					{
					this.state = 2935;
					this.nodeTypeFiller();
					}
				}

				}
				break;
			case 32:
			case 40:
			case 167:
			case 326:
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2938;
				this.nodeTypeFiller();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeName(): NodeTypeNameContext {
		let localctx: NodeTypeNameContext = new NodeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 598, GqlParser.RULE_nodeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2941;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeFiller(): NodeTypeFillerContext {
		let localctx: NodeTypeFillerContext = new NodeTypeFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 600, GqlParser.RULE_nodeTypeFiller);
		try {
			this.state = 2948;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2943;
				this.nodeTypeLabelSetDef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2944;
				this.nodeTypePropertyTypeSetDef();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2945;
				this.nodeTypeLabelSetDef();
				this.state = 2946;
				this.nodeTypePropertyTypeSetDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeLabelSetDef(): NodeTypeLabelSetDefContext {
		let localctx: NodeTypeLabelSetDefContext = new NodeTypeLabelSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 602, GqlParser.RULE_nodeTypeLabelSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2950;
			this.labelSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypePropertyTypeSetDef(): NodeTypePropertyTypeSetDefContext {
		let localctx: NodeTypePropertyTypeSetDefContext = new NodeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 604, GqlParser.RULE_nodeTypePropertyTypeSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2952;
			this.propertyTypeSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeDef(): EdgeTypeDefContext {
		let localctx: EdgeTypeDefContext = new EdgeTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 606, GqlParser.RULE_edgeTypeDef);
		let _la: number;
		try {
			this.state = 2961;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2954;
				this.edgeTypePattern();
				}
				break;
			case 317:
			case 318:
			case 341:
			case 354:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===317 || _la===354) {
					{
					this.state = 2955;
					this.edgeKind();
					}
				}

				this.state = 2958;
				this.edgeSynonym();
				this.state = 2959;
				this.edgeTypePhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypePattern(): EdgeTypePatternContext {
		let localctx: EdgeTypePatternContext = new EdgeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 608, GqlParser.RULE_edgeTypePattern);
		try {
			this.state = 2965;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2963;
				this.fullEdgeTypePattern();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2964;
				this.abbreviatedEdgeTypePattern();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypePhrase(): EdgeTypePhraseContext {
		let localctx: EdgeTypePhraseContext = new EdgeTypePhraseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 610, GqlParser.RULE_edgeTypePhrase);
		let _la: number;
		try {
			this.state = 2977;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 353:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===353) {
					{
					this.state = 2967;
					this.match(GqlParser.TYPE);
					}
				}

				this.state = 2970;
				this.edgeTypeName();
				{
				this.state = 2971;
				this.edgeTypeFiller();
				this.state = 2972;
				this.endpointDef();
				}
				}
				break;
			case 32:
			case 40:
			case 167:
			case 326:
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2974;
				this.edgeTypeFiller();
				this.state = 2975;
				this.endpointDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeName(): EdgeTypeNameContext {
		let localctx: EdgeTypeNameContext = new EdgeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 612, GqlParser.RULE_edgeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2979;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeFiller(): EdgeTypeFillerContext {
		let localctx: EdgeTypeFillerContext = new EdgeTypeFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 614, GqlParser.RULE_edgeTypeFiller);
		try {
			this.state = 2986;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 237, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2981;
				this.edgeTypeLabelSetDef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2982;
				this.edgeTypePropertyTypeSetDef();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2983;
				this.edgeTypeLabelSetDef();
				this.state = 2984;
				this.edgeTypePropertyTypeSetDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeLabelSetDef(): EdgeTypeLabelSetDefContext {
		let localctx: EdgeTypeLabelSetDefContext = new EdgeTypeLabelSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 616, GqlParser.RULE_edgeTypeLabelSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2988;
			this.labelSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypePropertyTypeSetDef(): EdgeTypePropertyTypeSetDefContext {
		let localctx: EdgeTypePropertyTypeSetDefContext = new EdgeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 618, GqlParser.RULE_edgeTypePropertyTypeSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2990;
			this.propertyTypeSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePattern(): FullEdgeTypePatternContext {
		let localctx: FullEdgeTypePatternContext = new FullEdgeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 620, GqlParser.RULE_fullEdgeTypePattern);
		try {
			this.state = 2995;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 238, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2992;
				this.fullEdgeTypePatternPointingRight();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2993;
				this.fullEdgeTypePatternPointingLeft();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2994;
				this.fullEdgeTypePatternUndirected();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePatternPointingRight(): FullEdgeTypePatternPointingRightContext {
		let localctx: FullEdgeTypePatternPointingRightContext = new FullEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 622, GqlParser.RULE_fullEdgeTypePatternPointingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2997;
			this.sourceNodeTypeRef();
			this.state = 2998;
			this.arcTypePointingRight();
			this.state = 2999;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePatternPointingLeft(): FullEdgeTypePatternPointingLeftContext {
		let localctx: FullEdgeTypePatternPointingLeftContext = new FullEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 624, GqlParser.RULE_fullEdgeTypePatternPointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3001;
			this.destinationNodeTypeRef();
			this.state = 3002;
			this.arcTypePointingLeft();
			this.state = 3003;
			this.sourceNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePatternUndirected(): FullEdgeTypePatternUndirectedContext {
		let localctx: FullEdgeTypePatternUndirectedContext = new FullEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 626, GqlParser.RULE_fullEdgeTypePatternUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3005;
			this.sourceNodeTypeRef();
			this.state = 3006;
			this.arcTypeUndirected();
			this.state = 3007;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypePointingRight(): ArcTypePointingRightContext {
		let localctx: ArcTypePointingRightContext = new ArcTypePointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 628, GqlParser.RULE_arcTypePointingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3009;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 3010;
			this.arcTypeFiller();
			this.state = 3011;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypePointingLeft(): ArcTypePointingLeftContext {
		let localctx: ArcTypePointingLeftContext = new ArcTypePointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 630, GqlParser.RULE_arcTypePointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3013;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 3014;
			this.arcTypeFiller();
			this.state = 3015;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypeUndirected(): ArcTypeUndirectedContext {
		let localctx: ArcTypeUndirectedContext = new ArcTypeUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 632, GqlParser.RULE_arcTypeUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3017;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 3018;
			this.arcTypeFiller();
			this.state = 3019;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypeFiller(): ArcTypeFillerContext {
		let localctx: ArcTypeFillerContext = new ArcTypeFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 634, GqlParser.RULE_arcTypeFiller);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3021;
			this.edgeTypeName();
			this.state = 3022;
			this.edgeTypeFiller();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePattern(): AbbreviatedEdgeTypePatternContext {
		let localctx: AbbreviatedEdgeTypePatternContext = new AbbreviatedEdgeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 636, GqlParser.RULE_abbreviatedEdgeTypePattern);
		try {
			this.state = 3027;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 239, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3024;
				this.abbreviatedEdgeTypePatternPointingRight();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3025;
				this.abbreviatedEdgeTypePatternPointingLeft();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3026;
				this.abbreviatedEdgeTypePatternUndirected();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePatternPointingRight(): AbbreviatedEdgeTypePatternPointingRightContext {
		let localctx: AbbreviatedEdgeTypePatternPointingRightContext = new AbbreviatedEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 638, GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3029;
			this.sourceNodeTypeRef();
			this.state = 3030;
			this.match(GqlParser.RIGHT_ARROW);
			this.state = 3031;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePatternPointingLeft(): AbbreviatedEdgeTypePatternPointingLeftContext {
		let localctx: AbbreviatedEdgeTypePatternPointingLeftContext = new AbbreviatedEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 640, GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3033;
			this.destinationNodeTypeRef();
			this.state = 3034;
			this.match(GqlParser.LEFT_ARROW);
			this.state = 3035;
			this.sourceNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePatternUndirected(): AbbreviatedEdgeTypePatternUndirectedContext {
		let localctx: AbbreviatedEdgeTypePatternUndirectedContext = new AbbreviatedEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 642, GqlParser.RULE_abbreviatedEdgeTypePatternUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3037;
			this.sourceNodeTypeRef();
			this.state = 3038;
			this.match(GqlParser.TILDE);
			this.state = 3039;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeRef(): NodeTypeRefContext {
		let localctx: NodeTypeRefContext = new NodeTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 644, GqlParser.RULE_nodeTypeRef);
		try {
			this.state = 3043;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 240, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3041;
				this.sourceNodeTypeRef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3042;
				this.destinationNodeTypeRef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		let localctx: SourceNodeTypeRefContext = new SourceNodeTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 646, GqlParser.RULE_sourceNodeTypeRef);
		let _la: number;
		try {
			this.state = 3054;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 242, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3045;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3046;
				this.sourceNodeTypeName();
				this.state = 3047;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3049;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
					{
					this.state = 3050;
					this.nodeTypeFiller();
					}
				}

				this.state = 3053;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		let localctx: DestinationNodeTypeRefContext = new DestinationNodeTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 648, GqlParser.RULE_destinationNodeTypeRef);
		let _la: number;
		try {
			this.state = 3065;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 244, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3056;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3057;
				this.destinationNodeTypeName();
				this.state = 3058;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3060;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
					{
					this.state = 3061;
					this.nodeTypeFiller();
					}
				}

				this.state = 3064;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeKind(): EdgeKindContext {
		let localctx: EdgeKindContext = new EdgeKindContext(this, this._ctx, this.state);
		this.enterRule(localctx, 650, GqlParser.RULE_edgeKind);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3067;
			_la = this._input.LA(1);
			if(!(_la===317 || _la===354)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointDef(): EndpointDefContext {
		let localctx: EndpointDefContext = new EndpointDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 652, GqlParser.RULE_endpointDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3069;
			this.match(GqlParser.CONNECTING);
			this.state = 3070;
			this.enpointPairDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enpointPairDef(): EnpointPairDefContext {
		let localctx: EnpointPairDefContext = new EnpointPairDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 654, GqlParser.RULE_enpointPairDef);
		try {
			this.state = 3076;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 245, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3072;
				this.endpointPairDefPointingRight();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3073;
				this.endpointPairDefPointingLeft();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3074;
				this.endpointPairDefUndirected();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3075;
				this.abbreviatedEdgeTypePattern();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointPairDefPointingRight(): EndpointPairDefPointingRightContext {
		let localctx: EndpointPairDefPointingRightContext = new EndpointPairDefPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 656, GqlParser.RULE_endpointPairDefPointingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3078;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3079;
			this.sourceNodeTypeName();
			this.state = 3080;
			this.connectorPointingRight();
			this.state = 3081;
			this.destinationNodeTypeName();
			this.state = 3082;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointPairDefPointingLeft(): EndpointPairDefPointingLeftContext {
		let localctx: EndpointPairDefPointingLeftContext = new EndpointPairDefPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 658, GqlParser.RULE_endpointPairDefPointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3084;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3085;
			this.destinationNodeTypeName();
			this.state = 3086;
			this.connectorPointingLeft();
			this.state = 3087;
			this.sourceNodeTypeName();
			this.state = 3088;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointPairDefUndirected(): EndpointPairDefUndirectedContext {
		let localctx: EndpointPairDefUndirectedContext = new EndpointPairDefUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 660, GqlParser.RULE_endpointPairDefUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3090;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3091;
			this.sourceNodeTypeName();
			this.state = 3092;
			this.connectorUndirected();
			this.state = 3093;
			this.destinationNodeTypeName();
			this.state = 3094;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectorPointingRight(): ConnectorPointingRightContext {
		let localctx: ConnectorPointingRightContext = new ConnectorPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 662, GqlParser.RULE_connectorPointingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3096;
			_la = this._input.LA(1);
			if(!(_la===10 || _la===350)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectorPointingLeft(): ConnectorPointingLeftContext {
		let localctx: ConnectorPointingLeftContext = new ConnectorPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 664, GqlParser.RULE_connectorPointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3098;
			this.match(GqlParser.LEFT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectorUndirected(): ConnectorUndirectedContext {
		let localctx: ConnectorUndirectedContext = new ConnectorUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 666, GqlParser.RULE_connectorUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3100;
			_la = this._input.LA(1);
			if(!(_la===50 || _la===350)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		let localctx: SourceNodeTypeNameContext = new SourceNodeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 668, GqlParser.RULE_sourceNodeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3102;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		let localctx: DestinationNodeTypeNameContext = new DestinationNodeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 670, GqlParser.RULE_destinationNodeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3104;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelSetDef(): LabelSetDefContext {
		let localctx: LabelSetDefContext = new LabelSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 672, GqlParser.RULE_labelSetDef);
		try {
			this.state = 3114;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 326:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3106;
				this.match(GqlParser.LABEL);
				this.state = 3107;
				this.labelName();
				}
				break;
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3108;
				this.match(GqlParser.LABELS);
				this.state = 3109;
				this.labelSetSpec();
				}
				break;
			case 167:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3110;
				this.match(GqlParser.IS);
				this.state = 3111;
				this.labelSetSpec();
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3112;
				this.match(GqlParser.COLON);
				this.state = 3113;
				this.labelSetSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyTypeSetDef(): PropertyTypeSetDefContext {
		let localctx: PropertyTypeSetDefContext = new PropertyTypeSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 674, GqlParser.RULE_propertyTypeSetDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3116;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 3118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
				{
				this.state = 3117;
				this.propertyTypeDefList();
				}
			}

			this.state = 3120;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyTypeDefList(): PropertyTypeDefListContext {
		let localctx: PropertyTypeDefListContext = new PropertyTypeDefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 676, GqlParser.RULE_propertyTypeDefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3122;
			this.propertyTypeDef();
			this.state = 3127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===34) {
				{
				{
				this.state = 3123;
				this.match(GqlParser.COMMA);
				this.state = 3124;
				this.propertyTypeDef();
				}
				}
				this.state = 3129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyTypeDef(): PropertyTypeDefContext {
		let localctx: PropertyTypeDefContext = new PropertyTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 678, GqlParser.RULE_propertyTypeDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3130;
			this.propertyName();
			this.state = 3132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===33 || _la===248) {
				{
				this.state = 3131;
				this.typed();
				}
			}

			this.state = 3134;
			this.propertyValueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyValueType(): PropertyValueTypeContext {
		let localctx: PropertyValueTypeContext = new PropertyValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 680, GqlParser.RULE_propertyValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3136;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableType(): BindingTableTypeContext {
		let localctx: BindingTableTypeContext = new BindingTableTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 682, GqlParser.RULE_bindingTableType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===312) {
				{
				this.state = 3138;
				this.match(GqlParser.BINDING);
				}
			}

			this.state = 3141;
			this.match(GqlParser.TABLE);
			this.state = 3142;
			this.fieldTypesSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueType(): ValueTypeContext {
		let localctx: ValueTypeContext = new ValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 684, GqlParser.RULE_valueType);
		try {
			this.state = 3147;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 251, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3144;
				this.predefinedType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3145;
				this.constructedType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3146;
				this.dynamicUnionType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public typed(): TypedContext {
		let localctx: TypedContext = new TypedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 686, GqlParser.RULE_typed);
		try {
			this.state = 3151;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 33:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3149;
				this.match(GqlParser.DOUBLE_COLON);
				}
				break;
			case 248:
				this.enterOuterAlt(localctx, 2);
				{
				{
				this.state = 3150;
				this.match(GqlParser.TYPED);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedType(): PredefinedTypeContext {
		let localctx: PredefinedTypeContext = new PredefinedTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 688, GqlParser.RULE_predefinedType);
		try {
			this.state = 3160;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 77:
			case 78:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3153;
				this.booleanType();
				}
				break;
			case 238:
			case 265:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3154;
				this.charStringType();
				}
				break;
			case 76:
			case 83:
			case 264:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3155;
				this.byteStringType();
				}
				break;
			case 74:
			case 75:
			case 112:
			case 113:
			case 120:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 214:
			case 228:
			case 232:
			case 233:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3156;
				this.numericType();
				}
				break;
			case 109:
			case 122:
			case 174:
			case 243:
			case 244:
			case 273:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3157;
				this.temporalType();
				}
				break;
			case 44:
			case 198:
			case 312:
			case 317:
			case 318:
			case 323:
			case 335:
			case 339:
			case 341:
			case 347:
			case 354:
			case 355:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3158;
				this.refValueType();
				}
				break;
			case 205:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3159;
				this.pathValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanType(): BooleanTypeContext {
		let localctx: BooleanTypeContext = new BooleanTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 690, GqlParser.RULE_booleanType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3162;
			_la = this._input.LA(1);
			if(!(_la===77 || _la===78)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3164;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 254, this._ctx) ) {
			case 1:
				{
				this.state = 3163;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringType(): CharStringTypeContext {
		let localctx: CharStringTypeContext = new CharStringTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 692, GqlParser.RULE_charStringType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3166;
			_la = this._input.LA(1);
			if(!(_la===238 || _la===265)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3171;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 255, this._ctx) ) {
			case 1:
				{
				this.state = 3167;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3168;
				this.maxLength();
				this.state = 3169;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
			this.state = 3174;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 256, this._ctx) ) {
			case 1:
				{
				this.state = 3173;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringType(): ByteStringTypeContext {
		let localctx: ByteStringTypeContext = new ByteStringTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 694, GqlParser.RULE_byteStringType);
		let _la: number;
		try {
			this.state = 3210;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 83:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3176;
				this.match(GqlParser.BYTES);
				this.state = 3185;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 258, this._ctx) ) {
				case 1:
					{
					this.state = 3177;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 3178;
					this.minLength();
					this.state = 3180;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===34) {
						{
						this.state = 3179;
						this.match(GqlParser.COMMA);
						}
					}

					this.state = 3182;
					this.maxLength();
					this.state = 3183;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 3188;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 259, this._ctx) ) {
				case 1:
					{
					this.state = 3187;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 76:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3190;
				this.match(GqlParser.BINARY);
				this.state = 3195;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 260, this._ctx) ) {
				case 1:
					{
					this.state = 3191;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 3192;
					this.fixedLength();
					this.state = 3193;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 3198;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 261, this._ctx) ) {
				case 1:
					{
					this.state = 3197;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 264:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3200;
				this.match(GqlParser.VARBINARY);
				this.state = 3205;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 262, this._ctx) ) {
				case 1:
					{
					this.state = 3201;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 3202;
					this.maxLength();
					this.state = 3203;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 3208;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 263, this._ctx) ) {
				case 1:
					{
					this.state = 3207;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public minLength(): MinLengthContext {
		let localctx: MinLengthContext = new MinLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 696, GqlParser.RULE_minLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3212;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public maxLength(): MaxLengthContext {
		let localctx: MaxLengthContext = new MaxLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 698, GqlParser.RULE_maxLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3214;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fixedLength(): FixedLengthContext {
		let localctx: FixedLengthContext = new FixedLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 700, GqlParser.RULE_fixedLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3216;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericType(): NumericTypeContext {
		let localctx: NumericTypeContext = new NumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 702, GqlParser.RULE_numericType);
		try {
			this.state = 3220;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 74:
			case 75:
			case 112:
			case 113:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 228:
			case 232:
			case 233:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3218;
				this.exactNumericType();
				}
				break;
			case 120:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 214:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3219;
				this.approximateNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exactNumericType(): ExactNumericTypeContext {
		let localctx: ExactNumericTypeContext = new ExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 704, GqlParser.RULE_exactNumericType);
		try {
			this.state = 3224;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 74:
			case 75:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 228:
			case 232:
			case 233:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3222;
				this.binaryExactNumericType();
				}
				break;
			case 112:
			case 113:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3223;
				this.decimalExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public binaryExactNumericType(): BinaryExactNumericTypeContext {
		let localctx: BinaryExactNumericTypeContext = new BinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 706, GqlParser.RULE_binaryExactNumericType);
		try {
			this.state = 3228;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 74:
			case 75:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 228:
			case 232:
			case 233:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3226;
				this.signedBinaryExactNumericType();
				}
				break;
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3227;
				this.unsignedBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signedBinaryExactNumericType(): SignedBinaryExactNumericTypeContext {
		let localctx: SignedBinaryExactNumericTypeContext = new SignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 708, GqlParser.RULE_signedBinaryExactNumericType);
		let _la: number;
		try {
			this.state = 3276;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 153:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3230;
				this.match(GqlParser.INT8);
				this.state = 3232;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 268, this._ctx) ) {
				case 1:
					{
					this.state = 3231;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 155:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3234;
				this.match(GqlParser.INT16);
				this.state = 3236;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 269, this._ctx) ) {
				case 1:
					{
					this.state = 3235;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 157:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3238;
				this.match(GqlParser.INT32);
				this.state = 3240;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 270, this._ctx) ) {
				case 1:
					{
					this.state = 3239;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 159:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3242;
				this.match(GqlParser.INT64);
				this.state = 3244;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 271, this._ctx) ) {
				case 1:
					{
					this.state = 3243;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 161:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3246;
				this.match(GqlParser.INT128);
				this.state = 3248;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 272, this._ctx) ) {
				case 1:
					{
					this.state = 3247;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 163:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3250;
				this.match(GqlParser.INT256);
				this.state = 3252;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 273, this._ctx) ) {
				case 1:
					{
					this.state = 3251;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 233:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3254;
				this.match(GqlParser.SMALLINT);
				this.state = 3256;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 274, this._ctx) ) {
				case 1:
					{
					this.state = 3255;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 151:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3258;
				this.match(GqlParser.INT);
				this.state = 3263;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 275, this._ctx) ) {
				case 1:
					{
					this.state = 3259;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 3260;
					this.precision();
					this.state = 3261;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 3266;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 276, this._ctx) ) {
				case 1:
					{
					this.state = 3265;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 75:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3268;
				this.match(GqlParser.BIGINT);
				this.state = 3270;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 277, this._ctx) ) {
				case 1:
					{
					this.state = 3269;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 74:
			case 152:
			case 154:
			case 156:
			case 158:
			case 160:
			case 162:
			case 164:
			case 228:
			case 232:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 3273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===228) {
					{
					this.state = 3272;
					this.match(GqlParser.SIGNED);
					}
				}

				this.state = 3275;
				this.verboseBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedBinaryExactNumericType(): UnsignedBinaryExactNumericTypeContext {
		let localctx: UnsignedBinaryExactNumericTypeContext = new UnsignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 710, GqlParser.RULE_unsignedBinaryExactNumericType);
		try {
			this.state = 3322;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 251:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3278;
				this.match(GqlParser.UINT8);
				this.state = 3280;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 280, this._ctx) ) {
				case 1:
					{
					this.state = 3279;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 252:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3282;
				this.match(GqlParser.UINT16);
				this.state = 3284;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 281, this._ctx) ) {
				case 1:
					{
					this.state = 3283;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 253:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3286;
				this.match(GqlParser.UINT32);
				this.state = 3288;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 282, this._ctx) ) {
				case 1:
					{
					this.state = 3287;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 254:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3290;
				this.match(GqlParser.UINT64);
				this.state = 3292;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 283, this._ctx) ) {
				case 1:
					{
					this.state = 3291;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 255:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3294;
				this.match(GqlParser.UINT128);
				this.state = 3296;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 284, this._ctx) ) {
				case 1:
					{
					this.state = 3295;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 256:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3298;
				this.match(GqlParser.UINT256);
				this.state = 3300;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 285, this._ctx) ) {
				case 1:
					{
					this.state = 3299;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 262:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3302;
				this.match(GqlParser.USMALLINT);
				this.state = 3304;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 286, this._ctx) ) {
				case 1:
					{
					this.state = 3303;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 250:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3306;
				this.match(GqlParser.UINT);
				this.state = 3311;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 287, this._ctx) ) {
				case 1:
					{
					this.state = 3307;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 3308;
					this.precision();
					this.state = 3309;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 3314;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 288, this._ctx) ) {
				case 1:
					{
					this.state = 3313;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 249:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3316;
				this.match(GqlParser.UBIGINT);
				this.state = 3318;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 289, this._ctx) ) {
				case 1:
					{
					this.state = 3317;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 259:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 3320;
				this.match(GqlParser.UNSIGNED);
				this.state = 3321;
				this.verboseBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext {
		let localctx: VerboseBinaryExactNumericTypeContext = new VerboseBinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 712, GqlParser.RULE_verboseBinaryExactNumericType);
		try {
			this.state = 3368;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 154:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3324;
				this.match(GqlParser.INTEGER8);
				this.state = 3326;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 291, this._ctx) ) {
				case 1:
					{
					this.state = 3325;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 156:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3328;
				this.match(GqlParser.INTEGER16);
				this.state = 3330;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 292, this._ctx) ) {
				case 1:
					{
					this.state = 3329;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 158:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3332;
				this.match(GqlParser.INTEGER32);
				this.state = 3334;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 293, this._ctx) ) {
				case 1:
					{
					this.state = 3333;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 160:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3336;
				this.match(GqlParser.INTEGER64);
				this.state = 3338;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 294, this._ctx) ) {
				case 1:
					{
					this.state = 3337;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 162:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3340;
				this.match(GqlParser.INTEGER128);
				this.state = 3342;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 295, this._ctx) ) {
				case 1:
					{
					this.state = 3341;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 164:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3344;
				this.match(GqlParser.INTEGER256);
				this.state = 3346;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 296, this._ctx) ) {
				case 1:
					{
					this.state = 3345;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 232:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3348;
				this.match(GqlParser.SMALL);
				this.state = 3349;
				this.match(GqlParser.INTEGER);
				this.state = 3351;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 297, this._ctx) ) {
				case 1:
					{
					this.state = 3350;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 152:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3353;
				this.match(GqlParser.INTEGER);
				this.state = 3358;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 298, this._ctx) ) {
				case 1:
					{
					this.state = 3354;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 3355;
					this.precision();
					this.state = 3356;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 3361;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 299, this._ctx) ) {
				case 1:
					{
					this.state = 3360;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 74:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3363;
				this.match(GqlParser.BIG);
				this.state = 3364;
				this.match(GqlParser.INTEGER);
				this.state = 3366;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 300, this._ctx) ) {
				case 1:
					{
					this.state = 3365;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public decimalExactNumericType(): DecimalExactNumericTypeContext {
		let localctx: DecimalExactNumericTypeContext = new DecimalExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 714, GqlParser.RULE_decimalExactNumericType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3370;
			_la = this._input.LA(1);
			if(!(_la===112 || _la===113)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3379;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 303, this._ctx) ) {
			case 1:
				{
				this.state = 3371;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3372;
				this.precision();
				this.state = 3373;
				this.match(GqlParser.COMMA);
				this.state = 3375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===380) {
					{
					this.state = 3374;
					this.scale();
					}
				}

				this.state = 3377;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
			this.state = 3382;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 304, this._ctx) ) {
			case 1:
				{
				this.state = 3381;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precision(): PrecisionContext {
		let localctx: PrecisionContext = new PrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 716, GqlParser.RULE_precision);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3384;
			this.match(GqlParser.UNSIGNED_DECIMAL_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public scale(): ScaleContext {
		let localctx: ScaleContext = new ScaleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 718, GqlParser.RULE_scale);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3386;
			this.match(GqlParser.UNSIGNED_DECIMAL_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public approximateNumericType(): ApproximateNumericTypeContext {
		let localctx: ApproximateNumericTypeContext = new ApproximateNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 720, GqlParser.RULE_approximateNumericType);
		let _la: number;
		try {
			this.state = 3431;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 134:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3388;
				this.match(GqlParser.FLOAT16);
				this.state = 3390;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 305, this._ctx) ) {
				case 1:
					{
					this.state = 3389;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 135:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3392;
				this.match(GqlParser.FLOAT32);
				this.state = 3394;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 306, this._ctx) ) {
				case 1:
					{
					this.state = 3393;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 136:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3396;
				this.match(GqlParser.FLOAT64);
				this.state = 3398;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 307, this._ctx) ) {
				case 1:
					{
					this.state = 3397;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 137:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3400;
				this.match(GqlParser.FLOAT128);
				this.state = 3402;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 308, this._ctx) ) {
				case 1:
					{
					this.state = 3401;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 138:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3404;
				this.match(GqlParser.FLOAT256);
				this.state = 3406;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 309, this._ctx) ) {
				case 1:
					{
					this.state = 3405;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 133:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3408;
				this.match(GqlParser.FLOAT);
				this.state = 3417;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 311, this._ctx) ) {
				case 1:
					{
					this.state = 3409;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 3410;
					this.precision();
					this.state = 3411;
					this.match(GqlParser.COMMA);
					this.state = 3413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===380) {
						{
						this.state = 3412;
						this.scale();
						}
					}

					this.state = 3415;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 3420;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 312, this._ctx) ) {
				case 1:
					{
					this.state = 3419;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 214:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3422;
				this.match(GqlParser.REAL);
				this.state = 3424;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 313, this._ctx) ) {
				case 1:
					{
					this.state = 3423;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 120:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3426;
				this.match(GqlParser.DOUBLE);
				this.state = 3428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===211) {
					{
					this.state = 3427;
					this.match(GqlParser.PRECISION);
					}
				}

				{
				this.state = 3430;
				this.notNull();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalType(): TemporalTypeContext {
		let localctx: TemporalTypeContext = new TemporalTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 722, GqlParser.RULE_temporalType);
		try {
			this.state = 3435;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 109:
			case 174:
			case 243:
			case 244:
			case 273:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3433;
				this.temporalInstantType();
				}
				break;
			case 122:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3434;
				this.temporalDurationType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalInstantType(): TemporalInstantTypeContext {
		let localctx: TemporalInstantTypeContext = new TemporalInstantTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 724, GqlParser.RULE_temporalInstantType);
		try {
			this.state = 3442;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 317, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3437;
				this.dateTimeType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3438;
				this.localDateTimeType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3439;
				this.dateType();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3440;
				this.timeType();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3441;
				this.localTimeType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalDurationType(): TemporalDurationTypeContext {
		let localctx: TemporalDurationTypeContext = new TemporalDurationTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 726, GqlParser.RULE_temporalDurationType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3444;
			this.durationType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeType(): DateTimeTypeContext {
		let localctx: DateTimeTypeContext = new DateTimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 728, GqlParser.RULE_dateTimeType);
		try {
			this.state = 3457;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 273:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3446;
				this.match(GqlParser.ZONED);
				this.state = 3447;
				this.match(GqlParser.DATETIME);
				this.state = 3449;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 318, this._ctx) ) {
				case 1:
					{
					this.state = 3448;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3451;
				this.match(GqlParser.TIMESTAMP);
				this.state = 3452;
				this.match(GqlParser.WITH);
				this.state = 3453;
				this.match(GqlParser.TIMEZONE);
				this.state = 3455;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 319, this._ctx) ) {
				case 1:
					{
					this.state = 3454;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localDateTimeType(): LocalDateTimeTypeContext {
		let localctx: LocalDateTimeTypeContext = new LocalDateTimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 730, GqlParser.RULE_localDateTimeType);
		try {
			this.state = 3471;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 174:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3459;
				this.match(GqlParser.LOCAL);
				this.state = 3460;
				this.match(GqlParser.DATETIME);
				this.state = 3462;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 321, this._ctx) ) {
				case 1:
					{
					this.state = 3461;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3464;
				this.match(GqlParser.TIMESTAMP);
				{
				this.state = 3465;
				this.match(GqlParser.WITHOUT);
				this.state = 3466;
				this.match(GqlParser.TIMEZONE);
				}
				this.state = 3469;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 322, this._ctx) ) {
				case 1:
					{
					this.state = 3468;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateType(): DateTypeContext {
		let localctx: DateTypeContext = new DateTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 732, GqlParser.RULE_dateType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3473;
			this.match(GqlParser.DATE);
			this.state = 3475;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 324, this._ctx) ) {
			case 1:
				{
				this.state = 3474;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeType(): TimeTypeContext {
		let localctx: TimeTypeContext = new TimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 734, GqlParser.RULE_timeType);
		try {
			this.state = 3488;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 273:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3477;
				this.match(GqlParser.ZONED);
				this.state = 3478;
				this.match(GqlParser.TIME);
				this.state = 3480;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 325, this._ctx) ) {
				case 1:
					{
					this.state = 3479;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3482;
				this.match(GqlParser.TIME);
				this.state = 3483;
				this.match(GqlParser.WITH);
				this.state = 3484;
				this.match(GqlParser.TIMEZONE);
				this.state = 3486;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 326, this._ctx) ) {
				case 1:
					{
					this.state = 3485;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localTimeType(): LocalTimeTypeContext {
		let localctx: LocalTimeTypeContext = new LocalTimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 736, GqlParser.RULE_localTimeType);
		try {
			this.state = 3501;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 174:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3490;
				this.match(GqlParser.LOCAL);
				this.state = 3491;
				this.match(GqlParser.TIME);
				this.state = 3493;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 328, this._ctx) ) {
				case 1:
					{
					this.state = 3492;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3495;
				this.match(GqlParser.TIME);
				this.state = 3496;
				this.match(GqlParser.WITHOUT);
				this.state = 3497;
				this.match(GqlParser.TIMEZONE);
				this.state = 3499;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 329, this._ctx) ) {
				case 1:
					{
					this.state = 3498;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationType(): DurationTypeContext {
		let localctx: DurationTypeContext = new DurationTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 738, GqlParser.RULE_durationType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3503;
			this.match(GqlParser.DURATION);
			this.state = 3505;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				{
				this.state = 3504;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public refValueType(): RefValueTypeContext {
		let localctx: RefValueTypeContext = new RefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 740, GqlParser.RULE_refValueType);
		try {
			this.state = 3511;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 332, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3507;
				this.graphRefValueType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3508;
				this.bindingTableRefValueType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3509;
				this.nodeRefValueType();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3510;
				this.edgeRefValueType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphRefValueType(): GraphRefValueTypeContext {
		let localctx: GraphRefValueTypeContext = new GraphRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 742, GqlParser.RULE_graphRefValueType);
		try {
			this.state = 3515;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3513;
				this.openGraphRefValueType();
				}
				break;
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3514;
				this.closedGraphRefValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openGraphRefValueType(): OpenGraphRefValueTypeContext {
		let localctx: OpenGraphRefValueTypeContext = new OpenGraphRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 744, GqlParser.RULE_openGraphRefValueType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3517;
			this.match(GqlParser.OPEN);
			this.state = 3519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 3518;
				this.match(GqlParser.PROPERTY);
				}
			}

			this.state = 3521;
			this.match(GqlParser.GRAPH);
			this.state = 3523;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 335, this._ctx) ) {
			case 1:
				{
				this.state = 3522;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedGraphRefValueType(): ClosedGraphRefValueTypeContext {
		let localctx: ClosedGraphRefValueTypeContext = new ClosedGraphRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 746, GqlParser.RULE_closedGraphRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3525;
			this.graphTypeSpec();
			this.state = 3527;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 336, this._ctx) ) {
			case 1:
				{
				this.state = 3526;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableRefValueType(): BindingTableRefValueTypeContext {
		let localctx: BindingTableRefValueTypeContext = new BindingTableRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 748, GqlParser.RULE_bindingTableRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3529;
			this.bindingTableType();
			this.state = 3531;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 337, this._ctx) ) {
			case 1:
				{
				this.state = 3530;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeRefValueType(): NodeRefValueTypeContext {
		let localctx: NodeRefValueTypeContext = new NodeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 750, GqlParser.RULE_nodeRefValueType);
		try {
			this.state = 3535;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
			case 335:
			case 355:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3533;
				this.openNodeRefValueType();
				}
				break;
			case 44:
			case 317:
			case 318:
			case 341:
			case 354:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3534;
				this.closedNodeRefValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openNodeRefValueType(): OpenNodeRefValueTypeContext {
		let localctx: OpenNodeRefValueTypeContext = new OpenNodeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 752, GqlParser.RULE_openNodeRefValueType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===198) {
				{
				this.state = 3537;
				this.match(GqlParser.OPEN);
				}
			}

			this.state = 3540;
			this.nodeSynonym();
			this.state = 3542;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 340, this._ctx) ) {
			case 1:
				{
				this.state = 3541;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedNodeRefValueType(): ClosedNodeRefValueTypeContext {
		let localctx: ClosedNodeRefValueTypeContext = new ClosedNodeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 754, GqlParser.RULE_closedNodeRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3544;
			this.edgeTypeDef();
			this.state = 3546;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 341, this._ctx) ) {
			case 1:
				{
				this.state = 3545;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeRefValueType(): EdgeRefValueTypeContext {
		let localctx: EdgeRefValueTypeContext = new EdgeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 756, GqlParser.RULE_edgeRefValueType);
		try {
			this.state = 3550;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 342, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3548;
				this.openEdgeRefValueType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3549;
				this.closedEdgeRefValueType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openEdgeRefValueType(): OpenEdgeRefValueTypeContext {
		let localctx: OpenEdgeRefValueTypeContext = new OpenEdgeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 758, GqlParser.RULE_openEdgeRefValueType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3553;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===198) {
				{
				this.state = 3552;
				this.match(GqlParser.OPEN);
				}
			}

			this.state = 3555;
			this.edgeSynonym();
			this.state = 3557;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 344, this._ctx) ) {
			case 1:
				{
				this.state = 3556;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedEdgeRefValueType(): ClosedEdgeRefValueTypeContext {
		let localctx: ClosedEdgeRefValueTypeContext = new ClosedEdgeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 760, GqlParser.RULE_closedEdgeRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3559;
			this.edgeTypeDef();
			this.state = 3561;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 345, this._ctx) ) {
			case 1:
				{
				this.state = 3560;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constructedType(): ConstructedTypeContext {
		let localctx: ConstructedTypeContext = new ConstructedTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 762, GqlParser.RULE_constructedType);
		try {
			this.state = 3565;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 346, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3563;
				this.listValueType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3564;
				this.recordType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueType(): ListValueTypeContext {
		let localctx: ListValueTypeContext = new ListValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 764, GqlParser.RULE_listValueType);
		try {
			this.state = 3591;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 66:
			case 142:
			case 172:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3567;
				this.listValueTypeName();
				this.state = 3568;
				this.match(GqlParser.LEFT_ANGLE_BRACKET);
				this.state = 3569;
				this.predefinedType();
				this.state = 3570;
				this.match(GqlParser.RIGHT_ANGLE_BRACKET);
				this.state = 3575;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 347, this._ctx) ) {
				case 1:
					{
					this.state = 3571;
					this.match(GqlParser.LEFT_BRACKET);
					this.state = 3572;
					this.maxLength();
					this.state = 3573;
					this.match(GqlParser.RIGHT_BRACKET);
					}
					break;
				}
				this.state = 3578;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 348, this._ctx) ) {
				case 1:
					{
					this.state = 3577;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 44:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 83:
			case 109:
			case 112:
			case 113:
			case 120:
			case 122:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 174:
			case 198:
			case 205:
			case 214:
			case 228:
			case 232:
			case 233:
			case 238:
			case 243:
			case 244:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
			case 264:
			case 265:
			case 273:
			case 312:
			case 317:
			case 318:
			case 323:
			case 335:
			case 339:
			case 341:
			case 347:
			case 354:
			case 355:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3580;
				this.predefinedType();
				this.state = 3581;
				this.listValueTypeName();
				this.state = 3586;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 349, this._ctx) ) {
				case 1:
					{
					this.state = 3582;
					this.match(GqlParser.LEFT_BRACKET);
					this.state = 3583;
					this.maxLength();
					this.state = 3584;
					this.match(GqlParser.RIGHT_BRACKET);
					}
					break;
				}
				this.state = 3589;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 350, this._ctx) ) {
				case 1:
					{
					this.state = 3588;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueTypeName(): ListValueTypeNameContext {
		let localctx: ListValueTypeNameContext = new ListValueTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 766, GqlParser.RULE_listValueTypeName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===142) {
				{
				this.state = 3593;
				this.match(GqlParser.GROUP);
				}
			}

			this.state = 3596;
			this.listValueTypeNameSynonym();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueTypeNameSynonym(): ListValueTypeNameSynonymContext {
		let localctx: ListValueTypeNameSynonymContext = new ListValueTypeNameSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 768, GqlParser.RULE_listValueTypeNameSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3598;
			_la = this._input.LA(1);
			if(!(_la===66 || _la===172)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordType(): RecordTypeContext {
		let localctx: RecordTypeContext = new RecordTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 770, GqlParser.RULE_recordType);
		let _la: number;
		try {
			this.state = 3614;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 357, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===198) {
					{
					this.state = 3600;
					this.match(GqlParser.OPEN);
					}
				}

				this.state = 3603;
				this.match(GqlParser.RECORD);
				this.state = 3605;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 354, this._ctx) ) {
				case 1:
					{
					this.state = 3604;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===215) {
					{
					this.state = 3607;
					this.match(GqlParser.RECORD);
					}
				}

				this.state = 3610;
				this.fieldTypesSpec();
				this.state = 3612;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 356, this._ctx) ) {
				case 1:
					{
					this.state = 3611;
					this.notNull();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldTypesSpec(): FieldTypesSpecContext {
		let localctx: FieldTypesSpecContext = new FieldTypesSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 772, GqlParser.RULE_fieldTypesSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3616;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 3618;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
				{
				this.state = 3617;
				this.fieldTypeList();
				}
			}

			this.state = 3620;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldTypeList(): FieldTypeListContext {
		let localctx: FieldTypeListContext = new FieldTypeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 774, GqlParser.RULE_fieldTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3622;
			this.fieldType();
			this.state = 3625;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3623;
				this.match(GqlParser.COMMA);
				this.state = 3624;
				this.fieldType();
				}
				}
				this.state = 3627;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dynamicUnionType(): DynamicUnionTypeContext {
		let localctx: DynamicUnionTypeContext = new DynamicUnionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 776, GqlParser.RULE_dynamicUnionType);
		try {
			this.state = 3632;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 360, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3629;
				this.openDynamicUnionType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3630;
				this.dynamicPropertyValueType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3631;
				this.closedDynamicUnionType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openDynamicUnionType(): OpenDynamicUnionTypeContext {
		let localctx: OpenDynamicUnionTypeContext = new OpenDynamicUnionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 778, GqlParser.RULE_openDynamicUnionType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3634;
			this.match(GqlParser.ANY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dynamicPropertyValueType(): DynamicPropertyValueTypeContext {
		let localctx: DynamicPropertyValueTypeContext = new DynamicPropertyValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 780, GqlParser.RULE_dynamicPropertyValueType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===65) {
				{
				this.state = 3636;
				this.match(GqlParser.ANY);
				}
			}

			this.state = 3639;
			this.match(GqlParser.PROPERTY);
			this.state = 3640;
			this.match(GqlParser.VALUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedDynamicUnionType(): ClosedDynamicUnionTypeContext {
		let localctx: ClosedDynamicUnionTypeContext = new ClosedDynamicUnionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 782, GqlParser.RULE_closedDynamicUnionType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3642;
			this.match(GqlParser.ANY);
			this.state = 3643;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 3644;
			this.componentTypeList();
			this.state = 3645;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public componentTypeList(): ComponentTypeListContext {
		let localctx: ComponentTypeListContext = new ComponentTypeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 784, GqlParser.RULE_componentTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3647;
			this.componentType();
			this.state = 3652;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===52) {
				{
				{
				this.state = 3648;
				this.match(GqlParser.VERTICAL_BAR);
				this.state = 3649;
				this.componentType();
				}
				}
				this.state = 3654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public componentType(): ComponentTypeContext {
		let localctx: ComponentTypeContext = new ComponentTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 786, GqlParser.RULE_componentType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3655;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueType(): PathValueTypeContext {
		let localctx: PathValueTypeContext = new PathValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 788, GqlParser.RULE_pathValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3657;
			this.match(GqlParser.PATH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public notNull(): NotNullContext {
		let localctx: NotNullContext = new NotNullContext(this, this._ctx, this.state);
		this.enterRule(localctx, 790, GqlParser.RULE_notNull);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3659;
			this.match(GqlParser.NOT);
			this.state = 3660;
			this.match(GqlParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldType(): FieldTypeContext {
		let localctx: FieldTypeContext = new FieldTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 792, GqlParser.RULE_fieldType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3662;
			this.fieldName();
			{
			this.state = 3663;
			this.typed();
			}
			this.state = 3664;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schemaRef(): SchemaRefContext {
		let localctx: SchemaRefContext = new SchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 794, GqlParser.RULE_schemaRef);
		try {
			this.state = 3669;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 48:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3666;
				this.absoluteCatalogSchemaRef();
				}
				break;
			case 54:
			case 55:
			case 105:
			case 146:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3667;
				this.relativeCatalogSchemaRef();
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3668;
				this.refParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public absoluteCatalogSchemaRef(): AbsoluteCatalogSchemaRefContext {
		let localctx: AbsoluteCatalogSchemaRefContext = new AbsoluteCatalogSchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 796, GqlParser.RULE_absoluteCatalogSchemaRef);
		try {
			this.state = 3675;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 364, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3671;
				this.match(GqlParser.SOLIDUS);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3672;
				this.absoluteDirectoryPath();
				this.state = 3673;
				this.schemaName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
		let localctx: CatalogSchemaParentAndNameContext = new CatalogSchemaParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 798, GqlParser.RULE_catalogSchemaParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3677;
			this.absoluteDirectoryPath();
			this.state = 3678;
			this.schemaName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public relativeCatalogSchemaRef(): RelativeCatalogSchemaRefContext {
		let localctx: RelativeCatalogSchemaRefContext = new RelativeCatalogSchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 800, GqlParser.RULE_relativeCatalogSchemaRef);
		try {
			this.state = 3684;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 54:
			case 105:
			case 146:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3680;
				this.predefinedSchemaRef();
				}
				break;
			case 55:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3681;
				this.relativeDirectoryPath();
				this.state = 3682;
				this.schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedSchemaRef(): PredefinedSchemaRefContext {
		let localctx: PredefinedSchemaRefContext = new PredefinedSchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 802, GqlParser.RULE_predefinedSchemaRef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3686;
			_la = this._input.LA(1);
			if(!(_la===54 || _la===105 || _la===146)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
		let localctx: AbsoluteDirectoryPathContext = new AbsoluteDirectoryPathContext(this, this._ctx, this.state);
		this.enterRule(localctx, 804, GqlParser.RULE_absoluteDirectoryPath);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3688;
			this.match(GqlParser.SOLIDUS);
			this.state = 3690;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 366, this._ctx) ) {
			case 1:
				{
				this.state = 3689;
				this.simpleDirectoryPath();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public relativeDirectoryPath(): RelativeDirectoryPathContext {
		let localctx: RelativeDirectoryPathContext = new RelativeDirectoryPathContext(this, this._ctx, this.state);
		this.enterRule(localctx, 806, GqlParser.RULE_relativeDirectoryPath);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3692;
			this.match(GqlParser.DOUBLE_PERIOD);
			this.state = 3704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===48) {
				{
				this.state = 3697;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 367, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3693;
						this.match(GqlParser.SOLIDUS);
						this.state = 3694;
						this.match(GqlParser.DOUBLE_PERIOD);
						}
						}
					}
					this.state = 3699;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 367, this._ctx);
				}
				this.state = 3700;
				this.match(GqlParser.SOLIDUS);
				this.state = 3702;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 368, this._ctx) ) {
				case 1:
					{
					this.state = 3701;
					this.simpleDirectoryPath();
					}
					break;
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleDirectoryPath(): SimpleDirectoryPathContext {
		let localctx: SimpleDirectoryPathContext = new SimpleDirectoryPathContext(this, this._ctx, this.state);
		this.enterRule(localctx, 808, GqlParser.RULE_simpleDirectoryPath);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3709;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3706;
					this.directoryName();
					this.state = 3707;
					this.match(GqlParser.SOLIDUS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3711;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 370, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphRef(): GraphRefContext {
		let localctx: GraphRefContext = new GraphRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 810, GqlParser.RULE_graphRef);
		try {
			this.state = 3719;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 371, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3713;
				this.catalogObjectParentRef();
				this.state = 3714;
				this.graphName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3716;
				this.delimitedGraphName();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3717;
				this.homeGraph();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3718;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		let localctx: CatalogGraphParentAndNameContext = new CatalogGraphParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 812, GqlParser.RULE_catalogGraphParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3722;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 372, this._ctx) ) {
			case 1:
				{
				this.state = 3721;
				this.catalogObjectParentRef();
				}
				break;
			}
			this.state = 3724;
			this.graphName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public homeGraph(): HomeGraphContext {
		let localctx: HomeGraphContext = new HomeGraphContext(this, this._ctx, this.state);
		this.enterRule(localctx, 814, GqlParser.RULE_homeGraph);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3726;
			_la = this._input.LA(1);
			if(!(_la===144 || _la===145)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeRef(): GraphTypeRefContext {
		let localctx: GraphTypeRefContext = new GraphTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 816, GqlParser.RULE_graphTypeRef);
		try {
			this.state = 3730;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 373, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3728;
				this.catalogGraphTypeParentAndName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3729;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		let localctx: CatalogGraphTypeParentAndNameContext = new CatalogGraphTypeParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 818, GqlParser.RULE_catalogGraphTypeParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3733;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 374, this._ctx) ) {
			case 1:
				{
				this.state = 3732;
				this.catalogObjectParentRef();
				}
				break;
			}
			this.state = 3735;
			this.graphTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableRef(): BindingTableRefContext {
		let localctx: BindingTableRefContext = new BindingTableRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 820, GqlParser.RULE_bindingTableRef);
		try {
			this.state = 3742;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 375, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3737;
				this.catalogObjectParentRef();
				this.state = 3738;
				this.bindingTableName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3740;
				this.delimitedBindingTableName();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3741;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogBindingTableParentAndName(): CatalogBindingTableParentAndNameContext {
		let localctx: CatalogBindingTableParentAndNameContext = new CatalogBindingTableParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 822, GqlParser.RULE_catalogBindingTableParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3745;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 376, this._ctx) ) {
			case 1:
				{
				this.state = 3744;
				this.catalogObjectParentRef();
				}
				break;
			}
			this.state = 3747;
			this.bindingTableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureRef(): ProcedureRefContext {
		let localctx: ProcedureRefContext = new ProcedureRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 824, GqlParser.RULE_procedureRef);
		try {
			this.state = 3751;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 377, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3749;
				this.catalogProcedureParentAndName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3750;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogProcedureParentAndName(): CatalogProcedureParentAndNameContext {
		let localctx: CatalogProcedureParentAndNameContext = new CatalogProcedureParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 826, GqlParser.RULE_catalogProcedureParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3754;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 378, this._ctx) ) {
			case 1:
				{
				this.state = 3753;
				this.catalogObjectParentRef();
				}
				break;
			}
			this.state = 3756;
			this.procedureName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		let localctx: CatalogObjectParentRefContext = new CatalogObjectParentRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 828, GqlParser.RULE_catalogObjectParentRef);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3777;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 48:
			case 54:
			case 55:
			case 105:
			case 146:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3758;
				this.schemaRef();
				this.state = 3760;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===48) {
					{
					this.state = 3759;
					this.match(GqlParser.SOLIDUS);
					}
				}

				this.state = 3767;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 380, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3762;
						this.objectName();
						this.state = 3763;
						this.match(GqlParser.PERIOD);
						}
						}
					}
					this.state = 3769;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 380, this._ctx);
				}
				}
				break;
			case 56:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3773;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3770;
						this.objectName();
						this.state = 3771;
						this.match(GqlParser.PERIOD);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3775;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 381, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public refParameter(): RefParameterContext {
		let localctx: RefParameterContext = new RefParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 830, GqlParser.RULE_refParameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3779;
			this.parameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public externalObjectRef(): ExternalObjectRefContext {
		let localctx: ExternalObjectRefContext = new ExternalObjectRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 832, GqlParser.RULE_externalObjectRef);
		try {
			this.enterOuterAlt(localctx, 1);
			// tslint:disable-next-line:no-empty
			{
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public searchCondition(): SearchConditionContext {
		let localctx: SearchConditionContext = new SearchConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 834, GqlParser.RULE_searchCondition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3783;
			this.booleanValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predicate(): PredicateContext {
		let localctx: PredicateContext = new PredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 836, GqlParser.RULE_predicate);
		try {
			this.state = 3796;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 383, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3785;
				this.comparisonPredicate();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3786;
				this.existsPredicate();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3787;
				this.nullPredicate();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3788;
				this.valueTypePredicate();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3789;
				this.normalizedPredicate();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3790;
				this.directedPredicate();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3791;
				this.labeledPredicate();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3792;
				this.sourceOrDestinationPredicate();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3793;
				this.allDifferentPredicate();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 3794;
				this.samePredicate();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 3795;
				this.propertyExistsPredicate();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonPredicate(): ComparisonPredicateContext {
		let localctx: ComparisonPredicateContext = new ComparisonPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 838, GqlParser.RULE_comparisonPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3798;
			this.comparisonPredicand();
			this.state = 3799;
			this.comparisonPredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonPredicatePart2(): ComparisonPredicatePart2Context {
		let localctx: ComparisonPredicatePart2Context = new ComparisonPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 840, GqlParser.RULE_comparisonPredicatePart2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3801;
			this.comparisonOperator();
			this.state = 3802;
			this.comparisonPredicand();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 842, GqlParser.RULE_comparisonOperator);
		try {
			this.state = 3810;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 384, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3804;
				this.equals();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3805;
				this.notEquals();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3806;
				this.lessThen();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3807;
				this.greaterThan();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3808;
				this.lessThanOrEquals();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3809;
				this.graterThanOrEquals();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public equals(): EqualsContext {
		let localctx: EqualsContext = new EqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 844, GqlParser.RULE_equals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3812;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public notEquals(): NotEqualsContext {
		let localctx: NotEqualsContext = new NotEqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 846, GqlParser.RULE_notEquals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3814;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 3815;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lessThen(): LessThenContext {
		let localctx: LessThenContext = new LessThenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 848, GqlParser.RULE_lessThen);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3817;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public greaterThan(): GreaterThanContext {
		let localctx: GreaterThanContext = new GreaterThanContext(this, this._ctx, this.state);
		this.enterRule(localctx, 850, GqlParser.RULE_greaterThan);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3819;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lessThanOrEquals(): LessThanOrEqualsContext {
		let localctx: LessThanOrEqualsContext = new LessThanOrEqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 852, GqlParser.RULE_lessThanOrEquals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3821;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 3822;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graterThanOrEquals(): GraterThanOrEqualsContext {
		let localctx: GraterThanOrEqualsContext = new GraterThanOrEqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 854, GqlParser.RULE_graterThanOrEquals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3824;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			this.state = 3825;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonPredicand(): ComparisonPredicandContext {
		let localctx: ComparisonPredicandContext = new ComparisonPredicandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 856, GqlParser.RULE_comparisonPredicand);
		try {
			this.state = 3829;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 385, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3827;
				this.commonValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3828;
				this.booleanPredicand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public existsPredicate(): ExistsPredicateContext {
		let localctx: ExistsPredicateContext = new ExistsPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 858, GqlParser.RULE_existsPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3831;
			this.match(GqlParser.EXISTS);
			this.state = 3849;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 386, this._ctx) ) {
			case 1:
				{
				this.state = 3832;
				this.match(GqlParser.LEFT_BRACE);
				this.state = 3833;
				this.graphPattern();
				this.state = 3834;
				this.match(GqlParser.RIGHT_BRACE);
				}
				break;
			case 2:
				{
				this.state = 3836;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3837;
				this.graphPattern();
				this.state = 3838;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 3:
				{
				this.state = 3840;
				this.match(GqlParser.LEFT_BRACE);
				this.state = 3841;
				this.matchStatmentBlock();
				this.state = 3842;
				this.match(GqlParser.RIGHT_BRACE);
				}
				break;
			case 4:
				{
				this.state = 3844;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3845;
				this.matchStatmentBlock();
				this.state = 3846;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 5:
				{
				this.state = 3848;
				this.nestedQuerySpec();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullPredicate(): NullPredicateContext {
		let localctx: NullPredicateContext = new NullPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 860, GqlParser.RULE_nullPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3851;
			this.valueExprPrimary();
			this.state = 3852;
			this.nullPredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullPredicatePart2(): NullPredicatePart2Context {
		let localctx: NullPredicatePart2Context = new NullPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 862, GqlParser.RULE_nullPredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3854;
			this.match(GqlParser.IS);
			this.state = 3856;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 3855;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 3858;
			this.match(GqlParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueTypePredicate(): ValueTypePredicateContext {
		let localctx: ValueTypePredicateContext = new ValueTypePredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 864, GqlParser.RULE_valueTypePredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3860;
			this.valueExprPrimary();
			this.state = 3861;
			this.valueTypePredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
		let localctx: ValueTypePredicatePart2Context = new ValueTypePredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 866, GqlParser.RULE_valueTypePredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3863;
			this.match(GqlParser.IS);
			this.state = 3865;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 3864;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 3867;
			this.typed();
			this.state = 3868;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalizedPredicate(): NormalizedPredicateContext {
		let localctx: NormalizedPredicateContext = new NormalizedPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 868, GqlParser.RULE_normalizedPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3870;
			this.stringValueExpr();
			this.state = 3871;
			this.normalizedPredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalizedPredicatePart2(): NormalizedPredicatePart2Context {
		let localctx: NormalizedPredicatePart2Context = new NormalizedPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 870, GqlParser.RULE_normalizedPredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3873;
			this.match(GqlParser.IS);
			this.state = 3875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 3874;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 3878;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 15) !== 0)) {
				{
				this.state = 3877;
				this.normalForm();
				}
			}

			this.state = 3880;
			this.match(GqlParser.NORMALIZED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public directedPredicate(): DirectedPredicateContext {
		let localctx: DirectedPredicateContext = new DirectedPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 872, GqlParser.RULE_directedPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3882;
			this.elementVarRef();
			this.state = 3883;
			this.directedPredicate();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public directedPredicatePart2(): DirectedPredicatePart2Context {
		let localctx: DirectedPredicatePart2Context = new DirectedPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 874, GqlParser.RULE_directedPredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3885;
			this.match(GqlParser.IS);
			this.state = 3887;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 3886;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 3889;
			this.match(GqlParser.DIRECTED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labeledPredicate(): LabeledPredicateContext {
		let localctx: LabeledPredicateContext = new LabeledPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 876, GqlParser.RULE_labeledPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3891;
			this.elementVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labeledPredicatePart2(): LabeledPredicatePart2Context {
		let localctx: LabeledPredicatePart2Context = new LabeledPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 878, GqlParser.RULE_labeledPredicatePart2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3893;
			this.isLabeledOrColon();
			this.state = 3894;
			this.labelExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isLabeledOrColon(): IsLabeledOrColonContext {
		let localctx: IsLabeledOrColonContext = new IsLabeledOrColonContext(this, this._ctx, this.state);
		this.enterRule(localctx, 880, GqlParser.RULE_isLabeledOrColon);
		let _la: number;
		try {
			this.state = 3902;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 167:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3896;
				this.match(GqlParser.IS);
				this.state = 3898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===191) {
					{
					this.state = 3897;
					this.match(GqlParser.NOT);
					}
				}

				this.state = 3900;
				this.match(GqlParser.LABELED);
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3901;
				this.match(GqlParser.COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourceOrDestinationPredicate(): SourceOrDestinationPredicateContext {
		let localctx: SourceOrDestinationPredicateContext = new SourceOrDestinationPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 882, GqlParser.RULE_sourceOrDestinationPredicate);
		try {
			this.state = 3910;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 394, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3904;
				this.nodeRef();
				this.state = 3905;
				this.sourcePredicatePart2();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3907;
				this.nodeRef();
				this.state = 3908;
				this.destinationPredicatePart2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeRef(): NodeRefContext {
		let localctx: NodeRefContext = new NodeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 884, GqlParser.RULE_nodeRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3912;
			this.elementVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourcePredicatePart2(): SourcePredicatePart2Context {
		let localctx: SourcePredicatePart2Context = new SourcePredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 886, GqlParser.RULE_sourcePredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3914;
			this.match(GqlParser.IS);
			this.state = 3916;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 3915;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 3918;
			this.match(GqlParser.SOURCE);
			this.state = 3919;
			this.match(GqlParser.OF);
			this.state = 3920;
			this.edgeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public destinationPredicatePart2(): DestinationPredicatePart2Context {
		let localctx: DestinationPredicatePart2Context = new DestinationPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 888, GqlParser.RULE_destinationPredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3922;
			this.match(GqlParser.IS);
			this.state = 3924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 3923;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 3926;
			this.match(GqlParser.DESTINATION);
			this.state = 3927;
			this.match(GqlParser.OF);
			this.state = 3928;
			this.edgeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeRef(): EdgeRefContext {
		let localctx: EdgeRefContext = new EdgeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 890, GqlParser.RULE_edgeRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3930;
			this.elementVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public allDifferentPredicate(): AllDifferentPredicateContext {
		let localctx: AllDifferentPredicateContext = new AllDifferentPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 892, GqlParser.RULE_allDifferentPredicate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3932;
			this.match(GqlParser.ALL_DIFFERENT);
			this.state = 3933;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3934;
			this.elementVarRef();
			this.state = 3937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3935;
				this.match(GqlParser.COMMA);
				this.state = 3936;
				this.elementVarRef();
				}
				}
				this.state = 3939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			this.state = 3941;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public samePredicate(): SamePredicateContext {
		let localctx: SamePredicateContext = new SamePredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 894, GqlParser.RULE_samePredicate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3943;
			this.match(GqlParser.SAME);
			this.state = 3944;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3945;
			this.elementVarRef();
			this.state = 3948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3946;
				this.match(GqlParser.COMMA);
				this.state = 3947;
				this.elementVarRef();
				}
				}
				this.state = 3950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			this.state = 3952;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyExistsPredicate(): PropertyExistsPredicateContext {
		let localctx: PropertyExistsPredicateContext = new PropertyExistsPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 896, GqlParser.RULE_propertyExistsPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3954;
			this.match(GqlParser.PROPERTY_EXISTS);
			this.state = 3955;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3956;
			this.elementVarRef();
			this.state = 3957;
			this.match(GqlParser.COMMA);
			this.state = 3958;
			this.propertyName();
			this.state = 3959;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueSpec(): ValueSpecContext {
		let localctx: ValueSpecContext = new ValueSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 898, GqlParser.RULE_valueSpec);
		try {
			this.state = 3963;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 367:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3961;
				this.literal();
				}
				break;
			case 35:
			case 108:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3962;
				this.parameterValueSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedValueSpec(): UnsignedValueSpecContext {
		let localctx: UnsignedValueSpecContext = new UnsignedValueSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 900, GqlParser.RULE_unsignedValueSpec);
		try {
			this.state = 3967;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3965;
				this.unsignedLiteral();
				}
				break;
			case 35:
			case 108:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3966;
				this.parameterValueSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedIntSpec(): UnsignedIntSpecContext {
		let localctx: UnsignedIntSpecContext = new UnsignedIntSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 902, GqlParser.RULE_unsignedIntSpec);
		try {
			this.state = 3971;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 379:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3969;
				this.match(GqlParser.UNSIGNED_INT);
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3970;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameterValueSpec(): ParameterValueSpecContext {
		let localctx: ParameterValueSpecContext = new ParameterValueSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 904, GqlParser.RULE_parameterValueSpec);
		try {
			this.state = 3975;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3973;
				this.parameter();
				}
				break;
			case 108:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3974;
				this.predefinedParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedParameter(): PredefinedParameterContext {
		let localctx: PredefinedParameterContext = new PredefinedParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 906, GqlParser.RULE_predefinedParameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3977;
			this.match(GqlParser.CURRENT_USER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueExpr(): ValueExprContext {
		let localctx: ValueExprContext = new ValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 908, GqlParser.RULE_valueExpr);
		try {
			this.state = 3981;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 403, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3979;
				this.commonValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3980;
				this.booleanValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonValueExpr(): CommonValueExprContext {
		let localctx: CommonValueExprContext = new CommonValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 910, GqlParser.RULE_commonValueExpr);
		try {
			this.state = 3992;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3983;
				this.numericValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3984;
				this.stringValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3985;
				this.dateTimeValueExpr(0);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3986;
				this.durationValueExpr(0);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3987;
				this.listValueExpr();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3988;
				this.recordValueExpr();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3989;
				this.pathValueExpr();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3990;
				this.refValueExpr();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3991;
				this.commonValuePropertiesGroup();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonValuePropertiesGroup(): CommonValuePropertiesGroupContext {
		let localctx: CommonValuePropertiesGroupContext = new CommonValuePropertiesGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 912, GqlParser.RULE_commonValuePropertiesGroup);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			this.state = 3994;
			this.propertyName();
			this.state = 3997;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3995;
					this.match(GqlParser.PERIOD);
					this.state = 3996;
					this.propertyName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3999;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 405, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public refValueExpr(): RefValueExprContext {
		let localctx: RefValueExprContext = new RefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 914, GqlParser.RULE_refValueExpr);
		try {
			this.state = 4005;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 406, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4001;
				this.graphRefValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4002;
				this.bindingTableRefValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4003;
				this.nodeRefValueExpr();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4004;
				this.edgeRefValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphRefValueExpr(): GraphRefValueExprContext {
		let localctx: GraphRefValueExprContext = new GraphRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 916, GqlParser.RULE_graphRefValueExpr);
		let _la: number;
		try {
			this.state = 4013;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4008;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 4007;
					this.match(GqlParser.PROPERTY);
					}
				}

				this.state = 4010;
				this.match(GqlParser.GRAPH);
				this.state = 4011;
				this.graphExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4012;
				this.valueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableRefValueExpr(): BindingTableRefValueExprContext {
		let localctx: BindingTableRefValueExprContext = new BindingTableRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 918, GqlParser.RULE_bindingTableRefValueExpr);
		let _la: number;
		try {
			this.state = 4021;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 312:
			case 347:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===312) {
					{
					this.state = 4015;
					this.match(GqlParser.BINDING);
					}
				}

				this.state = 4018;
				this.match(GqlParser.TABLE);
				this.state = 4019;
				this.bindingTableExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4020;
				this.valueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeRefValueExpr(): NodeRefValueExprContext {
		let localctx: NodeRefValueExprContext = new NodeRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 920, GqlParser.RULE_nodeRefValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4023;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		let localctx: EdgeRefValueExprContext = new EdgeRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 922, GqlParser.RULE_edgeRefValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4025;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordValueExpr(): RecordValueExprContext {
		let localctx: RecordValueExprContext = new RecordValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 924, GqlParser.RULE_recordValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4027;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public aggregatingValueExpr(): AggregatingValueExprContext {
		let localctx: AggregatingValueExprContext = new AggregatingValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 926, GqlParser.RULE_aggregatingValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4029;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanValueExpr(): BooleanValueExprContext {
		let localctx: BooleanValueExprContext = new BooleanValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 928, GqlParser.RULE_booleanValueExpr);
		try {
			this.state = 4040;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 411, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4031;
				this.booleanTerm(0);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4032;
				this.booleanTerm(0);
				this.state = 4033;
				this.match(GqlParser.OR);
				this.state = 4034;
				this.booleanValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4036;
				this.booleanTerm(0);
				this.state = 4037;
				this.match(GqlParser.XOR);
				this.state = 4038;
				this.booleanValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public booleanTerm(): BooleanTermContext;
	public booleanTerm(_p: number): BooleanTermContext;
	// @RuleVersion(0)
	public booleanTerm(_p?: number): BooleanTermContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: BooleanTermContext = new BooleanTermContext(this, this._ctx, _parentState);
		let _prevctx: BooleanTermContext = localctx;
		let _startState: number = 930;
		this.enterRecursionRule(localctx, 930, GqlParser.RULE_booleanTerm, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			this.state = 4043;
			this.booleanFactor();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 4050;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 412, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new BooleanTermContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_booleanTerm);
					this.state = 4045;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 4046;
					this.match(GqlParser.AND);
					this.state = 4047;
					this.booleanFactor();
					}
					}
				}
				this.state = 4052;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 412, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanFactor(): BooleanFactorContext {
		let localctx: BooleanFactorContext = new BooleanFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 932, GqlParser.RULE_booleanFactor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4054;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 4053;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 4056;
			this.booleanTest();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanTest(): BooleanTestContext {
		let localctx: BooleanTestContext = new BooleanTestContext(this, this._ctx, this.state);
		this.enterRule(localctx, 934, GqlParser.RULE_booleanTest);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4058;
			this.booleanPrimary();
			this.state = 4064;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 415, this._ctx) ) {
			case 1:
				{
				this.state = 4059;
				this.match(GqlParser.IS);
				this.state = 4061;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===191) {
					{
					this.state = 4060;
					this.match(GqlParser.NOT);
					}
				}

				this.state = 4063;
				this.truthValue();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public truthValue(): TruthValueContext {
		let localctx: TruthValueContext = new TruthValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 936, GqlParser.RULE_truthValue);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4066;
			_la = this._input.LA(1);
			if(!(_la===130 || _la===247 || _la===258)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanPrimary(): BooleanPrimaryContext {
		let localctx: BooleanPrimaryContext = new BooleanPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 938, GqlParser.RULE_booleanPrimary);
		try {
			this.state = 4070;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 416, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4068;
				this.predicate();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4069;
				this.booleanPredicand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanPredicand(): BooleanPredicandContext {
		let localctx: BooleanPredicandContext = new BooleanPredicandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 940, GqlParser.RULE_booleanPredicand);
		try {
			this.state = 4074;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4072;
				this.paranthisedBooleanValueExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4073;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public paranthisedBooleanValueExpr(): ParanthisedBooleanValueExprContext {
		let localctx: ParanthisedBooleanValueExprContext = new ParanthisedBooleanValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 942, GqlParser.RULE_paranthisedBooleanValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4076;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4077;
			this.booleanValueExpr();
			this.state = 4078;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExpr(): NumericValueExprContext {
		let localctx: NumericValueExprContext = new NumericValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 944, GqlParser.RULE_numericValueExpr);
		try {
			this.state = 4089;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 418, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4080;
				this.term();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4081;
				this.term();
				this.state = 4082;
				this.match(GqlParser.PLUS);
				this.state = 4083;
				this.numericValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4085;
				this.term();
				this.state = 4086;
				this.match(GqlParser.MINUS);
				this.state = 4087;
				this.numericValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public term(): TermContext {
		let localctx: TermContext = new TermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 946, GqlParser.RULE_term);
		try {
			this.state = 4100;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4091;
				this.factor();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4092;
				this.factor();
				this.state = 4093;
				this.match(GqlParser.ASTERISK);
				this.state = 4094;
				this.term();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4096;
				this.factor();
				this.state = 4097;
				this.match(GqlParser.SOLIDUS);
				this.state = 4098;
				this.term();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public factor(): FactorContext {
		let localctx: FactorContext = new FactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 948, GqlParser.RULE_factor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 4102;
				this.match(GqlParser.SIGN);
				}
			}

			this.state = 4105;
			this.numericPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericPrimary(): NumericPrimaryContext {
		let localctx: NumericPrimaryContext = new NumericPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 950, GqlParser.RULE_numericPrimary);
		try {
			this.state = 4109;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4107;
				this.valueExprPrimary();
				}
				break;
			case 60:
			case 61:
			case 70:
			case 72:
			case 82:
			case 87:
			case 88:
			case 89:
			case 90:
			case 97:
			case 98:
			case 99:
			case 114:
			case 129:
			case 139:
			case 173:
			case 179:
			case 186:
			case 195:
			case 206:
			case 210:
			case 213:
			case 229:
			case 230:
			case 234:
			case 240:
			case 241:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4108;
				this.numericValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueExprPrimary(): ValueExprPrimaryContext {
		let localctx: ValueExprPrimaryContext = new ValueExprPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 952, GqlParser.RULE_valueExprPrimary);
		try {
			this.state = 4113;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4111;
				this.parenthesizedValueExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4112;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedValueExpr(): ParenthesizedValueExprContext {
		let localctx: ParenthesizedValueExprContext = new ParenthesizedValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 954, GqlParser.RULE_parenthesizedValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4115;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4116;
			this.valueExpr();
			this.state = 4117;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		let localctx: NonParenthesizedValueExprPrimaryContext = new NonParenthesizedValueExprPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 956, GqlParser.RULE_nonParenthesizedValueExprPrimary);
		try {
			this.state = 4121;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4119;
				this.nonParenthesizedValueExprPrimarySpecialCase();
				}
				break;
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4120;
				this.bindingVarRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonParenthesizedValueExprPrimarySpecialCase(): NonParenthesizedValueExprPrimarySpecialCaseContext {
		let localctx: NonParenthesizedValueExprPrimarySpecialCaseContext = new NonParenthesizedValueExprPrimarySpecialCaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 958, GqlParser.RULE_nonParenthesizedValueExprPrimarySpecialCase);
		try {
			this.state = 4131;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 424, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4123;
				this.unsignedValueSpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4124;
				this.aggregateFunction();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4125;
				this.collectionValueConstructor();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4126;
				this.valueQueryExpr();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4127;
				this.caseExpr();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4128;
				this.letValueExpr();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4129;
				this.castSpec();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4130;
				this.elementIdFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public collectionValueConstructor(): CollectionValueConstructorContext {
		let localctx: CollectionValueConstructorContext = new CollectionValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 960, GqlParser.RULE_collectionValueConstructor);
		try {
			this.state = 4136;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 42:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4133;
				this.listValueConstructor();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4134;
				this.recordValueConstructor();
				}
				break;
			case 205:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4135;
				this.pathValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueFunction(): NumericValueFunctionContext {
		let localctx: NumericValueFunctionContext = new NumericValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 962, GqlParser.RULE_numericValueFunction);
		try {
			this.state = 4148;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4138;
				this.lengthExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4139;
				this.absoluteValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4140;
				this.modulusExpr();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4141;
				this.trigonometricFunction();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4142;
				this.logarithmFunction();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4143;
				this.exponentialFunction();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4144;
				this.powerFunction();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4145;
				this.squareRootFunciton();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4146;
				this.floorFunction();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 4147;
				this.ceilingFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lengthExpr(): LengthExprContext {
		let localctx: LengthExprContext = new LengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 964, GqlParser.RULE_lengthExpr);
		try {
			this.state = 4153;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 89:
			case 90:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4150;
				this.charLengthExpr();
				}
				break;
			case 82:
			case 195:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4151;
				this.byteLengthExpr();
				}
				break;
			case 206:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4152;
				this.pathLengthExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charLengthExpr(): CharLengthExprContext {
		let localctx: CharLengthExprContext = new CharLengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 966, GqlParser.RULE_charLengthExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4155;
			_la = this._input.LA(1);
			if(!(_la===89 || _la===90)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4156;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4157;
			this.charStringValueExpr();
			this.state = 4158;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteLengthExpr(): ByteLengthExprContext {
		let localctx: ByteLengthExprContext = new ByteLengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 968, GqlParser.RULE_byteLengthExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4160;
			_la = this._input.LA(1);
			if(!(_la===82 || _la===195)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4161;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4162;
			this.byteStringValueExpr();
			this.state = 4163;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathLengthExpr(): PathLengthExprContext {
		let localctx: PathLengthExprContext = new PathLengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 970, GqlParser.RULE_pathLengthExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4165;
			this.match(GqlParser.PATH_LENGTH);
			this.state = 4166;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4167;
			this.pathValueExpr();
			this.state = 4168;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public absoluteValueExpr(): AbsoluteValueExprContext {
		let localctx: AbsoluteValueExprContext = new AbsoluteValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 972, GqlParser.RULE_absoluteValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4170;
			this.match(GqlParser.ABS);
			this.state = 4171;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4172;
			this.numericValueExpr();
			this.state = 4173;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public modulusExpr(): ModulusExprContext {
		let localctx: ModulusExprContext = new ModulusExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 974, GqlParser.RULE_modulusExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4175;
			this.match(GqlParser.MOD);
			this.state = 4176;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4177;
			this.numericValueExprDividen();
			this.state = 4178;
			this.match(GqlParser.COMMA);
			this.state = 4179;
			this.numericValueExprDivisor();
			this.state = 4180;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprDividen(): NumericValueExprDividenContext {
		let localctx: NumericValueExprDividenContext = new NumericValueExprDividenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 976, GqlParser.RULE_numericValueExprDividen);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4182;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprDivisor(): NumericValueExprDivisorContext {
		let localctx: NumericValueExprDivisorContext = new NumericValueExprDivisorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 978, GqlParser.RULE_numericValueExprDivisor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4184;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trigonometricFunction(): TrigonometricFunctionContext {
		let localctx: TrigonometricFunctionContext = new TrigonometricFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 980, GqlParser.RULE_trigonometricFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4186;
			this.trigonometricFunctionName();
			this.state = 4187;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4188;
			this.numericValueExpr();
			this.state = 4189;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trigonometricFunctionName(): TrigonometricFunctionNameContext {
		let localctx: TrigonometricFunctionNameContext = new TrigonometricFunctionNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 982, GqlParser.RULE_trigonometricFunctionName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4191;
			_la = this._input.LA(1);
			if(!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & 2561) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 131079) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & 402849793) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logarithmFunction(): LogarithmFunctionContext {
		let localctx: LogarithmFunctionContext = new LogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 984, GqlParser.RULE_logarithmFunction);
		try {
			this.state = 4196;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 186:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4193;
				this.generalLogarithmFunction();
				}
				break;
			case 179:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4194;
				this.commonLogarithmFunction();
				}
				break;
			case 173:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4195;
				this.naturalLogarithmFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLogarithmFunction(): GeneralLogarithmFunctionContext {
		let localctx: GeneralLogarithmFunctionContext = new GeneralLogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 986, GqlParser.RULE_generalLogarithmFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4198;
			this.match(GqlParser.MOD);
			this.state = 4199;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4200;
			this.generalLogarithmBase();
			this.state = 4201;
			this.match(GqlParser.COMMA);
			this.state = 4202;
			this.generalLogarithmArgument();
			this.state = 4203;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLogarithmBase(): GeneralLogarithmBaseContext {
		let localctx: GeneralLogarithmBaseContext = new GeneralLogarithmBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 988, GqlParser.RULE_generalLogarithmBase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4205;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLogarithmArgument(): GeneralLogarithmArgumentContext {
		let localctx: GeneralLogarithmArgumentContext = new GeneralLogarithmArgumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 990, GqlParser.RULE_generalLogarithmArgument);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4207;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonLogarithmFunction(): CommonLogarithmFunctionContext {
		let localctx: CommonLogarithmFunctionContext = new CommonLogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 992, GqlParser.RULE_commonLogarithmFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4209;
			this.match(GqlParser.LOG10);
			this.state = 4210;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4211;
			this.numericValueExpr();
			this.state = 4212;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public naturalLogarithmFunction(): NaturalLogarithmFunctionContext {
		let localctx: NaturalLogarithmFunctionContext = new NaturalLogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 994, GqlParser.RULE_naturalLogarithmFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4214;
			this.match(GqlParser.LN);
			this.state = 4215;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4216;
			this.numericValueExpr();
			this.state = 4217;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exponentialFunction(): ExponentialFunctionContext {
		let localctx: ExponentialFunctionContext = new ExponentialFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 996, GqlParser.RULE_exponentialFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4219;
			this.match(GqlParser.EXP);
			this.state = 4220;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4221;
			this.numericValueExpr();
			this.state = 4222;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public powerFunction(): PowerFunctionContext {
		let localctx: PowerFunctionContext = new PowerFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 998, GqlParser.RULE_powerFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4224;
			this.match(GqlParser.POWER);
			this.state = 4225;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4226;
			this.numericValueExprBase();
			this.state = 4227;
			this.match(GqlParser.COMMA);
			this.state = 4228;
			this.numericValueExprExponent();
			this.state = 4229;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprBase(): NumericValueExprBaseContext {
		let localctx: NumericValueExprBaseContext = new NumericValueExprBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1000, GqlParser.RULE_numericValueExprBase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4231;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprExponent(): NumericValueExprExponentContext {
		let localctx: NumericValueExprExponentContext = new NumericValueExprExponentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1002, GqlParser.RULE_numericValueExprExponent);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4233;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public squareRootFunciton(): SquareRootFuncitonContext {
		let localctx: SquareRootFuncitonContext = new SquareRootFuncitonContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1004, GqlParser.RULE_squareRootFunciton);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4235;
			this.match(GqlParser.SQRT);
			this.state = 4236;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4237;
			this.numericValueExpr();
			this.state = 4238;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public floorFunction(): FloorFunctionContext {
		let localctx: FloorFunctionContext = new FloorFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1006, GqlParser.RULE_floorFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4240;
			this.match(GqlParser.FLOOR);
			this.state = 4241;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4242;
			this.numericValueExpr();
			this.state = 4243;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ceilingFunction(): CeilingFunctionContext {
		let localctx: CeilingFunctionContext = new CeilingFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1008, GqlParser.RULE_ceilingFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4245;
			_la = this._input.LA(1);
			if(!(_la===87 || _la===88)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4246;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4247;
			this.numericValueExpr();
			this.state = 4248;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringValueExpr(): StringValueExprContext {
		let localctx: StringValueExprContext = new StringValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1010, GqlParser.RULE_stringValueExpr);
		try {
			this.state = 4252;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 429, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4250;
				this.charStringValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4251;
				this.byteStringValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringValueExpr(): CharStringValueExprContext {
		let localctx: CharStringValueExprContext = new CharStringValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1012, GqlParser.RULE_charStringValueExpr);
		try {
			this.state = 4256;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 430, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4254;
				this.charStringConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4255;
				this.charStringFactor();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringConcatenation(): CharStringConcatenationContext {
		let localctx: CharStringConcatenationContext = new CharStringConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1014, GqlParser.RULE_charStringConcatenation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4258;
			this.charStringFactor();
			this.state = 4259;
			this.match(GqlParser.CONCATENATION);
			this.state = 4260;
			this.charStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringFactor(): CharStringFactorContext {
		let localctx: CharStringFactorContext = new CharStringFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1016, GqlParser.RULE_charStringFactor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4262;
			this.charStringPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringPrimary(): CharStringPrimaryContext {
		let localctx: CharStringPrimaryContext = new CharStringPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1018, GqlParser.RULE_charStringPrimary);
		try {
			this.state = 4266;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4264;
				this.valueExprPrimary();
				}
				break;
			case 80:
			case 180:
			case 181:
			case 190:
			case 221:
			case 246:
			case 260:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4265;
				this.stringValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringValueExpr(): ByteStringValueExprContext {
		let localctx: ByteStringValueExprContext = new ByteStringValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1020, GqlParser.RULE_byteStringValueExpr);
		try {
			this.state = 4270;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 432, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4268;
				this.byteStringConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4269;
				this.byteStringFactor();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringFactor(): ByteStringFactorContext {
		let localctx: ByteStringFactorContext = new ByteStringFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1022, GqlParser.RULE_byteStringFactor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4272;
			this.byteStringPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringPrimary(): ByteStringPrimaryContext {
		let localctx: ByteStringPrimaryContext = new ByteStringPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1024, GqlParser.RULE_byteStringPrimary);
		try {
			this.state = 4276;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4274;
				this.valueExprPrimary();
				}
				break;
			case 80:
			case 180:
			case 181:
			case 190:
			case 221:
			case 246:
			case 260:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4275;
				this.stringValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringConcatenation(): ByteStringConcatenationContext {
		let localctx: ByteStringConcatenationContext = new ByteStringConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1026, GqlParser.RULE_byteStringConcatenation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4278;
			this.byteStringFactor();
			this.state = 4279;
			this.match(GqlParser.CONCATENATION);
			this.state = 4280;
			this.byteStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringValueFunction(): StringValueFunctionContext {
		let localctx: StringValueFunctionContext = new StringValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1028, GqlParser.RULE_stringValueFunction);
		try {
			this.state = 4284;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 434, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4282;
				this.charStringFunction();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4283;
				this.byteStringFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringFunction(): CharStringFunctionContext {
		let localctx: CharStringFunctionContext = new CharStringFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1030, GqlParser.RULE_charStringFunction);
		try {
			this.state = 4289;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 180:
			case 260:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4286;
				this.foldFunction();
				}
				break;
			case 80:
			case 181:
			case 221:
			case 246:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4287;
				this.trimFunction();
				}
				break;
			case 190:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4288;
				this.normalizeFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public foldFunction(): FoldFunctionContext {
		let localctx: FoldFunctionContext = new FoldFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1032, GqlParser.RULE_foldFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4291;
			_la = this._input.LA(1);
			if(!(_la===180 || _la===260)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4292;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4293;
			this.charStringValueExpr();
			this.state = 4294;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimFunction(): TrimFunctionContext {
		let localctx: TrimFunctionContext = new TrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1034, GqlParser.RULE_trimFunction);
		try {
			this.state = 4298;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 246:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4296;
				this.singleCharTrimFunction();
				}
				break;
			case 80:
			case 181:
			case 221:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4297;
				this.multiCharTrimFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleCharTrimFunction(): SingleCharTrimFunctionContext {
		let localctx: SingleCharTrimFunctionContext = new SingleCharTrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1036, GqlParser.RULE_singleCharTrimFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4300;
			this.match(GqlParser.TRIM);
			this.state = 4301;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4302;
			this.trimOperands();
			this.state = 4303;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public multiCharTrimFunction(): MultiCharTrimFunctionContext {
		let localctx: MultiCharTrimFunctionContext = new MultiCharTrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1038, GqlParser.RULE_multiCharTrimFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4305;
			_la = this._input.LA(1);
			if(!(_la===80 || _la===181 || _la===221)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4306;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4307;
			this.trimSource();
			{
			this.state = 4308;
			this.match(GqlParser.COMMA);
			this.state = 4309;
			this.trimCharString();
			}
			this.state = 4311;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimOperands(): TrimOperandsContext {
		let localctx: TrimOperandsContext = new TrimOperandsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1040, GqlParser.RULE_trimOperands);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4320;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 439, this._ctx) ) {
			case 1:
				{
				this.state = 4314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===79 || _la===168 || _la===245) {
					{
					this.state = 4313;
					this.trimSpec();
					}
				}

				this.state = 4317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 137375873) !== 0) || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 4276231) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & 44095489) !== 0) || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 2147550233) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 77596357) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 1077682177) !== 0)) {
					{
					this.state = 4316;
					this.trimCharString();
					}
				}

				this.state = 4319;
				this.match(GqlParser.FROM);
				}
				break;
			}
			this.state = 4322;
			this.trimSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimSource(): TrimSourceContext {
		let localctx: TrimSourceContext = new TrimSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1042, GqlParser.RULE_trimSource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4324;
			this.charStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimSpec(): TrimSpecContext {
		let localctx: TrimSpecContext = new TrimSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1044, GqlParser.RULE_trimSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4326;
			_la = this._input.LA(1);
			if(!(_la===79 || _la===168 || _la===245)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimCharString(): TrimCharStringContext {
		let localctx: TrimCharStringContext = new TrimCharStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1046, GqlParser.RULE_trimCharString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4328;
			this.charStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalizeFunction(): NormalizeFunctionContext {
		let localctx: NormalizeFunctionContext = new NormalizeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1048, GqlParser.RULE_normalizeFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4330;
			this.match(GqlParser.NORMALIZE);
			this.state = 4331;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4332;
			this.charStringValueExpr();
			{
			this.state = 4333;
			this.match(GqlParser.COMMA);
			this.state = 4334;
			this.normalForm();
			}
			this.state = 4336;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalForm(): NormalFormContext {
		let localctx: NormalFormContext = new NormalFormContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1050, GqlParser.RULE_normalForm);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4338;
			_la = this._input.LA(1);
			if(!(((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 15) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringFunction(): ByteStringFunctionContext {
		let localctx: ByteStringFunctionContext = new ByteStringFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1052, GqlParser.RULE_byteStringFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4340;
			this.byteStrinTrimFunction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStrinTrimFunction(): ByteStrinTrimFunctionContext {
		let localctx: ByteStrinTrimFunctionContext = new ByteStrinTrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1054, GqlParser.RULE_byteStrinTrimFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4342;
			this.match(GqlParser.TRIM);
			this.state = 4343;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4344;
			this.byteStringTrimOperands();
			this.state = 4345;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringTrimOperands(): ByteStringTrimOperandsContext {
		let localctx: ByteStringTrimOperandsContext = new ByteStringTrimOperandsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1056, GqlParser.RULE_byteStringTrimOperands);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4354;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 442, this._ctx) ) {
			case 1:
				{
				this.state = 4348;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===79 || _la===168 || _la===245) {
					{
					this.state = 4347;
					this.trimSpec();
					}
				}

				this.state = 4351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 137375873) !== 0) || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 4276231) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & 44095489) !== 0) || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 2147550233) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 77596357) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 1077682177) !== 0)) {
					{
					this.state = 4350;
					this.trimByteString();
					}
				}

				this.state = 4353;
				this.match(GqlParser.FROM);
				}
				break;
			}
			this.state = 4356;
			this.byteStringTrimSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringTrimSource(): ByteStringTrimSourceContext {
		let localctx: ByteStringTrimSourceContext = new ByteStringTrimSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1058, GqlParser.RULE_byteStringTrimSource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4358;
			this.byteStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimByteString(): TrimByteStringContext {
		let localctx: TrimByteStringContext = new TrimByteStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1060, GqlParser.RULE_trimByteString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4360;
			this.byteStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringLength(): StringLengthContext {
		let localctx: StringLengthContext = new StringLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1062, GqlParser.RULE_stringLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4362;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public dateTimeValueExpr(): DateTimeValueExprContext;
	public dateTimeValueExpr(_p: number): DateTimeValueExprContext;
	// @RuleVersion(0)
	public dateTimeValueExpr(_p?: number): DateTimeValueExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: DateTimeValueExprContext = new DateTimeValueExprContext(this, this._ctx, _parentState);
		let _prevctx: DateTimeValueExprContext = localctx;
		let _startState: number = 1064;
		this.enterRecursionRule(localctx, 1064, GqlParser.RULE_dateTimeValueExpr, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4370;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 443, this._ctx) ) {
			case 1:
				{
				this.state = 4365;
				this.dateTimeTerm();
				}
				break;
			case 2:
				{
				this.state = 4366;
				this.durationValueExpr(0);
				this.state = 4367;
				this.match(GqlParser.PLUS);
				this.state = 4368;
				this.dateTimeTerm();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 4380;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 445, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 4378;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 444, this._ctx) ) {
					case 1:
						{
						localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_dateTimeValueExpr);
						this.state = 4372;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 4373;
						this.match(GqlParser.PLUS);
						this.state = 4374;
						this.durationTerm(0);
						}
						break;
					case 2:
						{
						localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_dateTimeValueExpr);
						this.state = 4375;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 4376;
						this.match(GqlParser.MINUS);
						this.state = 4377;
						this.durationTerm(0);
						}
						break;
					}
					}
				}
				this.state = 4382;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 445, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeTerm(): DateTimeTermContext {
		let localctx: DateTimeTermContext = new DateTimeTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1066, GqlParser.RULE_dateTimeTerm);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4383;
			this.dateTimeFactor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeFactor(): DateTimeFactorContext {
		let localctx: DateTimeFactorContext = new DateTimeFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1068, GqlParser.RULE_dateTimeFactor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4385;
			this.dateTimePrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimePrimary(): DateTimePrimaryContext {
		let localctx: DateTimePrimaryContext = new DateTimePrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1070, GqlParser.RULE_dateTimePrimary);
		try {
			this.state = 4389;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 446, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4387;
				this.valueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4388;
				this.dateTimeValueFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeValueFunction(): DateTimeValueFunctionContext {
		let localctx: DateTimeValueFunctionContext = new DateTimeValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1072, GqlParser.RULE_dateTimeValueFunction);
		try {
			this.state = 4396;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 102:
			case 109:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4391;
				this.dateFunction();
				}
				break;
			case 106:
			case 275:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4392;
				this.timeFunction();
				}
				break;
			case 107:
			case 274:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4393;
				this.dateTimeFunction();
				}
				break;
			case 176:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4394;
				this.localTimeFunction();
				}
				break;
			case 175:
			case 177:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4395;
				this.localDatetimeFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateFunction(): DateFunctionContext {
		let localctx: DateFunctionContext = new DateFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1074, GqlParser.RULE_dateFunction);
		let _la: number;
		try {
			this.state = 4405;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 102:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4398;
				this.match(GqlParser.CURRENT_DATE);
				}
				break;
			case 109:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4399;
				this.match(GqlParser.DATE);
				this.state = 4400;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 4401;
					this.dateFunctionParameters();
					}
				}

				this.state = 4404;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeFunction(): TimeFunctionContext {
		let localctx: TimeFunctionContext = new TimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1076, GqlParser.RULE_timeFunction);
		let _la: number;
		try {
			this.state = 4414;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 106:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4407;
				this.match(GqlParser.CURRENT_TIME);
				}
				break;
			case 275:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4408;
				this.match(GqlParser.ZONED_TIME);
				this.state = 4409;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 4410;
					this.timeFunctionParameters();
					}
				}

				this.state = 4413;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localTimeFunction(): LocalTimeFunctionContext {
		let localctx: LocalTimeFunctionContext = new LocalTimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1078, GqlParser.RULE_localTimeFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4416;
			this.match(GqlParser.LOCAL_TIME);
			this.state = 4417;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4419;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 452, this._ctx) ) {
			case 1:
				{
				this.state = 4418;
				this.timeFunctionParameters();
				}
				break;
			}
			this.state = 4422;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 453, this._ctx) ) {
			case 1:
				{
				this.state = 4421;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeFunction(): DateTimeFunctionContext {
		let localctx: DateTimeFunctionContext = new DateTimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1080, GqlParser.RULE_dateTimeFunction);
		let _la: number;
		try {
			this.state = 4431;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 107:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4424;
				this.match(GqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case 274:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4425;
				this.match(GqlParser.ZONED_DATETIME);
				this.state = 4426;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 4427;
					this.dateTimeFunctionParameters();
					}
				}

				this.state = 4430;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localDatetimeFunction(): LocalDatetimeFunctionContext {
		let localctx: LocalDatetimeFunctionContext = new LocalDatetimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1082, GqlParser.RULE_localDatetimeFunction);
		let _la: number;
		try {
			this.state = 4440;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 177:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4433;
				this.match(GqlParser.LOCAL_TIMESTAMP);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4434;
				this.match(GqlParser.LOCAL_DATETIME);
				this.state = 4435;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4437;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 4436;
					this.dateTimeFunctionParameters();
					}
				}

				this.state = 4439;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateFunctionParameters(): DateFunctionParametersContext {
		let localctx: DateFunctionParametersContext = new DateFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1084, GqlParser.RULE_dateFunctionParameters);
		try {
			this.state = 4444;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4442;
				this.dateString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4443;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeFunctionParameters(): TimeFunctionParametersContext {
		let localctx: TimeFunctionParametersContext = new TimeFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1086, GqlParser.RULE_timeFunctionParameters);
		try {
			this.state = 4448;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4446;
				this.timeString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4447;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeFunctionParameters(): DateTimeFunctionParametersContext {
		let localctx: DateTimeFunctionParametersContext = new DateTimeFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1088, GqlParser.RULE_dateTimeFunctionParameters);
		try {
			this.state = 4452;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4450;
				this.dateTimeString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4451;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public durationValueExpr(): DurationValueExprContext;
	public durationValueExpr(_p: number): DurationValueExprContext;
	// @RuleVersion(0)
	public durationValueExpr(_p?: number): DurationValueExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: DurationValueExprContext = new DurationValueExprContext(this, this._ctx, _parentState);
		let _prevctx: DurationValueExprContext = localctx;
		let _startState: number = 1090;
		this.enterRecursionRule(localctx, 1090, GqlParser.RULE_durationValueExpr, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4457;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 70:
			case 72:
			case 73:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 108:
			case 109:
			case 110:
			case 114:
			case 122:
			case 124:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 179:
			case 183:
			case 184:
			case 186:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 213:
			case 215:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				{
				this.state = 4455;
				this.durationTerm(0);
				}
				break;
			case 123:
				{
				this.state = 4456;
				this.dateTimeSubtraction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 4467;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 463, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 4465;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 462, this._ctx) ) {
					case 1:
						{
						localctx = new DurationValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpr);
						this.state = 4459;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 4460;
						this.match(GqlParser.PLUS);
						this.state = 4461;
						this.durationTerm(0);
						}
						break;
					case 2:
						{
						localctx = new DurationValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpr);
						this.state = 4462;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 4463;
						this.match(GqlParser.MINUS);
						this.state = 4464;
						this.durationTerm(0);
						}
						break;
					}
					}
				}
				this.state = 4469;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 463, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeSubtraction(): DateTimeSubtractionContext {
		let localctx: DateTimeSubtractionContext = new DateTimeSubtractionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1092, GqlParser.RULE_dateTimeSubtraction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4470;
			this.match(GqlParser.DURATION_BETWEEN);
			this.state = 4471;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4472;
			this.dateTimeSubtractionParameters();
			this.state = 4473;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeSubtractionParameters(): DateTimeSubtractionParametersContext {
		let localctx: DateTimeSubtractionParametersContext = new DateTimeSubtractionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1094, GqlParser.RULE_dateTimeSubtractionParameters);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4475;
			this.dateTimeValueExpr(0);
			this.state = 4476;
			this.match(GqlParser.COMMA);
			this.state = 4477;
			this.dateTimeValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public durationTerm(): DurationTermContext;
	public durationTerm(_p: number): DurationTermContext;
	// @RuleVersion(0)
	public durationTerm(_p?: number): DurationTermContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: DurationTermContext = new DurationTermContext(this, this._ctx, _parentState);
		let _prevctx: DurationTermContext = localctx;
		let _startState: number = 1096;
		this.enterRecursionRule(localctx, 1096, GqlParser.RULE_durationTerm, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4485;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 464, this._ctx) ) {
			case 1:
				{
				this.state = 4480;
				this.durationFactor();
				}
				break;
			case 2:
				{
				this.state = 4481;
				this.term();
				this.state = 4482;
				this.match(GqlParser.ASTERISK);
				this.state = 4483;
				this.durationFactor();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 4495;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 466, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 4493;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 465, this._ctx) ) {
					case 1:
						{
						localctx = new DurationTermContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
						this.state = 4487;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 4488;
						this.match(GqlParser.ASTERISK);
						this.state = 4489;
						this.factor();
						}
						break;
					case 2:
						{
						localctx = new DurationTermContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
						this.state = 4490;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 4491;
						this.match(GqlParser.SOLIDUS);
						this.state = 4492;
						this.factor();
						}
						break;
					}
					}
				}
				this.state = 4497;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 466, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationFactor(): DurationFactorContext {
		let localctx: DurationFactorContext = new DurationFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1098, GqlParser.RULE_durationFactor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4499;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 4498;
				this.match(GqlParser.SIGN);
				}
			}

			this.state = 4501;
			this.durationPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationPrimary(): DurationPrimaryContext {
		let localctx: DurationPrimaryContext = new DurationPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1100, GqlParser.RULE_durationPrimary);
		try {
			this.state = 4505;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4503;
				this.valueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4504;
				this.durationValueFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationValueExpr1(): DurationValueExpr1Context {
		let localctx: DurationValueExpr1Context = new DurationValueExpr1Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1102, GqlParser.RULE_durationValueExpr1);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4507;
			this.durationValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationTerm1(): DurationTerm1Context {
		let localctx: DurationTerm1Context = new DurationTerm1Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1104, GqlParser.RULE_durationTerm1);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4509;
			this.durationTerm(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationTerm2(): DurationTerm2Context {
		let localctx: DurationTerm2Context = new DurationTerm2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1106, GqlParser.RULE_durationTerm2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4511;
			this.durationTerm(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeValueExpr1(): DateTimeValueExpr1Context {
		let localctx: DateTimeValueExpr1Context = new DateTimeValueExpr1Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1108, GqlParser.RULE_dateTimeValueExpr1);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4513;
			this.dateTimeValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeValueExpr2(): DateTimeValueExpr2Context {
		let localctx: DateTimeValueExpr2Context = new DateTimeValueExpr2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1110, GqlParser.RULE_dateTimeValueExpr2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4515;
			this.dateTimeValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationValueFunction(): DurationValueFunctionContext {
		let localctx: DurationValueFunctionContext = new DurationValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1112, GqlParser.RULE_durationValueFunction);
		try {
			this.state = 4519;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 122:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4517;
				this.durationFunction();
				}
				break;
			case 60:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4518;
				this.durationAbsoluteValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationFunction(): DurationFunctionContext {
		let localctx: DurationFunctionContext = new DurationFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1114, GqlParser.RULE_durationFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4521;
			this.match(GqlParser.DURATION);
			this.state = 4522;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4523;
			this.durationFunctionParameters();
			this.state = 4524;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationFunctionParameters(): DurationFunctionParametersContext {
		let localctx: DurationFunctionParametersContext = new DurationFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1116, GqlParser.RULE_durationFunctionParameters);
		try {
			this.state = 4528;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4526;
				this.durationString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4527;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationAbsoluteValueFunction(): DurationAbsoluteValueFunctionContext {
		let localctx: DurationAbsoluteValueFunctionContext = new DurationAbsoluteValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1118, GqlParser.RULE_durationAbsoluteValueFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4530;
			this.match(GqlParser.ABS);
			this.state = 4531;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4532;
			this.durationValueExpr(0);
			this.state = 4533;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueExpr(): ListValueExprContext {
		let localctx: ListValueExprContext = new ListValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1120, GqlParser.RULE_listValueExpr);
		try {
			this.state = 4537;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 471, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4535;
				this.listConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4536;
				this.listPrimary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listConcatenation(): ListConcatenationContext {
		let localctx: ListConcatenationContext = new ListConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1122, GqlParser.RULE_listConcatenation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4539;
			this.listPrimary();
			this.state = 4540;
			this.match(GqlParser.CONCATENATION);
			this.state = 4541;
			this.listValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listPrimary(): ListPrimaryContext {
		let localctx: ListPrimaryContext = new ListPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1124, GqlParser.RULE_listPrimary);
		try {
			this.state = 4545;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 246:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4543;
				this.listValueFunction();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 396:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4544;
				this.valueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueFunction(): ListValueFunctionContext {
		let localctx: ListValueFunctionContext = new ListValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1126, GqlParser.RULE_listValueFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4547;
			this.trimListFunction();
			this.state = 4548;
			this.elementsFunction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimListFunction(): TrimListFunctionContext {
		let localctx: TrimListFunctionContext = new TrimListFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1128, GqlParser.RULE_trimListFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4550;
			this.match(GqlParser.TRIM);
			this.state = 4551;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4552;
			this.listValueExpr();
			this.state = 4553;
			this.match(GqlParser.COMMA);
			this.state = 4554;
			this.numericValueExpr();
			this.state = 4555;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementsFunction(): ElementsFunctionContext {
		let localctx: ElementsFunctionContext = new ElementsFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1130, GqlParser.RULE_elementsFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4557;
			this.match(GqlParser.ELEMENTS);
			this.state = 4558;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4559;
			this.pathValueExpr();
			this.state = 4560;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueConstructor(): ListValueConstructorContext {
		let localctx: ListValueConstructorContext = new ListValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1132, GqlParser.RULE_listValueConstructor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4562;
			this.listValueConstructorByEnumeration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
		let localctx: ListValueConstructorByEnumerationContext = new ListValueConstructorByEnumerationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1134, GqlParser.RULE_listValueConstructorByEnumeration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4564;
			this.match(GqlParser.LEFT_BRACKET);
			this.state = 4565;
			this.listValueTypeName();
			this.state = 4566;
			this.match(GqlParser.RIGHT_BRACKET);
			this.state = 4567;
			this.match(GqlParser.LEFT_BRACKET);
			this.state = 4568;
			this.listElementList();
			this.state = 4569;
			this.match(GqlParser.RIGHT_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listElementList(): ListElementListContext {
		let localctx: ListElementListContext = new ListElementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1136, GqlParser.RULE_listElementList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4571;
			this.listElement();
			this.state = 4576;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===34) {
				{
				{
				this.state = 4572;
				this.match(GqlParser.COMMA);
				this.state = 4573;
				this.listElement();
				}
				}
				this.state = 4578;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listElement(): ListElementContext {
		let localctx: ListElementContext = new ListElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1138, GqlParser.RULE_listElement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4579;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordValueConstructor(): RecordValueConstructorContext {
		let localctx: RecordValueConstructorContext = new RecordValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1140, GqlParser.RULE_recordValueConstructor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4582;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===215) {
				{
				this.state = 4581;
				this.match(GqlParser.RECORD);
				}
			}

			this.state = 4584;
			this.fieldsSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldsSpec(): FieldsSpecContext {
		let localctx: FieldsSpecContext = new FieldsSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1142, GqlParser.RULE_fieldsSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4586;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 4588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
				{
				this.state = 4587;
				this.fieldList();
				}
			}

			this.state = 4590;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldList(): FieldListContext {
		let localctx: FieldListContext = new FieldListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1144, GqlParser.RULE_fieldList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4592;
			this.field();
			this.state = 4597;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===34) {
				{
				{
				this.state = 4593;
				this.match(GqlParser.COMMA);
				this.state = 4594;
				this.field();
				}
				}
				this.state = 4599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public field(): FieldContext {
		let localctx: FieldContext = new FieldContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1146, GqlParser.RULE_field);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4600;
			this.fieldName();
			this.state = 4601;
			this.match(GqlParser.COLON);
			this.state = 4602;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueExpr(): PathValueExprContext {
		let localctx: PathValueExprContext = new PathValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1148, GqlParser.RULE_pathValueExpr);
		try {
			this.state = 4606;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 477, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4604;
				this.pathValueConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4605;
				this.pathValuePrimary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueConcatenation(): PathValueConcatenationContext {
		let localctx: PathValueConcatenationContext = new PathValueConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1150, GqlParser.RULE_pathValueConcatenation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4608;
			this.pathValuePrimary();
			this.state = 4609;
			this.match(GqlParser.CONCATENATION);
			this.state = 4610;
			this.pathValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValuePrimary(): PathValuePrimaryContext {
		let localctx: PathValuePrimaryContext = new PathValuePrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1152, GqlParser.RULE_pathValuePrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4612;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueConstructor(): PathValueConstructorContext {
		let localctx: PathValueConstructorContext = new PathValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1154, GqlParser.RULE_pathValueConstructor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4614;
			this.pathValueConstructorByEnumeration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueConstructorByEnumeration(): PathValueConstructorByEnumerationContext {
		let localctx: PathValueConstructorByEnumerationContext = new PathValueConstructorByEnumerationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1156, GqlParser.RULE_pathValueConstructorByEnumeration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4616;
			this.match(GqlParser.PATH);
			this.state = 4617;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4618;
			this.pathElementList();
			this.state = 4619;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathElementList(): PathElementListContext {
		let localctx: PathElementListContext = new PathElementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1158, GqlParser.RULE_pathElementList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4621;
			this.pathElementListStart();
			this.state = 4623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===34) {
				{
				this.state = 4622;
				this.pathElementListStep();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathElementListStart(): PathElementListStartContext {
		let localctx: PathElementListStartContext = new PathElementListStartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1160, GqlParser.RULE_pathElementListStart);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4625;
			this.nodeRefValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathElementListStep(): PathElementListStepContext {
		let localctx: PathElementListStepContext = new PathElementListStepContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1162, GqlParser.RULE_pathElementListStep);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4627;
			this.match(GqlParser.COMMA);
			this.state = 4628;
			this.edgeRefValueExpr();
			this.state = 4629;
			this.match(GqlParser.COMMA);
			this.state = 4630;
			this.nodeRefValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyRef(): PropertyRefContext {
		let localctx: PropertyRefContext = new PropertyRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1164, GqlParser.RULE_propertyRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4632;
			this.propertySource();
			this.state = 4633;
			this.match(GqlParser.PERIOD);
			this.state = 4634;
			this.propertyName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertySource(): PropertySourceContext {
		let localctx: PropertySourceContext = new PropertySourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1166, GqlParser.RULE_propertySource);
		try {
			this.state = 4639;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 479, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4636;
				this.nodeRefValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4637;
				this.edgeRefValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4638;
				this.recordValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueQueryExpr(): ValueQueryExprContext {
		let localctx: ValueQueryExprContext = new ValueQueryExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1168, GqlParser.RULE_valueQueryExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4641;
			this.match(GqlParser.VALUE);
			this.state = 4642;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseExpr(): CaseExprContext {
		let localctx: CaseExprContext = new CaseExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1170, GqlParser.RULE_caseExpr);
		try {
			this.state = 4646;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 93:
			case 194:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4644;
				this.caseAbbreviation();
				}
				break;
			case 85:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4645;
				this.caseSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseAbbreviation(): CaseAbbreviationContext {
		let localctx: CaseAbbreviationContext = new CaseAbbreviationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1172, GqlParser.RULE_caseAbbreviation);
		let _la: number;
		try {
			this.state = 4667;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 194:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4648;
				this.match(GqlParser.NULLIF);
				this.state = 4649;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4650;
				this.valueExpr();
				this.state = 4651;
				this.match(GqlParser.COMMA);
				this.state = 4652;
				this.valueExpr();
				this.state = 4653;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 93:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4655;
				this.match(GqlParser.COALESCE);
				this.state = 4656;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4657;
				this.valueExpr();
				this.state = 4662;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===34) {
					{
					{
					this.state = 4658;
					this.match(GqlParser.COMMA);
					this.state = 4659;
					this.valueExpr();
					}
					}
					this.state = 4664;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4665;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseSpecification(): CaseSpecificationContext {
		let localctx: CaseSpecificationContext = new CaseSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1174, GqlParser.RULE_caseSpecification);
		try {
			this.state = 4671;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 483, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4669;
				this.simpleCase();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4670;
				this.searchedCase();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleCase(): SimpleCaseContext {
		let localctx: SimpleCaseContext = new SimpleCaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1176, GqlParser.RULE_simpleCase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4673;
			this.match(GqlParser.CASE);
			this.state = 4674;
			this.caseOperand();
			this.state = 4675;
			this.simpleWhenClause();
			this.state = 4677;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===125) {
				{
				this.state = 4676;
				this.elseClause();
				}
			}

			this.state = 4679;
			this.match(GqlParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public searchedCase(): SearchedCaseContext {
		let localctx: SearchedCaseContext = new SearchedCaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1178, GqlParser.RULE_searchedCase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4681;
			this.match(GqlParser.CASE);
			this.state = 4682;
			this.searchedWhenClause();
			this.state = 4684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===125) {
				{
				this.state = 4683;
				this.elseClause();
				}
			}

			this.state = 4686;
			this.match(GqlParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleWhenClause(): SimpleWhenClauseContext {
		let localctx: SimpleWhenClauseContext = new SimpleWhenClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1180, GqlParser.RULE_simpleWhenClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4688;
			this.match(GqlParser.WHEN);
			this.state = 4689;
			this.whenOperandList();
			this.state = 4690;
			this.match(GqlParser.THEN);
			this.state = 4691;
			this.result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public searchedWhenClause(): SearchedWhenClauseContext {
		let localctx: SearchedWhenClauseContext = new SearchedWhenClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1182, GqlParser.RULE_searchedWhenClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4693;
			this.match(GqlParser.WHEN);
			this.state = 4694;
			this.searchCondition();
			this.state = 4695;
			this.match(GqlParser.THEN);
			this.state = 4696;
			this.result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elseClause(): ElseClauseContext {
		let localctx: ElseClauseContext = new ElseClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1184, GqlParser.RULE_elseClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4698;
			this.match(GqlParser.ELSE);
			this.state = 4699;
			this.result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseOperand(): CaseOperandContext {
		let localctx: CaseOperandContext = new CaseOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1186, GqlParser.RULE_caseOperand);
		try {
			this.state = 4703;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 486, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4701;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4702;
				this.elementVarRef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenOperandList(): WhenOperandListContext {
		let localctx: WhenOperandListContext = new WhenOperandListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1188, GqlParser.RULE_whenOperandList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4705;
			this.whenOperand();
			this.state = 4710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===34) {
				{
				{
				this.state = 4706;
				this.match(GqlParser.COMMA);
				this.state = 4707;
				this.whenOperand();
				}
				}
				this.state = 4712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenOperand(): WhenOperandContext {
		let localctx: WhenOperandContext = new WhenOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1190, GqlParser.RULE_whenOperand);
		try {
			this.state = 4721;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 488, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4713;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4714;
				this.comparisonPredicatePart2();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4715;
				this.nullPredicatePart2();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4716;
				this.valueTypePredicatePart2();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4717;
				this.directedPredicatePart2();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4718;
				this.labeledPredicatePart2();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4719;
				this.sourcePredicatePart2();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4720;
				this.destinationPredicatePart2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public result(): ResultContext {
		let localctx: ResultContext = new ResultContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1192, GqlParser.RULE_result);
		try {
			this.state = 4725;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 489, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4723;
				this.resultExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4724;
				this.match(GqlParser.NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resultExpr(): ResultExprContext {
		let localctx: ResultExprContext = new ResultExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1194, GqlParser.RULE_resultExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4727;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castSpec(): CastSpecContext {
		let localctx: CastSpecContext = new CastSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1196, GqlParser.RULE_castSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4729;
			this.match(GqlParser.CAST);
			this.state = 4730;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4731;
			this.castOperand();
			this.state = 4732;
			this.match(GqlParser.AS);
			this.state = 4733;
			this.castTarget();
			this.state = 4734;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castOperand(): CastOperandContext {
		let localctx: CastOperandContext = new CastOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1198, GqlParser.RULE_castOperand);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4736;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castTarget(): CastTargetContext {
		let localctx: CastTargetContext = new CastTargetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1200, GqlParser.RULE_castTarget);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4738;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementIdFunction(): ElementIdFunctionContext {
		let localctx: ElementIdFunctionContext = new ElementIdFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1202, GqlParser.RULE_elementIdFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4740;
			this.match(GqlParser.ELEMENT_ID);
			this.state = 4741;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4742;
			this.elementVarRef();
			this.state = 4743;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letValueExpr(): LetValueExprContext {
		let localctx: LetValueExprContext = new LetValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1204, GqlParser.RULE_letValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4745;
			this.match(GqlParser.LET);
			this.state = 4746;
			this.letVarDefList();
			this.state = 4747;
			this.match(GqlParser.IN);
			this.state = 4748;
			this.valueExpr();
			this.state = 4749;
			this.match(GqlParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public literal(): LiteralContext {
		let localctx: LiteralContext = new LiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1206, GqlParser.RULE_literal);
		try {
			this.state = 4753;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 367:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4751;
				this.match(GqlParser.SIGNED_NUMERIC_LITERAL);
				}
				break;
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4752;
				this.generalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLiteral(): GeneralLiteralContext {
		let localctx: GeneralLiteralContext = new GeneralLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1208, GqlParser.RULE_generalLiteral);
		try {
			this.state = 4758;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 243:
			case 244:
			case 247:
			case 258:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4755;
				this.predefinedTypeLiteral();
				}
				break;
			case 42:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4756;
				this.listLiteral();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4757;
				this.recordLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedTypeLiteral(): PredefinedTypeLiteralContext {
		let localctx: PredefinedTypeLiteralContext = new PredefinedTypeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1210, GqlParser.RULE_predefinedTypeLiteral);
		try {
			this.state = 4766;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 130:
			case 247:
			case 258:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4760;
				this.booleanLiteral();
				}
				break;
			case 56:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4761;
				this.characterStringLiteral();
				}
				break;
			case 384:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4762;
				this.match(GqlParser.BYTE_STRING_LITERAL);
				}
				break;
			case 109:
			case 110:
			case 243:
			case 244:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4763;
				this.temporalLiteral();
				}
				break;
			case 122:
			case 379:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4764;
				this.durationLiteral();
				}
				break;
			case 192:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4765;
				this.nullLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedLiteral(): UnsignedLiteralContext {
		let localctx: UnsignedLiteralContext = new UnsignedLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1212, GqlParser.RULE_unsignedLiteral);
		try {
			this.state = 4770;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 366:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4768;
				this.match(GqlParser.UNSIGNED_NUMERIC_LITERAL);
				}
				break;
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4769;
				this.generalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanLiteral(): BooleanLiteralContext {
		let localctx: BooleanLiteralContext = new BooleanLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1214, GqlParser.RULE_booleanLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4772;
			_la = this._input.LA(1);
			if(!(_la===130 || _la===247 || _la===258)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public characterStringLiteral(): CharacterStringLiteralContext {
		let localctx: CharacterStringLiteralContext = new CharacterStringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1216, GqlParser.RULE_characterStringLiteral);
		try {
			this.state = 4777;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 494, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4774;
				this.singleQuotedCharacterSequence();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4775;
				this.doubleQuotedCharacterSequence();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4776;
				this.accentQuotedCharacterSequence();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		let localctx: UnbrokenCharacterStringLiteralContext = new UnbrokenCharacterStringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1218, GqlParser.RULE_unbrokenCharacterStringLiteral);
		let _la: number;
		try {
			this.state = 4787;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 497, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===56) {
					{
					this.state = 4779;
					this.noEscape();
					}
				}

				this.state = 4782;
				this.unbrokenSingleQuotedCharacterSequence();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4784;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===56) {
					{
					this.state = 4783;
					this.noEscape();
					}
				}

				this.state = 4786;
				this.unbrokenDoubleQuotedCharacterSequence();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleQuotedCharacterSequence(): SingleQuotedCharacterSequenceContext {
		let localctx: SingleQuotedCharacterSequenceContext = new SingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1220, GqlParser.RULE_singleQuotedCharacterSequence);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56) {
				{
				this.state = 4789;
				this.noEscape();
				}
			}

			this.state = 4792;
			this.unbrokenSingleQuotedCharacterSequence();
			this.state = 4797;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 499, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4793;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 4794;
					this.unbrokenSingleQuotedCharacterSequence();
					}
					}
				}
				this.state = 4799;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 499, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public doubleQuotedCharacterSequence(): DoubleQuotedCharacterSequenceContext {
		let localctx: DoubleQuotedCharacterSequenceContext = new DoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1222, GqlParser.RULE_doubleQuotedCharacterSequence);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4801;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56) {
				{
				this.state = 4800;
				this.noEscape();
				}
			}

			this.state = 4803;
			this.unbrokenDoubleQuotedCharacterSequence();
			this.state = 4808;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 501, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4804;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 4805;
					this.unbrokenDoubleQuotedCharacterSequence();
					}
					}
				}
				this.state = 4810;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 501, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public accentQuotedCharacterSequence(): AccentQuotedCharacterSequenceContext {
		let localctx: AccentQuotedCharacterSequenceContext = new AccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1224, GqlParser.RULE_accentQuotedCharacterSequence);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56) {
				{
				this.state = 4811;
				this.noEscape();
				}
			}

			this.state = 4814;
			this.unbrokenAccentQuotedCharacterSequence();
			this.state = 4819;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 503, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4815;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 4816;
					this.unbrokenAccentQuotedCharacterSequence();
					}
					}
				}
				this.state = 4821;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 503, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public noEscape(): NoEscapeContext {
		let localctx: NoEscapeContext = new NoEscapeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1226, GqlParser.RULE_noEscape);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4822;
			this.match(GqlParser.COMMERCIAL_AT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenSingleQuotedCharacterSequence(): UnbrokenSingleQuotedCharacterSequenceContext {
		let localctx: UnbrokenSingleQuotedCharacterSequenceContext = new UnbrokenSingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1228, GqlParser.RULE_unbrokenSingleQuotedCharacterSequence);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4824;
			this.match(GqlParser.SINGLE_QUOTED_STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenDoubleQuotedCharacterSequence(): UnbrokenDoubleQuotedCharacterSequenceContext {
		let localctx: UnbrokenDoubleQuotedCharacterSequenceContext = new UnbrokenDoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1230, GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4826;
			this.match(GqlParser.DOUBLE_QUOTED_STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenAccentQuotedCharacterSequence(): UnbrokenAccentQuotedCharacterSequenceContext {
		let localctx: UnbrokenAccentQuotedCharacterSequenceContext = new UnbrokenAccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1232, GqlParser.RULE_unbrokenAccentQuotedCharacterSequence);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4828;
			this.match(GqlParser.ACCENT_QUOTED_STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalLiteral(): TemporalLiteralContext {
		let localctx: TemporalLiteralContext = new TemporalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1234, GqlParser.RULE_temporalLiteral);
		try {
			this.state = 4834;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 504, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4830;
				this.dateLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4831;
				this.timeLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4832;
				this.dateTimeLiteral();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4833;
				this.sqlDateTimeLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateLiteral(): DateLiteralContext {
		let localctx: DateLiteralContext = new DateLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1236, GqlParser.RULE_dateLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4836;
			this.match(GqlParser.DATE);
			this.state = 4837;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeLiteral(): TimeLiteralContext {
		let localctx: TimeLiteralContext = new TimeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1238, GqlParser.RULE_timeLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4839;
			this.match(GqlParser.TIME);
			this.state = 4840;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeLiteral(): DateTimeLiteralContext {
		let localctx: DateTimeLiteralContext = new DateTimeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1240, GqlParser.RULE_dateTimeLiteral);
		try {
			this.state = 4846;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 110:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4842;
				this.match(GqlParser.DATETIME);
				this.state = 4843;
				this.unbrokenCharacterStringLiteral();
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4844;
				this.match(GqlParser.TIMESTAMP);
				this.state = 4845;
				this.unbrokenCharacterStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateString(): DateStringContext {
		let localctx: DateStringContext = new DateStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1242, GqlParser.RULE_dateString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4848;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeString(): TimeStringContext {
		let localctx: TimeStringContext = new TimeStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1244, GqlParser.RULE_timeString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4850;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeString(): DateTimeStringContext {
		let localctx: DateTimeStringContext = new DateTimeStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1246, GqlParser.RULE_dateTimeString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4852;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlDateTimeLiteral(): SqlDateTimeLiteralContext {
		let localctx: SqlDateTimeLiteralContext = new SqlDateTimeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1248, GqlParser.RULE_sqlDateTimeLiteral);
		try {
			this.state = 4896;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 109:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4854;
				this.match(GqlParser.DATE);
				this.state = 4855;
				this.match(GqlParser.QUOTE);
				this.state = 4856;
				this.match(GqlParser.FOUR_DIGIT);
				this.state = 4857;
				this.match(GqlParser.MINUS);
				this.state = 4858;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4859;
				this.match(GqlParser.MINUS);
				this.state = 4860;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4861;
				this.match(GqlParser.QUOTE);
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4862;
				this.match(GqlParser.TIME);
				this.state = 4863;
				this.match(GqlParser.QUOTE);
				this.state = 4864;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4865;
				this.match(GqlParser.COLON);
				this.state = 4866;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4867;
				this.match(GqlParser.COLON);
				this.state = 4868;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4869;
				this.match(GqlParser.QUOTE);
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4870;
				this.match(GqlParser.TIMESTAMP);
				this.state = 4871;
				this.match(GqlParser.QUOTE);
				this.state = 4872;
				this.match(GqlParser.FOUR_DIGIT);
				this.state = 4873;
				this.match(GqlParser.MINUS);
				this.state = 4874;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4875;
				this.match(GqlParser.MINUS);
				this.state = 4876;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4877;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4878;
				this.match(GqlParser.COLON);
				this.state = 4879;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4880;
				this.match(GqlParser.COLON);
				this.state = 4881;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4882;
				this.match(GqlParser.QUOTE);
				}
				break;
			case 110:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4883;
				this.match(GqlParser.DATETIME);
				this.state = 4884;
				this.match(GqlParser.QUOTE);
				this.state = 4885;
				this.match(GqlParser.FOUR_DIGIT);
				this.state = 4886;
				this.match(GqlParser.MINUS);
				this.state = 4887;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4888;
				this.match(GqlParser.MINUS);
				this.state = 4889;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4890;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4891;
				this.match(GqlParser.COLON);
				this.state = 4892;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4893;
				this.match(GqlParser.COLON);
				this.state = 4894;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 4895;
				this.match(GqlParser.QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationLiteral(): DurationLiteralContext {
		let localctx: DurationLiteralContext = new DurationLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1250, GqlParser.RULE_durationLiteral);
		try {
			this.state = 4901;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 122:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4898;
				this.match(GqlParser.DURATION);
				this.state = 4899;
				this.durationString();
				}
				break;
			case 379:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4900;
				this.sqlIntervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationString(): DurationStringContext {
		let localctx: DurationStringContext = new DurationStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1252, GqlParser.RULE_durationString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4903;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlIntervalLiteral(): SqlIntervalLiteralContext {
		let localctx: SqlIntervalLiteralContext = new SqlIntervalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1254, GqlParser.RULE_sqlIntervalLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4905;
			this.match(GqlParser.UNSIGNED_INT);
			this.state = 4906;
			this.sqlIntervalType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlIntervalType(): SqlIntervalTypeContext {
		let localctx: SqlIntervalTypeContext = new SqlIntervalTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1256, GqlParser.RULE_sqlIntervalType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4908;
			_la = this._input.LA(1);
			if(!(((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 15) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullLiteral(): NullLiteralContext {
		let localctx: NullLiteralContext = new NullLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1258, GqlParser.RULE_nullLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4910;
			this.match(GqlParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listLiteral(): ListLiteralContext {
		let localctx: ListLiteralContext = new ListLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1260, GqlParser.RULE_listLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4912;
			this.listValueConstructorByEnumeration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordLiteral(): RecordLiteralContext {
		let localctx: RecordLiteralContext = new RecordLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1262, GqlParser.RULE_recordLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4914;
			this.recordValueConstructor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public objectName(): ObjectNameContext {
		let localctx: ObjectNameContext = new ObjectNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1264, GqlParser.RULE_objectName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4916;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public objectNameOrBindingVar(): ObjectNameOrBindingVarContext {
		let localctx: ObjectNameOrBindingVarContext = new ObjectNameOrBindingVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1266, GqlParser.RULE_objectNameOrBindingVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4918;
			this.match(GqlParser.REGULAR_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public directoryName(): DirectoryNameContext {
		let localctx: DirectoryNameContext = new DirectoryNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1268, GqlParser.RULE_directoryName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4920;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schemaName(): SchemaNameContext {
		let localctx: SchemaNameContext = new SchemaNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1270, GqlParser.RULE_schemaName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4922;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphName(): GraphNameContext {
		let localctx: GraphNameContext = new GraphNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1272, GqlParser.RULE_graphName);
		try {
			this.state = 4926;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4924;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4925;
				this.delimitedGraphName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimitedGraphName(): DelimitedGraphNameContext {
		let localctx: DelimitedGraphNameContext = new DelimitedGraphNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1274, GqlParser.RULE_delimitedGraphName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4928;
			this.delimitedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeName(): GraphTypeNameContext {
		let localctx: GraphTypeNameContext = new GraphTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1276, GqlParser.RULE_graphTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4930;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementTypeName(): ElementTypeNameContext {
		let localctx: ElementTypeNameContext = new ElementTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1278, GqlParser.RULE_elementTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4932;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableName(): BindingTableNameContext {
		let localctx: BindingTableNameContext = new BindingTableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1280, GqlParser.RULE_bindingTableName);
		try {
			this.state = 4936;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4934;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4935;
				this.delimitedBindingTableName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimitedBindingTableName(): DelimitedBindingTableNameContext {
		let localctx: DelimitedBindingTableNameContext = new DelimitedBindingTableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1282, GqlParser.RULE_delimitedBindingTableName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4938;
			this.delimitedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureName(): ProcedureNameContext {
		let localctx: ProcedureNameContext = new ProcedureNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1284, GqlParser.RULE_procedureName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4940;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelName(): LabelNameContext {
		let localctx: LabelNameContext = new LabelNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1286, GqlParser.RULE_labelName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4942;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyName(): PropertyNameContext {
		let localctx: PropertyNameContext = new PropertyNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1288, GqlParser.RULE_propertyName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4944;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldName(): FieldNameContext {
		let localctx: FieldNameContext = new FieldNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1290, GqlParser.RULE_fieldName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4946;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameterName(): ParameterNameContext {
		let localctx: ParameterNameContext = new ParameterNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1292, GqlParser.RULE_parameterName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4948;
			this.match(GqlParser.DOLLAR);
			this.state = 4949;
			this.separatedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public var_(): VarContext {
		let localctx: VarContext = new VarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1294, GqlParser.RULE_var);
		try {
			this.state = 4956;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 510, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4951;
				this.graphVar();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4952;
				this.graphPatternVar();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4953;
				this.bindingTableVar();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4954;
				this.valueVar();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4955;
				this.bindingVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphVar(): GraphVarContext {
		let localctx: GraphVarContext = new GraphVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1296, GqlParser.RULE_graphVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4958;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternVar(): GraphPatternVarContext {
		let localctx: GraphPatternVarContext = new GraphPatternVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1298, GqlParser.RULE_graphPatternVar);
		try {
			this.state = 4962;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 511, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4960;
				this.elementVar();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4961;
				this.pathOrSubpathVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathOrSubpathVar(): PathOrSubpathVarContext {
		let localctx: PathOrSubpathVarContext = new PathOrSubpathVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1300, GqlParser.RULE_pathOrSubpathVar);
		try {
			this.state = 4966;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 512, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4964;
				this.pathVar();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4965;
				this.subpathVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementVar(): ElementVarContext {
		let localctx: ElementVarContext = new ElementVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1302, GqlParser.RULE_elementVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4968;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathVar(): PathVarContext {
		let localctx: PathVarContext = new PathVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1304, GqlParser.RULE_pathVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4970;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subpathVar(): SubpathVarContext {
		let localctx: SubpathVarContext = new SubpathVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1306, GqlParser.RULE_subpathVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4972;
			this.match(GqlParser.REGULAR_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableVar(): BindingTableVarContext {
		let localctx: BindingTableVarContext = new BindingTableVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1308, GqlParser.RULE_bindingTableVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4974;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueVar(): ValueVarContext {
		let localctx: ValueVarContext = new ValueVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1310, GqlParser.RULE_valueVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4976;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVar(): BindingVarContext {
		let localctx: BindingVarContext = new BindingVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1312, GqlParser.RULE_bindingVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4978;
			this.match(GqlParser.REGULAR_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public token(): TokenContext {
		let localctx: TokenContext = new TokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1314, GqlParser.RULE_token);
		try {
			this.state = 4982;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 58:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 196:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
			case 211:
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 222:
			case 223:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
			case 236:
			case 237:
			case 238:
			case 239:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 248:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 321:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 366:
			case 384:
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4980;
				this.nonDelimiterToken();
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 19:
			case 20:
			case 21:
			case 28:
			case 33:
			case 38:
			case 39:
			case 55:
			case 56:
			case 59:
			case 385:
			case 386:
			case 387:
			case 429:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4981;
				this.delimiterToken();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonDelimiterToken(): NonDelimiterTokenContext {
		let localctx: NonDelimiterTokenContext = new NonDelimiterTokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1316, GqlParser.RULE_nonDelimiterToken);
		try {
			this.state = 4990;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4984;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4985;
				this.parameterName();
				}
				break;
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 196:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
			case 211:
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 222:
			case 223:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
			case 236:
			case 237:
			case 238:
			case 239:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 248:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 321:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4986;
				this.keyWord();
				}
				break;
			case 366:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4987;
				this.match(GqlParser.UNSIGNED_NUMERIC_LITERAL);
				}
				break;
			case 384:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4988;
				this.match(GqlParser.BYTE_STRING_LITERAL);
				}
				break;
			case 58:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4989;
				this.match(GqlParser.MULTISET_ALTERNATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let localctx: IdentifierContext = new IdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1318, GqlParser.RULE_identifier);
		try {
			this.state = 4994;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4992;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4993;
				this.delimitedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public separatedIdentifier(): SeparatedIdentifierContext {
		let localctx: SeparatedIdentifierContext = new SeparatedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1320, GqlParser.RULE_separatedIdentifier);
		try {
			this.state = 4998;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 396:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4996;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4997;
				this.delimitedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonDelimitedIdentifier(): NonDelimitedIdentifierContext {
		let localctx: NonDelimitedIdentifierContext = new NonDelimitedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1322, GqlParser.RULE_nonDelimitedIdentifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5000;
			_la = this._input.LA(1);
			if(!(_la===396 || _la===397)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimitedIdentifier(): DelimitedIdentifierContext {
		let localctx: DelimitedIdentifierContext = new DelimitedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1324, GqlParser.RULE_delimitedIdentifier);
		try {
			this.state = 5004;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 517, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5002;
				this.doubleQuotedCharacterSequence();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5003;
				this.accentQuotedCharacterSequence();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyWord(): KeyWordContext {
		let localctx: KeyWordContext = new KeyWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1326, GqlParser.RULE_keyWord);
		try {
			this.state = 5008;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 196:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
			case 211:
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 222:
			case 223:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
			case 236:
			case 237:
			case 238:
			case 239:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 248:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5006;
				this.reservedWord();
				}
				break;
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 321:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5007;
				this.nonReservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public reservedWord(): ReservedWordContext {
		let localctx: ReservedWordContext = new ReservedWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1328, GqlParser.RULE_reservedWord);
		try {
			this.state = 5227;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5010;
				this.preReservedWord();
				}
				break;
			case 60:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5011;
				this.match(GqlParser.ABS);
				}
				break;
			case 61:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5012;
				this.match(GqlParser.ACOS);
				}
				break;
			case 62:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5013;
				this.match(GqlParser.ALL);
				}
				break;
			case 63:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5014;
				this.match(GqlParser.ALL_DIFFERENT);
				}
				break;
			case 64:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5015;
				this.match(GqlParser.AND);
				}
				break;
			case 65:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5016;
				this.match(GqlParser.ANY);
				}
				break;
			case 66:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5017;
				this.match(GqlParser.ARRAY);
				}
				break;
			case 67:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5018;
				this.match(GqlParser.AS);
				}
				break;
			case 68:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5019;
				this.match(GqlParser.ASC);
				}
				break;
			case 69:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 5020;
				this.match(GqlParser.ASCENDING);
				}
				break;
			case 70:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 5021;
				this.match(GqlParser.ASIN);
				}
				break;
			case 71:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 5022;
				this.match(GqlParser.AT);
				}
				break;
			case 72:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 5023;
				this.match(GqlParser.ATAN);
				}
				break;
			case 73:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 5024;
				this.match(GqlParser.AVG);
				}
				break;
			case 74:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 5025;
				this.match(GqlParser.BIG);
				}
				break;
			case 75:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 5026;
				this.match(GqlParser.BIGINT);
				}
				break;
			case 76:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 5027;
				this.match(GqlParser.BINARY);
				}
				break;
			case 77:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 5028;
				this.match(GqlParser.BOOL);
				}
				break;
			case 78:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 5029;
				this.match(GqlParser.BOOLEAN);
				}
				break;
			case 79:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 5030;
				this.match(GqlParser.BOTH);
				}
				break;
			case 80:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 5031;
				this.match(GqlParser.BTRIM);
				}
				break;
			case 81:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 5032;
				this.match(GqlParser.BY);
				}
				break;
			case 82:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 5033;
				this.match(GqlParser.BYTE_LENGTH);
				}
				break;
			case 83:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 5034;
				this.match(GqlParser.BYTES);
				}
				break;
			case 84:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 5035;
				this.match(GqlParser.CALL);
				}
				break;
			case 85:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 5036;
				this.match(GqlParser.CASE);
				}
				break;
			case 86:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 5037;
				this.match(GqlParser.CAST);
				}
				break;
			case 87:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 5038;
				this.match(GqlParser.CEIL);
				}
				break;
			case 88:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 5039;
				this.match(GqlParser.CEILING);
				}
				break;
			case 89:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 5040;
				this.match(GqlParser.CHAR_LENGTH);
				}
				break;
			case 90:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 5041;
				this.match(GqlParser.CHARACTER_LENGTH);
				}
				break;
			case 91:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 5042;
				this.match(GqlParser.CHARACTERISTICS);
				}
				break;
			case 92:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 5043;
				this.match(GqlParser.CLOSE);
				}
				break;
			case 93:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 5044;
				this.match(GqlParser.COALESCE);
				}
				break;
			case 94:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 5045;
				this.match(GqlParser.COLLECT);
				}
				break;
			case 95:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 5046;
				this.match(GqlParser.COMMIT);
				}
				break;
			case 96:
				this.enterOuterAlt(localctx, 38);
				{
				this.state = 5047;
				this.match(GqlParser.COPY);
				}
				break;
			case 97:
				this.enterOuterAlt(localctx, 39);
				{
				this.state = 5048;
				this.match(GqlParser.COS);
				}
				break;
			case 98:
				this.enterOuterAlt(localctx, 40);
				{
				this.state = 5049;
				this.match(GqlParser.COSH);
				}
				break;
			case 99:
				this.enterOuterAlt(localctx, 41);
				{
				this.state = 5050;
				this.match(GqlParser.COT);
				}
				break;
			case 100:
				this.enterOuterAlt(localctx, 42);
				{
				this.state = 5051;
				this.match(GqlParser.COUNT);
				}
				break;
			case 101:
				this.enterOuterAlt(localctx, 43);
				{
				this.state = 5052;
				this.match(GqlParser.CREATE);
				}
				break;
			case 102:
				this.enterOuterAlt(localctx, 44);
				{
				this.state = 5053;
				this.match(GqlParser.CURRENT_DATE);
				}
				break;
			case 103:
				this.enterOuterAlt(localctx, 45);
				{
				this.state = 5054;
				this.match(GqlParser.CURRENT_GRAPH);
				}
				break;
			case 104:
				this.enterOuterAlt(localctx, 46);
				{
				this.state = 5055;
				this.match(GqlParser.CURRENT_PROPERTY_GRAPH);
				}
				break;
			case 105:
				this.enterOuterAlt(localctx, 47);
				{
				this.state = 5056;
				this.match(GqlParser.CURRENT_SCHEMA);
				}
				break;
			case 106:
				this.enterOuterAlt(localctx, 48);
				{
				this.state = 5057;
				this.match(GqlParser.CURRENT_TIME);
				}
				break;
			case 107:
				this.enterOuterAlt(localctx, 49);
				{
				this.state = 5058;
				this.match(GqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case 108:
				this.enterOuterAlt(localctx, 50);
				{
				this.state = 5059;
				this.match(GqlParser.CURRENT_USER);
				}
				break;
			case 109:
				this.enterOuterAlt(localctx, 51);
				{
				this.state = 5060;
				this.match(GqlParser.DATE);
				}
				break;
			case 110:
				this.enterOuterAlt(localctx, 52);
				{
				this.state = 5061;
				this.match(GqlParser.DATETIME);
				}
				break;
			case 111:
				this.enterOuterAlt(localctx, 53);
				{
				this.state = 5062;
				this.match(GqlParser.DAY);
				}
				break;
			case 112:
				this.enterOuterAlt(localctx, 54);
				{
				this.state = 5063;
				this.match(GqlParser.DEC);
				}
				break;
			case 113:
				this.enterOuterAlt(localctx, 55);
				{
				this.state = 5064;
				this.match(GqlParser.DECIMAL);
				}
				break;
			case 114:
				this.enterOuterAlt(localctx, 56);
				{
				this.state = 5065;
				this.match(GqlParser.DEGREES);
				}
				break;
			case 115:
				this.enterOuterAlt(localctx, 57);
				{
				this.state = 5066;
				this.match(GqlParser.DELETE);
				}
				break;
			case 116:
				this.enterOuterAlt(localctx, 58);
				{
				this.state = 5067;
				this.match(GqlParser.DESC);
				}
				break;
			case 117:
				this.enterOuterAlt(localctx, 59);
				{
				this.state = 5068;
				this.match(GqlParser.DESCENDING);
				}
				break;
			case 118:
				this.enterOuterAlt(localctx, 60);
				{
				this.state = 5069;
				this.match(GqlParser.DETACH);
				}
				break;
			case 119:
				this.enterOuterAlt(localctx, 61);
				{
				this.state = 5070;
				this.match(GqlParser.DISTINCT);
				}
				break;
			case 120:
				this.enterOuterAlt(localctx, 62);
				{
				this.state = 5071;
				this.match(GqlParser.DOUBLE);
				}
				break;
			case 121:
				this.enterOuterAlt(localctx, 63);
				{
				this.state = 5072;
				this.match(GqlParser.DROP);
				}
				break;
			case 122:
				this.enterOuterAlt(localctx, 64);
				{
				this.state = 5073;
				this.match(GqlParser.DURATION);
				}
				break;
			case 123:
				this.enterOuterAlt(localctx, 65);
				{
				this.state = 5074;
				this.match(GqlParser.DURATION_BETWEEN);
				}
				break;
			case 124:
				this.enterOuterAlt(localctx, 66);
				{
				this.state = 5075;
				this.match(GqlParser.ELEMENT_ID);
				}
				break;
			case 125:
				this.enterOuterAlt(localctx, 67);
				{
				this.state = 5076;
				this.match(GqlParser.ELSE);
				}
				break;
			case 126:
				this.enterOuterAlt(localctx, 68);
				{
				this.state = 5077;
				this.match(GqlParser.END);
				}
				break;
			case 127:
				this.enterOuterAlt(localctx, 69);
				{
				this.state = 5078;
				this.match(GqlParser.EXCEPT);
				}
				break;
			case 128:
				this.enterOuterAlt(localctx, 70);
				{
				this.state = 5079;
				this.match(GqlParser.EXISTS);
				}
				break;
			case 129:
				this.enterOuterAlt(localctx, 71);
				{
				this.state = 5080;
				this.match(GqlParser.EXP);
				}
				break;
			case 130:
				this.enterOuterAlt(localctx, 72);
				{
				this.state = 5081;
				this.match(GqlParser.FALSE);
				}
				break;
			case 131:
				this.enterOuterAlt(localctx, 73);
				{
				this.state = 5082;
				this.match(GqlParser.FILTER);
				}
				break;
			case 132:
				this.enterOuterAlt(localctx, 74);
				{
				this.state = 5083;
				this.match(GqlParser.FINISH);
				}
				break;
			case 133:
				this.enterOuterAlt(localctx, 75);
				{
				this.state = 5084;
				this.match(GqlParser.FLOAT);
				}
				break;
			case 134:
				this.enterOuterAlt(localctx, 76);
				{
				this.state = 5085;
				this.match(GqlParser.FLOAT16);
				}
				break;
			case 135:
				this.enterOuterAlt(localctx, 77);
				{
				this.state = 5086;
				this.match(GqlParser.FLOAT32);
				}
				break;
			case 136:
				this.enterOuterAlt(localctx, 78);
				{
				this.state = 5087;
				this.match(GqlParser.FLOAT64);
				}
				break;
			case 137:
				this.enterOuterAlt(localctx, 79);
				{
				this.state = 5088;
				this.match(GqlParser.FLOAT128);
				}
				break;
			case 138:
				this.enterOuterAlt(localctx, 80);
				{
				this.state = 5089;
				this.match(GqlParser.FLOAT256);
				}
				break;
			case 139:
				this.enterOuterAlt(localctx, 81);
				{
				this.state = 5090;
				this.match(GqlParser.FLOOR);
				}
				break;
			case 140:
				this.enterOuterAlt(localctx, 82);
				{
				this.state = 5091;
				this.match(GqlParser.FOR);
				}
				break;
			case 141:
				this.enterOuterAlt(localctx, 83);
				{
				this.state = 5092;
				this.match(GqlParser.FROM);
				}
				break;
			case 142:
				this.enterOuterAlt(localctx, 84);
				{
				this.state = 5093;
				this.match(GqlParser.GROUP);
				}
				break;
			case 143:
				this.enterOuterAlt(localctx, 85);
				{
				this.state = 5094;
				this.match(GqlParser.HAVING);
				}
				break;
			case 144:
				this.enterOuterAlt(localctx, 86);
				{
				this.state = 5095;
				this.match(GqlParser.HOME_GRAPH);
				}
				break;
			case 145:
				this.enterOuterAlt(localctx, 87);
				{
				this.state = 5096;
				this.match(GqlParser.HOME_PROPERTY_GRAPH);
				}
				break;
			case 146:
				this.enterOuterAlt(localctx, 88);
				{
				this.state = 5097;
				this.match(GqlParser.HOME_SCHEMA);
				}
				break;
			case 147:
				this.enterOuterAlt(localctx, 89);
				{
				this.state = 5098;
				this.match(GqlParser.HOUR);
				}
				break;
			case 148:
				this.enterOuterAlt(localctx, 90);
				{
				this.state = 5099;
				this.match(GqlParser.IF);
				}
				break;
			case 149:
				this.enterOuterAlt(localctx, 91);
				{
				this.state = 5100;
				this.match(GqlParser.IN);
				}
				break;
			case 150:
				this.enterOuterAlt(localctx, 92);
				{
				this.state = 5101;
				this.match(GqlParser.INSERT);
				}
				break;
			case 151:
				this.enterOuterAlt(localctx, 93);
				{
				this.state = 5102;
				this.match(GqlParser.INT);
				}
				break;
			case 152:
				this.enterOuterAlt(localctx, 94);
				{
				this.state = 5103;
				this.match(GqlParser.INTEGER);
				}
				break;
			case 153:
				this.enterOuterAlt(localctx, 95);
				{
				this.state = 5104;
				this.match(GqlParser.INT8);
				}
				break;
			case 154:
				this.enterOuterAlt(localctx, 96);
				{
				this.state = 5105;
				this.match(GqlParser.INTEGER8);
				}
				break;
			case 155:
				this.enterOuterAlt(localctx, 97);
				{
				this.state = 5106;
				this.match(GqlParser.INT16);
				}
				break;
			case 156:
				this.enterOuterAlt(localctx, 98);
				{
				this.state = 5107;
				this.match(GqlParser.INTEGER16);
				}
				break;
			case 157:
				this.enterOuterAlt(localctx, 99);
				{
				this.state = 5108;
				this.match(GqlParser.INT32);
				}
				break;
			case 158:
				this.enterOuterAlt(localctx, 100);
				{
				this.state = 5109;
				this.match(GqlParser.INTEGER32);
				}
				break;
			case 159:
				this.enterOuterAlt(localctx, 101);
				{
				this.state = 5110;
				this.match(GqlParser.INT64);
				}
				break;
			case 160:
				this.enterOuterAlt(localctx, 102);
				{
				this.state = 5111;
				this.match(GqlParser.INTEGER64);
				}
				break;
			case 161:
				this.enterOuterAlt(localctx, 103);
				{
				this.state = 5112;
				this.match(GqlParser.INT128);
				}
				break;
			case 162:
				this.enterOuterAlt(localctx, 104);
				{
				this.state = 5113;
				this.match(GqlParser.INTEGER128);
				}
				break;
			case 163:
				this.enterOuterAlt(localctx, 105);
				{
				this.state = 5114;
				this.match(GqlParser.INT256);
				}
				break;
			case 164:
				this.enterOuterAlt(localctx, 106);
				{
				this.state = 5115;
				this.match(GqlParser.INTEGER256);
				}
				break;
			case 165:
				this.enterOuterAlt(localctx, 107);
				{
				this.state = 5116;
				this.match(GqlParser.INTERSECT);
				}
				break;
			case 166:
				this.enterOuterAlt(localctx, 108);
				{
				this.state = 5117;
				this.match(GqlParser.INTERVAL);
				}
				break;
			case 167:
				this.enterOuterAlt(localctx, 109);
				{
				this.state = 5118;
				this.match(GqlParser.IS);
				}
				break;
			case 168:
				this.enterOuterAlt(localctx, 110);
				{
				this.state = 5119;
				this.match(GqlParser.LEADING);
				}
				break;
			case 169:
				this.enterOuterAlt(localctx, 111);
				{
				this.state = 5120;
				this.match(GqlParser.LET);
				}
				break;
			case 170:
				this.enterOuterAlt(localctx, 112);
				{
				this.state = 5121;
				this.match(GqlParser.LIKE);
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 113);
				{
				this.state = 5122;
				this.match(GqlParser.LIMIT);
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 114);
				{
				this.state = 5123;
				this.match(GqlParser.LIST);
				}
				break;
			case 173:
				this.enterOuterAlt(localctx, 115);
				{
				this.state = 5124;
				this.match(GqlParser.LN);
				}
				break;
			case 174:
				this.enterOuterAlt(localctx, 116);
				{
				this.state = 5125;
				this.match(GqlParser.LOCAL);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 117);
				{
				this.state = 5126;
				this.match(GqlParser.LOCAL_DATETIME);
				}
				break;
			case 176:
				this.enterOuterAlt(localctx, 118);
				{
				this.state = 5127;
				this.match(GqlParser.LOCAL_TIME);
				}
				break;
			case 177:
				this.enterOuterAlt(localctx, 119);
				{
				this.state = 5128;
				this.match(GqlParser.LOCAL_TIMESTAMP);
				}
				break;
			case 178:
				this.enterOuterAlt(localctx, 120);
				{
				this.state = 5129;
				this.match(GqlParser.LOG);
				}
				break;
			case 179:
				this.enterOuterAlt(localctx, 121);
				{
				this.state = 5130;
				this.match(GqlParser.LOG10);
				}
				break;
			case 180:
				this.enterOuterAlt(localctx, 122);
				{
				this.state = 5131;
				this.match(GqlParser.LOWER);
				}
				break;
			case 181:
				this.enterOuterAlt(localctx, 123);
				{
				this.state = 5132;
				this.match(GqlParser.LTRIM);
				}
				break;
			case 182:
				this.enterOuterAlt(localctx, 124);
				{
				this.state = 5133;
				this.match(GqlParser.MATCH);
				}
				break;
			case 183:
				this.enterOuterAlt(localctx, 125);
				{
				this.state = 5134;
				this.match(GqlParser.MAX);
				}
				break;
			case 184:
				this.enterOuterAlt(localctx, 126);
				{
				this.state = 5135;
				this.match(GqlParser.MIN);
				}
				break;
			case 185:
				this.enterOuterAlt(localctx, 127);
				{
				this.state = 5136;
				this.match(GqlParser.MINUTE);
				}
				break;
			case 186:
				this.enterOuterAlt(localctx, 128);
				{
				this.state = 5137;
				this.match(GqlParser.MOD);
				}
				break;
			case 187:
				this.enterOuterAlt(localctx, 129);
				{
				this.state = 5138;
				this.match(GqlParser.MONTH);
				}
				break;
			case 188:
				this.enterOuterAlt(localctx, 130);
				{
				this.state = 5139;
				this.match(GqlParser.NEXT);
				}
				break;
			case 189:
				this.enterOuterAlt(localctx, 131);
				{
				this.state = 5140;
				this.match(GqlParser.NODETACH);
				}
				break;
			case 190:
				this.enterOuterAlt(localctx, 132);
				{
				this.state = 5141;
				this.match(GqlParser.NORMALIZE);
				}
				break;
			case 191:
				this.enterOuterAlt(localctx, 133);
				{
				this.state = 5142;
				this.match(GqlParser.NOT);
				}
				break;
			case 192:
				this.enterOuterAlt(localctx, 134);
				{
				this.state = 5143;
				this.match(GqlParser.NULL);
				}
				break;
			case 193:
				this.enterOuterAlt(localctx, 135);
				{
				this.state = 5144;
				this.match(GqlParser.NULLS);
				}
				break;
			case 194:
				this.enterOuterAlt(localctx, 136);
				{
				this.state = 5145;
				this.match(GqlParser.NULLIF);
				}
				break;
			case 195:
				this.enterOuterAlt(localctx, 137);
				{
				this.state = 5146;
				this.match(GqlParser.OCTET_LENGTH);
				}
				break;
			case 196:
				this.enterOuterAlt(localctx, 138);
				{
				this.state = 5147;
				this.match(GqlParser.OF);
				}
				break;
			case 197:
				this.enterOuterAlt(localctx, 139);
				{
				this.state = 5148;
				this.match(GqlParser.OFFSET);
				}
				break;
			case 198:
				this.enterOuterAlt(localctx, 140);
				{
				this.state = 5149;
				this.match(GqlParser.OPEN);
				}
				break;
			case 199:
				this.enterOuterAlt(localctx, 141);
				{
				this.state = 5150;
				this.match(GqlParser.OPTIONAL);
				}
				break;
			case 200:
				this.enterOuterAlt(localctx, 142);
				{
				this.state = 5151;
				this.match(GqlParser.OR);
				}
				break;
			case 201:
				this.enterOuterAlt(localctx, 143);
				{
				this.state = 5152;
				this.match(GqlParser.ORDER);
				}
				break;
			case 202:
				this.enterOuterAlt(localctx, 144);
				{
				this.state = 5153;
				this.match(GqlParser.OTHERWISE);
				}
				break;
			case 203:
				this.enterOuterAlt(localctx, 145);
				{
				this.state = 5154;
				this.match(GqlParser.PARAMETER);
				}
				break;
			case 204:
				this.enterOuterAlt(localctx, 146);
				{
				this.state = 5155;
				this.match(GqlParser.PARAMETERS);
				}
				break;
			case 205:
				this.enterOuterAlt(localctx, 147);
				{
				this.state = 5156;
				this.match(GqlParser.PATH);
				}
				break;
			case 206:
				this.enterOuterAlt(localctx, 148);
				{
				this.state = 5157;
				this.match(GqlParser.PATH_LENGTH);
				}
				break;
			case 207:
				this.enterOuterAlt(localctx, 149);
				{
				this.state = 5158;
				this.match(GqlParser.PATHS);
				}
				break;
			case 208:
				this.enterOuterAlt(localctx, 150);
				{
				this.state = 5159;
				this.match(GqlParser.PERCENTILE_CONT);
				}
				break;
			case 209:
				this.enterOuterAlt(localctx, 151);
				{
				this.state = 5160;
				this.match(GqlParser.PERCENTILE_DISC);
				}
				break;
			case 210:
				this.enterOuterAlt(localctx, 152);
				{
				this.state = 5161;
				this.match(GqlParser.POWER);
				}
				break;
			case 211:
				this.enterOuterAlt(localctx, 153);
				{
				this.state = 5162;
				this.match(GqlParser.PRECISION);
				}
				break;
			case 212:
				this.enterOuterAlt(localctx, 154);
				{
				this.state = 5163;
				this.match(GqlParser.PROPERTY_EXISTS);
				}
				break;
			case 213:
				this.enterOuterAlt(localctx, 155);
				{
				this.state = 5164;
				this.match(GqlParser.RADIANS);
				}
				break;
			case 214:
				this.enterOuterAlt(localctx, 156);
				{
				this.state = 5165;
				this.match(GqlParser.REAL);
				}
				break;
			case 215:
				this.enterOuterAlt(localctx, 157);
				{
				this.state = 5166;
				this.match(GqlParser.RECORD);
				}
				break;
			case 216:
				this.enterOuterAlt(localctx, 158);
				{
				this.state = 5167;
				this.match(GqlParser.REMOVE);
				}
				break;
			case 217:
				this.enterOuterAlt(localctx, 159);
				{
				this.state = 5168;
				this.match(GqlParser.REPLACE);
				}
				break;
			case 218:
				this.enterOuterAlt(localctx, 160);
				{
				this.state = 5169;
				this.match(GqlParser.RESET);
				}
				break;
			case 219:
				this.enterOuterAlt(localctx, 161);
				{
				this.state = 5170;
				this.match(GqlParser.RETURN);
				}
				break;
			case 220:
				this.enterOuterAlt(localctx, 162);
				{
				this.state = 5171;
				this.match(GqlParser.ROLLBACK);
				}
				break;
			case 221:
				this.enterOuterAlt(localctx, 163);
				{
				this.state = 5172;
				this.match(GqlParser.RTRIM);
				}
				break;
			case 222:
				this.enterOuterAlt(localctx, 164);
				{
				this.state = 5173;
				this.match(GqlParser.SAME);
				}
				break;
			case 223:
				this.enterOuterAlt(localctx, 165);
				{
				this.state = 5174;
				this.match(GqlParser.SCHEMA);
				}
				break;
			case 224:
				this.enterOuterAlt(localctx, 166);
				{
				this.state = 5175;
				this.match(GqlParser.SECOND);
				}
				break;
			case 225:
				this.enterOuterAlt(localctx, 167);
				{
				this.state = 5176;
				this.match(GqlParser.SELECT);
				}
				break;
			case 226:
				this.enterOuterAlt(localctx, 168);
				{
				this.state = 5177;
				this.match(GqlParser.SESSION);
				}
				break;
			case 227:
				this.enterOuterAlt(localctx, 169);
				{
				this.state = 5178;
				this.match(GqlParser.SET);
				}
				break;
			case 228:
				this.enterOuterAlt(localctx, 170);
				{
				this.state = 5179;
				this.match(GqlParser.SIGNED);
				}
				break;
			case 229:
				this.enterOuterAlt(localctx, 171);
				{
				this.state = 5180;
				this.match(GqlParser.SIN);
				}
				break;
			case 230:
				this.enterOuterAlt(localctx, 172);
				{
				this.state = 5181;
				this.match(GqlParser.SINH);
				}
				break;
			case 231:
				this.enterOuterAlt(localctx, 173);
				{
				this.state = 5182;
				this.match(GqlParser.SKIP_);
				}
				break;
			case 232:
				this.enterOuterAlt(localctx, 174);
				{
				this.state = 5183;
				this.match(GqlParser.SMALL);
				}
				break;
			case 233:
				this.enterOuterAlt(localctx, 175);
				{
				this.state = 5184;
				this.match(GqlParser.SMALLINT);
				}
				break;
			case 234:
				this.enterOuterAlt(localctx, 176);
				{
				this.state = 5185;
				this.match(GqlParser.SQRT);
				}
				break;
			case 235:
				this.enterOuterAlt(localctx, 177);
				{
				this.state = 5186;
				this.match(GqlParser.START);
				}
				break;
			case 236:
				this.enterOuterAlt(localctx, 178);
				{
				this.state = 5187;
				this.match(GqlParser.STDDEV_POP);
				}
				break;
			case 237:
				this.enterOuterAlt(localctx, 179);
				{
				this.state = 5188;
				this.match(GqlParser.STDDEV_SAMP);
				}
				break;
			case 238:
				this.enterOuterAlt(localctx, 180);
				{
				this.state = 5189;
				this.match(GqlParser.STRING);
				}
				break;
			case 239:
				this.enterOuterAlt(localctx, 181);
				{
				this.state = 5190;
				this.match(GqlParser.SUM);
				}
				break;
			case 240:
				this.enterOuterAlt(localctx, 182);
				{
				this.state = 5191;
				this.match(GqlParser.TAN);
				}
				break;
			case 241:
				this.enterOuterAlt(localctx, 183);
				{
				this.state = 5192;
				this.match(GqlParser.TANH);
				}
				break;
			case 242:
				this.enterOuterAlt(localctx, 184);
				{
				this.state = 5193;
				this.match(GqlParser.THEN);
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 185);
				{
				this.state = 5194;
				this.match(GqlParser.TIME);
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 186);
				{
				this.state = 5195;
				this.match(GqlParser.TIMESTAMP);
				}
				break;
			case 245:
				this.enterOuterAlt(localctx, 187);
				{
				this.state = 5196;
				this.match(GqlParser.TRAILING);
				}
				break;
			case 246:
				this.enterOuterAlt(localctx, 188);
				{
				this.state = 5197;
				this.match(GqlParser.TRIM);
				}
				break;
			case 247:
				this.enterOuterAlt(localctx, 189);
				{
				this.state = 5198;
				this.match(GqlParser.TRUE);
				}
				break;
			case 248:
				this.enterOuterAlt(localctx, 190);
				{
				this.state = 5199;
				this.match(GqlParser.TYPED);
				}
				break;
			case 249:
				this.enterOuterAlt(localctx, 191);
				{
				this.state = 5200;
				this.match(GqlParser.UBIGINT);
				}
				break;
			case 250:
				this.enterOuterAlt(localctx, 192);
				{
				this.state = 5201;
				this.match(GqlParser.UINT);
				}
				break;
			case 251:
				this.enterOuterAlt(localctx, 193);
				{
				this.state = 5202;
				this.match(GqlParser.UINT8);
				}
				break;
			case 252:
				this.enterOuterAlt(localctx, 194);
				{
				this.state = 5203;
				this.match(GqlParser.UINT16);
				}
				break;
			case 253:
				this.enterOuterAlt(localctx, 195);
				{
				this.state = 5204;
				this.match(GqlParser.UINT32);
				}
				break;
			case 254:
				this.enterOuterAlt(localctx, 196);
				{
				this.state = 5205;
				this.match(GqlParser.UINT64);
				}
				break;
			case 255:
				this.enterOuterAlt(localctx, 197);
				{
				this.state = 5206;
				this.match(GqlParser.UINT128);
				}
				break;
			case 256:
				this.enterOuterAlt(localctx, 198);
				{
				this.state = 5207;
				this.match(GqlParser.UINT256);
				}
				break;
			case 257:
				this.enterOuterAlt(localctx, 199);
				{
				this.state = 5208;
				this.match(GqlParser.UNION);
				}
				break;
			case 258:
				this.enterOuterAlt(localctx, 200);
				{
				this.state = 5209;
				this.match(GqlParser.UNKNOWN);
				}
				break;
			case 259:
				this.enterOuterAlt(localctx, 201);
				{
				this.state = 5210;
				this.match(GqlParser.UNSIGNED);
				}
				break;
			case 260:
				this.enterOuterAlt(localctx, 202);
				{
				this.state = 5211;
				this.match(GqlParser.UPPER);
				}
				break;
			case 261:
				this.enterOuterAlt(localctx, 203);
				{
				this.state = 5212;
				this.match(GqlParser.USE);
				}
				break;
			case 262:
				this.enterOuterAlt(localctx, 204);
				{
				this.state = 5213;
				this.match(GqlParser.USMALLINT);
				}
				break;
			case 263:
				this.enterOuterAlt(localctx, 205);
				{
				this.state = 5214;
				this.match(GqlParser.VALUE);
				}
				break;
			case 264:
				this.enterOuterAlt(localctx, 206);
				{
				this.state = 5215;
				this.match(GqlParser.VARBINARY);
				}
				break;
			case 265:
				this.enterOuterAlt(localctx, 207);
				{
				this.state = 5216;
				this.match(GqlParser.VARCHAR);
				}
				break;
			case 266:
				this.enterOuterAlt(localctx, 208);
				{
				this.state = 5217;
				this.match(GqlParser.VARIABLE);
				}
				break;
			case 267:
				this.enterOuterAlt(localctx, 209);
				{
				this.state = 5218;
				this.match(GqlParser.WHEN);
				}
				break;
			case 268:
				this.enterOuterAlt(localctx, 210);
				{
				this.state = 5219;
				this.match(GqlParser.WHERE);
				}
				break;
			case 269:
				this.enterOuterAlt(localctx, 211);
				{
				this.state = 5220;
				this.match(GqlParser.WITH);
				}
				break;
			case 270:
				this.enterOuterAlt(localctx, 212);
				{
				this.state = 5221;
				this.match(GqlParser.XOR);
				}
				break;
			case 271:
				this.enterOuterAlt(localctx, 213);
				{
				this.state = 5222;
				this.match(GqlParser.YEAR);
				}
				break;
			case 272:
				this.enterOuterAlt(localctx, 214);
				{
				this.state = 5223;
				this.match(GqlParser.YIELD);
				}
				break;
			case 273:
				this.enterOuterAlt(localctx, 215);
				{
				this.state = 5224;
				this.match(GqlParser.ZONED);
				}
				break;
			case 274:
				this.enterOuterAlt(localctx, 216);
				{
				this.state = 5225;
				this.match(GqlParser.ZONED_DATETIME);
				}
				break;
			case 275:
				this.enterOuterAlt(localctx, 217);
				{
				this.state = 5226;
				this.match(GqlParser.ZONED_TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public preReservedWord(): PreReservedWordContext {
		let localctx: PreReservedWordContext = new PreReservedWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1330, GqlParser.RULE_preReservedWord);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5229;
			_la = this._input.LA(1);
			if(!(((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 7) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonReservedWord(): NonReservedWordContext {
		let localctx: NonReservedWordContext = new NonReservedWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1332, GqlParser.RULE_nonReservedWord);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5231;
			_la = this._input.LA(1);
			if(!(((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & 4294967295) !== 0) || ((((_la - 343)) & ~0x1F) === 0 && ((1 << (_la - 343)) & 131071) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimiterToken(): DelimiterTokenContext {
		let localctx: DelimiterTokenContext = new DelimiterTokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1334, GqlParser.RULE_delimiterToken);
		try {
			this.state = 5270;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 520, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5233;
				this.match(GqlParser.GQL_SPECIAL_CHAR);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5234;
				this.characterStringLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5235;
				this.dateString();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5236;
				this.dateTimeString();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5237;
				this.delimitedIdentifier();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5238;
				this.durationString();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5239;
				this.timeString();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5240;
				this.match(GqlParser.CONCATENATION);
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5241;
				this.match(GqlParser.DOUBLE_COLON);
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5242;
				this.match(GqlParser.DOUBLE_MINUS);
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 5243;
				this.match(GqlParser.DOUBLE_PERIOD);
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 5244;
				this.notEquals();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 5245;
				this.lessThen();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 5246;
				this.graterThanOrEquals();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 5247;
				this.lessThanOrEquals();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 5248;
				this.graterThanOrEquals();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 5249;
				this.match(GqlParser.LEFT_ARROW);
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 5250;
				this.match(GqlParser.LEFT_ARROW_TILDE);
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 5251;
				this.match(GqlParser.LEFT_ARROW_BRACKET);
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 5252;
				this.match(GqlParser.LEFT_ARROW_TILDE_BRACKET);
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 5253;
				this.match(GqlParser.LEFT_MINUS_RIGHT);
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 5254;
				this.match(GqlParser.LEFT_MINUS_SLASH);
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 5255;
				this.match(GqlParser.LEFT_TILDE_SLASH);
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 5256;
				this.match(GqlParser.MINUS_LEFT_BRACKET);
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 5257;
				this.match(GqlParser.MINUS_SLASH);
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 5258;
				this.match(GqlParser.RIGHT_ARROW);
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 5259;
				this.match(GqlParser.RIGHT_BRACKET_MINUS);
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 5260;
				this.match(GqlParser.RIGHT_BRACKET_TILDE);
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 5261;
				this.match(GqlParser.BRACKET_RIGHT_ARROW);
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 5262;
				this.match(GqlParser.BRACKET_TILDE_RIGHT_ARROW);
				}
				break;
			case 31:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 5263;
				this.match(GqlParser.SLASH_MINUS);
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 5264;
				this.match(GqlParser.SLASH_MINUS_RIGHT);
				}
				break;
			case 33:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 5265;
				this.match(GqlParser.SLASH_TILDE);
				}
				break;
			case 34:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 5266;
				this.match(GqlParser.SLASH_TILDE_RIGHT);
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 5267;
				this.match(GqlParser.TILDE_LEFT_BRACKET);
				}
				break;
			case 36:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 5268;
				this.match(GqlParser.TILDE_RIGHT_ARROW);
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 5269;
				this.match(GqlParser.TILDE_SLASH);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeSynonym(): EdgeSynonymContext {
		let localctx: EdgeSynonymContext = new EdgeSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1336, GqlParser.RULE_edgeSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5272;
			_la = this._input.LA(1);
			if(!(_la===318 || _la===341)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgesSynonym(): EdgesSynonymContext {
		let localctx: EdgesSynonymContext = new EdgesSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1338, GqlParser.RULE_edgesSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5274;
			_la = this._input.LA(1);
			if(!(_la===319 || _la===342)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeSynonym(): NodeSynonymContext {
		let localctx: NodeSynonymContext = new NodeSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1340, GqlParser.RULE_nodeSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5276;
			_la = this._input.LA(1);
			if(!(_la===335 || _la===355)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 95:
			return this.compositeQueryExpr_sempred(localctx as CompositeQueryExprContext, predIndex);
		case 465:
			return this.booleanTerm_sempred(localctx as BooleanTermContext, predIndex);
		case 532:
			return this.dateTimeValueExpr_sempred(localctx as DateTimeValueExprContext, predIndex);
		case 545:
			return this.durationValueExpr_sempred(localctx as DurationValueExprContext, predIndex);
		case 548:
			return this.durationTerm_sempred(localctx as DurationTermContext, predIndex);
		}
		return true;
	}
	private compositeQueryExpr_sempred(localctx: CompositeQueryExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private booleanTerm_sempred(localctx: BooleanTermContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private dateTimeValueExpr_sempred(localctx: DateTimeValueExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		case 3:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private durationValueExpr_sempred(localctx: DurationValueExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private durationTerm_sempred(localctx: DurationTermContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.precpred(this._ctx, 3);
		case 7:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,1,429,5279,2,0,7,0,
	2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,
	2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,
	17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,
	7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,
	31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
	2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
	46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,
	7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,
	60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,
	2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,
	75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,
	7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
	89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,
	2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,
	7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,
	7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,
	7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,
	7,163,2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
	7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
	7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,
	7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,
	7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,
	7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,
	7,199,2,200,7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,
	7,205,2,206,7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,
	7,211,2,212,7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,
	7,217,2,218,7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,
	7,223,2,224,7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,
	7,229,2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
	7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
	7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,
	7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,
	7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,
	7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,
	7,265,2,266,7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,
	7,271,2,272,7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,
	7,277,2,278,7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,
	7,283,2,284,7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,
	7,289,2,290,7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,
	7,295,2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
	7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
	7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,
	7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,
	7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,
	7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,
	7,331,2,332,7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,
	7,337,2,338,7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,
	7,343,2,344,7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,
	7,349,2,350,7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,
	7,355,2,356,7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,
	7,361,2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
	7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
	7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,
	7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,
	7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,
	7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,
	7,397,2,398,7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,
	7,403,2,404,7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,
	7,409,2,410,7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,
	7,415,2,416,7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,
	7,421,2,422,7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,
	7,427,2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
	7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
	7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,
	7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,
	7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,
	7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,
	7,463,2,464,7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,
	7,469,2,470,7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,
	7,475,2,476,7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,
	7,481,2,482,7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,
	7,487,2,488,7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,
	7,493,2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
	7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
	7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,
	7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,
	7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,
	7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,
	7,529,2,530,7,530,2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,
	7,535,2,536,7,536,2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,
	7,541,2,542,7,542,2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,
	7,547,2,548,7,548,2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,
	7,553,2,554,7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,
	7,559,2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
	7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
	7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,
	7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,
	7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,
	7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,
	7,595,2,596,7,596,2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,
	7,601,2,602,7,602,2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,
	7,607,2,608,7,608,2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,
	7,613,2,614,7,614,2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,
	7,619,2,620,7,620,2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,
	7,625,2,626,7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,
	7,631,2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,
	7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,
	7,643,2,644,7,644,2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,
	7,649,2,650,7,650,2,651,7,651,2,652,7,652,2,653,7,653,2,654,7,654,2,655,
	7,655,2,656,7,656,2,657,7,657,2,658,7,658,2,659,7,659,2,660,7,660,2,661,
	7,661,2,662,7,662,2,663,7,663,2,664,7,664,2,665,7,665,2,666,7,666,2,667,
	7,667,2,668,7,668,2,669,7,669,2,670,7,670,1,0,5,0,1344,8,0,10,0,12,0,1347,
	9,0,1,0,1,0,1,1,1,1,3,1,1353,8,1,1,2,1,2,3,2,1357,8,2,1,3,1,3,3,3,1361,
	8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,1369,8,4,1,5,1,5,1,5,1,6,3,6,1375,8,6,1,
	6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,3,9,1389,8,9,1,10,3,10,1392,
	8,10,1,10,1,10,1,10,1,10,1,11,3,11,1399,8,11,1,11,1,11,1,11,1,11,1,12,1,
	12,1,12,1,12,1,13,3,13,1410,8,13,1,13,1,13,1,14,3,14,1415,8,14,1,14,1,14,
	1,14,1,15,3,15,1421,8,15,1,15,1,15,1,15,3,15,1426,8,15,1,15,1,15,1,15,1,
	15,1,15,3,15,1433,8,15,1,16,3,16,1436,8,16,1,16,1,16,1,17,1,17,1,17,3,17,
	1443,8,17,3,17,1445,8,17,1,17,1,17,3,17,1449,8,17,1,17,3,17,1452,8,17,1,
	18,1,18,1,18,3,18,1457,8,18,1,19,1,19,1,20,1,20,1,20,4,20,1464,8,20,11,
	20,12,20,1465,1,21,1,21,3,21,1470,8,21,1,22,1,22,1,22,1,22,3,22,1476,8,
	22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,
	1,27,1,27,1,28,3,28,1495,8,28,1,28,3,28,1498,8,28,1,28,1,28,1,29,4,29,1503,
	8,29,11,29,12,29,1504,1,30,1,30,1,30,3,30,1510,8,30,1,31,1,31,5,31,1514,
	8,31,10,31,12,31,1517,9,31,1,32,1,32,1,32,3,32,1522,8,32,1,33,1,33,3,33,
	1526,8,33,1,33,1,33,1,34,3,34,1531,8,34,1,34,1,34,1,34,1,34,1,35,3,35,1538,
	8,35,1,35,3,35,1541,8,35,1,35,1,35,1,36,1,36,1,36,1,37,3,37,1549,8,37,1,
	37,1,37,1,37,1,37,1,38,3,38,1556,8,38,1,38,3,38,1559,8,38,1,38,1,38,1,39,
	1,39,1,39,1,40,1,40,1,40,1,40,1,41,3,41,1571,8,41,1,41,3,41,1574,8,41,1,
	41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,1586,8,43,1,44,1,44,
	1,45,1,45,1,46,1,46,1,46,1,46,3,46,1596,8,46,1,47,1,47,1,48,1,48,1,48,1,
	48,1,48,1,48,1,48,1,48,1,48,3,48,1609,8,48,1,49,4,49,1612,8,49,11,49,12,
	49,1613,1,50,1,50,3,50,1618,8,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1626,
	8,51,1,52,1,52,1,52,3,52,1631,8,52,1,52,1,52,1,53,1,53,1,53,3,53,1638,8,
	53,1,53,1,53,1,54,1,54,3,54,1644,8,54,1,55,1,55,3,55,1648,8,55,1,55,1,55,
	3,55,1652,8,55,1,55,1,55,1,55,3,55,1657,8,55,1,55,3,55,1660,8,55,1,56,1,
	56,1,56,1,56,3,56,1666,8,56,1,56,1,56,1,56,1,56,3,56,1672,8,56,1,56,3,56,
	1675,8,56,1,57,1,57,3,57,1679,8,57,1,57,3,57,1682,8,57,1,57,1,57,1,58,1,
	58,3,58,1688,8,58,1,58,1,58,3,58,1692,8,58,1,58,3,58,1695,8,58,1,59,1,59,
	1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,3,61,1707,8,61,1,61,1,61,3,61,1711,
	8,61,1,61,1,61,1,62,1,62,3,62,1717,8,62,1,62,1,62,1,62,3,62,1722,8,62,1,
	62,1,62,1,62,3,62,1727,8,62,1,62,1,62,3,62,1731,8,62,1,62,1,62,1,62,1,63,
	3,63,1737,8,63,1,63,1,63,1,63,3,63,1742,8,63,1,63,3,63,1745,8,63,1,64,1,
	64,1,64,1,64,3,64,1751,8,64,1,65,1,65,3,65,1755,8,65,1,65,1,65,1,65,3,65,
	1760,8,65,1,65,1,65,1,66,1,66,1,67,1,67,3,67,1768,8,67,1,68,1,68,3,68,1772,
	8,68,1,69,1,69,1,69,3,69,1777,8,69,1,70,1,70,1,70,1,71,1,71,3,71,1784,8,
	71,1,72,1,72,3,72,1788,8,72,1,73,4,73,1791,8,73,11,73,12,73,1792,1,74,1,
	74,3,74,1797,8,74,1,75,1,75,3,75,1801,8,75,1,76,1,76,1,76,1,76,3,76,1807,
	8,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,4,79,1818,8,79,11,79,
	12,79,1819,1,80,1,80,1,80,3,80,1825,8,80,1,81,1,81,1,81,1,81,1,81,1,81,
	1,82,1,82,1,82,1,82,3,82,1837,8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,
	84,1,84,5,84,1848,8,84,10,84,12,84,1851,9,84,1,85,1,85,1,85,1,86,1,86,1,
	86,4,86,1859,8,86,11,86,12,86,1860,1,87,1,87,3,87,1865,8,87,1,88,1,88,1,
	88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,4,91,1882,
	8,91,11,91,12,91,1883,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,
	1,95,1,95,1,95,5,95,1899,8,95,10,95,12,95,1902,9,95,1,96,1,96,3,96,1906,
	8,96,1,97,1,97,1,97,1,98,1,98,1,99,1,99,3,99,1915,8,99,1,100,4,100,1918,
	8,100,11,100,12,100,1919,1,100,1,100,1,100,1,100,1,100,3,100,1927,8,100,
	1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,104,1,104,
	1,104,1,105,3,105,1943,8,105,1,105,1,105,3,105,1947,8,105,1,106,1,106,5,
	106,1951,8,106,10,106,12,106,1954,9,106,1,107,1,107,3,107,1958,8,107,1,
	108,1,108,1,108,1,108,1,108,3,108,1965,8,108,1,109,1,109,3,109,1969,8,109,
	1,110,1,110,1,110,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,
	1,112,1,112,1,112,3,112,1986,8,112,1,113,4,113,1989,8,113,11,113,12,113,
	1990,1,114,1,114,1,115,1,115,1,115,3,115,1998,8,115,1,116,1,116,1,116,1,
	117,1,117,1,117,4,117,2006,8,117,11,117,12,117,2007,1,118,1,118,1,118,1,
	118,1,118,3,118,2015,8,118,1,119,1,119,1,119,3,119,2020,8,119,1,120,1,120,
	1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,1,123,3,123,2034,
	8,123,1,123,3,123,2037,8,123,1,123,1,123,3,123,2041,8,123,1,123,3,123,2044,
	8,123,1,124,1,124,3,124,2048,8,124,1,124,3,124,2051,8,124,1,125,1,125,1,
	125,1,126,3,126,2057,8,126,1,126,1,126,3,126,2061,8,126,1,126,3,126,2064,
	8,126,1,126,1,126,3,126,2068,8,126,1,127,1,127,1,127,5,127,2073,8,127,10,
	127,12,127,2076,9,127,1,128,1,128,3,128,2080,8,128,1,129,1,129,1,129,1,
	130,1,130,3,130,2087,8,130,1,130,1,130,3,130,2091,8,130,1,130,1,130,3,130,
	2095,8,130,1,130,3,130,2098,8,130,1,130,3,130,2101,8,130,1,130,3,130,2104,
	8,130,1,130,3,130,2107,8,130,1,130,3,130,2110,8,130,3,130,2112,8,130,1,
	131,1,131,1,131,4,131,2117,8,131,11,131,12,131,2118,1,132,1,132,3,132,2123,
	8,132,1,133,1,133,1,133,1,134,1,134,1,134,1,135,1,135,1,135,3,135,2134,
	8,135,1,136,1,136,1,136,5,136,2139,8,136,10,136,12,136,2142,9,136,1,137,
	1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2153,8,138,1,139,
	3,139,2156,8,139,1,139,1,139,1,139,1,140,1,140,3,140,2163,8,140,1,141,3,
	141,2166,8,141,1,141,1,141,1,142,1,142,3,142,2172,8,142,1,142,1,142,1,143,
	1,143,1,143,4,143,2179,8,143,11,143,12,143,2180,1,144,1,144,1,144,3,144,
	2186,8,144,1,144,1,144,1,145,1,145,1,145,4,145,2193,8,145,11,145,12,145,
	2194,1,146,1,146,1,147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,1,150,
	1,150,1,151,1,151,1,152,1,152,1,153,1,153,3,153,2215,8,153,1,154,1,154,
	1,154,1,155,1,155,1,155,4,155,2223,8,155,11,155,12,155,2224,1,156,1,156,
	1,156,1,157,3,157,2231,8,157,1,157,1,157,3,157,2235,8,157,1,157,3,157,2238,
	8,157,1,158,1,158,3,158,2242,8,158,1,159,1,159,1,159,1,160,1,160,1,160,
	1,161,1,161,3,161,2252,8,161,1,161,3,161,2255,8,161,1,162,1,162,3,162,2259,
	8,162,1,162,3,162,2262,8,162,1,163,1,163,1,163,5,163,2267,8,163,10,163,
	12,163,2270,9,163,1,164,3,164,2273,8,164,1,164,3,164,2276,8,164,1,164,4,
	164,2279,8,164,11,164,12,164,2280,1,165,1,165,1,165,1,166,1,166,1,166,1,
	167,1,167,1,167,1,168,1,168,3,168,2294,8,168,1,169,1,169,3,169,2298,8,169,
	1,170,1,170,1,171,1,171,1,171,3,171,2305,8,171,1,172,1,172,3,172,2309,8,
	172,1,172,3,172,2312,8,172,1,173,1,173,1,174,1,174,3,174,2318,8,174,1,174,
	3,174,2321,8,174,1,174,3,174,2324,8,174,1,175,1,175,1,176,1,176,1,176,1,
	176,3,176,2332,8,176,1,177,1,177,1,177,3,177,2337,8,177,1,177,3,177,2340,
	8,177,1,178,1,178,1,178,3,178,2345,8,178,1,178,3,178,2348,8,178,1,179,1,
	179,1,179,3,179,2353,8,179,1,179,3,179,2356,8,179,1,180,1,180,1,180,3,180,
	2361,8,180,1,180,3,180,2364,8,180,1,180,1,180,1,181,1,181,1,182,1,182,1,
	183,1,183,1,183,3,183,2375,8,183,1,184,1,184,1,184,5,184,2380,8,184,10,
	184,12,184,2383,9,184,1,185,1,185,1,185,5,185,2388,8,185,10,185,12,185,
	2391,9,185,1,186,1,186,5,186,2395,8,186,10,186,12,186,2398,9,186,1,187,
	1,187,1,187,3,187,2403,8,187,1,188,1,188,1,188,1,189,1,189,1,189,1,190,
	1,190,1,190,3,190,2414,8,190,1,191,1,191,3,191,2418,8,191,1,192,1,192,1,
	192,1,192,1,193,3,193,2425,8,193,1,193,3,193,2428,8,193,1,193,3,193,2431,
	8,193,1,194,3,194,2434,8,194,1,194,1,194,1,195,1,195,1,195,1,196,1,196,
	3,196,2443,8,196,1,197,1,197,3,197,2447,8,197,1,198,1,198,1,198,1,199,1,
	199,1,199,1,199,1,200,1,200,1,200,5,200,2459,8,200,10,200,12,200,2462,9,
	200,1,201,1,201,1,201,1,201,1,202,1,202,3,202,2470,8,202,1,203,1,203,1,
	203,1,203,1,203,1,203,1,203,3,203,2479,8,203,1,204,1,204,1,204,1,204,1,
	205,1,205,1,205,1,205,1,206,1,206,1,206,1,206,1,207,1,207,1,207,1,207,1,
	208,1,208,1,208,1,208,1,209,1,209,1,209,1,209,1,210,1,210,1,210,1,210,1,
	211,1,211,1,212,1,212,3,212,2513,8,212,1,212,3,212,2516,8,212,1,212,1,212,
	3,212,2520,8,212,1,212,1,212,1,213,1,213,1,213,1,214,1,214,1,214,1,215,
	1,215,1,216,1,216,1,216,5,216,2535,8,216,10,216,12,216,2538,9,216,1,217,
	1,217,1,217,1,217,5,217,2544,8,217,10,217,12,217,2547,9,217,1,218,1,218,
	3,218,2551,8,218,1,218,1,218,1,219,1,219,1,219,3,219,2558,8,219,1,220,1,
	220,1,220,1,220,1,221,1,221,1,221,1,221,1,222,1,222,1,222,1,222,1,223,1,
	223,3,223,2574,8,223,1,223,3,223,2577,8,223,1,223,3,223,2580,8,223,1,224,
	1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
	1,224,3,224,2596,8,224,1,225,1,225,1,225,5,225,2601,8,225,10,225,12,225,
	2604,9,225,1,226,1,226,1,226,5,226,2609,8,226,10,226,12,226,2612,9,226,
	1,227,1,227,3,227,2616,8,227,1,228,1,228,1,228,1,229,1,229,1,229,3,229,
	2624,8,229,1,230,1,230,1,231,1,231,1,231,1,231,1,232,1,232,1,232,1,232,
	3,232,2636,8,232,1,233,1,233,1,233,1,233,1,234,1,234,3,234,2644,8,234,1,
	234,1,234,3,234,2648,8,234,1,234,1,234,1,235,1,235,1,236,1,236,1,237,1,
	237,1,237,1,237,1,237,1,237,1,237,3,237,2663,8,237,1,238,1,238,1,238,1,
	238,1,239,1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,241,1,241,1,241,1,
	241,1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,
	244,1,245,1,245,1,245,3,245,2696,8,245,1,246,1,246,1,246,5,246,2701,8,246,
	10,246,12,246,2704,9,246,1,247,1,247,1,247,5,247,2709,8,247,10,247,12,247,
	2712,9,247,1,248,1,248,5,248,2716,8,248,10,248,12,248,2719,9,248,1,249,
	1,249,1,249,5,249,2724,8,249,10,249,12,249,2727,9,249,1,250,1,250,1,250,
	3,250,2732,8,250,1,251,1,251,1,251,1,252,1,252,1,252,1,253,1,253,3,253,
	2742,8,253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,2751,8,254,1,
	255,1,255,1,255,1,256,1,256,1,256,1,257,1,257,1,257,1,258,1,258,1,258,1,
	259,1,259,1,259,1,259,1,260,1,260,1,260,1,260,1,261,1,261,1,261,1,262,1,
	262,3,262,2778,8,262,1,263,1,263,1,263,1,264,1,264,1,264,1,264,1,264,3,
	264,2788,8,264,1,265,1,265,1,265,1,266,1,266,1,266,1,267,1,267,1,267,4,
	267,2799,8,267,11,267,12,267,2800,1,268,1,268,3,268,2805,8,268,1,269,1,
	269,1,270,1,270,1,270,1,271,1,271,1,271,1,271,1,272,1,272,1,272,4,272,2819,
	8,272,11,272,12,272,2820,1,272,3,272,2824,8,272,1,273,1,273,1,274,1,274,
	1,274,1,275,1,275,1,275,1,275,1,276,1,276,1,276,1,276,1,276,1,276,3,276,
	2841,8,276,1,277,1,277,1,277,3,277,2846,8,277,1,277,1,277,1,277,1,278,1,
	278,1,279,1,279,1,280,1,280,1,281,3,281,2858,8,281,1,281,1,281,1,282,1,
	282,1,283,1,283,1,283,4,283,2867,8,283,11,283,12,283,2868,1,284,1,284,3,
	284,2873,8,284,1,284,3,284,2876,8,284,1,285,1,285,1,286,1,286,1,287,1,287,
	1,287,1,287,3,287,2886,8,287,1,288,1,288,1,288,1,289,1,289,1,289,1,290,
	1,290,1,291,3,291,2897,8,291,1,291,1,291,1,291,1,291,1,292,1,292,1,292,
	1,292,1,293,1,293,1,294,1,294,1,294,5,294,2912,8,294,10,294,12,294,2915,
	9,294,1,295,1,295,3,295,2919,8,295,1,296,1,296,1,296,1,296,3,296,2925,8,
	296,1,297,1,297,1,297,1,297,1,297,1,298,3,298,2933,8,298,1,298,1,298,3,
	298,2937,8,298,1,298,3,298,2940,8,298,1,299,1,299,1,300,1,300,1,300,1,300,
	1,300,3,300,2949,8,300,1,301,1,301,1,302,1,302,1,303,1,303,3,303,2957,8,
	303,1,303,1,303,1,303,3,303,2962,8,303,1,304,1,304,3,304,2966,8,304,1,305,
	3,305,2969,8,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,3,305,2978,8,
	305,1,306,1,306,1,307,1,307,1,307,1,307,1,307,3,307,2987,8,307,1,308,1,
	308,1,309,1,309,1,310,1,310,1,310,3,310,2996,8,310,1,311,1,311,1,311,1,
	311,1,312,1,312,1,312,1,312,1,313,1,313,1,313,1,313,1,314,1,314,1,314,1,
	314,1,315,1,315,1,315,1,315,1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,
	318,1,318,1,318,3,318,3028,8,318,1,319,1,319,1,319,1,319,1,320,1,320,1,
	320,1,320,1,321,1,321,1,321,1,321,1,322,1,322,3,322,3044,8,322,1,323,1,
	323,1,323,1,323,1,323,1,323,3,323,3052,8,323,1,323,3,323,3055,8,323,1,324,
	1,324,1,324,1,324,1,324,1,324,3,324,3063,8,324,1,324,3,324,3066,8,324,1,
	325,1,325,1,326,1,326,1,326,1,327,1,327,1,327,1,327,3,327,3077,8,327,1,
	328,1,328,1,328,1,328,1,328,1,328,1,329,1,329,1,329,1,329,1,329,1,329,1,
	330,1,330,1,330,1,330,1,330,1,330,1,331,1,331,1,332,1,332,1,333,1,333,1,
	334,1,334,1,335,1,335,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,3,
	336,3115,8,336,1,337,1,337,3,337,3119,8,337,1,337,1,337,1,338,1,338,1,338,
	5,338,3126,8,338,10,338,12,338,3129,9,338,1,339,1,339,3,339,3133,8,339,
	1,339,1,339,1,340,1,340,1,341,3,341,3140,8,341,1,341,1,341,1,341,1,342,
	1,342,1,342,3,342,3148,8,342,1,343,1,343,3,343,3152,8,343,1,344,1,344,1,
	344,1,344,1,344,1,344,1,344,3,344,3161,8,344,1,345,1,345,3,345,3165,8,345,
	1,346,1,346,1,346,1,346,1,346,3,346,3172,8,346,1,346,3,346,3175,8,346,1,
	347,1,347,1,347,1,347,3,347,3181,8,347,1,347,1,347,1,347,3,347,3186,8,347,
	1,347,3,347,3189,8,347,1,347,1,347,1,347,1,347,1,347,3,347,3196,8,347,1,
	347,3,347,3199,8,347,1,347,1,347,1,347,1,347,1,347,3,347,3206,8,347,1,347,
	3,347,3209,8,347,3,347,3211,8,347,1,348,1,348,1,349,1,349,1,350,1,350,1,
	351,1,351,3,351,3221,8,351,1,352,1,352,3,352,3225,8,352,1,353,1,353,3,353,
	3229,8,353,1,354,1,354,3,354,3233,8,354,1,354,1,354,3,354,3237,8,354,1,
	354,1,354,3,354,3241,8,354,1,354,1,354,3,354,3245,8,354,1,354,1,354,3,354,
	3249,8,354,1,354,1,354,3,354,3253,8,354,1,354,1,354,3,354,3257,8,354,1,
	354,1,354,1,354,1,354,1,354,3,354,3264,8,354,1,354,3,354,3267,8,354,1,354,
	1,354,3,354,3271,8,354,1,354,3,354,3274,8,354,1,354,3,354,3277,8,354,1,
	355,1,355,3,355,3281,8,355,1,355,1,355,3,355,3285,8,355,1,355,1,355,3,355,
	3289,8,355,1,355,1,355,3,355,3293,8,355,1,355,1,355,3,355,3297,8,355,1,
	355,1,355,3,355,3301,8,355,1,355,1,355,3,355,3305,8,355,1,355,1,355,1,355,
	1,355,1,355,3,355,3312,8,355,1,355,3,355,3315,8,355,1,355,1,355,3,355,3319,
	8,355,1,355,1,355,3,355,3323,8,355,1,356,1,356,3,356,3327,8,356,1,356,1,
	356,3,356,3331,8,356,1,356,1,356,3,356,3335,8,356,1,356,1,356,3,356,3339,
	8,356,1,356,1,356,3,356,3343,8,356,1,356,1,356,3,356,3347,8,356,1,356,1,
	356,1,356,3,356,3352,8,356,1,356,1,356,1,356,1,356,1,356,3,356,3359,8,356,
	1,356,3,356,3362,8,356,1,356,1,356,1,356,3,356,3367,8,356,3,356,3369,8,
	356,1,357,1,357,1,357,1,357,1,357,3,357,3376,8,357,1,357,1,357,3,357,3380,
	8,357,1,357,3,357,3383,8,357,1,358,1,358,1,359,1,359,1,360,1,360,3,360,
	3391,8,360,1,360,1,360,3,360,3395,8,360,1,360,1,360,3,360,3399,8,360,1,
	360,1,360,3,360,3403,8,360,1,360,1,360,3,360,3407,8,360,1,360,1,360,1,360,
	1,360,1,360,3,360,3414,8,360,1,360,1,360,3,360,3418,8,360,1,360,3,360,3421,
	8,360,1,360,1,360,3,360,3425,8,360,1,360,1,360,3,360,3429,8,360,1,360,3,
	360,3432,8,360,1,361,1,361,3,361,3436,8,361,1,362,1,362,1,362,1,362,1,362,
	3,362,3443,8,362,1,363,1,363,1,364,1,364,1,364,3,364,3450,8,364,1,364,1,
	364,1,364,1,364,3,364,3456,8,364,3,364,3458,8,364,1,365,1,365,1,365,3,365,
	3463,8,365,1,365,1,365,1,365,1,365,1,365,3,365,3470,8,365,3,365,3472,8,
	365,1,366,1,366,3,366,3476,8,366,1,367,1,367,1,367,3,367,3481,8,367,1,367,
	1,367,1,367,1,367,3,367,3487,8,367,3,367,3489,8,367,1,368,1,368,1,368,3,
	368,3494,8,368,1,368,1,368,1,368,1,368,3,368,3500,8,368,3,368,3502,8,368,
	1,369,1,369,3,369,3506,8,369,1,370,1,370,1,370,1,370,3,370,3512,8,370,1,
	371,1,371,3,371,3516,8,371,1,372,1,372,3,372,3520,8,372,1,372,1,372,3,372,
	3524,8,372,1,373,1,373,3,373,3528,8,373,1,374,1,374,3,374,3532,8,374,1,
	375,1,375,3,375,3536,8,375,1,376,3,376,3539,8,376,1,376,1,376,3,376,3543,
	8,376,1,377,1,377,3,377,3547,8,377,1,378,1,378,3,378,3551,8,378,1,379,3,
	379,3554,8,379,1,379,1,379,3,379,3558,8,379,1,380,1,380,3,380,3562,8,380,
	1,381,1,381,3,381,3566,8,381,1,382,1,382,1,382,1,382,1,382,1,382,1,382,
	1,382,3,382,3576,8,382,1,382,3,382,3579,8,382,1,382,1,382,1,382,1,382,1,
	382,1,382,3,382,3587,8,382,1,382,3,382,3590,8,382,3,382,3592,8,382,1,383,
	3,383,3595,8,383,1,383,1,383,1,384,1,384,1,385,3,385,3602,8,385,1,385,1,
	385,3,385,3606,8,385,1,385,3,385,3609,8,385,1,385,1,385,3,385,3613,8,385,
	3,385,3615,8,385,1,386,1,386,3,386,3619,8,386,1,386,1,386,1,387,1,387,1,
	387,4,387,3626,8,387,11,387,12,387,3627,1,388,1,388,1,388,3,388,3633,8,
	388,1,389,1,389,1,390,3,390,3638,8,390,1,390,1,390,1,390,1,391,1,391,1,
	391,1,391,1,391,1,392,1,392,1,392,5,392,3651,8,392,10,392,12,392,3654,9,
	392,1,393,1,393,1,394,1,394,1,395,1,395,1,395,1,396,1,396,1,396,1,396,1,
	397,1,397,1,397,3,397,3670,8,397,1,398,1,398,1,398,1,398,3,398,3676,8,398,
	1,399,1,399,1,399,1,400,1,400,1,400,1,400,3,400,3685,8,400,1,401,1,401,
	1,402,1,402,3,402,3691,8,402,1,403,1,403,1,403,5,403,3696,8,403,10,403,
	12,403,3699,9,403,1,403,1,403,3,403,3703,8,403,3,403,3705,8,403,1,404,1,
	404,1,404,4,404,3710,8,404,11,404,12,404,3711,1,405,1,405,1,405,1,405,1,
	405,1,405,3,405,3720,8,405,1,406,3,406,3723,8,406,1,406,1,406,1,407,1,407,
	1,408,1,408,3,408,3731,8,408,1,409,3,409,3734,8,409,1,409,1,409,1,410,1,
	410,1,410,1,410,1,410,3,410,3743,8,410,1,411,3,411,3746,8,411,1,411,1,411,
	1,412,1,412,3,412,3752,8,412,1,413,3,413,3755,8,413,1,413,1,413,1,414,1,
	414,3,414,3761,8,414,1,414,1,414,1,414,5,414,3766,8,414,10,414,12,414,3769,
	9,414,1,414,1,414,1,414,4,414,3774,8,414,11,414,12,414,3775,3,414,3778,
	8,414,1,415,1,415,1,416,1,416,1,417,1,417,1,418,1,418,1,418,1,418,1,418,
	1,418,1,418,1,418,1,418,1,418,1,418,3,418,3797,8,418,1,419,1,419,1,419,
	1,420,1,420,1,420,1,421,1,421,1,421,1,421,1,421,1,421,3,421,3811,8,421,
	1,422,1,422,1,423,1,423,1,423,1,424,1,424,1,425,1,425,1,426,1,426,1,426,
	1,427,1,427,1,427,1,428,1,428,3,428,3830,8,428,1,429,1,429,1,429,1,429,
	1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,
	1,429,1,429,3,429,3850,8,429,1,430,1,430,1,430,1,431,1,431,3,431,3857,8,
	431,1,431,1,431,1,432,1,432,1,432,1,433,1,433,3,433,3866,8,433,1,433,1,
	433,1,433,1,434,1,434,1,434,1,435,1,435,3,435,3876,8,435,1,435,3,435,3879,
	8,435,1,435,1,435,1,436,1,436,1,436,1,437,1,437,3,437,3888,8,437,1,437,
	1,437,1,438,1,438,1,439,1,439,1,439,1,440,1,440,3,440,3899,8,440,1,440,
	1,440,3,440,3903,8,440,1,441,1,441,1,441,1,441,1,441,1,441,3,441,3911,8,
	441,1,442,1,442,1,443,1,443,3,443,3917,8,443,1,443,1,443,1,443,1,443,1,
	444,1,444,3,444,3925,8,444,1,444,1,444,1,444,1,444,1,445,1,445,1,446,1,
	446,1,446,1,446,1,446,4,446,3938,8,446,11,446,12,446,3939,1,446,1,446,1,
	447,1,447,1,447,1,447,1,447,4,447,3949,8,447,11,447,12,447,3950,1,447,1,
	447,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,449,1,449,3,449,3964,8,
	449,1,450,1,450,3,450,3968,8,450,1,451,1,451,3,451,3972,8,451,1,452,1,452,
	3,452,3976,8,452,1,453,1,453,1,454,1,454,3,454,3982,8,454,1,455,1,455,1,
	455,1,455,1,455,1,455,1,455,1,455,1,455,3,455,3993,8,455,1,456,1,456,1,
	456,4,456,3998,8,456,11,456,12,456,3999,1,457,1,457,1,457,1,457,3,457,4006,
	8,457,1,458,3,458,4009,8,458,1,458,1,458,1,458,3,458,4014,8,458,1,459,3,
	459,4017,8,459,1,459,1,459,1,459,3,459,4022,8,459,1,460,1,460,1,461,1,461,
	1,462,1,462,1,463,1,463,1,464,1,464,1,464,1,464,1,464,1,464,1,464,1,464,
	1,464,3,464,4041,8,464,1,465,1,465,1,465,1,465,1,465,1,465,5,465,4049,8,
	465,10,465,12,465,4052,9,465,1,466,3,466,4055,8,466,1,466,1,466,1,467,1,
	467,1,467,3,467,4062,8,467,1,467,3,467,4065,8,467,1,468,1,468,1,469,1,469,
	3,469,4071,8,469,1,470,1,470,3,470,4075,8,470,1,471,1,471,1,471,1,471,1,
	472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,3,472,4090,8,472,1,
	473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,3,473,4101,8,473,1,
	474,3,474,4104,8,474,1,474,1,474,1,475,1,475,3,475,4110,8,475,1,476,1,476,
	3,476,4114,8,476,1,477,1,477,1,477,1,477,1,478,1,478,3,478,4122,8,478,1,
	479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,4132,8,479,1,480,1,
	480,1,480,3,480,4137,8,480,1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,
	481,1,481,1,481,3,481,4149,8,481,1,482,1,482,1,482,3,482,4154,8,482,1,483,
	1,483,1,483,1,483,1,483,1,484,1,484,1,484,1,484,1,484,1,485,1,485,1,485,
	1,485,1,485,1,486,1,486,1,486,1,486,1,486,1,487,1,487,1,487,1,487,1,487,
	1,487,1,487,1,488,1,488,1,489,1,489,1,490,1,490,1,490,1,490,1,490,1,491,
	1,491,1,492,1,492,1,492,3,492,4197,8,492,1,493,1,493,1,493,1,493,1,493,
	1,493,1,493,1,494,1,494,1,495,1,495,1,496,1,496,1,496,1,496,1,496,1,497,
	1,497,1,497,1,497,1,497,1,498,1,498,1,498,1,498,1,498,1,499,1,499,1,499,
	1,499,1,499,1,499,1,499,1,500,1,500,1,501,1,501,1,502,1,502,1,502,1,502,
	1,502,1,503,1,503,1,503,1,503,1,503,1,504,1,504,1,504,1,504,1,504,1,505,
	1,505,3,505,4253,8,505,1,506,1,506,3,506,4257,8,506,1,507,1,507,1,507,1,
	507,1,508,1,508,1,509,1,509,3,509,4267,8,509,1,510,1,510,3,510,4271,8,510,
	1,511,1,511,1,512,1,512,3,512,4277,8,512,1,513,1,513,1,513,1,513,1,514,
	1,514,3,514,4285,8,514,1,515,1,515,1,515,3,515,4290,8,515,1,516,1,516,1,
	516,1,516,1,516,1,517,1,517,3,517,4299,8,517,1,518,1,518,1,518,1,518,1,
	518,1,519,1,519,1,519,1,519,1,519,1,519,1,519,1,519,1,520,3,520,4315,8,
	520,1,520,3,520,4318,8,520,1,520,3,520,4321,8,520,1,520,1,520,1,521,1,521,
	1,522,1,522,1,523,1,523,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
	1,525,1,525,1,526,1,526,1,527,1,527,1,527,1,527,1,527,1,528,3,528,4349,
	8,528,1,528,3,528,4352,8,528,1,528,3,528,4355,8,528,1,528,1,528,1,529,1,
	529,1,530,1,530,1,531,1,531,1,532,1,532,1,532,1,532,1,532,1,532,3,532,4371,
	8,532,1,532,1,532,1,532,1,532,1,532,1,532,5,532,4379,8,532,10,532,12,532,
	4382,9,532,1,533,1,533,1,534,1,534,1,535,1,535,3,535,4390,8,535,1,536,1,
	536,1,536,1,536,1,536,3,536,4397,8,536,1,537,1,537,1,537,1,537,3,537,4403,
	8,537,1,537,3,537,4406,8,537,1,538,1,538,1,538,1,538,3,538,4412,8,538,1,
	538,3,538,4415,8,538,1,539,1,539,1,539,3,539,4420,8,539,1,539,3,539,4423,
	8,539,1,540,1,540,1,540,1,540,3,540,4429,8,540,1,540,3,540,4432,8,540,1,
	541,1,541,1,541,1,541,3,541,4438,8,541,1,541,3,541,4441,8,541,1,542,1,542,
	3,542,4445,8,542,1,543,1,543,3,543,4449,8,543,1,544,1,544,3,544,4453,8,
	544,1,545,1,545,1,545,3,545,4458,8,545,1,545,1,545,1,545,1,545,1,545,1,
	545,5,545,4466,8,545,10,545,12,545,4469,9,545,1,546,1,546,1,546,1,546,1,
	546,1,547,1,547,1,547,1,547,1,548,1,548,1,548,1,548,1,548,1,548,3,548,4486,
	8,548,1,548,1,548,1,548,1,548,1,548,1,548,5,548,4494,8,548,10,548,12,548,
	4497,9,548,1,549,3,549,4500,8,549,1,549,1,549,1,550,1,550,3,550,4506,8,
	550,1,551,1,551,1,552,1,552,1,553,1,553,1,554,1,554,1,555,1,555,1,556,1,
	556,3,556,4520,8,556,1,557,1,557,1,557,1,557,1,557,1,558,1,558,3,558,4529,
	8,558,1,559,1,559,1,559,1,559,1,559,1,560,1,560,3,560,4538,8,560,1,561,
	1,561,1,561,1,561,1,562,1,562,3,562,4546,8,562,1,563,1,563,1,563,1,564,
	1,564,1,564,1,564,1,564,1,564,1,564,1,565,1,565,1,565,1,565,1,565,1,566,
	1,566,1,567,1,567,1,567,1,567,1,567,1,567,1,567,1,568,1,568,1,568,5,568,
	4575,8,568,10,568,12,568,4578,9,568,1,569,1,569,1,570,3,570,4583,8,570,
	1,570,1,570,1,571,1,571,3,571,4589,8,571,1,571,1,571,1,572,1,572,1,572,
	5,572,4596,8,572,10,572,12,572,4599,9,572,1,573,1,573,1,573,1,573,1,574,
	1,574,3,574,4607,8,574,1,575,1,575,1,575,1,575,1,576,1,576,1,577,1,577,
	1,578,1,578,1,578,1,578,1,578,1,579,1,579,3,579,4624,8,579,1,580,1,580,
	1,581,1,581,1,581,1,581,1,581,1,582,1,582,1,582,1,582,1,583,1,583,1,583,
	3,583,4640,8,583,1,584,1,584,1,584,1,585,1,585,3,585,4647,8,585,1,586,1,
	586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,5,586,4661,
	8,586,10,586,12,586,4664,9,586,1,586,1,586,3,586,4668,8,586,1,587,1,587,
	3,587,4672,8,587,1,588,1,588,1,588,1,588,3,588,4678,8,588,1,588,1,588,1,
	589,1,589,1,589,3,589,4685,8,589,1,589,1,589,1,590,1,590,1,590,1,590,1,
	590,1,591,1,591,1,591,1,591,1,591,1,592,1,592,1,592,1,593,1,593,3,593,4704,
	8,593,1,594,1,594,1,594,5,594,4709,8,594,10,594,12,594,4712,9,594,1,595,
	1,595,1,595,1,595,1,595,1,595,1,595,1,595,3,595,4722,8,595,1,596,1,596,
	3,596,4726,8,596,1,597,1,597,1,598,1,598,1,598,1,598,1,598,1,598,1,598,
	1,599,1,599,1,600,1,600,1,601,1,601,1,601,1,601,1,601,1,602,1,602,1,602,
	1,602,1,602,1,602,1,603,1,603,3,603,4754,8,603,1,604,1,604,1,604,3,604,
	4759,8,604,1,605,1,605,1,605,1,605,1,605,1,605,3,605,4767,8,605,1,606,1,
	606,3,606,4771,8,606,1,607,1,607,1,608,1,608,1,608,3,608,4778,8,608,1,609,
	3,609,4781,8,609,1,609,1,609,3,609,4785,8,609,1,609,3,609,4788,8,609,1,
	610,3,610,4791,8,610,1,610,1,610,1,610,5,610,4796,8,610,10,610,12,610,4799,
	9,610,1,611,3,611,4802,8,611,1,611,1,611,1,611,5,611,4807,8,611,10,611,
	12,611,4810,9,611,1,612,3,612,4813,8,612,1,612,1,612,1,612,5,612,4818,8,
	612,10,612,12,612,4821,9,612,1,613,1,613,1,614,1,614,1,615,1,615,1,616,
	1,616,1,617,1,617,1,617,1,617,3,617,4835,8,617,1,618,1,618,1,618,1,619,
	1,619,1,619,1,620,1,620,1,620,1,620,3,620,4847,8,620,1,621,1,621,1,622,
	1,622,1,623,1,623,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,
	1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,
	1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,
	1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,3,624,4897,8,624,
	1,625,1,625,1,625,3,625,4902,8,625,1,626,1,626,1,627,1,627,1,627,1,628,
	1,628,1,629,1,629,1,630,1,630,1,631,1,631,1,632,1,632,1,633,1,633,1,634,
	1,634,1,635,1,635,1,636,1,636,3,636,4927,8,636,1,637,1,637,1,638,1,638,
	1,639,1,639,1,640,1,640,3,640,4937,8,640,1,641,1,641,1,642,1,642,1,643,
	1,643,1,644,1,644,1,645,1,645,1,646,1,646,1,646,1,647,1,647,1,647,1,647,
	1,647,3,647,4957,8,647,1,648,1,648,1,649,1,649,3,649,4963,8,649,1,650,1,
	650,3,650,4967,8,650,1,651,1,651,1,652,1,652,1,653,1,653,1,654,1,654,1,
	655,1,655,1,656,1,656,1,657,1,657,3,657,4983,8,657,1,658,1,658,1,658,1,
	658,1,658,1,658,3,658,4991,8,658,1,659,1,659,3,659,4995,8,659,1,660,1,660,
	3,660,4999,8,660,1,661,1,661,1,662,1,662,3,662,5005,8,662,1,663,1,663,3,
	663,5009,8,663,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
	664,1,664,1,664,1,664,3,664,5228,8,664,1,665,1,665,1,666,1,666,1,667,1,
	667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,
	667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,
	667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,3,
	667,5271,8,667,1,668,1,668,1,669,1,669,1,670,1,670,1,670,0,5,190,930,1064,
	1090,1096,671,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
	90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
	128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
	164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
	200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
	236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
	272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
	308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
	344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
	380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
	416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
	452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,
	488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
	524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,
	560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,
	596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
	632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,
	668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,
	704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,
	740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,
	776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
	812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,
	848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,
	884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,
	920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,
	956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,
	992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,
	1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,
	1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,
	1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,
	1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,
	1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,
	1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,
	1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,
	1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,
	1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,
	1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,
	1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,0,40,2,0,91,91,204,204,
	2,0,95,95,220,220,1,0,103,104,2,0,118,118,189,189,3,0,127,127,165,165,257,
	257,2,0,197,197,338,338,4,0,311,311,345,345,351,351,356,356,2,0,205,205,
	207,207,2,0,142,142,324,324,6,0,1,2,5,5,10,10,20,20,27,27,50,50,6,0,73,
	73,94,94,100,100,183,184,236,237,239,239,2,0,62,62,119,119,1,0,208,209,
	2,0,68,69,116,117,2,0,197,197,231,231,2,0,317,317,354,354,2,0,10,10,350,
	350,2,0,50,50,350,350,1,0,77,78,2,0,238,238,265,265,1,0,112,113,2,0,66,
	66,172,172,3,0,54,54,105,105,146,146,1,0,144,145,3,0,130,130,247,247,258,
	258,1,0,89,90,2,0,82,82,195,195,8,0,61,61,70,70,72,72,97,99,114,114,213,
	213,229,230,240,241,1,0,87,88,2,0,180,180,260,260,3,0,80,80,181,181,221,
	221,3,0,79,79,168,168,245,245,1,0,330,333,1,0,360,363,1,0,396,397,1,0,276,
	310,1,0,311,359,2,0,318,318,341,341,2,0,319,319,342,342,2,0,335,335,355,
	355,5571,0,1345,1,0,0,0,2,1350,1,0,0,0,4,1356,1,0,0,0,6,1360,1,0,0,0,8,
	1362,1,0,0,0,10,1370,1,0,0,0,12,1374,1,0,0,0,14,1379,1,0,0,0,16,1383,1,
	0,0,0,18,1388,1,0,0,0,20,1391,1,0,0,0,22,1398,1,0,0,0,24,1404,1,0,0,0,26,
	1409,1,0,0,0,28,1414,1,0,0,0,30,1432,1,0,0,0,32,1435,1,0,0,0,34,1451,1,
	0,0,0,36,1453,1,0,0,0,38,1458,1,0,0,0,40,1460,1,0,0,0,42,1469,1,0,0,0,44,
	1475,1,0,0,0,46,1477,1,0,0,0,48,1479,1,0,0,0,50,1483,1,0,0,0,52,1485,1,
	0,0,0,54,1489,1,0,0,0,56,1494,1,0,0,0,58,1502,1,0,0,0,60,1509,1,0,0,0,62,
	1511,1,0,0,0,64,1521,1,0,0,0,66,1523,1,0,0,0,68,1530,1,0,0,0,70,1540,1,
	0,0,0,72,1544,1,0,0,0,74,1548,1,0,0,0,76,1558,1,0,0,0,78,1562,1,0,0,0,80,
	1565,1,0,0,0,82,1573,1,0,0,0,84,1577,1,0,0,0,86,1585,1,0,0,0,88,1587,1,
	0,0,0,90,1589,1,0,0,0,92,1595,1,0,0,0,94,1597,1,0,0,0,96,1608,1,0,0,0,98,
	1611,1,0,0,0,100,1617,1,0,0,0,102,1625,1,0,0,0,104,1627,1,0,0,0,106,1634,
	1,0,0,0,108,1643,1,0,0,0,110,1645,1,0,0,0,112,1661,1,0,0,0,114,1676,1,0,
	0,0,116,1694,1,0,0,0,118,1696,1,0,0,0,120,1699,1,0,0,0,122,1704,1,0,0,0,
	124,1714,1,0,0,0,126,1744,1,0,0,0,128,1746,1,0,0,0,130,1752,1,0,0,0,132,
	1763,1,0,0,0,134,1767,1,0,0,0,136,1771,1,0,0,0,138,1773,1,0,0,0,140,1778,
	1,0,0,0,142,1783,1,0,0,0,144,1785,1,0,0,0,146,1790,1,0,0,0,148,1796,1,0,
	0,0,150,1800,1,0,0,0,152,1806,1,0,0,0,154,1808,1,0,0,0,156,1811,1,0,0,0,
	158,1814,1,0,0,0,160,1824,1,0,0,0,162,1826,1,0,0,0,164,1832,1,0,0,0,166,
	1840,1,0,0,0,168,1844,1,0,0,0,170,1852,1,0,0,0,172,1855,1,0,0,0,174,1864,
	1,0,0,0,176,1866,1,0,0,0,178,1870,1,0,0,0,180,1874,1,0,0,0,182,1878,1,0,
	0,0,184,1885,1,0,0,0,186,1887,1,0,0,0,188,1889,1,0,0,0,190,1891,1,0,0,0,
	192,1905,1,0,0,0,194,1907,1,0,0,0,196,1910,1,0,0,0,198,1914,1,0,0,0,200,
	1926,1,0,0,0,202,1928,1,0,0,0,204,1931,1,0,0,0,206,1935,1,0,0,0,208,1938,
	1,0,0,0,210,1946,1,0,0,0,212,1948,1,0,0,0,214,1957,1,0,0,0,216,1964,1,0,
	0,0,218,1968,1,0,0,0,220,1970,1,0,0,0,222,1973,1,0,0,0,224,1985,1,0,0,0,
	226,1988,1,0,0,0,228,1992,1,0,0,0,230,1994,1,0,0,0,232,1999,1,0,0,0,234,
	2002,1,0,0,0,236,2014,1,0,0,0,238,2016,1,0,0,0,240,2021,1,0,0,0,242,2024,
	1,0,0,0,244,2027,1,0,0,0,246,2043,1,0,0,0,248,2050,1,0,0,0,250,2052,1,0,
	0,0,252,2067,1,0,0,0,254,2069,1,0,0,0,256,2077,1,0,0,0,258,2081,1,0,0,0,
	260,2084,1,0,0,0,262,2113,1,0,0,0,264,2120,1,0,0,0,266,2124,1,0,0,0,268,
	2127,1,0,0,0,270,2133,1,0,0,0,272,2135,1,0,0,0,274,2143,1,0,0,0,276,2152,
	1,0,0,0,278,2155,1,0,0,0,280,2162,1,0,0,0,282,2165,1,0,0,0,284,2169,1,0,
	0,0,286,2175,1,0,0,0,288,2182,1,0,0,0,290,2189,1,0,0,0,292,2196,1,0,0,0,
	294,2198,1,0,0,0,296,2201,1,0,0,0,298,2204,1,0,0,0,300,2206,1,0,0,0,302,
	2208,1,0,0,0,304,2210,1,0,0,0,306,2212,1,0,0,0,308,2216,1,0,0,0,310,2219,
	1,0,0,0,312,2226,1,0,0,0,314,2230,1,0,0,0,316,2241,1,0,0,0,318,2243,1,0,
	0,0,320,2246,1,0,0,0,322,2254,1,0,0,0,324,2261,1,0,0,0,326,2263,1,0,0,0,
	328,2272,1,0,0,0,330,2282,1,0,0,0,332,2285,1,0,0,0,334,2288,1,0,0,0,336,
	2293,1,0,0,0,338,2295,1,0,0,0,340,2299,1,0,0,0,342,2304,1,0,0,0,344,2306,
	1,0,0,0,346,2313,1,0,0,0,348,2315,1,0,0,0,350,2325,1,0,0,0,352,2331,1,0,
	0,0,354,2333,1,0,0,0,356,2341,1,0,0,0,358,2349,1,0,0,0,360,2357,1,0,0,0,
	362,2367,1,0,0,0,364,2369,1,0,0,0,366,2374,1,0,0,0,368,2376,1,0,0,0,370,
	2384,1,0,0,0,372,2392,1,0,0,0,374,2402,1,0,0,0,376,2404,1,0,0,0,378,2407,
	1,0,0,0,380,2413,1,0,0,0,382,2417,1,0,0,0,384,2419,1,0,0,0,386,2424,1,0,
	0,0,388,2433,1,0,0,0,390,2437,1,0,0,0,392,2442,1,0,0,0,394,2446,1,0,0,0,
	396,2448,1,0,0,0,398,2451,1,0,0,0,400,2455,1,0,0,0,402,2463,1,0,0,0,404,
	2469,1,0,0,0,406,2478,1,0,0,0,408,2480,1,0,0,0,410,2484,1,0,0,0,412,2488,
	1,0,0,0,414,2492,1,0,0,0,416,2496,1,0,0,0,418,2500,1,0,0,0,420,2504,1,0,
	0,0,422,2508,1,0,0,0,424,2510,1,0,0,0,426,2523,1,0,0,0,428,2526,1,0,0,0,
	430,2529,1,0,0,0,432,2531,1,0,0,0,434,2539,1,0,0,0,436,2548,1,0,0,0,438,
	2557,1,0,0,0,440,2559,1,0,0,0,442,2563,1,0,0,0,444,2567,1,0,0,0,446,2579,
	1,0,0,0,448,2595,1,0,0,0,450,2597,1,0,0,0,452,2605,1,0,0,0,454,2615,1,0,
	0,0,456,2617,1,0,0,0,458,2623,1,0,0,0,460,2625,1,0,0,0,462,2627,1,0,0,0,
	464,2635,1,0,0,0,466,2637,1,0,0,0,468,2641,1,0,0,0,470,2651,1,0,0,0,472,
	2653,1,0,0,0,474,2662,1,0,0,0,476,2664,1,0,0,0,478,2668,1,0,0,0,480,2672,
	1,0,0,0,482,2676,1,0,0,0,484,2680,1,0,0,0,486,2684,1,0,0,0,488,2688,1,0,
	0,0,490,2695,1,0,0,0,492,2697,1,0,0,0,494,2705,1,0,0,0,496,2713,1,0,0,0,
	498,2720,1,0,0,0,500,2731,1,0,0,0,502,2733,1,0,0,0,504,2736,1,0,0,0,506,
	2741,1,0,0,0,508,2750,1,0,0,0,510,2752,1,0,0,0,512,2755,1,0,0,0,514,2758,
	1,0,0,0,516,2761,1,0,0,0,518,2764,1,0,0,0,520,2768,1,0,0,0,522,2772,1,0,
	0,0,524,2777,1,0,0,0,526,2779,1,0,0,0,528,2787,1,0,0,0,530,2789,1,0,0,0,
	532,2792,1,0,0,0,534,2795,1,0,0,0,536,2802,1,0,0,0,538,2806,1,0,0,0,540,
	2808,1,0,0,0,542,2811,1,0,0,0,544,2823,1,0,0,0,546,2825,1,0,0,0,548,2827,
	1,0,0,0,550,2830,1,0,0,0,552,2840,1,0,0,0,554,2842,1,0,0,0,556,2850,1,0,
	0,0,558,2852,1,0,0,0,560,2854,1,0,0,0,562,2857,1,0,0,0,564,2861,1,0,0,0,
	566,2863,1,0,0,0,568,2870,1,0,0,0,570,2877,1,0,0,0,572,2879,1,0,0,0,574,
	2885,1,0,0,0,576,2887,1,0,0,0,578,2890,1,0,0,0,580,2893,1,0,0,0,582,2896,
	1,0,0,0,584,2902,1,0,0,0,586,2906,1,0,0,0,588,2908,1,0,0,0,590,2918,1,0,
	0,0,592,2924,1,0,0,0,594,2926,1,0,0,0,596,2939,1,0,0,0,598,2941,1,0,0,0,
	600,2948,1,0,0,0,602,2950,1,0,0,0,604,2952,1,0,0,0,606,2961,1,0,0,0,608,
	2965,1,0,0,0,610,2977,1,0,0,0,612,2979,1,0,0,0,614,2986,1,0,0,0,616,2988,
	1,0,0,0,618,2990,1,0,0,0,620,2995,1,0,0,0,622,2997,1,0,0,0,624,3001,1,0,
	0,0,626,3005,1,0,0,0,628,3009,1,0,0,0,630,3013,1,0,0,0,632,3017,1,0,0,0,
	634,3021,1,0,0,0,636,3027,1,0,0,0,638,3029,1,0,0,0,640,3033,1,0,0,0,642,
	3037,1,0,0,0,644,3043,1,0,0,0,646,3054,1,0,0,0,648,3065,1,0,0,0,650,3067,
	1,0,0,0,652,3069,1,0,0,0,654,3076,1,0,0,0,656,3078,1,0,0,0,658,3084,1,0,
	0,0,660,3090,1,0,0,0,662,3096,1,0,0,0,664,3098,1,0,0,0,666,3100,1,0,0,0,
	668,3102,1,0,0,0,670,3104,1,0,0,0,672,3114,1,0,0,0,674,3116,1,0,0,0,676,
	3122,1,0,0,0,678,3130,1,0,0,0,680,3136,1,0,0,0,682,3139,1,0,0,0,684,3147,
	1,0,0,0,686,3151,1,0,0,0,688,3160,1,0,0,0,690,3162,1,0,0,0,692,3166,1,0,
	0,0,694,3210,1,0,0,0,696,3212,1,0,0,0,698,3214,1,0,0,0,700,3216,1,0,0,0,
	702,3220,1,0,0,0,704,3224,1,0,0,0,706,3228,1,0,0,0,708,3276,1,0,0,0,710,
	3322,1,0,0,0,712,3368,1,0,0,0,714,3370,1,0,0,0,716,3384,1,0,0,0,718,3386,
	1,0,0,0,720,3431,1,0,0,0,722,3435,1,0,0,0,724,3442,1,0,0,0,726,3444,1,0,
	0,0,728,3457,1,0,0,0,730,3471,1,0,0,0,732,3473,1,0,0,0,734,3488,1,0,0,0,
	736,3501,1,0,0,0,738,3503,1,0,0,0,740,3511,1,0,0,0,742,3515,1,0,0,0,744,
	3517,1,0,0,0,746,3525,1,0,0,0,748,3529,1,0,0,0,750,3535,1,0,0,0,752,3538,
	1,0,0,0,754,3544,1,0,0,0,756,3550,1,0,0,0,758,3553,1,0,0,0,760,3559,1,0,
	0,0,762,3565,1,0,0,0,764,3591,1,0,0,0,766,3594,1,0,0,0,768,3598,1,0,0,0,
	770,3614,1,0,0,0,772,3616,1,0,0,0,774,3622,1,0,0,0,776,3632,1,0,0,0,778,
	3634,1,0,0,0,780,3637,1,0,0,0,782,3642,1,0,0,0,784,3647,1,0,0,0,786,3655,
	1,0,0,0,788,3657,1,0,0,0,790,3659,1,0,0,0,792,3662,1,0,0,0,794,3669,1,0,
	0,0,796,3675,1,0,0,0,798,3677,1,0,0,0,800,3684,1,0,0,0,802,3686,1,0,0,0,
	804,3688,1,0,0,0,806,3692,1,0,0,0,808,3709,1,0,0,0,810,3719,1,0,0,0,812,
	3722,1,0,0,0,814,3726,1,0,0,0,816,3730,1,0,0,0,818,3733,1,0,0,0,820,3742,
	1,0,0,0,822,3745,1,0,0,0,824,3751,1,0,0,0,826,3754,1,0,0,0,828,3777,1,0,
	0,0,830,3779,1,0,0,0,832,3781,1,0,0,0,834,3783,1,0,0,0,836,3796,1,0,0,0,
	838,3798,1,0,0,0,840,3801,1,0,0,0,842,3810,1,0,0,0,844,3812,1,0,0,0,846,
	3814,1,0,0,0,848,3817,1,0,0,0,850,3819,1,0,0,0,852,3821,1,0,0,0,854,3824,
	1,0,0,0,856,3829,1,0,0,0,858,3831,1,0,0,0,860,3851,1,0,0,0,862,3854,1,0,
	0,0,864,3860,1,0,0,0,866,3863,1,0,0,0,868,3870,1,0,0,0,870,3873,1,0,0,0,
	872,3882,1,0,0,0,874,3885,1,0,0,0,876,3891,1,0,0,0,878,3893,1,0,0,0,880,
	3902,1,0,0,0,882,3910,1,0,0,0,884,3912,1,0,0,0,886,3914,1,0,0,0,888,3922,
	1,0,0,0,890,3930,1,0,0,0,892,3932,1,0,0,0,894,3943,1,0,0,0,896,3954,1,0,
	0,0,898,3963,1,0,0,0,900,3967,1,0,0,0,902,3971,1,0,0,0,904,3975,1,0,0,0,
	906,3977,1,0,0,0,908,3981,1,0,0,0,910,3992,1,0,0,0,912,3994,1,0,0,0,914,
	4005,1,0,0,0,916,4013,1,0,0,0,918,4021,1,0,0,0,920,4023,1,0,0,0,922,4025,
	1,0,0,0,924,4027,1,0,0,0,926,4029,1,0,0,0,928,4040,1,0,0,0,930,4042,1,0,
	0,0,932,4054,1,0,0,0,934,4058,1,0,0,0,936,4066,1,0,0,0,938,4070,1,0,0,0,
	940,4074,1,0,0,0,942,4076,1,0,0,0,944,4089,1,0,0,0,946,4100,1,0,0,0,948,
	4103,1,0,0,0,950,4109,1,0,0,0,952,4113,1,0,0,0,954,4115,1,0,0,0,956,4121,
	1,0,0,0,958,4131,1,0,0,0,960,4136,1,0,0,0,962,4148,1,0,0,0,964,4153,1,0,
	0,0,966,4155,1,0,0,0,968,4160,1,0,0,0,970,4165,1,0,0,0,972,4170,1,0,0,0,
	974,4175,1,0,0,0,976,4182,1,0,0,0,978,4184,1,0,0,0,980,4186,1,0,0,0,982,
	4191,1,0,0,0,984,4196,1,0,0,0,986,4198,1,0,0,0,988,4205,1,0,0,0,990,4207,
	1,0,0,0,992,4209,1,0,0,0,994,4214,1,0,0,0,996,4219,1,0,0,0,998,4224,1,0,
	0,0,1000,4231,1,0,0,0,1002,4233,1,0,0,0,1004,4235,1,0,0,0,1006,4240,1,0,
	0,0,1008,4245,1,0,0,0,1010,4252,1,0,0,0,1012,4256,1,0,0,0,1014,4258,1,0,
	0,0,1016,4262,1,0,0,0,1018,4266,1,0,0,0,1020,4270,1,0,0,0,1022,4272,1,0,
	0,0,1024,4276,1,0,0,0,1026,4278,1,0,0,0,1028,4284,1,0,0,0,1030,4289,1,0,
	0,0,1032,4291,1,0,0,0,1034,4298,1,0,0,0,1036,4300,1,0,0,0,1038,4305,1,0,
	0,0,1040,4320,1,0,0,0,1042,4324,1,0,0,0,1044,4326,1,0,0,0,1046,4328,1,0,
	0,0,1048,4330,1,0,0,0,1050,4338,1,0,0,0,1052,4340,1,0,0,0,1054,4342,1,0,
	0,0,1056,4354,1,0,0,0,1058,4358,1,0,0,0,1060,4360,1,0,0,0,1062,4362,1,0,
	0,0,1064,4370,1,0,0,0,1066,4383,1,0,0,0,1068,4385,1,0,0,0,1070,4389,1,0,
	0,0,1072,4396,1,0,0,0,1074,4405,1,0,0,0,1076,4414,1,0,0,0,1078,4416,1,0,
	0,0,1080,4431,1,0,0,0,1082,4440,1,0,0,0,1084,4444,1,0,0,0,1086,4448,1,0,
	0,0,1088,4452,1,0,0,0,1090,4457,1,0,0,0,1092,4470,1,0,0,0,1094,4475,1,0,
	0,0,1096,4485,1,0,0,0,1098,4499,1,0,0,0,1100,4505,1,0,0,0,1102,4507,1,0,
	0,0,1104,4509,1,0,0,0,1106,4511,1,0,0,0,1108,4513,1,0,0,0,1110,4515,1,0,
	0,0,1112,4519,1,0,0,0,1114,4521,1,0,0,0,1116,4528,1,0,0,0,1118,4530,1,0,
	0,0,1120,4537,1,0,0,0,1122,4539,1,0,0,0,1124,4545,1,0,0,0,1126,4547,1,0,
	0,0,1128,4550,1,0,0,0,1130,4557,1,0,0,0,1132,4562,1,0,0,0,1134,4564,1,0,
	0,0,1136,4571,1,0,0,0,1138,4579,1,0,0,0,1140,4582,1,0,0,0,1142,4586,1,0,
	0,0,1144,4592,1,0,0,0,1146,4600,1,0,0,0,1148,4606,1,0,0,0,1150,4608,1,0,
	0,0,1152,4612,1,0,0,0,1154,4614,1,0,0,0,1156,4616,1,0,0,0,1158,4621,1,0,
	0,0,1160,4625,1,0,0,0,1162,4627,1,0,0,0,1164,4632,1,0,0,0,1166,4639,1,0,
	0,0,1168,4641,1,0,0,0,1170,4646,1,0,0,0,1172,4667,1,0,0,0,1174,4671,1,0,
	0,0,1176,4673,1,0,0,0,1178,4681,1,0,0,0,1180,4688,1,0,0,0,1182,4693,1,0,
	0,0,1184,4698,1,0,0,0,1186,4703,1,0,0,0,1188,4705,1,0,0,0,1190,4721,1,0,
	0,0,1192,4725,1,0,0,0,1194,4727,1,0,0,0,1196,4729,1,0,0,0,1198,4736,1,0,
	0,0,1200,4738,1,0,0,0,1202,4740,1,0,0,0,1204,4745,1,0,0,0,1206,4753,1,0,
	0,0,1208,4758,1,0,0,0,1210,4766,1,0,0,0,1212,4770,1,0,0,0,1214,4772,1,0,
	0,0,1216,4777,1,0,0,0,1218,4787,1,0,0,0,1220,4790,1,0,0,0,1222,4801,1,0,
	0,0,1224,4812,1,0,0,0,1226,4822,1,0,0,0,1228,4824,1,0,0,0,1230,4826,1,0,
	0,0,1232,4828,1,0,0,0,1234,4834,1,0,0,0,1236,4836,1,0,0,0,1238,4839,1,0,
	0,0,1240,4846,1,0,0,0,1242,4848,1,0,0,0,1244,4850,1,0,0,0,1246,4852,1,0,
	0,0,1248,4896,1,0,0,0,1250,4901,1,0,0,0,1252,4903,1,0,0,0,1254,4905,1,0,
	0,0,1256,4908,1,0,0,0,1258,4910,1,0,0,0,1260,4912,1,0,0,0,1262,4914,1,0,
	0,0,1264,4916,1,0,0,0,1266,4918,1,0,0,0,1268,4920,1,0,0,0,1270,4922,1,0,
	0,0,1272,4926,1,0,0,0,1274,4928,1,0,0,0,1276,4930,1,0,0,0,1278,4932,1,0,
	0,0,1280,4936,1,0,0,0,1282,4938,1,0,0,0,1284,4940,1,0,0,0,1286,4942,1,0,
	0,0,1288,4944,1,0,0,0,1290,4946,1,0,0,0,1292,4948,1,0,0,0,1294,4956,1,0,
	0,0,1296,4958,1,0,0,0,1298,4962,1,0,0,0,1300,4966,1,0,0,0,1302,4968,1,0,
	0,0,1304,4970,1,0,0,0,1306,4972,1,0,0,0,1308,4974,1,0,0,0,1310,4976,1,0,
	0,0,1312,4978,1,0,0,0,1314,4982,1,0,0,0,1316,4990,1,0,0,0,1318,4994,1,0,
	0,0,1320,4998,1,0,0,0,1322,5000,1,0,0,0,1324,5004,1,0,0,0,1326,5008,1,0,
	0,0,1328,5227,1,0,0,0,1330,5229,1,0,0,0,1332,5231,1,0,0,0,1334,5270,1,0,
	0,0,1336,5272,1,0,0,0,1338,5274,1,0,0,0,1340,5276,1,0,0,0,1342,1344,3,2,
	1,0,1343,1342,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,1345,1346,1,0,
	0,0,1346,1348,1,0,0,0,1347,1345,1,0,0,0,1348,1349,5,0,0,1,1349,1,1,0,0,
	0,1350,1352,3,4,2,0,1351,1353,3,32,16,0,1352,1351,1,0,0,0,1352,1353,1,0,
	0,0,1353,3,1,0,0,0,1354,1357,3,6,3,0,1355,1357,3,34,17,0,1356,1354,1,0,
	0,0,1356,1355,1,0,0,0,1357,5,1,0,0,0,1358,1361,3,8,4,0,1359,1361,3,28,14,
	0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,7,1,0,0,0,1362,1363,5,226,0,
	0,1363,1368,5,227,0,0,1364,1369,3,10,5,0,1365,1369,3,12,6,0,1366,1369,3,
	14,7,0,1367,1369,3,18,9,0,1368,1364,1,0,0,0,1368,1365,1,0,0,0,1368,1366,
	1,0,0,0,1368,1367,1,0,0,0,1369,9,1,0,0,0,1370,1371,5,223,0,0,1371,1372,
	3,794,397,0,1372,11,1,0,0,0,1373,1375,5,339,0,0,1374,1373,1,0,0,0,1374,
	1375,1,0,0,0,1375,1376,1,0,0,0,1376,1377,5,323,0,0,1377,1378,3,86,43,0,
	1378,13,1,0,0,0,1379,1380,5,243,0,0,1380,1381,5,359,0,0,1381,1382,3,16,
	8,0,1382,15,1,0,0,0,1383,1384,3,1010,505,0,1384,17,1,0,0,0,1385,1389,3,
	20,10,0,1386,1389,3,22,11,0,1387,1389,3,24,12,0,1388,1385,1,0,0,0,1388,
	1386,1,0,0,0,1388,1387,1,0,0,0,1389,19,1,0,0,0,1390,1392,5,339,0,0,1391,
	1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,1394,5,323,0,0,1394,
	1395,3,26,13,0,1395,1396,3,70,35,0,1396,21,1,0,0,0,1397,1399,5,312,0,0,
	1398,1397,1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1401,5,347,0,
	0,1401,1402,3,26,13,0,1402,1403,3,76,38,0,1403,23,1,0,0,0,1404,1405,5,263,
	0,0,1405,1406,3,26,13,0,1406,1407,3,82,41,0,1407,25,1,0,0,0,1408,1410,5,
	364,0,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,1411,1,0,0,0,1411,1412,
	3,1292,646,0,1412,27,1,0,0,0,1413,1415,5,226,0,0,1414,1413,1,0,0,0,1414,
	1415,1,0,0,0,1415,1416,1,0,0,0,1416,1417,5,218,0,0,1417,1418,3,30,15,0,
	1418,29,1,0,0,0,1419,1421,5,62,0,0,1420,1419,1,0,0,0,1420,1421,1,0,0,0,
	1421,1422,1,0,0,0,1422,1433,7,0,0,0,1423,1433,5,223,0,0,1424,1426,5,339,
	0,0,1425,1424,1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1433,5,323,
	0,0,1428,1429,5,243,0,0,1429,1433,5,359,0,0,1430,1431,5,203,0,0,1431,1433,
	3,1292,646,0,1432,1420,1,0,0,0,1432,1423,1,0,0,0,1432,1425,1,0,0,0,1432,
	1428,1,0,0,0,1432,1430,1,0,0,0,1433,31,1,0,0,0,1434,1436,5,226,0,0,1435,
	1434,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,0,1437,1438,5,92,0,0,1438,
	33,1,0,0,0,1439,1444,3,36,18,0,1440,1442,3,50,25,0,1441,1443,3,38,19,0,
	1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,0,1444,1440,1,0,0,0,
	1444,1445,1,0,0,0,1445,1452,1,0,0,0,1446,1448,3,50,25,0,1447,1449,3,38,
	19,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1452,1,0,0,0,1450,1452,3,
	38,19,0,1451,1439,1,0,0,0,1451,1446,1,0,0,0,1451,1450,1,0,0,0,1452,35,1,
	0,0,0,1453,1454,5,235,0,0,1454,1456,5,352,0,0,1455,1457,3,40,20,0,1456,
	1455,1,0,0,0,1456,1457,1,0,0,0,1457,37,1,0,0,0,1458,1459,7,1,0,0,1459,39,
	1,0,0,0,1460,1463,3,42,21,0,1461,1462,5,34,0,0,1462,1464,3,42,21,0,1463,
	1461,1,0,0,0,1464,1465,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,
	41,1,0,0,0,1467,1470,3,44,22,0,1468,1470,3,46,23,0,1469,1467,1,0,0,0,1469,
	1468,1,0,0,0,1470,43,1,0,0,0,1471,1472,5,340,0,0,1472,1476,5,337,0,0,1473,
	1474,5,340,0,0,1474,1476,5,358,0,0,1475,1471,1,0,0,0,1475,1473,1,0,0,0,
	1476,45,1,0,0,0,1477,1478,1,0,0,0,1478,47,1,0,0,0,1479,1480,5,40,0,0,1480,
	1481,3,50,25,0,1481,1482,5,41,0,0,1482,49,1,0,0,0,1483,1484,3,56,28,0,1484,
	51,1,0,0,0,1485,1486,5,40,0,0,1486,1487,3,56,28,0,1487,1488,5,41,0,0,1488,
	53,1,0,0,0,1489,1490,5,40,0,0,1490,1491,3,56,28,0,1491,1492,5,41,0,0,1492,
	55,1,0,0,0,1493,1495,3,296,148,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,
	1497,1,0,0,0,1496,1498,3,58,29,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,
	1499,1,0,0,0,1499,1500,3,62,31,0,1500,57,1,0,0,0,1501,1503,3,60,30,0,1502,
	1501,1,0,0,0,1503,1504,1,0,0,0,1504,1502,1,0,0,0,1504,1505,1,0,0,0,1505,
	59,1,0,0,0,1506,1510,3,68,34,0,1507,1510,3,74,37,0,1508,1510,3,80,40,0,
	1509,1506,1,0,0,0,1509,1507,1,0,0,0,1509,1508,1,0,0,0,1510,61,1,0,0,0,1511,
	1515,3,64,32,0,1512,1514,3,66,33,0,1513,1512,1,0,0,0,1514,1517,1,0,0,0,
	1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,63,1,0,0,0,1517,1515,1,0,0,0,1518,
	1522,3,98,49,0,1519,1522,3,134,67,0,1520,1522,3,188,94,0,1521,1518,1,0,
	0,0,1521,1519,1,0,0,0,1521,1520,1,0,0,0,1522,65,1,0,0,0,1523,1525,5,188,
	0,0,1524,1526,3,532,266,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,1527,
	1,0,0,0,1527,1528,3,64,32,0,1528,67,1,0,0,0,1529,1531,5,339,0,0,1530,1529,
	1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,1532,1533,5,323,0,0,1533,1534,
	3,1296,648,0,1534,1535,3,70,35,0,1535,69,1,0,0,0,1536,1538,3,686,343,0,
	1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,1539,1,0,0,0,1539,1541,3,742,371,
	0,1540,1537,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,0,0,1542,1543,3,72,
	36,0,1543,71,1,0,0,0,1544,1545,5,36,0,0,1545,1546,3,86,43,0,1546,73,1,0,
	0,0,1547,1549,5,312,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,
	0,0,0,1550,1551,5,347,0,0,1551,1552,3,1308,654,0,1552,1553,3,76,38,0,1553,
	75,1,0,0,0,1554,1556,3,686,343,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,
	1557,1,0,0,0,1557,1559,3,748,374,0,1558,1555,1,0,0,0,1558,1559,1,0,0,0,
	1559,1560,1,0,0,0,1560,1561,3,78,39,0,1561,77,1,0,0,0,1562,1563,5,36,0,
	0,1563,1564,3,92,46,0,1564,79,1,0,0,0,1565,1566,5,263,0,0,1566,1567,3,1310,
	655,0,1567,1568,3,82,41,0,1568,81,1,0,0,0,1569,1571,3,686,343,0,1570,1569,
	1,0,0,0,1570,1571,1,0,0,0,1571,1572,1,0,0,0,1572,1574,3,684,342,0,1573,
	1570,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,3,84,42,0,1576,
	83,1,0,0,0,1577,1578,5,36,0,0,1578,1579,3,908,454,0,1579,85,1,0,0,0,1580,
	1586,3,90,45,0,1581,1586,3,96,48,0,1582,1586,3,810,405,0,1583,1586,3,1266,
	633,0,1584,1586,3,88,44,0,1585,1580,1,0,0,0,1585,1581,1,0,0,0,1585,1582,
	1,0,0,0,1585,1583,1,0,0,0,1585,1584,1,0,0,0,1586,87,1,0,0,0,1587,1588,7,
	2,0,0,1588,89,1,0,0,0,1589,1590,3,54,27,0,1590,91,1,0,0,0,1591,1596,3,94,
	47,0,1592,1596,3,96,48,0,1593,1596,3,820,410,0,1594,1596,3,1266,633,0,1595,
	1591,1,0,0,0,1595,1592,1,0,0,0,1595,1593,1,0,0,0,1595,1594,1,0,0,0,1596,
	93,1,0,0,0,1597,1598,3,54,27,0,1598,95,1,0,0,0,1599,1600,5,266,0,0,1600,
	1609,3,952,476,0,1601,1609,3,954,477,0,1602,1609,3,1164,582,0,1603,1609,
	3,900,450,0,1604,1609,3,552,276,0,1605,1609,3,960,480,0,1606,1609,3,1168,
	584,0,1607,1609,3,1170,585,0,1608,1599,1,0,0,0,1608,1601,1,0,0,0,1608,1602,
	1,0,0,0,1608,1603,1,0,0,0,1608,1604,1,0,0,0,1608,1605,1,0,0,0,1608,1606,
	1,0,0,0,1608,1607,1,0,0,0,1609,97,1,0,0,0,1610,1612,3,100,50,0,1611,1610,
	1,0,0,0,1612,1613,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,99,1,
	0,0,0,1615,1618,3,102,51,0,1616,1618,3,132,66,0,1617,1615,1,0,0,0,1617,
	1616,1,0,0,0,1618,101,1,0,0,0,1619,1626,3,104,52,0,1620,1626,3,108,54,0,
	1621,1626,3,124,62,0,1622,1626,3,106,53,0,1623,1626,3,122,61,0,1624,1626,
	3,130,65,0,1625,1619,1,0,0,0,1625,1620,1,0,0,0,1625,1621,1,0,0,0,1625,1622,
	1,0,0,0,1625,1623,1,0,0,0,1625,1624,1,0,0,0,1626,103,1,0,0,0,1627,1628,
	5,101,0,0,1628,1630,5,223,0,0,1629,1631,5,364,0,0,1630,1629,1,0,0,0,1630,
	1631,1,0,0,0,1631,1632,1,0,0,0,1632,1633,3,798,399,0,1633,105,1,0,0,0,1634,
	1635,5,121,0,0,1635,1637,5,223,0,0,1636,1638,5,365,0,0,1637,1636,1,0,0,
	0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1640,3,798,399,0,1640,107,1,
	0,0,0,1641,1644,3,110,55,0,1642,1644,3,112,56,0,1643,1641,1,0,0,0,1643,
	1642,1,0,0,0,1644,109,1,0,0,0,1645,1647,5,101,0,0,1646,1648,5,339,0,0,1647,
	1646,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1651,5,323,0,0,1650,
	1652,5,364,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1653,1,0,0,0,1653,
	1656,3,812,406,0,1654,1657,3,114,57,0,1655,1657,3,116,58,0,1656,1654,1,
	0,0,0,1656,1655,1,0,0,0,1657,1659,1,0,0,0,1658,1660,3,120,60,0,1659,1658,
	1,0,0,0,1659,1660,1,0,0,0,1660,111,1,0,0,0,1661,1662,5,101,0,0,1662,1663,
	5,200,0,0,1663,1665,5,217,0,0,1664,1666,5,339,0,0,1665,1664,1,0,0,0,1665,
	1666,1,0,0,0,1666,1667,1,0,0,0,1667,1668,5,323,0,0,1668,1671,3,812,406,
	0,1669,1672,3,114,57,0,1670,1672,3,116,58,0,1671,1669,1,0,0,0,1671,1670,
	1,0,0,0,1672,1674,1,0,0,0,1673,1675,3,120,60,0,1674,1673,1,0,0,0,1674,1675,
	1,0,0,0,1675,113,1,0,0,0,1676,1681,5,198,0,0,1677,1679,5,339,0,0,1678,1677,
	1,0,0,0,1678,1679,1,0,0,0,1679,1680,1,0,0,0,1680,1682,5,323,0,0,1681,1678,
	1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1684,5,353,0,0,1684,115,
	1,0,0,0,1685,1695,3,118,59,0,1686,1688,3,686,343,0,1687,1686,1,0,0,0,1687,
	1688,1,0,0,0,1688,1689,1,0,0,0,1689,1695,3,816,408,0,1690,1692,3,686,343,
	0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,1693,1695,3,584,
	292,0,1694,1685,1,0,0,0,1694,1687,1,0,0,0,1694,1691,1,0,0,0,1695,117,1,
	0,0,0,1696,1697,5,170,0,0,1697,1698,3,86,43,0,1698,119,1,0,0,0,1699,1700,
	5,67,0,0,1700,1701,5,96,0,0,1701,1702,5,196,0,0,1702,1703,3,86,43,0,1703,
	121,1,0,0,0,1704,1706,5,121,0,0,1705,1707,5,339,0,0,1706,1705,1,0,0,0,1706,
	1707,1,0,0,0,1707,1708,1,0,0,0,1708,1710,5,323,0,0,1709,1711,5,365,0,0,
	1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,1712,1,0,0,0,1712,1713,3,812,406,
	0,1713,123,1,0,0,0,1714,1730,5,101,0,0,1715,1717,5,339,0,0,1716,1715,1,
	0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,0,0,1718,1719,5,323,0,0,1719,1721,
	5,353,0,0,1720,1722,5,364,0,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,
	1731,1,0,0,0,1723,1724,5,200,0,0,1724,1726,5,217,0,0,1725,1727,5,339,0,
	0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1729,5,323,
	0,0,1729,1731,5,353,0,0,1730,1716,1,0,0,0,1730,1723,1,0,0,0,1731,1732,1,
	0,0,0,1732,1733,3,818,409,0,1733,1734,3,126,63,0,1734,125,1,0,0,0,1735,
	1737,5,67,0,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1738,1,0,0,0,1738,
	1745,3,128,64,0,1739,1745,3,118,59,0,1740,1742,5,67,0,0,1741,1740,1,0,0,
	0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,1745,3,584,292,0,1744,1736,1,
	0,0,0,1744,1739,1,0,0,0,1744,1741,1,0,0,0,1745,127,1,0,0,0,1746,1747,5,
	96,0,0,1747,1750,5,196,0,0,1748,1751,3,816,408,0,1749,1751,3,832,416,0,
	1750,1748,1,0,0,0,1750,1749,1,0,0,0,1751,129,1,0,0,0,1752,1754,5,121,0,
	0,1753,1755,5,339,0,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,1756,1,0,
	0,0,1756,1757,5,323,0,0,1757,1759,5,353,0,0,1758,1760,5,365,0,0,1759,1758,
	1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1762,3,818,409,0,1762,
	131,1,0,0,0,1763,1764,3,278,139,0,1764,133,1,0,0,0,1765,1768,3,136,68,0,
	1766,1768,3,142,71,0,1767,1765,1,0,0,0,1767,1766,1,0,0,0,1768,135,1,0,0,
	0,1769,1772,3,138,69,0,1770,1772,3,140,70,0,1771,1769,1,0,0,0,1771,1770,
	1,0,0,0,1772,137,1,0,0,0,1773,1774,3,294,147,0,1774,1776,3,146,73,0,1775,
	1777,3,248,124,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,139,1,0,0,0,1778,
	1779,3,294,147,0,1779,1780,3,52,26,0,1780,141,1,0,0,0,1781,1784,3,144,72,
	0,1782,1784,3,52,26,0,1783,1781,1,0,0,0,1783,1782,1,0,0,0,1784,143,1,0,
	0,0,1785,1787,3,146,73,0,1786,1788,3,248,124,0,1787,1786,1,0,0,0,1787,1788,
	1,0,0,0,1788,145,1,0,0,0,1789,1791,3,148,74,0,1790,1789,1,0,0,0,1791,1792,
	1,0,0,0,1792,1790,1,0,0,0,1792,1793,1,0,0,0,1793,147,1,0,0,0,1794,1797,
	3,214,107,0,1795,1797,3,150,75,0,1796,1794,1,0,0,0,1796,1795,1,0,0,0,1797,
	149,1,0,0,0,1798,1801,3,152,76,0,1799,1801,3,186,93,0,1800,1798,1,0,0,0,
	1800,1799,1,0,0,0,1801,151,1,0,0,0,1802,1807,3,154,77,0,1803,1807,3,156,
	78,0,1804,1807,3,170,85,0,1805,1807,3,180,90,0,1806,1802,1,0,0,0,1806,1803,
	1,0,0,0,1806,1804,1,0,0,0,1806,1805,1,0,0,0,1807,153,1,0,0,0,1808,1809,
	5,150,0,0,1809,1810,3,430,215,0,1810,155,1,0,0,0,1811,1812,5,227,0,0,1812,
	1813,3,158,79,0,1813,157,1,0,0,0,1814,1817,3,160,80,0,1815,1816,5,34,0,
	0,1816,1818,3,160,80,0,1817,1815,1,0,0,0,1818,1819,1,0,0,0,1819,1817,1,
	0,0,0,1819,1820,1,0,0,0,1820,159,1,0,0,0,1821,1825,3,162,81,0,1822,1825,
	3,164,82,0,1823,1825,3,166,83,0,1824,1821,1,0,0,0,1824,1822,1,0,0,0,1824,
	1823,1,0,0,0,1825,161,1,0,0,0,1826,1827,3,298,149,0,1827,1828,5,54,0,0,
	1828,1829,3,1288,644,0,1829,1830,5,36,0,0,1830,1831,3,908,454,0,1831,163,
	1,0,0,0,1832,1833,3,298,149,0,1833,1834,5,36,0,0,1834,1836,5,40,0,0,1835,
	1837,3,400,200,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,
	1838,1839,5,41,0,0,1839,165,1,0,0,0,1840,1841,3,298,149,0,1841,1842,3,392,
	196,0,1842,1843,3,168,84,0,1843,167,1,0,0,0,1844,1849,3,1286,643,0,1845,
	1846,5,29,0,0,1846,1848,3,1286,643,0,1847,1845,1,0,0,0,1848,1851,1,0,0,
	0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,169,1,0,0,0,1851,1849,1,0,0,
	0,1852,1853,5,216,0,0,1853,1854,3,172,86,0,1854,171,1,0,0,0,1855,1858,3,
	174,87,0,1856,1857,5,34,0,0,1857,1859,3,174,87,0,1858,1856,1,0,0,0,1859,
	1860,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,173,1,0,0,0,1862,
	1865,3,176,88,0,1863,1865,3,178,89,0,1864,1862,1,0,0,0,1864,1863,1,0,0,
	0,1865,175,1,0,0,0,1866,1867,3,298,149,0,1867,1868,5,54,0,0,1868,1869,3,
	1288,644,0,1869,177,1,0,0,0,1870,1871,3,298,149,0,1871,1872,3,392,196,0,
	1872,1873,3,168,84,0,1873,179,1,0,0,0,1874,1875,7,3,0,0,1875,1876,5,115,
	0,0,1876,1877,3,182,91,0,1877,181,1,0,0,0,1878,1881,3,184,92,0,1879,1880,
	5,34,0,0,1880,1882,3,184,92,0,1881,1879,1,0,0,0,1882,1883,1,0,0,0,1883,
	1881,1,0,0,0,1883,1884,1,0,0,0,1884,183,1,0,0,0,1885,1886,3,908,454,0,1886,
	185,1,0,0,0,1887,1888,3,278,139,0,1888,187,1,0,0,0,1889,1890,3,190,95,0,
	1890,189,1,0,0,0,1891,1892,6,95,-1,0,1892,1893,3,196,98,0,1893,1900,1,0,
	0,0,1894,1895,10,2,0,0,1895,1896,3,192,96,0,1896,1897,3,196,98,0,1897,1899,
	1,0,0,0,1898,1894,1,0,0,0,1899,1902,1,0,0,0,1900,1898,1,0,0,0,1900,1901,
	1,0,0,0,1901,191,1,0,0,0,1902,1900,1,0,0,0,1903,1906,3,194,97,0,1904,1906,
	5,202,0,0,1905,1903,1,0,0,0,1905,1904,1,0,0,0,1906,193,1,0,0,0,1907,1908,
	7,4,0,0,1908,1909,3,558,279,0,1909,195,1,0,0,0,1910,1911,3,198,99,0,1911,
	197,1,0,0,0,1912,1915,3,200,100,0,1913,1915,3,210,105,0,1914,1912,1,0,0,
	0,1914,1913,1,0,0,0,1915,199,1,0,0,0,1916,1918,3,202,101,0,1917,1916,1,
	0,0,0,1918,1919,1,0,0,0,1919,1917,1,0,0,0,1919,1920,1,0,0,0,1920,1921,1,
	0,0,0,1921,1922,3,204,102,0,1922,1927,1,0,0,0,1923,1927,3,206,103,0,1924,
	1927,3,208,104,0,1925,1927,3,260,130,0,1926,1917,1,0,0,0,1926,1923,1,0,
	0,0,1926,1924,1,0,0,0,1926,1925,1,0,0,0,1927,201,1,0,0,0,1928,1929,3,294,
	147,0,1929,1930,3,212,106,0,1930,203,1,0,0,0,1931,1932,3,294,147,0,1932,
	1933,3,212,106,0,1933,1934,3,248,124,0,1934,205,1,0,0,0,1935,1936,3,294,
	147,0,1936,1937,3,248,124,0,1937,207,1,0,0,0,1938,1939,3,294,147,0,1939,
	1940,3,54,27,0,1940,209,1,0,0,0,1941,1943,3,212,106,0,1942,1941,1,0,0,0,
	1942,1943,1,0,0,0,1943,1944,1,0,0,0,1944,1947,3,248,124,0,1945,1947,3,54,
	27,0,1946,1942,1,0,0,0,1946,1945,1,0,0,0,1947,211,1,0,0,0,1948,1952,3,214,
	107,0,1949,1951,3,214,107,0,1950,1949,1,0,0,0,1951,1954,1,0,0,0,1952,1950,
	1,0,0,0,1952,1953,1,0,0,0,1953,213,1,0,0,0,1954,1952,1,0,0,0,1955,1958,
	3,216,108,0,1956,1958,3,228,114,0,1957,1955,1,0,0,0,1957,1956,1,0,0,0,1958,
	215,1,0,0,0,1959,1965,3,218,109,0,1960,1965,3,232,116,0,1961,1965,3,238,
	119,0,1962,1965,3,230,115,0,1963,1965,3,246,123,0,1964,1959,1,0,0,0,1964,
	1960,1,0,0,0,1964,1961,1,0,0,0,1964,1962,1,0,0,0,1964,1963,1,0,0,0,1965,
	217,1,0,0,0,1966,1969,3,220,110,0,1967,1969,3,222,111,0,1968,1966,1,0,0,
	0,1968,1967,1,0,0,0,1969,219,1,0,0,0,1970,1971,5,182,0,0,1971,1972,3,306,
	153,0,1972,221,1,0,0,0,1973,1974,5,199,0,0,1974,1975,3,224,112,0,1975,223,
	1,0,0,0,1976,1986,3,220,110,0,1977,1978,5,40,0,0,1978,1979,3,226,113,0,
	1979,1980,5,41,0,0,1980,1986,1,0,0,0,1981,1982,5,44,0,0,1982,1983,3,226,
	113,0,1983,1984,5,45,0,0,1984,1986,1,0,0,0,1985,1976,1,0,0,0,1985,1977,
	1,0,0,0,1985,1981,1,0,0,0,1986,225,1,0,0,0,1987,1989,3,218,109,0,1988,1987,
	1,0,0,0,1989,1990,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,227,
	1,0,0,0,1992,1993,3,278,139,0,1993,229,1,0,0,0,1994,1997,5,131,0,0,1995,
	1998,3,530,265,0,1996,1998,3,834,417,0,1997,1995,1,0,0,0,1997,1996,1,0,
	0,0,1998,231,1,0,0,0,1999,2000,5,169,0,0,2000,2001,3,234,117,0,2001,233,
	1,0,0,0,2002,2005,3,236,118,0,2003,2004,5,34,0,0,2004,2006,3,236,118,0,
	2005,2003,1,0,0,0,2006,2007,1,0,0,0,2007,2005,1,0,0,0,2007,2008,1,0,0,0,
	2008,235,1,0,0,0,2009,2015,3,80,40,0,2010,2011,3,1310,655,0,2011,2012,5,
	36,0,0,2012,2013,3,908,454,0,2013,2015,1,0,0,0,2014,2009,1,0,0,0,2014,2010,
	1,0,0,0,2015,237,1,0,0,0,2016,2017,5,140,0,0,2017,2019,3,240,120,0,2018,
	2020,3,244,122,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,239,1,0,0,0,2021,
	2022,3,242,121,0,2022,2023,3,1120,560,0,2023,241,1,0,0,0,2024,2025,3,1318,
	659,0,2025,2026,5,149,0,0,2026,243,1,0,0,0,2027,2028,5,269,0,0,2028,2029,
	7,5,0,0,2029,2030,3,1318,659,0,2030,245,1,0,0,0,2031,2033,3,550,275,0,2032,
	2034,3,578,289,0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2036,1,0,0,0,
	2035,2037,3,576,288,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2044,1,0,
	0,0,2038,2040,3,578,289,0,2039,2041,3,576,288,0,2040,2039,1,0,0,0,2040,
	2041,1,0,0,0,2041,2044,1,0,0,0,2042,2044,3,576,288,0,2043,2031,1,0,0,0,
	2043,2038,1,0,0,0,2043,2042,1,0,0,0,2044,247,1,0,0,0,2045,2047,3,250,125,
	0,2046,2048,3,246,123,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2051,1,
	0,0,0,2049,2051,5,132,0,0,2050,2045,1,0,0,0,2050,2049,1,0,0,0,2051,249,
	1,0,0,0,2052,2053,5,219,0,0,2053,2054,3,252,126,0,2054,251,1,0,0,0,2055,
	2057,3,558,279,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2060,1,0,0,0,
	2058,2061,5,30,0,0,2059,2061,3,254,127,0,2060,2058,1,0,0,0,2060,2059,1,
	0,0,0,2061,2063,1,0,0,0,2062,2064,3,542,271,0,2063,2062,1,0,0,0,2063,2064,
	1,0,0,0,2064,2068,1,0,0,0,2065,2066,5,334,0,0,2066,2068,5,313,0,0,2067,
	2056,1,0,0,0,2067,2065,1,0,0,0,2068,253,1,0,0,0,2069,2074,3,256,128,0,2070,
	2071,5,34,0,0,2071,2073,3,256,128,0,2072,2070,1,0,0,0,2073,2076,1,0,0,0,
	2074,2072,1,0,0,0,2074,2075,1,0,0,0,2075,255,1,0,0,0,2076,2074,1,0,0,0,
	2077,2079,3,926,463,0,2078,2080,3,258,129,0,2079,2078,1,0,0,0,2079,2080,
	1,0,0,0,2080,257,1,0,0,0,2081,2082,5,67,0,0,2082,2083,3,1318,659,0,2083,
	259,1,0,0,0,2084,2086,5,225,0,0,2085,2087,3,558,279,0,2086,2085,1,0,0,0,
	2086,2087,1,0,0,0,2087,2090,1,0,0,0,2088,2091,3,262,131,0,2089,2091,5,30,
	0,0,2090,2088,1,0,0,0,2090,2089,1,0,0,0,2091,2111,1,0,0,0,2092,2094,3,270,
	135,0,2093,2095,3,530,265,0,2094,2093,1,0,0,0,2094,2095,1,0,0,0,2095,2097,
	1,0,0,0,2096,2098,3,542,271,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,
	2100,1,0,0,0,2099,2101,3,268,134,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,
	2101,2103,1,0,0,0,2102,2104,3,550,275,0,2103,2102,1,0,0,0,2103,2104,1,0,
	0,0,2104,2106,1,0,0,0,2105,2107,3,578,289,0,2106,2105,1,0,0,0,2106,2107,
	1,0,0,0,2107,2109,1,0,0,0,2108,2110,3,576,288,0,2109,2108,1,0,0,0,2109,
	2110,1,0,0,0,2110,2112,1,0,0,0,2111,2092,1,0,0,0,2111,2112,1,0,0,0,2112,
	261,1,0,0,0,2113,2116,3,264,132,0,2114,2115,5,34,0,0,2115,2117,3,264,132,
	0,2116,2114,1,0,0,0,2117,2118,1,0,0,0,2118,2116,1,0,0,0,2118,2119,1,0,0,
	0,2119,263,1,0,0,0,2120,2122,3,926,463,0,2121,2123,3,266,133,0,2122,2121,
	1,0,0,0,2122,2123,1,0,0,0,2123,265,1,0,0,0,2124,2125,5,67,0,0,2125,2126,
	3,1318,659,0,2126,267,1,0,0,0,2127,2128,5,143,0,0,2128,2129,3,834,417,0,
	2129,269,1,0,0,0,2130,2131,5,141,0,0,2131,2134,3,272,136,0,2132,2134,3,
	276,138,0,2133,2130,1,0,0,0,2133,2132,1,0,0,0,2134,271,1,0,0,0,2135,2140,
	3,274,137,0,2136,2137,5,34,0,0,2137,2139,3,274,137,0,2138,2136,1,0,0,0,
	2139,2142,1,0,0,0,2140,2138,1,0,0,0,2140,2141,1,0,0,0,2141,273,1,0,0,0,
	2142,2140,1,0,0,0,2143,2144,3,86,43,0,2144,2145,3,218,109,0,2145,275,1,
	0,0,0,2146,2147,5,141,0,0,2147,2153,3,54,27,0,2148,2149,5,141,0,0,2149,
	2150,3,86,43,0,2150,2151,3,54,27,0,2151,2153,1,0,0,0,2152,2146,1,0,0,0,
	2152,2148,1,0,0,0,2153,277,1,0,0,0,2154,2156,5,199,0,0,2155,2154,1,0,0,
	0,2155,2156,1,0,0,0,2156,2157,1,0,0,0,2157,2158,5,84,0,0,2158,2159,3,280,
	140,0,2159,279,1,0,0,0,2160,2163,3,282,141,0,2161,2163,3,288,144,0,2162,
	2160,1,0,0,0,2162,2161,1,0,0,0,2163,281,1,0,0,0,2164,2166,3,284,142,0,2165,
	2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,2168,3,48,24,0,2168,
	283,1,0,0,0,2169,2171,5,44,0,0,2170,2172,3,286,143,0,2171,2170,1,0,0,0,
	2171,2172,1,0,0,0,2172,2173,1,0,0,0,2173,2174,5,45,0,0,2174,285,1,0,0,0,
	2175,2178,3,298,149,0,2176,2177,5,34,0,0,2177,2179,3,298,149,0,2178,2176,
	1,0,0,0,2179,2180,1,0,0,0,2180,2178,1,0,0,0,2180,2181,1,0,0,0,2181,287,
	1,0,0,0,2182,2183,3,824,412,0,2183,2185,5,44,0,0,2184,2186,3,290,145,0,
	2185,2184,1,0,0,0,2185,2186,1,0,0,0,2186,2187,1,0,0,0,2187,2188,5,45,0,
	0,2188,289,1,0,0,0,2189,2192,3,292,146,0,2190,2191,5,34,0,0,2191,2193,3,
	292,146,0,2192,2190,1,0,0,0,2193,2194,1,0,0,0,2194,2192,1,0,0,0,2194,2195,
	1,0,0,0,2195,291,1,0,0,0,2196,2197,3,908,454,0,2197,293,1,0,0,0,2198,2199,
	5,261,0,0,2199,2200,3,86,43,0,2200,295,1,0,0,0,2201,2202,5,71,0,0,2202,
	2203,3,794,397,0,2203,297,1,0,0,0,2204,2205,3,1312,656,0,2205,299,1,0,0,
	0,2206,2207,3,298,149,0,2207,301,1,0,0,0,2208,2209,3,298,149,0,2209,303,
	1,0,0,0,2210,2211,3,1292,646,0,2211,305,1,0,0,0,2212,2214,3,314,157,0,2213,
	2215,3,308,154,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,307,1,0,0,0,2216,
	2217,5,272,0,0,2217,2218,3,310,155,0,2218,309,1,0,0,0,2219,2222,3,312,156,
	0,2220,2221,5,34,0,0,2221,2223,3,312,156,0,2222,2220,1,0,0,0,2223,2224,
	1,0,0,0,2224,2222,1,0,0,0,2224,2225,1,0,0,0,2225,311,1,0,0,0,2226,2227,
	3,300,150,0,2227,2228,3,302,151,0,2228,313,1,0,0,0,2229,2231,3,316,158,
	0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,0,0,2232,2234,3,326,
	163,0,2233,2235,3,332,166,0,2234,2233,1,0,0,0,2234,2235,1,0,0,0,2235,2237,
	1,0,0,0,2236,2238,3,334,167,0,2237,2236,1,0,0,0,2237,2238,1,0,0,0,2238,
	315,1,0,0,0,2239,2242,3,318,159,0,2240,2242,3,320,160,0,2241,2239,1,0,0,
	0,2241,2240,1,0,0,0,2242,317,1,0,0,0,2243,2244,5,343,0,0,2244,2245,3,322,
	161,0,2245,319,1,0,0,0,2246,2247,5,316,0,0,2247,2248,3,324,162,0,2248,321,
	1,0,0,0,2249,2251,5,320,0,0,2250,2252,5,313,0,0,2251,2250,1,0,0,0,2251,
	2252,1,0,0,0,2252,2255,1,0,0,0,2253,2255,5,321,0,0,2254,2249,1,0,0,0,2254,
	2253,1,0,0,0,2255,323,1,0,0,0,2256,2258,3,1336,668,0,2257,2259,5,313,0,
	0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,2262,1,0,0,0,2260,2262,3,1338,
	669,0,2261,2256,1,0,0,0,2261,2260,1,0,0,0,2262,325,1,0,0,0,2263,2268,3,
	328,164,0,2264,2265,5,34,0,0,2265,2267,3,328,164,0,2266,2264,1,0,0,0,2267,
	2270,1,0,0,0,2268,2266,1,0,0,0,2268,2269,1,0,0,0,2269,327,1,0,0,0,2270,
	2268,1,0,0,0,2271,2273,3,330,165,0,2272,2271,1,0,0,0,2272,2273,1,0,0,0,
	2273,2275,1,0,0,0,2274,2276,3,336,168,0,2275,2274,1,0,0,0,2275,2276,1,0,
	0,0,2276,2278,1,0,0,0,2277,2279,3,366,183,0,2278,2277,1,0,0,0,2279,2280,
	1,0,0,0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,329,1,0,0,0,2282,2283,
	3,1304,652,0,2283,2284,5,36,0,0,2284,331,1,0,0,0,2285,2286,5,325,0,0,2286,
	2287,3,336,168,0,2287,333,1,0,0,0,2288,2289,5,268,0,0,2289,2290,3,834,417,
	0,2290,335,1,0,0,0,2291,2294,3,338,169,0,2292,2294,3,342,171,0,2293,2291,
	1,0,0,0,2293,2292,1,0,0,0,2294,337,1,0,0,0,2295,2297,3,340,170,0,2296,2298,
	3,346,173,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,339,1,0,0,0,2299,2300,
	7,6,0,0,2300,341,1,0,0,0,2301,2305,3,344,172,0,2302,2305,3,348,174,0,2303,
	2305,3,352,176,0,2304,2301,1,0,0,0,2304,2302,1,0,0,0,2304,2303,1,0,0,0,
	2305,343,1,0,0,0,2306,2308,5,62,0,0,2307,2309,3,340,170,0,2308,2307,1,0,
	0,0,2308,2309,1,0,0,0,2309,2311,1,0,0,0,2310,2312,3,346,173,0,2311,2310,
	1,0,0,0,2311,2312,1,0,0,0,2312,345,1,0,0,0,2313,2314,7,7,0,0,2314,347,1,
	0,0,0,2315,2317,5,65,0,0,2316,2318,3,350,175,0,2317,2316,1,0,0,0,2317,2318,
	1,0,0,0,2318,2320,1,0,0,0,2319,2321,3,340,170,0,2320,2319,1,0,0,0,2320,
	2321,1,0,0,0,2321,2323,1,0,0,0,2322,2324,3,346,173,0,2323,2322,1,0,0,0,
	2323,2324,1,0,0,0,2324,349,1,0,0,0,2325,2326,3,902,451,0,2326,351,1,0,0,
	0,2327,2332,3,354,177,0,2328,2332,3,356,178,0,2329,2332,3,358,179,0,2330,
	2332,3,360,180,0,2331,2327,1,0,0,0,2331,2328,1,0,0,0,2331,2329,1,0,0,0,
	2331,2330,1,0,0,0,2332,353,1,0,0,0,2333,2334,5,62,0,0,2334,2336,5,344,0,
	0,2335,2337,3,340,170,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,
	0,0,0,2338,2340,3,346,173,0,2339,2338,1,0,0,0,2339,2340,1,0,0,0,2340,355,
	1,0,0,0,2341,2342,5,65,0,0,2342,2344,5,344,0,0,2343,2345,3,340,170,0,2344,
	2343,1,0,0,0,2344,2345,1,0,0,0,2345,2347,1,0,0,0,2346,2348,3,346,173,0,
	2347,2346,1,0,0,0,2347,2348,1,0,0,0,2348,357,1,0,0,0,2349,2350,5,344,0,
	0,2350,2352,3,350,175,0,2351,2353,3,340,170,0,2352,2351,1,0,0,0,2352,2353,
	1,0,0,0,2353,2355,1,0,0,0,2354,2356,3,346,173,0,2355,2354,1,0,0,0,2355,
	2356,1,0,0,0,2356,359,1,0,0,0,2357,2358,5,344,0,0,2358,2360,3,364,182,0,
	2359,2361,3,340,170,0,2360,2359,1,0,0,0,2360,2361,1,0,0,0,2361,2363,1,0,
	0,0,2362,2364,3,346,173,0,2363,2362,1,0,0,0,2363,2364,1,0,0,0,2364,2365,
	1,0,0,0,2365,2366,3,362,181,0,2366,361,1,0,0,0,2367,2368,7,8,0,0,2368,363,
	1,0,0,0,2369,2370,3,902,451,0,2370,365,1,0,0,0,2371,2375,3,372,186,0,2372,
	2375,3,368,184,0,2373,2375,3,370,185,0,2374,2371,1,0,0,0,2374,2372,1,0,
	0,0,2374,2373,1,0,0,0,2375,367,1,0,0,0,2376,2381,3,372,186,0,2377,2378,
	5,58,0,0,2378,2380,3,372,186,0,2379,2377,1,0,0,0,2380,2383,1,0,0,0,2381,
	2379,1,0,0,0,2381,2382,1,0,0,0,2382,369,1,0,0,0,2383,2381,1,0,0,0,2384,
	2389,3,372,186,0,2385,2386,5,52,0,0,2386,2388,3,372,186,0,2387,2385,1,0,
	0,0,2388,2391,1,0,0,0,2389,2387,1,0,0,0,2389,2390,1,0,0,0,2390,371,1,0,
	0,0,2391,2389,1,0,0,0,2392,2396,3,374,187,0,2393,2395,3,374,187,0,2394,
	2393,1,0,0,0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2396,2397,1,0,0,0,2397,
	373,1,0,0,0,2398,2396,1,0,0,0,2399,2403,3,380,190,0,2400,2403,3,376,188,
	0,2401,2403,3,378,189,0,2402,2399,1,0,0,0,2402,2400,1,0,0,0,2402,2401,1,
	0,0,0,2403,375,1,0,0,0,2404,2405,3,380,190,0,2405,2406,3,464,232,0,2406,
	377,1,0,0,0,2407,2408,3,380,190,0,2408,2409,5,46,0,0,2409,379,1,0,0,0,2410,
	2414,3,382,191,0,2411,2414,3,424,212,0,2412,2414,3,474,237,0,2413,2410,
	1,0,0,0,2413,2411,1,0,0,0,2413,2412,1,0,0,0,2414,381,1,0,0,0,2415,2418,
	3,384,192,0,2416,2418,3,404,202,0,2417,2415,1,0,0,0,2417,2416,1,0,0,0,2418,
	383,1,0,0,0,2419,2420,5,44,0,0,2420,2421,3,386,193,0,2421,2422,5,45,0,0,
	2422,385,1,0,0,0,2423,2425,3,388,194,0,2424,2423,1,0,0,0,2424,2425,1,0,
	0,0,2425,2427,1,0,0,0,2426,2428,3,390,195,0,2427,2426,1,0,0,0,2427,2428,
	1,0,0,0,2428,2430,1,0,0,0,2429,2431,3,394,197,0,2430,2429,1,0,0,0,2430,
	2431,1,0,0,0,2431,387,1,0,0,0,2432,2434,5,348,0,0,2433,2432,1,0,0,0,2433,
	2434,1,0,0,0,2434,2435,1,0,0,0,2435,2436,3,1302,651,0,2436,389,1,0,0,0,
	2437,2438,3,392,196,0,2438,2439,3,450,225,0,2439,391,1,0,0,0,2440,2443,
	5,167,0,0,2441,2443,5,32,0,0,2442,2440,1,0,0,0,2442,2441,1,0,0,0,2443,393,
	1,0,0,0,2444,2447,3,396,198,0,2445,2447,3,398,199,0,2446,2444,1,0,0,0,2446,
	2445,1,0,0,0,2447,395,1,0,0,0,2448,2449,5,268,0,0,2449,2450,3,834,417,0,
	2450,397,1,0,0,0,2451,2452,5,40,0,0,2452,2453,3,400,200,0,2453,2454,5,41,
	0,0,2454,399,1,0,0,0,2455,2460,3,402,201,0,2456,2457,5,34,0,0,2457,2459,
	3,402,201,0,2458,2456,1,0,0,0,2459,2462,1,0,0,0,2460,2458,1,0,0,0,2460,
	2461,1,0,0,0,2461,401,1,0,0,0,2462,2460,1,0,0,0,2463,2464,3,1288,644,0,
	2464,2465,5,32,0,0,2465,2466,3,908,454,0,2466,403,1,0,0,0,2467,2470,3,406,
	203,0,2468,2470,3,422,211,0,2469,2467,1,0,0,0,2469,2468,1,0,0,0,2470,405,
	1,0,0,0,2471,2479,3,408,204,0,2472,2479,3,410,205,0,2473,2479,3,412,206,
	0,2474,2479,3,414,207,0,2475,2479,3,416,208,0,2476,2479,3,418,209,0,2477,
	2479,3,420,210,0,2478,2471,1,0,0,0,2478,2472,1,0,0,0,2478,2473,1,0,0,0,
	2478,2474,1,0,0,0,2478,2475,1,0,0,0,2478,2476,1,0,0,0,2478,2477,1,0,0,0,
	2479,407,1,0,0,0,2480,2481,5,3,0,0,2481,2482,3,386,193,0,2482,2483,5,11,
	0,0,2483,409,1,0,0,0,2484,2485,5,19,0,0,2485,2486,3,386,193,0,2486,2487,
	5,12,0,0,2487,411,1,0,0,0,2488,2489,5,8,0,0,2489,2490,3,386,193,0,2490,
	2491,5,13,0,0,2491,413,1,0,0,0,2492,2493,5,4,0,0,2493,2494,3,386,193,0,
	2494,2495,5,12,0,0,2495,415,1,0,0,0,2496,2497,5,19,0,0,2497,2498,3,386,
	193,0,2498,2499,5,13,0,0,2499,417,1,0,0,0,2500,2501,5,3,0,0,2501,2502,3,
	386,193,0,2502,2503,5,13,0,0,2503,419,1,0,0,0,2504,2505,5,8,0,0,2505,2506,
	3,386,193,0,2506,2507,5,11,0,0,2507,421,1,0,0,0,2508,2509,7,9,0,0,2509,
	423,1,0,0,0,2510,2512,5,44,0,0,2511,2513,3,426,213,0,2512,2511,1,0,0,0,
	2512,2513,1,0,0,0,2513,2515,1,0,0,0,2514,2516,3,338,169,0,2515,2514,1,0,
	0,0,2515,2516,1,0,0,0,2516,2517,1,0,0,0,2517,2519,3,366,183,0,2518,2520,
	3,428,214,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,
	2522,5,45,0,0,2522,425,1,0,0,0,2523,2524,3,1306,653,0,2524,2525,5,36,0,
	0,2525,427,1,0,0,0,2526,2527,5,268,0,0,2527,2528,3,834,417,0,2528,429,1,
	0,0,0,2529,2530,3,432,216,0,2530,431,1,0,0,0,2531,2536,3,434,217,0,2532,
	2533,5,34,0,0,2533,2535,3,434,217,0,2534,2532,1,0,0,0,2535,2538,1,0,0,0,
	2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,433,1,0,0,0,2538,2536,1,0,0,0,
	2539,2545,3,436,218,0,2540,2541,3,438,219,0,2541,2542,3,436,218,0,2542,
	2544,1,0,0,0,2543,2540,1,0,0,0,2544,2547,1,0,0,0,2545,2543,1,0,0,0,2545,
	2546,1,0,0,0,2546,435,1,0,0,0,2547,2545,1,0,0,0,2548,2550,5,44,0,0,2549,
	2551,3,446,223,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,2552,1,0,0,0,
	2552,2553,5,45,0,0,2553,437,1,0,0,0,2554,2558,3,440,220,0,2555,2558,3,442,
	221,0,2556,2558,3,444,222,0,2557,2554,1,0,0,0,2557,2555,1,0,0,0,2557,2556,
	1,0,0,0,2558,439,1,0,0,0,2559,2560,5,3,0,0,2560,2561,3,446,223,0,2561,2562,
	5,11,0,0,2562,441,1,0,0,0,2563,2564,5,8,0,0,2564,2565,3,446,223,0,2565,
	2566,5,13,0,0,2566,443,1,0,0,0,2567,2568,5,19,0,0,2568,2569,3,446,223,0,
	2569,2570,5,12,0,0,2570,445,1,0,0,0,2571,2573,3,388,194,0,2572,2574,3,448,
	224,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2580,1,0,0,0,2575,2577,3,
	388,194,0,2576,2575,1,0,0,0,2576,2577,1,0,0,0,2577,2578,1,0,0,0,2578,2580,
	3,448,224,0,2579,2571,1,0,0,0,2579,2576,1,0,0,0,2580,447,1,0,0,0,2581,2582,
	3,392,196,0,2582,2583,3,168,84,0,2583,2596,1,0,0,0,2584,2585,3,392,196,
	0,2585,2586,3,168,84,0,2586,2587,3,398,199,0,2587,2596,1,0,0,0,2588,2589,
	3,392,196,0,2589,2590,3,398,199,0,2590,2596,1,0,0,0,2591,2592,3,392,196,
	0,2592,2593,3,168,84,0,2593,2594,3,398,199,0,2594,2596,1,0,0,0,2595,2581,
	1,0,0,0,2595,2584,1,0,0,0,2595,2588,1,0,0,0,2595,2591,1,0,0,0,2596,449,
	1,0,0,0,2597,2602,3,452,226,0,2598,2599,5,52,0,0,2599,2601,3,452,226,0,
	2600,2598,1,0,0,0,2601,2604,1,0,0,0,2602,2600,1,0,0,0,2602,2603,1,0,0,0,
	2603,451,1,0,0,0,2604,2602,1,0,0,0,2605,2610,3,454,227,0,2606,2607,5,29,
	0,0,2607,2609,3,454,227,0,2608,2606,1,0,0,0,2609,2612,1,0,0,0,2610,2608,
	1,0,0,0,2610,2611,1,0,0,0,2611,453,1,0,0,0,2612,2610,1,0,0,0,2613,2616,
	3,458,229,0,2614,2616,3,456,228,0,2615,2613,1,0,0,0,2615,2614,1,0,0,0,2616,
	455,1,0,0,0,2617,2618,5,37,0,0,2618,2619,3,458,229,0,2619,457,1,0,0,0,2620,
	2624,3,1286,643,0,2621,2624,3,460,230,0,2622,2624,3,462,231,0,2623,2620,
	1,0,0,0,2623,2621,1,0,0,0,2623,2622,1,0,0,0,2624,459,1,0,0,0,2625,2626,
	5,53,0,0,2626,461,1,0,0,0,2627,2628,5,44,0,0,2628,2629,3,450,225,0,2629,
	2630,5,45,0,0,2630,463,1,0,0,0,2631,2636,5,30,0,0,2632,2636,5,26,0,0,2633,
	2636,3,466,233,0,2634,2636,3,468,234,0,2635,2631,1,0,0,0,2635,2632,1,0,
	0,0,2635,2633,1,0,0,0,2635,2634,1,0,0,0,2636,465,1,0,0,0,2637,2638,5,40,
	0,0,2638,2639,5,379,0,0,2639,2640,5,41,0,0,2640,467,1,0,0,0,2641,2643,5,
	40,0,0,2642,2644,3,470,235,0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2645,
	1,0,0,0,2645,2647,5,34,0,0,2646,2648,3,472,236,0,2647,2646,1,0,0,0,2647,
	2648,1,0,0,0,2648,2649,1,0,0,0,2649,2650,5,41,0,0,2650,469,1,0,0,0,2651,
	2652,5,379,0,0,2652,471,1,0,0,0,2653,2654,5,379,0,0,2654,473,1,0,0,0,2655,
	2663,3,476,238,0,2656,2663,3,478,239,0,2657,2663,3,480,240,0,2658,2663,
	3,482,241,0,2659,2663,3,484,242,0,2660,2663,3,486,243,0,2661,2663,3,488,
	244,0,2662,2655,1,0,0,0,2662,2656,1,0,0,0,2662,2657,1,0,0,0,2662,2658,1,
	0,0,0,2662,2659,1,0,0,0,2662,2660,1,0,0,0,2662,2661,1,0,0,0,2663,475,1,
	0,0,0,2664,2665,5,6,0,0,2665,2666,3,490,245,0,2666,2667,5,15,0,0,2667,477,
	1,0,0,0,2668,2669,5,21,0,0,2669,2670,3,490,245,0,2670,2671,5,17,0,0,2671,
	479,1,0,0,0,2672,2673,5,9,0,0,2673,2674,3,490,245,0,2674,2675,5,16,0,0,
	2675,481,1,0,0,0,2676,2677,5,7,0,0,2677,2678,3,490,245,0,2678,2679,5,17,
	0,0,2679,483,1,0,0,0,2680,2681,5,21,0,0,2681,2682,3,490,245,0,2682,2683,
	5,18,0,0,2683,485,1,0,0,0,2684,2685,5,6,0,0,2685,2686,3,490,245,0,2686,
	2687,5,16,0,0,2687,487,1,0,0,0,2688,2689,5,9,0,0,2689,2690,3,490,245,0,
	2690,2691,5,15,0,0,2691,489,1,0,0,0,2692,2696,3,496,248,0,2693,2696,3,492,
	246,0,2694,2696,3,494,247,0,2695,2692,1,0,0,0,2695,2693,1,0,0,0,2695,2694,
	1,0,0,0,2696,491,1,0,0,0,2697,2702,3,496,248,0,2698,2699,5,52,0,0,2699,
	2701,3,496,248,0,2700,2698,1,0,0,0,2701,2704,1,0,0,0,2702,2700,1,0,0,0,
	2702,2703,1,0,0,0,2703,493,1,0,0,0,2704,2702,1,0,0,0,2705,2710,3,496,248,
	0,2706,2707,5,58,0,0,2707,2709,3,496,248,0,2708,2706,1,0,0,0,2709,2712,
	1,0,0,0,2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,495,1,0,0,0,2712,2710,
	1,0,0,0,2713,2717,3,498,249,0,2714,2716,3,498,249,0,2715,2714,1,0,0,0,2716,
	2719,1,0,0,0,2717,2715,1,0,0,0,2717,2718,1,0,0,0,2718,497,1,0,0,0,2719,
	2717,1,0,0,0,2720,2725,3,500,250,0,2721,2722,5,29,0,0,2722,2724,3,500,250,
	0,2723,2721,1,0,0,0,2724,2727,1,0,0,0,2725,2723,1,0,0,0,2725,2726,1,0,0,
	0,2726,499,1,0,0,0,2727,2725,1,0,0,0,2728,2732,3,506,253,0,2729,2732,3,
	502,251,0,2730,2732,3,504,252,0,2731,2728,1,0,0,0,2731,2729,1,0,0,0,2731,
	2730,1,0,0,0,2732,501,1,0,0,0,2733,2734,3,506,253,0,2734,2735,3,464,232,
	0,2735,503,1,0,0,0,2736,2737,3,506,253,0,2737,2738,5,46,0,0,2738,505,1,
	0,0,0,2739,2742,3,508,254,0,2740,2742,3,524,262,0,2741,2739,1,0,0,0,2741,
	2740,1,0,0,0,2742,507,1,0,0,0,2743,2751,3,510,255,0,2744,2751,3,512,256,
	0,2745,2751,3,514,257,0,2746,2751,3,516,258,0,2747,2751,3,518,259,0,2748,
	2751,3,520,260,0,2749,2751,3,522,261,0,2750,2743,1,0,0,0,2750,2744,1,0,
	0,0,2750,2745,1,0,0,0,2750,2746,1,0,0,0,2750,2747,1,0,0,0,2750,2748,1,0,
	0,0,2750,2749,1,0,0,0,2751,509,1,0,0,0,2752,2753,5,38,0,0,2753,2754,3,524,
	262,0,2754,511,1,0,0,0,2755,2756,5,50,0,0,2756,2757,3,524,262,0,2757,513,
	1,0,0,0,2758,2759,3,524,262,0,2759,2760,5,39,0,0,2760,515,1,0,0,0,2761,
	2762,5,2,0,0,2762,2763,3,524,262,0,2763,517,1,0,0,0,2764,2765,5,50,0,0,
	2765,2766,3,524,262,0,2766,2767,5,39,0,0,2767,519,1,0,0,0,2768,2769,5,38,
	0,0,2769,2770,3,524,262,0,2770,2771,5,39,0,0,2771,521,1,0,0,0,2772,2773,
	5,27,0,0,2773,2774,3,524,262,0,2774,523,1,0,0,0,2775,2778,3,528,264,0,2776,
	2778,3,526,263,0,2777,2775,1,0,0,0,2777,2776,1,0,0,0,2778,525,1,0,0,0,2779,
	2780,5,37,0,0,2780,2781,3,528,264,0,2781,527,1,0,0,0,2782,2788,3,1286,643,
	0,2783,2784,5,44,0,0,2784,2785,3,490,245,0,2785,2786,5,45,0,0,2786,2788,
	1,0,0,0,2787,2782,1,0,0,0,2787,2783,1,0,0,0,2788,529,1,0,0,0,2789,2790,
	5,268,0,0,2790,2791,3,834,417,0,2791,531,1,0,0,0,2792,2793,5,272,0,0,2793,
	2794,3,534,267,0,2794,533,1,0,0,0,2795,2798,3,536,268,0,2796,2797,5,34,
	0,0,2797,2799,3,536,268,0,2798,2796,1,0,0,0,2799,2800,1,0,0,0,2800,2798,
	1,0,0,0,2800,2801,1,0,0,0,2801,535,1,0,0,0,2802,2804,3,538,269,0,2803,2805,
	3,540,270,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,537,1,0,0,0,2806,2807,
	3,1290,645,0,2807,539,1,0,0,0,2808,2809,5,67,0,0,2809,2810,3,1312,656,0,
	2810,541,1,0,0,0,2811,2812,5,142,0,0,2812,2813,5,81,0,0,2813,2814,3,544,
	272,0,2814,543,1,0,0,0,2815,2818,3,546,273,0,2816,2817,5,34,0,0,2817,2819,
	3,546,273,0,2818,2816,1,0,0,0,2819,2820,1,0,0,0,2820,2818,1,0,0,0,2820,
	2821,1,0,0,0,2821,2824,1,0,0,0,2822,2824,3,548,274,0,2823,2815,1,0,0,0,
	2823,2822,1,0,0,0,2824,545,1,0,0,0,2825,2826,3,298,149,0,2826,547,1,0,0,
	0,2827,2828,5,44,0,0,2828,2829,5,45,0,0,2829,549,1,0,0,0,2830,2831,5,201,
	0,0,2831,2832,5,81,0,0,2832,2833,3,566,283,0,2833,551,1,0,0,0,2834,2835,
	5,100,0,0,2835,2836,5,44,0,0,2836,2837,5,30,0,0,2837,2841,5,45,0,0,2838,
	2841,3,554,277,0,2839,2841,3,560,280,0,2840,2834,1,0,0,0,2840,2838,1,0,
	0,0,2840,2839,1,0,0,0,2841,553,1,0,0,0,2842,2843,3,556,278,0,2843,2845,
	5,44,0,0,2844,2846,3,558,279,0,2845,2844,1,0,0,0,2845,2846,1,0,0,0,2846,
	2847,1,0,0,0,2847,2848,3,908,454,0,2848,2849,5,45,0,0,2849,555,1,0,0,0,
	2850,2851,7,10,0,0,2851,557,1,0,0,0,2852,2853,7,11,0,0,2853,559,1,0,0,0,
	2854,2855,7,12,0,0,2855,561,1,0,0,0,2856,2858,3,558,279,0,2857,2856,1,0,
	0,0,2857,2858,1,0,0,0,2858,2859,1,0,0,0,2859,2860,3,944,472,0,2860,563,
	1,0,0,0,2861,2862,3,944,472,0,2862,565,1,0,0,0,2863,2866,3,568,284,0,2864,
	2865,5,34,0,0,2865,2867,3,568,284,0,2866,2864,1,0,0,0,2867,2868,1,0,0,0,
	2868,2866,1,0,0,0,2868,2869,1,0,0,0,2869,567,1,0,0,0,2870,2872,3,570,285,
	0,2871,2873,3,572,286,0,2872,2871,1,0,0,0,2872,2873,1,0,0,0,2873,2875,1,
	0,0,0,2874,2876,3,574,287,0,2875,2874,1,0,0,0,2875,2876,1,0,0,0,2876,569,
	1,0,0,0,2877,2878,3,926,463,0,2878,571,1,0,0,0,2879,2880,7,13,0,0,2880,
	573,1,0,0,0,2881,2882,5,193,0,0,2882,2886,5,322,0,0,2883,2884,5,193,0,0,
	2884,2886,5,329,0,0,2885,2881,1,0,0,0,2885,2883,1,0,0,0,2886,575,1,0,0,
	0,2887,2888,5,171,0,0,2888,2889,3,902,451,0,2889,577,1,0,0,0,2890,2891,
	3,580,290,0,2891,2892,3,902,451,0,2892,579,1,0,0,0,2893,2894,7,14,0,0,2894,
	581,1,0,0,0,2895,2897,5,339,0,0,2896,2895,1,0,0,0,2896,2897,1,0,0,0,2897,
	2898,1,0,0,0,2898,2899,5,323,0,0,2899,2900,5,353,0,0,2900,2901,3,584,292,
	0,2901,583,1,0,0,0,2902,2903,5,40,0,0,2903,2904,3,586,293,0,2904,2905,5,
	41,0,0,2905,585,1,0,0,0,2906,2907,3,588,294,0,2907,587,1,0,0,0,2908,2913,
	3,590,295,0,2909,2910,5,34,0,0,2910,2912,3,590,295,0,2911,2909,1,0,0,0,
	2912,2915,1,0,0,0,2913,2911,1,0,0,0,2913,2914,1,0,0,0,2914,589,1,0,0,0,
	2915,2913,1,0,0,0,2916,2919,3,592,296,0,2917,2919,3,606,303,0,2918,2916,
	1,0,0,0,2918,2917,1,0,0,0,2919,591,1,0,0,0,2920,2925,3,594,297,0,2921,2922,
	3,1340,670,0,2922,2923,3,596,298,0,2923,2925,1,0,0,0,2924,2920,1,0,0,0,
	2924,2921,1,0,0,0,2925,593,1,0,0,0,2926,2927,5,44,0,0,2927,2928,3,598,299,
	0,2928,2929,3,600,300,0,2929,2930,5,45,0,0,2930,595,1,0,0,0,2931,2933,5,
	353,0,0,2932,2931,1,0,0,0,2932,2933,1,0,0,0,2933,2934,1,0,0,0,2934,2936,
	3,598,299,0,2935,2937,3,600,300,0,2936,2935,1,0,0,0,2936,2937,1,0,0,0,2937,
	2940,1,0,0,0,2938,2940,3,600,300,0,2939,2932,1,0,0,0,2939,2938,1,0,0,0,
	2940,597,1,0,0,0,2941,2942,3,1278,639,0,2942,599,1,0,0,0,2943,2949,3,602,
	301,0,2944,2949,3,604,302,0,2945,2946,3,602,301,0,2946,2947,3,604,302,0,
	2947,2949,1,0,0,0,2948,2943,1,0,0,0,2948,2944,1,0,0,0,2948,2945,1,0,0,0,
	2949,601,1,0,0,0,2950,2951,3,672,336,0,2951,603,1,0,0,0,2952,2953,3,674,
	337,0,2953,605,1,0,0,0,2954,2962,3,608,304,0,2955,2957,3,650,325,0,2956,
	2955,1,0,0,0,2956,2957,1,0,0,0,2957,2958,1,0,0,0,2958,2959,3,1336,668,0,
	2959,2960,3,610,305,0,2960,2962,1,0,0,0,2961,2954,1,0,0,0,2961,2956,1,0,
	0,0,2962,607,1,0,0,0,2963,2966,3,620,310,0,2964,2966,3,636,318,0,2965,2963,
	1,0,0,0,2965,2964,1,0,0,0,2966,609,1,0,0,0,2967,2969,5,353,0,0,2968,2967,
	1,0,0,0,2968,2969,1,0,0,0,2969,2970,1,0,0,0,2970,2971,3,612,306,0,2971,
	2972,3,614,307,0,2972,2973,3,652,326,0,2973,2978,1,0,0,0,2974,2975,3,614,
	307,0,2975,2976,3,652,326,0,2976,2978,1,0,0,0,2977,2968,1,0,0,0,2977,2974,
	1,0,0,0,2978,611,1,0,0,0,2979,2980,3,1278,639,0,2980,613,1,0,0,0,2981,2987,
	3,616,308,0,2982,2987,3,618,309,0,2983,2984,3,616,308,0,2984,2985,3,618,
	309,0,2985,2987,1,0,0,0,2986,2981,1,0,0,0,2986,2982,1,0,0,0,2986,2983,1,
	0,0,0,2987,615,1,0,0,0,2988,2989,3,672,336,0,2989,617,1,0,0,0,2990,2991,
	3,674,337,0,2991,619,1,0,0,0,2992,2996,3,622,311,0,2993,2996,3,624,312,
	0,2994,2996,3,626,313,0,2995,2992,1,0,0,0,2995,2993,1,0,0,0,2995,2994,1,
	0,0,0,2996,621,1,0,0,0,2997,2998,3,646,323,0,2998,2999,3,628,314,0,2999,
	3000,3,648,324,0,3000,623,1,0,0,0,3001,3002,3,648,324,0,3002,3003,3,630,
	315,0,3003,3004,3,646,323,0,3004,625,1,0,0,0,3005,3006,3,646,323,0,3006,
	3007,3,632,316,0,3007,3008,3,648,324,0,3008,627,1,0,0,0,3009,3010,5,8,0,
	0,3010,3011,3,634,317,0,3011,3012,5,13,0,0,3012,629,1,0,0,0,3013,3014,5,
	3,0,0,3014,3015,3,634,317,0,3015,3016,5,11,0,0,3016,631,1,0,0,0,3017,3018,
	5,19,0,0,3018,3019,3,634,317,0,3019,3020,5,12,0,0,3020,633,1,0,0,0,3021,
	3022,3,612,306,0,3022,3023,3,614,307,0,3023,635,1,0,0,0,3024,3028,3,638,
	319,0,3025,3028,3,640,320,0,3026,3028,3,642,321,0,3027,3024,1,0,0,0,3027,
	3025,1,0,0,0,3027,3026,1,0,0,0,3028,637,1,0,0,0,3029,3030,3,646,323,0,3030,
	3031,5,10,0,0,3031,3032,3,648,324,0,3032,639,1,0,0,0,3033,3034,3,648,324,
	0,3034,3035,5,1,0,0,3035,3036,3,646,323,0,3036,641,1,0,0,0,3037,3038,3,
	646,323,0,3038,3039,5,50,0,0,3039,3040,3,648,324,0,3040,643,1,0,0,0,3041,
	3044,3,646,323,0,3042,3044,3,648,324,0,3043,3041,1,0,0,0,3043,3042,1,0,
	0,0,3044,645,1,0,0,0,3045,3046,5,44,0,0,3046,3047,3,668,334,0,3047,3048,
	5,45,0,0,3048,3055,1,0,0,0,3049,3051,5,44,0,0,3050,3052,3,600,300,0,3051,
	3050,1,0,0,0,3051,3052,1,0,0,0,3052,3053,1,0,0,0,3053,3055,5,45,0,0,3054,
	3045,1,0,0,0,3054,3049,1,0,0,0,3055,647,1,0,0,0,3056,3057,5,44,0,0,3057,
	3058,3,670,335,0,3058,3059,5,45,0,0,3059,3066,1,0,0,0,3060,3062,5,44,0,
	0,3061,3063,3,600,300,0,3062,3061,1,0,0,0,3062,3063,1,0,0,0,3063,3064,1,
	0,0,0,3064,3066,5,45,0,0,3065,3056,1,0,0,0,3065,3060,1,0,0,0,3066,649,1,
	0,0,0,3067,3068,7,15,0,0,3068,651,1,0,0,0,3069,3070,5,314,0,0,3070,3071,
	3,654,327,0,3071,653,1,0,0,0,3072,3077,3,656,328,0,3073,3077,3,658,329,
	0,3074,3077,3,660,330,0,3075,3077,3,636,318,0,3076,3072,1,0,0,0,3076,3073,
	1,0,0,0,3076,3074,1,0,0,0,3076,3075,1,0,0,0,3077,655,1,0,0,0,3078,3079,
	5,44,0,0,3079,3080,3,668,334,0,3080,3081,3,662,331,0,3081,3082,3,670,335,
	0,3082,3083,5,45,0,0,3083,657,1,0,0,0,3084,3085,5,44,0,0,3085,3086,3,670,
	335,0,3086,3087,3,664,332,0,3087,3088,3,668,334,0,3088,3089,5,45,0,0,3089,
	659,1,0,0,0,3090,3091,5,44,0,0,3091,3092,3,668,334,0,3092,3093,3,666,333,
	0,3093,3094,3,670,335,0,3094,3095,5,45,0,0,3095,661,1,0,0,0,3096,3097,7,
	16,0,0,3097,663,1,0,0,0,3098,3099,5,1,0,0,3099,665,1,0,0,0,3100,3101,7,
	17,0,0,3101,667,1,0,0,0,3102,3103,3,1278,639,0,3103,669,1,0,0,0,3104,3105,
	3,1278,639,0,3105,671,1,0,0,0,3106,3107,5,326,0,0,3107,3115,3,1286,643,
	0,3108,3109,5,328,0,0,3109,3115,3,168,84,0,3110,3111,5,167,0,0,3111,3115,
	3,168,84,0,3112,3113,5,32,0,0,3113,3115,3,168,84,0,3114,3106,1,0,0,0,3114,
	3108,1,0,0,0,3114,3110,1,0,0,0,3114,3112,1,0,0,0,3115,673,1,0,0,0,3116,
	3118,5,40,0,0,3117,3119,3,676,338,0,3118,3117,1,0,0,0,3118,3119,1,0,0,0,
	3119,3120,1,0,0,0,3120,3121,5,41,0,0,3121,675,1,0,0,0,3122,3127,3,678,339,
	0,3123,3124,5,34,0,0,3124,3126,3,678,339,0,3125,3123,1,0,0,0,3126,3129,
	1,0,0,0,3127,3125,1,0,0,0,3127,3128,1,0,0,0,3128,677,1,0,0,0,3129,3127,
	1,0,0,0,3130,3132,3,1288,644,0,3131,3133,3,686,343,0,3132,3131,1,0,0,0,
	3132,3133,1,0,0,0,3133,3134,1,0,0,0,3134,3135,3,680,340,0,3135,679,1,0,
	0,0,3136,3137,3,684,342,0,3137,681,1,0,0,0,3138,3140,5,312,0,0,3139,3138,
	1,0,0,0,3139,3140,1,0,0,0,3140,3141,1,0,0,0,3141,3142,5,347,0,0,3142,3143,
	3,772,386,0,3143,683,1,0,0,0,3144,3148,3,688,344,0,3145,3148,3,762,381,
	0,3146,3148,3,776,388,0,3147,3144,1,0,0,0,3147,3145,1,0,0,0,3147,3146,1,
	0,0,0,3148,685,1,0,0,0,3149,3152,5,33,0,0,3150,3152,5,248,0,0,3151,3149,
	1,0,0,0,3151,3150,1,0,0,0,3152,687,1,0,0,0,3153,3161,3,690,345,0,3154,3161,
	3,692,346,0,3155,3161,3,694,347,0,3156,3161,3,702,351,0,3157,3161,3,722,
	361,0,3158,3161,3,740,370,0,3159,3161,3,788,394,0,3160,3153,1,0,0,0,3160,
	3154,1,0,0,0,3160,3155,1,0,0,0,3160,3156,1,0,0,0,3160,3157,1,0,0,0,3160,
	3158,1,0,0,0,3160,3159,1,0,0,0,3161,689,1,0,0,0,3162,3164,7,18,0,0,3163,
	3165,3,790,395,0,3164,3163,1,0,0,0,3164,3165,1,0,0,0,3165,691,1,0,0,0,3166,
	3171,7,19,0,0,3167,3168,5,44,0,0,3168,3169,3,698,349,0,3169,3170,5,45,0,
	0,3170,3172,1,0,0,0,3171,3167,1,0,0,0,3171,3172,1,0,0,0,3172,3174,1,0,0,
	0,3173,3175,3,790,395,0,3174,3173,1,0,0,0,3174,3175,1,0,0,0,3175,693,1,
	0,0,0,3176,3185,5,83,0,0,3177,3178,5,44,0,0,3178,3180,3,696,348,0,3179,
	3181,5,34,0,0,3180,3179,1,0,0,0,3180,3181,1,0,0,0,3181,3182,1,0,0,0,3182,
	3183,3,698,349,0,3183,3184,5,45,0,0,3184,3186,1,0,0,0,3185,3177,1,0,0,0,
	3185,3186,1,0,0,0,3186,3188,1,0,0,0,3187,3189,3,790,395,0,3188,3187,1,0,
	0,0,3188,3189,1,0,0,0,3189,3211,1,0,0,0,3190,3195,5,76,0,0,3191,3192,5,
	44,0,0,3192,3193,3,700,350,0,3193,3194,5,45,0,0,3194,3196,1,0,0,0,3195,
	3191,1,0,0,0,3195,3196,1,0,0,0,3196,3198,1,0,0,0,3197,3199,3,790,395,0,
	3198,3197,1,0,0,0,3198,3199,1,0,0,0,3199,3211,1,0,0,0,3200,3205,5,264,0,
	0,3201,3202,5,44,0,0,3202,3203,3,698,349,0,3203,3204,5,45,0,0,3204,3206,
	1,0,0,0,3205,3201,1,0,0,0,3205,3206,1,0,0,0,3206,3208,1,0,0,0,3207,3209,
	3,790,395,0,3208,3207,1,0,0,0,3208,3209,1,0,0,0,3209,3211,1,0,0,0,3210,
	3176,1,0,0,0,3210,3190,1,0,0,0,3210,3200,1,0,0,0,3211,695,1,0,0,0,3212,
	3213,5,379,0,0,3213,697,1,0,0,0,3214,3215,5,379,0,0,3215,699,1,0,0,0,3216,
	3217,5,379,0,0,3217,701,1,0,0,0,3218,3221,3,704,352,0,3219,3221,3,720,360,
	0,3220,3218,1,0,0,0,3220,3219,1,0,0,0,3221,703,1,0,0,0,3222,3225,3,706,
	353,0,3223,3225,3,714,357,0,3224,3222,1,0,0,0,3224,3223,1,0,0,0,3225,705,
	1,0,0,0,3226,3229,3,708,354,0,3227,3229,3,710,355,0,3228,3226,1,0,0,0,3228,
	3227,1,0,0,0,3229,707,1,0,0,0,3230,3232,5,153,0,0,3231,3233,3,790,395,0,
	3232,3231,1,0,0,0,3232,3233,1,0,0,0,3233,3277,1,0,0,0,3234,3236,5,155,0,
	0,3235,3237,3,790,395,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3277,1,
	0,0,0,3238,3240,5,157,0,0,3239,3241,3,790,395,0,3240,3239,1,0,0,0,3240,
	3241,1,0,0,0,3241,3277,1,0,0,0,3242,3244,5,159,0,0,3243,3245,3,790,395,
	0,3244,3243,1,0,0,0,3244,3245,1,0,0,0,3245,3277,1,0,0,0,3246,3248,5,161,
	0,0,3247,3249,3,790,395,0,3248,3247,1,0,0,0,3248,3249,1,0,0,0,3249,3277,
	1,0,0,0,3250,3252,5,163,0,0,3251,3253,3,790,395,0,3252,3251,1,0,0,0,3252,
	3253,1,0,0,0,3253,3277,1,0,0,0,3254,3256,5,233,0,0,3255,3257,3,790,395,
	0,3256,3255,1,0,0,0,3256,3257,1,0,0,0,3257,3277,1,0,0,0,3258,3263,5,151,
	0,0,3259,3260,5,44,0,0,3260,3261,3,716,358,0,3261,3262,5,45,0,0,3262,3264,
	1,0,0,0,3263,3259,1,0,0,0,3263,3264,1,0,0,0,3264,3266,1,0,0,0,3265,3267,
	3,790,395,0,3266,3265,1,0,0,0,3266,3267,1,0,0,0,3267,3277,1,0,0,0,3268,
	3270,5,75,0,0,3269,3271,3,790,395,0,3270,3269,1,0,0,0,3270,3271,1,0,0,0,
	3271,3277,1,0,0,0,3272,3274,5,228,0,0,3273,3272,1,0,0,0,3273,3274,1,0,0,
	0,3274,3275,1,0,0,0,3275,3277,3,712,356,0,3276,3230,1,0,0,0,3276,3234,1,
	0,0,0,3276,3238,1,0,0,0,3276,3242,1,0,0,0,3276,3246,1,0,0,0,3276,3250,1,
	0,0,0,3276,3254,1,0,0,0,3276,3258,1,0,0,0,3276,3268,1,0,0,0,3276,3273,1,
	0,0,0,3277,709,1,0,0,0,3278,3280,5,251,0,0,3279,3281,3,790,395,0,3280,3279,
	1,0,0,0,3280,3281,1,0,0,0,3281,3323,1,0,0,0,3282,3284,5,252,0,0,3283,3285,
	3,790,395,0,3284,3283,1,0,0,0,3284,3285,1,0,0,0,3285,3323,1,0,0,0,3286,
	3288,5,253,0,0,3287,3289,3,790,395,0,3288,3287,1,0,0,0,3288,3289,1,0,0,
	0,3289,3323,1,0,0,0,3290,3292,5,254,0,0,3291,3293,3,790,395,0,3292,3291,
	1,0,0,0,3292,3293,1,0,0,0,3293,3323,1,0,0,0,3294,3296,5,255,0,0,3295,3297,
	3,790,395,0,3296,3295,1,0,0,0,3296,3297,1,0,0,0,3297,3323,1,0,0,0,3298,
	3300,5,256,0,0,3299,3301,3,790,395,0,3300,3299,1,0,0,0,3300,3301,1,0,0,
	0,3301,3323,1,0,0,0,3302,3304,5,262,0,0,3303,3305,3,790,395,0,3304,3303,
	1,0,0,0,3304,3305,1,0,0,0,3305,3323,1,0,0,0,3306,3311,5,250,0,0,3307,3308,
	5,44,0,0,3308,3309,3,716,358,0,3309,3310,5,45,0,0,3310,3312,1,0,0,0,3311,
	3307,1,0,0,0,3311,3312,1,0,0,0,3312,3314,1,0,0,0,3313,3315,3,790,395,0,
	3314,3313,1,0,0,0,3314,3315,1,0,0,0,3315,3323,1,0,0,0,3316,3318,5,249,0,
	0,3317,3319,3,790,395,0,3318,3317,1,0,0,0,3318,3319,1,0,0,0,3319,3323,1,
	0,0,0,3320,3321,5,259,0,0,3321,3323,3,712,356,0,3322,3278,1,0,0,0,3322,
	3282,1,0,0,0,3322,3286,1,0,0,0,3322,3290,1,0,0,0,3322,3294,1,0,0,0,3322,
	3298,1,0,0,0,3322,3302,1,0,0,0,3322,3306,1,0,0,0,3322,3316,1,0,0,0,3322,
	3320,1,0,0,0,3323,711,1,0,0,0,3324,3326,5,154,0,0,3325,3327,3,790,395,0,
	3326,3325,1,0,0,0,3326,3327,1,0,0,0,3327,3369,1,0,0,0,3328,3330,5,156,0,
	0,3329,3331,3,790,395,0,3330,3329,1,0,0,0,3330,3331,1,0,0,0,3331,3369,1,
	0,0,0,3332,3334,5,158,0,0,3333,3335,3,790,395,0,3334,3333,1,0,0,0,3334,
	3335,1,0,0,0,3335,3369,1,0,0,0,3336,3338,5,160,0,0,3337,3339,3,790,395,
	0,3338,3337,1,0,0,0,3338,3339,1,0,0,0,3339,3369,1,0,0,0,3340,3342,5,162,
	0,0,3341,3343,3,790,395,0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,3369,
	1,0,0,0,3344,3346,5,164,0,0,3345,3347,3,790,395,0,3346,3345,1,0,0,0,3346,
	3347,1,0,0,0,3347,3369,1,0,0,0,3348,3349,5,232,0,0,3349,3351,5,152,0,0,
	3350,3352,3,790,395,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3369,1,0,
	0,0,3353,3358,5,152,0,0,3354,3355,5,44,0,0,3355,3356,3,716,358,0,3356,3357,
	5,45,0,0,3357,3359,1,0,0,0,3358,3354,1,0,0,0,3358,3359,1,0,0,0,3359,3361,
	1,0,0,0,3360,3362,3,790,395,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,
	3369,1,0,0,0,3363,3364,5,74,0,0,3364,3366,5,152,0,0,3365,3367,3,790,395,
	0,3366,3365,1,0,0,0,3366,3367,1,0,0,0,3367,3369,1,0,0,0,3368,3324,1,0,0,
	0,3368,3328,1,0,0,0,3368,3332,1,0,0,0,3368,3336,1,0,0,0,3368,3340,1,0,0,
	0,3368,3344,1,0,0,0,3368,3348,1,0,0,0,3368,3353,1,0,0,0,3368,3363,1,0,0,
	0,3369,713,1,0,0,0,3370,3379,7,20,0,0,3371,3372,5,44,0,0,3372,3373,3,716,
	358,0,3373,3375,5,34,0,0,3374,3376,3,718,359,0,3375,3374,1,0,0,0,3375,3376,
	1,0,0,0,3376,3377,1,0,0,0,3377,3378,5,45,0,0,3378,3380,1,0,0,0,3379,3371,
	1,0,0,0,3379,3380,1,0,0,0,3380,3382,1,0,0,0,3381,3383,3,790,395,0,3382,
	3381,1,0,0,0,3382,3383,1,0,0,0,3383,715,1,0,0,0,3384,3385,5,380,0,0,3385,
	717,1,0,0,0,3386,3387,5,380,0,0,3387,719,1,0,0,0,3388,3390,5,134,0,0,3389,
	3391,3,790,395,0,3390,3389,1,0,0,0,3390,3391,1,0,0,0,3391,3432,1,0,0,0,
	3392,3394,5,135,0,0,3393,3395,3,790,395,0,3394,3393,1,0,0,0,3394,3395,1,
	0,0,0,3395,3432,1,0,0,0,3396,3398,5,136,0,0,3397,3399,3,790,395,0,3398,
	3397,1,0,0,0,3398,3399,1,0,0,0,3399,3432,1,0,0,0,3400,3402,5,137,0,0,3401,
	3403,3,790,395,0,3402,3401,1,0,0,0,3402,3403,1,0,0,0,3403,3432,1,0,0,0,
	3404,3406,5,138,0,0,3405,3407,3,790,395,0,3406,3405,1,0,0,0,3406,3407,1,
	0,0,0,3407,3432,1,0,0,0,3408,3417,5,133,0,0,3409,3410,5,44,0,0,3410,3411,
	3,716,358,0,3411,3413,5,34,0,0,3412,3414,3,718,359,0,3413,3412,1,0,0,0,
	3413,3414,1,0,0,0,3414,3415,1,0,0,0,3415,3416,5,45,0,0,3416,3418,1,0,0,
	0,3417,3409,1,0,0,0,3417,3418,1,0,0,0,3418,3420,1,0,0,0,3419,3421,3,790,
	395,0,3420,3419,1,0,0,0,3420,3421,1,0,0,0,3421,3432,1,0,0,0,3422,3424,5,
	214,0,0,3423,3425,3,790,395,0,3424,3423,1,0,0,0,3424,3425,1,0,0,0,3425,
	3432,1,0,0,0,3426,3428,5,120,0,0,3427,3429,5,211,0,0,3428,3427,1,0,0,0,
	3428,3429,1,0,0,0,3429,3430,1,0,0,0,3430,3432,3,790,395,0,3431,3388,1,0,
	0,0,3431,3392,1,0,0,0,3431,3396,1,0,0,0,3431,3400,1,0,0,0,3431,3404,1,0,
	0,0,3431,3408,1,0,0,0,3431,3422,1,0,0,0,3431,3426,1,0,0,0,3432,721,1,0,
	0,0,3433,3436,3,724,362,0,3434,3436,3,726,363,0,3435,3433,1,0,0,0,3435,
	3434,1,0,0,0,3436,723,1,0,0,0,3437,3443,3,728,364,0,3438,3443,3,730,365,
	0,3439,3443,3,732,366,0,3440,3443,3,734,367,0,3441,3443,3,736,368,0,3442,
	3437,1,0,0,0,3442,3438,1,0,0,0,3442,3439,1,0,0,0,3442,3440,1,0,0,0,3442,
	3441,1,0,0,0,3443,725,1,0,0,0,3444,3445,3,738,369,0,3445,727,1,0,0,0,3446,
	3447,5,273,0,0,3447,3449,5,110,0,0,3448,3450,3,790,395,0,3449,3448,1,0,
	0,0,3449,3450,1,0,0,0,3450,3458,1,0,0,0,3451,3452,5,244,0,0,3452,3453,5,
	269,0,0,3453,3455,5,349,0,0,3454,3456,3,790,395,0,3455,3454,1,0,0,0,3455,
	3456,1,0,0,0,3456,3458,1,0,0,0,3457,3446,1,0,0,0,3457,3451,1,0,0,0,3458,
	729,1,0,0,0,3459,3460,5,174,0,0,3460,3462,5,110,0,0,3461,3463,3,790,395,
	0,3462,3461,1,0,0,0,3462,3463,1,0,0,0,3463,3472,1,0,0,0,3464,3465,5,244,
	0,0,3465,3466,5,357,0,0,3466,3467,5,349,0,0,3467,3469,1,0,0,0,3468,3470,
	3,790,395,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,3472,1,0,0,0,3471,
	3459,1,0,0,0,3471,3464,1,0,0,0,3472,731,1,0,0,0,3473,3475,5,109,0,0,3474,
	3476,3,790,395,0,3475,3474,1,0,0,0,3475,3476,1,0,0,0,3476,733,1,0,0,0,3477,
	3478,5,273,0,0,3478,3480,5,243,0,0,3479,3481,3,790,395,0,3480,3479,1,0,
	0,0,3480,3481,1,0,0,0,3481,3489,1,0,0,0,3482,3483,5,243,0,0,3483,3484,5,
	269,0,0,3484,3486,5,349,0,0,3485,3487,3,790,395,0,3486,3485,1,0,0,0,3486,
	3487,1,0,0,0,3487,3489,1,0,0,0,3488,3477,1,0,0,0,3488,3482,1,0,0,0,3489,
	735,1,0,0,0,3490,3491,5,174,0,0,3491,3493,5,243,0,0,3492,3494,3,790,395,
	0,3493,3492,1,0,0,0,3493,3494,1,0,0,0,3494,3502,1,0,0,0,3495,3496,5,243,
	0,0,3496,3497,5,357,0,0,3497,3499,5,349,0,0,3498,3500,3,790,395,0,3499,
	3498,1,0,0,0,3499,3500,1,0,0,0,3500,3502,1,0,0,0,3501,3490,1,0,0,0,3501,
	3495,1,0,0,0,3502,737,1,0,0,0,3503,3505,5,122,0,0,3504,3506,3,790,395,0,
	3505,3504,1,0,0,0,3505,3506,1,0,0,0,3506,739,1,0,0,0,3507,3512,3,742,371,
	0,3508,3512,3,748,374,0,3509,3512,3,750,375,0,3510,3512,3,756,378,0,3511,
	3507,1,0,0,0,3511,3508,1,0,0,0,3511,3509,1,0,0,0,3511,3510,1,0,0,0,3512,
	741,1,0,0,0,3513,3516,3,744,372,0,3514,3516,3,746,373,0,3515,3513,1,0,0,
	0,3515,3514,1,0,0,0,3516,743,1,0,0,0,3517,3519,5,198,0,0,3518,3520,5,339,
	0,0,3519,3518,1,0,0,0,3519,3520,1,0,0,0,3520,3521,1,0,0,0,3521,3523,5,323,
	0,0,3522,3524,3,790,395,0,3523,3522,1,0,0,0,3523,3524,1,0,0,0,3524,745,
	1,0,0,0,3525,3527,3,582,291,0,3526,3528,3,790,395,0,3527,3526,1,0,0,0,3527,
	3528,1,0,0,0,3528,747,1,0,0,0,3529,3531,3,682,341,0,3530,3532,3,790,395,
	0,3531,3530,1,0,0,0,3531,3532,1,0,0,0,3532,749,1,0,0,0,3533,3536,3,752,
	376,0,3534,3536,3,754,377,0,3535,3533,1,0,0,0,3535,3534,1,0,0,0,3536,751,
	1,0,0,0,3537,3539,5,198,0,0,3538,3537,1,0,0,0,3538,3539,1,0,0,0,3539,3540,
	1,0,0,0,3540,3542,3,1340,670,0,3541,3543,3,790,395,0,3542,3541,1,0,0,0,
	3542,3543,1,0,0,0,3543,753,1,0,0,0,3544,3546,3,606,303,0,3545,3547,3,790,
	395,0,3546,3545,1,0,0,0,3546,3547,1,0,0,0,3547,755,1,0,0,0,3548,3551,3,
	758,379,0,3549,3551,3,760,380,0,3550,3548,1,0,0,0,3550,3549,1,0,0,0,3551,
	757,1,0,0,0,3552,3554,5,198,0,0,3553,3552,1,0,0,0,3553,3554,1,0,0,0,3554,
	3555,1,0,0,0,3555,3557,3,1336,668,0,3556,3558,3,790,395,0,3557,3556,1,0,
	0,0,3557,3558,1,0,0,0,3558,759,1,0,0,0,3559,3561,3,606,303,0,3560,3562,
	3,790,395,0,3561,3560,1,0,0,0,3561,3562,1,0,0,0,3562,761,1,0,0,0,3563,3566,
	3,764,382,0,3564,3566,3,770,385,0,3565,3563,1,0,0,0,3565,3564,1,0,0,0,3566,
	763,1,0,0,0,3567,3568,3,766,383,0,3568,3569,5,38,0,0,3569,3570,3,688,344,
	0,3570,3575,5,39,0,0,3571,3572,5,42,0,0,3572,3573,3,698,349,0,3573,3574,
	5,43,0,0,3574,3576,1,0,0,0,3575,3571,1,0,0,0,3575,3576,1,0,0,0,3576,3578,
	1,0,0,0,3577,3579,3,790,395,0,3578,3577,1,0,0,0,3578,3579,1,0,0,0,3579,
	3592,1,0,0,0,3580,3581,3,688,344,0,3581,3586,3,766,383,0,3582,3583,5,42,
	0,0,3583,3584,3,698,349,0,3584,3585,5,43,0,0,3585,3587,1,0,0,0,3586,3582,
	1,0,0,0,3586,3587,1,0,0,0,3587,3589,1,0,0,0,3588,3590,3,790,395,0,3589,
	3588,1,0,0,0,3589,3590,1,0,0,0,3590,3592,1,0,0,0,3591,3567,1,0,0,0,3591,
	3580,1,0,0,0,3592,765,1,0,0,0,3593,3595,5,142,0,0,3594,3593,1,0,0,0,3594,
	3595,1,0,0,0,3595,3596,1,0,0,0,3596,3597,3,768,384,0,3597,767,1,0,0,0,3598,
	3599,7,21,0,0,3599,769,1,0,0,0,3600,3602,5,198,0,0,3601,3600,1,0,0,0,3601,
	3602,1,0,0,0,3602,3603,1,0,0,0,3603,3605,5,215,0,0,3604,3606,3,790,395,
	0,3605,3604,1,0,0,0,3605,3606,1,0,0,0,3606,3615,1,0,0,0,3607,3609,5,215,
	0,0,3608,3607,1,0,0,0,3608,3609,1,0,0,0,3609,3610,1,0,0,0,3610,3612,3,772,
	386,0,3611,3613,3,790,395,0,3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3615,
	1,0,0,0,3614,3601,1,0,0,0,3614,3608,1,0,0,0,3615,771,1,0,0,0,3616,3618,
	5,40,0,0,3617,3619,3,774,387,0,3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,
	3620,1,0,0,0,3620,3621,5,41,0,0,3621,773,1,0,0,0,3622,3625,3,792,396,0,
	3623,3624,5,34,0,0,3624,3626,3,792,396,0,3625,3623,1,0,0,0,3626,3627,1,
	0,0,0,3627,3625,1,0,0,0,3627,3628,1,0,0,0,3628,775,1,0,0,0,3629,3633,3,
	778,389,0,3630,3633,3,780,390,0,3631,3633,3,782,391,0,3632,3629,1,0,0,0,
	3632,3630,1,0,0,0,3632,3631,1,0,0,0,3633,777,1,0,0,0,3634,3635,5,65,0,0,
	3635,779,1,0,0,0,3636,3638,5,65,0,0,3637,3636,1,0,0,0,3637,3638,1,0,0,0,
	3638,3639,1,0,0,0,3639,3640,5,339,0,0,3640,3641,5,263,0,0,3641,781,1,0,
	0,0,3642,3643,5,65,0,0,3643,3644,5,38,0,0,3644,3645,3,784,392,0,3645,3646,
	5,39,0,0,3646,783,1,0,0,0,3647,3652,3,786,393,0,3648,3649,5,52,0,0,3649,
	3651,3,786,393,0,3650,3648,1,0,0,0,3651,3654,1,0,0,0,3652,3650,1,0,0,0,
	3652,3653,1,0,0,0,3653,785,1,0,0,0,3654,3652,1,0,0,0,3655,3656,3,684,342,
	0,3656,787,1,0,0,0,3657,3658,5,205,0,0,3658,789,1,0,0,0,3659,3660,5,191,
	0,0,3660,3661,5,192,0,0,3661,791,1,0,0,0,3662,3663,3,1290,645,0,3663,3664,
	3,686,343,0,3664,3665,3,684,342,0,3665,793,1,0,0,0,3666,3670,3,796,398,
	0,3667,3670,3,800,400,0,3668,3670,3,830,415,0,3669,3666,1,0,0,0,3669,3667,
	1,0,0,0,3669,3668,1,0,0,0,3670,795,1,0,0,0,3671,3676,5,48,0,0,3672,3673,
	3,804,402,0,3673,3674,3,1270,635,0,3674,3676,1,0,0,0,3675,3671,1,0,0,0,
	3675,3672,1,0,0,0,3676,797,1,0,0,0,3677,3678,3,804,402,0,3678,3679,3,1270,
	635,0,3679,799,1,0,0,0,3680,3685,3,802,401,0,3681,3682,3,806,403,0,3682,
	3683,3,1270,635,0,3683,3685,1,0,0,0,3684,3680,1,0,0,0,3684,3681,1,0,0,0,
	3685,801,1,0,0,0,3686,3687,7,22,0,0,3687,803,1,0,0,0,3688,3690,5,48,0,0,
	3689,3691,3,808,404,0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,3691,805,1,0,
	0,0,3692,3704,5,55,0,0,3693,3694,5,48,0,0,3694,3696,5,55,0,0,3695,3693,
	1,0,0,0,3696,3699,1,0,0,0,3697,3695,1,0,0,0,3697,3698,1,0,0,0,3698,3700,
	1,0,0,0,3699,3697,1,0,0,0,3700,3702,5,48,0,0,3701,3703,3,808,404,0,3702,
	3701,1,0,0,0,3702,3703,1,0,0,0,3703,3705,1,0,0,0,3704,3697,1,0,0,0,3704,
	3705,1,0,0,0,3705,807,1,0,0,0,3706,3707,3,1268,634,0,3707,3708,5,48,0,0,
	3708,3710,1,0,0,0,3709,3706,1,0,0,0,3710,3711,1,0,0,0,3711,3709,1,0,0,0,
	3711,3712,1,0,0,0,3712,809,1,0,0,0,3713,3714,3,828,414,0,3714,3715,3,1272,
	636,0,3715,3720,1,0,0,0,3716,3720,3,1274,637,0,3717,3720,3,814,407,0,3718,
	3720,3,830,415,0,3719,3713,1,0,0,0,3719,3716,1,0,0,0,3719,3717,1,0,0,0,
	3719,3718,1,0,0,0,3720,811,1,0,0,0,3721,3723,3,828,414,0,3722,3721,1,0,
	0,0,3722,3723,1,0,0,0,3723,3724,1,0,0,0,3724,3725,3,1272,636,0,3725,813,
	1,0,0,0,3726,3727,7,23,0,0,3727,815,1,0,0,0,3728,3731,3,818,409,0,3729,
	3731,3,830,415,0,3730,3728,1,0,0,0,3730,3729,1,0,0,0,3731,817,1,0,0,0,3732,
	3734,3,828,414,0,3733,3732,1,0,0,0,3733,3734,1,0,0,0,3734,3735,1,0,0,0,
	3735,3736,3,1276,638,0,3736,819,1,0,0,0,3737,3738,3,828,414,0,3738,3739,
	3,1280,640,0,3739,3743,1,0,0,0,3740,3743,3,1282,641,0,3741,3743,3,830,415,
	0,3742,3737,1,0,0,0,3742,3740,1,0,0,0,3742,3741,1,0,0,0,3743,821,1,0,0,
	0,3744,3746,3,828,414,0,3745,3744,1,0,0,0,3745,3746,1,0,0,0,3746,3747,1,
	0,0,0,3747,3748,3,1280,640,0,3748,823,1,0,0,0,3749,3752,3,826,413,0,3750,
	3752,3,830,415,0,3751,3749,1,0,0,0,3751,3750,1,0,0,0,3752,825,1,0,0,0,3753,
	3755,3,828,414,0,3754,3753,1,0,0,0,3754,3755,1,0,0,0,3755,3756,1,0,0,0,
	3756,3757,3,1284,642,0,3757,827,1,0,0,0,3758,3760,3,794,397,0,3759,3761,
	5,48,0,0,3760,3759,1,0,0,0,3760,3761,1,0,0,0,3761,3767,1,0,0,0,3762,3763,
	3,1264,632,0,3763,3764,5,54,0,0,3764,3766,1,0,0,0,3765,3762,1,0,0,0,3766,
	3769,1,0,0,0,3767,3765,1,0,0,0,3767,3768,1,0,0,0,3768,3778,1,0,0,0,3769,
	3767,1,0,0,0,3770,3771,3,1264,632,0,3771,3772,5,54,0,0,3772,3774,1,0,0,
	0,3773,3770,1,0,0,0,3774,3775,1,0,0,0,3775,3773,1,0,0,0,3775,3776,1,0,0,
	0,3776,3778,1,0,0,0,3777,3758,1,0,0,0,3777,3773,1,0,0,0,3778,829,1,0,0,
	0,3779,3780,3,304,152,0,3780,831,1,0,0,0,3781,3782,1,0,0,0,3782,833,1,0,
	0,0,3783,3784,3,928,464,0,3784,835,1,0,0,0,3785,3797,3,838,419,0,3786,3797,
	3,858,429,0,3787,3797,3,860,430,0,3788,3797,3,864,432,0,3789,3797,3,868,
	434,0,3790,3797,3,872,436,0,3791,3797,3,876,438,0,3792,3797,3,882,441,0,
	3793,3797,3,892,446,0,3794,3797,3,894,447,0,3795,3797,3,896,448,0,3796,
	3785,1,0,0,0,3796,3786,1,0,0,0,3796,3787,1,0,0,0,3796,3788,1,0,0,0,3796,
	3789,1,0,0,0,3796,3790,1,0,0,0,3796,3791,1,0,0,0,3796,3792,1,0,0,0,3796,
	3793,1,0,0,0,3796,3794,1,0,0,0,3796,3795,1,0,0,0,3797,837,1,0,0,0,3798,
	3799,3,856,428,0,3799,3800,3,840,420,0,3800,839,1,0,0,0,3801,3802,3,842,
	421,0,3802,3803,3,856,428,0,3803,841,1,0,0,0,3804,3811,3,844,422,0,3805,
	3811,3,846,423,0,3806,3811,3,848,424,0,3807,3811,3,850,425,0,3808,3811,
	3,852,426,0,3809,3811,3,854,427,0,3810,3804,1,0,0,0,3810,3805,1,0,0,0,3810,
	3806,1,0,0,0,3810,3807,1,0,0,0,3810,3808,1,0,0,0,3810,3809,1,0,0,0,3811,
	843,1,0,0,0,3812,3813,5,36,0,0,3813,845,1,0,0,0,3814,3815,5,38,0,0,3815,
	3816,5,39,0,0,3816,847,1,0,0,0,3817,3818,5,38,0,0,3818,849,1,0,0,0,3819,
	3820,5,39,0,0,3820,851,1,0,0,0,3821,3822,5,38,0,0,3822,3823,5,36,0,0,3823,
	853,1,0,0,0,3824,3825,5,39,0,0,3825,3826,5,36,0,0,3826,855,1,0,0,0,3827,
	3830,3,910,455,0,3828,3830,3,940,470,0,3829,3827,1,0,0,0,3829,3828,1,0,
	0,0,3830,857,1,0,0,0,3831,3849,5,128,0,0,3832,3833,5,40,0,0,3833,3834,3,
	314,157,0,3834,3835,5,41,0,0,3835,3850,1,0,0,0,3836,3837,5,44,0,0,3837,
	3838,3,314,157,0,3838,3839,5,45,0,0,3839,3850,1,0,0,0,3840,3841,5,40,0,
	0,3841,3842,3,226,113,0,3842,3843,5,41,0,0,3843,3850,1,0,0,0,3844,3845,
	5,44,0,0,3845,3846,3,226,113,0,3846,3847,5,45,0,0,3847,3850,1,0,0,0,3848,
	3850,3,54,27,0,3849,3832,1,0,0,0,3849,3836,1,0,0,0,3849,3840,1,0,0,0,3849,
	3844,1,0,0,0,3849,3848,1,0,0,0,3850,859,1,0,0,0,3851,3852,3,952,476,0,3852,
	3853,3,862,431,0,3853,861,1,0,0,0,3854,3856,5,167,0,0,3855,3857,5,191,0,
	0,3856,3855,1,0,0,0,3856,3857,1,0,0,0,3857,3858,1,0,0,0,3858,3859,5,192,
	0,0,3859,863,1,0,0,0,3860,3861,3,952,476,0,3861,3862,3,866,433,0,3862,865,
	1,0,0,0,3863,3865,5,167,0,0,3864,3866,5,191,0,0,3865,3864,1,0,0,0,3865,
	3866,1,0,0,0,3866,3867,1,0,0,0,3867,3868,3,686,343,0,3868,3869,3,684,342,
	0,3869,867,1,0,0,0,3870,3871,3,1010,505,0,3871,3872,3,870,435,0,3872,869,
	1,0,0,0,3873,3875,5,167,0,0,3874,3876,5,191,0,0,3875,3874,1,0,0,0,3875,
	3876,1,0,0,0,3876,3878,1,0,0,0,3877,3879,3,1050,525,0,3878,3877,1,0,0,0,
	3878,3879,1,0,0,0,3879,3880,1,0,0,0,3880,3881,5,336,0,0,3881,871,1,0,0,
	0,3882,3883,3,300,150,0,3883,3884,3,872,436,0,3884,873,1,0,0,0,3885,3887,
	5,167,0,0,3886,3888,5,191,0,0,3887,3886,1,0,0,0,3887,3888,1,0,0,0,3888,
	3889,1,0,0,0,3889,3890,5,317,0,0,3890,875,1,0,0,0,3891,3892,3,300,150,0,
	3892,877,1,0,0,0,3893,3894,3,880,440,0,3894,3895,3,450,225,0,3895,879,1,
	0,0,0,3896,3898,5,167,0,0,3897,3899,5,191,0,0,3898,3897,1,0,0,0,3898,3899,
	1,0,0,0,3899,3900,1,0,0,0,3900,3903,5,327,0,0,3901,3903,5,32,0,0,3902,3896,
	1,0,0,0,3902,3901,1,0,0,0,3903,881,1,0,0,0,3904,3905,3,884,442,0,3905,3906,
	3,886,443,0,3906,3911,1,0,0,0,3907,3908,3,884,442,0,3908,3909,3,888,444,
	0,3909,3911,1,0,0,0,3910,3904,1,0,0,0,3910,3907,1,0,0,0,3911,883,1,0,0,
	0,3912,3913,3,300,150,0,3913,885,1,0,0,0,3914,3916,5,167,0,0,3915,3917,
	5,191,0,0,3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,3918,1,0,0,0,3918,3919,
	5,346,0,0,3919,3920,5,196,0,0,3920,3921,3,890,445,0,3921,887,1,0,0,0,3922,
	3924,5,167,0,0,3923,3925,5,191,0,0,3924,3923,1,0,0,0,3924,3925,1,0,0,0,
	3925,3926,1,0,0,0,3926,3927,5,315,0,0,3927,3928,5,196,0,0,3928,3929,3,890,
	445,0,3929,889,1,0,0,0,3930,3931,3,300,150,0,3931,891,1,0,0,0,3932,3933,
	5,63,0,0,3933,3934,5,44,0,0,3934,3937,3,300,150,0,3935,3936,5,34,0,0,3936,
	3938,3,300,150,0,3937,3935,1,0,0,0,3938,3939,1,0,0,0,3939,3937,1,0,0,0,
	3939,3940,1,0,0,0,3940,3941,1,0,0,0,3941,3942,5,45,0,0,3942,893,1,0,0,0,
	3943,3944,5,222,0,0,3944,3945,5,44,0,0,3945,3948,3,300,150,0,3946,3947,
	5,34,0,0,3947,3949,3,300,150,0,3948,3946,1,0,0,0,3949,3950,1,0,0,0,3950,
	3948,1,0,0,0,3950,3951,1,0,0,0,3951,3952,1,0,0,0,3952,3953,5,45,0,0,3953,
	895,1,0,0,0,3954,3955,5,212,0,0,3955,3956,5,44,0,0,3956,3957,3,300,150,
	0,3957,3958,5,34,0,0,3958,3959,3,1288,644,0,3959,3960,5,45,0,0,3960,897,
	1,0,0,0,3961,3964,3,1206,603,0,3962,3964,3,904,452,0,3963,3961,1,0,0,0,
	3963,3962,1,0,0,0,3964,899,1,0,0,0,3965,3968,3,1212,606,0,3966,3968,3,904,
	452,0,3967,3965,1,0,0,0,3967,3966,1,0,0,0,3968,901,1,0,0,0,3969,3972,5,
	379,0,0,3970,3972,3,304,152,0,3971,3969,1,0,0,0,3971,3970,1,0,0,0,3972,
	903,1,0,0,0,3973,3976,3,304,152,0,3974,3976,3,906,453,0,3975,3973,1,0,0,
	0,3975,3974,1,0,0,0,3976,905,1,0,0,0,3977,3978,5,108,0,0,3978,907,1,0,0,
	0,3979,3982,3,910,455,0,3980,3982,3,928,464,0,3981,3979,1,0,0,0,3981,3980,
	1,0,0,0,3982,909,1,0,0,0,3983,3993,3,944,472,0,3984,3993,3,1010,505,0,3985,
	3993,3,1064,532,0,3986,3993,3,1090,545,0,3987,3993,3,1120,560,0,3988,3993,
	3,924,462,0,3989,3993,3,1148,574,0,3990,3993,3,914,457,0,3991,3993,3,912,
	456,0,3992,3983,1,0,0,0,3992,3984,1,0,0,0,3992,3985,1,0,0,0,3992,3986,1,
	0,0,0,3992,3987,1,0,0,0,3992,3988,1,0,0,0,3992,3989,1,0,0,0,3992,3990,1,
	0,0,0,3992,3991,1,0,0,0,3993,911,1,0,0,0,3994,3997,3,1288,644,0,3995,3996,
	5,54,0,0,3996,3998,3,1288,644,0,3997,3995,1,0,0,0,3998,3999,1,0,0,0,3999,
	3997,1,0,0,0,3999,4000,1,0,0,0,4000,913,1,0,0,0,4001,4006,3,916,458,0,4002,
	4006,3,918,459,0,4003,4006,3,920,460,0,4004,4006,3,922,461,0,4005,4001,
	1,0,0,0,4005,4002,1,0,0,0,4005,4003,1,0,0,0,4005,4004,1,0,0,0,4006,915,
	1,0,0,0,4007,4009,5,339,0,0,4008,4007,1,0,0,0,4008,4009,1,0,0,0,4009,4010,
	1,0,0,0,4010,4011,5,323,0,0,4011,4014,3,86,43,0,4012,4014,3,952,476,0,4013,
	4008,1,0,0,0,4013,4012,1,0,0,0,4014,917,1,0,0,0,4015,4017,5,312,0,0,4016,
	4015,1,0,0,0,4016,4017,1,0,0,0,4017,4018,1,0,0,0,4018,4019,5,347,0,0,4019,
	4022,3,92,46,0,4020,4022,3,952,476,0,4021,4016,1,0,0,0,4021,4020,1,0,0,
	0,4022,919,1,0,0,0,4023,4024,3,952,476,0,4024,921,1,0,0,0,4025,4026,3,952,
	476,0,4026,923,1,0,0,0,4027,4028,3,952,476,0,4028,925,1,0,0,0,4029,4030,
	3,908,454,0,4030,927,1,0,0,0,4031,4041,3,930,465,0,4032,4033,3,930,465,
	0,4033,4034,5,200,0,0,4034,4035,3,928,464,0,4035,4041,1,0,0,0,4036,4037,
	3,930,465,0,4037,4038,5,270,0,0,4038,4039,3,928,464,0,4039,4041,1,0,0,0,
	4040,4031,1,0,0,0,4040,4032,1,0,0,0,4040,4036,1,0,0,0,4041,929,1,0,0,0,
	4042,4043,6,465,-1,0,4043,4044,3,932,466,0,4044,4050,1,0,0,0,4045,4046,
	10,1,0,0,4046,4047,5,64,0,0,4047,4049,3,932,466,0,4048,4045,1,0,0,0,4049,
	4052,1,0,0,0,4050,4048,1,0,0,0,4050,4051,1,0,0,0,4051,931,1,0,0,0,4052,
	4050,1,0,0,0,4053,4055,5,191,0,0,4054,4053,1,0,0,0,4054,4055,1,0,0,0,4055,
	4056,1,0,0,0,4056,4057,3,934,467,0,4057,933,1,0,0,0,4058,4064,3,938,469,
	0,4059,4061,5,167,0,0,4060,4062,5,191,0,0,4061,4060,1,0,0,0,4061,4062,1,
	0,0,0,4062,4063,1,0,0,0,4063,4065,3,936,468,0,4064,4059,1,0,0,0,4064,4065,
	1,0,0,0,4065,935,1,0,0,0,4066,4067,7,24,0,0,4067,937,1,0,0,0,4068,4071,
	3,836,418,0,4069,4071,3,940,470,0,4070,4068,1,0,0,0,4070,4069,1,0,0,0,4071,
	939,1,0,0,0,4072,4075,3,942,471,0,4073,4075,3,956,478,0,4074,4072,1,0,0,
	0,4074,4073,1,0,0,0,4075,941,1,0,0,0,4076,4077,5,44,0,0,4077,4078,3,928,
	464,0,4078,4079,5,45,0,0,4079,943,1,0,0,0,4080,4090,3,946,473,0,4081,4082,
	3,946,473,0,4082,4083,5,26,0,0,4083,4084,3,944,472,0,4084,4090,1,0,0,0,
	4085,4086,3,946,473,0,4086,4087,5,27,0,0,4087,4088,3,944,472,0,4088,4090,
	1,0,0,0,4089,4080,1,0,0,0,4089,4081,1,0,0,0,4089,4085,1,0,0,0,4090,945,
	1,0,0,0,4091,4101,3,948,474,0,4092,4093,3,948,474,0,4093,4094,5,30,0,0,
	4094,4095,3,946,473,0,4095,4101,1,0,0,0,4096,4097,3,948,474,0,4097,4098,
	5,48,0,0,4098,4099,3,946,473,0,4099,4101,1,0,0,0,4100,4091,1,0,0,0,4100,
	4092,1,0,0,0,4100,4096,1,0,0,0,4101,947,1,0,0,0,4102,4104,5,368,0,0,4103,
	4102,1,0,0,0,4103,4104,1,0,0,0,4104,4105,1,0,0,0,4105,4106,3,950,475,0,
	4106,949,1,0,0,0,4107,4110,3,952,476,0,4108,4110,3,962,481,0,4109,4107,
	1,0,0,0,4109,4108,1,0,0,0,4110,951,1,0,0,0,4111,4114,3,954,477,0,4112,4114,
	3,956,478,0,4113,4111,1,0,0,0,4113,4112,1,0,0,0,4114,953,1,0,0,0,4115,4116,
	5,44,0,0,4116,4117,3,908,454,0,4117,4118,5,45,0,0,4118,955,1,0,0,0,4119,
	4122,3,958,479,0,4120,4122,3,298,149,0,4121,4119,1,0,0,0,4121,4120,1,0,
	0,0,4122,957,1,0,0,0,4123,4132,3,900,450,0,4124,4132,3,552,276,0,4125,4132,
	3,960,480,0,4126,4132,3,1168,584,0,4127,4132,3,1170,585,0,4128,4132,3,1204,
	602,0,4129,4132,3,1196,598,0,4130,4132,3,1202,601,0,4131,4123,1,0,0,0,4131,
	4124,1,0,0,0,4131,4125,1,0,0,0,4131,4126,1,0,0,0,4131,4127,1,0,0,0,4131,
	4128,1,0,0,0,4131,4129,1,0,0,0,4131,4130,1,0,0,0,4132,959,1,0,0,0,4133,
	4137,3,1132,566,0,4134,4137,3,1140,570,0,4135,4137,3,1154,577,0,4136,4133,
	1,0,0,0,4136,4134,1,0,0,0,4136,4135,1,0,0,0,4137,961,1,0,0,0,4138,4149,
	3,964,482,0,4139,4149,3,972,486,0,4140,4149,3,974,487,0,4141,4149,3,980,
	490,0,4142,4149,3,984,492,0,4143,4149,3,996,498,0,4144,4149,3,998,499,0,
	4145,4149,3,1004,502,0,4146,4149,3,1006,503,0,4147,4149,3,1008,504,0,4148,
	4138,1,0,0,0,4148,4139,1,0,0,0,4148,4140,1,0,0,0,4148,4141,1,0,0,0,4148,
	4142,1,0,0,0,4148,4143,1,0,0,0,4148,4144,1,0,0,0,4148,4145,1,0,0,0,4148,
	4146,1,0,0,0,4148,4147,1,0,0,0,4149,963,1,0,0,0,4150,4154,3,966,483,0,4151,
	4154,3,968,484,0,4152,4154,3,970,485,0,4153,4150,1,0,0,0,4153,4151,1,0,
	0,0,4153,4152,1,0,0,0,4154,965,1,0,0,0,4155,4156,7,25,0,0,4156,4157,5,44,
	0,0,4157,4158,3,1012,506,0,4158,4159,5,45,0,0,4159,967,1,0,0,0,4160,4161,
	7,26,0,0,4161,4162,5,44,0,0,4162,4163,3,1020,510,0,4163,4164,5,45,0,0,4164,
	969,1,0,0,0,4165,4166,5,206,0,0,4166,4167,5,44,0,0,4167,4168,3,1148,574,
	0,4168,4169,5,45,0,0,4169,971,1,0,0,0,4170,4171,5,60,0,0,4171,4172,5,44,
	0,0,4172,4173,3,944,472,0,4173,4174,5,45,0,0,4174,973,1,0,0,0,4175,4176,
	5,186,0,0,4176,4177,5,44,0,0,4177,4178,3,976,488,0,4178,4179,5,34,0,0,4179,
	4180,3,978,489,0,4180,4181,5,45,0,0,4181,975,1,0,0,0,4182,4183,3,944,472,
	0,4183,977,1,0,0,0,4184,4185,3,944,472,0,4185,979,1,0,0,0,4186,4187,3,982,
	491,0,4187,4188,5,44,0,0,4188,4189,3,944,472,0,4189,4190,5,45,0,0,4190,
	981,1,0,0,0,4191,4192,7,27,0,0,4192,983,1,0,0,0,4193,4197,3,986,493,0,4194,
	4197,3,992,496,0,4195,4197,3,994,497,0,4196,4193,1,0,0,0,4196,4194,1,0,
	0,0,4196,4195,1,0,0,0,4197,985,1,0,0,0,4198,4199,5,186,0,0,4199,4200,5,
	44,0,0,4200,4201,3,988,494,0,4201,4202,5,34,0,0,4202,4203,3,990,495,0,4203,
	4204,5,45,0,0,4204,987,1,0,0,0,4205,4206,3,944,472,0,4206,989,1,0,0,0,4207,
	4208,3,944,472,0,4208,991,1,0,0,0,4209,4210,5,179,0,0,4210,4211,5,44,0,
	0,4211,4212,3,944,472,0,4212,4213,5,45,0,0,4213,993,1,0,0,0,4214,4215,5,
	173,0,0,4215,4216,5,44,0,0,4216,4217,3,944,472,0,4217,4218,5,45,0,0,4218,
	995,1,0,0,0,4219,4220,5,129,0,0,4220,4221,5,44,0,0,4221,4222,3,944,472,
	0,4222,4223,5,45,0,0,4223,997,1,0,0,0,4224,4225,5,210,0,0,4225,4226,5,44,
	0,0,4226,4227,3,1000,500,0,4227,4228,5,34,0,0,4228,4229,3,1002,501,0,4229,
	4230,5,45,0,0,4230,999,1,0,0,0,4231,4232,3,944,472,0,4232,1001,1,0,0,0,
	4233,4234,3,944,472,0,4234,1003,1,0,0,0,4235,4236,5,234,0,0,4236,4237,5,
	44,0,0,4237,4238,3,944,472,0,4238,4239,5,45,0,0,4239,1005,1,0,0,0,4240,
	4241,5,139,0,0,4241,4242,5,44,0,0,4242,4243,3,944,472,0,4243,4244,5,45,
	0,0,4244,1007,1,0,0,0,4245,4246,7,28,0,0,4246,4247,5,44,0,0,4247,4248,3,
	944,472,0,4248,4249,5,45,0,0,4249,1009,1,0,0,0,4250,4253,3,1012,506,0,4251,
	4253,3,1020,510,0,4252,4250,1,0,0,0,4252,4251,1,0,0,0,4253,1011,1,0,0,0,
	4254,4257,3,1014,507,0,4255,4257,3,1016,508,0,4256,4254,1,0,0,0,4256,4255,
	1,0,0,0,4257,1013,1,0,0,0,4258,4259,3,1016,508,0,4259,4260,5,59,0,0,4260,
	4261,3,1012,506,0,4261,1015,1,0,0,0,4262,4263,3,1018,509,0,4263,1017,1,
	0,0,0,4264,4267,3,952,476,0,4265,4267,3,1028,514,0,4266,4264,1,0,0,0,4266,
	4265,1,0,0,0,4267,1019,1,0,0,0,4268,4271,3,1026,513,0,4269,4271,3,1022,
	511,0,4270,4268,1,0,0,0,4270,4269,1,0,0,0,4271,1021,1,0,0,0,4272,4273,3,
	1024,512,0,4273,1023,1,0,0,0,4274,4277,3,952,476,0,4275,4277,3,1028,514,
	0,4276,4274,1,0,0,0,4276,4275,1,0,0,0,4277,1025,1,0,0,0,4278,4279,3,1022,
	511,0,4279,4280,5,59,0,0,4280,4281,3,1020,510,0,4281,1027,1,0,0,0,4282,
	4285,3,1030,515,0,4283,4285,3,1052,526,0,4284,4282,1,0,0,0,4284,4283,1,
	0,0,0,4285,1029,1,0,0,0,4286,4290,3,1032,516,0,4287,4290,3,1034,517,0,4288,
	4290,3,1048,524,0,4289,4286,1,0,0,0,4289,4287,1,0,0,0,4289,4288,1,0,0,0,
	4290,1031,1,0,0,0,4291,4292,7,29,0,0,4292,4293,5,44,0,0,4293,4294,3,1012,
	506,0,4294,4295,5,45,0,0,4295,1033,1,0,0,0,4296,4299,3,1036,518,0,4297,
	4299,3,1038,519,0,4298,4296,1,0,0,0,4298,4297,1,0,0,0,4299,1035,1,0,0,0,
	4300,4301,5,246,0,0,4301,4302,5,44,0,0,4302,4303,3,1040,520,0,4303,4304,
	5,45,0,0,4304,1037,1,0,0,0,4305,4306,7,30,0,0,4306,4307,5,44,0,0,4307,4308,
	3,1042,521,0,4308,4309,5,34,0,0,4309,4310,3,1046,523,0,4310,4311,1,0,0,
	0,4311,4312,5,45,0,0,4312,1039,1,0,0,0,4313,4315,3,1044,522,0,4314,4313,
	1,0,0,0,4314,4315,1,0,0,0,4315,4317,1,0,0,0,4316,4318,3,1046,523,0,4317,
	4316,1,0,0,0,4317,4318,1,0,0,0,4318,4319,1,0,0,0,4319,4321,5,141,0,0,4320,
	4314,1,0,0,0,4320,4321,1,0,0,0,4321,4322,1,0,0,0,4322,4323,3,1042,521,0,
	4323,1041,1,0,0,0,4324,4325,3,1012,506,0,4325,1043,1,0,0,0,4326,4327,7,
	31,0,0,4327,1045,1,0,0,0,4328,4329,3,1012,506,0,4329,1047,1,0,0,0,4330,
	4331,5,190,0,0,4331,4332,5,44,0,0,4332,4333,3,1012,506,0,4333,4334,5,34,
	0,0,4334,4335,3,1050,525,0,4335,4336,1,0,0,0,4336,4337,5,45,0,0,4337,1049,
	1,0,0,0,4338,4339,7,32,0,0,4339,1051,1,0,0,0,4340,4341,3,1054,527,0,4341,
	1053,1,0,0,0,4342,4343,5,246,0,0,4343,4344,5,44,0,0,4344,4345,3,1056,528,
	0,4345,4346,5,45,0,0,4346,1055,1,0,0,0,4347,4349,3,1044,522,0,4348,4347,
	1,0,0,0,4348,4349,1,0,0,0,4349,4351,1,0,0,0,4350,4352,3,1060,530,0,4351,
	4350,1,0,0,0,4351,4352,1,0,0,0,4352,4353,1,0,0,0,4353,4355,5,141,0,0,4354,
	4348,1,0,0,0,4354,4355,1,0,0,0,4355,4356,1,0,0,0,4356,4357,3,1058,529,0,
	4357,1057,1,0,0,0,4358,4359,3,1020,510,0,4359,1059,1,0,0,0,4360,4361,3,
	1020,510,0,4361,1061,1,0,0,0,4362,4363,3,944,472,0,4363,1063,1,0,0,0,4364,
	4365,6,532,-1,0,4365,4371,3,1066,533,0,4366,4367,3,1090,545,0,4367,4368,
	5,26,0,0,4368,4369,3,1066,533,0,4369,4371,1,0,0,0,4370,4364,1,0,0,0,4370,
	4366,1,0,0,0,4371,4380,1,0,0,0,4372,4373,10,2,0,0,4373,4374,5,26,0,0,4374,
	4379,3,1096,548,0,4375,4376,10,1,0,0,4376,4377,5,27,0,0,4377,4379,3,1096,
	548,0,4378,4372,1,0,0,0,4378,4375,1,0,0,0,4379,4382,1,0,0,0,4380,4378,1,
	0,0,0,4380,4381,1,0,0,0,4381,1065,1,0,0,0,4382,4380,1,0,0,0,4383,4384,3,
	1068,534,0,4384,1067,1,0,0,0,4385,4386,3,1070,535,0,4386,1069,1,0,0,0,4387,
	4390,3,952,476,0,4388,4390,3,1072,536,0,4389,4387,1,0,0,0,4389,4388,1,0,
	0,0,4390,1071,1,0,0,0,4391,4397,3,1074,537,0,4392,4397,3,1076,538,0,4393,
	4397,3,1080,540,0,4394,4397,3,1078,539,0,4395,4397,3,1082,541,0,4396,4391,
	1,0,0,0,4396,4392,1,0,0,0,4396,4393,1,0,0,0,4396,4394,1,0,0,0,4396,4395,
	1,0,0,0,4397,1073,1,0,0,0,4398,4406,5,102,0,0,4399,4400,5,109,0,0,4400,
	4402,5,44,0,0,4401,4403,3,1084,542,0,4402,4401,1,0,0,0,4402,4403,1,0,0,
	0,4403,4404,1,0,0,0,4404,4406,5,45,0,0,4405,4398,1,0,0,0,4405,4399,1,0,
	0,0,4406,1075,1,0,0,0,4407,4415,5,106,0,0,4408,4409,5,275,0,0,4409,4411,
	5,44,0,0,4410,4412,3,1086,543,0,4411,4410,1,0,0,0,4411,4412,1,0,0,0,4412,
	4413,1,0,0,0,4413,4415,5,45,0,0,4414,4407,1,0,0,0,4414,4408,1,0,0,0,4415,
	1077,1,0,0,0,4416,4417,5,176,0,0,4417,4419,5,44,0,0,4418,4420,3,1086,543,
	0,4419,4418,1,0,0,0,4419,4420,1,0,0,0,4420,4422,1,0,0,0,4421,4423,5,45,
	0,0,4422,4421,1,0,0,0,4422,4423,1,0,0,0,4423,1079,1,0,0,0,4424,4432,5,107,
	0,0,4425,4426,5,274,0,0,4426,4428,5,44,0,0,4427,4429,3,1088,544,0,4428,
	4427,1,0,0,0,4428,4429,1,0,0,0,4429,4430,1,0,0,0,4430,4432,5,45,0,0,4431,
	4424,1,0,0,0,4431,4425,1,0,0,0,4432,1081,1,0,0,0,4433,4441,5,177,0,0,4434,
	4435,5,175,0,0,4435,4437,5,44,0,0,4436,4438,3,1088,544,0,4437,4436,1,0,
	0,0,4437,4438,1,0,0,0,4438,4439,1,0,0,0,4439,4441,5,45,0,0,4440,4433,1,
	0,0,0,4440,4434,1,0,0,0,4441,1083,1,0,0,0,4442,4445,3,1242,621,0,4443,4445,
	3,1140,570,0,4444,4442,1,0,0,0,4444,4443,1,0,0,0,4445,1085,1,0,0,0,4446,
	4449,3,1244,622,0,4447,4449,3,1140,570,0,4448,4446,1,0,0,0,4448,4447,1,
	0,0,0,4449,1087,1,0,0,0,4450,4453,3,1246,623,0,4451,4453,3,1140,570,0,4452,
	4450,1,0,0,0,4452,4451,1,0,0,0,4453,1089,1,0,0,0,4454,4455,6,545,-1,0,4455,
	4458,3,1096,548,0,4456,4458,3,1092,546,0,4457,4454,1,0,0,0,4457,4456,1,
	0,0,0,4458,4467,1,0,0,0,4459,4460,10,3,0,0,4460,4461,5,26,0,0,4461,4466,
	3,1096,548,0,4462,4463,10,2,0,0,4463,4464,5,27,0,0,4464,4466,3,1096,548,
	0,4465,4459,1,0,0,0,4465,4462,1,0,0,0,4466,4469,1,0,0,0,4467,4465,1,0,0,
	0,4467,4468,1,0,0,0,4468,1091,1,0,0,0,4469,4467,1,0,0,0,4470,4471,5,123,
	0,0,4471,4472,5,44,0,0,4472,4473,3,1094,547,0,4473,4474,5,45,0,0,4474,1093,
	1,0,0,0,4475,4476,3,1064,532,0,4476,4477,5,34,0,0,4477,4478,3,1064,532,
	0,4478,1095,1,0,0,0,4479,4480,6,548,-1,0,4480,4486,3,1098,549,0,4481,4482,
	3,946,473,0,4482,4483,5,30,0,0,4483,4484,3,1098,549,0,4484,4486,1,0,0,0,
	4485,4479,1,0,0,0,4485,4481,1,0,0,0,4486,4495,1,0,0,0,4487,4488,10,3,0,
	0,4488,4489,5,30,0,0,4489,4494,3,948,474,0,4490,4491,10,2,0,0,4491,4492,
	5,48,0,0,4492,4494,3,948,474,0,4493,4487,1,0,0,0,4493,4490,1,0,0,0,4494,
	4497,1,0,0,0,4495,4493,1,0,0,0,4495,4496,1,0,0,0,4496,1097,1,0,0,0,4497,
	4495,1,0,0,0,4498,4500,5,368,0,0,4499,4498,1,0,0,0,4499,4500,1,0,0,0,4500,
	4501,1,0,0,0,4501,4502,3,1100,550,0,4502,1099,1,0,0,0,4503,4506,3,952,476,
	0,4504,4506,3,1112,556,0,4505,4503,1,0,0,0,4505,4504,1,0,0,0,4506,1101,
	1,0,0,0,4507,4508,3,1090,545,0,4508,1103,1,0,0,0,4509,4510,3,1096,548,0,
	4510,1105,1,0,0,0,4511,4512,3,1096,548,0,4512,1107,1,0,0,0,4513,4514,3,
	1064,532,0,4514,1109,1,0,0,0,4515,4516,3,1064,532,0,4516,1111,1,0,0,0,4517,
	4520,3,1114,557,0,4518,4520,3,1118,559,0,4519,4517,1,0,0,0,4519,4518,1,
	0,0,0,4520,1113,1,0,0,0,4521,4522,5,122,0,0,4522,4523,5,44,0,0,4523,4524,
	3,1116,558,0,4524,4525,5,45,0,0,4525,1115,1,0,0,0,4526,4529,3,1252,626,
	0,4527,4529,3,1140,570,0,4528,4526,1,0,0,0,4528,4527,1,0,0,0,4529,1117,
	1,0,0,0,4530,4531,5,60,0,0,4531,4532,5,44,0,0,4532,4533,3,1090,545,0,4533,
	4534,5,45,0,0,4534,1119,1,0,0,0,4535,4538,3,1122,561,0,4536,4538,3,1124,
	562,0,4537,4535,1,0,0,0,4537,4536,1,0,0,0,4538,1121,1,0,0,0,4539,4540,3,
	1124,562,0,4540,4541,5,59,0,0,4541,4542,3,1120,560,0,4542,1123,1,0,0,0,
	4543,4546,3,1126,563,0,4544,4546,3,952,476,0,4545,4543,1,0,0,0,4545,4544,
	1,0,0,0,4546,1125,1,0,0,0,4547,4548,3,1128,564,0,4548,4549,3,1130,565,0,
	4549,1127,1,0,0,0,4550,4551,5,246,0,0,4551,4552,5,44,0,0,4552,4553,3,1120,
	560,0,4553,4554,5,34,0,0,4554,4555,3,944,472,0,4555,4556,5,45,0,0,4556,
	1129,1,0,0,0,4557,4558,5,321,0,0,4558,4559,5,44,0,0,4559,4560,3,1148,574,
	0,4560,4561,5,45,0,0,4561,1131,1,0,0,0,4562,4563,3,1134,567,0,4563,1133,
	1,0,0,0,4564,4565,5,42,0,0,4565,4566,3,766,383,0,4566,4567,5,43,0,0,4567,
	4568,5,42,0,0,4568,4569,3,1136,568,0,4569,4570,5,43,0,0,4570,1135,1,0,0,
	0,4571,4576,3,1138,569,0,4572,4573,5,34,0,0,4573,4575,3,1138,569,0,4574,
	4572,1,0,0,0,4575,4578,1,0,0,0,4576,4574,1,0,0,0,4576,4577,1,0,0,0,4577,
	1137,1,0,0,0,4578,4576,1,0,0,0,4579,4580,3,908,454,0,4580,1139,1,0,0,0,
	4581,4583,5,215,0,0,4582,4581,1,0,0,0,4582,4583,1,0,0,0,4583,4584,1,0,0,
	0,4584,4585,3,1142,571,0,4585,1141,1,0,0,0,4586,4588,5,40,0,0,4587,4589,
	3,1144,572,0,4588,4587,1,0,0,0,4588,4589,1,0,0,0,4589,4590,1,0,0,0,4590,
	4591,5,41,0,0,4591,1143,1,0,0,0,4592,4597,3,1146,573,0,4593,4594,5,34,0,
	0,4594,4596,3,1146,573,0,4595,4593,1,0,0,0,4596,4599,1,0,0,0,4597,4595,
	1,0,0,0,4597,4598,1,0,0,0,4598,1145,1,0,0,0,4599,4597,1,0,0,0,4600,4601,
	3,1290,645,0,4601,4602,5,32,0,0,4602,4603,3,908,454,0,4603,1147,1,0,0,0,
	4604,4607,3,1150,575,0,4605,4607,3,1152,576,0,4606,4604,1,0,0,0,4606,4605,
	1,0,0,0,4607,1149,1,0,0,0,4608,4609,3,1152,576,0,4609,4610,5,59,0,0,4610,
	4611,3,1148,574,0,4611,1151,1,0,0,0,4612,4613,3,952,476,0,4613,1153,1,0,
	0,0,4614,4615,3,1156,578,0,4615,1155,1,0,0,0,4616,4617,5,205,0,0,4617,4618,
	5,44,0,0,4618,4619,3,1158,579,0,4619,4620,5,45,0,0,4620,1157,1,0,0,0,4621,
	4623,3,1160,580,0,4622,4624,3,1162,581,0,4623,4622,1,0,0,0,4623,4624,1,
	0,0,0,4624,1159,1,0,0,0,4625,4626,3,920,460,0,4626,1161,1,0,0,0,4627,4628,
	5,34,0,0,4628,4629,3,922,461,0,4629,4630,5,34,0,0,4630,4631,3,920,460,0,
	4631,1163,1,0,0,0,4632,4633,3,1166,583,0,4633,4634,5,54,0,0,4634,4635,3,
	1288,644,0,4635,1165,1,0,0,0,4636,4640,3,920,460,0,4637,4640,3,922,461,
	0,4638,4640,3,924,462,0,4639,4636,1,0,0,0,4639,4637,1,0,0,0,4639,4638,1,
	0,0,0,4640,1167,1,0,0,0,4641,4642,5,263,0,0,4642,4643,3,54,27,0,4643,1169,
	1,0,0,0,4644,4647,3,1172,586,0,4645,4647,3,1174,587,0,4646,4644,1,0,0,0,
	4646,4645,1,0,0,0,4647,1171,1,0,0,0,4648,4649,5,194,0,0,4649,4650,5,44,
	0,0,4650,4651,3,908,454,0,4651,4652,5,34,0,0,4652,4653,3,908,454,0,4653,
	4654,5,45,0,0,4654,4668,1,0,0,0,4655,4656,5,93,0,0,4656,4657,5,44,0,0,4657,
	4662,3,908,454,0,4658,4659,5,34,0,0,4659,4661,3,908,454,0,4660,4658,1,0,
	0,0,4661,4664,1,0,0,0,4662,4660,1,0,0,0,4662,4663,1,0,0,0,4663,4665,1,0,
	0,0,4664,4662,1,0,0,0,4665,4666,5,45,0,0,4666,4668,1,0,0,0,4667,4648,1,
	0,0,0,4667,4655,1,0,0,0,4668,1173,1,0,0,0,4669,4672,3,1176,588,0,4670,4672,
	3,1178,589,0,4671,4669,1,0,0,0,4671,4670,1,0,0,0,4672,1175,1,0,0,0,4673,
	4674,5,85,0,0,4674,4675,3,1186,593,0,4675,4677,3,1180,590,0,4676,4678,3,
	1184,592,0,4677,4676,1,0,0,0,4677,4678,1,0,0,0,4678,4679,1,0,0,0,4679,4680,
	5,126,0,0,4680,1177,1,0,0,0,4681,4682,5,85,0,0,4682,4684,3,1182,591,0,4683,
	4685,3,1184,592,0,4684,4683,1,0,0,0,4684,4685,1,0,0,0,4685,4686,1,0,0,0,
	4686,4687,5,126,0,0,4687,1179,1,0,0,0,4688,4689,5,267,0,0,4689,4690,3,1188,
	594,0,4690,4691,5,242,0,0,4691,4692,3,1192,596,0,4692,1181,1,0,0,0,4693,
	4694,5,267,0,0,4694,4695,3,834,417,0,4695,4696,5,242,0,0,4696,4697,3,1192,
	596,0,4697,1183,1,0,0,0,4698,4699,5,125,0,0,4699,4700,3,1192,596,0,4700,
	1185,1,0,0,0,4701,4704,3,956,478,0,4702,4704,3,300,150,0,4703,4701,1,0,
	0,0,4703,4702,1,0,0,0,4704,1187,1,0,0,0,4705,4710,3,1190,595,0,4706,4707,
	5,34,0,0,4707,4709,3,1190,595,0,4708,4706,1,0,0,0,4709,4712,1,0,0,0,4710,
	4708,1,0,0,0,4710,4711,1,0,0,0,4711,1189,1,0,0,0,4712,4710,1,0,0,0,4713,
	4722,3,956,478,0,4714,4722,3,840,420,0,4715,4722,3,862,431,0,4716,4722,
	3,866,433,0,4717,4722,3,874,437,0,4718,4722,3,878,439,0,4719,4722,3,886,
	443,0,4720,4722,3,888,444,0,4721,4713,1,0,0,0,4721,4714,1,0,0,0,4721,4715,
	1,0,0,0,4721,4716,1,0,0,0,4721,4717,1,0,0,0,4721,4718,1,0,0,0,4721,4719,
	1,0,0,0,4721,4720,1,0,0,0,4722,1191,1,0,0,0,4723,4726,3,1194,597,0,4724,
	4726,5,192,0,0,4725,4723,1,0,0,0,4725,4724,1,0,0,0,4726,1193,1,0,0,0,4727,
	4728,3,908,454,0,4728,1195,1,0,0,0,4729,4730,5,86,0,0,4730,4731,5,44,0,
	0,4731,4732,3,1198,599,0,4732,4733,5,67,0,0,4733,4734,3,1200,600,0,4734,
	4735,5,45,0,0,4735,1197,1,0,0,0,4736,4737,3,908,454,0,4737,1199,1,0,0,0,
	4738,4739,3,684,342,0,4739,1201,1,0,0,0,4740,4741,5,124,0,0,4741,4742,5,
	44,0,0,4742,4743,3,300,150,0,4743,4744,5,45,0,0,4744,1203,1,0,0,0,4745,
	4746,5,169,0,0,4746,4747,3,234,117,0,4747,4748,5,149,0,0,4748,4749,3,908,
	454,0,4749,4750,5,126,0,0,4750,1205,1,0,0,0,4751,4754,5,367,0,0,4752,4754,
	3,1208,604,0,4753,4751,1,0,0,0,4753,4752,1,0,0,0,4754,1207,1,0,0,0,4755,
	4759,3,1210,605,0,4756,4759,3,1260,630,0,4757,4759,3,1262,631,0,4758,4755,
	1,0,0,0,4758,4756,1,0,0,0,4758,4757,1,0,0,0,4759,1209,1,0,0,0,4760,4767,
	3,1214,607,0,4761,4767,3,1216,608,0,4762,4767,5,384,0,0,4763,4767,3,1234,
	617,0,4764,4767,3,1250,625,0,4765,4767,3,1258,629,0,4766,4760,1,0,0,0,4766,
	4761,1,0,0,0,4766,4762,1,0,0,0,4766,4763,1,0,0,0,4766,4764,1,0,0,0,4766,
	4765,1,0,0,0,4767,1211,1,0,0,0,4768,4771,5,366,0,0,4769,4771,3,1208,604,
	0,4770,4768,1,0,0,0,4770,4769,1,0,0,0,4771,1213,1,0,0,0,4772,4773,7,24,
	0,0,4773,1215,1,0,0,0,4774,4778,3,1220,610,0,4775,4778,3,1222,611,0,4776,
	4778,3,1224,612,0,4777,4774,1,0,0,0,4777,4775,1,0,0,0,4777,4776,1,0,0,0,
	4778,1217,1,0,0,0,4779,4781,3,1226,613,0,4780,4779,1,0,0,0,4780,4781,1,
	0,0,0,4781,4782,1,0,0,0,4782,4788,3,1228,614,0,4783,4785,3,1226,613,0,4784,
	4783,1,0,0,0,4784,4785,1,0,0,0,4785,4786,1,0,0,0,4786,4788,3,1230,615,0,
	4787,4780,1,0,0,0,4787,4784,1,0,0,0,4788,1219,1,0,0,0,4789,4791,3,1226,
	613,0,4790,4789,1,0,0,0,4790,4791,1,0,0,0,4791,4792,1,0,0,0,4792,4797,3,
	1228,614,0,4793,4794,5,52,0,0,4794,4796,3,1228,614,0,4795,4793,1,0,0,0,
	4796,4799,1,0,0,0,4797,4795,1,0,0,0,4797,4798,1,0,0,0,4798,1221,1,0,0,0,
	4799,4797,1,0,0,0,4800,4802,3,1226,613,0,4801,4800,1,0,0,0,4801,4802,1,
	0,0,0,4802,4803,1,0,0,0,4803,4808,3,1230,615,0,4804,4805,5,52,0,0,4805,
	4807,3,1230,615,0,4806,4804,1,0,0,0,4807,4810,1,0,0,0,4808,4806,1,0,0,0,
	4808,4809,1,0,0,0,4809,1223,1,0,0,0,4810,4808,1,0,0,0,4811,4813,3,1226,
	613,0,4812,4811,1,0,0,0,4812,4813,1,0,0,0,4813,4814,1,0,0,0,4814,4819,3,
	1232,616,0,4815,4816,5,52,0,0,4816,4818,3,1232,616,0,4817,4815,1,0,0,0,
	4818,4821,1,0,0,0,4819,4817,1,0,0,0,4819,4820,1,0,0,0,4820,1225,1,0,0,0,
	4821,4819,1,0,0,0,4822,4823,5,56,0,0,4823,1227,1,0,0,0,4824,4825,5,385,
	0,0,4825,1229,1,0,0,0,4826,4827,5,386,0,0,4827,1231,1,0,0,0,4828,4829,5,
	387,0,0,4829,1233,1,0,0,0,4830,4835,3,1236,618,0,4831,4835,3,1238,619,0,
	4832,4835,3,1240,620,0,4833,4835,3,1248,624,0,4834,4830,1,0,0,0,4834,4831,
	1,0,0,0,4834,4832,1,0,0,0,4834,4833,1,0,0,0,4835,1235,1,0,0,0,4836,4837,
	5,109,0,0,4837,4838,3,1218,609,0,4838,1237,1,0,0,0,4839,4840,5,243,0,0,
	4840,4841,3,1218,609,0,4841,1239,1,0,0,0,4842,4843,5,110,0,0,4843,4847,
	3,1218,609,0,4844,4845,5,244,0,0,4845,4847,3,1218,609,0,4846,4842,1,0,0,
	0,4846,4844,1,0,0,0,4847,1241,1,0,0,0,4848,4849,3,1218,609,0,4849,1243,
	1,0,0,0,4850,4851,3,1218,609,0,4851,1245,1,0,0,0,4852,4853,3,1218,609,0,
	4853,1247,1,0,0,0,4854,4855,5,109,0,0,4855,4856,5,22,0,0,4856,4857,5,377,
	0,0,4857,4858,5,27,0,0,4858,4859,5,378,0,0,4859,4860,5,27,0,0,4860,4861,
	5,378,0,0,4861,4897,5,22,0,0,4862,4863,5,243,0,0,4863,4864,5,22,0,0,4864,
	4865,5,378,0,0,4865,4866,5,32,0,0,4866,4867,5,378,0,0,4867,4868,5,32,0,
	0,4868,4869,5,378,0,0,4869,4897,5,22,0,0,4870,4871,5,244,0,0,4871,4872,
	5,22,0,0,4872,4873,5,377,0,0,4873,4874,5,27,0,0,4874,4875,5,378,0,0,4875,
	4876,5,27,0,0,4876,4877,5,378,0,0,4877,4878,5,378,0,0,4878,4879,5,32,0,
	0,4879,4880,5,378,0,0,4880,4881,5,32,0,0,4881,4882,5,378,0,0,4882,4897,
	5,22,0,0,4883,4884,5,110,0,0,4884,4885,5,22,0,0,4885,4886,5,377,0,0,4886,
	4887,5,27,0,0,4887,4888,5,378,0,0,4888,4889,5,27,0,0,4889,4890,5,378,0,
	0,4890,4891,5,378,0,0,4891,4892,5,32,0,0,4892,4893,5,378,0,0,4893,4894,
	5,32,0,0,4894,4895,5,378,0,0,4895,4897,5,22,0,0,4896,4854,1,0,0,0,4896,
	4862,1,0,0,0,4896,4870,1,0,0,0,4896,4883,1,0,0,0,4897,1249,1,0,0,0,4898,
	4899,5,122,0,0,4899,4902,3,1252,626,0,4900,4902,3,1254,627,0,4901,4898,
	1,0,0,0,4901,4900,1,0,0,0,4902,1251,1,0,0,0,4903,4904,3,1218,609,0,4904,
	1253,1,0,0,0,4905,4906,5,379,0,0,4906,4907,3,1256,628,0,4907,1255,1,0,0,
	0,4908,4909,7,33,0,0,4909,1257,1,0,0,0,4910,4911,5,192,0,0,4911,1259,1,
	0,0,0,4912,4913,3,1134,567,0,4913,1261,1,0,0,0,4914,4915,3,1140,570,0,4915,
	1263,1,0,0,0,4916,4917,3,1318,659,0,4917,1265,1,0,0,0,4918,4919,5,396,0,
	0,4919,1267,1,0,0,0,4920,4921,3,1318,659,0,4921,1269,1,0,0,0,4922,4923,
	3,1318,659,0,4923,1271,1,0,0,0,4924,4927,5,396,0,0,4925,4927,3,1274,637,
	0,4926,4924,1,0,0,0,4926,4925,1,0,0,0,4927,1273,1,0,0,0,4928,4929,3,1324,
	662,0,4929,1275,1,0,0,0,4930,4931,3,1318,659,0,4931,1277,1,0,0,0,4932,4933,
	3,1318,659,0,4933,1279,1,0,0,0,4934,4937,5,396,0,0,4935,4937,3,1282,641,
	0,4936,4934,1,0,0,0,4936,4935,1,0,0,0,4937,1281,1,0,0,0,4938,4939,3,1324,
	662,0,4939,1283,1,0,0,0,4940,4941,3,1318,659,0,4941,1285,1,0,0,0,4942,4943,
	3,1318,659,0,4943,1287,1,0,0,0,4944,4945,3,1318,659,0,4945,1289,1,0,0,0,
	4946,4947,3,1318,659,0,4947,1291,1,0,0,0,4948,4949,5,35,0,0,4949,4950,3,
	1320,660,0,4950,1293,1,0,0,0,4951,4957,3,1296,648,0,4952,4957,3,1298,649,
	0,4953,4957,3,1308,654,0,4954,4957,3,1310,655,0,4955,4957,3,1312,656,0,
	4956,4951,1,0,0,0,4956,4952,1,0,0,0,4956,4953,1,0,0,0,4956,4954,1,0,0,0,
	4956,4955,1,0,0,0,4957,1295,1,0,0,0,4958,4959,3,1312,656,0,4959,1297,1,
	0,0,0,4960,4963,3,1302,651,0,4961,4963,3,1300,650,0,4962,4960,1,0,0,0,4962,
	4961,1,0,0,0,4963,1299,1,0,0,0,4964,4967,3,1304,652,0,4965,4967,3,1306,
	653,0,4966,4964,1,0,0,0,4966,4965,1,0,0,0,4967,1301,1,0,0,0,4968,4969,3,
	1312,656,0,4969,1303,1,0,0,0,4970,4971,3,1312,656,0,4971,1305,1,0,0,0,4972,
	4973,5,396,0,0,4973,1307,1,0,0,0,4974,4975,3,1312,656,0,4975,1309,1,0,0,
	0,4976,4977,3,1312,656,0,4977,1311,1,0,0,0,4978,4979,5,396,0,0,4979,1313,
	1,0,0,0,4980,4983,3,1316,658,0,4981,4983,3,1334,667,0,4982,4980,1,0,0,0,
	4982,4981,1,0,0,0,4983,1315,1,0,0,0,4984,4991,5,396,0,0,4985,4991,3,1292,
	646,0,4986,4991,3,1326,663,0,4987,4991,5,366,0,0,4988,4991,5,384,0,0,4989,
	4991,5,58,0,0,4990,4984,1,0,0,0,4990,4985,1,0,0,0,4990,4986,1,0,0,0,4990,
	4987,1,0,0,0,4990,4988,1,0,0,0,4990,4989,1,0,0,0,4991,1317,1,0,0,0,4992,
	4995,5,396,0,0,4993,4995,3,1324,662,0,4994,4992,1,0,0,0,4994,4993,1,0,0,
	0,4995,1319,1,0,0,0,4996,4999,5,396,0,0,4997,4999,3,1324,662,0,4998,4996,
	1,0,0,0,4998,4997,1,0,0,0,4999,1321,1,0,0,0,5000,5001,7,34,0,0,5001,1323,
	1,0,0,0,5002,5005,3,1222,611,0,5003,5005,3,1224,612,0,5004,5002,1,0,0,0,
	5004,5003,1,0,0,0,5005,1325,1,0,0,0,5006,5009,3,1328,664,0,5007,5009,3,
	1332,666,0,5008,5006,1,0,0,0,5008,5007,1,0,0,0,5009,1327,1,0,0,0,5010,5228,
	3,1330,665,0,5011,5228,5,60,0,0,5012,5228,5,61,0,0,5013,5228,5,62,0,0,5014,
	5228,5,63,0,0,5015,5228,5,64,0,0,5016,5228,5,65,0,0,5017,5228,5,66,0,0,
	5018,5228,5,67,0,0,5019,5228,5,68,0,0,5020,5228,5,69,0,0,5021,5228,5,70,
	0,0,5022,5228,5,71,0,0,5023,5228,5,72,0,0,5024,5228,5,73,0,0,5025,5228,
	5,74,0,0,5026,5228,5,75,0,0,5027,5228,5,76,0,0,5028,5228,5,77,0,0,5029,
	5228,5,78,0,0,5030,5228,5,79,0,0,5031,5228,5,80,0,0,5032,5228,5,81,0,0,
	5033,5228,5,82,0,0,5034,5228,5,83,0,0,5035,5228,5,84,0,0,5036,5228,5,85,
	0,0,5037,5228,5,86,0,0,5038,5228,5,87,0,0,5039,5228,5,88,0,0,5040,5228,
	5,89,0,0,5041,5228,5,90,0,0,5042,5228,5,91,0,0,5043,5228,5,92,0,0,5044,
	5228,5,93,0,0,5045,5228,5,94,0,0,5046,5228,5,95,0,0,5047,5228,5,96,0,0,
	5048,5228,5,97,0,0,5049,5228,5,98,0,0,5050,5228,5,99,0,0,5051,5228,5,100,
	0,0,5052,5228,5,101,0,0,5053,5228,5,102,0,0,5054,5228,5,103,0,0,5055,5228,
	5,104,0,0,5056,5228,5,105,0,0,5057,5228,5,106,0,0,5058,5228,5,107,0,0,5059,
	5228,5,108,0,0,5060,5228,5,109,0,0,5061,5228,5,110,0,0,5062,5228,5,111,
	0,0,5063,5228,5,112,0,0,5064,5228,5,113,0,0,5065,5228,5,114,0,0,5066,5228,
	5,115,0,0,5067,5228,5,116,0,0,5068,5228,5,117,0,0,5069,5228,5,118,0,0,5070,
	5228,5,119,0,0,5071,5228,5,120,0,0,5072,5228,5,121,0,0,5073,5228,5,122,
	0,0,5074,5228,5,123,0,0,5075,5228,5,124,0,0,5076,5228,5,125,0,0,5077,5228,
	5,126,0,0,5078,5228,5,127,0,0,5079,5228,5,128,0,0,5080,5228,5,129,0,0,5081,
	5228,5,130,0,0,5082,5228,5,131,0,0,5083,5228,5,132,0,0,5084,5228,5,133,
	0,0,5085,5228,5,134,0,0,5086,5228,5,135,0,0,5087,5228,5,136,0,0,5088,5228,
	5,137,0,0,5089,5228,5,138,0,0,5090,5228,5,139,0,0,5091,5228,5,140,0,0,5092,
	5228,5,141,0,0,5093,5228,5,142,0,0,5094,5228,5,143,0,0,5095,5228,5,144,
	0,0,5096,5228,5,145,0,0,5097,5228,5,146,0,0,5098,5228,5,147,0,0,5099,5228,
	5,148,0,0,5100,5228,5,149,0,0,5101,5228,5,150,0,0,5102,5228,5,151,0,0,5103,
	5228,5,152,0,0,5104,5228,5,153,0,0,5105,5228,5,154,0,0,5106,5228,5,155,
	0,0,5107,5228,5,156,0,0,5108,5228,5,157,0,0,5109,5228,5,158,0,0,5110,5228,
	5,159,0,0,5111,5228,5,160,0,0,5112,5228,5,161,0,0,5113,5228,5,162,0,0,5114,
	5228,5,163,0,0,5115,5228,5,164,0,0,5116,5228,5,165,0,0,5117,5228,5,166,
	0,0,5118,5228,5,167,0,0,5119,5228,5,168,0,0,5120,5228,5,169,0,0,5121,5228,
	5,170,0,0,5122,5228,5,171,0,0,5123,5228,5,172,0,0,5124,5228,5,173,0,0,5125,
	5228,5,174,0,0,5126,5228,5,175,0,0,5127,5228,5,176,0,0,5128,5228,5,177,
	0,0,5129,5228,5,178,0,0,5130,5228,5,179,0,0,5131,5228,5,180,0,0,5132,5228,
	5,181,0,0,5133,5228,5,182,0,0,5134,5228,5,183,0,0,5135,5228,5,184,0,0,5136,
	5228,5,185,0,0,5137,5228,5,186,0,0,5138,5228,5,187,0,0,5139,5228,5,188,
	0,0,5140,5228,5,189,0,0,5141,5228,5,190,0,0,5142,5228,5,191,0,0,5143,5228,
	5,192,0,0,5144,5228,5,193,0,0,5145,5228,5,194,0,0,5146,5228,5,195,0,0,5147,
	5228,5,196,0,0,5148,5228,5,197,0,0,5149,5228,5,198,0,0,5150,5228,5,199,
	0,0,5151,5228,5,200,0,0,5152,5228,5,201,0,0,5153,5228,5,202,0,0,5154,5228,
	5,203,0,0,5155,5228,5,204,0,0,5156,5228,5,205,0,0,5157,5228,5,206,0,0,5158,
	5228,5,207,0,0,5159,5228,5,208,0,0,5160,5228,5,209,0,0,5161,5228,5,210,
	0,0,5162,5228,5,211,0,0,5163,5228,5,212,0,0,5164,5228,5,213,0,0,5165,5228,
	5,214,0,0,5166,5228,5,215,0,0,5167,5228,5,216,0,0,5168,5228,5,217,0,0,5169,
	5228,5,218,0,0,5170,5228,5,219,0,0,5171,5228,5,220,0,0,5172,5228,5,221,
	0,0,5173,5228,5,222,0,0,5174,5228,5,223,0,0,5175,5228,5,224,0,0,5176,5228,
	5,225,0,0,5177,5228,5,226,0,0,5178,5228,5,227,0,0,5179,5228,5,228,0,0,5180,
	5228,5,229,0,0,5181,5228,5,230,0,0,5182,5228,5,231,0,0,5183,5228,5,232,
	0,0,5184,5228,5,233,0,0,5185,5228,5,234,0,0,5186,5228,5,235,0,0,5187,5228,
	5,236,0,0,5188,5228,5,237,0,0,5189,5228,5,238,0,0,5190,5228,5,239,0,0,5191,
	5228,5,240,0,0,5192,5228,5,241,0,0,5193,5228,5,242,0,0,5194,5228,5,243,
	0,0,5195,5228,5,244,0,0,5196,5228,5,245,0,0,5197,5228,5,246,0,0,5198,5228,
	5,247,0,0,5199,5228,5,248,0,0,5200,5228,5,249,0,0,5201,5228,5,250,0,0,5202,
	5228,5,251,0,0,5203,5228,5,252,0,0,5204,5228,5,253,0,0,5205,5228,5,254,
	0,0,5206,5228,5,255,0,0,5207,5228,5,256,0,0,5208,5228,5,257,0,0,5209,5228,
	5,258,0,0,5210,5228,5,259,0,0,5211,5228,5,260,0,0,5212,5228,5,261,0,0,5213,
	5228,5,262,0,0,5214,5228,5,263,0,0,5215,5228,5,264,0,0,5216,5228,5,265,
	0,0,5217,5228,5,266,0,0,5218,5228,5,267,0,0,5219,5228,5,268,0,0,5220,5228,
	5,269,0,0,5221,5228,5,270,0,0,5222,5228,5,271,0,0,5223,5228,5,272,0,0,5224,
	5228,5,273,0,0,5225,5228,5,274,0,0,5226,5228,5,275,0,0,5227,5010,1,0,0,
	0,5227,5011,1,0,0,0,5227,5012,1,0,0,0,5227,5013,1,0,0,0,5227,5014,1,0,0,
	0,5227,5015,1,0,0,0,5227,5016,1,0,0,0,5227,5017,1,0,0,0,5227,5018,1,0,0,
	0,5227,5019,1,0,0,0,5227,5020,1,0,0,0,5227,5021,1,0,0,0,5227,5022,1,0,0,
	0,5227,5023,1,0,0,0,5227,5024,1,0,0,0,5227,5025,1,0,0,0,5227,5026,1,0,0,
	0,5227,5027,1,0,0,0,5227,5028,1,0,0,0,5227,5029,1,0,0,0,5227,5030,1,0,0,
	0,5227,5031,1,0,0,0,5227,5032,1,0,0,0,5227,5033,1,0,0,0,5227,5034,1,0,0,
	0,5227,5035,1,0,0,0,5227,5036,1,0,0,0,5227,5037,1,0,0,0,5227,5038,1,0,0,
	0,5227,5039,1,0,0,0,5227,5040,1,0,0,0,5227,5041,1,0,0,0,5227,5042,1,0,0,
	0,5227,5043,1,0,0,0,5227,5044,1,0,0,0,5227,5045,1,0,0,0,5227,5046,1,0,0,
	0,5227,5047,1,0,0,0,5227,5048,1,0,0,0,5227,5049,1,0,0,0,5227,5050,1,0,0,
	0,5227,5051,1,0,0,0,5227,5052,1,0,0,0,5227,5053,1,0,0,0,5227,5054,1,0,0,
	0,5227,5055,1,0,0,0,5227,5056,1,0,0,0,5227,5057,1,0,0,0,5227,5058,1,0,0,
	0,5227,5059,1,0,0,0,5227,5060,1,0,0,0,5227,5061,1,0,0,0,5227,5062,1,0,0,
	0,5227,5063,1,0,0,0,5227,5064,1,0,0,0,5227,5065,1,0,0,0,5227,5066,1,0,0,
	0,5227,5067,1,0,0,0,5227,5068,1,0,0,0,5227,5069,1,0,0,0,5227,5070,1,0,0,
	0,5227,5071,1,0,0,0,5227,5072,1,0,0,0,5227,5073,1,0,0,0,5227,5074,1,0,0,
	0,5227,5075,1,0,0,0,5227,5076,1,0,0,0,5227,5077,1,0,0,0,5227,5078,1,0,0,
	0,5227,5079,1,0,0,0,5227,5080,1,0,0,0,5227,5081,1,0,0,0,5227,5082,1,0,0,
	0,5227,5083,1,0,0,0,5227,5084,1,0,0,0,5227,5085,1,0,0,0,5227,5086,1,0,0,
	0,5227,5087,1,0,0,0,5227,5088,1,0,0,0,5227,5089,1,0,0,0,5227,5090,1,0,0,
	0,5227,5091,1,0,0,0,5227,5092,1,0,0,0,5227,5093,1,0,0,0,5227,5094,1,0,0,
	0,5227,5095,1,0,0,0,5227,5096,1,0,0,0,5227,5097,1,0,0,0,5227,5098,1,0,0,
	0,5227,5099,1,0,0,0,5227,5100,1,0,0,0,5227,5101,1,0,0,0,5227,5102,1,0,0,
	0,5227,5103,1,0,0,0,5227,5104,1,0,0,0,5227,5105,1,0,0,0,5227,5106,1,0,0,
	0,5227,5107,1,0,0,0,5227,5108,1,0,0,0,5227,5109,1,0,0,0,5227,5110,1,0,0,
	0,5227,5111,1,0,0,0,5227,5112,1,0,0,0,5227,5113,1,0,0,0,5227,5114,1,0,0,
	0,5227,5115,1,0,0,0,5227,5116,1,0,0,0,5227,5117,1,0,0,0,5227,5118,1,0,0,
	0,5227,5119,1,0,0,0,5227,5120,1,0,0,0,5227,5121,1,0,0,0,5227,5122,1,0,0,
	0,5227,5123,1,0,0,0,5227,5124,1,0,0,0,5227,5125,1,0,0,0,5227,5126,1,0,0,
	0,5227,5127,1,0,0,0,5227,5128,1,0,0,0,5227,5129,1,0,0,0,5227,5130,1,0,0,
	0,5227,5131,1,0,0,0,5227,5132,1,0,0,0,5227,5133,1,0,0,0,5227,5134,1,0,0,
	0,5227,5135,1,0,0,0,5227,5136,1,0,0,0,5227,5137,1,0,0,0,5227,5138,1,0,0,
	0,5227,5139,1,0,0,0,5227,5140,1,0,0,0,5227,5141,1,0,0,0,5227,5142,1,0,0,
	0,5227,5143,1,0,0,0,5227,5144,1,0,0,0,5227,5145,1,0,0,0,5227,5146,1,0,0,
	0,5227,5147,1,0,0,0,5227,5148,1,0,0,0,5227,5149,1,0,0,0,5227,5150,1,0,0,
	0,5227,5151,1,0,0,0,5227,5152,1,0,0,0,5227,5153,1,0,0,0,5227,5154,1,0,0,
	0,5227,5155,1,0,0,0,5227,5156,1,0,0,0,5227,5157,1,0,0,0,5227,5158,1,0,0,
	0,5227,5159,1,0,0,0,5227,5160,1,0,0,0,5227,5161,1,0,0,0,5227,5162,1,0,0,
	0,5227,5163,1,0,0,0,5227,5164,1,0,0,0,5227,5165,1,0,0,0,5227,5166,1,0,0,
	0,5227,5167,1,0,0,0,5227,5168,1,0,0,0,5227,5169,1,0,0,0,5227,5170,1,0,0,
	0,5227,5171,1,0,0,0,5227,5172,1,0,0,0,5227,5173,1,0,0,0,5227,5174,1,0,0,
	0,5227,5175,1,0,0,0,5227,5176,1,0,0,0,5227,5177,1,0,0,0,5227,5178,1,0,0,
	0,5227,5179,1,0,0,0,5227,5180,1,0,0,0,5227,5181,1,0,0,0,5227,5182,1,0,0,
	0,5227,5183,1,0,0,0,5227,5184,1,0,0,0,5227,5185,1,0,0,0,5227,5186,1,0,0,
	0,5227,5187,1,0,0,0,5227,5188,1,0,0,0,5227,5189,1,0,0,0,5227,5190,1,0,0,
	0,5227,5191,1,0,0,0,5227,5192,1,0,0,0,5227,5193,1,0,0,0,5227,5194,1,0,0,
	0,5227,5195,1,0,0,0,5227,5196,1,0,0,0,5227,5197,1,0,0,0,5227,5198,1,0,0,
	0,5227,5199,1,0,0,0,5227,5200,1,0,0,0,5227,5201,1,0,0,0,5227,5202,1,0,0,
	0,5227,5203,1,0,0,0,5227,5204,1,0,0,0,5227,5205,1,0,0,0,5227,5206,1,0,0,
	0,5227,5207,1,0,0,0,5227,5208,1,0,0,0,5227,5209,1,0,0,0,5227,5210,1,0,0,
	0,5227,5211,1,0,0,0,5227,5212,1,0,0,0,5227,5213,1,0,0,0,5227,5214,1,0,0,
	0,5227,5215,1,0,0,0,5227,5216,1,0,0,0,5227,5217,1,0,0,0,5227,5218,1,0,0,
	0,5227,5219,1,0,0,0,5227,5220,1,0,0,0,5227,5221,1,0,0,0,5227,5222,1,0,0,
	0,5227,5223,1,0,0,0,5227,5224,1,0,0,0,5227,5225,1,0,0,0,5227,5226,1,0,0,
	0,5228,1329,1,0,0,0,5229,5230,7,35,0,0,5230,1331,1,0,0,0,5231,5232,7,36,
	0,0,5232,1333,1,0,0,0,5233,5271,5,429,0,0,5234,5271,3,1216,608,0,5235,5271,
	3,1242,621,0,5236,5271,3,1246,623,0,5237,5271,3,1324,662,0,5238,5271,3,
	1252,626,0,5239,5271,3,1244,622,0,5240,5271,5,59,0,0,5241,5271,5,33,0,0,
	5242,5271,5,28,0,0,5243,5271,5,55,0,0,5244,5271,3,846,423,0,5245,5271,3,
	848,424,0,5246,5271,3,854,427,0,5247,5271,3,852,426,0,5248,5271,3,854,427,
	0,5249,5271,5,1,0,0,5250,5271,5,2,0,0,5251,5271,5,3,0,0,5252,5271,5,4,0,
	0,5253,5271,5,5,0,0,5254,5271,5,6,0,0,5255,5271,5,7,0,0,5256,5271,5,8,0,
	0,5257,5271,5,9,0,0,5258,5271,5,10,0,0,5259,5271,5,11,0,0,5260,5271,5,12,
	0,0,5261,5271,5,13,0,0,5262,5271,5,14,0,0,5263,5271,5,15,0,0,5264,5271,
	5,16,0,0,5265,5271,5,17,0,0,5266,5271,5,18,0,0,5267,5271,5,19,0,0,5268,
	5271,5,20,0,0,5269,5271,5,21,0,0,5270,5233,1,0,0,0,5270,5234,1,0,0,0,5270,
	5235,1,0,0,0,5270,5236,1,0,0,0,5270,5237,1,0,0,0,5270,5238,1,0,0,0,5270,
	5239,1,0,0,0,5270,5240,1,0,0,0,5270,5241,1,0,0,0,5270,5242,1,0,0,0,5270,
	5243,1,0,0,0,5270,5244,1,0,0,0,5270,5245,1,0,0,0,5270,5246,1,0,0,0,5270,
	5247,1,0,0,0,5270,5248,1,0,0,0,5270,5249,1,0,0,0,5270,5250,1,0,0,0,5270,
	5251,1,0,0,0,5270,5252,1,0,0,0,5270,5253,1,0,0,0,5270,5254,1,0,0,0,5270,
	5255,1,0,0,0,5270,5256,1,0,0,0,5270,5257,1,0,0,0,5270,5258,1,0,0,0,5270,
	5259,1,0,0,0,5270,5260,1,0,0,0,5270,5261,1,0,0,0,5270,5262,1,0,0,0,5270,
	5263,1,0,0,0,5270,5264,1,0,0,0,5270,5265,1,0,0,0,5270,5266,1,0,0,0,5270,
	5267,1,0,0,0,5270,5268,1,0,0,0,5270,5269,1,0,0,0,5271,1335,1,0,0,0,5272,
	5273,7,37,0,0,5273,1337,1,0,0,0,5274,5275,7,38,0,0,5275,1339,1,0,0,0,5276,
	5277,7,39,0,0,5277,1341,1,0,0,0,521,1345,1352,1356,1360,1368,1374,1388,
	1391,1398,1409,1414,1420,1425,1432,1435,1442,1444,1448,1451,1456,1465,1469,
	1475,1494,1497,1504,1509,1515,1521,1525,1530,1537,1540,1548,1555,1558,1570,
	1573,1585,1595,1608,1613,1617,1625,1630,1637,1643,1647,1651,1656,1659,1665,
	1671,1674,1678,1681,1687,1691,1694,1706,1710,1716,1721,1726,1730,1736,1741,
	1744,1750,1754,1759,1767,1771,1776,1783,1787,1792,1796,1800,1806,1819,1824,
	1836,1849,1860,1864,1883,1900,1905,1914,1919,1926,1942,1946,1952,1957,1964,
	1968,1985,1990,1997,2007,2014,2019,2033,2036,2040,2043,2047,2050,2056,2060,
	2063,2067,2074,2079,2086,2090,2094,2097,2100,2103,2106,2109,2111,2118,2122,
	2133,2140,2152,2155,2162,2165,2171,2180,2185,2194,2214,2224,2230,2234,2237,
	2241,2251,2254,2258,2261,2268,2272,2275,2280,2293,2297,2304,2308,2311,2317,
	2320,2323,2331,2336,2339,2344,2347,2352,2355,2360,2363,2374,2381,2389,2396,
	2402,2413,2417,2424,2427,2430,2433,2442,2446,2460,2469,2478,2512,2515,2519,
	2536,2545,2550,2557,2573,2576,2579,2595,2602,2610,2615,2623,2635,2643,2647,
	2662,2695,2702,2710,2717,2725,2731,2741,2750,2777,2787,2800,2804,2820,2823,
	2840,2845,2857,2868,2872,2875,2885,2896,2913,2918,2924,2932,2936,2939,2948,
	2956,2961,2965,2968,2977,2986,2995,3027,3043,3051,3054,3062,3065,3076,3114,
	3118,3127,3132,3139,3147,3151,3160,3164,3171,3174,3180,3185,3188,3195,3198,
	3205,3208,3210,3220,3224,3228,3232,3236,3240,3244,3248,3252,3256,3263,3266,
	3270,3273,3276,3280,3284,3288,3292,3296,3300,3304,3311,3314,3318,3322,3326,
	3330,3334,3338,3342,3346,3351,3358,3361,3366,3368,3375,3379,3382,3390,3394,
	3398,3402,3406,3413,3417,3420,3424,3428,3431,3435,3442,3449,3455,3457,3462,
	3469,3471,3475,3480,3486,3488,3493,3499,3501,3505,3511,3515,3519,3523,3527,
	3531,3535,3538,3542,3546,3550,3553,3557,3561,3565,3575,3578,3586,3589,3591,
	3594,3601,3605,3608,3612,3614,3618,3627,3632,3637,3652,3669,3675,3684,3690,
	3697,3702,3704,3711,3719,3722,3730,3733,3742,3745,3751,3754,3760,3767,3775,
	3777,3796,3810,3829,3849,3856,3865,3875,3878,3887,3898,3902,3910,3916,3924,
	3939,3950,3963,3967,3971,3975,3981,3992,3999,4005,4008,4013,4016,4021,4040,
	4050,4054,4061,4064,4070,4074,4089,4100,4103,4109,4113,4121,4131,4136,4148,
	4153,4196,4252,4256,4266,4270,4276,4284,4289,4298,4314,4317,4320,4348,4351,
	4354,4370,4378,4380,4389,4396,4402,4405,4411,4414,4419,4422,4428,4431,4437,
	4440,4444,4448,4452,4457,4465,4467,4485,4493,4495,4499,4505,4519,4528,4537,
	4545,4576,4582,4588,4597,4606,4623,4639,4646,4662,4667,4671,4677,4684,4703,
	4710,4721,4725,4753,4758,4766,4770,4777,4780,4784,4787,4790,4797,4801,4808,
	4812,4819,4834,4846,4896,4901,4926,4936,4956,4962,4966,4982,4990,4994,4998,
	5004,5008,5227,5270];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GqlParser.__ATN) {
			GqlParser.__ATN = new ATNDeserializer().deserialize(GqlParser._serializedATN);
		}

		return GqlParser.__ATN;
	}


	static DecisionsToDFA = GqlParser._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );

}

export class GqlProgramContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EOF(): TerminalNode {
		return this.getToken(GqlParser.EOF, 0);
	}
	public activity_list(): ActivityContext[] {
		return this.getTypedRuleContexts(ActivityContext) as ActivityContext[];
	}
	public activity(i: number): ActivityContext {
		return this.getTypedRuleContext(ActivityContext, i) as ActivityContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_gqlProgram;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGqlProgram) {
	 		listener.enterGqlProgram(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGqlProgram) {
	 		listener.exitGqlProgram(this);
		}
	}
}


export class ActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public programActivity(): ProgramActivityContext {
		return this.getTypedRuleContext(ProgramActivityContext, 0) as ProgramActivityContext;
	}
	public sessionCloseCommand(): SessionCloseCommandContext {
		return this.getTypedRuleContext(SessionCloseCommandContext, 0) as SessionCloseCommandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_activity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterActivity) {
	 		listener.enterActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitActivity) {
	 		listener.exitActivity(this);
		}
	}
}


export class ProgramActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sessionActivity(): SessionActivityContext {
		return this.getTypedRuleContext(SessionActivityContext, 0) as SessionActivityContext;
	}
	public transactionActivity(): TransactionActivityContext {
		return this.getTypedRuleContext(TransactionActivityContext, 0) as TransactionActivityContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_programActivity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProgramActivity) {
	 		listener.enterProgramActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProgramActivity) {
	 		listener.exitProgramActivity(this);
		}
	}
}


export class SessionActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sessionSetCommand(): SessionSetCommandContext {
		return this.getTypedRuleContext(SessionSetCommandContext, 0) as SessionSetCommandContext;
	}
	public sessionResetCommand(): SessionResetCommandContext {
		return this.getTypedRuleContext(SessionResetCommandContext, 0) as SessionResetCommandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionActivity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionActivity) {
	 		listener.enterSessionActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionActivity) {
	 		listener.exitSessionActivity(this);
		}
	}
}


export class SessionSetCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(GqlParser.SET, 0);
	}
	public sessionSetSchemaClause(): SessionSetSchemaClauseContext {
		return this.getTypedRuleContext(SessionSetSchemaClauseContext, 0) as SessionSetSchemaClauseContext;
	}
	public sessionSetGraphClause(): SessionSetGraphClauseContext {
		return this.getTypedRuleContext(SessionSetGraphClauseContext, 0) as SessionSetGraphClauseContext;
	}
	public sessionSetTimeZoneClause(): SessionSetTimeZoneClauseContext {
		return this.getTypedRuleContext(SessionSetTimeZoneClauseContext, 0) as SessionSetTimeZoneClauseContext;
	}
	public sessionSetParameterClause(): SessionSetParameterClauseContext {
		return this.getTypedRuleContext(SessionSetParameterClauseContext, 0) as SessionSetParameterClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetCommand) {
	 		listener.enterSessionSetCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetCommand) {
	 		listener.exitSessionSetCommand(this);
		}
	}
}


export class SessionSetSchemaClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetSchemaClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetSchemaClause) {
	 		listener.enterSessionSetSchemaClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetSchemaClause) {
	 		listener.exitSessionSetSchemaClause(this);
		}
	}
}


export class SessionSetGraphClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetGraphClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetGraphClause) {
	 		listener.enterSessionSetGraphClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetGraphClause) {
	 		listener.exitSessionSetGraphClause(this);
		}
	}
}


export class SessionSetTimeZoneClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public ZONE(): TerminalNode {
		return this.getToken(GqlParser.ZONE, 0);
	}
	public setTimeZoneValue(): SetTimeZoneValueContext {
		return this.getTypedRuleContext(SetTimeZoneValueContext, 0) as SetTimeZoneValueContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetTimeZoneClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetTimeZoneClause) {
	 		listener.enterSessionSetTimeZoneClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetTimeZoneClause) {
	 		listener.exitSessionSetTimeZoneClause(this);
		}
	}
}


export class SetTimeZoneValueContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public stringValueExpr(): StringValueExprContext {
		return this.getTypedRuleContext(StringValueExprContext, 0) as StringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setTimeZoneValue;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetTimeZoneValue) {
	 		listener.enterSetTimeZoneValue(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetTimeZoneValue) {
	 		listener.exitSetTimeZoneValue(this);
		}
	}
}


export class SessionSetParameterClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sessionSetGraphParameterClause(): SessionSetGraphParameterClauseContext {
		return this.getTypedRuleContext(SessionSetGraphParameterClauseContext, 0) as SessionSetGraphParameterClauseContext;
	}
	public sessionSetBindingTableParameterCalues(): SessionSetBindingTableParameterCaluesContext {
		return this.getTypedRuleContext(SessionSetBindingTableParameterCaluesContext, 0) as SessionSetBindingTableParameterCaluesContext;
	}
	public sessionSetValuesParameterClause(): SessionSetValuesParameterClauseContext {
		return this.getTypedRuleContext(SessionSetValuesParameterClauseContext, 0) as SessionSetValuesParameterClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetParameterClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetParameterClause) {
	 		listener.enterSessionSetParameterClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetParameterClause) {
	 		listener.exitSessionSetParameterClause(this);
		}
	}
}


export class SessionSetGraphParameterClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public sessionSetParameterName(): SessionSetParameterNameContext {
		return this.getTypedRuleContext(SessionSetParameterNameContext, 0) as SessionSetParameterNameContext;
	}
	public optTypedGraphInit(): OptTypedGraphInitContext {
		return this.getTypedRuleContext(OptTypedGraphInitContext, 0) as OptTypedGraphInitContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetGraphParameterClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetGraphParameterClause) {
	 		listener.enterSessionSetGraphParameterClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetGraphParameterClause) {
	 		listener.exitSessionSetGraphParameterClause(this);
		}
	}
}


export class SessionSetBindingTableParameterCaluesContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public sessionSetParameterName(): SessionSetParameterNameContext {
		return this.getTypedRuleContext(SessionSetParameterNameContext, 0) as SessionSetParameterNameContext;
	}
	public optTypedBindingTableInit(): OptTypedBindingTableInitContext {
		return this.getTypedRuleContext(OptTypedBindingTableInitContext, 0) as OptTypedBindingTableInitContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetBindingTableParameterCalues;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetBindingTableParameterCalues) {
	 		listener.enterSessionSetBindingTableParameterCalues(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetBindingTableParameterCalues) {
	 		listener.exitSessionSetBindingTableParameterCalues(this);
		}
	}
}


export class SessionSetValuesParameterClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public sessionSetParameterName(): SessionSetParameterNameContext {
		return this.getTypedRuleContext(SessionSetParameterNameContext, 0) as SessionSetParameterNameContext;
	}
	public optTypedValueInit(): OptTypedValueInitContext {
		return this.getTypedRuleContext(OptTypedValueInitContext, 0) as OptTypedValueInitContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetValuesParameterClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetValuesParameterClause) {
	 		listener.enterSessionSetValuesParameterClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetValuesParameterClause) {
	 		listener.exitSessionSetValuesParameterClause(this);
		}
	}
}


export class SessionSetParameterNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetParameterName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetParameterName) {
	 		listener.enterSessionSetParameterName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetParameterName) {
	 		listener.exitSessionSetParameterName(this);
		}
	}
}


export class SessionResetCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESET(): TerminalNode {
		return this.getToken(GqlParser.RESET, 0);
	}
	public sessionResetArguments(): SessionResetArgumentsContext {
		return this.getTypedRuleContext(SessionResetArgumentsContext, 0) as SessionResetArgumentsContext;
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionResetCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionResetCommand) {
	 		listener.enterSessionResetCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionResetCommand) {
	 		listener.exitSessionResetCommand(this);
		}
	}
}


export class SessionResetArgumentsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARAMETERS(): TerminalNode {
		return this.getToken(GqlParser.PARAMETERS, 0);
	}
	public CHARACTERISTICS(): TerminalNode {
		return this.getToken(GqlParser.CHARACTERISTICS, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public ZONE(): TerminalNode {
		return this.getToken(GqlParser.ZONE, 0);
	}
	public PARAMETER(): TerminalNode {
		return this.getToken(GqlParser.PARAMETER, 0);
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionResetArguments;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionResetArguments) {
	 		listener.enterSessionResetArguments(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionResetArguments) {
	 		listener.exitSessionResetArguments(this);
		}
	}
}


export class SessionCloseCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CLOSE(): TerminalNode {
		return this.getToken(GqlParser.CLOSE, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionCloseCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionCloseCommand) {
	 		listener.enterSessionCloseCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionCloseCommand) {
	 		listener.exitSessionCloseCommand(this);
		}
	}
}


export class TransactionActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionStartCommand(): TransactionStartCommandContext {
		return this.getTypedRuleContext(TransactionStartCommandContext, 0) as TransactionStartCommandContext;
	}
	public procedureSpec(): ProcedureSpecContext {
		return this.getTypedRuleContext(ProcedureSpecContext, 0) as ProcedureSpecContext;
	}
	public transactionEndCommand(): TransactionEndCommandContext {
		return this.getTypedRuleContext(TransactionEndCommandContext, 0) as TransactionEndCommandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionActivity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionActivity) {
	 		listener.enterTransactionActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionActivity) {
	 		listener.exitTransactionActivity(this);
		}
	}
}


export class TransactionStartCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public START(): TerminalNode {
		return this.getToken(GqlParser.START, 0);
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(GqlParser.TRANSACTION, 0);
	}
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		return this.getTypedRuleContext(TransactionCharacteristicsContext, 0) as TransactionCharacteristicsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionStartCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionStartCommand) {
	 		listener.enterTransactionStartCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionStartCommand) {
	 		listener.exitTransactionStartCommand(this);
		}
	}
}


export class TransactionEndCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(GqlParser.ROLLBACK, 0);
	}
	public COMMIT(): TerminalNode {
		return this.getToken(GqlParser.COMMIT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionEndCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionEndCommand) {
	 		listener.enterTransactionEndCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionEndCommand) {
	 		listener.exitTransactionEndCommand(this);
		}
	}
}


export class TransactionCharacteristicsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionMode_list(): TransactionModeContext[] {
		return this.getTypedRuleContexts(TransactionModeContext) as TransactionModeContext[];
	}
	public transactionMode(i: number): TransactionModeContext {
		return this.getTypedRuleContext(TransactionModeContext, i) as TransactionModeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionCharacteristics;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionCharacteristics) {
	 		listener.enterTransactionCharacteristics(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionCharacteristics) {
	 		listener.exitTransactionCharacteristics(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionAccessMode(): TransactionAccessModeContext {
		return this.getTypedRuleContext(TransactionAccessModeContext, 0) as TransactionAccessModeContext;
	}
	public implDefinedAccessMode(): ImplDefinedAccessModeContext {
		return this.getTypedRuleContext(ImplDefinedAccessModeContext, 0) as ImplDefinedAccessModeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionMode) {
	 		listener.enterTransactionMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionMode) {
	 		listener.exitTransactionMode(this);
		}
	}
}


export class TransactionAccessModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ(): TerminalNode {
		return this.getToken(GqlParser.READ, 0);
	}
	public ONLY(): TerminalNode {
		return this.getToken(GqlParser.ONLY, 0);
	}
	public WRITE(): TerminalNode {
		return this.getToken(GqlParser.WRITE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionAccessMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionAccessMode) {
	 		listener.enterTransactionAccessMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionAccessMode) {
	 		listener.exitTransactionAccessMode(this);
		}
	}
}


export class ImplDefinedAccessModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_implDefinedAccessMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterImplDefinedAccessMode) {
	 		listener.enterImplDefinedAccessMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitImplDefinedAccessMode) {
	 		listener.exitImplDefinedAccessMode(this);
		}
	}
}


export class NestedProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public procedureSpec(): ProcedureSpecContext {
		return this.getTypedRuleContext(ProcedureSpecContext, 0) as ProcedureSpecContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedProcedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedProcedureSpec) {
	 		listener.enterNestedProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedProcedureSpec) {
	 		listener.exitNestedProcedureSpec(this);
		}
	}
}


export class ProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureBody(): ProcedureBodyContext {
		return this.getTypedRuleContext(ProcedureBodyContext, 0) as ProcedureBodyContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureSpec) {
	 		listener.enterProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureSpec) {
	 		listener.exitProcedureSpec(this);
		}
	}
}


export class NestedDataModProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public procedureBody(): ProcedureBodyContext {
		return this.getTypedRuleContext(ProcedureBodyContext, 0) as ProcedureBodyContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedDataModProcedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedDataModProcedureSpec) {
	 		listener.enterNestedDataModProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedDataModProcedureSpec) {
	 		listener.exitNestedDataModProcedureSpec(this);
		}
	}
}


export class NestedQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public procedureBody(): ProcedureBodyContext {
		return this.getTypedRuleContext(ProcedureBodyContext, 0) as ProcedureBodyContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedQuerySpec) {
	 		listener.enterNestedQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedQuerySpec) {
	 		listener.exitNestedQuerySpec(this);
		}
	}
}


export class ProcedureBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public statmentBlock(): StatmentBlockContext {
		return this.getTypedRuleContext(StatmentBlockContext, 0) as StatmentBlockContext;
	}
	public atSchemaClause(): AtSchemaClauseContext {
		return this.getTypedRuleContext(AtSchemaClauseContext, 0) as AtSchemaClauseContext;
	}
	public bindingVarDefBlock(): BindingVarDefBlockContext {
		return this.getTypedRuleContext(BindingVarDefBlockContext, 0) as BindingVarDefBlockContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureBody) {
	 		listener.enterProcedureBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureBody) {
	 		listener.exitProcedureBody(this);
		}
	}
}


export class BindingVarDefBlockContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarDef_list(): BindingVarDefContext[] {
		return this.getTypedRuleContexts(BindingVarDefContext) as BindingVarDefContext[];
	}
	public bindingVarDef(i: number): BindingVarDefContext {
		return this.getTypedRuleContext(BindingVarDefContext, i) as BindingVarDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarDefBlock;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarDefBlock) {
	 		listener.enterBindingVarDefBlock(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarDefBlock) {
	 		listener.exitBindingVarDefBlock(this);
		}
	}
}


export class BindingVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphVarDef(): GraphVarDefContext {
		return this.getTypedRuleContext(GraphVarDefContext, 0) as GraphVarDefContext;
	}
	public bindingTableVarDef(): BindingTableVarDefContext {
		return this.getTypedRuleContext(BindingTableVarDefContext, 0) as BindingTableVarDefContext;
	}
	public valueVarDef(): ValueVarDefContext {
		return this.getTypedRuleContext(ValueVarDefContext, 0) as ValueVarDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarDef) {
	 		listener.enterBindingVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarDef) {
	 		listener.exitBindingVarDef(this);
		}
	}
}


export class StatmentBlockContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public statement(): StatementContext {
		return this.getTypedRuleContext(StatementContext, 0) as StatementContext;
	}
	public nextStatment_list(): NextStatmentContext[] {
		return this.getTypedRuleContexts(NextStatmentContext) as NextStatmentContext[];
	}
	public nextStatment(i: number): NextStatmentContext {
		return this.getTypedRuleContext(NextStatmentContext, i) as NextStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_statmentBlock;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStatmentBlock) {
	 		listener.enterStatmentBlock(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStatmentBlock) {
	 		listener.exitStatmentBlock(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public linearCatalogModStatment(): LinearCatalogModStatmentContext {
		return this.getTypedRuleContext(LinearCatalogModStatmentContext, 0) as LinearCatalogModStatmentContext;
	}
	public linearDataModStatment(): LinearDataModStatmentContext {
		return this.getTypedRuleContext(LinearDataModStatmentContext, 0) as LinearDataModStatmentContext;
	}
	public compositeQueryStatment(): CompositeQueryStatmentContext {
		return this.getTypedRuleContext(CompositeQueryStatmentContext, 0) as CompositeQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_statement;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStatement) {
	 		listener.enterStatement(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStatement) {
	 		listener.exitStatement(this);
		}
	}
}


export class NextStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NEXT(): TerminalNode {
		return this.getToken(GqlParser.NEXT, 0);
	}
	public statement(): StatementContext {
		return this.getTypedRuleContext(StatementContext, 0) as StatementContext;
	}
	public yieldClause(): YieldClauseContext {
		return this.getTypedRuleContext(YieldClauseContext, 0) as YieldClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nextStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNextStatment) {
	 		listener.enterNextStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNextStatment) {
	 		listener.exitNextStatment(this);
		}
	}
}


export class GraphVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public graphVar(): GraphVarContext {
		return this.getTypedRuleContext(GraphVarContext, 0) as GraphVarContext;
	}
	public optTypedGraphInit(): OptTypedGraphInitContext {
		return this.getTypedRuleContext(OptTypedGraphInitContext, 0) as OptTypedGraphInitContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphVarDef) {
	 		listener.enterGraphVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphVarDef) {
	 		listener.exitGraphVarDef(this);
		}
	}
}


export class OptTypedGraphInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphInit(): GraphInitContext {
		return this.getTypedRuleContext(GraphInitContext, 0) as GraphInitContext;
	}
	public graphRefValueType(): GraphRefValueTypeContext {
		return this.getTypedRuleContext(GraphRefValueTypeContext, 0) as GraphRefValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optTypedGraphInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptTypedGraphInit) {
	 		listener.enterOptTypedGraphInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptTypedGraphInit) {
	 		listener.exitOptTypedGraphInit(this);
		}
	}
}


export class GraphInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphInit) {
	 		listener.enterGraphInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphInit) {
	 		listener.exitGraphInit(this);
		}
	}
}


export class BindingTableVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public bindingTableVar(): BindingTableVarContext {
		return this.getTypedRuleContext(BindingTableVarContext, 0) as BindingTableVarContext;
	}
	public optTypedBindingTableInit(): OptTypedBindingTableInitContext {
		return this.getTypedRuleContext(OptTypedBindingTableInitContext, 0) as OptTypedBindingTableInitContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableVarDef) {
	 		listener.enterBindingTableVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableVarDef) {
	 		listener.exitBindingTableVarDef(this);
		}
	}
}


export class OptTypedBindingTableInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingTableInit(): BindingTableInitContext {
		return this.getTypedRuleContext(BindingTableInitContext, 0) as BindingTableInitContext;
	}
	public bindingTableRefValueType(): BindingTableRefValueTypeContext {
		return this.getTypedRuleContext(BindingTableRefValueTypeContext, 0) as BindingTableRefValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optTypedBindingTableInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptTypedBindingTableInit) {
	 		listener.enterOptTypedBindingTableInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptTypedBindingTableInit) {
	 		listener.exitOptTypedBindingTableInit(this);
		}
	}
}


export class BindingTableInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public bindingTableExpr(): BindingTableExprContext {
		return this.getTypedRuleContext(BindingTableExprContext, 0) as BindingTableExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableInit) {
	 		listener.enterBindingTableInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableInit) {
	 		listener.exitBindingTableInit(this);
		}
	}
}


export class ValueVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public valueVar(): ValueVarContext {
		return this.getTypedRuleContext(ValueVarContext, 0) as ValueVarContext;
	}
	public optTypedValueInit(): OptTypedValueInitContext {
		return this.getTypedRuleContext(OptTypedValueInitContext, 0) as OptTypedValueInitContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueVarDef) {
	 		listener.enterValueVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueVarDef) {
	 		listener.exitValueVarDef(this);
		}
	}
}


export class OptTypedValueInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueInit(): ValueInitContext {
		return this.getTypedRuleContext(ValueInitContext, 0) as ValueInitContext;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optTypedValueInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptTypedValueInit) {
	 		listener.enterOptTypedValueInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptTypedValueInit) {
	 		listener.exitOptTypedValueInit(this);
		}
	}
}


export class ValueInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueInit) {
	 		listener.enterValueInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueInit) {
	 		listener.exitValueInit(this);
		}
	}
}


export class GraphExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedGraphQuerySpec(): NestedGraphQuerySpecContext {
		return this.getTypedRuleContext(NestedGraphQuerySpecContext, 0) as NestedGraphQuerySpecContext;
	}
	public objectExprPrimary(): ObjectExprPrimaryContext {
		return this.getTypedRuleContext(ObjectExprPrimaryContext, 0) as ObjectExprPrimaryContext;
	}
	public graphRef(): GraphRefContext {
		return this.getTypedRuleContext(GraphRefContext, 0) as GraphRefContext;
	}
	public objectNameOrBindingVar(): ObjectNameOrBindingVarContext {
		return this.getTypedRuleContext(ObjectNameOrBindingVarContext, 0) as ObjectNameOrBindingVarContext;
	}
	public currentGraph(): CurrentGraphContext {
		return this.getTypedRuleContext(CurrentGraphContext, 0) as CurrentGraphContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphExpr) {
	 		listener.enterGraphExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphExpr) {
	 		listener.exitGraphExpr(this);
		}
	}
}


export class CurrentGraphContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0);
	}
	public CURRENT_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_GRAPH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_currentGraph;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCurrentGraph) {
	 		listener.enterCurrentGraph(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCurrentGraph) {
	 		listener.exitCurrentGraph(this);
		}
	}
}


export class NestedGraphQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedGraphQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedGraphQuerySpec) {
	 		listener.enterNestedGraphQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedGraphQuerySpec) {
	 		listener.exitNestedGraphQuerySpec(this);
		}
	}
}


export class BindingTableExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedBindingTableQuerySpec(): NestedBindingTableQuerySpecContext {
		return this.getTypedRuleContext(NestedBindingTableQuerySpecContext, 0) as NestedBindingTableQuerySpecContext;
	}
	public objectExprPrimary(): ObjectExprPrimaryContext {
		return this.getTypedRuleContext(ObjectExprPrimaryContext, 0) as ObjectExprPrimaryContext;
	}
	public bindingTableRef(): BindingTableRefContext {
		return this.getTypedRuleContext(BindingTableRefContext, 0) as BindingTableRefContext;
	}
	public objectNameOrBindingVar(): ObjectNameOrBindingVarContext {
		return this.getTypedRuleContext(ObjectNameOrBindingVarContext, 0) as ObjectNameOrBindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableExpr) {
	 		listener.enterBindingTableExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableExpr) {
	 		listener.exitBindingTableExpr(this);
		}
	}
}


export class NestedBindingTableQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedBindingTableQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedBindingTableQuerySpec) {
	 		listener.enterNestedBindingTableQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedBindingTableQuerySpec) {
	 		listener.exitNestedBindingTableQuerySpec(this);
		}
	}
}


export class ObjectExprPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE(): TerminalNode {
		return this.getToken(GqlParser.VARIABLE, 0);
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public parenthesizedValueExpr(): ParenthesizedValueExprContext {
		return this.getTypedRuleContext(ParenthesizedValueExprContext, 0) as ParenthesizedValueExprContext;
	}
	public propertyRef(): PropertyRefContext {
		return this.getTypedRuleContext(PropertyRefContext, 0) as PropertyRefContext;
	}
	public unsignedValueSpec(): UnsignedValueSpecContext {
		return this.getTypedRuleContext(UnsignedValueSpecContext, 0) as UnsignedValueSpecContext;
	}
	public aggregateFunction(): AggregateFunctionContext {
		return this.getTypedRuleContext(AggregateFunctionContext, 0) as AggregateFunctionContext;
	}
	public collectionValueConstructor(): CollectionValueConstructorContext {
		return this.getTypedRuleContext(CollectionValueConstructorContext, 0) as CollectionValueConstructorContext;
	}
	public valueQueryExpr(): ValueQueryExprContext {
		return this.getTypedRuleContext(ValueQueryExprContext, 0) as ValueQueryExprContext;
	}
	public caseExpr(): CaseExprContext {
		return this.getTypedRuleContext(CaseExprContext, 0) as CaseExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_objectExprPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterObjectExprPrimary) {
	 		listener.enterObjectExprPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitObjectExprPrimary) {
	 		listener.exitObjectExprPrimary(this);
		}
	}
}


export class LinearCatalogModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleCatalogModStatment_list(): SimpleCatalogModStatmentContext[] {
		return this.getTypedRuleContexts(SimpleCatalogModStatmentContext) as SimpleCatalogModStatmentContext[];
	}
	public simpleCatalogModStatment(i: number): SimpleCatalogModStatmentContext {
		return this.getTypedRuleContext(SimpleCatalogModStatmentContext, i) as SimpleCatalogModStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_linearCatalogModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLinearCatalogModStatment) {
	 		listener.enterLinearCatalogModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLinearCatalogModStatment) {
	 		listener.exitLinearCatalogModStatment(this);
		}
	}
}


export class SimpleCatalogModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveCatalogModStatment(): PrimitiveCatalogModStatmentContext {
		return this.getTypedRuleContext(PrimitiveCatalogModStatmentContext, 0) as PrimitiveCatalogModStatmentContext;
	}
	public callCatalogModProcedureStatment(): CallCatalogModProcedureStatmentContext {
		return this.getTypedRuleContext(CallCatalogModProcedureStatmentContext, 0) as CallCatalogModProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleCatalogModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleCatalogModStatment) {
	 		listener.enterSimpleCatalogModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleCatalogModStatment) {
	 		listener.exitSimpleCatalogModStatment(this);
		}
	}
}


export class PrimitiveCatalogModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createSchemeStatment(): CreateSchemeStatmentContext {
		return this.getTypedRuleContext(CreateSchemeStatmentContext, 0) as CreateSchemeStatmentContext;
	}
	public createGraphStatment(): CreateGraphStatmentContext {
		return this.getTypedRuleContext(CreateGraphStatmentContext, 0) as CreateGraphStatmentContext;
	}
	public createGraphTypeStatment(): CreateGraphTypeStatmentContext {
		return this.getTypedRuleContext(CreateGraphTypeStatmentContext, 0) as CreateGraphTypeStatmentContext;
	}
	public dropSchemeStatment(): DropSchemeStatmentContext {
		return this.getTypedRuleContext(DropSchemeStatmentContext, 0) as DropSchemeStatmentContext;
	}
	public dropGraphStatment(): DropGraphStatmentContext {
		return this.getTypedRuleContext(DropGraphStatmentContext, 0) as DropGraphStatmentContext;
	}
	public dropGraphTypeStatment(): DropGraphTypeStatmentContext {
		return this.getTypedRuleContext(DropGraphTypeStatmentContext, 0) as DropGraphTypeStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveCatalogModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveCatalogModStatment) {
	 		listener.enterPrimitiveCatalogModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveCatalogModStatment) {
	 		listener.exitPrimitiveCatalogModStatment(this);
		}
	}
}


export class CreateSchemeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
		return this.getTypedRuleContext(CatalogSchemaParentAndNameContext, 0) as CatalogSchemaParentAndNameContext;
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createSchemeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateSchemeStatment) {
	 		listener.enterCreateSchemeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateSchemeStatment) {
	 		listener.exitCreateSchemeStatment(this);
		}
	}
}


export class DropSchemeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
		return this.getTypedRuleContext(CatalogSchemaParentAndNameContext, 0) as CatalogSchemaParentAndNameContext;
	}
	public IF_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dropSchemeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDropSchemeStatment) {
	 		listener.enterDropSchemeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDropSchemeStatment) {
	 		listener.exitDropSchemeStatment(this);
		}
	}
}


export class CreateGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createOnlyGraphStatment(): CreateOnlyGraphStatmentContext {
		return this.getTypedRuleContext(CreateOnlyGraphStatmentContext, 0) as CreateOnlyGraphStatmentContext;
	}
	public createOrReplaceGraphStatment(): CreateOrReplaceGraphStatmentContext {
		return this.getTypedRuleContext(CreateOrReplaceGraphStatmentContext, 0) as CreateOrReplaceGraphStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateGraphStatment) {
	 		listener.enterCreateGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateGraphStatment) {
	 		listener.exitCreateGraphStatment(this);
		}
	}
}


export class CreateOnlyGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphParentAndNameContext, 0) as CatalogGraphParentAndNameContext;
	}
	public openGraphType(): OpenGraphTypeContext {
		return this.getTypedRuleContext(OpenGraphTypeContext, 0) as OpenGraphTypeContext;
	}
	public ofGraphType(): OfGraphTypeContext {
		return this.getTypedRuleContext(OfGraphTypeContext, 0) as OfGraphTypeContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
	public graphSource(): GraphSourceContext {
		return this.getTypedRuleContext(GraphSourceContext, 0) as GraphSourceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createOnlyGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateOnlyGraphStatment) {
	 		listener.enterCreateOnlyGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateOnlyGraphStatment) {
	 		listener.exitCreateOnlyGraphStatment(this);
		}
	}
}


export class CreateOrReplaceGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(GqlParser.REPLACE, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphParentAndNameContext, 0) as CatalogGraphParentAndNameContext;
	}
	public openGraphType(): OpenGraphTypeContext {
		return this.getTypedRuleContext(OpenGraphTypeContext, 0) as OpenGraphTypeContext;
	}
	public ofGraphType(): OfGraphTypeContext {
		return this.getTypedRuleContext(OfGraphTypeContext, 0) as OfGraphTypeContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public graphSource(): GraphSourceContext {
		return this.getTypedRuleContext(GraphSourceContext, 0) as GraphSourceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createOrReplaceGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateOrReplaceGraphStatment) {
	 		listener.enterCreateOrReplaceGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateOrReplaceGraphStatment) {
	 		listener.exitCreateOrReplaceGraphStatment(this);
		}
	}
}


export class OpenGraphTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openGraphType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenGraphType) {
	 		listener.enterOpenGraphType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenGraphType) {
	 		listener.exitOpenGraphType(this);
		}
	}
}


export class OfGraphTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphTypeLikeGraph(): GraphTypeLikeGraphContext {
		return this.getTypedRuleContext(GraphTypeLikeGraphContext, 0) as GraphTypeLikeGraphContext;
	}
	public graphTypeRef(): GraphTypeRefContext {
		return this.getTypedRuleContext(GraphTypeRefContext, 0) as GraphTypeRefContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		return this.getTypedRuleContext(NestedGraphTypeSpecContext, 0) as NestedGraphTypeSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ofGraphType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOfGraphType) {
	 		listener.enterOfGraphType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOfGraphType) {
	 		listener.exitOfGraphType(this);
		}
	}
}


export class GraphTypeLikeGraphContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIKE(): TerminalNode {
		return this.getToken(GqlParser.LIKE, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeLikeGraph;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeLikeGraph) {
	 		listener.enterGraphTypeLikeGraph(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeLikeGraph) {
	 		listener.exitGraphTypeLikeGraph(this);
		}
	}
}


export class GraphSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public COPY(): TerminalNode {
		return this.getToken(GqlParser.COPY, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphSource) {
	 		listener.enterGraphSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphSource) {
	 		listener.exitGraphSource(this);
		}
	}
}


export class DropGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphParentAndNameContext, 0) as CatalogGraphParentAndNameContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dropGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDropGraphStatment) {
	 		listener.enterDropGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDropGraphStatment) {
	 		listener.exitDropGraphStatment(this);
		}
	}
}


export class CreateGraphTypeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext, 0) as CatalogGraphTypeParentAndNameContext;
	}
	public graphTypeSource(): GraphTypeSourceContext {
		return this.getTypedRuleContext(GraphTypeSourceContext, 0) as GraphTypeSourceContext;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(GqlParser.REPLACE, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createGraphTypeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateGraphTypeStatment) {
	 		listener.enterCreateGraphTypeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateGraphTypeStatment) {
	 		listener.exitCreateGraphTypeStatment(this);
		}
	}
}


export class GraphTypeSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public copyOfGraphType(): CopyOfGraphTypeContext {
		return this.getTypedRuleContext(CopyOfGraphTypeContext, 0) as CopyOfGraphTypeContext;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public graphTypeLikeGraph(): GraphTypeLikeGraphContext {
		return this.getTypedRuleContext(GraphTypeLikeGraphContext, 0) as GraphTypeLikeGraphContext;
	}
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		return this.getTypedRuleContext(NestedGraphTypeSpecContext, 0) as NestedGraphTypeSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeSource) {
	 		listener.enterGraphTypeSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeSource) {
	 		listener.exitGraphTypeSource(this);
		}
	}
}


export class CopyOfGraphTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COPY(): TerminalNode {
		return this.getToken(GqlParser.COPY, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public graphTypeRef(): GraphTypeRefContext {
		return this.getTypedRuleContext(GraphTypeRefContext, 0) as GraphTypeRefContext;
	}
	public externalObjectRef(): ExternalObjectRefContext {
		return this.getTypedRuleContext(ExternalObjectRefContext, 0) as ExternalObjectRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_copyOfGraphType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCopyOfGraphType) {
	 		listener.enterCopyOfGraphType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCopyOfGraphType) {
	 		listener.exitCopyOfGraphType(this);
		}
	}
}


export class DropGraphTypeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext, 0) as CatalogGraphTypeParentAndNameContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dropGraphTypeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDropGraphTypeStatment) {
	 		listener.enterDropGraphTypeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDropGraphTypeStatment) {
	 		listener.exitDropGraphTypeStatment(this);
		}
	}
}


export class CallCatalogModProcedureStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public callProcedureStatment(): CallProcedureStatmentContext {
		return this.getTypedRuleContext(CallProcedureStatmentContext, 0) as CallProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callCatalogModProcedureStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallCatalogModProcedureStatment) {
	 		listener.enterCallCatalogModProcedureStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallCatalogModProcedureStatment) {
	 		listener.exitCallCatalogModProcedureStatment(this);
		}
	}
}


export class LinearDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearDataModStatment(): FocusedLinearDataModStatmentContext {
		return this.getTypedRuleContext(FocusedLinearDataModStatmentContext, 0) as FocusedLinearDataModStatmentContext;
	}
	public ambientLinearDataModStatment(): AmbientLinearDataModStatmentContext {
		return this.getTypedRuleContext(AmbientLinearDataModStatmentContext, 0) as AmbientLinearDataModStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_linearDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLinearDataModStatment) {
	 		listener.enterLinearDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLinearDataModStatment) {
	 		listener.exitLinearDataModStatment(this);
		}
	}
}


export class FocusedLinearDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearDataModStatmentBody(): FocusedLinearDataModStatmentBodyContext {
		return this.getTypedRuleContext(FocusedLinearDataModStatmentBodyContext, 0) as FocusedLinearDataModStatmentBodyContext;
	}
	public focusedNestedDataModProcedureSpec(): FocusedNestedDataModProcedureSpecContext {
		return this.getTypedRuleContext(FocusedNestedDataModProcedureSpecContext, 0) as FocusedNestedDataModProcedureSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearDataModStatment) {
	 		listener.enterFocusedLinearDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearDataModStatment) {
	 		listener.exitFocusedLinearDataModStatment(this);
		}
	}
}


export class FocusedLinearDataModStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public simpleLinearDataAccessingStatment(): SimpleLinearDataAccessingStatmentContext {
		return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext, 0) as SimpleLinearDataAccessingStatmentContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearDataModStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearDataModStatmentBody) {
	 		listener.enterFocusedLinearDataModStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearDataModStatmentBody) {
	 		listener.exitFocusedLinearDataModStatmentBody(this);
		}
	}
}


export class FocusedNestedDataModProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public nestedDataModProcedureSpec(): NestedDataModProcedureSpecContext {
		return this.getTypedRuleContext(NestedDataModProcedureSpecContext, 0) as NestedDataModProcedureSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedNestedDataModProcedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedNestedDataModProcedureSpec) {
	 		listener.enterFocusedNestedDataModProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedNestedDataModProcedureSpec) {
	 		listener.exitFocusedNestedDataModProcedureSpec(this);
		}
	}
}


export class AmbientLinearDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ambientLinearDataModStatmentBody(): AmbientLinearDataModStatmentBodyContext {
		return this.getTypedRuleContext(AmbientLinearDataModStatmentBodyContext, 0) as AmbientLinearDataModStatmentBodyContext;
	}
	public nestedDataModProcedureSpec(): NestedDataModProcedureSpecContext {
		return this.getTypedRuleContext(NestedDataModProcedureSpecContext, 0) as NestedDataModProcedureSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ambientLinearDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAmbientLinearDataModStatment) {
	 		listener.enterAmbientLinearDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAmbientLinearDataModStatment) {
	 		listener.exitAmbientLinearDataModStatment(this);
		}
	}
}


export class AmbientLinearDataModStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleLinearDataAccessingStatment(): SimpleLinearDataAccessingStatmentContext {
		return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext, 0) as SimpleLinearDataAccessingStatmentContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ambientLinearDataModStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAmbientLinearDataModStatmentBody) {
	 		listener.enterAmbientLinearDataModStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAmbientLinearDataModStatmentBody) {
	 		listener.exitAmbientLinearDataModStatmentBody(this);
		}
	}
}


export class SimpleLinearDataAccessingStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleDataAccessingStatment_list(): SimpleDataAccessingStatmentContext[] {
		return this.getTypedRuleContexts(SimpleDataAccessingStatmentContext) as SimpleDataAccessingStatmentContext[];
	}
	public simpleDataAccessingStatment(i: number): SimpleDataAccessingStatmentContext {
		return this.getTypedRuleContext(SimpleDataAccessingStatmentContext, i) as SimpleDataAccessingStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleLinearDataAccessingStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleLinearDataAccessingStatment) {
	 		listener.enterSimpleLinearDataAccessingStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleLinearDataAccessingStatment) {
	 		listener.exitSimpleLinearDataAccessingStatment(this);
		}
	}
}


export class SimpleDataAccessingStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleQueryStatment(): SimpleQueryStatmentContext {
		return this.getTypedRuleContext(SimpleQueryStatmentContext, 0) as SimpleQueryStatmentContext;
	}
	public simpleDataModStatment(): SimpleDataModStatmentContext {
		return this.getTypedRuleContext(SimpleDataModStatmentContext, 0) as SimpleDataModStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleDataAccessingStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleDataAccessingStatment) {
	 		listener.enterSimpleDataAccessingStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleDataAccessingStatment) {
	 		listener.exitSimpleDataAccessingStatment(this);
		}
	}
}


export class SimpleDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveDataModStatment(): PrimitiveDataModStatmentContext {
		return this.getTypedRuleContext(PrimitiveDataModStatmentContext, 0) as PrimitiveDataModStatmentContext;
	}
	public callDataModProcedureStatment(): CallDataModProcedureStatmentContext {
		return this.getTypedRuleContext(CallDataModProcedureStatmentContext, 0) as CallDataModProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleDataModStatment) {
	 		listener.enterSimpleDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleDataModStatment) {
	 		listener.exitSimpleDataModStatment(this);
		}
	}
}


export class PrimitiveDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertStatment(): InsertStatmentContext {
		return this.getTypedRuleContext(InsertStatmentContext, 0) as InsertStatmentContext;
	}
	public setStatment(): SetStatmentContext {
		return this.getTypedRuleContext(SetStatmentContext, 0) as SetStatmentContext;
	}
	public removeStatment(): RemoveStatmentContext {
		return this.getTypedRuleContext(RemoveStatmentContext, 0) as RemoveStatmentContext;
	}
	public deleteStatment(): DeleteStatmentContext {
		return this.getTypedRuleContext(DeleteStatmentContext, 0) as DeleteStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveDataModStatment) {
	 		listener.enterPrimitiveDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveDataModStatment) {
	 		listener.exitPrimitiveDataModStatment(this);
		}
	}
}


export class InsertStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INSERT(): TerminalNode {
		return this.getToken(GqlParser.INSERT, 0);
	}
	public insertGraphPattern(): InsertGraphPatternContext {
		return this.getTypedRuleContext(InsertGraphPatternContext, 0) as InsertGraphPatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertStatment) {
	 		listener.enterInsertStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertStatment) {
	 		listener.exitInsertStatment(this);
		}
	}
}


export class SetStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET(): TerminalNode {
		return this.getToken(GqlParser.SET, 0);
	}
	public setItemList(): SetItemListContext {
		return this.getTypedRuleContext(SetItemListContext, 0) as SetItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetStatment) {
	 		listener.enterSetStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetStatment) {
	 		listener.exitSetStatment(this);
		}
	}
}


export class SetItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setItem_list(): SetItemContext[] {
		return this.getTypedRuleContexts(SetItemContext) as SetItemContext[];
	}
	public setItem(i: number): SetItemContext {
		return this.getTypedRuleContext(SetItemContext, i) as SetItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetItemList) {
	 		listener.enterSetItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetItemList) {
	 		listener.exitSetItemList(this);
		}
	}
}


export class SetItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setPropertyItem(): SetPropertyItemContext {
		return this.getTypedRuleContext(SetPropertyItemContext, 0) as SetPropertyItemContext;
	}
	public setAllPropertiesItem(): SetAllPropertiesItemContext {
		return this.getTypedRuleContext(SetAllPropertiesItemContext, 0) as SetAllPropertiesItemContext;
	}
	public setLabelItem(): SetLabelItemContext {
		return this.getTypedRuleContext(SetLabelItemContext, 0) as SetLabelItemContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetItem) {
	 		listener.enterSetItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetItem) {
	 		listener.exitSetItem(this);
		}
	}
}


export class SetPropertyItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setPropertyItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetPropertyItem) {
	 		listener.enterSetPropertyItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetPropertyItem) {
	 		listener.exitSetPropertyItem(this);
		}
	}
}


export class SetAllPropertiesItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
		return this.getTypedRuleContext(PropertyKeyValuePairListContext, 0) as PropertyKeyValuePairListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setAllPropertiesItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetAllPropertiesItem) {
	 		listener.enterSetAllPropertiesItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetAllPropertiesItem) {
	 		listener.exitSetAllPropertiesItem(this);
		}
	}
}


export class SetLabelItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setLabelItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetLabelItem) {
	 		listener.enterSetLabelItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetLabelItem) {
	 		listener.exitSetLabelItem(this);
		}
	}
}


export class LabelSetSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelName_list(): LabelNameContext[] {
		return this.getTypedRuleContexts(LabelNameContext) as LabelNameContext[];
	}
	public labelName(i: number): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, i) as LabelNameContext;
	}
	public AMPERSAND_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.AMPERSAND);
	}
	public AMPERSAND(i: number): TerminalNode {
		return this.getToken(GqlParser.AMPERSAND, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelSetSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelSetSpec) {
	 		listener.enterLabelSetSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelSetSpec) {
	 		listener.exitLabelSetSpec(this);
		}
	}
}


export class RemoveStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REMOVE(): TerminalNode {
		return this.getToken(GqlParser.REMOVE, 0);
	}
	public removeItemList(): RemoveItemListContext {
		return this.getTypedRuleContext(RemoveItemListContext, 0) as RemoveItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveStatment) {
	 		listener.enterRemoveStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveStatment) {
	 		listener.exitRemoveStatment(this);
		}
	}
}


export class RemoveItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public removeItem_list(): RemoveItemContext[] {
		return this.getTypedRuleContexts(RemoveItemContext) as RemoveItemContext[];
	}
	public removeItem(i: number): RemoveItemContext {
		return this.getTypedRuleContext(RemoveItemContext, i) as RemoveItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveItemList) {
	 		listener.enterRemoveItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveItemList) {
	 		listener.exitRemoveItemList(this);
		}
	}
}


export class RemoveItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public removePropertyItem(): RemovePropertyItemContext {
		return this.getTypedRuleContext(RemovePropertyItemContext, 0) as RemovePropertyItemContext;
	}
	public removeLabelItem(): RemoveLabelItemContext {
		return this.getTypedRuleContext(RemoveLabelItemContext, 0) as RemoveLabelItemContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveItem) {
	 		listener.enterRemoveItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveItem) {
	 		listener.exitRemoveItem(this);
		}
	}
}


export class RemovePropertyItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removePropertyItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemovePropertyItem) {
	 		listener.enterRemovePropertyItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemovePropertyItem) {
	 		listener.exitRemovePropertyItem(this);
		}
	}
}


export class RemoveLabelItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeLabelItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveLabelItem) {
	 		listener.enterRemoveLabelItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveLabelItem) {
	 		listener.exitRemoveLabelItem(this);
		}
	}
}


export class DeleteStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DELETE(): TerminalNode {
		return this.getToken(GqlParser.DELETE, 0);
	}
	public deleteItemList(): DeleteItemListContext {
		return this.getTypedRuleContext(DeleteItemListContext, 0) as DeleteItemListContext;
	}
	public DETACH(): TerminalNode {
		return this.getToken(GqlParser.DETACH, 0);
	}
	public NODETACH(): TerminalNode {
		return this.getToken(GqlParser.NODETACH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_deleteStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDeleteStatment) {
	 		listener.enterDeleteStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDeleteStatment) {
	 		listener.exitDeleteStatment(this);
		}
	}
}


export class DeleteItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public deleteItem_list(): DeleteItemContext[] {
		return this.getTypedRuleContexts(DeleteItemContext) as DeleteItemContext[];
	}
	public deleteItem(i: number): DeleteItemContext {
		return this.getTypedRuleContext(DeleteItemContext, i) as DeleteItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_deleteItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDeleteItemList) {
	 		listener.enterDeleteItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDeleteItemList) {
	 		listener.exitDeleteItemList(this);
		}
	}
}


export class DeleteItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_deleteItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDeleteItem) {
	 		listener.enterDeleteItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDeleteItem) {
	 		listener.exitDeleteItem(this);
		}
	}
}


export class CallDataModProcedureStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public callProcedureStatment(): CallProcedureStatmentContext {
		return this.getTypedRuleContext(CallProcedureStatmentContext, 0) as CallProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callDataModProcedureStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallDataModProcedureStatment) {
	 		listener.enterCallDataModProcedureStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallDataModProcedureStatment) {
	 		listener.exitCallDataModProcedureStatment(this);
		}
	}
}


export class CompositeQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public compositeQueryExpr(): CompositeQueryExprContext {
		return this.getTypedRuleContext(CompositeQueryExprContext, 0) as CompositeQueryExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_compositeQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCompositeQueryStatment) {
	 		listener.enterCompositeQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCompositeQueryStatment) {
	 		listener.exitCompositeQueryStatment(this);
		}
	}
}


export class CompositeQueryExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public compositeQueryPrimary(): CompositeQueryPrimaryContext {
		return this.getTypedRuleContext(CompositeQueryPrimaryContext, 0) as CompositeQueryPrimaryContext;
	}
	public compositeQueryExpr(): CompositeQueryExprContext {
		return this.getTypedRuleContext(CompositeQueryExprContext, 0) as CompositeQueryExprContext;
	}
	public queryConjunction(): QueryConjunctionContext {
		return this.getTypedRuleContext(QueryConjunctionContext, 0) as QueryConjunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_compositeQueryExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCompositeQueryExpr) {
	 		listener.enterCompositeQueryExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCompositeQueryExpr) {
	 		listener.exitCompositeQueryExpr(this);
		}
	}
}


export class QueryConjunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setOperator(): SetOperatorContext {
		return this.getTypedRuleContext(SetOperatorContext, 0) as SetOperatorContext;
	}
	public OTHERWISE(): TerminalNode {
		return this.getToken(GqlParser.OTHERWISE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_queryConjunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterQueryConjunction) {
	 		listener.enterQueryConjunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitQueryConjunction) {
	 		listener.exitQueryConjunction(this);
		}
	}
}


export class SetOperatorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
	public UNION(): TerminalNode {
		return this.getToken(GqlParser.UNION, 0);
	}
	public EXCEPT(): TerminalNode {
		return this.getToken(GqlParser.EXCEPT, 0);
	}
	public INTERSECT(): TerminalNode {
		return this.getToken(GqlParser.INTERSECT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setOperator;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetOperator) {
	 		listener.enterSetOperator(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetOperator) {
	 		listener.exitSetOperator(this);
		}
	}
}


export class CompositeQueryPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public linearQueryStatment(): LinearQueryStatmentContext {
		return this.getTypedRuleContext(LinearQueryStatmentContext, 0) as LinearQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_compositeQueryPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCompositeQueryPrimary) {
	 		listener.enterCompositeQueryPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCompositeQueryPrimary) {
	 		listener.exitCompositeQueryPrimary(this);
		}
	}
}


export class LinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearQueryStatment(): FocusedLinearQueryStatmentContext {
		return this.getTypedRuleContext(FocusedLinearQueryStatmentContext, 0) as FocusedLinearQueryStatmentContext;
	}
	public ambientLinearQueryStatment(): AmbientLinearQueryStatmentContext {
		return this.getTypedRuleContext(AmbientLinearQueryStatmentContext, 0) as AmbientLinearQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_linearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLinearQueryStatment) {
	 		listener.enterLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLinearQueryStatment) {
	 		listener.exitLinearQueryStatment(this);
		}
	}
}


export class FocusedLinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearQueryAndPrimitiveResultStatmentPart(): FocusedLinearQueryAndPrimitiveResultStatmentPartContext {
		return this.getTypedRuleContext(FocusedLinearQueryAndPrimitiveResultStatmentPartContext, 0) as FocusedLinearQueryAndPrimitiveResultStatmentPartContext;
	}
	public focusedLinearQueryStatmentPart_list(): FocusedLinearQueryStatmentPartContext[] {
		return this.getTypedRuleContexts(FocusedLinearQueryStatmentPartContext) as FocusedLinearQueryStatmentPartContext[];
	}
	public focusedLinearQueryStatmentPart(i: number): FocusedLinearQueryStatmentPartContext {
		return this.getTypedRuleContext(FocusedLinearQueryStatmentPartContext, i) as FocusedLinearQueryStatmentPartContext;
	}
	public focusedPrimitiveResultStatment(): FocusedPrimitiveResultStatmentContext {
		return this.getTypedRuleContext(FocusedPrimitiveResultStatmentContext, 0) as FocusedPrimitiveResultStatmentContext;
	}
	public focusedNestedQuerySpec(): FocusedNestedQuerySpecContext {
		return this.getTypedRuleContext(FocusedNestedQuerySpecContext, 0) as FocusedNestedQuerySpecContext;
	}
	public selectStatment(): SelectStatmentContext {
		return this.getTypedRuleContext(SelectStatmentContext, 0) as SelectStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearQueryStatment) {
	 		listener.enterFocusedLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearQueryStatment) {
	 		listener.exitFocusedLinearQueryStatment(this);
		}
	}
}


export class FocusedLinearQueryStatmentPartContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		return this.getTypedRuleContext(SimpleLinearQueryStatmentContext, 0) as SimpleLinearQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearQueryStatmentPart;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearQueryStatmentPart) {
	 		listener.enterFocusedLinearQueryStatmentPart(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearQueryStatmentPart) {
	 		listener.exitFocusedLinearQueryStatmentPart(this);
		}
	}
}


export class FocusedLinearQueryAndPrimitiveResultStatmentPartContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		return this.getTypedRuleContext(SimpleLinearQueryStatmentContext, 0) as SimpleLinearQueryStatmentContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearQueryAndPrimitiveResultStatmentPart) {
	 		listener.enterFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearQueryAndPrimitiveResultStatmentPart) {
	 		listener.exitFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}
}


export class FocusedPrimitiveResultStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedPrimitiveResultStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedPrimitiveResultStatment) {
	 		listener.enterFocusedPrimitiveResultStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedPrimitiveResultStatment) {
	 		listener.exitFocusedPrimitiveResultStatment(this);
		}
	}
}


export class FocusedNestedQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedNestedQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedNestedQuerySpec) {
	 		listener.enterFocusedNestedQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedNestedQuerySpec) {
	 		listener.exitFocusedNestedQuerySpec(this);
		}
	}
}


export class AmbientLinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		return this.getTypedRuleContext(SimpleLinearQueryStatmentContext, 0) as SimpleLinearQueryStatmentContext;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ambientLinearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAmbientLinearQueryStatment) {
	 		listener.enterAmbientLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAmbientLinearQueryStatment) {
	 		listener.exitAmbientLinearQueryStatment(this);
		}
	}
}


export class SimpleLinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleQueryStatment_list(): SimpleQueryStatmentContext[] {
		return this.getTypedRuleContexts(SimpleQueryStatmentContext) as SimpleQueryStatmentContext[];
	}
	public simpleQueryStatment(i: number): SimpleQueryStatmentContext {
		return this.getTypedRuleContext(SimpleQueryStatmentContext, i) as SimpleQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleLinearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleLinearQueryStatment) {
	 		listener.enterSimpleLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleLinearQueryStatment) {
	 		listener.exitSimpleLinearQueryStatment(this);
		}
	}
}


export class SimpleQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveQueryStatment(): PrimitiveQueryStatmentContext {
		return this.getTypedRuleContext(PrimitiveQueryStatmentContext, 0) as PrimitiveQueryStatmentContext;
	}
	public callQueryStatment(): CallQueryStatmentContext {
		return this.getTypedRuleContext(CallQueryStatmentContext, 0) as CallQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleQueryStatment) {
	 		listener.enterSimpleQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleQueryStatment) {
	 		listener.exitSimpleQueryStatment(this);
		}
	}
}


export class PrimitiveQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public matchStatment(): MatchStatmentContext {
		return this.getTypedRuleContext(MatchStatmentContext, 0) as MatchStatmentContext;
	}
	public letStatment(): LetStatmentContext {
		return this.getTypedRuleContext(LetStatmentContext, 0) as LetStatmentContext;
	}
	public forStatment(): ForStatmentContext {
		return this.getTypedRuleContext(ForStatmentContext, 0) as ForStatmentContext;
	}
	public filterStatment(): FilterStatmentContext {
		return this.getTypedRuleContext(FilterStatmentContext, 0) as FilterStatmentContext;
	}
	public orderByAndPageStatment(): OrderByAndPageStatmentContext {
		return this.getTypedRuleContext(OrderByAndPageStatmentContext, 0) as OrderByAndPageStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveQueryStatment) {
	 		listener.enterPrimitiveQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveQueryStatment) {
	 		listener.exitPrimitiveQueryStatment(this);
		}
	}
}


export class MatchStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleMatchStatment(): SimpleMatchStatmentContext {
		return this.getTypedRuleContext(SimpleMatchStatmentContext, 0) as SimpleMatchStatmentContext;
	}
	public optionalMatchStatment(): OptionalMatchStatmentContext {
		return this.getTypedRuleContext(OptionalMatchStatmentContext, 0) as OptionalMatchStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_matchStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMatchStatment) {
	 		listener.enterMatchStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMatchStatment) {
	 		listener.exitMatchStatment(this);
		}
	}
}


export class SimpleMatchStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MATCH(): TerminalNode {
		return this.getToken(GqlParser.MATCH, 0);
	}
	public graphPatternBindingTable(): GraphPatternBindingTableContext {
		return this.getTypedRuleContext(GraphPatternBindingTableContext, 0) as GraphPatternBindingTableContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleMatchStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleMatchStatment) {
	 		listener.enterSimpleMatchStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleMatchStatment) {
	 		listener.exitSimpleMatchStatment(this);
		}
	}
}


export class OptionalMatchStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(GqlParser.OPTIONAL, 0);
	}
	public optionalOperand(): OptionalOperandContext {
		return this.getTypedRuleContext(OptionalOperandContext, 0) as OptionalOperandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optionalMatchStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptionalMatchStatment) {
	 		listener.enterOptionalMatchStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptionalMatchStatment) {
	 		listener.exitOptionalMatchStatment(this);
		}
	}
}


export class OptionalOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleMatchStatment(): SimpleMatchStatmentContext {
		return this.getTypedRuleContext(SimpleMatchStatmentContext, 0) as SimpleMatchStatmentContext;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public matchStatmentBlock(): MatchStatmentBlockContext {
		return this.getTypedRuleContext(MatchStatmentBlockContext, 0) as MatchStatmentBlockContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optionalOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptionalOperand) {
	 		listener.enterOptionalOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptionalOperand) {
	 		listener.exitOptionalOperand(this);
		}
	}
}


export class MatchStatmentBlockContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public matchStatment_list(): MatchStatmentContext[] {
		return this.getTypedRuleContexts(MatchStatmentContext) as MatchStatmentContext[];
	}
	public matchStatment(i: number): MatchStatmentContext {
		return this.getTypedRuleContext(MatchStatmentContext, i) as MatchStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_matchStatmentBlock;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMatchStatmentBlock) {
	 		listener.enterMatchStatmentBlock(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMatchStatmentBlock) {
	 		listener.exitMatchStatmentBlock(this);
		}
	}
}


export class CallQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public callProcedureStatment(): CallProcedureStatmentContext {
		return this.getTypedRuleContext(CallProcedureStatmentContext, 0) as CallProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallQueryStatment) {
	 		listener.enterCallQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallQueryStatment) {
	 		listener.exitCallQueryStatment(this);
		}
	}
}


export class FilterStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FILTER(): TerminalNode {
		return this.getToken(GqlParser.FILTER, 0);
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_filterStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFilterStatment) {
	 		listener.enterFilterStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFilterStatment) {
	 		listener.exitFilterStatment(this);
		}
	}
}


export class LetStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LET(): TerminalNode {
		return this.getToken(GqlParser.LET, 0);
	}
	public letVarDefList(): LetVarDefListContext {
		return this.getTypedRuleContext(LetVarDefListContext, 0) as LetVarDefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetStatment) {
	 		listener.enterLetStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetStatment) {
	 		listener.exitLetStatment(this);
		}
	}
}


export class LetVarDefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public letVarDef_list(): LetVarDefContext[] {
		return this.getTypedRuleContexts(LetVarDefContext) as LetVarDefContext[];
	}
	public letVarDef(i: number): LetVarDefContext {
		return this.getTypedRuleContext(LetVarDefContext, i) as LetVarDefContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letVarDefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetVarDefList) {
	 		listener.enterLetVarDefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetVarDefList) {
	 		listener.exitLetVarDefList(this);
		}
	}
}


export class LetVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueVarDef(): ValueVarDefContext {
		return this.getTypedRuleContext(ValueVarDefContext, 0) as ValueVarDefContext;
	}
	public valueVar(): ValueVarContext {
		return this.getTypedRuleContext(ValueVarContext, 0) as ValueVarContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetVarDef) {
	 		listener.enterLetVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetVarDef) {
	 		listener.exitLetVarDef(this);
		}
	}
}


export class ForStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR(): TerminalNode {
		return this.getToken(GqlParser.FOR, 0);
	}
	public forItem(): ForItemContext {
		return this.getTypedRuleContext(ForItemContext, 0) as ForItemContext;
	}
	public forOrdinalityOrOffset(): ForOrdinalityOrOffsetContext {
		return this.getTypedRuleContext(ForOrdinalityOrOffsetContext, 0) as ForOrdinalityOrOffsetContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForStatment) {
	 		listener.enterForStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForStatment) {
	 		listener.exitForStatment(this);
		}
	}
}


export class ForItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public forItemAlias(): ForItemAliasContext {
		return this.getTypedRuleContext(ForItemAliasContext, 0) as ForItemAliasContext;
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForItem) {
	 		listener.enterForItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForItem) {
	 		listener.exitForItem(this);
		}
	}
}


export class ForItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public IN(): TerminalNode {
		return this.getToken(GqlParser.IN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForItemAlias) {
	 		listener.enterForItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForItemAlias) {
	 		listener.exitForItemAlias(this);
		}
	}
}


export class ForOrdinalityOrOffsetContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public ORDINALITY(): TerminalNode {
		return this.getToken(GqlParser.ORDINALITY, 0);
	}
	public OFFSET(): TerminalNode {
		return this.getToken(GqlParser.OFFSET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forOrdinalityOrOffset;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForOrdinalityOrOffset) {
	 		listener.enterForOrdinalityOrOffset(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForOrdinalityOrOffset) {
	 		listener.exitForOrdinalityOrOffset(this);
		}
	}
}


export class OrderByAndPageStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public offsetClause(): OffsetClauseContext {
		return this.getTypedRuleContext(OffsetClauseContext, 0) as OffsetClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_orderByAndPageStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOrderByAndPageStatment) {
	 		listener.enterOrderByAndPageStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOrderByAndPageStatment) {
	 		listener.exitOrderByAndPageStatment(this);
		}
	}
}


export class PrimitiveResultStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public returnStatment(): ReturnStatmentContext {
		return this.getTypedRuleContext(ReturnStatmentContext, 0) as ReturnStatmentContext;
	}
	public orderByAndPageStatment(): OrderByAndPageStatmentContext {
		return this.getTypedRuleContext(OrderByAndPageStatmentContext, 0) as OrderByAndPageStatmentContext;
	}
	public FINISH(): TerminalNode {
		return this.getToken(GqlParser.FINISH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveResultStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveResultStatment) {
	 		listener.enterPrimitiveResultStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveResultStatment) {
	 		listener.exitPrimitiveResultStatment(this);
		}
	}
}


export class ReturnStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RETURN(): TerminalNode {
		return this.getToken(GqlParser.RETURN, 0);
	}
	public returnStatmentBody(): ReturnStatmentBodyContext {
		return this.getTypedRuleContext(ReturnStatmentBodyContext, 0) as ReturnStatmentBodyContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnStatment) {
	 		listener.enterReturnStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnStatment) {
	 		listener.exitReturnStatment(this);
		}
	}
}


export class ReturnStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public returnItemList(): ReturnItemListContext {
		return this.getTypedRuleContext(ReturnItemListContext, 0) as ReturnItemListContext;
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public NO(): TerminalNode {
		return this.getToken(GqlParser.NO, 0);
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnStatmentBody) {
	 		listener.enterReturnStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnStatmentBody) {
	 		listener.exitReturnStatmentBody(this);
		}
	}
}


export class ReturnItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public returnItem_list(): ReturnItemContext[] {
		return this.getTypedRuleContexts(ReturnItemContext) as ReturnItemContext[];
	}
	public returnItem(i: number): ReturnItemContext {
		return this.getTypedRuleContext(ReturnItemContext, i) as ReturnItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnItemList) {
	 		listener.enterReturnItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnItemList) {
	 		listener.exitReturnItemList(this);
		}
	}
}


export class ReturnItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public aggregatingValueExpr(): AggregatingValueExprContext {
		return this.getTypedRuleContext(AggregatingValueExprContext, 0) as AggregatingValueExprContext;
	}
	public returnItemAlias(): ReturnItemAliasContext {
		return this.getTypedRuleContext(ReturnItemAliasContext, 0) as ReturnItemAliasContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnItem) {
	 		listener.enterReturnItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnItem) {
	 		listener.exitReturnItem(this);
		}
	}
}


export class ReturnItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnItemAlias) {
	 		listener.enterReturnItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnItemAlias) {
	 		listener.exitReturnItemAlias(this);
		}
	}
}


export class SelectStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SELECT(): TerminalNode {
		return this.getToken(GqlParser.SELECT, 0);
	}
	public selectItemList(): SelectItemListContext {
		return this.getTypedRuleContext(SelectItemListContext, 0) as SelectItemListContext;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
	public selectStatmentBody(): SelectStatmentBodyContext {
		return this.getTypedRuleContext(SelectStatmentBodyContext, 0) as SelectStatmentBodyContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public havingClause(): HavingClauseContext {
		return this.getTypedRuleContext(HavingClauseContext, 0) as HavingClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public offsetClause(): OffsetClauseContext {
		return this.getTypedRuleContext(OffsetClauseContext, 0) as OffsetClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectStatment) {
	 		listener.enterSelectStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectStatment) {
	 		listener.exitSelectStatment(this);
		}
	}
}


export class SelectItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectItem_list(): SelectItemContext[] {
		return this.getTypedRuleContexts(SelectItemContext) as SelectItemContext[];
	}
	public selectItem(i: number): SelectItemContext {
		return this.getTypedRuleContext(SelectItemContext, i) as SelectItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectItemList) {
	 		listener.enterSelectItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectItemList) {
	 		listener.exitSelectItemList(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public aggregatingValueExpr(): AggregatingValueExprContext {
		return this.getTypedRuleContext(AggregatingValueExprContext, 0) as AggregatingValueExprContext;
	}
	public selectItemAlias(): SelectItemAliasContext {
		return this.getTypedRuleContext(SelectItemAliasContext, 0) as SelectItemAliasContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectItem) {
	 		listener.enterSelectItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectItem) {
	 		listener.exitSelectItem(this);
		}
	}
}


export class SelectItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectItemAlias) {
	 		listener.enterSelectItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectItemAlias) {
	 		listener.exitSelectItemAlias(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HAVING(): TerminalNode {
		return this.getToken(GqlParser.HAVING, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_havingClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterHavingClause) {
	 		listener.enterHavingClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitHavingClause) {
	 		listener.exitHavingClause(this);
		}
	}
}


export class SelectStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public selectGraphMatchList(): SelectGraphMatchListContext {
		return this.getTypedRuleContext(SelectGraphMatchListContext, 0) as SelectGraphMatchListContext;
	}
	public selectQuerySpec(): SelectQuerySpecContext {
		return this.getTypedRuleContext(SelectQuerySpecContext, 0) as SelectQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectStatmentBody) {
	 		listener.enterSelectStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectStatmentBody) {
	 		listener.exitSelectStatmentBody(this);
		}
	}
}


export class SelectGraphMatchListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectGraphMatch_list(): SelectGraphMatchContext[] {
		return this.getTypedRuleContexts(SelectGraphMatchContext) as SelectGraphMatchContext[];
	}
	public selectGraphMatch(i: number): SelectGraphMatchContext {
		return this.getTypedRuleContext(SelectGraphMatchContext, i) as SelectGraphMatchContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectGraphMatchList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectGraphMatchList) {
	 		listener.enterSelectGraphMatchList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectGraphMatchList) {
	 		listener.exitSelectGraphMatchList(this);
		}
	}
}


export class SelectGraphMatchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
	public matchStatment(): MatchStatmentContext {
		return this.getTypedRuleContext(MatchStatmentContext, 0) as MatchStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectGraphMatch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectGraphMatch) {
	 		listener.enterSelectGraphMatch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectGraphMatch) {
	 		listener.exitSelectGraphMatch(this);
		}
	}
}


export class SelectQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectQuerySpec) {
	 		listener.enterSelectQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectQuerySpec) {
	 		listener.exitSelectQuerySpec(this);
		}
	}
}


export class CallProcedureStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CALL(): TerminalNode {
		return this.getToken(GqlParser.CALL, 0);
	}
	public procedureCall(): ProcedureCallContext {
		return this.getTypedRuleContext(ProcedureCallContext, 0) as ProcedureCallContext;
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(GqlParser.OPTIONAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callProcedureStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallProcedureStatment) {
	 		listener.enterCallProcedureStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallProcedureStatment) {
	 		listener.exitCallProcedureStatment(this);
		}
	}
}


export class ProcedureCallContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public inlineProcedureCall(): InlineProcedureCallContext {
		return this.getTypedRuleContext(InlineProcedureCallContext, 0) as InlineProcedureCallContext;
	}
	public namedProcedureCall(): NamedProcedureCallContext {
		return this.getTypedRuleContext(NamedProcedureCallContext, 0) as NamedProcedureCallContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureCall;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureCall) {
	 		listener.enterProcedureCall(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureCall) {
	 		listener.exitProcedureCall(this);
		}
	}
}


export class InlineProcedureCallContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedProcedureSpec(): NestedProcedureSpecContext {
		return this.getTypedRuleContext(NestedProcedureSpecContext, 0) as NestedProcedureSpecContext;
	}
	public varScopeClause(): VarScopeClauseContext {
		return this.getTypedRuleContext(VarScopeClauseContext, 0) as VarScopeClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_inlineProcedureCall;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInlineProcedureCall) {
	 		listener.enterInlineProcedureCall(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInlineProcedureCall) {
	 		listener.exitInlineProcedureCall(this);
		}
	}
}


export class VarScopeClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public bindingVarRefList(): BindingVarRefListContext {
		return this.getTypedRuleContext(BindingVarRefListContext, 0) as BindingVarRefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_varScopeClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterVarScopeClause) {
	 		listener.enterVarScopeClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitVarScopeClause) {
	 		listener.exitVarScopeClause(this);
		}
	}
}


export class BindingVarRefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef_list(): BindingVarRefContext[] {
		return this.getTypedRuleContexts(BindingVarRefContext) as BindingVarRefContext[];
	}
	public bindingVarRef(i: number): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, i) as BindingVarRefContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarRefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarRefList) {
	 		listener.enterBindingVarRefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarRefList) {
	 		listener.exitBindingVarRefList(this);
		}
	}
}


export class NamedProcedureCallContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureRef(): ProcedureRefContext {
		return this.getTypedRuleContext(ProcedureRefContext, 0) as ProcedureRefContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public procedureArgList(): ProcedureArgListContext {
		return this.getTypedRuleContext(ProcedureArgListContext, 0) as ProcedureArgListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_namedProcedureCall;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNamedProcedureCall) {
	 		listener.enterNamedProcedureCall(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNamedProcedureCall) {
	 		listener.exitNamedProcedureCall(this);
		}
	}
}


export class ProcedureArgListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureArg_list(): ProcedureArgContext[] {
		return this.getTypedRuleContexts(ProcedureArgContext) as ProcedureArgContext[];
	}
	public procedureArg(i: number): ProcedureArgContext {
		return this.getTypedRuleContext(ProcedureArgContext, i) as ProcedureArgContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureArgList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureArgList) {
	 		listener.enterProcedureArgList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureArgList) {
	 		listener.exitProcedureArgList(this);
		}
	}
}


export class ProcedureArgContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureArg;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureArg) {
	 		listener.enterProcedureArg(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureArg) {
	 		listener.exitProcedureArg(this);
		}
	}
}


export class UseGraphClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public USE(): TerminalNode {
		return this.getToken(GqlParser.USE, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_useGraphClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUseGraphClause) {
	 		listener.enterUseGraphClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUseGraphClause) {
	 		listener.exitUseGraphClause(this);
		}
	}
}


export class AtSchemaClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AT(): TerminalNode {
		return this.getToken(GqlParser.AT, 0);
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_atSchemaClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAtSchemaClause) {
	 		listener.enterAtSchemaClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAtSchemaClause) {
	 		listener.exitAtSchemaClause(this);
		}
	}
}


export class BindingVarRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarRef) {
	 		listener.enterBindingVarRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarRef) {
	 		listener.exitBindingVarRef(this);
		}
	}
}


export class ElementVarRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementVarRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementVarRef) {
	 		listener.enterElementVarRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementVarRef) {
	 		listener.exitElementVarRef(this);
		}
	}
}


export class PathVarRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathVarRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathVarRef) {
	 		listener.enterPathVarRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathVarRef) {
	 		listener.exitPathVarRef(this);
		}
	}
}


export class ParameterContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parameter;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParameter) {
	 		listener.enterParameter(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParameter) {
	 		listener.exitParameter(this);
		}
	}
}


export class GraphPatternBindingTableContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphPattern(): GraphPatternContext {
		return this.getTypedRuleContext(GraphPatternContext, 0) as GraphPatternContext;
	}
	public graphPatternYieldClause(): GraphPatternYieldClauseContext {
		return this.getTypedRuleContext(GraphPatternYieldClauseContext, 0) as GraphPatternYieldClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternBindingTable;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternBindingTable) {
	 		listener.enterGraphPatternBindingTable(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternBindingTable) {
	 		listener.exitGraphPatternBindingTable(this);
		}
	}
}


export class GraphPatternYieldClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public YIELD(): TerminalNode {
		return this.getToken(GqlParser.YIELD, 0);
	}
	public graphPatternYieldItemList(): GraphPatternYieldItemListContext {
		return this.getTypedRuleContext(GraphPatternYieldItemListContext, 0) as GraphPatternYieldItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternYieldClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternYieldClause) {
	 		listener.enterGraphPatternYieldClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternYieldClause) {
	 		listener.exitGraphPatternYieldClause(this);
		}
	}
}


export class GraphPatternYieldItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphPatternYieldItem_list(): GraphPatternYieldItemContext[] {
		return this.getTypedRuleContexts(GraphPatternYieldItemContext) as GraphPatternYieldItemContext[];
	}
	public graphPatternYieldItem(i: number): GraphPatternYieldItemContext {
		return this.getTypedRuleContext(GraphPatternYieldItemContext, i) as GraphPatternYieldItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternYieldItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternYieldItemList) {
	 		listener.enterGraphPatternYieldItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternYieldItemList) {
	 		listener.exitGraphPatternYieldItemList(this);
		}
	}
}


export class GraphPatternYieldItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public pathVarRef(): PathVarRefContext {
		return this.getTypedRuleContext(PathVarRefContext, 0) as PathVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternYieldItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternYieldItem) {
	 		listener.enterGraphPatternYieldItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternYieldItem) {
	 		listener.exitGraphPatternYieldItem(this);
		}
	}
}


export class GraphPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPatternList(): PathPatternListContext {
		return this.getTypedRuleContext(PathPatternListContext, 0) as PathPatternListContext;
	}
	public matchMode(): MatchModeContext {
		return this.getTypedRuleContext(MatchModeContext, 0) as MatchModeContext;
	}
	public keepClause(): KeepClauseContext {
		return this.getTypedRuleContext(KeepClauseContext, 0) as KeepClauseContext;
	}
	public graphPatternWhereClause(): GraphPatternWhereClauseContext {
		return this.getTypedRuleContext(GraphPatternWhereClauseContext, 0) as GraphPatternWhereClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPattern) {
	 		listener.enterGraphPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPattern) {
	 		listener.exitGraphPattern(this);
		}
	}
}


export class MatchModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public repeatableElementsMatchMode(): RepeatableElementsMatchModeContext {
		return this.getTypedRuleContext(RepeatableElementsMatchModeContext, 0) as RepeatableElementsMatchModeContext;
	}
	public differentEdgesMatchMode(): DifferentEdgesMatchModeContext {
		return this.getTypedRuleContext(DifferentEdgesMatchModeContext, 0) as DifferentEdgesMatchModeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_matchMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMatchMode) {
	 		listener.enterMatchMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMatchMode) {
	 		listener.exitMatchMode(this);
		}
	}
}


export class RepeatableElementsMatchModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPEATABLE(): TerminalNode {
		return this.getToken(GqlParser.REPEATABLE, 0);
	}
	public elementBindingsOrElements(): ElementBindingsOrElementsContext {
		return this.getTypedRuleContext(ElementBindingsOrElementsContext, 0) as ElementBindingsOrElementsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_repeatableElementsMatchMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRepeatableElementsMatchMode) {
	 		listener.enterRepeatableElementsMatchMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRepeatableElementsMatchMode) {
	 		listener.exitRepeatableElementsMatchMode(this);
		}
	}
}


export class DifferentEdgesMatchModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.DIFFERENT, 0);
	}
	public edgeBindingsOrEdges(): EdgeBindingsOrEdgesContext {
		return this.getTypedRuleContext(EdgeBindingsOrEdgesContext, 0) as EdgeBindingsOrEdgesContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_differentEdgesMatchMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDifferentEdgesMatchMode) {
	 		listener.enterDifferentEdgesMatchMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDifferentEdgesMatchMode) {
	 		listener.exitDifferentEdgesMatchMode(this);
		}
	}
}


export class ElementBindingsOrElementsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELEMENT(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT, 0);
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
	public ELEMENTS(): TerminalNode {
		return this.getToken(GqlParser.ELEMENTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementBindingsOrElements;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementBindingsOrElements) {
	 		listener.enterElementBindingsOrElements(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementBindingsOrElements) {
	 		listener.exitElementBindingsOrElements(this);
		}
	}
}


export class EdgeBindingsOrEdgesContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeSynonym(): EdgeSynonymContext {
		return this.getTypedRuleContext(EdgeSynonymContext, 0) as EdgeSynonymContext;
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
	public edgesSynonym(): EdgesSynonymContext {
		return this.getTypedRuleContext(EdgesSynonymContext, 0) as EdgesSynonymContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeBindingsOrEdges;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeBindingsOrEdges) {
	 		listener.enterEdgeBindingsOrEdges(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeBindingsOrEdges) {
	 		listener.exitEdgeBindingsOrEdges(this);
		}
	}
}


export class PathPatternListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPattern_list(): PathPatternContext[] {
		return this.getTypedRuleContexts(PathPatternContext) as PathPatternContext[];
	}
	public pathPattern(i: number): PathPatternContext {
		return this.getTypedRuleContext(PathPatternContext, i) as PathPatternContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternList) {
	 		listener.enterPathPatternList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternList) {
	 		listener.exitPathPatternList(this);
		}
	}
}


export class PathPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathVarDeclaration(): PathVarDeclarationContext {
		return this.getTypedRuleContext(PathVarDeclarationContext, 0) as PathVarDeclarationContext;
	}
	public pathPatternPrefix(): PathPatternPrefixContext {
		return this.getTypedRuleContext(PathPatternPrefixContext, 0) as PathPatternPrefixContext;
	}
	public pathPatternExpr_list(): PathPatternExprContext[] {
		return this.getTypedRuleContexts(PathPatternExprContext) as PathPatternExprContext[];
	}
	public pathPatternExpr(i: number): PathPatternExprContext {
		return this.getTypedRuleContext(PathPatternExprContext, i) as PathPatternExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPattern) {
	 		listener.enterPathPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPattern) {
	 		listener.exitPathPattern(this);
		}
	}
}


export class PathVarDeclarationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathVar(): PathVarContext {
		return this.getTypedRuleContext(PathVarContext, 0) as PathVarContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathVarDeclaration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathVarDeclaration) {
	 		listener.enterPathVarDeclaration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathVarDeclaration) {
	 		listener.exitPathVarDeclaration(this);
		}
	}
}


export class KeepClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KEEP(): TerminalNode {
		return this.getToken(GqlParser.KEEP, 0);
	}
	public pathPatternPrefix(): PathPatternPrefixContext {
		return this.getTypedRuleContext(PathPatternPrefixContext, 0) as PathPatternPrefixContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_keepClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterKeepClause) {
	 		listener.enterKeepClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitKeepClause) {
	 		listener.exitKeepClause(this);
		}
	}
}


export class GraphPatternWhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternWhereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternWhereClause) {
	 		listener.enterGraphPatternWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternWhereClause) {
	 		listener.exitGraphPatternWhereClause(this);
		}
	}
}


export class PathPatternPrefixContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathModePrefix(): PathModePrefixContext {
		return this.getTypedRuleContext(PathModePrefixContext, 0) as PathModePrefixContext;
	}
	public pathSearchPrefix(): PathSearchPrefixContext {
		return this.getTypedRuleContext(PathSearchPrefixContext, 0) as PathSearchPrefixContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternPrefix;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternPrefix) {
	 		listener.enterPathPatternPrefix(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternPrefix) {
	 		listener.exitPathPatternPrefix(this);
		}
	}
}


export class PathModePrefixContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathModePrefix;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathModePrefix) {
	 		listener.enterPathModePrefix(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathModePrefix) {
	 		listener.exitPathModePrefix(this);
		}
	}
}


export class PathModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WALK(): TerminalNode {
		return this.getToken(GqlParser.WALK, 0);
	}
	public TRAIL(): TerminalNode {
		return this.getToken(GqlParser.TRAIL, 0);
	}
	public SIMPLE(): TerminalNode {
		return this.getToken(GqlParser.SIMPLE, 0);
	}
	public ACYCLIC(): TerminalNode {
		return this.getToken(GqlParser.ACYCLIC, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathMode) {
	 		listener.enterPathMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathMode) {
	 		listener.exitPathMode(this);
		}
	}
}


export class PathSearchPrefixContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public allPathSearch(): AllPathSearchContext {
		return this.getTypedRuleContext(AllPathSearchContext, 0) as AllPathSearchContext;
	}
	public anyPathSearch(): AnyPathSearchContext {
		return this.getTypedRuleContext(AnyPathSearchContext, 0) as AnyPathSearchContext;
	}
	public shortestPathSearch(): ShortestPathSearchContext {
		return this.getTypedRuleContext(ShortestPathSearchContext, 0) as ShortestPathSearchContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathSearchPrefix;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathSearchPrefix) {
	 		listener.enterPathSearchPrefix(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathSearchPrefix) {
	 		listener.exitPathSearchPrefix(this);
		}
	}
}


export class AllPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_allPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAllPathSearch) {
	 		listener.enterAllPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAllPathSearch) {
	 		listener.exitAllPathSearch(this);
		}
	}
}


export class PathOrPathsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
	public PATHS(): TerminalNode {
		return this.getToken(GqlParser.PATHS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathOrPaths;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathOrPaths) {
	 		listener.enterPathOrPaths(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathOrPaths) {
	 		listener.exitPathOrPaths(this);
		}
	}
}


export class AnyPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public numberOfPaths(): NumberOfPathsContext {
		return this.getTypedRuleContext(NumberOfPathsContext, 0) as NumberOfPathsContext;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_anyPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAnyPathSearch) {
	 		listener.enterAnyPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAnyPathSearch) {
	 		listener.exitAnyPathSearch(this);
		}
	}
}


export class NumberOfPathsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numberOfPaths;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumberOfPaths) {
	 		listener.enterNumberOfPaths(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumberOfPaths) {
	 		listener.exitNumberOfPaths(this);
		}
	}
}


export class ShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public allShortestPathSearch(): AllShortestPathSearchContext {
		return this.getTypedRuleContext(AllShortestPathSearchContext, 0) as AllShortestPathSearchContext;
	}
	public anyShortestPathSearch(): AnyShortestPathSearchContext {
		return this.getTypedRuleContext(AnyShortestPathSearchContext, 0) as AnyShortestPathSearchContext;
	}
	public countedShortestPathSearch(): CountedShortestPathSearchContext {
		return this.getTypedRuleContext(CountedShortestPathSearchContext, 0) as CountedShortestPathSearchContext;
	}
	public countedShortestGroupSearch(): CountedShortestGroupSearchContext {
		return this.getTypedRuleContext(CountedShortestGroupSearchContext, 0) as CountedShortestGroupSearchContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_shortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterShortestPathSearch) {
	 		listener.enterShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitShortestPathSearch) {
	 		listener.exitShortestPathSearch(this);
		}
	}
}


export class AllShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_allShortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAllShortestPathSearch) {
	 		listener.enterAllShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAllShortestPathSearch) {
	 		listener.exitAllShortestPathSearch(this);
		}
	}
}


export class AnyShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_anyShortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAnyShortestPathSearch) {
	 		listener.enterAnyShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAnyShortestPathSearch) {
	 		listener.exitAnyShortestPathSearch(this);
		}
	}
}


export class CountedShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public numberOfPaths(): NumberOfPathsContext {
		return this.getTypedRuleContext(NumberOfPathsContext, 0) as NumberOfPathsContext;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_countedShortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCountedShortestPathSearch) {
	 		listener.enterCountedShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCountedShortestPathSearch) {
	 		listener.exitCountedShortestPathSearch(this);
		}
	}
}


export class CountedShortestGroupSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public numberOfGroups(): NumberOfGroupsContext {
		return this.getTypedRuleContext(NumberOfGroupsContext, 0) as NumberOfGroupsContext;
	}
	public groupOrGroups(): GroupOrGroupsContext {
		return this.getTypedRuleContext(GroupOrGroupsContext, 0) as GroupOrGroupsContext;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_countedShortestGroupSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCountedShortestGroupSearch) {
	 		listener.enterCountedShortestGroupSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCountedShortestGroupSearch) {
	 		listener.exitCountedShortestGroupSearch(this);
		}
	}
}


export class GroupOrGroupsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
	public GROUPS(): TerminalNode {
		return this.getToken(GqlParser.GROUPS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupOrGroups;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupOrGroups) {
	 		listener.enterGroupOrGroups(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupOrGroups) {
	 		listener.exitGroupOrGroups(this);
		}
	}
}


export class NumberOfGroupsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numberOfGroups;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumberOfGroups) {
	 		listener.enterNumberOfGroups(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumberOfGroups) {
	 		listener.exitNumberOfGroups(this);
		}
	}
}


export class PathPatternExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathTerm(): PathTermContext {
		return this.getTypedRuleContext(PathTermContext, 0) as PathTermContext;
	}
	public pathMultisetAlternation(): PathMultisetAlternationContext {
		return this.getTypedRuleContext(PathMultisetAlternationContext, 0) as PathMultisetAlternationContext;
	}
	public pathPatternUnion(): PathPatternUnionContext {
		return this.getTypedRuleContext(PathPatternUnionContext, 0) as PathPatternUnionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternExpr) {
	 		listener.enterPathPatternExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternExpr) {
	 		listener.exitPathPatternExpr(this);
		}
	}
}


export class PathMultisetAlternationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathTerm_list(): PathTermContext[] {
		return this.getTypedRuleContexts(PathTermContext) as PathTermContext[];
	}
	public pathTerm(i: number): PathTermContext {
		return this.getTypedRuleContext(PathTermContext, i) as PathTermContext;
	}
	public MULTISET_ALTERNATION_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.MULTISET_ALTERNATION);
	}
	public MULTISET_ALTERNATION(i: number): TerminalNode {
		return this.getToken(GqlParser.MULTISET_ALTERNATION, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathMultisetAlternation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathMultisetAlternation) {
	 		listener.enterPathMultisetAlternation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathMultisetAlternation) {
	 		listener.exitPathMultisetAlternation(this);
		}
	}
}


export class PathPatternUnionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathTerm_list(): PathTermContext[] {
		return this.getTypedRuleContexts(PathTermContext) as PathTermContext[];
	}
	public pathTerm(i: number): PathTermContext {
		return this.getTypedRuleContext(PathTermContext, i) as PathTermContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternUnion;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternUnion) {
	 		listener.enterPathPatternUnion(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternUnion) {
	 		listener.exitPathPatternUnion(this);
		}
	}
}


export class PathTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathFactor_list(): PathFactorContext[] {
		return this.getTypedRuleContexts(PathFactorContext) as PathFactorContext[];
	}
	public pathFactor(i: number): PathFactorContext {
		return this.getTypedRuleContext(PathFactorContext, i) as PathFactorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathTerm) {
	 		listener.enterPathTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathTerm) {
	 		listener.exitPathTerm(this);
		}
	}
}


export class PathFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPrimary(): PathPrimaryContext {
		return this.getTypedRuleContext(PathPrimaryContext, 0) as PathPrimaryContext;
	}
	public quantifiedPathPrimary(): QuantifiedPathPrimaryContext {
		return this.getTypedRuleContext(QuantifiedPathPrimaryContext, 0) as QuantifiedPathPrimaryContext;
	}
	public questionedPathPrimary(): QuestionedPathPrimaryContext {
		return this.getTypedRuleContext(QuestionedPathPrimaryContext, 0) as QuestionedPathPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathFactor) {
	 		listener.enterPathFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathFactor) {
	 		listener.exitPathFactor(this);
		}
	}
}


export class QuantifiedPathPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPrimary(): PathPrimaryContext {
		return this.getTypedRuleContext(PathPrimaryContext, 0) as PathPrimaryContext;
	}
	public graphPatternQuantifier(): GraphPatternQuantifierContext {
		return this.getTypedRuleContext(GraphPatternQuantifierContext, 0) as GraphPatternQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_quantifiedPathPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterQuantifiedPathPrimary) {
	 		listener.enterQuantifiedPathPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitQuantifiedPathPrimary) {
	 		listener.exitQuantifiedPathPrimary(this);
		}
	}
}


export class QuestionedPathPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPrimary(): PathPrimaryContext {
		return this.getTypedRuleContext(PathPrimaryContext, 0) as PathPrimaryContext;
	}
	public QUESTION_MARK(): TerminalNode {
		return this.getToken(GqlParser.QUESTION_MARK, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_questionedPathPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterQuestionedPathPrimary) {
	 		listener.enterQuestionedPathPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitQuestionedPathPrimary) {
	 		listener.exitQuestionedPathPrimary(this);
		}
	}
}


export class PathPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementPattern(): ElementPatternContext {
		return this.getTypedRuleContext(ElementPatternContext, 0) as ElementPatternContext;
	}
	public parenthesizedPathPatternExpr(): ParenthesizedPathPatternExprContext {
		return this.getTypedRuleContext(ParenthesizedPathPatternExprContext, 0) as ParenthesizedPathPatternExprContext;
	}
	public simplifiedPathPatternExpr(): SimplifiedPathPatternExprContext {
		return this.getTypedRuleContext(SimplifiedPathPatternExprContext, 0) as SimplifiedPathPatternExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPrimary) {
	 		listener.enterPathPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPrimary) {
	 		listener.exitPathPrimary(this);
		}
	}
}


export class ElementPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodePattern(): NodePatternContext {
		return this.getTypedRuleContext(NodePatternContext, 0) as NodePatternContext;
	}
	public edgePattern(): EdgePatternContext {
		return this.getTypedRuleContext(EdgePatternContext, 0) as EdgePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPattern) {
	 		listener.enterElementPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPattern) {
	 		listener.exitElementPattern(this);
		}
	}
}


export class NodePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodePattern) {
	 		listener.enterNodePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodePattern) {
	 		listener.exitNodePattern(this);
		}
	}
}


export class ElementPatternFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarDeclaration(): ElementVarDeclarationContext {
		return this.getTypedRuleContext(ElementVarDeclarationContext, 0) as ElementVarDeclarationContext;
	}
	public isLabelExpr(): IsLabelExprContext {
		return this.getTypedRuleContext(IsLabelExprContext, 0) as IsLabelExprContext;
	}
	public elementPatternPredicate(): ElementPatternPredicateContext {
		return this.getTypedRuleContext(ElementPatternPredicateContext, 0) as ElementPatternPredicateContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPatternFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPatternFiller) {
	 		listener.enterElementPatternFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPatternFiller) {
	 		listener.exitElementPatternFiller(this);
		}
	}
}


export class ElementVarDeclarationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVar(): ElementVarContext {
		return this.getTypedRuleContext(ElementVarContext, 0) as ElementVarContext;
	}
	public TEMP(): TerminalNode {
		return this.getToken(GqlParser.TEMP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementVarDeclaration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementVarDeclaration) {
	 		listener.enterElementVarDeclaration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementVarDeclaration) {
	 		listener.exitElementVarDeclaration(this);
		}
	}
}


export class IsLabelExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelExpr(): LabelExprContext {
		return this.getTypedRuleContext(LabelExprContext, 0) as LabelExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_isLabelExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIsLabelExpr) {
	 		listener.enterIsLabelExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIsLabelExpr) {
	 		listener.exitIsLabelExpr(this);
		}
	}
}


export class IsOrColonContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_isOrColon;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIsOrColon) {
	 		listener.enterIsOrColon(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIsOrColon) {
	 		listener.exitIsOrColon(this);
		}
	}
}


export class ElementPatternPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementPatternWhereClause(): ElementPatternWhereClauseContext {
		return this.getTypedRuleContext(ElementPatternWhereClauseContext, 0) as ElementPatternWhereClauseContext;
	}
	public elementPropertySpec(): ElementPropertySpecContext {
		return this.getTypedRuleContext(ElementPropertySpecContext, 0) as ElementPropertySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPatternPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPatternPredicate) {
	 		listener.enterElementPatternPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPatternPredicate) {
	 		listener.exitElementPatternPredicate(this);
		}
	}
}


export class ElementPatternWhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPatternWhereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPatternWhereClause) {
	 		listener.enterElementPatternWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPatternWhereClause) {
	 		listener.exitElementPatternWhereClause(this);
		}
	}
}


export class ElementPropertySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
		return this.getTypedRuleContext(PropertyKeyValuePairListContext, 0) as PropertyKeyValuePairListContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPropertySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPropertySpec) {
	 		listener.enterElementPropertySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPropertySpec) {
	 		listener.exitElementPropertySpec(this);
		}
	}
}


export class PropertyKeyValuePairListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyKeyValuePair_list(): PropertyKeyValuePairContext[] {
		return this.getTypedRuleContexts(PropertyKeyValuePairContext) as PropertyKeyValuePairContext[];
	}
	public propertyKeyValuePair(i: number): PropertyKeyValuePairContext {
		return this.getTypedRuleContext(PropertyKeyValuePairContext, i) as PropertyKeyValuePairContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyKeyValuePairList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyKeyValuePairList) {
	 		listener.enterPropertyKeyValuePairList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyKeyValuePairList) {
	 		listener.exitPropertyKeyValuePairList(this);
		}
	}
}


export class PropertyKeyValuePairContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyKeyValuePair;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyKeyValuePair) {
	 		listener.enterPropertyKeyValuePair(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyKeyValuePair) {
	 		listener.exitPropertyKeyValuePair(this);
		}
	}
}


export class EdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgePattern(): FullEdgePatternContext {
		return this.getTypedRuleContext(FullEdgePatternContext, 0) as FullEdgePatternContext;
	}
	public abbreviatedEdgePattern(): AbbreviatedEdgePatternContext {
		return this.getTypedRuleContext(AbbreviatedEdgePatternContext, 0) as AbbreviatedEdgePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgePattern) {
	 		listener.enterEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgePattern) {
	 		listener.exitEdgePattern(this);
		}
	}
}


export class FullEdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgePointingLeft(): FullEdgePointingLeftContext {
		return this.getTypedRuleContext(FullEdgePointingLeftContext, 0) as FullEdgePointingLeftContext;
	}
	public fullEdgeUndirected(): FullEdgeUndirectedContext {
		return this.getTypedRuleContext(FullEdgeUndirectedContext, 0) as FullEdgeUndirectedContext;
	}
	public fullEdgePointingRight(): FullEdgePointingRightContext {
		return this.getTypedRuleContext(FullEdgePointingRightContext, 0) as FullEdgePointingRightContext;
	}
	public fullEdgeLeftOrUndirected(): FullEdgeLeftOrUndirectedContext {
		return this.getTypedRuleContext(FullEdgeLeftOrUndirectedContext, 0) as FullEdgeLeftOrUndirectedContext;
	}
	public fullEdgeUndirectedOrRight(): FullEdgeUndirectedOrRightContext {
		return this.getTypedRuleContext(FullEdgeUndirectedOrRightContext, 0) as FullEdgeUndirectedOrRightContext;
	}
	public fullEdgeLeftOrRight(): FullEdgeLeftOrRightContext {
		return this.getTypedRuleContext(FullEdgeLeftOrRightContext, 0) as FullEdgeLeftOrRightContext;
	}
	public fullEdgeAnyDirection(): FullEdgeAnyDirectionContext {
		return this.getTypedRuleContext(FullEdgeAnyDirectionContext, 0) as FullEdgeAnyDirectionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgePattern) {
	 		listener.enterFullEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgePattern) {
	 		listener.exitFullEdgePattern(this);
		}
	}
}


export class FullEdgePointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgePointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgePointingLeft) {
	 		listener.enterFullEdgePointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgePointingLeft) {
	 		listener.exitFullEdgePointingLeft(this);
		}
	}
}


export class FullEdgeUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeUndirected) {
	 		listener.enterFullEdgeUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeUndirected) {
	 		listener.exitFullEdgeUndirected(this);
		}
	}
}


export class FullEdgePointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgePointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgePointingRight) {
	 		listener.enterFullEdgePointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgePointingRight) {
	 		listener.exitFullEdgePointingRight(this);
		}
	}
}


export class FullEdgeLeftOrUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_TILDE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeLeftOrUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeLeftOrUndirected) {
	 		listener.enterFullEdgeLeftOrUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeLeftOrUndirected) {
	 		listener.exitFullEdgeLeftOrUndirected(this);
		}
	}
}


export class FullEdgeUndirectedOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeUndirectedOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeUndirectedOrRight) {
	 		listener.enterFullEdgeUndirectedOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeUndirectedOrRight) {
	 		listener.exitFullEdgeUndirectedOrRight(this);
		}
	}
}


export class FullEdgeLeftOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeLeftOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeLeftOrRight) {
	 		listener.enterFullEdgeLeftOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeLeftOrRight) {
	 		listener.exitFullEdgeLeftOrRight(this);
		}
	}
}


export class FullEdgeAnyDirectionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeAnyDirection;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeAnyDirection) {
	 		listener.enterFullEdgeAnyDirection(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeAnyDirection) {
	 		listener.exitFullEdgeAnyDirection(this);
		}
	}
}


export class AbbreviatedEdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
	public LEFT_ARROW_TILDE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	}
	public TILDE_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	}
	public LEFT_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_RIGHT, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgePattern) {
	 		listener.enterAbbreviatedEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgePattern) {
	 		listener.exitAbbreviatedEdgePattern(this);
		}
	}
}


export class ParenthesizedPathPatternExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathPatternExpr(): PathPatternExprContext {
		return this.getTypedRuleContext(PathPatternExprContext, 0) as PathPatternExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public subpathVarDeclaration(): SubpathVarDeclarationContext {
		return this.getTypedRuleContext(SubpathVarDeclarationContext, 0) as SubpathVarDeclarationContext;
	}
	public pathModePrefix(): PathModePrefixContext {
		return this.getTypedRuleContext(PathModePrefixContext, 0) as PathModePrefixContext;
	}
	public parenthesizedPathPatternWhereClause(): ParenthesizedPathPatternWhereClauseContext {
		return this.getTypedRuleContext(ParenthesizedPathPatternWhereClauseContext, 0) as ParenthesizedPathPatternWhereClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedPathPatternExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedPathPatternExpr) {
	 		listener.enterParenthesizedPathPatternExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedPathPatternExpr) {
	 		listener.exitParenthesizedPathPatternExpr(this);
		}
	}
}


export class SubpathVarDeclarationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public subpathVar(): SubpathVarContext {
		return this.getTypedRuleContext(SubpathVarContext, 0) as SubpathVarContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_subpathVarDeclaration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSubpathVarDeclaration) {
	 		listener.enterSubpathVarDeclaration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSubpathVarDeclaration) {
	 		listener.exitSubpathVarDeclaration(this);
		}
	}
}


export class ParenthesizedPathPatternWhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedPathPatternWhereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedPathPatternWhereClause) {
	 		listener.enterParenthesizedPathPatternWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedPathPatternWhereClause) {
	 		listener.exitParenthesizedPathPatternWhereClause(this);
		}
	}
}


export class InsertGraphPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertGraphPatternList(): InsertGraphPatternListContext {
		return this.getTypedRuleContext(InsertGraphPatternListContext, 0) as InsertGraphPatternListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertGraphPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertGraphPattern) {
	 		listener.enterInsertGraphPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertGraphPattern) {
	 		listener.exitInsertGraphPattern(this);
		}
	}
}


export class InsertGraphPatternListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertPathPattern_list(): InsertPathPatternContext[] {
		return this.getTypedRuleContexts(InsertPathPatternContext) as InsertPathPatternContext[];
	}
	public insertPathPattern(i: number): InsertPathPatternContext {
		return this.getTypedRuleContext(InsertPathPatternContext, i) as InsertPathPatternContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertGraphPatternList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertGraphPatternList) {
	 		listener.enterInsertGraphPatternList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertGraphPatternList) {
	 		listener.exitInsertGraphPatternList(this);
		}
	}
}


export class InsertPathPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertNodePattern_list(): InsertNodePatternContext[] {
		return this.getTypedRuleContexts(InsertNodePatternContext) as InsertNodePatternContext[];
	}
	public insertNodePattern(i: number): InsertNodePatternContext {
		return this.getTypedRuleContext(InsertNodePatternContext, i) as InsertNodePatternContext;
	}
	public insertEdgePattern_list(): InsertEdgePatternContext[] {
		return this.getTypedRuleContexts(InsertEdgePatternContext) as InsertEdgePatternContext[];
	}
	public insertEdgePattern(i: number): InsertEdgePatternContext {
		return this.getTypedRuleContext(InsertEdgePatternContext, i) as InsertEdgePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertPathPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertPathPattern) {
	 		listener.enterInsertPathPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertPathPattern) {
	 		listener.exitInsertPathPattern(this);
		}
	}
}


export class InsertNodePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertNodePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertNodePattern) {
	 		listener.enterInsertNodePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertNodePattern) {
	 		listener.exitInsertNodePattern(this);
		}
	}
}


export class InsertEdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertEdgePointingLeft(): InsertEdgePointingLeftContext {
		return this.getTypedRuleContext(InsertEdgePointingLeftContext, 0) as InsertEdgePointingLeftContext;
	}
	public insertEdgePointingRight(): InsertEdgePointingRightContext {
		return this.getTypedRuleContext(InsertEdgePointingRightContext, 0) as InsertEdgePointingRightContext;
	}
	public insertEdgeUndirected(): InsertEdgeUndirectedContext {
		return this.getTypedRuleContext(InsertEdgeUndirectedContext, 0) as InsertEdgeUndirectedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgePattern) {
	 		listener.enterInsertEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgePattern) {
	 		listener.exitInsertEdgePattern(this);
		}
	}
}


export class InsertEdgePointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgePointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgePointingLeft) {
	 		listener.enterInsertEdgePointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgePointingLeft) {
	 		listener.exitInsertEdgePointingLeft(this);
		}
	}
}


export class InsertEdgePointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgePointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgePointingRight) {
	 		listener.enterInsertEdgePointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgePointingRight) {
	 		listener.exitInsertEdgePointingRight(this);
		}
	}
}


export class InsertEdgeUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgeUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgeUndirected) {
	 		listener.enterInsertEdgeUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgeUndirected) {
	 		listener.exitInsertEdgeUndirected(this);
		}
	}
}


export class InsertElementPatternFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarDeclaration(): ElementVarDeclarationContext {
		return this.getTypedRuleContext(ElementVarDeclarationContext, 0) as ElementVarDeclarationContext;
	}
	public labelAndPropertySetSpec(): LabelAndPropertySetSpecContext {
		return this.getTypedRuleContext(LabelAndPropertySetSpecContext, 0) as LabelAndPropertySetSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertElementPatternFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertElementPatternFiller) {
	 		listener.enterInsertElementPatternFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertElementPatternFiller) {
	 		listener.exitInsertElementPatternFiller(this);
		}
	}
}


export class LabelAndPropertySetSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
	public elementPropertySpec(): ElementPropertySpecContext {
		return this.getTypedRuleContext(ElementPropertySpecContext, 0) as ElementPropertySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelAndPropertySetSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelAndPropertySetSpec) {
	 		listener.enterLabelAndPropertySetSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelAndPropertySetSpec) {
	 		listener.exitLabelAndPropertySetSpec(this);
		}
	}
}


export class LabelExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelTerm_list(): LabelTermContext[] {
		return this.getTypedRuleContexts(LabelTermContext) as LabelTermContext[];
	}
	public labelTerm(i: number): LabelTermContext {
		return this.getTypedRuleContext(LabelTermContext, i) as LabelTermContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelExpr) {
	 		listener.enterLabelExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelExpr) {
	 		listener.exitLabelExpr(this);
		}
	}
}


export class LabelTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelFactor_list(): LabelFactorContext[] {
		return this.getTypedRuleContexts(LabelFactorContext) as LabelFactorContext[];
	}
	public labelFactor(i: number): LabelFactorContext {
		return this.getTypedRuleContext(LabelFactorContext, i) as LabelFactorContext;
	}
	public AMPERSAND_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.AMPERSAND);
	}
	public AMPERSAND(i: number): TerminalNode {
		return this.getToken(GqlParser.AMPERSAND, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelTerm) {
	 		listener.enterLabelTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelTerm) {
	 		listener.exitLabelTerm(this);
		}
	}
}


export class LabelFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelPrimary(): LabelPrimaryContext {
		return this.getTypedRuleContext(LabelPrimaryContext, 0) as LabelPrimaryContext;
	}
	public labelNegation(): LabelNegationContext {
		return this.getTypedRuleContext(LabelNegationContext, 0) as LabelNegationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelFactor) {
	 		listener.enterLabelFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelFactor) {
	 		listener.exitLabelFactor(this);
		}
	}
}


export class LabelNegationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXCLAMATION(): TerminalNode {
		return this.getToken(GqlParser.EXCLAMATION, 0);
	}
	public labelPrimary(): LabelPrimaryContext {
		return this.getTypedRuleContext(LabelPrimaryContext, 0) as LabelPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelNegation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelNegation) {
	 		listener.enterLabelNegation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelNegation) {
	 		listener.exitLabelNegation(this);
		}
	}
}


export class LabelPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelName(): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, 0) as LabelNameContext;
	}
	public wildcardLabel(): WildcardLabelContext {
		return this.getTypedRuleContext(WildcardLabelContext, 0) as WildcardLabelContext;
	}
	public parenthesizedLabelExpr(): ParenthesizedLabelExprContext {
		return this.getTypedRuleContext(ParenthesizedLabelExprContext, 0) as ParenthesizedLabelExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelPrimary) {
	 		listener.enterLabelPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelPrimary) {
	 		listener.exitLabelPrimary(this);
		}
	}
}


export class WildcardLabelContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PERCENT(): TerminalNode {
		return this.getToken(GqlParser.PERCENT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_wildcardLabel;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWildcardLabel) {
	 		listener.enterWildcardLabel(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWildcardLabel) {
	 		listener.exitWildcardLabel(this);
		}
	}
}


export class ParenthesizedLabelExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public labelExpr(): LabelExprContext {
		return this.getTypedRuleContext(LabelExprContext, 0) as LabelExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedLabelExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedLabelExpr) {
	 		listener.enterParenthesizedLabelExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedLabelExpr) {
	 		listener.exitParenthesizedLabelExpr(this);
		}
	}
}


export class GraphPatternQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public fixedQuantifier(): FixedQuantifierContext {
		return this.getTypedRuleContext(FixedQuantifierContext, 0) as FixedQuantifierContext;
	}
	public generalQuantifier(): GeneralQuantifierContext {
		return this.getTypedRuleContext(GeneralQuantifierContext, 0) as GeneralQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternQuantifier) {
	 		listener.enterGraphPatternQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternQuantifier) {
	 		listener.exitGraphPatternQuantifier(this);
		}
	}
}


export class FixedQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fixedQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFixedQuantifier) {
	 		listener.enterFixedQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFixedQuantifier) {
	 		listener.exitFixedQuantifier(this);
		}
	}
}


export class GeneralQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public lowerBound(): LowerBoundContext {
		return this.getTypedRuleContext(LowerBoundContext, 0) as LowerBoundContext;
	}
	public upperBound(): UpperBoundContext {
		return this.getTypedRuleContext(UpperBoundContext, 0) as UpperBoundContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralQuantifier) {
	 		listener.enterGeneralQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralQuantifier) {
	 		listener.exitGeneralQuantifier(this);
		}
	}
}


export class LowerBoundContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lowerBound;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLowerBound) {
	 		listener.enterLowerBound(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLowerBound) {
	 		listener.exitLowerBound(this);
		}
	}
}


export class UpperBoundContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_upperBound;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUpperBound) {
	 		listener.enterUpperBound(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUpperBound) {
	 		listener.exitUpperBound(this);
		}
	}
}


export class SimplifiedPathPatternExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedDefaultingLeft(): SimplifiedDefaultingLeftContext {
		return this.getTypedRuleContext(SimplifiedDefaultingLeftContext, 0) as SimplifiedDefaultingLeftContext;
	}
	public simplifiedDefaultingUndirected(): SimplifiedDefaultingUndirectedContext {
		return this.getTypedRuleContext(SimplifiedDefaultingUndirectedContext, 0) as SimplifiedDefaultingUndirectedContext;
	}
	public simplifiedDefaultingRight(): SimplifiedDefaultingRightContext {
		return this.getTypedRuleContext(SimplifiedDefaultingRightContext, 0) as SimplifiedDefaultingRightContext;
	}
	public simplifiedDefaultingLeftOrUndirected(): SimplifiedDefaultingLeftOrUndirectedContext {
		return this.getTypedRuleContext(SimplifiedDefaultingLeftOrUndirectedContext, 0) as SimplifiedDefaultingLeftOrUndirectedContext;
	}
	public simplifiedDefaultingUndirectedOrRight(): SimplifiedDefaultingUndirectedOrRightContext {
		return this.getTypedRuleContext(SimplifiedDefaultingUndirectedOrRightContext, 0) as SimplifiedDefaultingUndirectedOrRightContext;
	}
	public simplifiedDefaultingLeftOrRight(): SimplifiedDefaultingLeftOrRightContext {
		return this.getTypedRuleContext(SimplifiedDefaultingLeftOrRightContext, 0) as SimplifiedDefaultingLeftOrRightContext;
	}
	public simplifiedDefaultingAnyDirection(): SimplifiedDefaultingAnyDirectionContext {
		return this.getTypedRuleContext(SimplifiedDefaultingAnyDirectionContext, 0) as SimplifiedDefaultingAnyDirectionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedPathPatternExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedPathPatternExpr) {
	 		listener.enterSimplifiedPathPatternExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedPathPatternExpr) {
	 		listener.exitSimplifiedPathPatternExpr(this);
		}
	}
}


export class SimplifiedDefaultingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingLeft) {
	 		listener.enterSimplifiedDefaultingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingLeft) {
	 		listener.exitSimplifiedDefaultingLeft(this);
		}
	}
}


export class SimplifiedDefaultingUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.TILDE_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_TILDE(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingUndirected) {
	 		listener.enterSimplifiedDefaultingUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingUndirected) {
	 		listener.exitSimplifiedDefaultingUndirected(this);
		}
	}
}


export class SimplifiedDefaultingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingRight) {
	 		listener.enterSimplifiedDefaultingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingRight) {
	 		listener.exitSimplifiedDefaultingRight(this);
		}
	}
}


export class SimplifiedDefaultingLeftOrUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_TILDE_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_TILDE(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingLeftOrUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingLeftOrUndirected) {
	 		listener.enterSimplifiedDefaultingLeftOrUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingLeftOrUndirected) {
	 		listener.exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}
}


export class SimplifiedDefaultingUndirectedOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.TILDE_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_TILDE_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE_RIGHT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingUndirectedOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingUndirectedOrRight) {
	 		listener.enterSimplifiedDefaultingUndirectedOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingUndirectedOrRight) {
	 		listener.exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}
}


export class SimplifiedDefaultingLeftOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingLeftOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingLeftOrRight) {
	 		listener.enterSimplifiedDefaultingLeftOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingLeftOrRight) {
	 		listener.exitSimplifiedDefaultingLeftOrRight(this);
		}
	}
}


export class SimplifiedDefaultingAnyDirectionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingAnyDirection;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingAnyDirection) {
	 		listener.enterSimplifiedDefaultingAnyDirection(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingAnyDirection) {
	 		listener.exitSimplifiedDefaultingAnyDirection(this);
		}
	}
}


export class SimplifiedContentsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTerm(): SimplifiedTermContext {
		return this.getTypedRuleContext(SimplifiedTermContext, 0) as SimplifiedTermContext;
	}
	public simplifiedPathUnion(): SimplifiedPathUnionContext {
		return this.getTypedRuleContext(SimplifiedPathUnionContext, 0) as SimplifiedPathUnionContext;
	}
	public simplifiedMultisetAlternation(): SimplifiedMultisetAlternationContext {
		return this.getTypedRuleContext(SimplifiedMultisetAlternationContext, 0) as SimplifiedMultisetAlternationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedContents;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedContents) {
	 		listener.enterSimplifiedContents(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedContents) {
	 		listener.exitSimplifiedContents(this);
		}
	}
}


export class SimplifiedPathUnionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTerm_list(): SimplifiedTermContext[] {
		return this.getTypedRuleContexts(SimplifiedTermContext) as SimplifiedTermContext[];
	}
	public simplifiedTerm(i: number): SimplifiedTermContext {
		return this.getTypedRuleContext(SimplifiedTermContext, i) as SimplifiedTermContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedPathUnion;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedPathUnion) {
	 		listener.enterSimplifiedPathUnion(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedPathUnion) {
	 		listener.exitSimplifiedPathUnion(this);
		}
	}
}


export class SimplifiedMultisetAlternationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTerm_list(): SimplifiedTermContext[] {
		return this.getTypedRuleContexts(SimplifiedTermContext) as SimplifiedTermContext[];
	}
	public simplifiedTerm(i: number): SimplifiedTermContext {
		return this.getTypedRuleContext(SimplifiedTermContext, i) as SimplifiedTermContext;
	}
	public MULTISET_ALTERNATION_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.MULTISET_ALTERNATION);
	}
	public MULTISET_ALTERNATION(i: number): TerminalNode {
		return this.getToken(GqlParser.MULTISET_ALTERNATION, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedMultisetAlternation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedMultisetAlternation) {
	 		listener.enterSimplifiedMultisetAlternation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedMultisetAlternation) {
	 		listener.exitSimplifiedMultisetAlternation(this);
		}
	}
}


export class SimplifiedTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedFactorLow_list(): SimplifiedFactorLowContext[] {
		return this.getTypedRuleContexts(SimplifiedFactorLowContext) as SimplifiedFactorLowContext[];
	}
	public simplifiedFactorLow(i: number): SimplifiedFactorLowContext {
		return this.getTypedRuleContext(SimplifiedFactorLowContext, i) as SimplifiedFactorLowContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedTerm) {
	 		listener.enterSimplifiedTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedTerm) {
	 		listener.exitSimplifiedTerm(this);
		}
	}
}


export class SimplifiedFactorLowContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedFactorHigh_list(): SimplifiedFactorHighContext[] {
		return this.getTypedRuleContexts(SimplifiedFactorHighContext) as SimplifiedFactorHighContext[];
	}
	public simplifiedFactorHigh(i: number): SimplifiedFactorHighContext {
		return this.getTypedRuleContext(SimplifiedFactorHighContext, i) as SimplifiedFactorHighContext;
	}
	public AMPERSAND_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.AMPERSAND);
	}
	public AMPERSAND(i: number): TerminalNode {
		return this.getToken(GqlParser.AMPERSAND, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedFactorLow;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedFactorLow) {
	 		listener.enterSimplifiedFactorLow(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedFactorLow) {
	 		listener.exitSimplifiedFactorLow(this);
		}
	}
}


export class SimplifiedFactorHighContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		return this.getTypedRuleContext(SimplifiedTertiaryContext, 0) as SimplifiedTertiaryContext;
	}
	public simplifiedQuntified(): SimplifiedQuntifiedContext {
		return this.getTypedRuleContext(SimplifiedQuntifiedContext, 0) as SimplifiedQuntifiedContext;
	}
	public simplifiedQuestioned(): SimplifiedQuestionedContext {
		return this.getTypedRuleContext(SimplifiedQuestionedContext, 0) as SimplifiedQuestionedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedFactorHigh;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedFactorHigh) {
	 		listener.enterSimplifiedFactorHigh(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedFactorHigh) {
	 		listener.exitSimplifiedFactorHigh(this);
		}
	}
}


export class SimplifiedQuntifiedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		return this.getTypedRuleContext(SimplifiedTertiaryContext, 0) as SimplifiedTertiaryContext;
	}
	public graphPatternQuantifier(): GraphPatternQuantifierContext {
		return this.getTypedRuleContext(GraphPatternQuantifierContext, 0) as GraphPatternQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedQuntified;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedQuntified) {
	 		listener.enterSimplifiedQuntified(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedQuntified) {
	 		listener.exitSimplifiedQuntified(this);
		}
	}
}


export class SimplifiedQuestionedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		return this.getTypedRuleContext(SimplifiedTertiaryContext, 0) as SimplifiedTertiaryContext;
	}
	public QUESTION_MARK(): TerminalNode {
		return this.getToken(GqlParser.QUESTION_MARK, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedQuestioned;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedQuestioned) {
	 		listener.enterSimplifiedQuestioned(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedQuestioned) {
	 		listener.exitSimplifiedQuestioned(this);
		}
	}
}


export class SimplifiedTertiaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedDirectionOverride(): SimplifiedDirectionOverrideContext {
		return this.getTypedRuleContext(SimplifiedDirectionOverrideContext, 0) as SimplifiedDirectionOverrideContext;
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedTertiary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedTertiary) {
	 		listener.enterSimplifiedTertiary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedTertiary) {
	 		listener.exitSimplifiedTertiary(this);
		}
	}
}


export class SimplifiedDirectionOverrideContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedOverrideLeft(): SimplifiedOverrideLeftContext {
		return this.getTypedRuleContext(SimplifiedOverrideLeftContext, 0) as SimplifiedOverrideLeftContext;
	}
	public simplifiedOverrideUndirected(): SimplifiedOverrideUndirectedContext {
		return this.getTypedRuleContext(SimplifiedOverrideUndirectedContext, 0) as SimplifiedOverrideUndirectedContext;
	}
	public simplifiedOverrideRight(): SimplifiedOverrideRightContext {
		return this.getTypedRuleContext(SimplifiedOverrideRightContext, 0) as SimplifiedOverrideRightContext;
	}
	public simplifiedOverrideLeftOrUndirected(): SimplifiedOverrideLeftOrUndirectedContext {
		return this.getTypedRuleContext(SimplifiedOverrideLeftOrUndirectedContext, 0) as SimplifiedOverrideLeftOrUndirectedContext;
	}
	public simplifiedOverrideUndirectedOrRight(): SimplifiedOverrideUndirectedOrRightContext {
		return this.getTypedRuleContext(SimplifiedOverrideUndirectedOrRightContext, 0) as SimplifiedOverrideUndirectedOrRightContext;
	}
	public simplifiedOverrideLeftOrRight(): SimplifiedOverrideLeftOrRightContext {
		return this.getTypedRuleContext(SimplifiedOverrideLeftOrRightContext, 0) as SimplifiedOverrideLeftOrRightContext;
	}
	public simplifiedOverrideAnyDirection(): SimplifiedOverrideAnyDirectionContext {
		return this.getTypedRuleContext(SimplifiedOverrideAnyDirectionContext, 0) as SimplifiedOverrideAnyDirectionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDirectionOverride;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDirectionOverride) {
	 		listener.enterSimplifiedDirectionOverride(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDirectionOverride) {
	 		listener.exitSimplifiedDirectionOverride(this);
		}
	}
}


export class SimplifiedOverrideLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideLeft) {
	 		listener.enterSimplifiedOverrideLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideLeft) {
	 		listener.exitSimplifiedOverrideLeft(this);
		}
	}
}


export class SimplifiedOverrideUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideUndirected) {
	 		listener.enterSimplifiedOverrideUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideUndirected) {
	 		listener.exitSimplifiedOverrideUndirected(this);
		}
	}
}


export class SimplifiedOverrideRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideRight) {
	 		listener.enterSimplifiedOverrideRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideRight) {
	 		listener.exitSimplifiedOverrideRight(this);
		}
	}
}


export class SimplifiedOverrideLeftOrUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_TILDE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideLeftOrUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideLeftOrUndirected) {
	 		listener.enterSimplifiedOverrideLeftOrUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideLeftOrUndirected) {
	 		listener.exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}
}


export class SimplifiedOverrideUndirectedOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideUndirectedOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideUndirectedOrRight) {
	 		listener.enterSimplifiedOverrideUndirectedOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideUndirectedOrRight) {
	 		listener.exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}
}


export class SimplifiedOverrideLeftOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideLeftOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideLeftOrRight) {
	 		listener.enterSimplifiedOverrideLeftOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideLeftOrRight) {
	 		listener.exitSimplifiedOverrideLeftOrRight(this);
		}
	}
}


export class SimplifiedOverrideAnyDirectionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideAnyDirection;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideAnyDirection) {
	 		listener.enterSimplifiedOverrideAnyDirection(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideAnyDirection) {
	 		listener.exitSimplifiedOverrideAnyDirection(this);
		}
	}
}


export class SimplifiedSecondaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedPrimary(): SimplifiedPrimaryContext {
		return this.getTypedRuleContext(SimplifiedPrimaryContext, 0) as SimplifiedPrimaryContext;
	}
	public simplifiedNegation(): SimplifiedNegationContext {
		return this.getTypedRuleContext(SimplifiedNegationContext, 0) as SimplifiedNegationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedSecondary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedSecondary) {
	 		listener.enterSimplifiedSecondary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedSecondary) {
	 		listener.exitSimplifiedSecondary(this);
		}
	}
}


export class SimplifiedNegationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXCLAMATION(): TerminalNode {
		return this.getToken(GqlParser.EXCLAMATION, 0);
	}
	public simplifiedPrimary(): SimplifiedPrimaryContext {
		return this.getTypedRuleContext(SimplifiedPrimaryContext, 0) as SimplifiedPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedNegation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedNegation) {
	 		listener.enterSimplifiedNegation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedNegation) {
	 		listener.exitSimplifiedNegation(this);
		}
	}
}


export class SimplifiedPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelName(): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, 0) as LabelNameContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedPrimary) {
	 		listener.enterSimplifiedPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedPrimary) {
	 		listener.exitSimplifiedPrimary(this);
		}
	}
}


export class WhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_whereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWhereClause) {
	 		listener.enterWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWhereClause) {
	 		listener.exitWhereClause(this);
		}
	}
}


export class YieldClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public YIELD(): TerminalNode {
		return this.getToken(GqlParser.YIELD, 0);
	}
	public yieldItemList(): YieldItemListContext {
		return this.getTypedRuleContext(YieldItemListContext, 0) as YieldItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldClause) {
	 		listener.enterYieldClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldClause) {
	 		listener.exitYieldClause(this);
		}
	}
}


export class YieldItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public yieldItem_list(): YieldItemContext[] {
		return this.getTypedRuleContexts(YieldItemContext) as YieldItemContext[];
	}
	public yieldItem(i: number): YieldItemContext {
		return this.getTypedRuleContext(YieldItemContext, i) as YieldItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItemList) {
	 		listener.enterYieldItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItemList) {
	 		listener.exitYieldItemList(this);
		}
	}
}


export class YieldItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public yieldItemName(): YieldItemNameContext {
		return this.getTypedRuleContext(YieldItemNameContext, 0) as YieldItemNameContext;
	}
	public yieldItemAlias(): YieldItemAliasContext {
		return this.getTypedRuleContext(YieldItemAliasContext, 0) as YieldItemAliasContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItem) {
	 		listener.enterYieldItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItem) {
	 		listener.exitYieldItem(this);
		}
	}
}


export class YieldItemNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldName(): FieldNameContext {
		return this.getTypedRuleContext(FieldNameContext, 0) as FieldNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItemName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItemName) {
	 		listener.enterYieldItemName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItemName) {
	 		listener.exitYieldItemName(this);
		}
	}
}


export class YieldItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItemAlias) {
	 		listener.enterYieldItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItemAlias) {
	 		listener.exitYieldItemAlias(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(GqlParser.BY, 0);
	}
	public groupingElementList(): GroupingElementListContext {
		return this.getTypedRuleContext(GroupingElementListContext, 0) as GroupingElementListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupByClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupByClause) {
	 		listener.enterGroupByClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupByClause) {
	 		listener.exitGroupByClause(this);
		}
	}
}


export class GroupingElementListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public groupingElement_list(): GroupingElementContext[] {
		return this.getTypedRuleContexts(GroupingElementContext) as GroupingElementContext[];
	}
	public groupingElement(i: number): GroupingElementContext {
		return this.getTypedRuleContext(GroupingElementContext, i) as GroupingElementContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public emptyGroupingSet(): EmptyGroupingSetContext {
		return this.getTypedRuleContext(EmptyGroupingSetContext, 0) as EmptyGroupingSetContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupingElementList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupingElementList) {
	 		listener.enterGroupingElementList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupingElementList) {
	 		listener.exitGroupingElementList(this);
		}
	}
}


export class GroupingElementContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupingElement;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupingElement) {
	 		listener.enterGroupingElement(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupingElement) {
	 		listener.exitGroupingElement(this);
		}
	}
}


export class EmptyGroupingSetContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_emptyGroupingSet;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEmptyGroupingSet) {
	 		listener.enterEmptyGroupingSet(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEmptyGroupingSet) {
	 		listener.exitEmptyGroupingSet(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ORDER(): TerminalNode {
		return this.getToken(GqlParser.ORDER, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(GqlParser.BY, 0);
	}
	public sortSpecList(): SortSpecListContext {
		return this.getTypedRuleContext(SortSpecListContext, 0) as SortSpecListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_orderByClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOrderByClause) {
	 		listener.enterOrderByClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOrderByClause) {
	 		listener.exitOrderByClause(this);
		}
	}
}


export class AggregateFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COUNT(): TerminalNode {
		return this.getToken(GqlParser.COUNT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public generalSetFunction(): GeneralSetFunctionContext {
		return this.getTypedRuleContext(GeneralSetFunctionContext, 0) as GeneralSetFunctionContext;
	}
	public binarySetFunction(): BinarySetFunctionContext {
		return this.getTypedRuleContext(BinarySetFunctionContext, 0) as BinarySetFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_aggregateFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAggregateFunction) {
	 		listener.enterAggregateFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAggregateFunction) {
	 		listener.exitAggregateFunction(this);
		}
	}
}


export class GeneralSetFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public generalSetFunctionType(): GeneralSetFunctionTypeContext {
		return this.getTypedRuleContext(GeneralSetFunctionTypeContext, 0) as GeneralSetFunctionTypeContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalSetFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralSetFunction) {
	 		listener.enterGeneralSetFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralSetFunction) {
	 		listener.exitGeneralSetFunction(this);
		}
	}
}


export class GeneralSetFunctionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AVG(): TerminalNode {
		return this.getToken(GqlParser.AVG, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(GqlParser.COUNT, 0);
	}
	public MAX(): TerminalNode {
		return this.getToken(GqlParser.MAX, 0);
	}
	public MIN(): TerminalNode {
		return this.getToken(GqlParser.MIN, 0);
	}
	public SUM(): TerminalNode {
		return this.getToken(GqlParser.SUM, 0);
	}
	public COLLECT(): TerminalNode {
		return this.getToken(GqlParser.COLLECT, 0);
	}
	public STDDEV_SAMP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_SAMP, 0);
	}
	public STDDEV_POP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_POP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalSetFunctionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralSetFunctionType) {
	 		listener.enterGeneralSetFunctionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralSetFunctionType) {
	 		listener.exitGeneralSetFunctionType(this);
		}
	}
}


export class SetQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(GqlParser.DISTINCT, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetQuantifier) {
	 		listener.enterSetQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetQuantifier) {
	 		listener.exitSetQuantifier(this);
		}
	}
}


export class BinarySetFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PERCENTILE_CONT(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_CONT, 0);
	}
	public PERCENTILE_DISC(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_DISC, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_binarySetFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBinarySetFunction) {
	 		listener.enterBinarySetFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBinarySetFunction) {
	 		listener.exitBinarySetFunction(this);
		}
	}
}


export class DependantValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dependantValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDependantValueExpr) {
	 		listener.enterDependantValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDependantValueExpr) {
	 		listener.exitDependantValueExpr(this);
		}
	}
}


export class IndependentValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_independentValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIndependentValueExpr) {
	 		listener.enterIndependentValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIndependentValueExpr) {
	 		listener.exitIndependentValueExpr(this);
		}
	}
}


export class SortSpecListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sortSpec_list(): SortSpecContext[] {
		return this.getTypedRuleContexts(SortSpecContext) as SortSpecContext[];
	}
	public sortSpec(i: number): SortSpecContext {
		return this.getTypedRuleContext(SortSpecContext, i) as SortSpecContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sortSpecList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSortSpecList) {
	 		listener.enterSortSpecList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSortSpecList) {
	 		listener.exitSortSpecList(this);
		}
	}
}


export class SortSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sortKey(): SortKeyContext {
		return this.getTypedRuleContext(SortKeyContext, 0) as SortKeyContext;
	}
	public orderingSpec(): OrderingSpecContext {
		return this.getTypedRuleContext(OrderingSpecContext, 0) as OrderingSpecContext;
	}
	public nullOrdering(): NullOrderingContext {
		return this.getTypedRuleContext(NullOrderingContext, 0) as NullOrderingContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sortSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSortSpec) {
	 		listener.enterSortSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSortSpec) {
	 		listener.exitSortSpec(this);
		}
	}
}


export class SortKeyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public aggregatingValueExpr(): AggregatingValueExprContext {
		return this.getTypedRuleContext(AggregatingValueExprContext, 0) as AggregatingValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sortKey;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSortKey) {
	 		listener.enterSortKey(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSortKey) {
	 		listener.exitSortKey(this);
		}
	}
}


export class OrderingSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASC(): TerminalNode {
		return this.getToken(GqlParser.ASC, 0);
	}
	public ASCENDING(): TerminalNode {
		return this.getToken(GqlParser.ASCENDING, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(GqlParser.DESC, 0);
	}
	public DESCENDING(): TerminalNode {
		return this.getToken(GqlParser.DESCENDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_orderingSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOrderingSpec) {
	 		listener.enterOrderingSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOrderingSpec) {
	 		listener.exitOrderingSpec(this);
		}
	}
}


export class NullOrderingContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULLS(): TerminalNode {
		return this.getToken(GqlParser.NULLS, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(GqlParser.FIRST, 0);
	}
	public LAST(): TerminalNode {
		return this.getToken(GqlParser.LAST, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullOrdering;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullOrdering) {
	 		listener.enterNullOrdering(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullOrdering) {
	 		listener.exitNullOrdering(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIMIT(): TerminalNode {
		return this.getToken(GqlParser.LIMIT, 0);
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_limitClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLimitClause) {
	 		listener.enterLimitClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLimitClause) {
	 		listener.exitLimitClause(this);
		}
	}
}


export class OffsetClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public offsetSynonym(): OffsetSynonymContext {
		return this.getTypedRuleContext(OffsetSynonymContext, 0) as OffsetSynonymContext;
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_offsetClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOffsetClause) {
	 		listener.enterOffsetClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOffsetClause) {
	 		listener.exitOffsetClause(this);
		}
	}
}


export class OffsetSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OFFSET(): TerminalNode {
		return this.getToken(GqlParser.OFFSET, 0);
	}
	public SKIP_(): TerminalNode {
		return this.getToken(GqlParser.SKIP_, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_offsetSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOffsetSynonym) {
	 		listener.enterOffsetSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOffsetSynonym) {
	 		listener.exitOffsetSynonym(this);
		}
	}
}


export class GraphTypeSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		return this.getTypedRuleContext(NestedGraphTypeSpecContext, 0) as NestedGraphTypeSpecContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeSpec) {
	 		listener.enterGraphTypeSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeSpec) {
	 		listener.exitGraphTypeSpec(this);
		}
	}
}


export class NestedGraphTypeSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public graphTypeSpecBody(): GraphTypeSpecBodyContext {
		return this.getTypedRuleContext(GraphTypeSpecBodyContext, 0) as GraphTypeSpecBodyContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedGraphTypeSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedGraphTypeSpec) {
	 		listener.enterNestedGraphTypeSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedGraphTypeSpec) {
	 		listener.exitNestedGraphTypeSpec(this);
		}
	}
}


export class GraphTypeSpecBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeDefList(): ElementTypeDefListContext {
		return this.getTypedRuleContext(ElementTypeDefListContext, 0) as ElementTypeDefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeSpecBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeSpecBody) {
	 		listener.enterGraphTypeSpecBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeSpecBody) {
	 		listener.exitGraphTypeSpecBody(this);
		}
	}
}


export class ElementTypeDefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeDef_list(): ElementTypeDefContext[] {
		return this.getTypedRuleContexts(ElementTypeDefContext) as ElementTypeDefContext[];
	}
	public elementTypeDef(i: number): ElementTypeDefContext {
		return this.getTypedRuleContext(ElementTypeDefContext, i) as ElementTypeDefContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementTypeDefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementTypeDefList) {
	 		listener.enterElementTypeDefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementTypeDefList) {
	 		listener.exitElementTypeDefList(this);
		}
	}
}


export class ElementTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypeDef(): NodeTypeDefContext {
		return this.getTypedRuleContext(NodeTypeDefContext, 0) as NodeTypeDefContext;
	}
	public edgeTypeDef(): EdgeTypeDefContext {
		return this.getTypedRuleContext(EdgeTypeDefContext, 0) as EdgeTypeDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementTypeDef) {
	 		listener.enterElementTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementTypeDef) {
	 		listener.exitElementTypeDef(this);
		}
	}
}


export class NodeTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypePattern(): NodeTypePatternContext {
		return this.getTypedRuleContext(NodeTypePatternContext, 0) as NodeTypePatternContext;
	}
	public nodeSynonym(): NodeSynonymContext {
		return this.getTypedRuleContext(NodeSynonymContext, 0) as NodeSynonymContext;
	}
	public nodeTypePhrase(): NodeTypePhraseContext {
		return this.getTypedRuleContext(NodeTypePhraseContext, 0) as NodeTypePhraseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeDef) {
	 		listener.enterNodeTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeDef) {
	 		listener.exitNodeTypeDef(this);
		}
	}
}


export class NodeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public nodeTypeName(): NodeTypeNameContext {
		return this.getTypedRuleContext(NodeTypeNameContext, 0) as NodeTypeNameContext;
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypePattern) {
	 		listener.enterNodeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypePattern) {
	 		listener.exitNodeTypePattern(this);
		}
	}
}


export class NodeTypePhraseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypeName(): NodeTypeNameContext {
		return this.getTypedRuleContext(NodeTypeNameContext, 0) as NodeTypeNameContext;
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypePhrase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypePhrase) {
	 		listener.enterNodeTypePhrase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypePhrase) {
	 		listener.exitNodeTypePhrase(this);
		}
	}
}


export class NodeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeName) {
	 		listener.enterNodeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeName) {
	 		listener.exitNodeTypeName(this);
		}
	}
}


export class NodeTypeFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypeLabelSetDef(): NodeTypeLabelSetDefContext {
		return this.getTypedRuleContext(NodeTypeLabelSetDefContext, 0) as NodeTypeLabelSetDefContext;
	}
	public nodeTypePropertyTypeSetDef(): NodeTypePropertyTypeSetDefContext {
		return this.getTypedRuleContext(NodeTypePropertyTypeSetDefContext, 0) as NodeTypePropertyTypeSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeFiller) {
	 		listener.enterNodeTypeFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeFiller) {
	 		listener.exitNodeTypeFiller(this);
		}
	}
}


export class NodeTypeLabelSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelSetDef(): LabelSetDefContext {
		return this.getTypedRuleContext(LabelSetDefContext, 0) as LabelSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeLabelSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeLabelSetDef) {
	 		listener.enterNodeTypeLabelSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeLabelSetDef) {
	 		listener.exitNodeTypeLabelSetDef(this);
		}
	}
}


export class NodeTypePropertyTypeSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyTypeSetDef(): PropertyTypeSetDefContext {
		return this.getTypedRuleContext(PropertyTypeSetDefContext, 0) as PropertyTypeSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypePropertyTypeSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypePropertyTypeSetDef) {
	 		listener.enterNodeTypePropertyTypeSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypePropertyTypeSetDef) {
	 		listener.exitNodeTypePropertyTypeSetDef(this);
		}
	}
}


export class EdgeTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypePattern(): EdgeTypePatternContext {
		return this.getTypedRuleContext(EdgeTypePatternContext, 0) as EdgeTypePatternContext;
	}
	public edgeSynonym(): EdgeSynonymContext {
		return this.getTypedRuleContext(EdgeSynonymContext, 0) as EdgeSynonymContext;
	}
	public edgeTypePhrase(): EdgeTypePhraseContext {
		return this.getTypedRuleContext(EdgeTypePhraseContext, 0) as EdgeTypePhraseContext;
	}
	public edgeKind(): EdgeKindContext {
		return this.getTypedRuleContext(EdgeKindContext, 0) as EdgeKindContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeDef) {
	 		listener.enterEdgeTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeDef) {
	 		listener.exitEdgeTypeDef(this);
		}
	}
}


export class EdgeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgeTypePattern(): FullEdgeTypePatternContext {
		return this.getTypedRuleContext(FullEdgeTypePatternContext, 0) as FullEdgeTypePatternContext;
	}
	public abbreviatedEdgeTypePattern(): AbbreviatedEdgeTypePatternContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext, 0) as AbbreviatedEdgeTypePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypePattern) {
	 		listener.enterEdgeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypePattern) {
	 		listener.exitEdgeTypePattern(this);
		}
	}
}


export class EdgeTypePhraseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeName(): EdgeTypeNameContext {
		return this.getTypedRuleContext(EdgeTypeNameContext, 0) as EdgeTypeNameContext;
	}
	public edgeTypeFiller(): EdgeTypeFillerContext {
		return this.getTypedRuleContext(EdgeTypeFillerContext, 0) as EdgeTypeFillerContext;
	}
	public endpointDef(): EndpointDefContext {
		return this.getTypedRuleContext(EndpointDefContext, 0) as EndpointDefContext;
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypePhrase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypePhrase) {
	 		listener.enterEdgeTypePhrase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypePhrase) {
	 		listener.exitEdgeTypePhrase(this);
		}
	}
}


export class EdgeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeName) {
	 		listener.enterEdgeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeName) {
	 		listener.exitEdgeTypeName(this);
		}
	}
}


export class EdgeTypeFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeLabelSetDef(): EdgeTypeLabelSetDefContext {
		return this.getTypedRuleContext(EdgeTypeLabelSetDefContext, 0) as EdgeTypeLabelSetDefContext;
	}
	public edgeTypePropertyTypeSetDef(): EdgeTypePropertyTypeSetDefContext {
		return this.getTypedRuleContext(EdgeTypePropertyTypeSetDefContext, 0) as EdgeTypePropertyTypeSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeFiller) {
	 		listener.enterEdgeTypeFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeFiller) {
	 		listener.exitEdgeTypeFiller(this);
		}
	}
}


export class EdgeTypeLabelSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelSetDef(): LabelSetDefContext {
		return this.getTypedRuleContext(LabelSetDefContext, 0) as LabelSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeLabelSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeLabelSetDef) {
	 		listener.enterEdgeTypeLabelSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeLabelSetDef) {
	 		listener.exitEdgeTypeLabelSetDef(this);
		}
	}
}


export class EdgeTypePropertyTypeSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyTypeSetDef(): PropertyTypeSetDefContext {
		return this.getTypedRuleContext(PropertyTypeSetDefContext, 0) as PropertyTypeSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypePropertyTypeSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypePropertyTypeSetDef) {
	 		listener.enterEdgeTypePropertyTypeSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypePropertyTypeSetDef) {
	 		listener.exitEdgeTypePropertyTypeSetDef(this);
		}
	}
}


export class FullEdgeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgeTypePatternPointingRight(): FullEdgeTypePatternPointingRightContext {
		return this.getTypedRuleContext(FullEdgeTypePatternPointingRightContext, 0) as FullEdgeTypePatternPointingRightContext;
	}
	public fullEdgeTypePatternPointingLeft(): FullEdgeTypePatternPointingLeftContext {
		return this.getTypedRuleContext(FullEdgeTypePatternPointingLeftContext, 0) as FullEdgeTypePatternPointingLeftContext;
	}
	public fullEdgeTypePatternUndirected(): FullEdgeTypePatternUndirectedContext {
		return this.getTypedRuleContext(FullEdgeTypePatternUndirectedContext, 0) as FullEdgeTypePatternUndirectedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePattern) {
	 		listener.enterFullEdgeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePattern) {
	 		listener.exitFullEdgeTypePattern(this);
		}
	}
}


export class FullEdgeTypePatternPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public arcTypePointingRight(): ArcTypePointingRightContext {
		return this.getTypedRuleContext(ArcTypePointingRightContext, 0) as ArcTypePointingRightContext;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePatternPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePatternPointingRight) {
	 		listener.enterFullEdgeTypePatternPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePatternPointingRight) {
	 		listener.exitFullEdgeTypePatternPointingRight(this);
		}
	}
}


export class FullEdgeTypePatternPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
	public arcTypePointingLeft(): ArcTypePointingLeftContext {
		return this.getTypedRuleContext(ArcTypePointingLeftContext, 0) as ArcTypePointingLeftContext;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePatternPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePatternPointingLeft) {
	 		listener.enterFullEdgeTypePatternPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePatternPointingLeft) {
	 		listener.exitFullEdgeTypePatternPointingLeft(this);
		}
	}
}


export class FullEdgeTypePatternUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public arcTypeUndirected(): ArcTypeUndirectedContext {
		return this.getTypedRuleContext(ArcTypeUndirectedContext, 0) as ArcTypeUndirectedContext;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePatternUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePatternUndirected) {
	 		listener.enterFullEdgeTypePatternUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePatternUndirected) {
	 		listener.exitFullEdgeTypePatternUndirected(this);
		}
	}
}


export class ArcTypePointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public arcTypeFiller(): ArcTypeFillerContext {
		return this.getTypedRuleContext(ArcTypeFillerContext, 0) as ArcTypeFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypePointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypePointingRight) {
	 		listener.enterArcTypePointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypePointingRight) {
	 		listener.exitArcTypePointingRight(this);
		}
	}
}


export class ArcTypePointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public arcTypeFiller(): ArcTypeFillerContext {
		return this.getTypedRuleContext(ArcTypeFillerContext, 0) as ArcTypeFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypePointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypePointingLeft) {
	 		listener.enterArcTypePointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypePointingLeft) {
	 		listener.exitArcTypePointingLeft(this);
		}
	}
}


export class ArcTypeUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public arcTypeFiller(): ArcTypeFillerContext {
		return this.getTypedRuleContext(ArcTypeFillerContext, 0) as ArcTypeFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypeUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypeUndirected) {
	 		listener.enterArcTypeUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypeUndirected) {
	 		listener.exitArcTypeUndirected(this);
		}
	}
}


export class ArcTypeFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeName(): EdgeTypeNameContext {
		return this.getTypedRuleContext(EdgeTypeNameContext, 0) as EdgeTypeNameContext;
	}
	public edgeTypeFiller(): EdgeTypeFillerContext {
		return this.getTypedRuleContext(EdgeTypeFillerContext, 0) as EdgeTypeFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypeFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypeFiller) {
	 		listener.enterArcTypeFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypeFiller) {
	 		listener.exitArcTypeFiller(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public abbreviatedEdgeTypePatternPointingRight(): AbbreviatedEdgeTypePatternPointingRightContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingRightContext, 0) as AbbreviatedEdgeTypePatternPointingRightContext;
	}
	public abbreviatedEdgeTypePatternPointingLeft(): AbbreviatedEdgeTypePatternPointingLeftContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingLeftContext, 0) as AbbreviatedEdgeTypePatternPointingLeftContext;
	}
	public abbreviatedEdgeTypePatternUndirected(): AbbreviatedEdgeTypePatternUndirectedContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternUndirectedContext, 0) as AbbreviatedEdgeTypePatternUndirectedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePattern) {
	 		listener.enterAbbreviatedEdgeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePattern) {
	 		listener.exitAbbreviatedEdgeTypePattern(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePatternPointingRight) {
	 		listener.enterAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePatternPointingRight) {
	 		listener.exitAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePatternPointingLeft) {
	 		listener.enterAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePatternPointingLeft) {
	 		listener.exitAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePatternUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePatternUndirected) {
	 		listener.enterAbbreviatedEdgeTypePatternUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePatternUndirected) {
	 		listener.exitAbbreviatedEdgeTypePatternUndirected(this);
		}
	}
}


export class NodeTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeRef) {
	 		listener.enterNodeTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeRef) {
	 		listener.exitNodeTypeRef(this);
		}
	}
}


export class SourceNodeTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourceNodeTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourceNodeTypeRef) {
	 		listener.enterSourceNodeTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourceNodeTypeRef) {
	 		listener.exitSourceNodeTypeRef(this);
		}
	}
}


export class DestinationNodeTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_destinationNodeTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDestinationNodeTypeRef) {
	 		listener.enterDestinationNodeTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDestinationNodeTypeRef) {
	 		listener.exitDestinationNodeTypeRef(this);
		}
	}
}


export class EdgeKindContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DIRECTED(): TerminalNode {
		return this.getToken(GqlParser.DIRECTED, 0);
	}
	public UNDIRECTED(): TerminalNode {
		return this.getToken(GqlParser.UNDIRECTED, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeKind;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeKind) {
	 		listener.enterEdgeKind(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeKind) {
	 		listener.exitEdgeKind(this);
		}
	}
}


export class EndpointDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CONNECTING(): TerminalNode {
		return this.getToken(GqlParser.CONNECTING, 0);
	}
	public enpointPairDef(): EnpointPairDefContext {
		return this.getTypedRuleContext(EnpointPairDefContext, 0) as EnpointPairDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointDef) {
	 		listener.enterEndpointDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointDef) {
	 		listener.exitEndpointDef(this);
		}
	}
}


export class EnpointPairDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public endpointPairDefPointingRight(): EndpointPairDefPointingRightContext {
		return this.getTypedRuleContext(EndpointPairDefPointingRightContext, 0) as EndpointPairDefPointingRightContext;
	}
	public endpointPairDefPointingLeft(): EndpointPairDefPointingLeftContext {
		return this.getTypedRuleContext(EndpointPairDefPointingLeftContext, 0) as EndpointPairDefPointingLeftContext;
	}
	public endpointPairDefUndirected(): EndpointPairDefUndirectedContext {
		return this.getTypedRuleContext(EndpointPairDefUndirectedContext, 0) as EndpointPairDefUndirectedContext;
	}
	public abbreviatedEdgeTypePattern(): AbbreviatedEdgeTypePatternContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext, 0) as AbbreviatedEdgeTypePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_enpointPairDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEnpointPairDef) {
	 		listener.enterEnpointPairDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEnpointPairDef) {
	 		listener.exitEnpointPairDef(this);
		}
	}
}


export class EndpointPairDefPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public connectorPointingRight(): ConnectorPointingRightContext {
		return this.getTypedRuleContext(ConnectorPointingRightContext, 0) as ConnectorPointingRightContext;
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointPairDefPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointPairDefPointingRight) {
	 		listener.enterEndpointPairDefPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointPairDefPointingRight) {
	 		listener.exitEndpointPairDefPointingRight(this);
		}
	}
}


export class EndpointPairDefPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public connectorPointingLeft(): ConnectorPointingLeftContext {
		return this.getTypedRuleContext(ConnectorPointingLeftContext, 0) as ConnectorPointingLeftContext;
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointPairDefPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointPairDefPointingLeft) {
	 		listener.enterEndpointPairDefPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointPairDefPointingLeft) {
	 		listener.exitEndpointPairDefPointingLeft(this);
		}
	}
}


export class EndpointPairDefUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public connectorUndirected(): ConnectorUndirectedContext {
		return this.getTypedRuleContext(ConnectorUndirectedContext, 0) as ConnectorUndirectedContext;
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointPairDefUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointPairDefUndirected) {
	 		listener.enterEndpointPairDefUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointPairDefUndirected) {
	 		listener.exitEndpointPairDefUndirected(this);
		}
	}
}


export class ConnectorPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TO(): TerminalNode {
		return this.getToken(GqlParser.TO, 0);
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_connectorPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConnectorPointingRight) {
	 		listener.enterConnectorPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConnectorPointingRight) {
	 		listener.exitConnectorPointingRight(this);
		}
	}
}


export class ConnectorPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_connectorPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConnectorPointingLeft) {
	 		listener.enterConnectorPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConnectorPointingLeft) {
	 		listener.exitConnectorPointingLeft(this);
		}
	}
}


export class ConnectorUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TO(): TerminalNode {
		return this.getToken(GqlParser.TO, 0);
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_connectorUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConnectorUndirected) {
	 		listener.enterConnectorUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConnectorUndirected) {
	 		listener.exitConnectorUndirected(this);
		}
	}
}


export class SourceNodeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourceNodeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourceNodeTypeName) {
	 		listener.enterSourceNodeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourceNodeTypeName) {
	 		listener.exitSourceNodeTypeName(this);
		}
	}
}


export class DestinationNodeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_destinationNodeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDestinationNodeTypeName) {
	 		listener.enterDestinationNodeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDestinationNodeTypeName) {
	 		listener.exitDestinationNodeTypeName(this);
		}
	}
}


export class LabelSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LABEL(): TerminalNode {
		return this.getToken(GqlParser.LABEL, 0);
	}
	public labelName(): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, 0) as LabelNameContext;
	}
	public LABELS(): TerminalNode {
		return this.getToken(GqlParser.LABELS, 0);
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelSetDef) {
	 		listener.enterLabelSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelSetDef) {
	 		listener.exitLabelSetDef(this);
		}
	}
}


export class PropertyTypeSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public propertyTypeDefList(): PropertyTypeDefListContext {
		return this.getTypedRuleContext(PropertyTypeDefListContext, 0) as PropertyTypeDefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyTypeSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyTypeSetDef) {
	 		listener.enterPropertyTypeSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyTypeSetDef) {
	 		listener.exitPropertyTypeSetDef(this);
		}
	}
}


export class PropertyTypeDefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyTypeDef_list(): PropertyTypeDefContext[] {
		return this.getTypedRuleContexts(PropertyTypeDefContext) as PropertyTypeDefContext[];
	}
	public propertyTypeDef(i: number): PropertyTypeDefContext {
		return this.getTypedRuleContext(PropertyTypeDefContext, i) as PropertyTypeDefContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyTypeDefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyTypeDefList) {
	 		listener.enterPropertyTypeDefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyTypeDefList) {
	 		listener.exitPropertyTypeDefList(this);
		}
	}
}


export class PropertyTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public propertyValueType(): PropertyValueTypeContext {
		return this.getTypedRuleContext(PropertyValueTypeContext, 0) as PropertyValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyTypeDef) {
	 		listener.enterPropertyTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyTypeDef) {
	 		listener.exitPropertyTypeDef(this);
		}
	}
}


export class PropertyValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyValueType) {
	 		listener.enterPropertyValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyValueType) {
	 		listener.exitPropertyValueType(this);
		}
	}
}


export class BindingTableTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public fieldTypesSpec(): FieldTypesSpecContext {
		return this.getTypedRuleContext(FieldTypesSpecContext, 0) as FieldTypesSpecContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableType) {
	 		listener.enterBindingTableType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableType) {
	 		listener.exitBindingTableType(this);
		}
	}
}


export class ValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predefinedType(): PredefinedTypeContext {
		return this.getTypedRuleContext(PredefinedTypeContext, 0) as PredefinedTypeContext;
	}
	public constructedType(): ConstructedTypeContext {
		return this.getTypedRuleContext(ConstructedTypeContext, 0) as ConstructedTypeContext;
	}
	public dynamicUnionType(): DynamicUnionTypeContext {
		return this.getTypedRuleContext(DynamicUnionTypeContext, 0) as DynamicUnionTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueType) {
	 		listener.enterValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueType) {
	 		listener.exitValueType(this);
		}
	}
}


export class TypedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOUBLE_COLON(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_COLON, 0);
	}
	public TYPED(): TerminalNode {
		return this.getToken(GqlParser.TYPED, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_typed;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTyped) {
	 		listener.enterTyped(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTyped) {
	 		listener.exitTyped(this);
		}
	}
}


export class PredefinedTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanType(): BooleanTypeContext {
		return this.getTypedRuleContext(BooleanTypeContext, 0) as BooleanTypeContext;
	}
	public charStringType(): CharStringTypeContext {
		return this.getTypedRuleContext(CharStringTypeContext, 0) as CharStringTypeContext;
	}
	public byteStringType(): ByteStringTypeContext {
		return this.getTypedRuleContext(ByteStringTypeContext, 0) as ByteStringTypeContext;
	}
	public numericType(): NumericTypeContext {
		return this.getTypedRuleContext(NumericTypeContext, 0) as NumericTypeContext;
	}
	public temporalType(): TemporalTypeContext {
		return this.getTypedRuleContext(TemporalTypeContext, 0) as TemporalTypeContext;
	}
	public refValueType(): RefValueTypeContext {
		return this.getTypedRuleContext(RefValueTypeContext, 0) as RefValueTypeContext;
	}
	public pathValueType(): PathValueTypeContext {
		return this.getTypedRuleContext(PathValueTypeContext, 0) as PathValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedType) {
	 		listener.enterPredefinedType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedType) {
	 		listener.exitPredefinedType(this);
		}
	}
}


export class BooleanTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BOOL(): TerminalNode {
		return this.getToken(GqlParser.BOOL, 0);
	}
	public BOOLEAN(): TerminalNode {
		return this.getToken(GqlParser.BOOLEAN, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanType) {
	 		listener.enterBooleanType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanType) {
	 		listener.exitBooleanType(this);
		}
	}
}


export class CharStringTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STRING(): TerminalNode {
		return this.getToken(GqlParser.STRING, 0);
	}
	public VARCHAR(): TerminalNode {
		return this.getToken(GqlParser.VARCHAR, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public maxLength(): MaxLengthContext {
		return this.getTypedRuleContext(MaxLengthContext, 0) as MaxLengthContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringType) {
	 		listener.enterCharStringType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringType) {
	 		listener.exitCharStringType(this);
		}
	}
}


export class ByteStringTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BYTES(): TerminalNode {
		return this.getToken(GqlParser.BYTES, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public minLength(): MinLengthContext {
		return this.getTypedRuleContext(MinLengthContext, 0) as MinLengthContext;
	}
	public maxLength(): MaxLengthContext {
		return this.getTypedRuleContext(MaxLengthContext, 0) as MaxLengthContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(GqlParser.BINARY, 0);
	}
	public fixedLength(): FixedLengthContext {
		return this.getTypedRuleContext(FixedLengthContext, 0) as FixedLengthContext;
	}
	public VARBINARY(): TerminalNode {
		return this.getToken(GqlParser.VARBINARY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringType) {
	 		listener.enterByteStringType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringType) {
	 		listener.exitByteStringType(this);
		}
	}
}


export class MinLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_minLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMinLength) {
	 		listener.enterMinLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMinLength) {
	 		listener.exitMinLength(this);
		}
	}
}


export class MaxLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_maxLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMaxLength) {
	 		listener.enterMaxLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMaxLength) {
	 		listener.exitMaxLength(this);
		}
	}
}


export class FixedLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fixedLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFixedLength) {
	 		listener.enterFixedLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFixedLength) {
	 		listener.exitFixedLength(this);
		}
	}
}


export class NumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public exactNumericType(): ExactNumericTypeContext {
		return this.getTypedRuleContext(ExactNumericTypeContext, 0) as ExactNumericTypeContext;
	}
	public approximateNumericType(): ApproximateNumericTypeContext {
		return this.getTypedRuleContext(ApproximateNumericTypeContext, 0) as ApproximateNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericType) {
	 		listener.enterNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericType) {
	 		listener.exitNumericType(this);
		}
	}
}


export class ExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public binaryExactNumericType(): BinaryExactNumericTypeContext {
		return this.getTypedRuleContext(BinaryExactNumericTypeContext, 0) as BinaryExactNumericTypeContext;
	}
	public decimalExactNumericType(): DecimalExactNumericTypeContext {
		return this.getTypedRuleContext(DecimalExactNumericTypeContext, 0) as DecimalExactNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_exactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExactNumericType) {
	 		listener.enterExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExactNumericType) {
	 		listener.exitExactNumericType(this);
		}
	}
}


export class BinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public signedBinaryExactNumericType(): SignedBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(SignedBinaryExactNumericTypeContext, 0) as SignedBinaryExactNumericTypeContext;
	}
	public unsignedBinaryExactNumericType(): UnsignedBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(UnsignedBinaryExactNumericTypeContext, 0) as UnsignedBinaryExactNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_binaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBinaryExactNumericType) {
	 		listener.enterBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBinaryExactNumericType) {
	 		listener.exitBinaryExactNumericType(this);
		}
	}
}


export class SignedBinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT8(): TerminalNode {
		return this.getToken(GqlParser.INT8, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public INT16(): TerminalNode {
		return this.getToken(GqlParser.INT16, 0);
	}
	public INT32(): TerminalNode {
		return this.getToken(GqlParser.INT32, 0);
	}
	public INT64(): TerminalNode {
		return this.getToken(GqlParser.INT64, 0);
	}
	public INT128(): TerminalNode {
		return this.getToken(GqlParser.INT128, 0);
	}
	public INT256(): TerminalNode {
		return this.getToken(GqlParser.INT256, 0);
	}
	public SMALLINT(): TerminalNode {
		return this.getToken(GqlParser.SMALLINT, 0);
	}
	public INT(): TerminalNode {
		return this.getToken(GqlParser.INT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BIGINT(): TerminalNode {
		return this.getToken(GqlParser.BIGINT, 0);
	}
	public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext, 0) as VerboseBinaryExactNumericTypeContext;
	}
	public SIGNED(): TerminalNode {
		return this.getToken(GqlParser.SIGNED, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_signedBinaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSignedBinaryExactNumericType) {
	 		listener.enterSignedBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSignedBinaryExactNumericType) {
	 		listener.exitSignedBinaryExactNumericType(this);
		}
	}
}


export class UnsignedBinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UINT8(): TerminalNode {
		return this.getToken(GqlParser.UINT8, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public UINT16(): TerminalNode {
		return this.getToken(GqlParser.UINT16, 0);
	}
	public UINT32(): TerminalNode {
		return this.getToken(GqlParser.UINT32, 0);
	}
	public UINT64(): TerminalNode {
		return this.getToken(GqlParser.UINT64, 0);
	}
	public UINT128(): TerminalNode {
		return this.getToken(GqlParser.UINT128, 0);
	}
	public UINT256(): TerminalNode {
		return this.getToken(GqlParser.UINT256, 0);
	}
	public USMALLINT(): TerminalNode {
		return this.getToken(GqlParser.USMALLINT, 0);
	}
	public UINT(): TerminalNode {
		return this.getToken(GqlParser.UINT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public UBIGINT(): TerminalNode {
		return this.getToken(GqlParser.UBIGINT, 0);
	}
	public UNSIGNED(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED, 0);
	}
	public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext, 0) as VerboseBinaryExactNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedBinaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedBinaryExactNumericType) {
	 		listener.enterUnsignedBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedBinaryExactNumericType) {
	 		listener.exitUnsignedBinaryExactNumericType(this);
		}
	}
}


export class VerboseBinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INTEGER8(): TerminalNode {
		return this.getToken(GqlParser.INTEGER8, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public INTEGER16(): TerminalNode {
		return this.getToken(GqlParser.INTEGER16, 0);
	}
	public INTEGER32(): TerminalNode {
		return this.getToken(GqlParser.INTEGER32, 0);
	}
	public INTEGER64(): TerminalNode {
		return this.getToken(GqlParser.INTEGER64, 0);
	}
	public INTEGER128(): TerminalNode {
		return this.getToken(GqlParser.INTEGER128, 0);
	}
	public INTEGER256(): TerminalNode {
		return this.getToken(GqlParser.INTEGER256, 0);
	}
	public SMALL(): TerminalNode {
		return this.getToken(GqlParser.SMALL, 0);
	}
	public INTEGER(): TerminalNode {
		return this.getToken(GqlParser.INTEGER, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BIG(): TerminalNode {
		return this.getToken(GqlParser.BIG, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_verboseBinaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterVerboseBinaryExactNumericType) {
	 		listener.enterVerboseBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitVerboseBinaryExactNumericType) {
	 		listener.exitVerboseBinaryExactNumericType(this);
		}
	}
}


export class DecimalExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECIMAL(): TerminalNode {
		return this.getToken(GqlParser.DECIMAL, 0);
	}
	public DEC(): TerminalNode {
		return this.getToken(GqlParser.DEC, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public scale(): ScaleContext {
		return this.getTypedRuleContext(ScaleContext, 0) as ScaleContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_decimalExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDecimalExactNumericType) {
	 		listener.enterDecimalExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDecimalExactNumericType) {
	 		listener.exitDecimalExactNumericType(this);
		}
	}
}


export class PrecisionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_DECIMAL_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_DECIMAL_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_precision;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrecision) {
	 		listener.enterPrecision(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrecision) {
	 		listener.exitPrecision(this);
		}
	}
}


export class ScaleContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_DECIMAL_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_DECIMAL_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_scale;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterScale) {
	 		listener.enterScale(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitScale) {
	 		listener.exitScale(this);
		}
	}
}


export class ApproximateNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FLOAT16(): TerminalNode {
		return this.getToken(GqlParser.FLOAT16, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public FLOAT32(): TerminalNode {
		return this.getToken(GqlParser.FLOAT32, 0);
	}
	public FLOAT64(): TerminalNode {
		return this.getToken(GqlParser.FLOAT64, 0);
	}
	public FLOAT128(): TerminalNode {
		return this.getToken(GqlParser.FLOAT128, 0);
	}
	public FLOAT256(): TerminalNode {
		return this.getToken(GqlParser.FLOAT256, 0);
	}
	public FLOAT(): TerminalNode {
		return this.getToken(GqlParser.FLOAT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public scale(): ScaleContext {
		return this.getTypedRuleContext(ScaleContext, 0) as ScaleContext;
	}
	public REAL(): TerminalNode {
		return this.getToken(GqlParser.REAL, 0);
	}
	public DOUBLE(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE, 0);
	}
	public PRECISION(): TerminalNode {
		return this.getToken(GqlParser.PRECISION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_approximateNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterApproximateNumericType) {
	 		listener.enterApproximateNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitApproximateNumericType) {
	 		listener.exitApproximateNumericType(this);
		}
	}
}


export class TemporalTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public temporalInstantType(): TemporalInstantTypeContext {
		return this.getTypedRuleContext(TemporalInstantTypeContext, 0) as TemporalInstantTypeContext;
	}
	public temporalDurationType(): TemporalDurationTypeContext {
		return this.getTypedRuleContext(TemporalDurationTypeContext, 0) as TemporalDurationTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalType) {
	 		listener.enterTemporalType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalType) {
	 		listener.exitTemporalType(this);
		}
	}
}


export class TemporalInstantTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeType(): DateTimeTypeContext {
		return this.getTypedRuleContext(DateTimeTypeContext, 0) as DateTimeTypeContext;
	}
	public localDateTimeType(): LocalDateTimeTypeContext {
		return this.getTypedRuleContext(LocalDateTimeTypeContext, 0) as LocalDateTimeTypeContext;
	}
	public dateType(): DateTypeContext {
		return this.getTypedRuleContext(DateTypeContext, 0) as DateTypeContext;
	}
	public timeType(): TimeTypeContext {
		return this.getTypedRuleContext(TimeTypeContext, 0) as TimeTypeContext;
	}
	public localTimeType(): LocalTimeTypeContext {
		return this.getTypedRuleContext(LocalTimeTypeContext, 0) as LocalTimeTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalInstantType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalInstantType) {
	 		listener.enterTemporalInstantType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalInstantType) {
	 		listener.exitTemporalInstantType(this);
		}
	}
}


export class TemporalDurationTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationType(): DurationTypeContext {
		return this.getTypedRuleContext(DurationTypeContext, 0) as DurationTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalDurationType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalDurationType) {
	 		listener.enterTemporalDurationType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalDurationType) {
	 		listener.exitTemporalDurationType(this);
		}
	}
}


export class DateTimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ZONED(): TerminalNode {
		return this.getToken(GqlParser.ZONED, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeType) {
	 		listener.enterDateTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeType) {
	 		listener.exitDateTimeType(this);
		}
	}
}


export class LocalDateTimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL(): TerminalNode {
		return this.getToken(GqlParser.LOCAL, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(GqlParser.WITHOUT, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localDateTimeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalDateTimeType) {
	 		listener.enterLocalDateTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalDateTimeType) {
	 		listener.exitLocalDateTimeType(this);
		}
	}
}


export class DateTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateType) {
	 		listener.enterDateType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateType) {
	 		listener.exitDateType(this);
		}
	}
}


export class TimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ZONED(): TerminalNode {
		return this.getToken(GqlParser.ZONED, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeType) {
	 		listener.enterTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeType) {
	 		listener.exitTimeType(this);
		}
	}
}


export class LocalTimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL(): TerminalNode {
		return this.getToken(GqlParser.LOCAL, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(GqlParser.WITHOUT, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localTimeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalTimeType) {
	 		listener.enterLocalTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalTimeType) {
	 		listener.exitLocalTimeType(this);
		}
	}
}


export class DurationTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationType) {
	 		listener.enterDurationType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationType) {
	 		listener.exitDurationType(this);
		}
	}
}


export class RefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphRefValueType(): GraphRefValueTypeContext {
		return this.getTypedRuleContext(GraphRefValueTypeContext, 0) as GraphRefValueTypeContext;
	}
	public bindingTableRefValueType(): BindingTableRefValueTypeContext {
		return this.getTypedRuleContext(BindingTableRefValueTypeContext, 0) as BindingTableRefValueTypeContext;
	}
	public nodeRefValueType(): NodeRefValueTypeContext {
		return this.getTypedRuleContext(NodeRefValueTypeContext, 0) as NodeRefValueTypeContext;
	}
	public edgeRefValueType(): EdgeRefValueTypeContext {
		return this.getTypedRuleContext(EdgeRefValueTypeContext, 0) as EdgeRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_refValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRefValueType) {
	 		listener.enterRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRefValueType) {
	 		listener.exitRefValueType(this);
		}
	}
}


export class GraphRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openGraphRefValueType(): OpenGraphRefValueTypeContext {
		return this.getTypedRuleContext(OpenGraphRefValueTypeContext, 0) as OpenGraphRefValueTypeContext;
	}
	public closedGraphRefValueType(): ClosedGraphRefValueTypeContext {
		return this.getTypedRuleContext(ClosedGraphRefValueTypeContext, 0) as ClosedGraphRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphRefValueType) {
	 		listener.enterGraphRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphRefValueType) {
	 		listener.exitGraphRefValueType(this);
		}
	}
}


export class OpenGraphRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openGraphRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenGraphRefValueType) {
	 		listener.enterOpenGraphRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenGraphRefValueType) {
	 		listener.exitOpenGraphRefValueType(this);
		}
	}
}


export class ClosedGraphRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphTypeSpec(): GraphTypeSpecContext {
		return this.getTypedRuleContext(GraphTypeSpecContext, 0) as GraphTypeSpecContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedGraphRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedGraphRefValueType) {
	 		listener.enterClosedGraphRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedGraphRefValueType) {
	 		listener.exitClosedGraphRefValueType(this);
		}
	}
}


export class BindingTableRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingTableType(): BindingTableTypeContext {
		return this.getTypedRuleContext(BindingTableTypeContext, 0) as BindingTableTypeContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableRefValueType) {
	 		listener.enterBindingTableRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableRefValueType) {
	 		listener.exitBindingTableRefValueType(this);
		}
	}
}


export class NodeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openNodeRefValueType(): OpenNodeRefValueTypeContext {
		return this.getTypedRuleContext(OpenNodeRefValueTypeContext, 0) as OpenNodeRefValueTypeContext;
	}
	public closedNodeRefValueType(): ClosedNodeRefValueTypeContext {
		return this.getTypedRuleContext(ClosedNodeRefValueTypeContext, 0) as ClosedNodeRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeRefValueType) {
	 		listener.enterNodeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeRefValueType) {
	 		listener.exitNodeRefValueType(this);
		}
	}
}


export class OpenNodeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeSynonym(): NodeSynonymContext {
		return this.getTypedRuleContext(NodeSynonymContext, 0) as NodeSynonymContext;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openNodeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenNodeRefValueType) {
	 		listener.enterOpenNodeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenNodeRefValueType) {
	 		listener.exitOpenNodeRefValueType(this);
		}
	}
}


export class ClosedNodeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeDef(): EdgeTypeDefContext {
		return this.getTypedRuleContext(EdgeTypeDefContext, 0) as EdgeTypeDefContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedNodeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedNodeRefValueType) {
	 		listener.enterClosedNodeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedNodeRefValueType) {
	 		listener.exitClosedNodeRefValueType(this);
		}
	}
}


export class EdgeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openEdgeRefValueType(): OpenEdgeRefValueTypeContext {
		return this.getTypedRuleContext(OpenEdgeRefValueTypeContext, 0) as OpenEdgeRefValueTypeContext;
	}
	public closedEdgeRefValueType(): ClosedEdgeRefValueTypeContext {
		return this.getTypedRuleContext(ClosedEdgeRefValueTypeContext, 0) as ClosedEdgeRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeRefValueType) {
	 		listener.enterEdgeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeRefValueType) {
	 		listener.exitEdgeRefValueType(this);
		}
	}
}


export class OpenEdgeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeSynonym(): EdgeSynonymContext {
		return this.getTypedRuleContext(EdgeSynonymContext, 0) as EdgeSynonymContext;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openEdgeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenEdgeRefValueType) {
	 		listener.enterOpenEdgeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenEdgeRefValueType) {
	 		listener.exitOpenEdgeRefValueType(this);
		}
	}
}


export class ClosedEdgeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeDef(): EdgeTypeDefContext {
		return this.getTypedRuleContext(EdgeTypeDefContext, 0) as EdgeTypeDefContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedEdgeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedEdgeRefValueType) {
	 		listener.enterClosedEdgeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedEdgeRefValueType) {
	 		listener.exitClosedEdgeRefValueType(this);
		}
	}
}


export class ConstructedTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueType(): ListValueTypeContext {
		return this.getTypedRuleContext(ListValueTypeContext, 0) as ListValueTypeContext;
	}
	public recordType(): RecordTypeContext {
		return this.getTypedRuleContext(RecordTypeContext, 0) as RecordTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_constructedType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConstructedType) {
	 		listener.enterConstructedType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConstructedType) {
	 		listener.exitConstructedType(this);
		}
	}
}


export class ListValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueTypeName(): ListValueTypeNameContext {
		return this.getTypedRuleContext(ListValueTypeNameContext, 0) as ListValueTypeNameContext;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public predefinedType(): PredefinedTypeContext {
		return this.getTypedRuleContext(PredefinedTypeContext, 0) as PredefinedTypeContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
	public LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACKET, 0);
	}
	public maxLength(): MaxLengthContext {
		return this.getTypedRuleContext(MaxLengthContext, 0) as MaxLengthContext;
	}
	public RIGHT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueType) {
	 		listener.enterListValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueType) {
	 		listener.exitListValueType(this);
		}
	}
}


export class ListValueTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueTypeNameSynonym(): ListValueTypeNameSynonymContext {
		return this.getTypedRuleContext(ListValueTypeNameSynonymContext, 0) as ListValueTypeNameSynonymContext;
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueTypeName) {
	 		listener.enterListValueTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueTypeName) {
	 		listener.exitListValueTypeName(this);
		}
	}
}


export class ListValueTypeNameSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIST(): TerminalNode {
		return this.getToken(GqlParser.LIST, 0);
	}
	public ARRAY(): TerminalNode {
		return this.getToken(GqlParser.ARRAY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueTypeNameSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueTypeNameSynonym) {
	 		listener.enterListValueTypeNameSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueTypeNameSynonym) {
	 		listener.exitListValueTypeNameSynonym(this);
		}
	}
}


export class RecordTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RECORD(): TerminalNode {
		return this.getToken(GqlParser.RECORD, 0);
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public fieldTypesSpec(): FieldTypesSpecContext {
		return this.getTypedRuleContext(FieldTypesSpecContext, 0) as FieldTypesSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordType) {
	 		listener.enterRecordType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordType) {
	 		listener.exitRecordType(this);
		}
	}
}


export class FieldTypesSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public fieldTypeList(): FieldTypeListContext {
		return this.getTypedRuleContext(FieldTypeListContext, 0) as FieldTypeListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldTypesSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldTypesSpec) {
	 		listener.enterFieldTypesSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldTypesSpec) {
	 		listener.exitFieldTypesSpec(this);
		}
	}
}


export class FieldTypeListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldType_list(): FieldTypeContext[] {
		return this.getTypedRuleContexts(FieldTypeContext) as FieldTypeContext[];
	}
	public fieldType(i: number): FieldTypeContext {
		return this.getTypedRuleContext(FieldTypeContext, i) as FieldTypeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldTypeList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldTypeList) {
	 		listener.enterFieldTypeList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldTypeList) {
	 		listener.exitFieldTypeList(this);
		}
	}
}


export class DynamicUnionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openDynamicUnionType(): OpenDynamicUnionTypeContext {
		return this.getTypedRuleContext(OpenDynamicUnionTypeContext, 0) as OpenDynamicUnionTypeContext;
	}
	public dynamicPropertyValueType(): DynamicPropertyValueTypeContext {
		return this.getTypedRuleContext(DynamicPropertyValueTypeContext, 0) as DynamicPropertyValueTypeContext;
	}
	public closedDynamicUnionType(): ClosedDynamicUnionTypeContext {
		return this.getTypedRuleContext(ClosedDynamicUnionTypeContext, 0) as ClosedDynamicUnionTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dynamicUnionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDynamicUnionType) {
	 		listener.enterDynamicUnionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDynamicUnionType) {
	 		listener.exitDynamicUnionType(this);
		}
	}
}


export class OpenDynamicUnionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openDynamicUnionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenDynamicUnionType) {
	 		listener.enterOpenDynamicUnionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenDynamicUnionType) {
	 		listener.exitOpenDynamicUnionType(this);
		}
	}
}


export class DynamicPropertyValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dynamicPropertyValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDynamicPropertyValueType) {
	 		listener.enterDynamicPropertyValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDynamicPropertyValueType) {
	 		listener.exitDynamicPropertyValueType(this);
		}
	}
}


export class ClosedDynamicUnionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public componentTypeList(): ComponentTypeListContext {
		return this.getTypedRuleContext(ComponentTypeListContext, 0) as ComponentTypeListContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedDynamicUnionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedDynamicUnionType) {
	 		listener.enterClosedDynamicUnionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedDynamicUnionType) {
	 		listener.exitClosedDynamicUnionType(this);
		}
	}
}


export class ComponentTypeListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public componentType_list(): ComponentTypeContext[] {
		return this.getTypedRuleContexts(ComponentTypeContext) as ComponentTypeContext[];
	}
	public componentType(i: number): ComponentTypeContext {
		return this.getTypedRuleContext(ComponentTypeContext, i) as ComponentTypeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_componentTypeList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComponentTypeList) {
	 		listener.enterComponentTypeList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComponentTypeList) {
	 		listener.exitComponentTypeList(this);
		}
	}
}


export class ComponentTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_componentType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComponentType) {
	 		listener.enterComponentType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComponentType) {
	 		listener.exitComponentType(this);
		}
	}
}


export class PathValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueType) {
	 		listener.enterPathValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueType) {
	 		listener.exitPathValueType(this);
		}
	}
}


export class NotNullContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_notNull;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNotNull) {
	 		listener.enterNotNull(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNotNull) {
	 		listener.exitNotNull(this);
		}
	}
}


export class FieldTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldName(): FieldNameContext {
		return this.getTypedRuleContext(FieldNameContext, 0) as FieldNameContext;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldType) {
	 		listener.enterFieldType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldType) {
	 		listener.exitFieldType(this);
		}
	}
}


export class SchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public absoluteCatalogSchemaRef(): AbsoluteCatalogSchemaRefContext {
		return this.getTypedRuleContext(AbsoluteCatalogSchemaRefContext, 0) as AbsoluteCatalogSchemaRefContext;
	}
	public relativeCatalogSchemaRef(): RelativeCatalogSchemaRefContext {
		return this.getTypedRuleContext(RelativeCatalogSchemaRefContext, 0) as RelativeCatalogSchemaRefContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_schemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSchemaRef) {
	 		listener.enterSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSchemaRef) {
	 		listener.exitSchemaRef(this);
		}
	}
}


export class AbsoluteCatalogSchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
	public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
		return this.getTypedRuleContext(AbsoluteDirectoryPathContext, 0) as AbsoluteDirectoryPathContext;
	}
	public schemaName(): SchemaNameContext {
		return this.getTypedRuleContext(SchemaNameContext, 0) as SchemaNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_absoluteCatalogSchemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbsoluteCatalogSchemaRef) {
	 		listener.enterAbsoluteCatalogSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbsoluteCatalogSchemaRef) {
	 		listener.exitAbsoluteCatalogSchemaRef(this);
		}
	}
}


export class CatalogSchemaParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
		return this.getTypedRuleContext(AbsoluteDirectoryPathContext, 0) as AbsoluteDirectoryPathContext;
	}
	public schemaName(): SchemaNameContext {
		return this.getTypedRuleContext(SchemaNameContext, 0) as SchemaNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogSchemaParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogSchemaParentAndName) {
	 		listener.enterCatalogSchemaParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogSchemaParentAndName) {
	 		listener.exitCatalogSchemaParentAndName(this);
		}
	}
}


export class RelativeCatalogSchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predefinedSchemaRef(): PredefinedSchemaRefContext {
		return this.getTypedRuleContext(PredefinedSchemaRefContext, 0) as PredefinedSchemaRefContext;
	}
	public relativeDirectoryPath(): RelativeDirectoryPathContext {
		return this.getTypedRuleContext(RelativeDirectoryPathContext, 0) as RelativeDirectoryPathContext;
	}
	public schemaName(): SchemaNameContext {
		return this.getTypedRuleContext(SchemaNameContext, 0) as SchemaNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_relativeCatalogSchemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRelativeCatalogSchemaRef) {
	 		listener.enterRelativeCatalogSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRelativeCatalogSchemaRef) {
	 		listener.exitRelativeCatalogSchemaRef(this);
		}
	}
}


export class PredefinedSchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HOME_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.HOME_SCHEMA, 0);
	}
	public CURRENT_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_SCHEMA, 0);
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedSchemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedSchemaRef) {
	 		listener.enterPredefinedSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedSchemaRef) {
	 		listener.exitPredefinedSchemaRef(this);
		}
	}
}


export class AbsoluteDirectoryPathContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
	public simpleDirectoryPath(): SimpleDirectoryPathContext {
		return this.getTypedRuleContext(SimpleDirectoryPathContext, 0) as SimpleDirectoryPathContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_absoluteDirectoryPath;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbsoluteDirectoryPath) {
	 		listener.enterAbsoluteDirectoryPath(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbsoluteDirectoryPath) {
	 		listener.exitAbsoluteDirectoryPath(this);
		}
	}
}


export class RelativeDirectoryPathContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOUBLE_PERIOD_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.DOUBLE_PERIOD);
	}
	public DOUBLE_PERIOD(i: number): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_PERIOD, i);
	}
	public SOLIDUS_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.SOLIDUS);
	}
	public SOLIDUS(i: number): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, i);
	}
	public simpleDirectoryPath(): SimpleDirectoryPathContext {
		return this.getTypedRuleContext(SimpleDirectoryPathContext, 0) as SimpleDirectoryPathContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_relativeDirectoryPath;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRelativeDirectoryPath) {
	 		listener.enterRelativeDirectoryPath(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRelativeDirectoryPath) {
	 		listener.exitRelativeDirectoryPath(this);
		}
	}
}


export class SimpleDirectoryPathContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public directoryName_list(): DirectoryNameContext[] {
		return this.getTypedRuleContexts(DirectoryNameContext) as DirectoryNameContext[];
	}
	public directoryName(i: number): DirectoryNameContext {
		return this.getTypedRuleContext(DirectoryNameContext, i) as DirectoryNameContext;
	}
	public SOLIDUS_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.SOLIDUS);
	}
	public SOLIDUS(i: number): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleDirectoryPath;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleDirectoryPath) {
	 		listener.enterSimpleDirectoryPath(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleDirectoryPath) {
	 		listener.exitSimpleDirectoryPath(this);
		}
	}
}


export class GraphRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public graphName(): GraphNameContext {
		return this.getTypedRuleContext(GraphNameContext, 0) as GraphNameContext;
	}
	public delimitedGraphName(): DelimitedGraphNameContext {
		return this.getTypedRuleContext(DelimitedGraphNameContext, 0) as DelimitedGraphNameContext;
	}
	public homeGraph(): HomeGraphContext {
		return this.getTypedRuleContext(HomeGraphContext, 0) as HomeGraphContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphRef) {
	 		listener.enterGraphRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphRef) {
	 		listener.exitGraphRef(this);
		}
	}
}


export class CatalogGraphParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphName(): GraphNameContext {
		return this.getTypedRuleContext(GraphNameContext, 0) as GraphNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogGraphParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogGraphParentAndName) {
	 		listener.enterCatalogGraphParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogGraphParentAndName) {
	 		listener.exitCatalogGraphParentAndName(this);
		}
	}
}


export class HomeGraphContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HOME_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0);
	}
	public HOME_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_GRAPH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_homeGraph;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterHomeGraph) {
	 		listener.enterHomeGraph(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitHomeGraph) {
	 		listener.exitHomeGraph(this);
		}
	}
}


export class GraphTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext, 0) as CatalogGraphTypeParentAndNameContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeRef) {
	 		listener.enterGraphTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeRef) {
	 		listener.exitGraphTypeRef(this);
		}
	}
}


export class CatalogGraphTypeParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphTypeName(): GraphTypeNameContext {
		return this.getTypedRuleContext(GraphTypeNameContext, 0) as GraphTypeNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogGraphTypeParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogGraphTypeParentAndName) {
	 		listener.enterCatalogGraphTypeParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogGraphTypeParentAndName) {
	 		listener.exitCatalogGraphTypeParentAndName(this);
		}
	}
}


export class BindingTableRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public bindingTableName(): BindingTableNameContext {
		return this.getTypedRuleContext(BindingTableNameContext, 0) as BindingTableNameContext;
	}
	public delimitedBindingTableName(): DelimitedBindingTableNameContext {
		return this.getTypedRuleContext(DelimitedBindingTableNameContext, 0) as DelimitedBindingTableNameContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableRef) {
	 		listener.enterBindingTableRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableRef) {
	 		listener.exitBindingTableRef(this);
		}
	}
}


export class CatalogBindingTableParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingTableName(): BindingTableNameContext {
		return this.getTypedRuleContext(BindingTableNameContext, 0) as BindingTableNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogBindingTableParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogBindingTableParentAndName) {
	 		listener.enterCatalogBindingTableParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogBindingTableParentAndName) {
	 		listener.exitCatalogBindingTableParentAndName(this);
		}
	}
}


export class ProcedureRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogProcedureParentAndName(): CatalogProcedureParentAndNameContext {
		return this.getTypedRuleContext(CatalogProcedureParentAndNameContext, 0) as CatalogProcedureParentAndNameContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureRef) {
	 		listener.enterProcedureRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureRef) {
	 		listener.exitProcedureRef(this);
		}
	}
}


export class CatalogProcedureParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureName(): ProcedureNameContext {
		return this.getTypedRuleContext(ProcedureNameContext, 0) as ProcedureNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogProcedureParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogProcedureParentAndName) {
	 		listener.enterCatalogProcedureParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogProcedureParentAndName) {
	 		listener.exitCatalogProcedureParentAndName(this);
		}
	}
}


export class CatalogObjectParentRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
	public objectName_list(): ObjectNameContext[] {
		return this.getTypedRuleContexts(ObjectNameContext) as ObjectNameContext[];
	}
	public objectName(i: number): ObjectNameContext {
		return this.getTypedRuleContext(ObjectNameContext, i) as ObjectNameContext;
	}
	public PERIOD_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.PERIOD);
	}
	public PERIOD(i: number): TerminalNode {
		return this.getToken(GqlParser.PERIOD, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogObjectParentRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogObjectParentRef) {
	 		listener.enterCatalogObjectParentRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogObjectParentRef) {
	 		listener.exitCatalogObjectParentRef(this);
		}
	}
}


export class RefParameterContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameter(): ParameterContext {
		return this.getTypedRuleContext(ParameterContext, 0) as ParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_refParameter;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRefParameter) {
	 		listener.enterRefParameter(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRefParameter) {
	 		listener.exitRefParameter(this);
		}
	}
}


export class ExternalObjectRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_externalObjectRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExternalObjectRef) {
	 		listener.enterExternalObjectRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExternalObjectRef) {
	 		listener.exitExternalObjectRef(this);
		}
	}
}


export class SearchConditionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_searchCondition;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSearchCondition) {
	 		listener.enterSearchCondition(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSearchCondition) {
	 		listener.exitSearchCondition(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public comparisonPredicate(): ComparisonPredicateContext {
		return this.getTypedRuleContext(ComparisonPredicateContext, 0) as ComparisonPredicateContext;
	}
	public existsPredicate(): ExistsPredicateContext {
		return this.getTypedRuleContext(ExistsPredicateContext, 0) as ExistsPredicateContext;
	}
	public nullPredicate(): NullPredicateContext {
		return this.getTypedRuleContext(NullPredicateContext, 0) as NullPredicateContext;
	}
	public valueTypePredicate(): ValueTypePredicateContext {
		return this.getTypedRuleContext(ValueTypePredicateContext, 0) as ValueTypePredicateContext;
	}
	public normalizedPredicate(): NormalizedPredicateContext {
		return this.getTypedRuleContext(NormalizedPredicateContext, 0) as NormalizedPredicateContext;
	}
	public directedPredicate(): DirectedPredicateContext {
		return this.getTypedRuleContext(DirectedPredicateContext, 0) as DirectedPredicateContext;
	}
	public labeledPredicate(): LabeledPredicateContext {
		return this.getTypedRuleContext(LabeledPredicateContext, 0) as LabeledPredicateContext;
	}
	public sourceOrDestinationPredicate(): SourceOrDestinationPredicateContext {
		return this.getTypedRuleContext(SourceOrDestinationPredicateContext, 0) as SourceOrDestinationPredicateContext;
	}
	public allDifferentPredicate(): AllDifferentPredicateContext {
		return this.getTypedRuleContext(AllDifferentPredicateContext, 0) as AllDifferentPredicateContext;
	}
	public samePredicate(): SamePredicateContext {
		return this.getTypedRuleContext(SamePredicateContext, 0) as SamePredicateContext;
	}
	public propertyExistsPredicate(): PropertyExistsPredicateContext {
		return this.getTypedRuleContext(PropertyExistsPredicateContext, 0) as PropertyExistsPredicateContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredicate) {
	 		listener.enterPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredicate) {
	 		listener.exitPredicate(this);
		}
	}
}


export class ComparisonPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public comparisonPredicand(): ComparisonPredicandContext {
		return this.getTypedRuleContext(ComparisonPredicandContext, 0) as ComparisonPredicandContext;
	}
	public comparisonPredicatePart2(): ComparisonPredicatePart2Context {
		return this.getTypedRuleContext(ComparisonPredicatePart2Context, 0) as ComparisonPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonPredicate) {
	 		listener.enterComparisonPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonPredicate) {
	 		listener.exitComparisonPredicate(this);
		}
	}
}


export class ComparisonPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getTypedRuleContext(ComparisonOperatorContext, 0) as ComparisonOperatorContext;
	}
	public comparisonPredicand(): ComparisonPredicandContext {
		return this.getTypedRuleContext(ComparisonPredicandContext, 0) as ComparisonPredicandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonPredicatePart2) {
	 		listener.enterComparisonPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonPredicatePart2) {
	 		listener.exitComparisonPredicatePart2(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public equals(): EqualsContext {
		return this.getTypedRuleContext(EqualsContext, 0) as EqualsContext;
	}
	public notEquals(): NotEqualsContext {
		return this.getTypedRuleContext(NotEqualsContext, 0) as NotEqualsContext;
	}
	public lessThen(): LessThenContext {
		return this.getTypedRuleContext(LessThenContext, 0) as LessThenContext;
	}
	public greaterThan(): GreaterThanContext {
		return this.getTypedRuleContext(GreaterThanContext, 0) as GreaterThanContext;
	}
	public lessThanOrEquals(): LessThanOrEqualsContext {
		return this.getTypedRuleContext(LessThanOrEqualsContext, 0) as LessThanOrEqualsContext;
	}
	public graterThanOrEquals(): GraterThanOrEqualsContext {
		return this.getTypedRuleContext(GraterThanOrEqualsContext, 0) as GraterThanOrEqualsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonOperator;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonOperator) {
	 		listener.enterComparisonOperator(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonOperator) {
	 		listener.exitComparisonOperator(this);
		}
	}
}


export class EqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_equals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEquals) {
	 		listener.enterEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEquals) {
	 		listener.exitEquals(this);
		}
	}
}


export class NotEqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_notEquals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNotEquals) {
	 		listener.enterNotEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNotEquals) {
	 		listener.exitNotEquals(this);
		}
	}
}


export class LessThenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lessThen;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLessThen) {
	 		listener.enterLessThen(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLessThen) {
	 		listener.exitLessThen(this);
		}
	}
}


export class GreaterThanContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_greaterThan;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGreaterThan) {
	 		listener.enterGreaterThan(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGreaterThan) {
	 		listener.exitGreaterThan(this);
		}
	}
}


export class LessThanOrEqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lessThanOrEquals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLessThanOrEquals) {
	 		listener.enterLessThanOrEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLessThanOrEquals) {
	 		listener.exitLessThanOrEquals(this);
		}
	}
}


export class GraterThanOrEqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graterThanOrEquals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraterThanOrEquals) {
	 		listener.enterGraterThanOrEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraterThanOrEquals) {
	 		listener.exitGraterThanOrEquals(this);
		}
	}
}


export class ComparisonPredicandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public commonValueExpr(): CommonValueExprContext {
		return this.getTypedRuleContext(CommonValueExprContext, 0) as CommonValueExprContext;
	}
	public booleanPredicand(): BooleanPredicandContext {
		return this.getTypedRuleContext(BooleanPredicandContext, 0) as BooleanPredicandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonPredicand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonPredicand) {
	 		listener.enterComparisonPredicand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonPredicand) {
	 		listener.exitComparisonPredicand(this);
		}
	}
}


export class ExistsPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXISTS(): TerminalNode {
		return this.getToken(GqlParser.EXISTS, 0);
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public graphPattern(): GraphPatternContext {
		return this.getTypedRuleContext(GraphPatternContext, 0) as GraphPatternContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public matchStatmentBlock(): MatchStatmentBlockContext {
		return this.getTypedRuleContext(MatchStatmentBlockContext, 0) as MatchStatmentBlockContext;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_existsPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExistsPredicate) {
	 		listener.enterExistsPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExistsPredicate) {
	 		listener.exitExistsPredicate(this);
		}
	}
}


export class NullPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public nullPredicatePart2(): NullPredicatePart2Context {
		return this.getTypedRuleContext(NullPredicatePart2Context, 0) as NullPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullPredicate) {
	 		listener.enterNullPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullPredicate) {
	 		listener.exitNullPredicate(this);
		}
	}
}


export class NullPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullPredicatePart2) {
	 		listener.enterNullPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullPredicatePart2) {
	 		listener.exitNullPredicatePart2(this);
		}
	}
}


export class ValueTypePredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
		return this.getTypedRuleContext(ValueTypePredicatePart2Context, 0) as ValueTypePredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueTypePredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueTypePredicate) {
	 		listener.enterValueTypePredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueTypePredicate) {
	 		listener.exitValueTypePredicate(this);
		}
	}
}


export class ValueTypePredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueTypePredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueTypePredicatePart2) {
	 		listener.enterValueTypePredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueTypePredicatePart2) {
	 		listener.exitValueTypePredicatePart2(this);
		}
	}
}


export class NormalizedPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public stringValueExpr(): StringValueExprContext {
		return this.getTypedRuleContext(StringValueExprContext, 0) as StringValueExprContext;
	}
	public normalizedPredicatePart2(): NormalizedPredicatePart2Context {
		return this.getTypedRuleContext(NormalizedPredicatePart2Context, 0) as NormalizedPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalizedPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalizedPredicate) {
	 		listener.enterNormalizedPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalizedPredicate) {
	 		listener.exitNormalizedPredicate(this);
		}
	}
}


export class NormalizedPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public NORMALIZED(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZED, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public normalForm(): NormalFormContext {
		return this.getTypedRuleContext(NormalFormContext, 0) as NormalFormContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalizedPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalizedPredicatePart2) {
	 		listener.enterNormalizedPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalizedPredicatePart2) {
	 		listener.exitNormalizedPredicatePart2(this);
		}
	}
}


export class DirectedPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public directedPredicate(): DirectedPredicateContext {
		return this.getTypedRuleContext(DirectedPredicateContext, 0) as DirectedPredicateContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_directedPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDirectedPredicate) {
	 		listener.enterDirectedPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDirectedPredicate) {
	 		listener.exitDirectedPredicate(this);
		}
	}
}


export class DirectedPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public DIRECTED(): TerminalNode {
		return this.getToken(GqlParser.DIRECTED, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_directedPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDirectedPredicatePart2) {
	 		listener.enterDirectedPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDirectedPredicatePart2) {
	 		listener.exitDirectedPredicatePart2(this);
		}
	}
}


export class LabeledPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labeledPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabeledPredicate) {
	 		listener.enterLabeledPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabeledPredicate) {
	 		listener.exitLabeledPredicate(this);
		}
	}
}


export class LabeledPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public isLabeledOrColon(): IsLabeledOrColonContext {
		return this.getTypedRuleContext(IsLabeledOrColonContext, 0) as IsLabeledOrColonContext;
	}
	public labelExpr(): LabelExprContext {
		return this.getTypedRuleContext(LabelExprContext, 0) as LabelExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labeledPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabeledPredicatePart2) {
	 		listener.enterLabeledPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabeledPredicatePart2) {
	 		listener.exitLabeledPredicatePart2(this);
		}
	}
}


export class IsLabeledOrColonContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public LABELED(): TerminalNode {
		return this.getToken(GqlParser.LABELED, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_isLabeledOrColon;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIsLabeledOrColon) {
	 		listener.enterIsLabeledOrColon(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIsLabeledOrColon) {
	 		listener.exitIsLabeledOrColon(this);
		}
	}
}


export class SourceOrDestinationPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeRef(): NodeRefContext {
		return this.getTypedRuleContext(NodeRefContext, 0) as NodeRefContext;
	}
	public sourcePredicatePart2(): SourcePredicatePart2Context {
		return this.getTypedRuleContext(SourcePredicatePart2Context, 0) as SourcePredicatePart2Context;
	}
	public destinationPredicatePart2(): DestinationPredicatePart2Context {
		return this.getTypedRuleContext(DestinationPredicatePart2Context, 0) as DestinationPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourceOrDestinationPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourceOrDestinationPredicate) {
	 		listener.enterSourceOrDestinationPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourceOrDestinationPredicate) {
	 		listener.exitSourceOrDestinationPredicate(this);
		}
	}
}


export class NodeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeRef) {
	 		listener.enterNodeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeRef) {
	 		listener.exitNodeRef(this);
		}
	}
}


export class SourcePredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public SOURCE(): TerminalNode {
		return this.getToken(GqlParser.SOURCE, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public edgeRef(): EdgeRefContext {
		return this.getTypedRuleContext(EdgeRefContext, 0) as EdgeRefContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourcePredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourcePredicatePart2) {
	 		listener.enterSourcePredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourcePredicatePart2) {
	 		listener.exitSourcePredicatePart2(this);
		}
	}
}


export class DestinationPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public DESTINATION(): TerminalNode {
		return this.getToken(GqlParser.DESTINATION, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public edgeRef(): EdgeRefContext {
		return this.getTypedRuleContext(EdgeRefContext, 0) as EdgeRefContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_destinationPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDestinationPredicatePart2) {
	 		listener.enterDestinationPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDestinationPredicatePart2) {
	 		listener.exitDestinationPredicatePart2(this);
		}
	}
}


export class EdgeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeRef) {
	 		listener.enterEdgeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeRef) {
	 		listener.exitEdgeRef(this);
		}
	}
}


export class AllDifferentPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL_DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.ALL_DIFFERENT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef_list(): ElementVarRefContext[] {
		return this.getTypedRuleContexts(ElementVarRefContext) as ElementVarRefContext[];
	}
	public elementVarRef(i: number): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, i) as ElementVarRefContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_allDifferentPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAllDifferentPredicate) {
	 		listener.enterAllDifferentPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAllDifferentPredicate) {
	 		listener.exitAllDifferentPredicate(this);
		}
	}
}


export class SamePredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SAME(): TerminalNode {
		return this.getToken(GqlParser.SAME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef_list(): ElementVarRefContext[] {
		return this.getTypedRuleContexts(ElementVarRefContext) as ElementVarRefContext[];
	}
	public elementVarRef(i: number): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, i) as ElementVarRefContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_samePredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSamePredicate) {
	 		listener.enterSamePredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSamePredicate) {
	 		listener.exitSamePredicate(this);
		}
	}
}


export class PropertyExistsPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PROPERTY_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY_EXISTS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyExistsPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyExistsPredicate) {
	 		listener.enterPropertyExistsPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyExistsPredicate) {
	 		listener.exitPropertyExistsPredicate(this);
		}
	}
}


export class ValueSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public literal(): LiteralContext {
		return this.getTypedRuleContext(LiteralContext, 0) as LiteralContext;
	}
	public parameterValueSpec(): ParameterValueSpecContext {
		return this.getTypedRuleContext(ParameterValueSpecContext, 0) as ParameterValueSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueSpec) {
	 		listener.enterValueSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueSpec) {
	 		listener.exitValueSpec(this);
		}
	}
}


export class UnsignedValueSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedLiteral(): UnsignedLiteralContext {
		return this.getTypedRuleContext(UnsignedLiteralContext, 0) as UnsignedLiteralContext;
	}
	public parameterValueSpec(): ParameterValueSpecContext {
		return this.getTypedRuleContext(ParameterValueSpecContext, 0) as ParameterValueSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedValueSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedValueSpec) {
	 		listener.enterUnsignedValueSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedValueSpec) {
	 		listener.exitUnsignedValueSpec(this);
		}
	}
}


export class UnsignedIntSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
	public parameter(): ParameterContext {
		return this.getTypedRuleContext(ParameterContext, 0) as ParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedIntSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedIntSpec) {
	 		listener.enterUnsignedIntSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedIntSpec) {
	 		listener.exitUnsignedIntSpec(this);
		}
	}
}


export class ParameterValueSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameter(): ParameterContext {
		return this.getTypedRuleContext(ParameterContext, 0) as ParameterContext;
	}
	public predefinedParameter(): PredefinedParameterContext {
		return this.getTypedRuleContext(PredefinedParameterContext, 0) as PredefinedParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parameterValueSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParameterValueSpec) {
	 		listener.enterParameterValueSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParameterValueSpec) {
	 		listener.exitParameterValueSpec(this);
		}
	}
}


export class PredefinedParameterContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_USER(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_USER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedParameter;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedParameter) {
	 		listener.enterPredefinedParameter(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedParameter) {
	 		listener.exitPredefinedParameter(this);
		}
	}
}


export class ValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public commonValueExpr(): CommonValueExprContext {
		return this.getTypedRuleContext(CommonValueExprContext, 0) as CommonValueExprContext;
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueExpr) {
	 		listener.enterValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueExpr) {
	 		listener.exitValueExpr(this);
		}
	}
}


export class CommonValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public stringValueExpr(): StringValueExprContext {
		return this.getTypedRuleContext(StringValueExprContext, 0) as StringValueExprContext;
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
	public recordValueExpr(): RecordValueExprContext {
		return this.getTypedRuleContext(RecordValueExprContext, 0) as RecordValueExprContext;
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
	public refValueExpr(): RefValueExprContext {
		return this.getTypedRuleContext(RefValueExprContext, 0) as RefValueExprContext;
	}
	public commonValuePropertiesGroup(): CommonValuePropertiesGroupContext {
		return this.getTypedRuleContext(CommonValuePropertiesGroupContext, 0) as CommonValuePropertiesGroupContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_commonValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCommonValueExpr) {
	 		listener.enterCommonValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCommonValueExpr) {
	 		listener.exitCommonValueExpr(this);
		}
	}
}


export class CommonValuePropertiesGroupContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyName_list(): PropertyNameContext[] {
		return this.getTypedRuleContexts(PropertyNameContext) as PropertyNameContext[];
	}
	public propertyName(i: number): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, i) as PropertyNameContext;
	}
	public PERIOD_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.PERIOD);
	}
	public PERIOD(i: number): TerminalNode {
		return this.getToken(GqlParser.PERIOD, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_commonValuePropertiesGroup;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCommonValuePropertiesGroup) {
	 		listener.enterCommonValuePropertiesGroup(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCommonValuePropertiesGroup) {
	 		listener.exitCommonValuePropertiesGroup(this);
		}
	}
}


export class RefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphRefValueExpr(): GraphRefValueExprContext {
		return this.getTypedRuleContext(GraphRefValueExprContext, 0) as GraphRefValueExprContext;
	}
	public bindingTableRefValueExpr(): BindingTableRefValueExprContext {
		return this.getTypedRuleContext(BindingTableRefValueExprContext, 0) as BindingTableRefValueExprContext;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		return this.getTypedRuleContext(EdgeRefValueExprContext, 0) as EdgeRefValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_refValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRefValueExpr) {
	 		listener.enterRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRefValueExpr) {
	 		listener.exitRefValueExpr(this);
		}
	}
}


export class GraphRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphRefValueExpr) {
	 		listener.enterGraphRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphRefValueExpr) {
	 		listener.exitGraphRefValueExpr(this);
		}
	}
}


export class BindingTableRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public bindingTableExpr(): BindingTableExprContext {
		return this.getTypedRuleContext(BindingTableExprContext, 0) as BindingTableExprContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableRefValueExpr) {
	 		listener.enterBindingTableRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableRefValueExpr) {
	 		listener.exitBindingTableRefValueExpr(this);
		}
	}
}


export class NodeRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeRefValueExpr) {
	 		listener.enterNodeRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeRefValueExpr) {
	 		listener.exitNodeRefValueExpr(this);
		}
	}
}


export class EdgeRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeRefValueExpr) {
	 		listener.enterEdgeRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeRefValueExpr) {
	 		listener.exitEdgeRefValueExpr(this);
		}
	}
}


export class RecordValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordValueExpr) {
	 		listener.enterRecordValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordValueExpr) {
	 		listener.exitRecordValueExpr(this);
		}
	}
}


export class AggregatingValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_aggregatingValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAggregatingValueExpr) {
	 		listener.enterAggregatingValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAggregatingValueExpr) {
	 		listener.exitAggregatingValueExpr(this);
		}
	}
}


export class BooleanValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanTerm(): BooleanTermContext {
		return this.getTypedRuleContext(BooleanTermContext, 0) as BooleanTermContext;
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
	public XOR(): TerminalNode {
		return this.getToken(GqlParser.XOR, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanValueExpr) {
	 		listener.enterBooleanValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanValueExpr) {
	 		listener.exitBooleanValueExpr(this);
		}
	}
}


export class BooleanTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanFactor(): BooleanFactorContext {
		return this.getTypedRuleContext(BooleanFactorContext, 0) as BooleanFactorContext;
	}
	public booleanTerm(): BooleanTermContext {
		return this.getTypedRuleContext(BooleanTermContext, 0) as BooleanTermContext;
	}
	public AND(): TerminalNode {
		return this.getToken(GqlParser.AND, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanTerm) {
	 		listener.enterBooleanTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanTerm) {
	 		listener.exitBooleanTerm(this);
		}
	}
}


export class BooleanFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanTest(): BooleanTestContext {
		return this.getTypedRuleContext(BooleanTestContext, 0) as BooleanTestContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanFactor) {
	 		listener.enterBooleanFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanFactor) {
	 		listener.exitBooleanFactor(this);
		}
	}
}


export class BooleanTestContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanPrimary(): BooleanPrimaryContext {
		return this.getTypedRuleContext(BooleanPrimaryContext, 0) as BooleanPrimaryContext;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public truthValue(): TruthValueContext {
		return this.getTypedRuleContext(TruthValueContext, 0) as TruthValueContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanTest;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanTest) {
	 		listener.enterBooleanTest(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanTest) {
	 		listener.exitBooleanTest(this);
		}
	}
}


export class TruthValueContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUE(): TerminalNode {
		return this.getToken(GqlParser.TRUE, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(GqlParser.FALSE, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(GqlParser.UNKNOWN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_truthValue;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTruthValue) {
	 		listener.enterTruthValue(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTruthValue) {
	 		listener.exitTruthValue(this);
		}
	}
}


export class BooleanPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public booleanPredicand(): BooleanPredicandContext {
		return this.getTypedRuleContext(BooleanPredicandContext, 0) as BooleanPredicandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanPrimary) {
	 		listener.enterBooleanPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanPrimary) {
	 		listener.exitBooleanPrimary(this);
		}
	}
}


export class BooleanPredicandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public paranthisedBooleanValueExpr(): ParanthisedBooleanValueExprContext {
		return this.getTypedRuleContext(ParanthisedBooleanValueExprContext, 0) as ParanthisedBooleanValueExprContext;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanPredicand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanPredicand) {
	 		listener.enterBooleanPredicand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanPredicand) {
	 		listener.exitBooleanPredicand(this);
		}
	}
}


export class ParanthisedBooleanValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_paranthisedBooleanValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParanthisedBooleanValueExpr) {
	 		listener.enterParanthisedBooleanValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParanthisedBooleanValueExpr) {
	 		listener.exitParanthisedBooleanValueExpr(this);
		}
	}
}


export class NumericValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public term(): TermContext {
		return this.getTypedRuleContext(TermContext, 0) as TermContext;
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExpr) {
	 		listener.enterNumericValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExpr) {
	 		listener.exitNumericValueExpr(this);
		}
	}
}


export class TermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public factor(): FactorContext {
		return this.getTypedRuleContext(FactorContext, 0) as FactorContext;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public term(): TermContext {
		return this.getTypedRuleContext(TermContext, 0) as TermContext;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_term;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTerm) {
	 		listener.enterTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTerm) {
	 		listener.exitTerm(this);
		}
	}
}


export class FactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericPrimary(): NumericPrimaryContext {
		return this.getTypedRuleContext(NumericPrimaryContext, 0) as NumericPrimaryContext;
	}
	public SIGN(): TerminalNode {
		return this.getToken(GqlParser.SIGN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_factor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFactor) {
	 		listener.enterFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFactor) {
	 		listener.exitFactor(this);
		}
	}
}


export class NumericPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public numericValueFunction(): NumericValueFunctionContext {
		return this.getTypedRuleContext(NumericValueFunctionContext, 0) as NumericValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericPrimary) {
	 		listener.enterNumericPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericPrimary) {
	 		listener.exitNumericPrimary(this);
		}
	}
}


export class ValueExprPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parenthesizedValueExpr(): ParenthesizedValueExprContext {
		return this.getTypedRuleContext(ParenthesizedValueExprContext, 0) as ParenthesizedValueExprContext;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueExprPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueExprPrimary) {
	 		listener.enterValueExprPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueExprPrimary) {
	 		listener.exitValueExprPrimary(this);
		}
	}
}


export class ParenthesizedValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedValueExpr) {
	 		listener.enterParenthesizedValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedValueExpr) {
	 		listener.exitParenthesizedValueExpr(this);
		}
	}
}


export class NonParenthesizedValueExprPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonParenthesizedValueExprPrimarySpecialCase(): NonParenthesizedValueExprPrimarySpecialCaseContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimarySpecialCaseContext, 0) as NonParenthesizedValueExprPrimarySpecialCaseContext;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonParenthesizedValueExprPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonParenthesizedValueExprPrimary) {
	 		listener.enterNonParenthesizedValueExprPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonParenthesizedValueExprPrimary) {
	 		listener.exitNonParenthesizedValueExprPrimary(this);
		}
	}
}


export class NonParenthesizedValueExprPrimarySpecialCaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedValueSpec(): UnsignedValueSpecContext {
		return this.getTypedRuleContext(UnsignedValueSpecContext, 0) as UnsignedValueSpecContext;
	}
	public aggregateFunction(): AggregateFunctionContext {
		return this.getTypedRuleContext(AggregateFunctionContext, 0) as AggregateFunctionContext;
	}
	public collectionValueConstructor(): CollectionValueConstructorContext {
		return this.getTypedRuleContext(CollectionValueConstructorContext, 0) as CollectionValueConstructorContext;
	}
	public valueQueryExpr(): ValueQueryExprContext {
		return this.getTypedRuleContext(ValueQueryExprContext, 0) as ValueQueryExprContext;
	}
	public caseExpr(): CaseExprContext {
		return this.getTypedRuleContext(CaseExprContext, 0) as CaseExprContext;
	}
	public letValueExpr(): LetValueExprContext {
		return this.getTypedRuleContext(LetValueExprContext, 0) as LetValueExprContext;
	}
	public castSpec(): CastSpecContext {
		return this.getTypedRuleContext(CastSpecContext, 0) as CastSpecContext;
	}
	public elementIdFunction(): ElementIdFunctionContext {
		return this.getTypedRuleContext(ElementIdFunctionContext, 0) as ElementIdFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonParenthesizedValueExprPrimarySpecialCase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonParenthesizedValueExprPrimarySpecialCase) {
	 		listener.enterNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonParenthesizedValueExprPrimarySpecialCase) {
	 		listener.exitNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}
}


export class CollectionValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueConstructor(): ListValueConstructorContext {
		return this.getTypedRuleContext(ListValueConstructorContext, 0) as ListValueConstructorContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
	public pathValueConstructor(): PathValueConstructorContext {
		return this.getTypedRuleContext(PathValueConstructorContext, 0) as PathValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_collectionValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCollectionValueConstructor) {
	 		listener.enterCollectionValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCollectionValueConstructor) {
	 		listener.exitCollectionValueConstructor(this);
		}
	}
}


export class NumericValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public lengthExpr(): LengthExprContext {
		return this.getTypedRuleContext(LengthExprContext, 0) as LengthExprContext;
	}
	public absoluteValueExpr(): AbsoluteValueExprContext {
		return this.getTypedRuleContext(AbsoluteValueExprContext, 0) as AbsoluteValueExprContext;
	}
	public modulusExpr(): ModulusExprContext {
		return this.getTypedRuleContext(ModulusExprContext, 0) as ModulusExprContext;
	}
	public trigonometricFunction(): TrigonometricFunctionContext {
		return this.getTypedRuleContext(TrigonometricFunctionContext, 0) as TrigonometricFunctionContext;
	}
	public logarithmFunction(): LogarithmFunctionContext {
		return this.getTypedRuleContext(LogarithmFunctionContext, 0) as LogarithmFunctionContext;
	}
	public exponentialFunction(): ExponentialFunctionContext {
		return this.getTypedRuleContext(ExponentialFunctionContext, 0) as ExponentialFunctionContext;
	}
	public powerFunction(): PowerFunctionContext {
		return this.getTypedRuleContext(PowerFunctionContext, 0) as PowerFunctionContext;
	}
	public squareRootFunciton(): SquareRootFuncitonContext {
		return this.getTypedRuleContext(SquareRootFuncitonContext, 0) as SquareRootFuncitonContext;
	}
	public floorFunction(): FloorFunctionContext {
		return this.getTypedRuleContext(FloorFunctionContext, 0) as FloorFunctionContext;
	}
	public ceilingFunction(): CeilingFunctionContext {
		return this.getTypedRuleContext(CeilingFunctionContext, 0) as CeilingFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueFunction) {
	 		listener.enterNumericValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueFunction) {
	 		listener.exitNumericValueFunction(this);
		}
	}
}


export class LengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charLengthExpr(): CharLengthExprContext {
		return this.getTypedRuleContext(CharLengthExprContext, 0) as CharLengthExprContext;
	}
	public byteLengthExpr(): ByteLengthExprContext {
		return this.getTypedRuleContext(ByteLengthExprContext, 0) as ByteLengthExprContext;
	}
	public pathLengthExpr(): PathLengthExprContext {
		return this.getTypedRuleContext(PathLengthExprContext, 0) as PathLengthExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLengthExpr) {
	 		listener.enterLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLengthExpr) {
	 		listener.exitLengthExpr(this);
		}
	}
}


export class CharLengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public CHAR_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHAR_LENGTH, 0);
	}
	public CHARACTER_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHARACTER_LENGTH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charLengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharLengthExpr) {
	 		listener.enterCharLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharLengthExpr) {
	 		listener.exitCharLengthExpr(this);
		}
	}
}


export class ByteLengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BYTE_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.BYTE_LENGTH, 0);
	}
	public OCTET_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.OCTET_LENGTH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteLengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteLengthExpr) {
	 		listener.enterByteLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteLengthExpr) {
	 		listener.exitByteLengthExpr(this);
		}
	}
}


export class PathLengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.PATH_LENGTH, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathLengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathLengthExpr) {
	 		listener.enterPathLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathLengthExpr) {
	 		listener.exitPathLengthExpr(this);
		}
	}
}


export class AbsoluteValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ABS(): TerminalNode {
		return this.getToken(GqlParser.ABS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_absoluteValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbsoluteValueExpr) {
	 		listener.enterAbsoluteValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbsoluteValueExpr) {
	 		listener.exitAbsoluteValueExpr(this);
		}
	}
}


export class ModulusExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MOD(): TerminalNode {
		return this.getToken(GqlParser.MOD, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExprDividen(): NumericValueExprDividenContext {
		return this.getTypedRuleContext(NumericValueExprDividenContext, 0) as NumericValueExprDividenContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public numericValueExprDivisor(): NumericValueExprDivisorContext {
		return this.getTypedRuleContext(NumericValueExprDivisorContext, 0) as NumericValueExprDivisorContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_modulusExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterModulusExpr) {
	 		listener.enterModulusExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitModulusExpr) {
	 		listener.exitModulusExpr(this);
		}
	}
}


export class NumericValueExprDividenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprDividen;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprDividen) {
	 		listener.enterNumericValueExprDividen(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprDividen) {
	 		listener.exitNumericValueExprDividen(this);
		}
	}
}


export class NumericValueExprDivisorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprDivisor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprDivisor) {
	 		listener.enterNumericValueExprDivisor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprDivisor) {
	 		listener.exitNumericValueExprDivisor(this);
		}
	}
}


export class TrigonometricFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public trigonometricFunctionName(): TrigonometricFunctionNameContext {
		return this.getTypedRuleContext(TrigonometricFunctionNameContext, 0) as TrigonometricFunctionNameContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trigonometricFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrigonometricFunction) {
	 		listener.enterTrigonometricFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrigonometricFunction) {
	 		listener.exitTrigonometricFunction(this);
		}
	}
}


export class TrigonometricFunctionNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIN(): TerminalNode {
		return this.getToken(GqlParser.SIN, 0);
	}
	public COS(): TerminalNode {
		return this.getToken(GqlParser.COS, 0);
	}
	public TAN(): TerminalNode {
		return this.getToken(GqlParser.TAN, 0);
	}
	public COT(): TerminalNode {
		return this.getToken(GqlParser.COT, 0);
	}
	public SINH(): TerminalNode {
		return this.getToken(GqlParser.SINH, 0);
	}
	public COSH(): TerminalNode {
		return this.getToken(GqlParser.COSH, 0);
	}
	public TANH(): TerminalNode {
		return this.getToken(GqlParser.TANH, 0);
	}
	public ASIN(): TerminalNode {
		return this.getToken(GqlParser.ASIN, 0);
	}
	public ACOS(): TerminalNode {
		return this.getToken(GqlParser.ACOS, 0);
	}
	public ATAN(): TerminalNode {
		return this.getToken(GqlParser.ATAN, 0);
	}
	public DEGREES(): TerminalNode {
		return this.getToken(GqlParser.DEGREES, 0);
	}
	public RADIANS(): TerminalNode {
		return this.getToken(GqlParser.RADIANS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trigonometricFunctionName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrigonometricFunctionName) {
	 		listener.enterTrigonometricFunctionName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrigonometricFunctionName) {
	 		listener.exitTrigonometricFunctionName(this);
		}
	}
}


export class LogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public generalLogarithmFunction(): GeneralLogarithmFunctionContext {
		return this.getTypedRuleContext(GeneralLogarithmFunctionContext, 0) as GeneralLogarithmFunctionContext;
	}
	public commonLogarithmFunction(): CommonLogarithmFunctionContext {
		return this.getTypedRuleContext(CommonLogarithmFunctionContext, 0) as CommonLogarithmFunctionContext;
	}
	public naturalLogarithmFunction(): NaturalLogarithmFunctionContext {
		return this.getTypedRuleContext(NaturalLogarithmFunctionContext, 0) as NaturalLogarithmFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_logarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLogarithmFunction) {
	 		listener.enterLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLogarithmFunction) {
	 		listener.exitLogarithmFunction(this);
		}
	}
}


export class GeneralLogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MOD(): TerminalNode {
		return this.getToken(GqlParser.MOD, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public generalLogarithmBase(): GeneralLogarithmBaseContext {
		return this.getTypedRuleContext(GeneralLogarithmBaseContext, 0) as GeneralLogarithmBaseContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public generalLogarithmArgument(): GeneralLogarithmArgumentContext {
		return this.getTypedRuleContext(GeneralLogarithmArgumentContext, 0) as GeneralLogarithmArgumentContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLogarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLogarithmFunction) {
	 		listener.enterGeneralLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLogarithmFunction) {
	 		listener.exitGeneralLogarithmFunction(this);
		}
	}
}


export class GeneralLogarithmBaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLogarithmBase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLogarithmBase) {
	 		listener.enterGeneralLogarithmBase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLogarithmBase) {
	 		listener.exitGeneralLogarithmBase(this);
		}
	}
}


export class GeneralLogarithmArgumentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLogarithmArgument;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLogarithmArgument) {
	 		listener.enterGeneralLogarithmArgument(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLogarithmArgument) {
	 		listener.exitGeneralLogarithmArgument(this);
		}
	}
}


export class CommonLogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOG10(): TerminalNode {
		return this.getToken(GqlParser.LOG10, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_commonLogarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCommonLogarithmFunction) {
	 		listener.enterCommonLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCommonLogarithmFunction) {
	 		listener.exitCommonLogarithmFunction(this);
		}
	}
}


export class NaturalLogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LN(): TerminalNode {
		return this.getToken(GqlParser.LN, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_naturalLogarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNaturalLogarithmFunction) {
	 		listener.enterNaturalLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNaturalLogarithmFunction) {
	 		listener.exitNaturalLogarithmFunction(this);
		}
	}
}


export class ExponentialFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXP(): TerminalNode {
		return this.getToken(GqlParser.EXP, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_exponentialFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExponentialFunction) {
	 		listener.enterExponentialFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExponentialFunction) {
	 		listener.exitExponentialFunction(this);
		}
	}
}


export class PowerFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public POWER(): TerminalNode {
		return this.getToken(GqlParser.POWER, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExprBase(): NumericValueExprBaseContext {
		return this.getTypedRuleContext(NumericValueExprBaseContext, 0) as NumericValueExprBaseContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public numericValueExprExponent(): NumericValueExprExponentContext {
		return this.getTypedRuleContext(NumericValueExprExponentContext, 0) as NumericValueExprExponentContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_powerFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPowerFunction) {
	 		listener.enterPowerFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPowerFunction) {
	 		listener.exitPowerFunction(this);
		}
	}
}


export class NumericValueExprBaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprBase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprBase) {
	 		listener.enterNumericValueExprBase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprBase) {
	 		listener.exitNumericValueExprBase(this);
		}
	}
}


export class NumericValueExprExponentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprExponent;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprExponent) {
	 		listener.enterNumericValueExprExponent(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprExponent) {
	 		listener.exitNumericValueExprExponent(this);
		}
	}
}


export class SquareRootFuncitonContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SQRT(): TerminalNode {
		return this.getToken(GqlParser.SQRT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_squareRootFunciton;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSquareRootFunciton) {
	 		listener.enterSquareRootFunciton(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSquareRootFunciton) {
	 		listener.exitSquareRootFunciton(this);
		}
	}
}


export class FloorFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FLOOR(): TerminalNode {
		return this.getToken(GqlParser.FLOOR, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_floorFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFloorFunction) {
	 		listener.enterFloorFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFloorFunction) {
	 		listener.exitFloorFunction(this);
		}
	}
}


export class CeilingFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public CEIL(): TerminalNode {
		return this.getToken(GqlParser.CEIL, 0);
	}
	public CEILING(): TerminalNode {
		return this.getToken(GqlParser.CEILING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ceilingFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCeilingFunction) {
	 		listener.enterCeilingFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCeilingFunction) {
	 		listener.exitCeilingFunction(this);
		}
	}
}


export class StringValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_stringValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStringValueExpr) {
	 		listener.enterStringValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStringValueExpr) {
	 		listener.exitStringValueExpr(this);
		}
	}
}


export class CharStringValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringConcatenation(): CharStringConcatenationContext {
		return this.getTypedRuleContext(CharStringConcatenationContext, 0) as CharStringConcatenationContext;
	}
	public charStringFactor(): CharStringFactorContext {
		return this.getTypedRuleContext(CharStringFactorContext, 0) as CharStringFactorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringValueExpr) {
	 		listener.enterCharStringValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringValueExpr) {
	 		listener.exitCharStringValueExpr(this);
		}
	}
}


export class CharStringConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringFactor(): CharStringFactorContext {
		return this.getTypedRuleContext(CharStringFactorContext, 0) as CharStringFactorContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringConcatenation) {
	 		listener.enterCharStringConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringConcatenation) {
	 		listener.exitCharStringConcatenation(this);
		}
	}
}


export class CharStringFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringPrimary(): CharStringPrimaryContext {
		return this.getTypedRuleContext(CharStringPrimaryContext, 0) as CharStringPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringFactor) {
	 		listener.enterCharStringFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringFactor) {
	 		listener.exitCharStringFactor(this);
		}
	}
}


export class CharStringPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public stringValueFunction(): StringValueFunctionContext {
		return this.getTypedRuleContext(StringValueFunctionContext, 0) as StringValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringPrimary) {
	 		listener.enterCharStringPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringPrimary) {
	 		listener.exitCharStringPrimary(this);
		}
	}
}


export class ByteStringValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringConcatenation(): ByteStringConcatenationContext {
		return this.getTypedRuleContext(ByteStringConcatenationContext, 0) as ByteStringConcatenationContext;
	}
	public byteStringFactor(): ByteStringFactorContext {
		return this.getTypedRuleContext(ByteStringFactorContext, 0) as ByteStringFactorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringValueExpr) {
	 		listener.enterByteStringValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringValueExpr) {
	 		listener.exitByteStringValueExpr(this);
		}
	}
}


export class ByteStringFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringPrimary(): ByteStringPrimaryContext {
		return this.getTypedRuleContext(ByteStringPrimaryContext, 0) as ByteStringPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringFactor) {
	 		listener.enterByteStringFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringFactor) {
	 		listener.exitByteStringFactor(this);
		}
	}
}


export class ByteStringPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public stringValueFunction(): StringValueFunctionContext {
		return this.getTypedRuleContext(StringValueFunctionContext, 0) as StringValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringPrimary) {
	 		listener.enterByteStringPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringPrimary) {
	 		listener.exitByteStringPrimary(this);
		}
	}
}


export class ByteStringConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringFactor(): ByteStringFactorContext {
		return this.getTypedRuleContext(ByteStringFactorContext, 0) as ByteStringFactorContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringConcatenation) {
	 		listener.enterByteStringConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringConcatenation) {
	 		listener.exitByteStringConcatenation(this);
		}
	}
}


export class StringValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringFunction(): CharStringFunctionContext {
		return this.getTypedRuleContext(CharStringFunctionContext, 0) as CharStringFunctionContext;
	}
	public byteStringFunction(): ByteStringFunctionContext {
		return this.getTypedRuleContext(ByteStringFunctionContext, 0) as ByteStringFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_stringValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStringValueFunction) {
	 		listener.enterStringValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStringValueFunction) {
	 		listener.exitStringValueFunction(this);
		}
	}
}


export class CharStringFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public foldFunction(): FoldFunctionContext {
		return this.getTypedRuleContext(FoldFunctionContext, 0) as FoldFunctionContext;
	}
	public trimFunction(): TrimFunctionContext {
		return this.getTypedRuleContext(TrimFunctionContext, 0) as TrimFunctionContext;
	}
	public normalizeFunction(): NormalizeFunctionContext {
		return this.getTypedRuleContext(NormalizeFunctionContext, 0) as NormalizeFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringFunction) {
	 		listener.enterCharStringFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringFunction) {
	 		listener.exitCharStringFunction(this);
		}
	}
}


export class FoldFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public UPPER(): TerminalNode {
		return this.getToken(GqlParser.UPPER, 0);
	}
	public LOWER(): TerminalNode {
		return this.getToken(GqlParser.LOWER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_foldFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFoldFunction) {
	 		listener.enterFoldFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFoldFunction) {
	 		listener.exitFoldFunction(this);
		}
	}
}


export class TrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleCharTrimFunction(): SingleCharTrimFunctionContext {
		return this.getTypedRuleContext(SingleCharTrimFunctionContext, 0) as SingleCharTrimFunctionContext;
	}
	public multiCharTrimFunction(): MultiCharTrimFunctionContext {
		return this.getTypedRuleContext(MultiCharTrimFunctionContext, 0) as MultiCharTrimFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimFunction) {
	 		listener.enterTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimFunction) {
	 		listener.exitTrimFunction(this);
		}
	}
}


export class SingleCharTrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public trimOperands(): TrimOperandsContext {
		return this.getTypedRuleContext(TrimOperandsContext, 0) as TrimOperandsContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_singleCharTrimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSingleCharTrimFunction) {
	 		listener.enterSingleCharTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSingleCharTrimFunction) {
	 		listener.exitSingleCharTrimFunction(this);
		}
	}
}


export class MultiCharTrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public trimSource(): TrimSourceContext {
		return this.getTypedRuleContext(TrimSourceContext, 0) as TrimSourceContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BTRIM(): TerminalNode {
		return this.getToken(GqlParser.BTRIM, 0);
	}
	public LTRIM(): TerminalNode {
		return this.getToken(GqlParser.LTRIM, 0);
	}
	public RTRIM(): TerminalNode {
		return this.getToken(GqlParser.RTRIM, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public trimCharString(): TrimCharStringContext {
		return this.getTypedRuleContext(TrimCharStringContext, 0) as TrimCharStringContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_multiCharTrimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMultiCharTrimFunction) {
	 		listener.enterMultiCharTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMultiCharTrimFunction) {
	 		listener.exitMultiCharTrimFunction(this);
		}
	}
}


export class TrimOperandsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public trimSource(): TrimSourceContext {
		return this.getTypedRuleContext(TrimSourceContext, 0) as TrimSourceContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public trimSpec(): TrimSpecContext {
		return this.getTypedRuleContext(TrimSpecContext, 0) as TrimSpecContext;
	}
	public trimCharString(): TrimCharStringContext {
		return this.getTypedRuleContext(TrimCharStringContext, 0) as TrimCharStringContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimOperands;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimOperands) {
	 		listener.enterTrimOperands(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimOperands) {
	 		listener.exitTrimOperands(this);
		}
	}
}


export class TrimSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimSource) {
	 		listener.enterTrimSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimSource) {
	 		listener.exitTrimSource(this);
		}
	}
}


export class TrimSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEADING(): TerminalNode {
		return this.getToken(GqlParser.LEADING, 0);
	}
	public TRAILING(): TerminalNode {
		return this.getToken(GqlParser.TRAILING, 0);
	}
	public BOTH(): TerminalNode {
		return this.getToken(GqlParser.BOTH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimSpec) {
	 		listener.enterTrimSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimSpec) {
	 		listener.exitTrimSpec(this);
		}
	}
}


export class TrimCharStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimCharString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimCharString) {
	 		listener.enterTrimCharString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimCharString) {
	 		listener.exitTrimCharString(this);
		}
	}
}


export class NormalizeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NORMALIZE(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZE, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public normalForm(): NormalFormContext {
		return this.getTypedRuleContext(NormalFormContext, 0) as NormalFormContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalizeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalizeFunction) {
	 		listener.enterNormalizeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalizeFunction) {
	 		listener.exitNormalizeFunction(this);
		}
	}
}


export class NormalFormContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NFC(): TerminalNode {
		return this.getToken(GqlParser.NFC, 0);
	}
	public NFD(): TerminalNode {
		return this.getToken(GqlParser.NFD, 0);
	}
	public NFKC(): TerminalNode {
		return this.getToken(GqlParser.NFKC, 0);
	}
	public NFKD(): TerminalNode {
		return this.getToken(GqlParser.NFKD, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalForm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalForm) {
	 		listener.enterNormalForm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalForm) {
	 		listener.exitNormalForm(this);
		}
	}
}


export class ByteStringFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStrinTrimFunction(): ByteStrinTrimFunctionContext {
		return this.getTypedRuleContext(ByteStrinTrimFunctionContext, 0) as ByteStrinTrimFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringFunction) {
	 		listener.enterByteStringFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringFunction) {
	 		listener.exitByteStringFunction(this);
		}
	}
}


export class ByteStrinTrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public byteStringTrimOperands(): ByteStringTrimOperandsContext {
		return this.getTypedRuleContext(ByteStringTrimOperandsContext, 0) as ByteStringTrimOperandsContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStrinTrimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStrinTrimFunction) {
	 		listener.enterByteStrinTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStrinTrimFunction) {
	 		listener.exitByteStrinTrimFunction(this);
		}
	}
}


export class ByteStringTrimOperandsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringTrimSource(): ByteStringTrimSourceContext {
		return this.getTypedRuleContext(ByteStringTrimSourceContext, 0) as ByteStringTrimSourceContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public trimSpec(): TrimSpecContext {
		return this.getTypedRuleContext(TrimSpecContext, 0) as TrimSpecContext;
	}
	public trimByteString(): TrimByteStringContext {
		return this.getTypedRuleContext(TrimByteStringContext, 0) as TrimByteStringContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringTrimOperands;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringTrimOperands) {
	 		listener.enterByteStringTrimOperands(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringTrimOperands) {
	 		listener.exitByteStringTrimOperands(this);
		}
	}
}


export class ByteStringTrimSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringTrimSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringTrimSource) {
	 		listener.enterByteStringTrimSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringTrimSource) {
	 		listener.exitByteStringTrimSource(this);
		}
	}
}


export class TrimByteStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimByteString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimByteString) {
	 		listener.enterTrimByteString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimByteString) {
	 		listener.exitTrimByteString(this);
		}
	}
}


export class StringLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_stringLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStringLength) {
	 		listener.enterStringLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStringLength) {
	 		listener.exitStringLength(this);
		}
	}
}


export class DateTimeValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeTerm(): DateTimeTermContext {
		return this.getTypedRuleContext(DateTimeTermContext, 0) as DateTimeTermContext;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueExpr) {
	 		listener.enterDateTimeValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueExpr) {
	 		listener.exitDateTimeValueExpr(this);
		}
	}
}


export class DateTimeTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeFactor(): DateTimeFactorContext {
		return this.getTypedRuleContext(DateTimeFactorContext, 0) as DateTimeFactorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeTerm) {
	 		listener.enterDateTimeTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeTerm) {
	 		listener.exitDateTimeTerm(this);
		}
	}
}


export class DateTimeFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimePrimary(): DateTimePrimaryContext {
		return this.getTypedRuleContext(DateTimePrimaryContext, 0) as DateTimePrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeFactor) {
	 		listener.enterDateTimeFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeFactor) {
	 		listener.exitDateTimeFactor(this);
		}
	}
}


export class DateTimePrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public dateTimeValueFunction(): DateTimeValueFunctionContext {
		return this.getTypedRuleContext(DateTimeValueFunctionContext, 0) as DateTimeValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimePrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimePrimary) {
	 		listener.enterDateTimePrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimePrimary) {
	 		listener.exitDateTimePrimary(this);
		}
	}
}


export class DateTimeValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateFunction(): DateFunctionContext {
		return this.getTypedRuleContext(DateFunctionContext, 0) as DateFunctionContext;
	}
	public timeFunction(): TimeFunctionContext {
		return this.getTypedRuleContext(TimeFunctionContext, 0) as TimeFunctionContext;
	}
	public dateTimeFunction(): DateTimeFunctionContext {
		return this.getTypedRuleContext(DateTimeFunctionContext, 0) as DateTimeFunctionContext;
	}
	public localTimeFunction(): LocalTimeFunctionContext {
		return this.getTypedRuleContext(LocalTimeFunctionContext, 0) as LocalTimeFunctionContext;
	}
	public localDatetimeFunction(): LocalDatetimeFunctionContext {
		return this.getTypedRuleContext(LocalDatetimeFunctionContext, 0) as LocalDatetimeFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueFunction) {
	 		listener.enterDateTimeValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueFunction) {
	 		listener.exitDateTimeValueFunction(this);
		}
	}
}


export class DateFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_DATE(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_DATE, 0);
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public dateFunctionParameters(): DateFunctionParametersContext {
		return this.getTypedRuleContext(DateFunctionParametersContext, 0) as DateFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateFunction) {
	 		listener.enterDateFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateFunction) {
	 		listener.exitDateFunction(this);
		}
	}
}


export class TimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_TIME(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIME, 0);
	}
	public ZONED_TIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_TIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public timeFunctionParameters(): TimeFunctionParametersContext {
		return this.getTypedRuleContext(TimeFunctionParametersContext, 0) as TimeFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeFunction) {
	 		listener.enterTimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeFunction) {
	 		listener.exitTimeFunction(this);
		}
	}
}


export class LocalTimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_TIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public timeFunctionParameters(): TimeFunctionParametersContext {
		return this.getTypedRuleContext(TimeFunctionParametersContext, 0) as TimeFunctionParametersContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localTimeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalTimeFunction) {
	 		listener.enterLocalTimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalTimeFunction) {
	 		listener.exitLocalTimeFunction(this);
		}
	}
}


export class DateTimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIMESTAMP, 0);
	}
	public ZONED_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_DATETIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public dateTimeFunctionParameters(): DateTimeFunctionParametersContext {
		return this.getTypedRuleContext(DateTimeFunctionParametersContext, 0) as DateTimeFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeFunction) {
	 		listener.enterDateTimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeFunction) {
	 		listener.exitDateTimeFunction(this);
		}
	}
}


export class LocalDatetimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIMESTAMP, 0);
	}
	public LOCAL_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_DATETIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public dateTimeFunctionParameters(): DateTimeFunctionParametersContext {
		return this.getTypedRuleContext(DateTimeFunctionParametersContext, 0) as DateTimeFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localDatetimeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalDatetimeFunction) {
	 		listener.enterLocalDatetimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalDatetimeFunction) {
	 		listener.exitLocalDatetimeFunction(this);
		}
	}
}


export class DateFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateString(): DateStringContext {
		return this.getTypedRuleContext(DateStringContext, 0) as DateStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateFunctionParameters) {
	 		listener.enterDateFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateFunctionParameters) {
	 		listener.exitDateFunctionParameters(this);
		}
	}
}


export class TimeFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public timeString(): TimeStringContext {
		return this.getTypedRuleContext(TimeStringContext, 0) as TimeStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeFunctionParameters) {
	 		listener.enterTimeFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeFunctionParameters) {
	 		listener.exitTimeFunctionParameters(this);
		}
	}
}


export class DateTimeFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeString(): DateTimeStringContext {
		return this.getTypedRuleContext(DateTimeStringContext, 0) as DateTimeStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeFunctionParameters) {
	 		listener.enterDateTimeFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeFunctionParameters) {
	 		listener.exitDateTimeFunctionParameters(this);
		}
	}
}


export class DurationValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
	public dateTimeSubtraction(): DateTimeSubtractionContext {
		return this.getTypedRuleContext(DateTimeSubtractionContext, 0) as DateTimeSubtractionContext;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationValueExpr) {
	 		listener.enterDurationValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationValueExpr) {
	 		listener.exitDurationValueExpr(this);
		}
	}
}


export class DateTimeSubtractionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION_BETWEEN(): TerminalNode {
		return this.getToken(GqlParser.DURATION_BETWEEN, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public dateTimeSubtractionParameters(): DateTimeSubtractionParametersContext {
		return this.getTypedRuleContext(DateTimeSubtractionParametersContext, 0) as DateTimeSubtractionParametersContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeSubtraction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeSubtraction) {
	 		listener.enterDateTimeSubtraction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeSubtraction) {
	 		listener.exitDateTimeSubtraction(this);
		}
	}
}


export class DateTimeSubtractionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeValueExpr_list(): DateTimeValueExprContext[] {
		return this.getTypedRuleContexts(DateTimeValueExprContext) as DateTimeValueExprContext[];
	}
	public dateTimeValueExpr(i: number): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, i) as DateTimeValueExprContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeSubtractionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeSubtractionParameters) {
	 		listener.enterDateTimeSubtractionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeSubtractionParameters) {
	 		listener.exitDateTimeSubtractionParameters(this);
		}
	}
}


export class DurationTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationFactor(): DurationFactorContext {
		return this.getTypedRuleContext(DurationFactorContext, 0) as DurationFactorContext;
	}
	public term(): TermContext {
		return this.getTypedRuleContext(TermContext, 0) as TermContext;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
	public factor(): FactorContext {
		return this.getTypedRuleContext(FactorContext, 0) as FactorContext;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationTerm) {
	 		listener.enterDurationTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationTerm) {
	 		listener.exitDurationTerm(this);
		}
	}
}


export class DurationFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationPrimary(): DurationPrimaryContext {
		return this.getTypedRuleContext(DurationPrimaryContext, 0) as DurationPrimaryContext;
	}
	public SIGN(): TerminalNode {
		return this.getToken(GqlParser.SIGN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationFactor) {
	 		listener.enterDurationFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationFactor) {
	 		listener.exitDurationFactor(this);
		}
	}
}


export class DurationPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public durationValueFunction(): DurationValueFunctionContext {
		return this.getTypedRuleContext(DurationValueFunctionContext, 0) as DurationValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationPrimary) {
	 		listener.enterDurationPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationPrimary) {
	 		listener.exitDurationPrimary(this);
		}
	}
}


export class DurationValueExpr1Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationValueExpr1;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationValueExpr1) {
	 		listener.enterDurationValueExpr1(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationValueExpr1) {
	 		listener.exitDurationValueExpr1(this);
		}
	}
}


export class DurationTerm1Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationTerm1;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationTerm1) {
	 		listener.enterDurationTerm1(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationTerm1) {
	 		listener.exitDurationTerm1(this);
		}
	}
}


export class DurationTerm2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationTerm2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationTerm2) {
	 		listener.enterDurationTerm2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationTerm2) {
	 		listener.exitDurationTerm2(this);
		}
	}
}


export class DateTimeValueExpr1Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueExpr1;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueExpr1) {
	 		listener.enterDateTimeValueExpr1(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueExpr1) {
	 		listener.exitDateTimeValueExpr1(this);
		}
	}
}


export class DateTimeValueExpr2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueExpr2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueExpr2) {
	 		listener.enterDateTimeValueExpr2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueExpr2) {
	 		listener.exitDateTimeValueExpr2(this);
		}
	}
}


export class DurationValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationFunction(): DurationFunctionContext {
		return this.getTypedRuleContext(DurationFunctionContext, 0) as DurationFunctionContext;
	}
	public durationAbsoluteValueFunction(): DurationAbsoluteValueFunctionContext {
		return this.getTypedRuleContext(DurationAbsoluteValueFunctionContext, 0) as DurationAbsoluteValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationValueFunction) {
	 		listener.enterDurationValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationValueFunction) {
	 		listener.exitDurationValueFunction(this);
		}
	}
}


export class DurationFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public durationFunctionParameters(): DurationFunctionParametersContext {
		return this.getTypedRuleContext(DurationFunctionParametersContext, 0) as DurationFunctionParametersContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationFunction) {
	 		listener.enterDurationFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationFunction) {
	 		listener.exitDurationFunction(this);
		}
	}
}


export class DurationFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationString(): DurationStringContext {
		return this.getTypedRuleContext(DurationStringContext, 0) as DurationStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationFunctionParameters) {
	 		listener.enterDurationFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationFunctionParameters) {
	 		listener.exitDurationFunctionParameters(this);
		}
	}
}


export class DurationAbsoluteValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ABS(): TerminalNode {
		return this.getToken(GqlParser.ABS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationAbsoluteValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationAbsoluteValueFunction) {
	 		listener.enterDurationAbsoluteValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationAbsoluteValueFunction) {
	 		listener.exitDurationAbsoluteValueFunction(this);
		}
	}
}


export class ListValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listConcatenation(): ListConcatenationContext {
		return this.getTypedRuleContext(ListConcatenationContext, 0) as ListConcatenationContext;
	}
	public listPrimary(): ListPrimaryContext {
		return this.getTypedRuleContext(ListPrimaryContext, 0) as ListPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueExpr) {
	 		listener.enterListValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueExpr) {
	 		listener.exitListValueExpr(this);
		}
	}
}


export class ListConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listPrimary(): ListPrimaryContext {
		return this.getTypedRuleContext(ListPrimaryContext, 0) as ListPrimaryContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListConcatenation) {
	 		listener.enterListConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListConcatenation) {
	 		listener.exitListConcatenation(this);
		}
	}
}


export class ListPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueFunction(): ListValueFunctionContext {
		return this.getTypedRuleContext(ListValueFunctionContext, 0) as ListValueFunctionContext;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListPrimary) {
	 		listener.enterListPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListPrimary) {
	 		listener.exitListPrimary(this);
		}
	}
}


export class ListValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public trimListFunction(): TrimListFunctionContext {
		return this.getTypedRuleContext(TrimListFunctionContext, 0) as TrimListFunctionContext;
	}
	public elementsFunction(): ElementsFunctionContext {
		return this.getTypedRuleContext(ElementsFunctionContext, 0) as ElementsFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueFunction) {
	 		listener.enterListValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueFunction) {
	 		listener.exitListValueFunction(this);
		}
	}
}


export class TrimListFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimListFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimListFunction) {
	 		listener.enterTrimListFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimListFunction) {
	 		listener.exitTrimListFunction(this);
		}
	}
}


export class ElementsFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELEMENTS(): TerminalNode {
		return this.getToken(GqlParser.ELEMENTS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementsFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementsFunction) {
	 		listener.enterElementsFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementsFunction) {
	 		listener.exitElementsFunction(this);
		}
	}
}


export class ListValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
		return this.getTypedRuleContext(ListValueConstructorByEnumerationContext, 0) as ListValueConstructorByEnumerationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueConstructor) {
	 		listener.enterListValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueConstructor) {
	 		listener.exitListValueConstructor(this);
		}
	}
}


export class ListValueConstructorByEnumerationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.LEFT_BRACKET);
	}
	public LEFT_BRACKET(i: number): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACKET, i);
	}
	public listValueTypeName(): ListValueTypeNameContext {
		return this.getTypedRuleContext(ListValueTypeNameContext, 0) as ListValueTypeNameContext;
	}
	public RIGHT_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.RIGHT_BRACKET);
	}
	public RIGHT_BRACKET(i: number): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET, i);
	}
	public listElementList(): ListElementListContext {
		return this.getTypedRuleContext(ListElementListContext, 0) as ListElementListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueConstructorByEnumeration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueConstructorByEnumeration) {
	 		listener.enterListValueConstructorByEnumeration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueConstructorByEnumeration) {
	 		listener.exitListValueConstructorByEnumeration(this);
		}
	}
}


export class ListElementListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listElement_list(): ListElementContext[] {
		return this.getTypedRuleContexts(ListElementContext) as ListElementContext[];
	}
	public listElement(i: number): ListElementContext {
		return this.getTypedRuleContext(ListElementContext, i) as ListElementContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listElementList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListElementList) {
	 		listener.enterListElementList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListElementList) {
	 		listener.exitListElementList(this);
		}
	}
}


export class ListElementContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listElement;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListElement) {
	 		listener.enterListElement(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListElement) {
	 		listener.exitListElement(this);
		}
	}
}


export class RecordValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldsSpec(): FieldsSpecContext {
		return this.getTypedRuleContext(FieldsSpecContext, 0) as FieldsSpecContext;
	}
	public RECORD(): TerminalNode {
		return this.getToken(GqlParser.RECORD, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordValueConstructor) {
	 		listener.enterRecordValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordValueConstructor) {
	 		listener.exitRecordValueConstructor(this);
		}
	}
}


export class FieldsSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public fieldList(): FieldListContext {
		return this.getTypedRuleContext(FieldListContext, 0) as FieldListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldsSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldsSpec) {
	 		listener.enterFieldsSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldsSpec) {
	 		listener.exitFieldsSpec(this);
		}
	}
}


export class FieldListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public field_list(): FieldContext[] {
		return this.getTypedRuleContexts(FieldContext) as FieldContext[];
	}
	public field(i: number): FieldContext {
		return this.getTypedRuleContext(FieldContext, i) as FieldContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldList) {
	 		listener.enterFieldList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldList) {
	 		listener.exitFieldList(this);
		}
	}
}


export class FieldContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldName(): FieldNameContext {
		return this.getTypedRuleContext(FieldNameContext, 0) as FieldNameContext;
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_field;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterField) {
	 		listener.enterField(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitField) {
	 		listener.exitField(this);
		}
	}
}


export class PathValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathValueConcatenation(): PathValueConcatenationContext {
		return this.getTypedRuleContext(PathValueConcatenationContext, 0) as PathValueConcatenationContext;
	}
	public pathValuePrimary(): PathValuePrimaryContext {
		return this.getTypedRuleContext(PathValuePrimaryContext, 0) as PathValuePrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueExpr) {
	 		listener.enterPathValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueExpr) {
	 		listener.exitPathValueExpr(this);
		}
	}
}


export class PathValueConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathValuePrimary(): PathValuePrimaryContext {
		return this.getTypedRuleContext(PathValuePrimaryContext, 0) as PathValuePrimaryContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueConcatenation) {
	 		listener.enterPathValueConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueConcatenation) {
	 		listener.exitPathValueConcatenation(this);
		}
	}
}


export class PathValuePrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValuePrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValuePrimary) {
	 		listener.enterPathValuePrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValuePrimary) {
	 		listener.exitPathValuePrimary(this);
		}
	}
}


export class PathValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathValueConstructorByEnumeration(): PathValueConstructorByEnumerationContext {
		return this.getTypedRuleContext(PathValueConstructorByEnumerationContext, 0) as PathValueConstructorByEnumerationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueConstructor) {
	 		listener.enterPathValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueConstructor) {
	 		listener.exitPathValueConstructor(this);
		}
	}
}


export class PathValueConstructorByEnumerationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathElementList(): PathElementListContext {
		return this.getTypedRuleContext(PathElementListContext, 0) as PathElementListContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueConstructorByEnumeration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueConstructorByEnumeration) {
	 		listener.enterPathValueConstructorByEnumeration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueConstructorByEnumeration) {
	 		listener.exitPathValueConstructorByEnumeration(this);
		}
	}
}


export class PathElementListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathElementListStart(): PathElementListStartContext {
		return this.getTypedRuleContext(PathElementListStartContext, 0) as PathElementListStartContext;
	}
	public pathElementListStep(): PathElementListStepContext {
		return this.getTypedRuleContext(PathElementListStepContext, 0) as PathElementListStepContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathElementList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathElementList) {
	 		listener.enterPathElementList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathElementList) {
	 		listener.exitPathElementList(this);
		}
	}
}


export class PathElementListStartContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathElementListStart;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathElementListStart) {
	 		listener.enterPathElementListStart(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathElementListStart) {
	 		listener.exitPathElementListStart(this);
		}
	}
}


export class PathElementListStepContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		return this.getTypedRuleContext(EdgeRefValueExprContext, 0) as EdgeRefValueExprContext;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathElementListStep;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathElementListStep) {
	 		listener.enterPathElementListStep(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathElementListStep) {
	 		listener.exitPathElementListStep(this);
		}
	}
}


export class PropertyRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertySource(): PropertySourceContext {
		return this.getTypedRuleContext(PropertySourceContext, 0) as PropertySourceContext;
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyRef) {
	 		listener.enterPropertyRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyRef) {
	 		listener.exitPropertyRef(this);
		}
	}
}


export class PropertySourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		return this.getTypedRuleContext(EdgeRefValueExprContext, 0) as EdgeRefValueExprContext;
	}
	public recordValueExpr(): RecordValueExprContext {
		return this.getTypedRuleContext(RecordValueExprContext, 0) as RecordValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertySource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertySource) {
	 		listener.enterPropertySource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertySource) {
	 		listener.exitPropertySource(this);
		}
	}
}


export class ValueQueryExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueQueryExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueQueryExpr) {
	 		listener.enterValueQueryExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueQueryExpr) {
	 		listener.exitValueQueryExpr(this);
		}
	}
}


export class CaseExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public caseAbbreviation(): CaseAbbreviationContext {
		return this.getTypedRuleContext(CaseAbbreviationContext, 0) as CaseAbbreviationContext;
	}
	public caseSpecification(): CaseSpecificationContext {
		return this.getTypedRuleContext(CaseSpecificationContext, 0) as CaseSpecificationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseExpr) {
	 		listener.enterCaseExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseExpr) {
	 		listener.exitCaseExpr(this);
		}
	}
}


export class CaseAbbreviationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULLIF(): TerminalNode {
		return this.getToken(GqlParser.NULLIF, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public valueExpr_list(): ValueExprContext[] {
		return this.getTypedRuleContexts(ValueExprContext) as ValueExprContext[];
	}
	public valueExpr(i: number): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, i) as ValueExprContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public COALESCE(): TerminalNode {
		return this.getToken(GqlParser.COALESCE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseAbbreviation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseAbbreviation) {
	 		listener.enterCaseAbbreviation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseAbbreviation) {
	 		listener.exitCaseAbbreviation(this);
		}
	}
}


export class CaseSpecificationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleCase(): SimpleCaseContext {
		return this.getTypedRuleContext(SimpleCaseContext, 0) as SimpleCaseContext;
	}
	public searchedCase(): SearchedCaseContext {
		return this.getTypedRuleContext(SearchedCaseContext, 0) as SearchedCaseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseSpecification;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseSpecification) {
	 		listener.enterCaseSpecification(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseSpecification) {
	 		listener.exitCaseSpecification(this);
		}
	}
}


export class SimpleCaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CASE(): TerminalNode {
		return this.getToken(GqlParser.CASE, 0);
	}
	public caseOperand(): CaseOperandContext {
		return this.getTypedRuleContext(CaseOperandContext, 0) as CaseOperandContext;
	}
	public simpleWhenClause(): SimpleWhenClauseContext {
		return this.getTypedRuleContext(SimpleWhenClauseContext, 0) as SimpleWhenClauseContext;
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
	public elseClause(): ElseClauseContext {
		return this.getTypedRuleContext(ElseClauseContext, 0) as ElseClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleCase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleCase) {
	 		listener.enterSimpleCase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleCase) {
	 		listener.exitSimpleCase(this);
		}
	}
}


export class SearchedCaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CASE(): TerminalNode {
		return this.getToken(GqlParser.CASE, 0);
	}
	public searchedWhenClause(): SearchedWhenClauseContext {
		return this.getTypedRuleContext(SearchedWhenClauseContext, 0) as SearchedWhenClauseContext;
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
	public elseClause(): ElseClauseContext {
		return this.getTypedRuleContext(ElseClauseContext, 0) as ElseClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_searchedCase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSearchedCase) {
	 		listener.enterSearchedCase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSearchedCase) {
	 		listener.exitSearchedCase(this);
		}
	}
}


export class SimpleWhenClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHEN(): TerminalNode {
		return this.getToken(GqlParser.WHEN, 0);
	}
	public whenOperandList(): WhenOperandListContext {
		return this.getTypedRuleContext(WhenOperandListContext, 0) as WhenOperandListContext;
	}
	public THEN(): TerminalNode {
		return this.getToken(GqlParser.THEN, 0);
	}
	public result(): ResultContext {
		return this.getTypedRuleContext(ResultContext, 0) as ResultContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleWhenClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleWhenClause) {
	 		listener.enterSimpleWhenClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleWhenClause) {
	 		listener.exitSimpleWhenClause(this);
		}
	}
}


export class SearchedWhenClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHEN(): TerminalNode {
		return this.getToken(GqlParser.WHEN, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
	public THEN(): TerminalNode {
		return this.getToken(GqlParser.THEN, 0);
	}
	public result(): ResultContext {
		return this.getTypedRuleContext(ResultContext, 0) as ResultContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_searchedWhenClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSearchedWhenClause) {
	 		listener.enterSearchedWhenClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSearchedWhenClause) {
	 		listener.exitSearchedWhenClause(this);
		}
	}
}


export class ElseClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELSE(): TerminalNode {
		return this.getToken(GqlParser.ELSE, 0);
	}
	public result(): ResultContext {
		return this.getTypedRuleContext(ResultContext, 0) as ResultContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elseClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElseClause) {
	 		listener.enterElseClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElseClause) {
	 		listener.exitElseClause(this);
		}
	}
}


export class CaseOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseOperand) {
	 		listener.enterCaseOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseOperand) {
	 		listener.exitCaseOperand(this);
		}
	}
}


export class WhenOperandListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public whenOperand_list(): WhenOperandContext[] {
		return this.getTypedRuleContexts(WhenOperandContext) as WhenOperandContext[];
	}
	public whenOperand(i: number): WhenOperandContext {
		return this.getTypedRuleContext(WhenOperandContext, i) as WhenOperandContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_whenOperandList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWhenOperandList) {
	 		listener.enterWhenOperandList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWhenOperandList) {
	 		listener.exitWhenOperandList(this);
		}
	}
}


export class WhenOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
	public comparisonPredicatePart2(): ComparisonPredicatePart2Context {
		return this.getTypedRuleContext(ComparisonPredicatePart2Context, 0) as ComparisonPredicatePart2Context;
	}
	public nullPredicatePart2(): NullPredicatePart2Context {
		return this.getTypedRuleContext(NullPredicatePart2Context, 0) as NullPredicatePart2Context;
	}
	public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
		return this.getTypedRuleContext(ValueTypePredicatePart2Context, 0) as ValueTypePredicatePart2Context;
	}
	public directedPredicatePart2(): DirectedPredicatePart2Context {
		return this.getTypedRuleContext(DirectedPredicatePart2Context, 0) as DirectedPredicatePart2Context;
	}
	public labeledPredicatePart2(): LabeledPredicatePart2Context {
		return this.getTypedRuleContext(LabeledPredicatePart2Context, 0) as LabeledPredicatePart2Context;
	}
	public sourcePredicatePart2(): SourcePredicatePart2Context {
		return this.getTypedRuleContext(SourcePredicatePart2Context, 0) as SourcePredicatePart2Context;
	}
	public destinationPredicatePart2(): DestinationPredicatePart2Context {
		return this.getTypedRuleContext(DestinationPredicatePart2Context, 0) as DestinationPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_whenOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWhenOperand) {
	 		listener.enterWhenOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWhenOperand) {
	 		listener.exitWhenOperand(this);
		}
	}
}


export class ResultContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public resultExpr(): ResultExprContext {
		return this.getTypedRuleContext(ResultExprContext, 0) as ResultExprContext;
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_result;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterResult) {
	 		listener.enterResult(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitResult) {
	 		listener.exitResult(this);
		}
	}
}


export class ResultExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_resultExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterResultExpr) {
	 		listener.enterResultExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitResultExpr) {
	 		listener.exitResultExpr(this);
		}
	}
}


export class CastSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CAST(): TerminalNode {
		return this.getToken(GqlParser.CAST, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public castOperand(): CastOperandContext {
		return this.getTypedRuleContext(CastOperandContext, 0) as CastOperandContext;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public castTarget(): CastTargetContext {
		return this.getTypedRuleContext(CastTargetContext, 0) as CastTargetContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_castSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCastSpec) {
	 		listener.enterCastSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCastSpec) {
	 		listener.exitCastSpec(this);
		}
	}
}


export class CastOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_castOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCastOperand) {
	 		listener.enterCastOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCastOperand) {
	 		listener.exitCastOperand(this);
		}
	}
}


export class CastTargetContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_castTarget;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCastTarget) {
	 		listener.enterCastTarget(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCastTarget) {
	 		listener.exitCastTarget(this);
		}
	}
}


export class ElementIdFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELEMENT_ID(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT_ID, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementIdFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementIdFunction) {
	 		listener.enterElementIdFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementIdFunction) {
	 		listener.exitElementIdFunction(this);
		}
	}
}


export class LetValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LET(): TerminalNode {
		return this.getToken(GqlParser.LET, 0);
	}
	public letVarDefList(): LetVarDefListContext {
		return this.getTypedRuleContext(LetVarDefListContext, 0) as LetVarDefListContext;
	}
	public IN(): TerminalNode {
		return this.getToken(GqlParser.IN, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetValueExpr) {
	 		listener.enterLetValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetValueExpr) {
	 		listener.exitLetValueExpr(this);
		}
	}
}


export class LiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIGNED_NUMERIC_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.SIGNED_NUMERIC_LITERAL, 0);
	}
	public generalLiteral(): GeneralLiteralContext {
		return this.getTypedRuleContext(GeneralLiteralContext, 0) as GeneralLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_literal;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLiteral) {
	 		listener.enterLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLiteral) {
	 		listener.exitLiteral(this);
		}
	}
}


export class GeneralLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predefinedTypeLiteral(): PredefinedTypeLiteralContext {
		return this.getTypedRuleContext(PredefinedTypeLiteralContext, 0) as PredefinedTypeLiteralContext;
	}
	public listLiteral(): ListLiteralContext {
		return this.getTypedRuleContext(ListLiteralContext, 0) as ListLiteralContext;
	}
	public recordLiteral(): RecordLiteralContext {
		return this.getTypedRuleContext(RecordLiteralContext, 0) as RecordLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLiteral) {
	 		listener.enterGeneralLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLiteral) {
	 		listener.exitGeneralLiteral(this);
		}
	}
}


export class PredefinedTypeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanLiteral(): BooleanLiteralContext {
		return this.getTypedRuleContext(BooleanLiteralContext, 0) as BooleanLiteralContext;
	}
	public characterStringLiteral(): CharacterStringLiteralContext {
		return this.getTypedRuleContext(CharacterStringLiteralContext, 0) as CharacterStringLiteralContext;
	}
	public BYTE_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.BYTE_STRING_LITERAL, 0);
	}
	public temporalLiteral(): TemporalLiteralContext {
		return this.getTypedRuleContext(TemporalLiteralContext, 0) as TemporalLiteralContext;
	}
	public durationLiteral(): DurationLiteralContext {
		return this.getTypedRuleContext(DurationLiteralContext, 0) as DurationLiteralContext;
	}
	public nullLiteral(): NullLiteralContext {
		return this.getTypedRuleContext(NullLiteralContext, 0) as NullLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedTypeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedTypeLiteral) {
	 		listener.enterPredefinedTypeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedTypeLiteral) {
	 		listener.exitPredefinedTypeLiteral(this);
		}
	}
}


export class UnsignedLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_NUMERIC_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_NUMERIC_LITERAL, 0);
	}
	public generalLiteral(): GeneralLiteralContext {
		return this.getTypedRuleContext(GeneralLiteralContext, 0) as GeneralLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedLiteral) {
	 		listener.enterUnsignedLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedLiteral) {
	 		listener.exitUnsignedLiteral(this);
		}
	}
}


export class BooleanLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUE(): TerminalNode {
		return this.getToken(GqlParser.TRUE, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(GqlParser.FALSE, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(GqlParser.UNKNOWN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanLiteral) {
	 		listener.enterBooleanLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanLiteral) {
	 		listener.exitBooleanLiteral(this);
		}
	}
}


export class CharacterStringLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleQuotedCharacterSequence(): SingleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(SingleQuotedCharacterSequenceContext, 0) as SingleQuotedCharacterSequenceContext;
	}
	public doubleQuotedCharacterSequence(): DoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext, 0) as DoubleQuotedCharacterSequenceContext;
	}
	public accentQuotedCharacterSequence(): AccentQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext, 0) as AccentQuotedCharacterSequenceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_characterStringLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharacterStringLiteral) {
	 		listener.enterCharacterStringLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharacterStringLiteral) {
	 		listener.exitCharacterStringLiteral(this);
		}
	}
}


export class UnbrokenCharacterStringLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenSingleQuotedCharacterSequence(): UnbrokenSingleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext, 0) as UnbrokenSingleQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public unbrokenDoubleQuotedCharacterSequence(): UnbrokenDoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext, 0) as UnbrokenDoubleQuotedCharacterSequenceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenCharacterStringLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenCharacterStringLiteral) {
	 		listener.enterUnbrokenCharacterStringLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenCharacterStringLiteral) {
	 		listener.exitUnbrokenCharacterStringLiteral(this);
		}
	}
}


export class SingleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenSingleQuotedCharacterSequence_list(): UnbrokenSingleQuotedCharacterSequenceContext[] {
		return this.getTypedRuleContexts(UnbrokenSingleQuotedCharacterSequenceContext) as UnbrokenSingleQuotedCharacterSequenceContext[];
	}
	public unbrokenSingleQuotedCharacterSequence(i: number): UnbrokenSingleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext, i) as UnbrokenSingleQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_singleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSingleQuotedCharacterSequence) {
	 		listener.enterSingleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSingleQuotedCharacterSequence) {
	 		listener.exitSingleQuotedCharacterSequence(this);
		}
	}
}


export class DoubleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenDoubleQuotedCharacterSequence_list(): UnbrokenDoubleQuotedCharacterSequenceContext[] {
		return this.getTypedRuleContexts(UnbrokenDoubleQuotedCharacterSequenceContext) as UnbrokenDoubleQuotedCharacterSequenceContext[];
	}
	public unbrokenDoubleQuotedCharacterSequence(i: number): UnbrokenDoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext, i) as UnbrokenDoubleQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_doubleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDoubleQuotedCharacterSequence) {
	 		listener.enterDoubleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDoubleQuotedCharacterSequence) {
	 		listener.exitDoubleQuotedCharacterSequence(this);
		}
	}
}


export class AccentQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenAccentQuotedCharacterSequence_list(): UnbrokenAccentQuotedCharacterSequenceContext[] {
		return this.getTypedRuleContexts(UnbrokenAccentQuotedCharacterSequenceContext) as UnbrokenAccentQuotedCharacterSequenceContext[];
	}
	public unbrokenAccentQuotedCharacterSequence(i: number): UnbrokenAccentQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenAccentQuotedCharacterSequenceContext, i) as UnbrokenAccentQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_accentQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAccentQuotedCharacterSequence) {
	 		listener.enterAccentQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAccentQuotedCharacterSequence) {
	 		listener.exitAccentQuotedCharacterSequence(this);
		}
	}
}


export class NoEscapeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMERCIAL_AT(): TerminalNode {
		return this.getToken(GqlParser.COMMERCIAL_AT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_noEscape;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNoEscape) {
	 		listener.enterNoEscape(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNoEscape) {
	 		listener.exitNoEscape(this);
		}
	}
}


export class UnbrokenSingleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SINGLE_QUOTED_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.SINGLE_QUOTED_STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenSingleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenSingleQuotedCharacterSequence) {
	 		listener.enterUnbrokenSingleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenSingleQuotedCharacterSequence) {
	 		listener.exitUnbrokenSingleQuotedCharacterSequence(this);
		}
	}
}


export class UnbrokenDoubleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOUBLE_QUOTED_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_QUOTED_STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenDoubleQuotedCharacterSequence) {
	 		listener.enterUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenDoubleQuotedCharacterSequence) {
	 		listener.exitUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}
}


export class UnbrokenAccentQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACCENT_QUOTED_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.ACCENT_QUOTED_STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenAccentQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenAccentQuotedCharacterSequence) {
	 		listener.enterUnbrokenAccentQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenAccentQuotedCharacterSequence) {
	 		listener.exitUnbrokenAccentQuotedCharacterSequence(this);
		}
	}
}


export class TemporalLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateLiteral(): DateLiteralContext {
		return this.getTypedRuleContext(DateLiteralContext, 0) as DateLiteralContext;
	}
	public timeLiteral(): TimeLiteralContext {
		return this.getTypedRuleContext(TimeLiteralContext, 0) as TimeLiteralContext;
	}
	public dateTimeLiteral(): DateTimeLiteralContext {
		return this.getTypedRuleContext(DateTimeLiteralContext, 0) as DateTimeLiteralContext;
	}
	public sqlDateTimeLiteral(): SqlDateTimeLiteralContext {
		return this.getTypedRuleContext(SqlDateTimeLiteralContext, 0) as SqlDateTimeLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalLiteral) {
	 		listener.enterTemporalLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalLiteral) {
	 		listener.exitTemporalLiteral(this);
		}
	}
}


export class DateLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateLiteral) {
	 		listener.enterDateLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateLiteral) {
	 		listener.exitDateLiteral(this);
		}
	}
}


export class TimeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeLiteral) {
	 		listener.enterTimeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeLiteral) {
	 		listener.exitTimeLiteral(this);
		}
	}
}


export class DateTimeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeLiteral) {
	 		listener.enterDateTimeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeLiteral) {
	 		listener.exitDateTimeLiteral(this);
		}
	}
}


export class DateStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateString) {
	 		listener.enterDateString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateString) {
	 		listener.exitDateString(this);
		}
	}
}


export class TimeStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeString) {
	 		listener.enterTimeString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeString) {
	 		listener.exitTimeString(this);
		}
	}
}


export class DateTimeStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeString) {
	 		listener.enterDateTimeString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeString) {
	 		listener.exitDateTimeString(this);
		}
	}
}


export class SqlDateTimeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public QUOTE_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.QUOTE);
	}
	public QUOTE(i: number): TerminalNode {
		return this.getToken(GqlParser.QUOTE, i);
	}
	public FOUR_DIGIT(): TerminalNode {
		return this.getToken(GqlParser.FOUR_DIGIT, 0);
	}
	public MINUS_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.MINUS);
	}
	public MINUS(i: number): TerminalNode {
		return this.getToken(GqlParser.MINUS, i);
	}
	public DOUBLE_DIGIT_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.DOUBLE_DIGIT);
	}
	public DOUBLE_DIGIT(i: number): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_DIGIT, i);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public COLON_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COLON);
	}
	public COLON(i: number): TerminalNode {
		return this.getToken(GqlParser.COLON, i);
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sqlDateTimeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSqlDateTimeLiteral) {
	 		listener.enterSqlDateTimeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSqlDateTimeLiteral) {
	 		listener.exitSqlDateTimeLiteral(this);
		}
	}
}


export class DurationLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public durationString(): DurationStringContext {
		return this.getTypedRuleContext(DurationStringContext, 0) as DurationStringContext;
	}
	public sqlIntervalLiteral(): SqlIntervalLiteralContext {
		return this.getTypedRuleContext(SqlIntervalLiteralContext, 0) as SqlIntervalLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationLiteral) {
	 		listener.enterDurationLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationLiteral) {
	 		listener.exitDurationLiteral(this);
		}
	}
}


export class DurationStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationString) {
	 		listener.enterDurationString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationString) {
	 		listener.exitDurationString(this);
		}
	}
}


export class SqlIntervalLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
	public sqlIntervalType(): SqlIntervalTypeContext {
		return this.getTypedRuleContext(SqlIntervalTypeContext, 0) as SqlIntervalTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sqlIntervalLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSqlIntervalLiteral) {
	 		listener.enterSqlIntervalLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSqlIntervalLiteral) {
	 		listener.exitSqlIntervalLiteral(this);
		}
	}
}


export class SqlIntervalTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INTERVAL_DAY(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_DAY, 0);
	}
	public INTERVAL_WEEK(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_WEEK, 0);
	}
	public INTERVAL_MONTH(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_MONTH, 0);
	}
	public INTERVAL_YEAR(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_YEAR, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sqlIntervalType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSqlIntervalType) {
	 		listener.enterSqlIntervalType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSqlIntervalType) {
	 		listener.exitSqlIntervalType(this);
		}
	}
}


export class NullLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullLiteral) {
	 		listener.enterNullLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullLiteral) {
	 		listener.exitNullLiteral(this);
		}
	}
}


export class ListLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
		return this.getTypedRuleContext(ListValueConstructorByEnumerationContext, 0) as ListValueConstructorByEnumerationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListLiteral) {
	 		listener.enterListLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListLiteral) {
	 		listener.exitListLiteral(this);
		}
	}
}


export class RecordLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordLiteral) {
	 		listener.enterRecordLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordLiteral) {
	 		listener.exitRecordLiteral(this);
		}
	}
}


export class ObjectNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_objectName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterObjectName) {
	 		listener.enterObjectName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitObjectName) {
	 		listener.exitObjectName(this);
		}
	}
}


export class ObjectNameOrBindingVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_objectNameOrBindingVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterObjectNameOrBindingVar) {
	 		listener.enterObjectNameOrBindingVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitObjectNameOrBindingVar) {
	 		listener.exitObjectNameOrBindingVar(this);
		}
	}
}


export class DirectoryNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_directoryName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDirectoryName) {
	 		listener.enterDirectoryName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDirectoryName) {
	 		listener.exitDirectoryName(this);
		}
	}
}


export class SchemaNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_schemaName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSchemaName) {
	 		listener.enterSchemaName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSchemaName) {
	 		listener.exitSchemaName(this);
		}
	}
}


export class GraphNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedGraphName(): DelimitedGraphNameContext {
		return this.getTypedRuleContext(DelimitedGraphNameContext, 0) as DelimitedGraphNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphName) {
	 		listener.enterGraphName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphName) {
	 		listener.exitGraphName(this);
		}
	}
}


export class DelimitedGraphNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimitedGraphName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimitedGraphName) {
	 		listener.enterDelimitedGraphName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimitedGraphName) {
	 		listener.exitDelimitedGraphName(this);
		}
	}
}


export class GraphTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeName) {
	 		listener.enterGraphTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeName) {
	 		listener.exitGraphTypeName(this);
		}
	}
}


export class ElementTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementTypeName) {
	 		listener.enterElementTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementTypeName) {
	 		listener.exitElementTypeName(this);
		}
	}
}


export class BindingTableNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedBindingTableName(): DelimitedBindingTableNameContext {
		return this.getTypedRuleContext(DelimitedBindingTableNameContext, 0) as DelimitedBindingTableNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableName) {
	 		listener.enterBindingTableName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableName) {
	 		listener.exitBindingTableName(this);
		}
	}
}


export class DelimitedBindingTableNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimitedBindingTableName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimitedBindingTableName) {
	 		listener.enterDelimitedBindingTableName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimitedBindingTableName) {
	 		listener.exitDelimitedBindingTableName(this);
		}
	}
}


export class ProcedureNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureName) {
	 		listener.enterProcedureName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureName) {
	 		listener.exitProcedureName(this);
		}
	}
}


export class LabelNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelName) {
	 		listener.enterLabelName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelName) {
	 		listener.exitLabelName(this);
		}
	}
}


export class PropertyNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyName) {
	 		listener.enterPropertyName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyName) {
	 		listener.exitPropertyName(this);
		}
	}
}


export class FieldNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldName) {
	 		listener.enterFieldName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldName) {
	 		listener.exitFieldName(this);
		}
	}
}


export class ParameterNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOLLAR(): TerminalNode {
		return this.getToken(GqlParser.DOLLAR, 0);
	}
	public separatedIdentifier(): SeparatedIdentifierContext {
		return this.getTypedRuleContext(SeparatedIdentifierContext, 0) as SeparatedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parameterName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParameterName) {
	 		listener.enterParameterName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParameterName) {
	 		listener.exitParameterName(this);
		}
	}
}


export class VarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphVar(): GraphVarContext {
		return this.getTypedRuleContext(GraphVarContext, 0) as GraphVarContext;
	}
	public graphPatternVar(): GraphPatternVarContext {
		return this.getTypedRuleContext(GraphPatternVarContext, 0) as GraphPatternVarContext;
	}
	public bindingTableVar(): BindingTableVarContext {
		return this.getTypedRuleContext(BindingTableVarContext, 0) as BindingTableVarContext;
	}
	public valueVar(): ValueVarContext {
		return this.getTypedRuleContext(ValueVarContext, 0) as ValueVarContext;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_var;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterVar) {
	 		listener.enterVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitVar) {
	 		listener.exitVar(this);
		}
	}
}


export class GraphVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphVar) {
	 		listener.enterGraphVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphVar) {
	 		listener.exitGraphVar(this);
		}
	}
}


export class GraphPatternVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVar(): ElementVarContext {
		return this.getTypedRuleContext(ElementVarContext, 0) as ElementVarContext;
	}
	public pathOrSubpathVar(): PathOrSubpathVarContext {
		return this.getTypedRuleContext(PathOrSubpathVarContext, 0) as PathOrSubpathVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternVar) {
	 		listener.enterGraphPatternVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternVar) {
	 		listener.exitGraphPatternVar(this);
		}
	}
}


export class PathOrSubpathVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathVar(): PathVarContext {
		return this.getTypedRuleContext(PathVarContext, 0) as PathVarContext;
	}
	public subpathVar(): SubpathVarContext {
		return this.getTypedRuleContext(SubpathVarContext, 0) as SubpathVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathOrSubpathVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathOrSubpathVar) {
	 		listener.enterPathOrSubpathVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathOrSubpathVar) {
	 		listener.exitPathOrSubpathVar(this);
		}
	}
}


export class ElementVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementVar) {
	 		listener.enterElementVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementVar) {
	 		listener.exitElementVar(this);
		}
	}
}


export class PathVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathVar) {
	 		listener.enterPathVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathVar) {
	 		listener.exitPathVar(this);
		}
	}
}


export class SubpathVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_subpathVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSubpathVar) {
	 		listener.enterSubpathVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSubpathVar) {
	 		listener.exitSubpathVar(this);
		}
	}
}


export class BindingTableVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableVar) {
	 		listener.enterBindingTableVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableVar) {
	 		listener.exitBindingTableVar(this);
		}
	}
}


export class ValueVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueVar) {
	 		listener.enterValueVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueVar) {
	 		listener.exitValueVar(this);
		}
	}
}


export class BindingVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVar) {
	 		listener.enterBindingVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVar) {
	 		listener.exitBindingVar(this);
		}
	}
}


export class TokenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonDelimiterToken(): NonDelimiterTokenContext {
		return this.getTypedRuleContext(NonDelimiterTokenContext, 0) as NonDelimiterTokenContext;
	}
	public delimiterToken(): DelimiterTokenContext {
		return this.getTypedRuleContext(DelimiterTokenContext, 0) as DelimiterTokenContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_token;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterToken) {
	 		listener.enterToken(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitToken) {
	 		listener.exitToken(this);
		}
	}
}


export class NonDelimiterTokenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
	public keyWord(): KeyWordContext {
		return this.getTypedRuleContext(KeyWordContext, 0) as KeyWordContext;
	}
	public UNSIGNED_NUMERIC_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_NUMERIC_LITERAL, 0);
	}
	public BYTE_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.BYTE_STRING_LITERAL, 0);
	}
	public MULTISET_ALTERNATION(): TerminalNode {
		return this.getToken(GqlParser.MULTISET_ALTERNATION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonDelimiterToken;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonDelimiterToken) {
	 		listener.enterNonDelimiterToken(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonDelimiterToken) {
	 		listener.exitNonDelimiterToken(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_identifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIdentifier) {
	 		listener.enterIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIdentifier) {
	 		listener.exitIdentifier(this);
		}
	}
}


export class SeparatedIdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_separatedIdentifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSeparatedIdentifier) {
	 		listener.enterSeparatedIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSeparatedIdentifier) {
	 		listener.exitSeparatedIdentifier(this);
		}
	}
}


export class NonDelimitedIdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public EXTENDED_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.EXTENDED_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonDelimitedIdentifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonDelimitedIdentifier) {
	 		listener.enterNonDelimitedIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonDelimitedIdentifier) {
	 		listener.exitNonDelimitedIdentifier(this);
		}
	}
}


export class DelimitedIdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public doubleQuotedCharacterSequence(): DoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext, 0) as DoubleQuotedCharacterSequenceContext;
	}
	public accentQuotedCharacterSequence(): AccentQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext, 0) as AccentQuotedCharacterSequenceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimitedIdentifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimitedIdentifier) {
	 		listener.enterDelimitedIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimitedIdentifier) {
	 		listener.exitDelimitedIdentifier(this);
		}
	}
}


export class KeyWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public reservedWord(): ReservedWordContext {
		return this.getTypedRuleContext(ReservedWordContext, 0) as ReservedWordContext;
	}
	public nonReservedWord(): NonReservedWordContext {
		return this.getTypedRuleContext(NonReservedWordContext, 0) as NonReservedWordContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_keyWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterKeyWord) {
	 		listener.enterKeyWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitKeyWord) {
	 		listener.exitKeyWord(this);
		}
	}
}


export class ReservedWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public preReservedWord(): PreReservedWordContext {
		return this.getTypedRuleContext(PreReservedWordContext, 0) as PreReservedWordContext;
	}
	public ABS(): TerminalNode {
		return this.getToken(GqlParser.ABS, 0);
	}
	public ACOS(): TerminalNode {
		return this.getToken(GqlParser.ACOS, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public ALL_DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.ALL_DIFFERENT, 0);
	}
	public AND(): TerminalNode {
		return this.getToken(GqlParser.AND, 0);
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public ARRAY(): TerminalNode {
		return this.getToken(GqlParser.ARRAY, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public ASC(): TerminalNode {
		return this.getToken(GqlParser.ASC, 0);
	}
	public ASCENDING(): TerminalNode {
		return this.getToken(GqlParser.ASCENDING, 0);
	}
	public ASIN(): TerminalNode {
		return this.getToken(GqlParser.ASIN, 0);
	}
	public AT(): TerminalNode {
		return this.getToken(GqlParser.AT, 0);
	}
	public ATAN(): TerminalNode {
		return this.getToken(GqlParser.ATAN, 0);
	}
	public AVG(): TerminalNode {
		return this.getToken(GqlParser.AVG, 0);
	}
	public BIG(): TerminalNode {
		return this.getToken(GqlParser.BIG, 0);
	}
	public BIGINT(): TerminalNode {
		return this.getToken(GqlParser.BIGINT, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(GqlParser.BINARY, 0);
	}
	public BOOL(): TerminalNode {
		return this.getToken(GqlParser.BOOL, 0);
	}
	public BOOLEAN(): TerminalNode {
		return this.getToken(GqlParser.BOOLEAN, 0);
	}
	public BOTH(): TerminalNode {
		return this.getToken(GqlParser.BOTH, 0);
	}
	public BTRIM(): TerminalNode {
		return this.getToken(GqlParser.BTRIM, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(GqlParser.BY, 0);
	}
	public BYTE_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.BYTE_LENGTH, 0);
	}
	public BYTES(): TerminalNode {
		return this.getToken(GqlParser.BYTES, 0);
	}
	public CALL(): TerminalNode {
		return this.getToken(GqlParser.CALL, 0);
	}
	public CASE(): TerminalNode {
		return this.getToken(GqlParser.CASE, 0);
	}
	public CAST(): TerminalNode {
		return this.getToken(GqlParser.CAST, 0);
	}
	public CEIL(): TerminalNode {
		return this.getToken(GqlParser.CEIL, 0);
	}
	public CEILING(): TerminalNode {
		return this.getToken(GqlParser.CEILING, 0);
	}
	public CHAR_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHAR_LENGTH, 0);
	}
	public CHARACTER_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHARACTER_LENGTH, 0);
	}
	public CHARACTERISTICS(): TerminalNode {
		return this.getToken(GqlParser.CHARACTERISTICS, 0);
	}
	public CLOSE(): TerminalNode {
		return this.getToken(GqlParser.CLOSE, 0);
	}
	public COALESCE(): TerminalNode {
		return this.getToken(GqlParser.COALESCE, 0);
	}
	public COLLECT(): TerminalNode {
		return this.getToken(GqlParser.COLLECT, 0);
	}
	public COMMIT(): TerminalNode {
		return this.getToken(GqlParser.COMMIT, 0);
	}
	public COPY(): TerminalNode {
		return this.getToken(GqlParser.COPY, 0);
	}
	public COS(): TerminalNode {
		return this.getToken(GqlParser.COS, 0);
	}
	public COSH(): TerminalNode {
		return this.getToken(GqlParser.COSH, 0);
	}
	public COT(): TerminalNode {
		return this.getToken(GqlParser.COT, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(GqlParser.COUNT, 0);
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public CURRENT_DATE(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_DATE, 0);
	}
	public CURRENT_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_GRAPH, 0);
	}
	public CURRENT_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0);
	}
	public CURRENT_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_SCHEMA, 0);
	}
	public CURRENT_TIME(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIME, 0);
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIMESTAMP, 0);
	}
	public CURRENT_USER(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_USER, 0);
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public DAY(): TerminalNode {
		return this.getToken(GqlParser.DAY, 0);
	}
	public DEC(): TerminalNode {
		return this.getToken(GqlParser.DEC, 0);
	}
	public DECIMAL(): TerminalNode {
		return this.getToken(GqlParser.DECIMAL, 0);
	}
	public DEGREES(): TerminalNode {
		return this.getToken(GqlParser.DEGREES, 0);
	}
	public DELETE(): TerminalNode {
		return this.getToken(GqlParser.DELETE, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(GqlParser.DESC, 0);
	}
	public DESCENDING(): TerminalNode {
		return this.getToken(GqlParser.DESCENDING, 0);
	}
	public DETACH(): TerminalNode {
		return this.getToken(GqlParser.DETACH, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(GqlParser.DISTINCT, 0);
	}
	public DOUBLE(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE, 0);
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public DURATION_BETWEEN(): TerminalNode {
		return this.getToken(GqlParser.DURATION_BETWEEN, 0);
	}
	public ELEMENT_ID(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT_ID, 0);
	}
	public ELSE(): TerminalNode {
		return this.getToken(GqlParser.ELSE, 0);
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
	public EXCEPT(): TerminalNode {
		return this.getToken(GqlParser.EXCEPT, 0);
	}
	public EXISTS(): TerminalNode {
		return this.getToken(GqlParser.EXISTS, 0);
	}
	public EXP(): TerminalNode {
		return this.getToken(GqlParser.EXP, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(GqlParser.FALSE, 0);
	}
	public FILTER(): TerminalNode {
		return this.getToken(GqlParser.FILTER, 0);
	}
	public FINISH(): TerminalNode {
		return this.getToken(GqlParser.FINISH, 0);
	}
	public FLOAT(): TerminalNode {
		return this.getToken(GqlParser.FLOAT, 0);
	}
	public FLOAT16(): TerminalNode {
		return this.getToken(GqlParser.FLOAT16, 0);
	}
	public FLOAT32(): TerminalNode {
		return this.getToken(GqlParser.FLOAT32, 0);
	}
	public FLOAT64(): TerminalNode {
		return this.getToken(GqlParser.FLOAT64, 0);
	}
	public FLOAT128(): TerminalNode {
		return this.getToken(GqlParser.FLOAT128, 0);
	}
	public FLOAT256(): TerminalNode {
		return this.getToken(GqlParser.FLOAT256, 0);
	}
	public FLOOR(): TerminalNode {
		return this.getToken(GqlParser.FLOOR, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(GqlParser.FOR, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
	public HAVING(): TerminalNode {
		return this.getToken(GqlParser.HAVING, 0);
	}
	public HOME_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_GRAPH, 0);
	}
	public HOME_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0);
	}
	public HOME_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.HOME_SCHEMA, 0);
	}
	public HOUR(): TerminalNode {
		return this.getToken(GqlParser.HOUR, 0);
	}
	public IF(): TerminalNode {
		return this.getToken(GqlParser.IF, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(GqlParser.IN, 0);
	}
	public INSERT(): TerminalNode {
		return this.getToken(GqlParser.INSERT, 0);
	}
	public INT(): TerminalNode {
		return this.getToken(GqlParser.INT, 0);
	}
	public INTEGER(): TerminalNode {
		return this.getToken(GqlParser.INTEGER, 0);
	}
	public INT8(): TerminalNode {
		return this.getToken(GqlParser.INT8, 0);
	}
	public INTEGER8(): TerminalNode {
		return this.getToken(GqlParser.INTEGER8, 0);
	}
	public INT16(): TerminalNode {
		return this.getToken(GqlParser.INT16, 0);
	}
	public INTEGER16(): TerminalNode {
		return this.getToken(GqlParser.INTEGER16, 0);
	}
	public INT32(): TerminalNode {
		return this.getToken(GqlParser.INT32, 0);
	}
	public INTEGER32(): TerminalNode {
		return this.getToken(GqlParser.INTEGER32, 0);
	}
	public INT64(): TerminalNode {
		return this.getToken(GqlParser.INT64, 0);
	}
	public INTEGER64(): TerminalNode {
		return this.getToken(GqlParser.INTEGER64, 0);
	}
	public INT128(): TerminalNode {
		return this.getToken(GqlParser.INT128, 0);
	}
	public INTEGER128(): TerminalNode {
		return this.getToken(GqlParser.INTEGER128, 0);
	}
	public INT256(): TerminalNode {
		return this.getToken(GqlParser.INT256, 0);
	}
	public INTEGER256(): TerminalNode {
		return this.getToken(GqlParser.INTEGER256, 0);
	}
	public INTERSECT(): TerminalNode {
		return this.getToken(GqlParser.INTERSECT, 0);
	}
	public INTERVAL(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL, 0);
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public LEADING(): TerminalNode {
		return this.getToken(GqlParser.LEADING, 0);
	}
	public LET(): TerminalNode {
		return this.getToken(GqlParser.LET, 0);
	}
	public LIKE(): TerminalNode {
		return this.getToken(GqlParser.LIKE, 0);
	}
	public LIMIT(): TerminalNode {
		return this.getToken(GqlParser.LIMIT, 0);
	}
	public LIST(): TerminalNode {
		return this.getToken(GqlParser.LIST, 0);
	}
	public LN(): TerminalNode {
		return this.getToken(GqlParser.LN, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(GqlParser.LOCAL, 0);
	}
	public LOCAL_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_DATETIME, 0);
	}
	public LOCAL_TIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIME, 0);
	}
	public LOCAL_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIMESTAMP, 0);
	}
	public LOG(): TerminalNode {
		return this.getToken(GqlParser.LOG, 0);
	}
	public LOG10(): TerminalNode {
		return this.getToken(GqlParser.LOG10, 0);
	}
	public LOWER(): TerminalNode {
		return this.getToken(GqlParser.LOWER, 0);
	}
	public LTRIM(): TerminalNode {
		return this.getToken(GqlParser.LTRIM, 0);
	}
	public MATCH(): TerminalNode {
		return this.getToken(GqlParser.MATCH, 0);
	}
	public MAX(): TerminalNode {
		return this.getToken(GqlParser.MAX, 0);
	}
	public MIN(): TerminalNode {
		return this.getToken(GqlParser.MIN, 0);
	}
	public MINUTE(): TerminalNode {
		return this.getToken(GqlParser.MINUTE, 0);
	}
	public MOD(): TerminalNode {
		return this.getToken(GqlParser.MOD, 0);
	}
	public MONTH(): TerminalNode {
		return this.getToken(GqlParser.MONTH, 0);
	}
	public NEXT(): TerminalNode {
		return this.getToken(GqlParser.NEXT, 0);
	}
	public NODETACH(): TerminalNode {
		return this.getToken(GqlParser.NODETACH, 0);
	}
	public NORMALIZE(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZE, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
	public NULLS(): TerminalNode {
		return this.getToken(GqlParser.NULLS, 0);
	}
	public NULLIF(): TerminalNode {
		return this.getToken(GqlParser.NULLIF, 0);
	}
	public OCTET_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.OCTET_LENGTH, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public OFFSET(): TerminalNode {
		return this.getToken(GqlParser.OFFSET, 0);
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(GqlParser.OPTIONAL, 0);
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public ORDER(): TerminalNode {
		return this.getToken(GqlParser.ORDER, 0);
	}
	public OTHERWISE(): TerminalNode {
		return this.getToken(GqlParser.OTHERWISE, 0);
	}
	public PARAMETER(): TerminalNode {
		return this.getToken(GqlParser.PARAMETER, 0);
	}
	public PARAMETERS(): TerminalNode {
		return this.getToken(GqlParser.PARAMETERS, 0);
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
	public PATH_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.PATH_LENGTH, 0);
	}
	public PATHS(): TerminalNode {
		return this.getToken(GqlParser.PATHS, 0);
	}
	public PERCENTILE_CONT(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_CONT, 0);
	}
	public PERCENTILE_DISC(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_DISC, 0);
	}
	public POWER(): TerminalNode {
		return this.getToken(GqlParser.POWER, 0);
	}
	public PRECISION(): TerminalNode {
		return this.getToken(GqlParser.PRECISION, 0);
	}
	public PROPERTY_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY_EXISTS, 0);
	}
	public RADIANS(): TerminalNode {
		return this.getToken(GqlParser.RADIANS, 0);
	}
	public REAL(): TerminalNode {
		return this.getToken(GqlParser.REAL, 0);
	}
	public RECORD(): TerminalNode {
		return this.getToken(GqlParser.RECORD, 0);
	}
	public REMOVE(): TerminalNode {
		return this.getToken(GqlParser.REMOVE, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(GqlParser.REPLACE, 0);
	}
	public RESET(): TerminalNode {
		return this.getToken(GqlParser.RESET, 0);
	}
	public RETURN(): TerminalNode {
		return this.getToken(GqlParser.RETURN, 0);
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(GqlParser.ROLLBACK, 0);
	}
	public RTRIM(): TerminalNode {
		return this.getToken(GqlParser.RTRIM, 0);
	}
	public SAME(): TerminalNode {
		return this.getToken(GqlParser.SAME, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public SECOND(): TerminalNode {
		return this.getToken(GqlParser.SECOND, 0);
	}
	public SELECT(): TerminalNode {
		return this.getToken(GqlParser.SELECT, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(GqlParser.SET, 0);
	}
	public SIGNED(): TerminalNode {
		return this.getToken(GqlParser.SIGNED, 0);
	}
	public SIN(): TerminalNode {
		return this.getToken(GqlParser.SIN, 0);
	}
	public SINH(): TerminalNode {
		return this.getToken(GqlParser.SINH, 0);
	}
	public SKIP_(): TerminalNode {
		return this.getToken(GqlParser.SKIP_, 0);
	}
	public SMALL(): TerminalNode {
		return this.getToken(GqlParser.SMALL, 0);
	}
	public SMALLINT(): TerminalNode {
		return this.getToken(GqlParser.SMALLINT, 0);
	}
	public SQRT(): TerminalNode {
		return this.getToken(GqlParser.SQRT, 0);
	}
	public START(): TerminalNode {
		return this.getToken(GqlParser.START, 0);
	}
	public STDDEV_POP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_POP, 0);
	}
	public STDDEV_SAMP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_SAMP, 0);
	}
	public STRING(): TerminalNode {
		return this.getToken(GqlParser.STRING, 0);
	}
	public SUM(): TerminalNode {
		return this.getToken(GqlParser.SUM, 0);
	}
	public TAN(): TerminalNode {
		return this.getToken(GqlParser.TAN, 0);
	}
	public TANH(): TerminalNode {
		return this.getToken(GqlParser.TANH, 0);
	}
	public THEN(): TerminalNode {
		return this.getToken(GqlParser.THEN, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public TRAILING(): TerminalNode {
		return this.getToken(GqlParser.TRAILING, 0);
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public TRUE(): TerminalNode {
		return this.getToken(GqlParser.TRUE, 0);
	}
	public TYPED(): TerminalNode {
		return this.getToken(GqlParser.TYPED, 0);
	}
	public UBIGINT(): TerminalNode {
		return this.getToken(GqlParser.UBIGINT, 0);
	}
	public UINT(): TerminalNode {
		return this.getToken(GqlParser.UINT, 0);
	}
	public UINT8(): TerminalNode {
		return this.getToken(GqlParser.UINT8, 0);
	}
	public UINT16(): TerminalNode {
		return this.getToken(GqlParser.UINT16, 0);
	}
	public UINT32(): TerminalNode {
		return this.getToken(GqlParser.UINT32, 0);
	}
	public UINT64(): TerminalNode {
		return this.getToken(GqlParser.UINT64, 0);
	}
	public UINT128(): TerminalNode {
		return this.getToken(GqlParser.UINT128, 0);
	}
	public UINT256(): TerminalNode {
		return this.getToken(GqlParser.UINT256, 0);
	}
	public UNION(): TerminalNode {
		return this.getToken(GqlParser.UNION, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(GqlParser.UNKNOWN, 0);
	}
	public UNSIGNED(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED, 0);
	}
	public UPPER(): TerminalNode {
		return this.getToken(GqlParser.UPPER, 0);
	}
	public USE(): TerminalNode {
		return this.getToken(GqlParser.USE, 0);
	}
	public USMALLINT(): TerminalNode {
		return this.getToken(GqlParser.USMALLINT, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public VARBINARY(): TerminalNode {
		return this.getToken(GqlParser.VARBINARY, 0);
	}
	public VARCHAR(): TerminalNode {
		return this.getToken(GqlParser.VARCHAR, 0);
	}
	public VARIABLE(): TerminalNode {
		return this.getToken(GqlParser.VARIABLE, 0);
	}
	public WHEN(): TerminalNode {
		return this.getToken(GqlParser.WHEN, 0);
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public XOR(): TerminalNode {
		return this.getToken(GqlParser.XOR, 0);
	}
	public YEAR(): TerminalNode {
		return this.getToken(GqlParser.YEAR, 0);
	}
	public YIELD(): TerminalNode {
		return this.getToken(GqlParser.YIELD, 0);
	}
	public ZONED(): TerminalNode {
		return this.getToken(GqlParser.ZONED, 0);
	}
	public ZONED_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_DATETIME, 0);
	}
	public ZONED_TIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_TIME, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_reservedWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReservedWord) {
	 		listener.enterReservedWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReservedWord) {
	 		listener.exitReservedWord(this);
		}
	}
}


export class PreReservedWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AGGREGATE(): TerminalNode {
		return this.getToken(GqlParser.AGGREGATE, 0);
	}
	public AGGREGATES(): TerminalNode {
		return this.getToken(GqlParser.AGGREGATES, 0);
	}
	public ALTER(): TerminalNode {
		return this.getToken(GqlParser.ALTER, 0);
	}
	public CATALOG(): TerminalNode {
		return this.getToken(GqlParser.CATALOG, 0);
	}
	public CLEAR(): TerminalNode {
		return this.getToken(GqlParser.CLEAR, 0);
	}
	public CLONE(): TerminalNode {
		return this.getToken(GqlParser.CLONE, 0);
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(GqlParser.CONSTRAINT, 0);
	}
	public CURRENT_ROLE(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_ROLE, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(GqlParser.DATA, 0);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(GqlParser.DIRECTORY, 0);
	}
	public EXACT(): TerminalNode {
		return this.getToken(GqlParser.EXACT, 0);
	}
	public EXISTING(): TerminalNode {
		return this.getToken(GqlParser.EXISTING, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(GqlParser.FUNCTION, 0);
	}
	public GQLSTATUS(): TerminalNode {
		return this.getToken(GqlParser.GQLSTATUS, 0);
	}
	public GRANT(): TerminalNode {
		return this.getToken(GqlParser.GRANT, 0);
	}
	public INSTANT(): TerminalNode {
		return this.getToken(GqlParser.INSTANT, 0);
	}
	public LEFT(): TerminalNode {
		return this.getToken(GqlParser.LEFT, 0);
	}
	public NOTHING(): TerminalNode {
		return this.getToken(GqlParser.NOTHING, 0);
	}
	public NUMERIC(): TerminalNode {
		return this.getToken(GqlParser.NUMERIC, 0);
	}
	public ON(): TerminalNode {
		return this.getToken(GqlParser.ON, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(GqlParser.PARTITION, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(GqlParser.PROCEDURE, 0);
	}
	public PRODUCT(): TerminalNode {
		return this.getToken(GqlParser.PRODUCT, 0);
	}
	public PROJECT(): TerminalNode {
		return this.getToken(GqlParser.PROJECT, 0);
	}
	public QUERY(): TerminalNode {
		return this.getToken(GqlParser.QUERY, 0);
	}
	public RECORDS(): TerminalNode {
		return this.getToken(GqlParser.RECORDS, 0);
	}
	public REFERENCE(): TerminalNode {
		return this.getToken(GqlParser.REFERENCE, 0);
	}
	public RENAME(): TerminalNode {
		return this.getToken(GqlParser.RENAME, 0);
	}
	public REVOKE(): TerminalNode {
		return this.getToken(GqlParser.REVOKE, 0);
	}
	public RIGHT(): TerminalNode {
		return this.getToken(GqlParser.RIGHT, 0);
	}
	public SUBSTRING(): TerminalNode {
		return this.getToken(GqlParser.SUBSTRING, 0);
	}
	public TEMPORAL(): TerminalNode {
		return this.getToken(GqlParser.TEMPORAL, 0);
	}
	public UNIQUE(): TerminalNode {
		return this.getToken(GqlParser.UNIQUE, 0);
	}
	public UNIT(): TerminalNode {
		return this.getToken(GqlParser.UNIT, 0);
	}
	public VALUES(): TerminalNode {
		return this.getToken(GqlParser.VALUES, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_preReservedWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPreReservedWord) {
	 		listener.enterPreReservedWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPreReservedWord) {
	 		listener.exitPreReservedWord(this);
		}
	}
}


export class NonReservedWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACYCLIC(): TerminalNode {
		return this.getToken(GqlParser.ACYCLIC, 0);
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
	public CONNECTING(): TerminalNode {
		return this.getToken(GqlParser.CONNECTING, 0);
	}
	public DESTINATION(): TerminalNode {
		return this.getToken(GqlParser.DESTINATION, 0);
	}
	public DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.DIFFERENT, 0);
	}
	public DIRECTED(): TerminalNode {
		return this.getToken(GqlParser.DIRECTED, 0);
	}
	public EDGE(): TerminalNode {
		return this.getToken(GqlParser.EDGE, 0);
	}
	public EDGES(): TerminalNode {
		return this.getToken(GqlParser.EDGES, 0);
	}
	public ELEMENT(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT, 0);
	}
	public ELEMENTS(): TerminalNode {
		return this.getToken(GqlParser.ELEMENTS, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(GqlParser.FIRST, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public GROUPS(): TerminalNode {
		return this.getToken(GqlParser.GROUPS, 0);
	}
	public KEEP(): TerminalNode {
		return this.getToken(GqlParser.KEEP, 0);
	}
	public LABEL(): TerminalNode {
		return this.getToken(GqlParser.LABEL, 0);
	}
	public LABELED(): TerminalNode {
		return this.getToken(GqlParser.LABELED, 0);
	}
	public LABELS(): TerminalNode {
		return this.getToken(GqlParser.LABELS, 0);
	}
	public LAST(): TerminalNode {
		return this.getToken(GqlParser.LAST, 0);
	}
	public NFC(): TerminalNode {
		return this.getToken(GqlParser.NFC, 0);
	}
	public NFD(): TerminalNode {
		return this.getToken(GqlParser.NFD, 0);
	}
	public NFKC(): TerminalNode {
		return this.getToken(GqlParser.NFKC, 0);
	}
	public NFKD(): TerminalNode {
		return this.getToken(GqlParser.NFKD, 0);
	}
	public NO(): TerminalNode {
		return this.getToken(GqlParser.NO, 0);
	}
	public NODE(): TerminalNode {
		return this.getToken(GqlParser.NODE, 0);
	}
	public NORMALIZED(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZED, 0);
	}
	public ONLY(): TerminalNode {
		return this.getToken(GqlParser.ONLY, 0);
	}
	public ORDINALITY(): TerminalNode {
		return this.getToken(GqlParser.ORDINALITY, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public READ(): TerminalNode {
		return this.getToken(GqlParser.READ, 0);
	}
	public RELATIONSHIP(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIP, 0);
	}
	public RELATIONSHIPS(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIPS, 0);
	}
	public REPEATABLE(): TerminalNode {
		return this.getToken(GqlParser.REPEATABLE, 0);
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public SIMPLE(): TerminalNode {
		return this.getToken(GqlParser.SIMPLE, 0);
	}
	public SOURCE(): TerminalNode {
		return this.getToken(GqlParser.SOURCE, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public TEMP(): TerminalNode {
		return this.getToken(GqlParser.TEMP, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(GqlParser.TO, 0);
	}
	public TRAIL(): TerminalNode {
		return this.getToken(GqlParser.TRAIL, 0);
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(GqlParser.TRANSACTION, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public UNDIRECTED(): TerminalNode {
		return this.getToken(GqlParser.UNDIRECTED, 0);
	}
	public VERTEX(): TerminalNode {
		return this.getToken(GqlParser.VERTEX, 0);
	}
	public WALK(): TerminalNode {
		return this.getToken(GqlParser.WALK, 0);
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(GqlParser.WITHOUT, 0);
	}
	public WRITE(): TerminalNode {
		return this.getToken(GqlParser.WRITE, 0);
	}
	public ZONE(): TerminalNode {
		return this.getToken(GqlParser.ZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonReservedWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonReservedWord) {
	 		listener.enterNonReservedWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonReservedWord) {
	 		listener.exitNonReservedWord(this);
		}
	}
}


export class DelimiterTokenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GQL_SPECIAL_CHAR(): TerminalNode {
		return this.getToken(GqlParser.GQL_SPECIAL_CHAR, 0);
	}
	public characterStringLiteral(): CharacterStringLiteralContext {
		return this.getTypedRuleContext(CharacterStringLiteralContext, 0) as CharacterStringLiteralContext;
	}
	public dateString(): DateStringContext {
		return this.getTypedRuleContext(DateStringContext, 0) as DateStringContext;
	}
	public dateTimeString(): DateTimeStringContext {
		return this.getTypedRuleContext(DateTimeStringContext, 0) as DateTimeStringContext;
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
	public durationString(): DurationStringContext {
		return this.getTypedRuleContext(DurationStringContext, 0) as DurationStringContext;
	}
	public timeString(): TimeStringContext {
		return this.getTypedRuleContext(TimeStringContext, 0) as TimeStringContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public DOUBLE_COLON(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_COLON, 0);
	}
	public DOUBLE_MINUS(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_MINUS, 0);
	}
	public DOUBLE_PERIOD(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_PERIOD, 0);
	}
	public notEquals(): NotEqualsContext {
		return this.getTypedRuleContext(NotEqualsContext, 0) as NotEqualsContext;
	}
	public lessThen(): LessThenContext {
		return this.getTypedRuleContext(LessThenContext, 0) as LessThenContext;
	}
	public graterThanOrEquals(): GraterThanOrEqualsContext {
		return this.getTypedRuleContext(GraterThanOrEqualsContext, 0) as GraterThanOrEqualsContext;
	}
	public lessThanOrEquals(): LessThanOrEqualsContext {
		return this.getTypedRuleContext(LessThanOrEqualsContext, 0) as LessThanOrEqualsContext;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
	public LEFT_ARROW_TILDE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public LEFT_ARROW_TILDE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE_BRACKET, 0);
	}
	public LEFT_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_RIGHT, 0);
	}
	public LEFT_MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	}
	public LEFT_TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_TILDE_SLASH, 0);
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.MINUS_SLASH, 0);
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
	public BRACKET_TILDE_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_TILDE_RIGHT_ARROW, 0);
	}
	public SLASH_MINUS(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS, 0);
	}
	public SLASH_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	}
	public SLASH_TILDE(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE, 0);
	}
	public SLASH_TILDE_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE_RIGHT, 0);
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public TILDE_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	}
	public TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.TILDE_SLASH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimiterToken;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimiterToken) {
	 		listener.enterDelimiterToken(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimiterToken) {
	 		listener.exitDelimiterToken(this);
		}
	}
}


export class EdgeSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EDGE(): TerminalNode {
		return this.getToken(GqlParser.EDGE, 0);
	}
	public RELATIONSHIP(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeSynonym) {
	 		listener.enterEdgeSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeSynonym) {
	 		listener.exitEdgeSynonym(this);
		}
	}
}


export class EdgesSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EDGES(): TerminalNode {
		return this.getToken(GqlParser.EDGES, 0);
	}
	public RELATIONSHIPS(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIPS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgesSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgesSynonym) {
	 		listener.enterEdgesSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgesSynonym) {
	 		listener.exitEdgesSynonym(this);
		}
	}
}


export class NodeSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NODE(): TerminalNode {
		return this.getToken(GqlParser.NODE, 0);
	}
	public VERTEX(): TerminalNode {
		return this.getToken(GqlParser.VERTEX, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeSynonym) {
	 		listener.enterNodeSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeSynonym) {
	 		listener.exitNodeSynonym(this);
		}
	}
}
