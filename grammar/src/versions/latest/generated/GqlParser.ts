// Generated from src/versions/latest/antlr/GqlParser.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols

import {
	ATN,
	ATNDeserializer, DecisionState, DFA, FailedPredicateException,
	RecognitionException, NoViableAltException, BailErrorStrategy,
	Parser, ParserATNSimulator,
	RuleContext, ParserRuleContext, PredictionMode, PredictionContextCache,
	TerminalNode, RuleNode,
	Token, TokenStream,
	Interval, IntervalSet
} from 'antlr4';
import GqlParserListener from "./GqlParserListener.js";
// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;

export default class GqlParser extends Parser {
	public static readonly LEFT_ARROW = 1;
	public static readonly LEFT_ARROW_TILDE = 2;
	public static readonly LEFT_ARROW_BRACKET = 3;
	public static readonly LEFT_ARROW_TILDE_BRACKET = 4;
	public static readonly LEFT_MINUS_RIGHT = 5;
	public static readonly LEFT_MINUS_SLASH = 6;
	public static readonly LEFT_TILDE_SLASH = 7;
	public static readonly MINUS_LEFT_BRACKET = 8;
	public static readonly MINUS_SLASH = 9;
	public static readonly RIGHT_ARROW = 10;
	public static readonly RIGHT_BRACKET_MINUS = 11;
	public static readonly RIGHT_BRACKET_TILDE = 12;
	public static readonly BRACKET_RIGHT_ARROW = 13;
	public static readonly BRACKET_TILDE_RIGHT_ARROW = 14;
	public static readonly SLASH_MINUS = 15;
	public static readonly SLASH_MINUS_RIGHT = 16;
	public static readonly SLASH_TILDE = 17;
	public static readonly SLASH_TILDE_RIGHT = 18;
	public static readonly TILDE_LEFT_BRACKET = 19;
	public static readonly TILDE_RIGHT_ARROW = 20;
	public static readonly TILDE_SLASH = 21;
	public static readonly QUOTE = 22;
	public static readonly DOUBLE_QUOTE = 23;
	public static readonly GRAVE_ACCENT = 24;
	public static readonly REVERS_SOLIDUS = 25;
	public static readonly PLUS = 26;
	public static readonly MINUS = 27;
	public static readonly DOUBLE_MINUS = 28;
	public static readonly AMPERSAND = 29;
	public static readonly ASTERISK = 30;
	public static readonly CIRCUMFLEX = 31;
	public static readonly COLON = 32;
	public static readonly DOUBLE_COLON = 33;
	public static readonly COMMA = 34;
	public static readonly DOLLAR = 35;
	public static readonly EQUALS = 36;
	public static readonly EXCLAMATION = 37;
	public static readonly LEFT_ANGLE_BRACKET = 38;
	public static readonly RIGHT_ANGLE_BRACKET = 39;
	public static readonly LEFT_BRACE = 40;
	public static readonly RIGHT_BRACE = 41;
	public static readonly LEFT_BRACKET = 42;
	public static readonly RIGHT_BRACKET = 43;
	public static readonly LEFT_PAREN = 44;
	public static readonly RIGHT_PAREN = 45;
	public static readonly QUESTION_MARK = 46;
	public static readonly SEMICOLON = 47;
	public static readonly SOLIDUS = 48;
	public static readonly DOUBLE_SOLIDUS = 49;
	public static readonly TILDE = 50;
	public static readonly UNDERSCORE = 51;
	public static readonly VERTICAL_BAR = 52;
	public static readonly PERCENT = 53;
	public static readonly PERIOD = 54;
	public static readonly DOUBLE_PERIOD = 55;
	public static readonly COMMERCIAL_AT = 56;
	public static readonly HASH = 57;
	public static readonly MULTISET_ALTERNATION = 58;
	public static readonly CONCATENATION = 59;
	public static readonly ABS = 60;
	public static readonly ACOS = 61;
	public static readonly ALL = 62;
	public static readonly ALL_DIFFERENT = 63;
	public static readonly AND = 64;
	public static readonly ANY = 65;
	public static readonly ARRAY = 66;
	public static readonly AS = 67;
	public static readonly ASC = 68;
	public static readonly ASCENDING = 69;
	public static readonly ASIN = 70;
	public static readonly AT = 71;
	public static readonly ATAN = 72;
	public static readonly AVG = 73;
	public static readonly BIG = 74;
	public static readonly BIGINT = 75;
	public static readonly BINARY = 76;
	public static readonly BOOL = 77;
	public static readonly BOOLEAN = 78;
	public static readonly BOTH = 79;
	public static readonly BTRIM = 80;
	public static readonly BY = 81;
	public static readonly BYTE_LENGTH = 82;
	public static readonly BYTES = 83;
	public static readonly CALL = 84;
	public static readonly CASE = 85;
	public static readonly CAST = 86;
	public static readonly CEIL = 87;
	public static readonly CEILING = 88;
	public static readonly CHAR_LENGTH = 89;
	public static readonly CHARACTER_LENGTH = 90;
	public static readonly CHARACTERISTICS = 91;
	public static readonly CLOSE = 92;
	public static readonly COALESCE = 93;
	public static readonly COLLECT = 94;
	public static readonly COMMIT = 95;
	public static readonly COPY = 96;
	public static readonly COS = 97;
	public static readonly COSH = 98;
	public static readonly COT = 99;
	public static readonly COUNT = 100;
	public static readonly CREATE = 101;
	public static readonly CURRENT_DATE = 102;
	public static readonly CURRENT_GRAPH = 103;
	public static readonly CURRENT_PROPERTY_GRAPH = 104;
	public static readonly CURRENT_SCHEMA = 105;
	public static readonly CURRENT_TIME = 106;
	public static readonly CURRENT_TIMESTAMP = 107;
	public static readonly CURRENT_USER = 108;
	public static readonly DATE = 109;
	public static readonly DATETIME = 110;
	public static readonly DAY = 111;
	public static readonly DEC = 112;
	public static readonly DECIMAL = 113;
	public static readonly DEGREES = 114;
	public static readonly DELETE = 115;
	public static readonly DESC = 116;
	public static readonly DESCENDING = 117;
	public static readonly DETACH = 118;
	public static readonly DISTINCT = 119;
	public static readonly DOUBLE = 120;
	public static readonly DROP = 121;
	public static readonly DURATION = 122;
	public static readonly DURATION_BETWEEN = 123;
	public static readonly ELEMENT_ID = 124;
	public static readonly ELSE = 125;
	public static readonly END = 126;
	public static readonly EXCEPT = 127;
	public static readonly EXISTS = 128;
	public static readonly EXP = 129;
	public static readonly FALSE = 130;
	public static readonly FILTER = 131;
	public static readonly FINISH = 132;
	public static readonly FLOAT = 133;
	public static readonly FLOAT16 = 134;
	public static readonly FLOAT32 = 135;
	public static readonly FLOAT64 = 136;
	public static readonly FLOAT128 = 137;
	public static readonly FLOAT256 = 138;
	public static readonly FLOOR = 139;
	public static readonly FOR = 140;
	public static readonly FROM = 141;
	public static readonly GROUP = 142;
	public static readonly HAVING = 143;
	public static readonly HOME_GRAPH = 144;
	public static readonly HOME_PROPERTY_GRAPH = 145;
	public static readonly HOME_SCHEMA = 146;
	public static readonly HOUR = 147;
	public static readonly IF = 148;
	public static readonly IN = 149;
	public static readonly INSERT = 150;
	public static readonly INT = 151;
	public static readonly INTEGER = 152;
	public static readonly INT8 = 153;
	public static readonly INTEGER8 = 154;
	public static readonly INT16 = 155;
	public static readonly INTEGER16 = 156;
	public static readonly INT32 = 157;
	public static readonly INTEGER32 = 158;
	public static readonly INT64 = 159;
	public static readonly INTEGER64 = 160;
	public static readonly INT128 = 161;
	public static readonly INTEGER128 = 162;
	public static readonly INT256 = 163;
	public static readonly INTEGER256 = 164;
	public static readonly INTERSECT = 165;
	public static readonly INTERVAL = 166;
	public static readonly IS = 167;
	public static readonly LEADING = 168;
	public static readonly LET = 169;
	public static readonly LIKE = 170;
	public static readonly LIMIT = 171;
	public static readonly LIST = 172;
	public static readonly LN = 173;
	public static readonly LOCAL = 174;
	public static readonly LOCAL_DATETIME = 175;
	public static readonly LOCAL_TIME = 176;
	public static readonly LOCAL_TIMESTAMP = 177;
	public static readonly LOG = 178;
	public static readonly LOG10 = 179;
	public static readonly LOWER = 180;
	public static readonly LTRIM = 181;
	public static readonly MATCH = 182;
	public static readonly MAX = 183;
	public static readonly MIN = 184;
	public static readonly MINUTE = 185;
	public static readonly MOD = 186;
	public static readonly MONTH = 187;
	public static readonly NEXT = 188;
	public static readonly NODETACH = 189;
	public static readonly NORMALIZE = 190;
	public static readonly NOT = 191;
	public static readonly NULL = 192;
	public static readonly NULLS = 193;
	public static readonly NULLIF = 194;
	public static readonly OCTET_LENGTH = 195;
	public static readonly OF = 196;
	public static readonly OFFSET = 197;
	public static readonly OPEN = 198;
	public static readonly OPTIONAL = 199;
	public static readonly OR = 200;
	public static readonly ORDER = 201;
	public static readonly OTHERWISE = 202;
	public static readonly PARAMETER = 203;
	public static readonly PARAMETERS = 204;
	public static readonly PATH = 205;
	public static readonly PATH_LENGTH = 206;
	public static readonly PATHS = 207;
	public static readonly PERCENTILE_CONT = 208;
	public static readonly PERCENTILE_DISC = 209;
	public static readonly POWER = 210;
	public static readonly PRECISION = 211;
	public static readonly PROPERTY_EXISTS = 212;
	public static readonly RADIANS = 213;
	public static readonly REAL = 214;
	public static readonly RECORD = 215;
	public static readonly REMOVE = 216;
	public static readonly REPLACE = 217;
	public static readonly RESET = 218;
	public static readonly RETURN = 219;
	public static readonly ROLLBACK = 220;
	public static readonly RTRIM = 221;
	public static readonly SAME = 222;
	public static readonly SCHEMA = 223;
	public static readonly SECOND = 224;
	public static readonly SELECT = 225;
	public static readonly SESSION = 226;
	public static readonly SET = 227;
	public static readonly SIGNED = 228;
	public static readonly SIN = 229;
	public static readonly SINH = 230;
	public static readonly SKIP_ = 231;
	public static readonly SMALL = 232;
	public static readonly SMALLINT = 233;
	public static readonly SQRT = 234;
	public static readonly START = 235;
	public static readonly STDDEV_POP = 236;
	public static readonly STDDEV_SAMP = 237;
	public static readonly STRING = 238;
	public static readonly SUM = 239;
	public static readonly TAN = 240;
	public static readonly TANH = 241;
	public static readonly THEN = 242;
	public static readonly TIME = 243;
	public static readonly TIMESTAMP = 244;
	public static readonly TRAILING = 245;
	public static readonly TRIM = 246;
	public static readonly TRUE = 247;
	public static readonly TYPED = 248;
	public static readonly UBIGINT = 249;
	public static readonly UINT = 250;
	public static readonly UINT8 = 251;
	public static readonly UINT16 = 252;
	public static readonly UINT32 = 253;
	public static readonly UINT64 = 254;
	public static readonly UINT128 = 255;
	public static readonly UINT256 = 256;
	public static readonly UNION = 257;
	public static readonly UNKNOWN = 258;
	public static readonly UNSIGNED = 259;
	public static readonly UPPER = 260;
	public static readonly USE = 261;
	public static readonly USMALLINT = 262;
	public static readonly VALUE = 263;
	public static readonly VARBINARY = 264;
	public static readonly VARCHAR = 265;
	public static readonly VARIABLE = 266;
	public static readonly WHEN = 267;
	public static readonly WHERE = 268;
	public static readonly WITH = 269;
	public static readonly XOR = 270;
	public static readonly YEAR = 271;
	public static readonly YIELD = 272;
	public static readonly ZONED = 273;
	public static readonly ZONED_DATETIME = 274;
	public static readonly ZONED_TIME = 275;
	public static readonly AGGREGATE = 276;
	public static readonly AGGREGATES = 277;
	public static readonly ALTER = 278;
	public static readonly CATALOG = 279;
	public static readonly CLEAR = 280;
	public static readonly CLONE = 281;
	public static readonly CONSTRAINT = 282;
	public static readonly CURRENT_ROLE = 283;
	public static readonly DATA = 284;
	public static readonly DIRECTORY = 285;
	public static readonly EXACT = 286;
	public static readonly EXISTING = 287;
	public static readonly FUNCTION = 288;
	public static readonly GQLSTATUS = 289;
	public static readonly GRANT = 290;
	public static readonly INSTANT = 291;
	public static readonly LEFT = 292;
	public static readonly NOTHING = 293;
	public static readonly NUMERIC = 294;
	public static readonly ON = 295;
	public static readonly PARTITION = 296;
	public static readonly PROCEDURE = 297;
	public static readonly PRODUCT = 298;
	public static readonly PROJECT = 299;
	public static readonly QUERY = 300;
	public static readonly RECORDS = 301;
	public static readonly REFERENCE = 302;
	public static readonly RENAME = 303;
	public static readonly REVOKE = 304;
	public static readonly RIGHT = 305;
	public static readonly SUBSTRING = 306;
	public static readonly TEMPORAL = 307;
	public static readonly UNIQUE = 308;
	public static readonly UNIT = 309;
	public static readonly VALUES = 310;
	public static readonly ACYCLIC = 311;
	public static readonly BINDING = 312;
	public static readonly BINDINGS = 313;
	public static readonly CONNECTING = 314;
	public static readonly DESTINATION = 315;
	public static readonly DIFFERENT = 316;
	public static readonly DIRECTED = 317;
	public static readonly EDGE = 318;
	public static readonly EDGES = 319;
	public static readonly ELEMENT = 320;
	public static readonly ELEMENTS = 321;
	public static readonly FIRST = 322;
	public static readonly GRAPH = 323;
	public static readonly GROUPS = 324;
	public static readonly KEEP = 325;
	public static readonly LABEL = 326;
	public static readonly LABELED = 327;
	public static readonly LABELS = 328;
	public static readonly LAST = 329;
	public static readonly NFC = 330;
	public static readonly NFD = 331;
	public static readonly NFKC = 332;
	public static readonly NFKD = 333;
	public static readonly NO = 334;
	public static readonly NODE = 335;
	public static readonly NORMALIZED = 336;
	public static readonly ONLY = 337;
	public static readonly ORDINALITY = 338;
	public static readonly PROPERTY = 339;
	public static readonly READ = 340;
	public static readonly RELATIONSHIP = 341;
	public static readonly RELATIONSHIPS = 342;
	public static readonly REPEATABLE = 343;
	public static readonly SHORTEST = 344;
	public static readonly SIMPLE = 345;
	public static readonly SOURCE = 346;
	public static readonly TABLE = 347;
	public static readonly TEMP = 348;
	public static readonly TIMEZONE = 349;
	public static readonly TO = 350;
	public static readonly TRAIL = 351;
	public static readonly TRANSACTION = 352;
	public static readonly TYPE = 353;
	public static readonly UNDIRECTED = 354;
	public static readonly VERTEX = 355;
	public static readonly WALK = 356;
	public static readonly WITHOUT = 357;
	public static readonly WRITE = 358;
	public static readonly ZONE = 359;
	public static readonly INTERVAL_DAY = 360;
	public static readonly INTERVAL_WEEK = 361;
	public static readonly INTERVAL_MONTH = 362;
	public static readonly INTERVAL_YEAR = 363;
	public static readonly IF_NOT_EXISTS = 364;
	public static readonly IF_EXISTS = 365;
	public static readonly UNSIGNED_NUMERIC_LITERAL = 366;
	public static readonly SIGNED_NUMERIC_LITERAL = 367;
	public static readonly SIGN = 368;
	public static readonly EXACT_NUMERIC_LITERAL = 369;
	public static readonly EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 370;
	public static readonly EXACT_UNSIGNED_INT = 371;
	public static readonly APROXIMATE_NUMERIC_LITERAL = 372;
	public static readonly APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 373;
	public static readonly APROXIMATE_UNSIGNED_INT = 374;
	public static readonly UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 375;
	public static readonly UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION = 376;
	public static readonly FOUR_DIGIT = 377;
	public static readonly DOUBLE_DIGIT = 378;
	public static readonly UNSIGNED_INT = 379;
	public static readonly UNSIGNED_DECIMAL_INT = 380;
	public static readonly UNSIGNED_HEX_INT = 381;
	public static readonly UNSIGNED_OCTAL_INT = 382;
	public static readonly UNSIGNED_BINARY_INT = 383;
	public static readonly BYTE_STRING_LITERAL = 384;
	public static readonly SINGLE_QUOTED_STRING_LITERAL = 385;
	public static readonly DOUBLE_QUOTED_STRING_LITERAL = 386;
	public static readonly ACCENT_QUOTED_STRING_LITERAL = 387;
	public static readonly SIMPLE_COMMENT_LITERAL = 388;
	public static readonly BRACKETED_COMMNET_LITERAL = 389;
	public static readonly WS = 390;
	public static readonly WHITESPACE = 391;
	public static readonly NEW_LINE = 392;
	public static readonly CARRIAGE_RETURN = 393;
	public static readonly RETURN_SIGN = 394;
	public static readonly REGULAR_IDENTIFIER = 395;
	public static readonly EXTENDED_IDENTIFIER = 396;
	public static readonly START_CHARS = 397;
	public static readonly CONTINUE_CHARS = 398;
	public static readonly BIDIRECTIONAL_CONTROL_CHARACTER = 399;
	public static readonly ESCAPED_CHARS = 400;
	public static readonly ESCAPED_REVERSE_SOLIDUS = 401;
	public static readonly ESCAPED_QUOTE = 402;
	public static readonly ESCAPED_SOUBLE_QUOTE = 403;
	public static readonly ESCAPED_GRAVE_ACCENT = 404;
	public static readonly ESCAPED_TAB = 405;
	public static readonly ESCAPED_BACKSPACE = 406;
	public static readonly ESCAPED_NEW_LINE = 407;
	public static readonly ESCAPED_CARRIAGE_RETURN = 408;
	public static readonly ESCAPED_FORM_FEED = 409;
	public static readonly ESCAPED_UNICODE4_DIGIT_VALUE = 410;
	public static readonly ESCAPED_UNICODE6_DIGIT_VALUE = 411;
	public static readonly GQL_LANGUAGE_CHAR = 412;
	public static readonly GQL_SPECIAL_CHAR = 413;
	public static readonly EOF = Token.EOF;
	public static readonly RULE_gqlProgram = 0;
	public static readonly RULE_activity = 1;
	public static readonly RULE_programActivity = 2;
	public static readonly RULE_sessionActivity = 3;
	public static readonly RULE_sessionSetCommand = 4;
	public static readonly RULE_sessionSetSchemaClause = 5;
	public static readonly RULE_sessionSetGraphClause = 6;
	public static readonly RULE_sessionSetTimeZoneClause = 7;
	public static readonly RULE_setTimeZoneValue = 8;
	public static readonly RULE_sessionSetParameterClause = 9;
	public static readonly RULE_sessionSetGraphParameterClause = 10;
	public static readonly RULE_sessionSetBindingTableParameterCalues = 11;
	public static readonly RULE_sessionSetValuesParameterClause = 12;
	public static readonly RULE_sessionSetParameterName = 13;
	public static readonly RULE_sessionResetCommand = 14;
	public static readonly RULE_sessionResetArguments = 15;
	public static readonly RULE_sessionCloseCommand = 16;
	public static readonly RULE_transactionActivity = 17;
	public static readonly RULE_transactionStartCommand = 18;
	public static readonly RULE_transactionEndCommand = 19;
	public static readonly RULE_transactionCharacteristics = 20;
	public static readonly RULE_transactionMode = 21;
	public static readonly RULE_transactionAccessMode = 22;
	public static readonly RULE_implDefinedAccessMode = 23;
	public static readonly RULE_nestedProcedureSpec = 24;
	public static readonly RULE_procedureSpec = 25;
	public static readonly RULE_nestedDataModProcedureSpec = 26;
	public static readonly RULE_nestedQuerySpec = 27;
	public static readonly RULE_procedureBody = 28;
	public static readonly RULE_bindingVarDefBlock = 29;
	public static readonly RULE_bindingVarDef = 30;
	public static readonly RULE_statmentBlock = 31;
	public static readonly RULE_statement = 32;
	public static readonly RULE_nextStatment = 33;
	public static readonly RULE_graphVarDef = 34;
	public static readonly RULE_optTypedGraphInit = 35;
	public static readonly RULE_graphInit = 36;
	public static readonly RULE_bindingTableVarDef = 37;
	public static readonly RULE_optTypedBindingTableInit = 38;
	public static readonly RULE_bindingTableInit = 39;
	public static readonly RULE_valueVarDef = 40;
	public static readonly RULE_optTypedValueInit = 41;
	public static readonly RULE_valueInit = 42;
	public static readonly RULE_graphExpr = 43;
	public static readonly RULE_currentGraph = 44;
	public static readonly RULE_nestedGraphQuerySpec = 45;
	public static readonly RULE_bindingTableExpr = 46;
	public static readonly RULE_nestedBindingTableQuerySpec = 47;
	public static readonly RULE_objectExprPrimary = 48;
	public static readonly RULE_linearCatalogModStatment = 49;
	public static readonly RULE_simpleCatalogModStatment = 50;
	public static readonly RULE_primitiveCatalogModStatment = 51;
	public static readonly RULE_createSchemeStatment = 52;
	public static readonly RULE_dropSchemeStatment = 53;
	public static readonly RULE_createGraphStatment = 54;
	public static readonly RULE_createOnlyGraphStatment = 55;
	public static readonly RULE_createOrReplaceGraphStatment = 56;
	public static readonly RULE_openGraphType = 57;
	public static readonly RULE_ofGraphType = 58;
	public static readonly RULE_graphTypeLikeGraph = 59;
	public static readonly RULE_graphSource = 60;
	public static readonly RULE_dropGraphStatment = 61;
	public static readonly RULE_createGraphTypeStatment = 62;
	public static readonly RULE_graphTypeSource = 63;
	public static readonly RULE_copyOfGraphType = 64;
	public static readonly RULE_dropGraphTypeStatment = 65;
	public static readonly RULE_callCatalogModProcedureStatment = 66;
	public static readonly RULE_linearDataModStatment = 67;
	public static readonly RULE_focusedLinearDataModStatment = 68;
	public static readonly RULE_focusedLinearDataModStatmentBody = 69;
	public static readonly RULE_focusedNestedDataModProcedureSpec = 70;
	public static readonly RULE_ambientLinearDataModStatment = 71;
	public static readonly RULE_ambientLinearDataModStatmentBody = 72;
	public static readonly RULE_simpleLinearDataAccessingStatment = 73;
	public static readonly RULE_simpleDataAccessingStatment = 74;
	public static readonly RULE_simpleDataModStatment = 75;
	public static readonly RULE_primitiveDataModStatment = 76;
	public static readonly RULE_insertStatment = 77;
	public static readonly RULE_setStatment = 78;
	public static readonly RULE_setItemList = 79;
	public static readonly RULE_setItem = 80;
	public static readonly RULE_setPropertyItem = 81;
	public static readonly RULE_setAllPropertiesItem = 82;
	public static readonly RULE_setLabelItem = 83;
	public static readonly RULE_labelSetSpec = 84;
	public static readonly RULE_removeStatment = 85;
	public static readonly RULE_removeItemList = 86;
	public static readonly RULE_removeItem = 87;
	public static readonly RULE_removePropertyItem = 88;
	public static readonly RULE_removeLabelItem = 89;
	public static readonly RULE_deleteStatment = 90;
	public static readonly RULE_deleteItemList = 91;
	public static readonly RULE_deleteItem = 92;
	public static readonly RULE_callDataModProcedureStatment = 93;
	public static readonly RULE_compositeQueryStatment = 94;
	public static readonly RULE_compositeQueryExpr = 95;
	public static readonly RULE_queryConjunction = 96;
	public static readonly RULE_setOperator = 97;
	public static readonly RULE_compositeQueryPrimary = 98;
	public static readonly RULE_linearQueryStatment = 99;
	public static readonly RULE_focusedLinearQueryStatment = 100;
	public static readonly RULE_focusedLinearQueryStatmentPart = 101;
	public static readonly RULE_focusedLinearQueryAndPrimitiveResultStatmentPart = 102;
	public static readonly RULE_focusedPrimitiveResultStatment = 103;
	public static readonly RULE_focusedNestedQuerySpec = 104;
	public static readonly RULE_ambientLinearQueryStatment = 105;
	public static readonly RULE_simpleLinearQueryStatment = 106;
	public static readonly RULE_simpleQueryStatment = 107;
	public static readonly RULE_primitiveQueryStatment = 108;
	public static readonly RULE_matchStatment = 109;
	public static readonly RULE_simpleMatchStatment = 110;
	public static readonly RULE_optionalMatchStatment = 111;
	public static readonly RULE_optionalOperand = 112;
	public static readonly RULE_matchStatmentBlock = 113;
	public static readonly RULE_callQueryStatment = 114;
	public static readonly RULE_filterStatment = 115;
	public static readonly RULE_letStatment = 116;
	public static readonly RULE_letVarDefList = 117;
	public static readonly RULE_letVarDef = 118;
	public static readonly RULE_forStatment = 119;
	public static readonly RULE_forItem = 120;
	public static readonly RULE_forItemAlias = 121;
	public static readonly RULE_forOrdinalityOrOffset = 122;
	public static readonly RULE_orderByAndPageStatment = 123;
	public static readonly RULE_primitiveResultStatment = 124;
	public static readonly RULE_returnStatment = 125;
	public static readonly RULE_returnStatmentBody = 126;
	public static readonly RULE_returnItemList = 127;
	public static readonly RULE_returnItem = 128;
	public static readonly RULE_returnItemAlias = 129;
	public static readonly RULE_selectStatment = 130;
	public static readonly RULE_selectItemList = 131;
	public static readonly RULE_selectItem = 132;
	public static readonly RULE_selectItemAlias = 133;
	public static readonly RULE_havingClause = 134;
	public static readonly RULE_selectStatmentBody = 135;
	public static readonly RULE_selectGraphMatchList = 136;
	public static readonly RULE_selectGraphMatch = 137;
	public static readonly RULE_selectQuerySpec = 138;
	public static readonly RULE_callProcedureStatment = 139;
	public static readonly RULE_procedureCall = 140;
	public static readonly RULE_inlineProcedureCall = 141;
	public static readonly RULE_varScopeClause = 142;
	public static readonly RULE_bindingVarRefList = 143;
	public static readonly RULE_namedProcedureCall = 144;
	public static readonly RULE_procedureArgList = 145;
	public static readonly RULE_procedureArg = 146;
	public static readonly RULE_useGraphClause = 147;
	public static readonly RULE_atSchemaClause = 148;
	public static readonly RULE_bindingVarRef = 149;
	public static readonly RULE_elementVarRef = 150;
	public static readonly RULE_pathVarRef = 151;
	public static readonly RULE_parameter = 152;
	public static readonly RULE_graphPatternBindingTable = 153;
	public static readonly RULE_graphPatternYieldClause = 154;
	public static readonly RULE_graphPatternYieldItemList = 155;
	public static readonly RULE_graphPatternYieldItem = 156;
	public static readonly RULE_graphPattern = 157;
	public static readonly RULE_matchMode = 158;
	public static readonly RULE_repeatableElementsMatchMode = 159;
	public static readonly RULE_differentEdgesMatchMode = 160;
	public static readonly RULE_elementBindingsOrElements = 161;
	public static readonly RULE_edgeBindingsOrEdges = 162;
	public static readonly RULE_pathPatternList = 163;
	public static readonly RULE_pathPattern = 164;
	public static readonly RULE_pathVarDeclaration = 165;
	public static readonly RULE_keepClause = 166;
	public static readonly RULE_graphPatternWhereClause = 167;
	public static readonly RULE_pathPatternPrefix = 168;
	public static readonly RULE_pathModePrefix = 169;
	public static readonly RULE_pathMode = 170;
	public static readonly RULE_pathSearchPrefix = 171;
	public static readonly RULE_allPathSearch = 172;
	public static readonly RULE_pathOrPaths = 173;
	public static readonly RULE_anyPathSearch = 174;
	public static readonly RULE_numberOfPaths = 175;
	public static readonly RULE_shortestPathSearch = 176;
	public static readonly RULE_allShortestPathSearch = 177;
	public static readonly RULE_anyShortestPathSearch = 178;
	public static readonly RULE_countedShortestPathSearch = 179;
	public static readonly RULE_countedShortestGroupSearch = 180;
	public static readonly RULE_groupOrGroups = 181;
	public static readonly RULE_numberOfGroups = 182;
	public static readonly RULE_pathPatternExpr = 183;
	public static readonly RULE_pathMultisetAlternation = 184;
	public static readonly RULE_pathPatternUnion = 185;
	public static readonly RULE_pathTerm = 186;
	public static readonly RULE_pathFactor = 187;
	public static readonly RULE_quantifiedPathPrimary = 188;
	public static readonly RULE_questionedPathPrimary = 189;
	public static readonly RULE_pathPrimary = 190;
	public static readonly RULE_elementPattern = 191;
	public static readonly RULE_nodePattern = 192;
	public static readonly RULE_elementPatternFiller = 193;
	public static readonly RULE_elementVarDeclaration = 194;
	public static readonly RULE_isLabelExpr = 195;
	public static readonly RULE_isOrColon = 196;
	public static readonly RULE_elementPatternPredicate = 197;
	public static readonly RULE_elementPatternWhereClause = 198;
	public static readonly RULE_elementPropertySpec = 199;
	public static readonly RULE_propertyKeyValuePairList = 200;
	public static readonly RULE_propertyKeyValuePair = 201;
	public static readonly RULE_edgePattern = 202;
	public static readonly RULE_fullEdgePattern = 203;
	public static readonly RULE_fullEdgePointingLeft = 204;
	public static readonly RULE_fullEdgeUndirected = 205;
	public static readonly RULE_fullEdgePointingRight = 206;
	public static readonly RULE_fullEdgeLeftOrUndirected = 207;
	public static readonly RULE_fullEdgeUndirectedOrRight = 208;
	public static readonly RULE_fullEdgeLeftOrRight = 209;
	public static readonly RULE_fullEdgeAnyDirection = 210;
	public static readonly RULE_abbreviatedEdgePattern = 211;
	public static readonly RULE_parenthesizedPathPatternExpr = 212;
	public static readonly RULE_subpathVarDeclaration = 213;
	public static readonly RULE_parenthesizedPathPatternWhereClause = 214;
	public static readonly RULE_insertGraphPattern = 215;
	public static readonly RULE_insertGraphPatternList = 216;
	public static readonly RULE_insertPathPattern = 217;
	public static readonly RULE_insertNodePattern = 218;
	public static readonly RULE_insertEdgePattern = 219;
	public static readonly RULE_insertEdgePointingLeft = 220;
	public static readonly RULE_insertEdgePointingRight = 221;
	public static readonly RULE_insertEdgeUndirected = 222;
	public static readonly RULE_insertElementPatternFiller = 223;
	public static readonly RULE_labelAndPropertySetSpec = 224;
	public static readonly RULE_labelExpr = 225;
	public static readonly RULE_labelTerm = 226;
	public static readonly RULE_labelFactor = 227;
	public static readonly RULE_labelNegation = 228;
	public static readonly RULE_labelPrimary = 229;
	public static readonly RULE_wildcardLabel = 230;
	public static readonly RULE_parenthesizedLabelExpr = 231;
	public static readonly RULE_graphPatternQuantifier = 232;
	public static readonly RULE_fixedQuantifier = 233;
	public static readonly RULE_generalQuantifier = 234;
	public static readonly RULE_lowerBound = 235;
	public static readonly RULE_upperBound = 236;
	public static readonly RULE_simplifiedPathPatternExpr = 237;
	public static readonly RULE_simplifiedDefaultingLeft = 238;
	public static readonly RULE_simplifiedDefaultingUndirected = 239;
	public static readonly RULE_simplifiedDefaultingRight = 240;
	public static readonly RULE_simplifiedDefaultingLeftOrUndirected = 241;
	public static readonly RULE_simplifiedDefaultingUndirectedOrRight = 242;
	public static readonly RULE_simplifiedDefaultingLeftOrRight = 243;
	public static readonly RULE_simplifiedDefaultingAnyDirection = 244;
	public static readonly RULE_simplifiedContents = 245;
	public static readonly RULE_simplifiedPathUnion = 246;
	public static readonly RULE_simplifiedMultisetAlternation = 247;
	public static readonly RULE_simplifiedTerm = 248;
	public static readonly RULE_simplifiedFactorLow = 249;
	public static readonly RULE_simplifiedFactorHigh = 250;
	public static readonly RULE_simplifiedQuntified = 251;
	public static readonly RULE_simplifiedQuestioned = 252;
	public static readonly RULE_simplifiedTertiary = 253;
	public static readonly RULE_simplifiedDirectionOverride = 254;
	public static readonly RULE_simplifiedOverrideLeft = 255;
	public static readonly RULE_simplifiedOverrideUndirected = 256;
	public static readonly RULE_simplifiedOverrideRight = 257;
	public static readonly RULE_simplifiedOverrideLeftOrUndirected = 258;
	public static readonly RULE_simplifiedOverrideUndirectedOrRight = 259;
	public static readonly RULE_simplifiedOverrideLeftOrRight = 260;
	public static readonly RULE_simplifiedOverrideAnyDirection = 261;
	public static readonly RULE_simplifiedSecondary = 262;
	public static readonly RULE_simplifiedNegation = 263;
	public static readonly RULE_simplifiedPrimary = 264;
	public static readonly RULE_whereClause = 265;
	public static readonly RULE_yieldClause = 266;
	public static readonly RULE_yieldItemList = 267;
	public static readonly RULE_yieldItem = 268;
	public static readonly RULE_yieldItemName = 269;
	public static readonly RULE_yieldItemAlias = 270;
	public static readonly RULE_groupByClause = 271;
	public static readonly RULE_groupingElementList = 272;
	public static readonly RULE_groupingElement = 273;
	public static readonly RULE_emptyGroupingSet = 274;
	public static readonly RULE_orderByClause = 275;
	public static readonly RULE_aggregateFunction = 276;
	public static readonly RULE_generalSetFunction = 277;
	public static readonly RULE_generalSetFunctionType = 278;
	public static readonly RULE_setQuantifier = 279;
	public static readonly RULE_binarySetFunction = 280;
	public static readonly RULE_dependantValueExpr = 281;
	public static readonly RULE_independentValueExpr = 282;
	public static readonly RULE_sortSpecList = 283;
	public static readonly RULE_sortSpec = 284;
	public static readonly RULE_sortKey = 285;
	public static readonly RULE_orderingSpec = 286;
	public static readonly RULE_nullOrdering = 287;
	public static readonly RULE_limitClause = 288;
	public static readonly RULE_offsetClause = 289;
	public static readonly RULE_offsetSynonym = 290;
	public static readonly RULE_graphTypeSpec = 291;
	public static readonly RULE_nestedGraphTypeSpec = 292;
	public static readonly RULE_graphTypeSpecBody = 293;
	public static readonly RULE_elementTypeDefList = 294;
	public static readonly RULE_elementTypeDef = 295;
	public static readonly RULE_nodeTypeDef = 296;
	public static readonly RULE_nodeTypePattern = 297;
	public static readonly RULE_nodeTypePhrase = 298;
	public static readonly RULE_nodeTypeName = 299;
	public static readonly RULE_nodeTypeFiller = 300;
	public static readonly RULE_nodeTypeLabelSetDef = 301;
	public static readonly RULE_nodeTypePropertyTypeSetDef = 302;
	public static readonly RULE_edgeTypeDef = 303;
	public static readonly RULE_edgeTypePattern = 304;
	public static readonly RULE_edgeTypePhrase = 305;
	public static readonly RULE_edgeTypeName = 306;
	public static readonly RULE_edgeTypeFiller = 307;
	public static readonly RULE_edgeTypeLabelSetDef = 308;
	public static readonly RULE_edgeTypePropertyTypeSetDef = 309;
	public static readonly RULE_fullEdgeTypePattern = 310;
	public static readonly RULE_fullEdgeTypePatternPointingRight = 311;
	public static readonly RULE_fullEdgeTypePatternPointingLeft = 312;
	public static readonly RULE_fullEdgeTypePatternUndirected = 313;
	public static readonly RULE_arcTypePointingRight = 314;
	public static readonly RULE_arcTypePointingLeft = 315;
	public static readonly RULE_arcTypeUndirected = 316;
	public static readonly RULE_arcTypeFiller = 317;
	public static readonly RULE_abbreviatedEdgeTypePattern = 318;
	public static readonly RULE_abbreviatedEdgeTypePatternPointingRight = 319;
	public static readonly RULE_abbreviatedEdgeTypePatternPointingLeft = 320;
	public static readonly RULE_abbreviatedEdgeTypePatternUndirected = 321;
	public static readonly RULE_nodeTypeRef = 322;
	public static readonly RULE_sourceNodeTypeRef = 323;
	public static readonly RULE_destinationNodeTypeRef = 324;
	public static readonly RULE_edgeKind = 325;
	public static readonly RULE_endpointDef = 326;
	public static readonly RULE_enpointPairDef = 327;
	public static readonly RULE_endpointPairDefPointingRight = 328;
	public static readonly RULE_endpointPairDefPointingLeft = 329;
	public static readonly RULE_endpointPairDefUndirected = 330;
	public static readonly RULE_connectorPointingRight = 331;
	public static readonly RULE_connectorPointingLeft = 332;
	public static readonly RULE_connectorUndirected = 333;
	public static readonly RULE_sourceNodeTypeName = 334;
	public static readonly RULE_destinationNodeTypeName = 335;
	public static readonly RULE_labelSetDef = 336;
	public static readonly RULE_propertyTypeSetDef = 337;
	public static readonly RULE_propertyTypeDefList = 338;
	public static readonly RULE_propertyTypeDef = 339;
	public static readonly RULE_propertyValueType = 340;
	public static readonly RULE_bindingTableType = 341;
	public static readonly RULE_valueType = 342;
	public static readonly RULE_typed = 343;
	public static readonly RULE_predefinedType = 344;
	public static readonly RULE_booleanType = 345;
	public static readonly RULE_charStringType = 346;
	public static readonly RULE_byteStringType = 347;
	public static readonly RULE_minLength = 348;
	public static readonly RULE_maxLength = 349;
	public static readonly RULE_fixedLength = 350;
	public static readonly RULE_numericType = 351;
	public static readonly RULE_exactNumericType = 352;
	public static readonly RULE_binaryExactNumericType = 353;
	public static readonly RULE_signedBinaryExactNumericType = 354;
	public static readonly RULE_unsignedBinaryExactNumericType = 355;
	public static readonly RULE_verboseBinaryExactNumericType = 356;
	public static readonly RULE_decimalExactNumericType = 357;
	public static readonly RULE_precision = 358;
	public static readonly RULE_scale = 359;
	public static readonly RULE_approximateNumericType = 360;
	public static readonly RULE_temporalType = 361;
	public static readonly RULE_temporalInstantType = 362;
	public static readonly RULE_temporalDurationType = 363;
	public static readonly RULE_dateTimeType = 364;
	public static readonly RULE_localDateTimeType = 365;
	public static readonly RULE_dateType = 366;
	public static readonly RULE_timeType = 367;
	public static readonly RULE_localTimeType = 368;
	public static readonly RULE_durationType = 369;
	public static readonly RULE_refValueType = 370;
	public static readonly RULE_graphRefValueType = 371;
	public static readonly RULE_openGraphRefValueType = 372;
	public static readonly RULE_closedGraphRefValueType = 373;
	public static readonly RULE_bindingTableRefValueType = 374;
	public static readonly RULE_nodeRefValueType = 375;
	public static readonly RULE_openNodeRefValueType = 376;
	public static readonly RULE_closedNodeRefValueType = 377;
	public static readonly RULE_edgeRefValueType = 378;
	public static readonly RULE_openEdgeRefValueType = 379;
	public static readonly RULE_closedEdgeRefValueType = 380;
	public static readonly RULE_constructedType = 381;
	public static readonly RULE_listValueType = 382;
	public static readonly RULE_listValueTypeName = 383;
	public static readonly RULE_listValueTypeNameSynonym = 384;
	public static readonly RULE_recordType = 385;
	public static readonly RULE_fieldTypesSpec = 386;
	public static readonly RULE_fieldTypeList = 387;
	public static readonly RULE_dynamicUnionType = 388;
	public static readonly RULE_openDynamicUnionType = 389;
	public static readonly RULE_dynamicPropertyValueType = 390;
	public static readonly RULE_closedDynamicUnionType = 391;
	public static readonly RULE_componentTypeList = 392;
	public static readonly RULE_componentType = 393;
	public static readonly RULE_pathValueType = 394;
	public static readonly RULE_notNull = 395;
	public static readonly RULE_fieldType = 396;
	public static readonly RULE_schemaRef = 397;
	public static readonly RULE_absoluteCatalogSchemaRef = 398;
	public static readonly RULE_catalogSchemaParentAndName = 399;
	public static readonly RULE_relativeCatalogSchemaRef = 400;
	public static readonly RULE_predefinedSchemaRef = 401;
	public static readonly RULE_absoluteDirectoryPath = 402;
	public static readonly RULE_relativeDirectoryPath = 403;
	public static readonly RULE_simpleDirectoryPath = 404;
	public static readonly RULE_graphRef = 405;
	public static readonly RULE_catalogGraphParentAndName = 406;
	public static readonly RULE_homeGraph = 407;
	public static readonly RULE_graphTypeRef = 408;
	public static readonly RULE_catalogGraphTypeParentAndName = 409;
	public static readonly RULE_bindingTableRef = 410;
	public static readonly RULE_catalogBindingTableParentAndName = 411;
	public static readonly RULE_procedureRef = 412;
	public static readonly RULE_catalogProcedureParentAndName = 413;
	public static readonly RULE_catalogObjectParentRef = 414;
	public static readonly RULE_refParameter = 415;
	public static readonly RULE_externalObjectRef = 416;
	public static readonly RULE_searchCondition = 417;
	public static readonly RULE_predicate = 418;
	public static readonly RULE_comparisonPredicate = 419;
	public static readonly RULE_comparisonPredicatePart2 = 420;
	public static readonly RULE_comparisonOperator = 421;
	public static readonly RULE_equals = 422;
	public static readonly RULE_notEquals = 423;
	public static readonly RULE_lessThen = 424;
	public static readonly RULE_greaterThan = 425;
	public static readonly RULE_lessThanOrEquals = 426;
	public static readonly RULE_graterThanOrEquals = 427;
	public static readonly RULE_comparisonPredicand = 428;
	public static readonly RULE_existsPredicate = 429;
	public static readonly RULE_nullPredicate = 430;
	public static readonly RULE_nullPredicatePart2 = 431;
	public static readonly RULE_valueTypePredicate = 432;
	public static readonly RULE_valueTypePredicatePart2 = 433;
	public static readonly RULE_normalizedPredicate = 434;
	public static readonly RULE_normalizedPredicatePart2 = 435;
	public static readonly RULE_directedPredicate = 436;
	public static readonly RULE_directedPredicatePart2 = 437;
	public static readonly RULE_labeledPredicate = 438;
	public static readonly RULE_labeledPredicatePart2 = 439;
	public static readonly RULE_isLabeledOrColon = 440;
	public static readonly RULE_sourceOrDestinationPredicate = 441;
	public static readonly RULE_nodeRef = 442;
	public static readonly RULE_sourcePredicatePart2 = 443;
	public static readonly RULE_destinationPredicatePart2 = 444;
	public static readonly RULE_edgeRef = 445;
	public static readonly RULE_allDifferentPredicate = 446;
	public static readonly RULE_samePredicate = 447;
	public static readonly RULE_propertyExistsPredicate = 448;
	public static readonly RULE_valueSpec = 449;
	public static readonly RULE_unsignedValueSpec = 450;
	public static readonly RULE_unsignedIntSpec = 451;
	public static readonly RULE_parameterValueSpec = 452;
	public static readonly RULE_predefinedParameter = 453;
	public static readonly RULE_valueExpr = 454;
	public static readonly RULE_commonValueExpr = 455;
	public static readonly RULE_refValueExpr = 456;
	public static readonly RULE_graphRefValueExpr = 457;
	public static readonly RULE_bindingTableRefValueExpr = 458;
	public static readonly RULE_nodeRefValueExpr = 459;
	public static readonly RULE_edgeRefValueExpr = 460;
	public static readonly RULE_recordValueExpr = 461;
	public static readonly RULE_aggregatingValueExpr = 462;
	public static readonly RULE_booleanValueExpr = 463;
	public static readonly RULE_booleanTerm = 464;
	public static readonly RULE_booleanFactor = 465;
	public static readonly RULE_booleanTest = 466;
	public static readonly RULE_truthValue = 467;
	public static readonly RULE_booleanPrimary = 468;
	public static readonly RULE_booleanPredicand = 469;
	public static readonly RULE_paranthisedBooleanValueExpr = 470;
	public static readonly RULE_numericValueExpr = 471;
	public static readonly RULE_term = 472;
	public static readonly RULE_factor = 473;
	public static readonly RULE_numericPrimary = 474;
	public static readonly RULE_valueExprPrimary = 475;
	public static readonly RULE_parenthesizedValueExpr = 476;
	public static readonly RULE_nonParenthesizedValueExprPrimary = 477;
	public static readonly RULE_nonParenthesizedValueExprPrimarySpecialCase = 478;
	public static readonly RULE_collectionValueConstructor = 479;
	public static readonly RULE_numericValueFunction = 480;
	public static readonly RULE_lengthExpr = 481;
	public static readonly RULE_charLengthExpr = 482;
	public static readonly RULE_byteLengthExpr = 483;
	public static readonly RULE_pathLengthExpr = 484;
	public static readonly RULE_absoluteValueExpr = 485;
	public static readonly RULE_modulusExpr = 486;
	public static readonly RULE_numericValueExprDividen = 487;
	public static readonly RULE_numericValueExprDivisor = 488;
	public static readonly RULE_trigonometricFunction = 489;
	public static readonly RULE_trigonometricFunctionName = 490;
	public static readonly RULE_logarithmFunction = 491;
	public static readonly RULE_generalLogarithmFunction = 492;
	public static readonly RULE_generalLogarithmBase = 493;
	public static readonly RULE_generalLogarithmArgument = 494;
	public static readonly RULE_commonLogarithmFunction = 495;
	public static readonly RULE_naturalLogarithmFunction = 496;
	public static readonly RULE_exponentialFunction = 497;
	public static readonly RULE_powerFunction = 498;
	public static readonly RULE_numericValueExprBase = 499;
	public static readonly RULE_numericValueExprExponent = 500;
	public static readonly RULE_squareRootFunciton = 501;
	public static readonly RULE_floorFunction = 502;
	public static readonly RULE_ceilingFunction = 503;
	public static readonly RULE_stringValueExpr = 504;
	public static readonly RULE_charStringValueExpr = 505;
	public static readonly RULE_charStringConcatenation = 506;
	public static readonly RULE_charStringFactor = 507;
	public static readonly RULE_charStringPrimary = 508;
	public static readonly RULE_byteStringValueExpr = 509;
	public static readonly RULE_byteStringFactor = 510;
	public static readonly RULE_byteStringPrimary = 511;
	public static readonly RULE_byteStringConcatenation = 512;
	public static readonly RULE_stringValueFunction = 513;
	public static readonly RULE_charStringFunction = 514;
	public static readonly RULE_foldFunction = 515;
	public static readonly RULE_trimFunction = 516;
	public static readonly RULE_singleCharTrimFunction = 517;
	public static readonly RULE_multiCharTrimFunction = 518;
	public static readonly RULE_trimOperands = 519;
	public static readonly RULE_trimSource = 520;
	public static readonly RULE_trimSpec = 521;
	public static readonly RULE_trimCharString = 522;
	public static readonly RULE_normalizeFunction = 523;
	public static readonly RULE_normalForm = 524;
	public static readonly RULE_byteStringFunction = 525;
	public static readonly RULE_byteStrinTrimFunction = 526;
	public static readonly RULE_byteStringTrimOperands = 527;
	public static readonly RULE_byteStringTrimSource = 528;
	public static readonly RULE_trimByteString = 529;
	public static readonly RULE_stringLength = 530;
	public static readonly RULE_dateTimeValueExpr = 531;
	public static readonly RULE_dateTimeTerm = 532;
	public static readonly RULE_dateTimeFactor = 533;
	public static readonly RULE_dateTimePrimary = 534;
	public static readonly RULE_dateTimeValueFunction = 535;
	public static readonly RULE_dateFunction = 536;
	public static readonly RULE_timeFunction = 537;
	public static readonly RULE_localTimeFunction = 538;
	public static readonly RULE_dateTimeFunction = 539;
	public static readonly RULE_localDatetimeFunction = 540;
	public static readonly RULE_dateFunctionParameters = 541;
	public static readonly RULE_timeFunctionParameters = 542;
	public static readonly RULE_dateTimeFunctionParameters = 543;
	public static readonly RULE_durationValueExpr = 544;
	public static readonly RULE_dateTimeSubtraction = 545;
	public static readonly RULE_dateTimeSubtractionParameters = 546;
	public static readonly RULE_durationTerm = 547;
	public static readonly RULE_durationFactor = 548;
	public static readonly RULE_durationPrimary = 549;
	public static readonly RULE_durationValueExpr1 = 550;
	public static readonly RULE_durationTerm1 = 551;
	public static readonly RULE_durationTerm2 = 552;
	public static readonly RULE_dateTimeValueExpr1 = 553;
	public static readonly RULE_dateTimeValueExpr2 = 554;
	public static readonly RULE_durationValueFunction = 555;
	public static readonly RULE_durationFunction = 556;
	public static readonly RULE_durationFunctionParameters = 557;
	public static readonly RULE_durationAbsoluteValueFunction = 558;
	public static readonly RULE_listValueExpr = 559;
	public static readonly RULE_listConcatenation = 560;
	public static readonly RULE_listPrimary = 561;
	public static readonly RULE_listValueFunction = 562;
	public static readonly RULE_trimListFunction = 563;
	public static readonly RULE_elementsFunction = 564;
	public static readonly RULE_listValueConstructor = 565;
	public static readonly RULE_listValueConstructorByEnumeration = 566;
	public static readonly RULE_listElementList = 567;
	public static readonly RULE_listElement = 568;
	public static readonly RULE_recordValueConstructor = 569;
	public static readonly RULE_fieldsSpec = 570;
	public static readonly RULE_fieldList = 571;
	public static readonly RULE_field = 572;
	public static readonly RULE_pathValueExpr = 573;
	public static readonly RULE_pathValueConcatenation = 574;
	public static readonly RULE_pathValuePrimary = 575;
	public static readonly RULE_pathValueConstructor = 576;
	public static readonly RULE_pathValueConstructorByEnumeration = 577;
	public static readonly RULE_pathElementList = 578;
	public static readonly RULE_pathElementListStart = 579;
	public static readonly RULE_pathElementListStep = 580;
	public static readonly RULE_propertyRef = 581;
	public static readonly RULE_propertySource = 582;
	public static readonly RULE_valueQueryExpr = 583;
	public static readonly RULE_caseExpr = 584;
	public static readonly RULE_caseAbbreviation = 585;
	public static readonly RULE_caseSpecification = 586;
	public static readonly RULE_simpleCase = 587;
	public static readonly RULE_searchedCase = 588;
	public static readonly RULE_simpleWhenClause = 589;
	public static readonly RULE_searchedWhenClause = 590;
	public static readonly RULE_elseClause = 591;
	public static readonly RULE_caseOperand = 592;
	public static readonly RULE_whenOperandList = 593;
	public static readonly RULE_whenOperand = 594;
	public static readonly RULE_result = 595;
	public static readonly RULE_resultExpr = 596;
	public static readonly RULE_castSpec = 597;
	public static readonly RULE_castOperand = 598;
	public static readonly RULE_castTarget = 599;
	public static readonly RULE_elementIdFunction = 600;
	public static readonly RULE_letValueExpr = 601;
	public static readonly RULE_literal = 602;
	public static readonly RULE_generalLiteral = 603;
	public static readonly RULE_predefinedTypeLiteral = 604;
	public static readonly RULE_unsignedLiteral = 605;
	public static readonly RULE_booleanLiteral = 606;
	public static readonly RULE_characterStringLiteral = 607;
	public static readonly RULE_unbrokenCharacterStringLiteral = 608;
	public static readonly RULE_singleQuotedCharacterSequence = 609;
	public static readonly RULE_doubleQuotedCharacterSequence = 610;
	public static readonly RULE_accentQuotedCharacterSequence = 611;
	public static readonly RULE_noEscape = 612;
	public static readonly RULE_unbrokenSingleQuotedCharacterSequence = 613;
	public static readonly RULE_unbrokenDoubleQuotedCharacterSequence = 614;
	public static readonly RULE_unbrokenAccentQuotedCharacterSequence = 615;
	public static readonly RULE_temporalLiteral = 616;
	public static readonly RULE_dateLiteral = 617;
	public static readonly RULE_timeLiteral = 618;
	public static readonly RULE_dateTimeLiteral = 619;
	public static readonly RULE_dateString = 620;
	public static readonly RULE_timeString = 621;
	public static readonly RULE_dateTimeString = 622;
	public static readonly RULE_sqlDateTimeLiteral = 623;
	public static readonly RULE_durationLiteral = 624;
	public static readonly RULE_durationString = 625;
	public static readonly RULE_sqlIntervalLiteral = 626;
	public static readonly RULE_sqlIntervalType = 627;
	public static readonly RULE_nullLiteral = 628;
	public static readonly RULE_listLiteral = 629;
	public static readonly RULE_recordLiteral = 630;
	public static readonly RULE_objectName = 631;
	public static readonly RULE_objectNameOrBindingVar = 632;
	public static readonly RULE_directoryName = 633;
	public static readonly RULE_schemaName = 634;
	public static readonly RULE_graphName = 635;
	public static readonly RULE_delimitedGraphName = 636;
	public static readonly RULE_graphTypeName = 637;
	public static readonly RULE_elementTypeName = 638;
	public static readonly RULE_bindingTableName = 639;
	public static readonly RULE_delimitedBindingTableName = 640;
	public static readonly RULE_procedureName = 641;
	public static readonly RULE_labelName = 642;
	public static readonly RULE_propertyName = 643;
	public static readonly RULE_fieldName = 644;
	public static readonly RULE_parameterName = 645;
	public static readonly RULE_var = 646;
	public static readonly RULE_graphVar = 647;
	public static readonly RULE_graphPatternVar = 648;
	public static readonly RULE_pathOrSubpathVar = 649;
	public static readonly RULE_elementVar = 650;
	public static readonly RULE_pathVar = 651;
	public static readonly RULE_subpathVar = 652;
	public static readonly RULE_bindingTableVar = 653;
	public static readonly RULE_valueVar = 654;
	public static readonly RULE_bindingVar = 655;
	public static readonly RULE_token = 656;
	public static readonly RULE_nonDelimiterToken = 657;
	public static readonly RULE_identifier = 658;
	public static readonly RULE_separatedIdentifier = 659;
	public static readonly RULE_nonDelimitedIdentifier = 660;
	public static readonly RULE_delimitedIdentifier = 661;
	public static readonly RULE_keyWord = 662;
	public static readonly RULE_reservedWord = 663;
	public static readonly RULE_preReservedWord = 664;
	public static readonly RULE_nonReservedWord = 665;
	public static readonly RULE_delimiterToken = 666;
	public static readonly RULE_separator = 667;
	public static readonly RULE_comment = 668;
	public static readonly RULE_edgeSynonym = 669;
	public static readonly RULE_edgesSynonym = 670;
	public static readonly RULE_nodeSynonym = 671;
	public static readonly literalNames: (string | null)[] = [ null, "'<-'", 
                                                            "'<~'", "'<-['", 
                                                            "'<~['", "'<->'", 
                                                            "'<-/'", "'<~/'", 
                                                            "'-['", "'-/'", 
                                                            "'->'", "']-'", 
                                                            "']~'", "']->'", 
                                                            "']~>'", "'/-'", 
                                                            "'/->'", "'/~'", 
                                                            "'/~>'", "'~['", 
                                                            "'~>'", "'~/'", 
                                                            "'''", "'\"'", 
                                                            "'`'", "'\\'", 
                                                            "'+'", "'-'", 
                                                            "'--'", "'&'", 
                                                            "'*'", "'^'", 
                                                            "':'", "'::'", 
                                                            "','", "'$'", 
                                                            "'='", "'!'", 
                                                            "'<'", "'>'", 
                                                            "'{'", "'}'", 
                                                            "'['", "']'", 
                                                            "'('", "')'", 
                                                            "'?'", "';'", 
                                                            "'/'", "'//'", 
                                                            "'~'", "'_'", 
                                                            "'|'", "'%'", 
                                                            "'.'", "'..'", 
                                                            "'@'", "'#'", 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, "'\\u000D'", 
                                                            "'\\u000A'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "LEFT_ARROW", 
                                                             "LEFT_ARROW_TILDE", 
                                                             "LEFT_ARROW_BRACKET", 
                                                             "LEFT_ARROW_TILDE_BRACKET", 
                                                             "LEFT_MINUS_RIGHT", 
                                                             "LEFT_MINUS_SLASH", 
                                                             "LEFT_TILDE_SLASH", 
                                                             "MINUS_LEFT_BRACKET", 
                                                             "MINUS_SLASH", 
                                                             "RIGHT_ARROW", 
                                                             "RIGHT_BRACKET_MINUS", 
                                                             "RIGHT_BRACKET_TILDE", 
                                                             "BRACKET_RIGHT_ARROW", 
                                                             "BRACKET_TILDE_RIGHT_ARROW", 
                                                             "SLASH_MINUS", 
                                                             "SLASH_MINUS_RIGHT", 
                                                             "SLASH_TILDE", 
                                                             "SLASH_TILDE_RIGHT", 
                                                             "TILDE_LEFT_BRACKET", 
                                                             "TILDE_RIGHT_ARROW", 
                                                             "TILDE_SLASH", 
                                                             "QUOTE", "DOUBLE_QUOTE", 
                                                             "GRAVE_ACCENT", 
                                                             "REVERS_SOLIDUS", 
                                                             "PLUS", "MINUS", 
                                                             "DOUBLE_MINUS", 
                                                             "AMPERSAND", 
                                                             "ASTERISK", 
                                                             "CIRCUMFLEX", 
                                                             "COLON", "DOUBLE_COLON", 
                                                             "COMMA", "DOLLAR", 
                                                             "EQUALS", "EXCLAMATION", 
                                                             "LEFT_ANGLE_BRACKET", 
                                                             "RIGHT_ANGLE_BRACKET", 
                                                             "LEFT_BRACE", 
                                                             "RIGHT_BRACE", 
                                                             "LEFT_BRACKET", 
                                                             "RIGHT_BRACKET", 
                                                             "LEFT_PAREN", 
                                                             "RIGHT_PAREN", 
                                                             "QUESTION_MARK", 
                                                             "SEMICOLON", 
                                                             "SOLIDUS", 
                                                             "DOUBLE_SOLIDUS", 
                                                             "TILDE", "UNDERSCORE", 
                                                             "VERTICAL_BAR", 
                                                             "PERCENT", 
                                                             "PERIOD", "DOUBLE_PERIOD", 
                                                             "COMMERCIAL_AT", 
                                                             "HASH", "MULTISET_ALTERNATION", 
                                                             "CONCATENATION", 
                                                             "ABS", "ACOS", 
                                                             "ALL", "ALL_DIFFERENT", 
                                                             "AND", "ANY", 
                                                             "ARRAY", "AS", 
                                                             "ASC", "ASCENDING", 
                                                             "ASIN", "AT", 
                                                             "ATAN", "AVG", 
                                                             "BIG", "BIGINT", 
                                                             "BINARY", "BOOL", 
                                                             "BOOLEAN", 
                                                             "BOTH", "BTRIM", 
                                                             "BY", "BYTE_LENGTH", 
                                                             "BYTES", "CALL", 
                                                             "CASE", "CAST", 
                                                             "CEIL", "CEILING", 
                                                             "CHAR_LENGTH", 
                                                             "CHARACTER_LENGTH", 
                                                             "CHARACTERISTICS", 
                                                             "CLOSE", "COALESCE", 
                                                             "COLLECT", 
                                                             "COMMIT", "COPY", 
                                                             "COS", "COSH", 
                                                             "COT", "COUNT", 
                                                             "CREATE", "CURRENT_DATE", 
                                                             "CURRENT_GRAPH", 
                                                             "CURRENT_PROPERTY_GRAPH", 
                                                             "CURRENT_SCHEMA", 
                                                             "CURRENT_TIME", 
                                                             "CURRENT_TIMESTAMP", 
                                                             "CURRENT_USER", 
                                                             "DATE", "DATETIME", 
                                                             "DAY", "DEC", 
                                                             "DECIMAL", 
                                                             "DEGREES", 
                                                             "DELETE", "DESC", 
                                                             "DESCENDING", 
                                                             "DETACH", "DISTINCT", 
                                                             "DOUBLE", "DROP", 
                                                             "DURATION", 
                                                             "DURATION_BETWEEN", 
                                                             "ELEMENT_ID", 
                                                             "ELSE", "END", 
                                                             "EXCEPT", "EXISTS", 
                                                             "EXP", "FALSE", 
                                                             "FILTER", "FINISH", 
                                                             "FLOAT", "FLOAT16", 
                                                             "FLOAT32", 
                                                             "FLOAT64", 
                                                             "FLOAT128", 
                                                             "FLOAT256", 
                                                             "FLOOR", "FOR", 
                                                             "FROM", "GROUP", 
                                                             "HAVING", "HOME_GRAPH", 
                                                             "HOME_PROPERTY_GRAPH", 
                                                             "HOME_SCHEMA", 
                                                             "HOUR", "IF", 
                                                             "IN", "INSERT", 
                                                             "INT", "INTEGER", 
                                                             "INT8", "INTEGER8", 
                                                             "INT16", "INTEGER16", 
                                                             "INT32", "INTEGER32", 
                                                             "INT64", "INTEGER64", 
                                                             "INT128", "INTEGER128", 
                                                             "INT256", "INTEGER256", 
                                                             "INTERSECT", 
                                                             "INTERVAL", 
                                                             "IS", "LEADING", 
                                                             "LET", "LIKE", 
                                                             "LIMIT", "LIST", 
                                                             "LN", "LOCAL", 
                                                             "LOCAL_DATETIME", 
                                                             "LOCAL_TIME", 
                                                             "LOCAL_TIMESTAMP", 
                                                             "LOG", "LOG10", 
                                                             "LOWER", "LTRIM", 
                                                             "MATCH", "MAX", 
                                                             "MIN", "MINUTE", 
                                                             "MOD", "MONTH", 
                                                             "NEXT", "NODETACH", 
                                                             "NORMALIZE", 
                                                             "NOT", "NULL", 
                                                             "NULLS", "NULLIF", 
                                                             "OCTET_LENGTH", 
                                                             "OF", "OFFSET", 
                                                             "OPEN", "OPTIONAL", 
                                                             "OR", "ORDER", 
                                                             "OTHERWISE", 
                                                             "PARAMETER", 
                                                             "PARAMETERS", 
                                                             "PATH", "PATH_LENGTH", 
                                                             "PATHS", "PERCENTILE_CONT", 
                                                             "PERCENTILE_DISC", 
                                                             "POWER", "PRECISION", 
                                                             "PROPERTY_EXISTS", 
                                                             "RADIANS", 
                                                             "REAL", "RECORD", 
                                                             "REMOVE", "REPLACE", 
                                                             "RESET", "RETURN", 
                                                             "ROLLBACK", 
                                                             "RTRIM", "SAME", 
                                                             "SCHEMA", "SECOND", 
                                                             "SELECT", "SESSION", 
                                                             "SET", "SIGNED", 
                                                             "SIN", "SINH", 
                                                             "SKIP_", "SMALL", 
                                                             "SMALLINT", 
                                                             "SQRT", "START", 
                                                             "STDDEV_POP", 
                                                             "STDDEV_SAMP", 
                                                             "STRING", "SUM", 
                                                             "TAN", "TANH", 
                                                             "THEN", "TIME", 
                                                             "TIMESTAMP", 
                                                             "TRAILING", 
                                                             "TRIM", "TRUE", 
                                                             "TYPED", "UBIGINT", 
                                                             "UINT", "UINT8", 
                                                             "UINT16", "UINT32", 
                                                             "UINT64", "UINT128", 
                                                             "UINT256", 
                                                             "UNION", "UNKNOWN", 
                                                             "UNSIGNED", 
                                                             "UPPER", "USE", 
                                                             "USMALLINT", 
                                                             "VALUE", "VARBINARY", 
                                                             "VARCHAR", 
                                                             "VARIABLE", 
                                                             "WHEN", "WHERE", 
                                                             "WITH", "XOR", 
                                                             "YEAR", "YIELD", 
                                                             "ZONED", "ZONED_DATETIME", 
                                                             "ZONED_TIME", 
                                                             "AGGREGATE", 
                                                             "AGGREGATES", 
                                                             "ALTER", "CATALOG", 
                                                             "CLEAR", "CLONE", 
                                                             "CONSTRAINT", 
                                                             "CURRENT_ROLE", 
                                                             "DATA", "DIRECTORY", 
                                                             "EXACT", "EXISTING", 
                                                             "FUNCTION", 
                                                             "GQLSTATUS", 
                                                             "GRANT", "INSTANT", 
                                                             "LEFT", "NOTHING", 
                                                             "NUMERIC", 
                                                             "ON", "PARTITION", 
                                                             "PROCEDURE", 
                                                             "PRODUCT", 
                                                             "PROJECT", 
                                                             "QUERY", "RECORDS", 
                                                             "REFERENCE", 
                                                             "RENAME", "REVOKE", 
                                                             "RIGHT", "SUBSTRING", 
                                                             "TEMPORAL", 
                                                             "UNIQUE", "UNIT", 
                                                             "VALUES", "ACYCLIC", 
                                                             "BINDING", 
                                                             "BINDINGS", 
                                                             "CONNECTING", 
                                                             "DESTINATION", 
                                                             "DIFFERENT", 
                                                             "DIRECTED", 
                                                             "EDGE", "EDGES", 
                                                             "ELEMENT", 
                                                             "ELEMENTS", 
                                                             "FIRST", "GRAPH", 
                                                             "GROUPS", "KEEP", 
                                                             "LABEL", "LABELED", 
                                                             "LABELS", "LAST", 
                                                             "NFC", "NFD", 
                                                             "NFKC", "NFKD", 
                                                             "NO", "NODE", 
                                                             "NORMALIZED", 
                                                             "ONLY", "ORDINALITY", 
                                                             "PROPERTY", 
                                                             "READ", "RELATIONSHIP", 
                                                             "RELATIONSHIPS", 
                                                             "REPEATABLE", 
                                                             "SHORTEST", 
                                                             "SIMPLE", "SOURCE", 
                                                             "TABLE", "TEMP", 
                                                             "TIMEZONE", 
                                                             "TO", "TRAIL", 
                                                             "TRANSACTION", 
                                                             "TYPE", "UNDIRECTED", 
                                                             "VERTEX", "WALK", 
                                                             "WITHOUT", 
                                                             "WRITE", "ZONE", 
                                                             "INTERVAL_DAY", 
                                                             "INTERVAL_WEEK", 
                                                             "INTERVAL_MONTH", 
                                                             "INTERVAL_YEAR", 
                                                             "IF_NOT_EXISTS", 
                                                             "IF_EXISTS", 
                                                             "UNSIGNED_NUMERIC_LITERAL", 
                                                             "SIGNED_NUMERIC_LITERAL", 
                                                             "SIGN", "EXACT_NUMERIC_LITERAL", 
                                                             "EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                                                             "EXACT_UNSIGNED_INT", 
                                                             "APROXIMATE_NUMERIC_LITERAL", 
                                                             "APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                                                             "APROXIMATE_UNSIGNED_INT", 
                                                             "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                                                             "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", 
                                                             "FOUR_DIGIT", 
                                                             "DOUBLE_DIGIT", 
                                                             "UNSIGNED_INT", 
                                                             "UNSIGNED_DECIMAL_INT", 
                                                             "UNSIGNED_HEX_INT", 
                                                             "UNSIGNED_OCTAL_INT", 
                                                             "UNSIGNED_BINARY_INT", 
                                                             "BYTE_STRING_LITERAL", 
                                                             "SINGLE_QUOTED_STRING_LITERAL", 
                                                             "DOUBLE_QUOTED_STRING_LITERAL", 
                                                             "ACCENT_QUOTED_STRING_LITERAL", 
                                                             "SIMPLE_COMMENT_LITERAL", 
                                                             "BRACKETED_COMMNET_LITERAL", 
                                                             "WS", "WHITESPACE", 
                                                             "NEW_LINE", 
                                                             "CARRIAGE_RETURN", 
                                                             "RETURN_SIGN", 
                                                             "REGULAR_IDENTIFIER", 
                                                             "EXTENDED_IDENTIFIER", 
                                                             "START_CHARS", 
                                                             "CONTINUE_CHARS", 
                                                             "BIDIRECTIONAL_CONTROL_CHARACTER", 
                                                             "ESCAPED_CHARS", 
                                                             "ESCAPED_REVERSE_SOLIDUS", 
                                                             "ESCAPED_QUOTE", 
                                                             "ESCAPED_SOUBLE_QUOTE", 
                                                             "ESCAPED_GRAVE_ACCENT", 
                                                             "ESCAPED_TAB", 
                                                             "ESCAPED_BACKSPACE", 
                                                             "ESCAPED_NEW_LINE", 
                                                             "ESCAPED_CARRIAGE_RETURN", 
                                                             "ESCAPED_FORM_FEED", 
                                                             "ESCAPED_UNICODE4_DIGIT_VALUE", 
                                                             "ESCAPED_UNICODE6_DIGIT_VALUE", 
                                                             "GQL_LANGUAGE_CHAR", 
                                                             "GQL_SPECIAL_CHAR" ];
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"gqlProgram", "activity", "programActivity", "sessionActivity", "sessionSetCommand", 
		"sessionSetSchemaClause", "sessionSetGraphClause", "sessionSetTimeZoneClause", 
		"setTimeZoneValue", "sessionSetParameterClause", "sessionSetGraphParameterClause", 
		"sessionSetBindingTableParameterCalues", "sessionSetValuesParameterClause", 
		"sessionSetParameterName", "sessionResetCommand", "sessionResetArguments", 
		"sessionCloseCommand", "transactionActivity", "transactionStartCommand", 
		"transactionEndCommand", "transactionCharacteristics", "transactionMode", 
		"transactionAccessMode", "implDefinedAccessMode", "nestedProcedureSpec", 
		"procedureSpec", "nestedDataModProcedureSpec", "nestedQuerySpec", "procedureBody", 
		"bindingVarDefBlock", "bindingVarDef", "statmentBlock", "statement", "nextStatment", 
		"graphVarDef", "optTypedGraphInit", "graphInit", "bindingTableVarDef", 
		"optTypedBindingTableInit", "bindingTableInit", "valueVarDef", "optTypedValueInit", 
		"valueInit", "graphExpr", "currentGraph", "nestedGraphQuerySpec", "bindingTableExpr", 
		"nestedBindingTableQuerySpec", "objectExprPrimary", "linearCatalogModStatment", 
		"simpleCatalogModStatment", "primitiveCatalogModStatment", "createSchemeStatment", 
		"dropSchemeStatment", "createGraphStatment", "createOnlyGraphStatment", 
		"createOrReplaceGraphStatment", "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
		"graphSource", "dropGraphStatment", "createGraphTypeStatment", "graphTypeSource", 
		"copyOfGraphType", "dropGraphTypeStatment", "callCatalogModProcedureStatment", 
		"linearDataModStatment", "focusedLinearDataModStatment", "focusedLinearDataModStatmentBody", 
		"focusedNestedDataModProcedureSpec", "ambientLinearDataModStatment", "ambientLinearDataModStatmentBody", 
		"simpleLinearDataAccessingStatment", "simpleDataAccessingStatment", "simpleDataModStatment", 
		"primitiveDataModStatment", "insertStatment", "setStatment", "setItemList", 
		"setItem", "setPropertyItem", "setAllPropertiesItem", "setLabelItem", 
		"labelSetSpec", "removeStatment", "removeItemList", "removeItem", "removePropertyItem", 
		"removeLabelItem", "deleteStatment", "deleteItemList", "deleteItem", "callDataModProcedureStatment", 
		"compositeQueryStatment", "compositeQueryExpr", "queryConjunction", "setOperator", 
		"compositeQueryPrimary", "linearQueryStatment", "focusedLinearQueryStatment", 
		"focusedLinearQueryStatmentPart", "focusedLinearQueryAndPrimitiveResultStatmentPart", 
		"focusedPrimitiveResultStatment", "focusedNestedQuerySpec", "ambientLinearQueryStatment", 
		"simpleLinearQueryStatment", "simpleQueryStatment", "primitiveQueryStatment", 
		"matchStatment", "simpleMatchStatment", "optionalMatchStatment", "optionalOperand", 
		"matchStatmentBlock", "callQueryStatment", "filterStatment", "letStatment", 
		"letVarDefList", "letVarDef", "forStatment", "forItem", "forItemAlias", 
		"forOrdinalityOrOffset", "orderByAndPageStatment", "primitiveResultStatment", 
		"returnStatment", "returnStatmentBody", "returnItemList", "returnItem", 
		"returnItemAlias", "selectStatment", "selectItemList", "selectItem", "selectItemAlias", 
		"havingClause", "selectStatmentBody", "selectGraphMatchList", "selectGraphMatch", 
		"selectQuerySpec", "callProcedureStatment", "procedureCall", "inlineProcedureCall", 
		"varScopeClause", "bindingVarRefList", "namedProcedureCall", "procedureArgList", 
		"procedureArg", "useGraphClause", "atSchemaClause", "bindingVarRef", "elementVarRef", 
		"pathVarRef", "parameter", "graphPatternBindingTable", "graphPatternYieldClause", 
		"graphPatternYieldItemList", "graphPatternYieldItem", "graphPattern", 
		"matchMode", "repeatableElementsMatchMode", "differentEdgesMatchMode", 
		"elementBindingsOrElements", "edgeBindingsOrEdges", "pathPatternList", 
		"pathPattern", "pathVarDeclaration", "keepClause", "graphPatternWhereClause", 
		"pathPatternPrefix", "pathModePrefix", "pathMode", "pathSearchPrefix", 
		"allPathSearch", "pathOrPaths", "anyPathSearch", "numberOfPaths", "shortestPathSearch", 
		"allShortestPathSearch", "anyShortestPathSearch", "countedShortestPathSearch", 
		"countedShortestGroupSearch", "groupOrGroups", "numberOfGroups", "pathPatternExpr", 
		"pathMultisetAlternation", "pathPatternUnion", "pathTerm", "pathFactor", 
		"quantifiedPathPrimary", "questionedPathPrimary", "pathPrimary", "elementPattern", 
		"nodePattern", "elementPatternFiller", "elementVarDeclaration", "isLabelExpr", 
		"isOrColon", "elementPatternPredicate", "elementPatternWhereClause", "elementPropertySpec", 
		"propertyKeyValuePairList", "propertyKeyValuePair", "edgePattern", "fullEdgePattern", 
		"fullEdgePointingLeft", "fullEdgeUndirected", "fullEdgePointingRight", 
		"fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", "fullEdgeLeftOrRight", 
		"fullEdgeAnyDirection", "abbreviatedEdgePattern", "parenthesizedPathPatternExpr", 
		"subpathVarDeclaration", "parenthesizedPathPatternWhereClause", "insertGraphPattern", 
		"insertGraphPatternList", "insertPathPattern", "insertNodePattern", "insertEdgePattern", 
		"insertEdgePointingLeft", "insertEdgePointingRight", "insertEdgeUndirected", 
		"insertElementPatternFiller", "labelAndPropertySetSpec", "labelExpr", 
		"labelTerm", "labelFactor", "labelNegation", "labelPrimary", "wildcardLabel", 
		"parenthesizedLabelExpr", "graphPatternQuantifier", "fixedQuantifier", 
		"generalQuantifier", "lowerBound", "upperBound", "simplifiedPathPatternExpr", 
		"simplifiedDefaultingLeft", "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
		"simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
		"simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
		"simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
		"simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", "simplifiedQuntified", 
		"simplifiedQuestioned", "simplifiedTertiary", "simplifiedDirectionOverride", 
		"simplifiedOverrideLeft", "simplifiedOverrideUndirected", "simplifiedOverrideRight", 
		"simplifiedOverrideLeftOrUndirected", "simplifiedOverrideUndirectedOrRight", 
		"simplifiedOverrideLeftOrRight", "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
		"simplifiedNegation", "simplifiedPrimary", "whereClause", "yieldClause", 
		"yieldItemList", "yieldItem", "yieldItemName", "yieldItemAlias", "groupByClause", 
		"groupingElementList", "groupingElement", "emptyGroupingSet", "orderByClause", 
		"aggregateFunction", "generalSetFunction", "generalSetFunctionType", "setQuantifier", 
		"binarySetFunction", "dependantValueExpr", "independentValueExpr", "sortSpecList", 
		"sortSpec", "sortKey", "orderingSpec", "nullOrdering", "limitClause", 
		"offsetClause", "offsetSynonym", "graphTypeSpec", "nestedGraphTypeSpec", 
		"graphTypeSpecBody", "elementTypeDefList", "elementTypeDef", "nodeTypeDef", 
		"nodeTypePattern", "nodeTypePhrase", "nodeTypeName", "nodeTypeFiller", 
		"nodeTypeLabelSetDef", "nodeTypePropertyTypeSetDef", "edgeTypeDef", "edgeTypePattern", 
		"edgeTypePhrase", "edgeTypeName", "edgeTypeFiller", "edgeTypeLabelSetDef", 
		"edgeTypePropertyTypeSetDef", "fullEdgeTypePattern", "fullEdgeTypePatternPointingRight", 
		"fullEdgeTypePatternPointingLeft", "fullEdgeTypePatternUndirected", "arcTypePointingRight", 
		"arcTypePointingLeft", "arcTypeUndirected", "arcTypeFiller", "abbreviatedEdgeTypePattern", 
		"abbreviatedEdgeTypePatternPointingRight", "abbreviatedEdgeTypePatternPointingLeft", 
		"abbreviatedEdgeTypePatternUndirected", "nodeTypeRef", "sourceNodeTypeRef", 
		"destinationNodeTypeRef", "edgeKind", "endpointDef", "enpointPairDef", 
		"endpointPairDefPointingRight", "endpointPairDefPointingLeft", "endpointPairDefUndirected", 
		"connectorPointingRight", "connectorPointingLeft", "connectorUndirected", 
		"sourceNodeTypeName", "destinationNodeTypeName", "labelSetDef", "propertyTypeSetDef", 
		"propertyTypeDefList", "propertyTypeDef", "propertyValueType", "bindingTableType", 
		"valueType", "typed", "predefinedType", "booleanType", "charStringType", 
		"byteStringType", "minLength", "maxLength", "fixedLength", "numericType", 
		"exactNumericType", "binaryExactNumericType", "signedBinaryExactNumericType", 
		"unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", "decimalExactNumericType", 
		"precision", "scale", "approximateNumericType", "temporalType", "temporalInstantType", 
		"temporalDurationType", "dateTimeType", "localDateTimeType", "dateType", 
		"timeType", "localTimeType", "durationType", "refValueType", "graphRefValueType", 
		"openGraphRefValueType", "closedGraphRefValueType", "bindingTableRefValueType", 
		"nodeRefValueType", "openNodeRefValueType", "closedNodeRefValueType", 
		"edgeRefValueType", "openEdgeRefValueType", "closedEdgeRefValueType", 
		"constructedType", "listValueType", "listValueTypeName", "listValueTypeNameSynonym", 
		"recordType", "fieldTypesSpec", "fieldTypeList", "dynamicUnionType", "openDynamicUnionType", 
		"dynamicPropertyValueType", "closedDynamicUnionType", "componentTypeList", 
		"componentType", "pathValueType", "notNull", "fieldType", "schemaRef", 
		"absoluteCatalogSchemaRef", "catalogSchemaParentAndName", "relativeCatalogSchemaRef", 
		"predefinedSchemaRef", "absoluteDirectoryPath", "relativeDirectoryPath", 
		"simpleDirectoryPath", "graphRef", "catalogGraphParentAndName", "homeGraph", 
		"graphTypeRef", "catalogGraphTypeParentAndName", "bindingTableRef", "catalogBindingTableParentAndName", 
		"procedureRef", "catalogProcedureParentAndName", "catalogObjectParentRef", 
		"refParameter", "externalObjectRef", "searchCondition", "predicate", "comparisonPredicate", 
		"comparisonPredicatePart2", "comparisonOperator", "equals", "notEquals", 
		"lessThen", "greaterThan", "lessThanOrEquals", "graterThanOrEquals", "comparisonPredicand", 
		"existsPredicate", "nullPredicate", "nullPredicatePart2", "valueTypePredicate", 
		"valueTypePredicatePart2", "normalizedPredicate", "normalizedPredicatePart2", 
		"directedPredicate", "directedPredicatePart2", "labeledPredicate", "labeledPredicatePart2", 
		"isLabeledOrColon", "sourceOrDestinationPredicate", "nodeRef", "sourcePredicatePart2", 
		"destinationPredicatePart2", "edgeRef", "allDifferentPredicate", "samePredicate", 
		"propertyExistsPredicate", "valueSpec", "unsignedValueSpec", "unsignedIntSpec", 
		"parameterValueSpec", "predefinedParameter", "valueExpr", "commonValueExpr", 
		"refValueExpr", "graphRefValueExpr", "bindingTableRefValueExpr", "nodeRefValueExpr", 
		"edgeRefValueExpr", "recordValueExpr", "aggregatingValueExpr", "booleanValueExpr", 
		"booleanTerm", "booleanFactor", "booleanTest", "truthValue", "booleanPrimary", 
		"booleanPredicand", "paranthisedBooleanValueExpr", "numericValueExpr", 
		"term", "factor", "numericPrimary", "valueExprPrimary", "parenthesizedValueExpr", 
		"nonParenthesizedValueExprPrimary", "nonParenthesizedValueExprPrimarySpecialCase", 
		"collectionValueConstructor", "numericValueFunction", "lengthExpr", "charLengthExpr", 
		"byteLengthExpr", "pathLengthExpr", "absoluteValueExpr", "modulusExpr", 
		"numericValueExprDividen", "numericValueExprDivisor", "trigonometricFunction", 
		"trigonometricFunctionName", "logarithmFunction", "generalLogarithmFunction", 
		"generalLogarithmBase", "generalLogarithmArgument", "commonLogarithmFunction", 
		"naturalLogarithmFunction", "exponentialFunction", "powerFunction", "numericValueExprBase", 
		"numericValueExprExponent", "squareRootFunciton", "floorFunction", "ceilingFunction", 
		"stringValueExpr", "charStringValueExpr", "charStringConcatenation", "charStringFactor", 
		"charStringPrimary", "byteStringValueExpr", "byteStringFactor", "byteStringPrimary", 
		"byteStringConcatenation", "stringValueFunction", "charStringFunction", 
		"foldFunction", "trimFunction", "singleCharTrimFunction", "multiCharTrimFunction", 
		"trimOperands", "trimSource", "trimSpec", "trimCharString", "normalizeFunction", 
		"normalForm", "byteStringFunction", "byteStrinTrimFunction", "byteStringTrimOperands", 
		"byteStringTrimSource", "trimByteString", "stringLength", "dateTimeValueExpr", 
		"dateTimeTerm", "dateTimeFactor", "dateTimePrimary", "dateTimeValueFunction", 
		"dateFunction", "timeFunction", "localTimeFunction", "dateTimeFunction", 
		"localDatetimeFunction", "dateFunctionParameters", "timeFunctionParameters", 
		"dateTimeFunctionParameters", "durationValueExpr", "dateTimeSubtraction", 
		"dateTimeSubtractionParameters", "durationTerm", "durationFactor", "durationPrimary", 
		"durationValueExpr1", "durationTerm1", "durationTerm2", "dateTimeValueExpr1", 
		"dateTimeValueExpr2", "durationValueFunction", "durationFunction", "durationFunctionParameters", 
		"durationAbsoluteValueFunction", "listValueExpr", "listConcatenation", 
		"listPrimary", "listValueFunction", "trimListFunction", "elementsFunction", 
		"listValueConstructor", "listValueConstructorByEnumeration", "listElementList", 
		"listElement", "recordValueConstructor", "fieldsSpec", "fieldList", "field", 
		"pathValueExpr", "pathValueConcatenation", "pathValuePrimary", "pathValueConstructor", 
		"pathValueConstructorByEnumeration", "pathElementList", "pathElementListStart", 
		"pathElementListStep", "propertyRef", "propertySource", "valueQueryExpr", 
		"caseExpr", "caseAbbreviation", "caseSpecification", "simpleCase", "searchedCase", 
		"simpleWhenClause", "searchedWhenClause", "elseClause", "caseOperand", 
		"whenOperandList", "whenOperand", "result", "resultExpr", "castSpec", 
		"castOperand", "castTarget", "elementIdFunction", "letValueExpr", "literal", 
		"generalLiteral", "predefinedTypeLiteral", "unsignedLiteral", "booleanLiteral", 
		"characterStringLiteral", "unbrokenCharacterStringLiteral", "singleQuotedCharacterSequence", 
		"doubleQuotedCharacterSequence", "accentQuotedCharacterSequence", "noEscape", 
		"unbrokenSingleQuotedCharacterSequence", "unbrokenDoubleQuotedCharacterSequence", 
		"unbrokenAccentQuotedCharacterSequence", "temporalLiteral", "dateLiteral", 
		"timeLiteral", "dateTimeLiteral", "dateString", "timeString", "dateTimeString", 
		"sqlDateTimeLiteral", "durationLiteral", "durationString", "sqlIntervalLiteral", 
		"sqlIntervalType", "nullLiteral", "listLiteral", "recordLiteral", "objectName", 
		"objectNameOrBindingVar", "directoryName", "schemaName", "graphName", 
		"delimitedGraphName", "graphTypeName", "elementTypeName", "bindingTableName", 
		"delimitedBindingTableName", "procedureName", "labelName", "propertyName", 
		"fieldName", "parameterName", "var", "graphVar", "graphPatternVar", "pathOrSubpathVar", 
		"elementVar", "pathVar", "subpathVar", "bindingTableVar", "valueVar", 
		"bindingVar", "token", "nonDelimiterToken", "identifier", "separatedIdentifier", 
		"nonDelimitedIdentifier", "delimitedIdentifier", "keyWord", "reservedWord", 
		"preReservedWord", "nonReservedWord", "delimiterToken", "separator", "comment", 
		"edgeSynonym", "edgesSynonym", "nodeSynonym",
	];
	public get grammarFileName(): string { return "GqlParser.g4"; }
	public get literalNames(): (string | null)[] { return GqlParser.literalNames; }
	public get symbolicNames(): (string | null)[] { return GqlParser.symbolicNames; }
	public get ruleNames(): string[] { return GqlParser.ruleNames; }
	public get serializedATN(): number[] { return GqlParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(this, GqlParser._ATN, GqlParser.DecisionsToDFA, new PredictionContextCache());
	}
	// @RuleVersion(0)
	public gqlProgram(): GqlProgramContext {
		let localctx: GqlProgramContext = new GqlProgramContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, GqlParser.RULE_gqlProgram);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===40 || _la===71 || ((((_la - 84)) & ~0x1F) === 0 && ((1 << (_la - 84)) & 133121) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4218889) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2621441) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & 688257) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 560669) !== 0) || _la===261 || _la===263 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347 || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				{
				this.state = 1345;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 1344;
					this.separator();
					}
				}

				this.state = 1347;
				this.activity();
				this.state = 1349;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1, this._ctx) ) {
				case 1:
					{
					this.state = 1348;
					this.separator();
					}
					break;
				}
				this.state = 1352;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===47) {
					{
					this.state = 1351;
					this.match(GqlParser.SEMICOLON);
					}
				}

				this.state = 1355;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 3, this._ctx) ) {
				case 1:
					{
					this.state = 1354;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 1361;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1362;
			this.match(GqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public activity(): ActivityContext {
		let localctx: ActivityContext = new ActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, GqlParser.RULE_activity);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1364;
			this.programActivity();
			this.state = 1368;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 5, this._ctx) ) {
			case 1:
				{
				this.state = 1365;
				this.separator();
				this.state = 1366;
				this.sessionCloseCommand();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public programActivity(): ProgramActivityContext {
		let localctx: ProgramActivityContext = new ProgramActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, GqlParser.RULE_programActivity);
		try {
			this.state = 1372;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 218:
			case 226:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1370;
				this.sessionActivity();
				}
				break;
			case 40:
			case 71:
			case 84:
			case 95:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 219:
			case 220:
			case 225:
			case 227:
			case 231:
			case 235:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1371;
				this.transactionActivity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionActivity(): SessionActivityContext {
		let localctx: SessionActivityContext = new SessionActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, GqlParser.RULE_sessionActivity);
		try {
			this.state = 1376;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1374;
				this.sessionSetCommand();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1375;
				this.sessionResetCommand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetCommand(): SessionSetCommandContext {
		let localctx: SessionSetCommandContext = new SessionSetCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, GqlParser.RULE_sessionSetCommand);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1378;
			this.match(GqlParser.SESSION);
			this.state = 1379;
			this.separator();
			this.state = 1380;
			this.match(GqlParser.SET);
			this.state = 1381;
			this.separator();
			this.state = 1386;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 8, this._ctx) ) {
			case 1:
				{
				this.state = 1382;
				this.sessionSetSchemaClause();
				}
				break;
			case 2:
				{
				this.state = 1383;
				this.sessionSetGraphClause();
				}
				break;
			case 3:
				{
				this.state = 1384;
				this.sessionSetTimeZoneClause();
				}
				break;
			case 4:
				{
				this.state = 1385;
				this.sessionSetParameterClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetSchemaClause(): SessionSetSchemaClauseContext {
		let localctx: SessionSetSchemaClauseContext = new SessionSetSchemaClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, GqlParser.RULE_sessionSetSchemaClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1388;
			this.match(GqlParser.SCHEMA);
			this.state = 1389;
			this.separator();
			this.state = 1390;
			this.schemaRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetGraphClause(): SessionSetGraphClauseContext {
		let localctx: SessionSetGraphClauseContext = new SessionSetGraphClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, GqlParser.RULE_sessionSetGraphClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1394;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1392;
				this.match(GqlParser.PROPERTY);
				this.state = 1393;
				this.separator();
				}
			}

			this.state = 1396;
			this.match(GqlParser.GRAPH);
			this.state = 1397;
			this.separator();
			this.state = 1398;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetTimeZoneClause(): SessionSetTimeZoneClauseContext {
		let localctx: SessionSetTimeZoneClauseContext = new SessionSetTimeZoneClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, GqlParser.RULE_sessionSetTimeZoneClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1400;
			this.match(GqlParser.TIME);
			this.state = 1401;
			this.separator();
			this.state = 1402;
			this.match(GqlParser.ZONE);
			this.state = 1403;
			this.separator();
			this.state = 1404;
			this.setTimeZoneValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setTimeZoneValue(): SetTimeZoneValueContext {
		let localctx: SetTimeZoneValueContext = new SetTimeZoneValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, GqlParser.RULE_setTimeZoneValue);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1406;
			this.stringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetParameterClause(): SessionSetParameterClauseContext {
		let localctx: SessionSetParameterClauseContext = new SessionSetParameterClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, GqlParser.RULE_sessionSetParameterClause);
		try {
			this.state = 1411;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1408;
				this.sessionSetGraphParameterClause();
				}
				break;
			case 312:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1409;
				this.sessionSetBindingTableParameterCalues();
				}
				break;
			case 263:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1410;
				this.sessionSetValuesParameterClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetGraphParameterClause(): SessionSetGraphParameterClauseContext {
		let localctx: SessionSetGraphParameterClauseContext = new SessionSetGraphParameterClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, GqlParser.RULE_sessionSetGraphParameterClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1415;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1413;
				this.match(GqlParser.PROPERTY);
				this.state = 1414;
				this.separator();
				}
			}

			this.state = 1417;
			this.match(GqlParser.GRAPH);
			this.state = 1418;
			this.separator();
			this.state = 1419;
			this.sessionSetParameterName();
			this.state = 1421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1420;
				this.separator();
				}
			}

			this.state = 1423;
			this.optTypedGraphInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetBindingTableParameterCalues(): SessionSetBindingTableParameterCaluesContext {
		let localctx: SessionSetBindingTableParameterCaluesContext = new SessionSetBindingTableParameterCaluesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, GqlParser.RULE_sessionSetBindingTableParameterCalues);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1427;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===312) {
				{
				this.state = 1425;
				this.match(GqlParser.BINDING);
				this.state = 1426;
				this.separator();
				}
			}

			this.state = 1429;
			this.match(GqlParser.TABLE);
			this.state = 1430;
			this.separator();
			this.state = 1431;
			this.sessionSetParameterName();
			this.state = 1433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1432;
				this.separator();
				}
			}

			this.state = 1435;
			this.optTypedBindingTableInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetValuesParameterClause(): SessionSetValuesParameterClauseContext {
		let localctx: SessionSetValuesParameterClauseContext = new SessionSetValuesParameterClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, GqlParser.RULE_sessionSetValuesParameterClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1437;
			this.match(GqlParser.VALUE);
			this.state = 1438;
			this.separator();
			this.state = 1439;
			this.sessionSetParameterName();
			this.state = 1441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1440;
				this.separator();
				}
			}

			this.state = 1443;
			this.optTypedValueInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionSetParameterName(): SessionSetParameterNameContext {
		let localctx: SessionSetParameterNameContext = new SessionSetParameterNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, GqlParser.RULE_sessionSetParameterName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1447;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===364) {
				{
				this.state = 1445;
				this.match(GqlParser.IF_NOT_EXISTS);
				this.state = 1446;
				this.separator();
				}
			}

			this.state = 1449;
			this.parameterName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionResetCommand(): SessionResetCommandContext {
		let localctx: SessionResetCommandContext = new SessionResetCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, GqlParser.RULE_sessionResetCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1453;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===226) {
				{
				this.state = 1451;
				this.match(GqlParser.SESSION);
				this.state = 1452;
				this.separator();
				}
			}

			this.state = 1455;
			this.match(GqlParser.RESET);
			this.state = 1456;
			this.separator();
			this.state = 1457;
			this.sessionResetArguments();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionResetArguments(): SessionResetArgumentsContext {
		let localctx: SessionResetArgumentsContext = new SessionResetArgumentsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, GqlParser.RULE_sessionResetArguments);
		let _la: number;
		try {
			this.state = 1478;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 62:
			case 91:
			case 204:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===62) {
					{
					this.state = 1459;
					this.match(GqlParser.ALL);
					this.state = 1460;
					this.separator();
					}
				}

				this.state = 1463;
				_la = this._input.LA(1);
				if(!(_la===91 || _la===204)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 223:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1464;
				this.match(GqlParser.SCHEMA);
				}
				break;
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 1465;
					this.match(GqlParser.PROPERTY);
					this.state = 1466;
					this.separator();
					}
				}

				this.state = 1469;
				this.match(GqlParser.GRAPH);
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1470;
				this.match(GqlParser.TIME);
				this.state = 1471;
				this.separator();
				this.state = 1472;
				this.match(GqlParser.ZONE);
				}
				break;
			case 203:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1474;
				this.match(GqlParser.PARAMETER);
				this.state = 1475;
				this.separator();
				this.state = 1476;
				this.parameterName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sessionCloseCommand(): SessionCloseCommandContext {
		let localctx: SessionCloseCommandContext = new SessionCloseCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, GqlParser.RULE_sessionCloseCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===226) {
				{
				this.state = 1480;
				this.match(GqlParser.SESSION);
				}
			}

			this.state = 1483;
			this.separator();
			this.state = 1484;
			this.match(GqlParser.CLOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionActivity(): TransactionActivityContext {
		let localctx: TransactionActivityContext = new TransactionActivityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, GqlParser.RULE_transactionActivity);
		try {
			this.state = 1503;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 235:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1486;
				this.transactionStartCommand();
				this.state = 1494;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 23, this._ctx) ) {
				case 1:
					{
					this.state = 1487;
					this.separator();
					this.state = 1488;
					this.procedureSpec();
					this.state = 1492;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 22, this._ctx) ) {
					case 1:
						{
						this.state = 1489;
						this.separator();
						this.state = 1490;
						this.transactionEndCommand();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 40:
			case 71:
			case 84:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 219:
			case 225:
			case 227:
			case 231:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1496;
				this.procedureSpec();
				this.state = 1500;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 24, this._ctx) ) {
				case 1:
					{
					this.state = 1497;
					this.separator();
					this.state = 1498;
					this.transactionEndCommand();
					}
					break;
				}
				}
				break;
			case 95:
			case 220:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1502;
				this.transactionEndCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionStartCommand(): TransactionStartCommandContext {
		let localctx: TransactionStartCommandContext = new TransactionStartCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, GqlParser.RULE_transactionStartCommand);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1505;
			this.match(GqlParser.START);
			this.state = 1506;
			this.separator();
			this.state = 1507;
			this.match(GqlParser.TRANSACTION);
			this.state = 1511;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 26, this._ctx) ) {
			case 1:
				{
				this.state = 1508;
				this.separator();
				this.state = 1509;
				this.transactionCharacteristics();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionEndCommand(): TransactionEndCommandContext {
		let localctx: TransactionEndCommandContext = new TransactionEndCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, GqlParser.RULE_transactionEndCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1513;
			_la = this._input.LA(1);
			if(!(_la===95 || _la===220)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		let localctx: TransactionCharacteristicsContext = new TransactionCharacteristicsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, GqlParser.RULE_transactionCharacteristics);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1515;
			this.transactionMode();
			this.state = 1526;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 29, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1517;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 1516;
						this.separator();
						}
					}

					this.state = 1519;
					this.match(GqlParser.COMMA);
					this.state = 1521;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 28, this._ctx) ) {
					case 1:
						{
						this.state = 1520;
						this.separator();
						}
						break;
					}
					this.state = 1523;
					this.transactionMode();
					}
					}
				}
				this.state = 1528;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 29, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let localctx: TransactionModeContext = new TransactionModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, GqlParser.RULE_transactionMode);
		try {
			this.state = 1531;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 340:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1529;
				this.transactionAccessMode();
				}
				break;
			case -1:
			case 34:
			case 40:
			case 47:
			case 71:
			case 84:
			case 95:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 218:
			case 219:
			case 220:
			case 225:
			case 226:
			case 227:
			case 231:
			case 235:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
			case 388:
			case 389:
			case 390:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1530;
				this.implDefinedAccessMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionAccessMode(): TransactionAccessModeContext {
		let localctx: TransactionAccessModeContext = new TransactionAccessModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, GqlParser.RULE_transactionAccessMode);
		try {
			this.state = 1541;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 31, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1533;
				this.match(GqlParser.READ);
				this.state = 1534;
				this.separator();
				this.state = 1535;
				this.match(GqlParser.ONLY);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1537;
				this.match(GqlParser.READ);
				this.state = 1538;
				this.separator();
				this.state = 1539;
				this.match(GqlParser.WRITE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public implDefinedAccessMode(): ImplDefinedAccessModeContext {
		let localctx: ImplDefinedAccessModeContext = new ImplDefinedAccessModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, GqlParser.RULE_implDefinedAccessMode);
		try {
			this.enterOuterAlt(localctx, 1);
			// tslint:disable-next-line:no-empty
			{
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedProcedureSpec(): NestedProcedureSpecContext {
		let localctx: NestedProcedureSpecContext = new NestedProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, GqlParser.RULE_nestedProcedureSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1545;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 1547;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1546;
				this.separator();
				}
			}

			this.state = 1549;
			this.procedureSpec();
			this.state = 1551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1550;
				this.separator();
				}
			}

			this.state = 1553;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureSpec(): ProcedureSpecContext {
		let localctx: ProcedureSpecContext = new ProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, GqlParser.RULE_procedureSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1555;
			this.procedureBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedDataModProcedureSpec(): NestedDataModProcedureSpecContext {
		let localctx: NestedDataModProcedureSpecContext = new NestedDataModProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, GqlParser.RULE_nestedDataModProcedureSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1557;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 1559;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1558;
				this.separator();
				}
			}

			this.state = 1561;
			this.procedureBody();
			this.state = 1563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1562;
				this.separator();
				}
			}

			this.state = 1565;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedQuerySpec(): NestedQuerySpecContext {
		let localctx: NestedQuerySpecContext = new NestedQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, GqlParser.RULE_nestedQuerySpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1567;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 1569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1568;
				this.separator();
				}
			}

			this.state = 1571;
			this.procedureBody();
			this.state = 1573;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1572;
				this.separator();
				}
			}

			this.state = 1575;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureBody(): ProcedureBodyContext {
		let localctx: ProcedureBodyContext = new ProcedureBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, GqlParser.RULE_procedureBody);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1580;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===71) {
				{
				this.state = 1577;
				this.atSchemaClause();
				this.state = 1578;
				this.separator();
				}
			}

			this.state = 1585;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===263 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347) {
				{
				this.state = 1582;
				this.bindingVarDefBlock();
				this.state = 1583;
				this.separator();
				}
			}

			this.state = 1587;
			this.statmentBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarDefBlock(): BindingVarDefBlockContext {
		let localctx: BindingVarDefBlockContext = new BindingVarDefBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, GqlParser.RULE_bindingVarDefBlock);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1589;
				this.bindingVarDef();
				this.state = 1591;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 40, this._ctx) ) {
				case 1:
					{
					this.state = 1590;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 1595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===263 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarDef(): BindingVarDefContext {
		let localctx: BindingVarDefContext = new BindingVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, GqlParser.RULE_bindingVarDef);
		try {
			this.state = 1600;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1597;
				this.graphVarDef();
				}
				break;
			case 312:
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1598;
				this.bindingTableVarDef();
				}
				break;
			case 263:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1599;
				this.valueVarDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public statmentBlock(): StatmentBlockContext {
		let localctx: StatmentBlockContext = new StatmentBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, GqlParser.RULE_statmentBlock);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1602;
			this.statement();
			this.state = 1608;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 43, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1603;
					this.separator();
					this.state = 1604;
					this.nextStatment();
					}
					}
				}
				this.state = 1610;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 43, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let localctx: StatementContext = new StatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, GqlParser.RULE_statement);
		try {
			this.state = 1614;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 44, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1611;
				this.linearCatalogModStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1612;
				this.linearDataModStatment();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1613;
				this.compositeQueryStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nextStatment(): NextStatmentContext {
		let localctx: NextStatmentContext = new NextStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, GqlParser.RULE_nextStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1616;
			this.match(GqlParser.NEXT);
			this.state = 1620;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 45, this._ctx) ) {
			case 1:
				{
				this.state = 1617;
				this.separator();
				this.state = 1618;
				this.yieldClause();
				}
				break;
			}
			this.state = 1622;
			this.separator();
			this.state = 1623;
			this.statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphVarDef(): GraphVarDefContext {
		let localctx: GraphVarDefContext = new GraphVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, GqlParser.RULE_graphVarDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1627;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1625;
				this.match(GqlParser.PROPERTY);
				this.state = 1626;
				this.separator();
				}
			}

			this.state = 1629;
			this.match(GqlParser.GRAPH);
			this.state = 1630;
			this.separator();
			this.state = 1631;
			this.graphVar();
			this.state = 1632;
			this.optTypedGraphInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optTypedGraphInit(): OptTypedGraphInitContext {
		let localctx: OptTypedGraphInitContext = new OptTypedGraphInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, GqlParser.RULE_optTypedGraphInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1643;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===33 || _la===198 || _la===248 || _la===323 || _la===339) {
				{
				{
				this.state = 1637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1634;
					this.typed();
					this.state = 1635;
					this.separator();
					}
				}

				this.state = 1639;
				this.graphRefValueType();
				}
				this.state = 1641;
				this.separator();
				}
			}

			this.state = 1645;
			this.graphInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphInit(): GraphInitContext {
		let localctx: GraphInitContext = new GraphInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, GqlParser.RULE_graphInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1647;
			this.match(GqlParser.EQUALS);
			this.state = 1649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1648;
				this.separator();
				}
			}

			this.state = 1651;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableVarDef(): BindingTableVarDefContext {
		let localctx: BindingTableVarDefContext = new BindingTableVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, GqlParser.RULE_bindingTableVarDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===312) {
				{
				this.state = 1653;
				this.match(GqlParser.BINDING);
				this.state = 1654;
				this.separator();
				}
			}

			this.state = 1657;
			this.match(GqlParser.TABLE);
			this.state = 1658;
			this.separator();
			this.state = 1659;
			this.bindingTableVar();
			this.state = 1660;
			this.separator();
			this.state = 1661;
			this.optTypedBindingTableInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optTypedBindingTableInit(): OptTypedBindingTableInitContext {
		let localctx: OptTypedBindingTableInitContext = new OptTypedBindingTableInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, GqlParser.RULE_optTypedBindingTableInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===33 || _la===248 || _la===312 || _la===347) {
				{
				{
				this.state = 1666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1663;
					this.typed();
					this.state = 1664;
					this.separator();
					}
				}

				this.state = 1668;
				this.bindingTableRefValueType();
				}
				this.state = 1670;
				this.separator();
				}
			}

			this.state = 1674;
			this.bindingTableInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableInit(): BindingTableInitContext {
		let localctx: BindingTableInitContext = new BindingTableInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, GqlParser.RULE_bindingTableInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1676;
			this.match(GqlParser.EQUALS);
			this.state = 1678;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1677;
				this.separator();
				}
			}

			this.state = 1680;
			this.bindingTableExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueVarDef(): ValueVarDefContext {
		let localctx: ValueVarDefContext = new ValueVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, GqlParser.RULE_valueVarDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1682;
			this.match(GqlParser.VALUE);
			this.state = 1683;
			this.separator();
			this.state = 1684;
			this.valueVar();
			this.state = 1685;
			this.separator();
			this.state = 1686;
			this.optTypedValueInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optTypedValueInit(): OptTypedValueInitContext {
		let localctx: OptTypedValueInitContext = new OptTypedValueInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, GqlParser.RULE_optTypedValueInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 2177) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 278019) !== 0) || ((((_la - 109)) & ~0x1F) === 0 && ((1 << (_la - 109)) & 1056974873) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 1082129921) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 2164260865) !== 0) || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 1628192771) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 33769983) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 679479393) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 385) !== 0)) {
				{
				{
				this.state = 1691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1688;
					this.typed();
					this.state = 1689;
					this.separator();
					}
				}

				this.state = 1693;
				this.valueType();
				}
				this.state = 1695;
				this.separator();
				}
			}

			this.state = 1699;
			this.valueInit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueInit(): ValueInitContext {
		let localctx: ValueInitContext = new ValueInitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, GqlParser.RULE_valueInit);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1701;
			this.match(GqlParser.EQUALS);
			this.state = 1703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 1702;
				this.separator();
				}
			}

			this.state = 1705;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphExpr(): GraphExprContext {
		let localctx: GraphExprContext = new GraphExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, GqlParser.RULE_graphExpr);
		try {
			this.state = 1712;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 57, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1707;
				this.nestedGraphQuerySpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1708;
				this.objectExprPrimary();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1709;
				this.graphRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1710;
				this.objectNameOrBindingVar();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1711;
				this.currentGraph();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public currentGraph(): CurrentGraphContext {
		let localctx: CurrentGraphContext = new CurrentGraphContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, GqlParser.RULE_currentGraph);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1714;
			_la = this._input.LA(1);
			if(!(_la===103 || _la===104)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedGraphQuerySpec(): NestedGraphQuerySpecContext {
		let localctx: NestedGraphQuerySpecContext = new NestedGraphQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, GqlParser.RULE_nestedGraphQuerySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1716;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableExpr(): BindingTableExprContext {
		let localctx: BindingTableExprContext = new BindingTableExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, GqlParser.RULE_bindingTableExpr);
		try {
			this.state = 1722;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 58, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1718;
				this.nestedBindingTableQuerySpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1719;
				this.objectExprPrimary();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1720;
				this.bindingTableRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1721;
				this.objectNameOrBindingVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedBindingTableQuerySpec(): NestedBindingTableQuerySpecContext {
		let localctx: NestedBindingTableQuerySpecContext = new NestedBindingTableQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, GqlParser.RULE_nestedBindingTableQuerySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1724;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public objectExprPrimary(): ObjectExprPrimaryContext {
		let localctx: ObjectExprPrimaryContext = new ObjectExprPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, GqlParser.RULE_objectExprPrimary);
		try {
			this.state = 1737;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 59, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1726;
				this.match(GqlParser.VARIABLE);
				this.state = 1727;
				this.separator();
				this.state = 1728;
				this.valueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1730;
				this.parenthesizedValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1731;
				this.propertyRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1732;
				this.unsignedValueSpec();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1733;
				this.aggregateFunction();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1734;
				this.collectionValueConstructor();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1735;
				this.valueQueryExpr();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1736;
				this.caseExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public linearCatalogModStatment(): LinearCatalogModStatmentContext {
		let localctx: LinearCatalogModStatmentContext = new LinearCatalogModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, GqlParser.RULE_linearCatalogModStatment);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1740;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1739;
					this.simpleCatalogModStatment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1742;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 60, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleCatalogModStatment(): SimpleCatalogModStatmentContext {
		let localctx: SimpleCatalogModStatmentContext = new SimpleCatalogModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, GqlParser.RULE_simpleCatalogModStatment);
		try {
			this.state = 1746;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 101:
			case 121:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1744;
				this.primitiveCatalogModStatment();
				}
				break;
			case 84:
			case 199:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1745;
				this.callCatalogModProcedureStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveCatalogModStatment(): PrimitiveCatalogModStatmentContext {
		let localctx: PrimitiveCatalogModStatmentContext = new PrimitiveCatalogModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, GqlParser.RULE_primitiveCatalogModStatment);
		try {
			this.state = 1754;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 62, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1748;
				this.createSchemeStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1749;
				this.createGraphStatment();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1750;
				this.createGraphTypeStatment();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1751;
				this.dropSchemeStatment();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1752;
				this.dropGraphStatment();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1753;
				this.dropGraphTypeStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createSchemeStatment(): CreateSchemeStatmentContext {
		let localctx: CreateSchemeStatmentContext = new CreateSchemeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, GqlParser.RULE_createSchemeStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1756;
			this.match(GqlParser.CREATE);
			this.state = 1757;
			this.separator();
			this.state = 1758;
			this.match(GqlParser.SCHEMA);
			this.state = 1762;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 63, this._ctx) ) {
			case 1:
				{
				this.state = 1759;
				this.separator();
				this.state = 1760;
				this.match(GqlParser.IF_NOT_EXISTS);
				}
				break;
			}
			this.state = 1764;
			this.separator();
			this.state = 1765;
			this.catalogSchemaParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropSchemeStatment(): DropSchemeStatmentContext {
		let localctx: DropSchemeStatmentContext = new DropSchemeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, GqlParser.RULE_dropSchemeStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1767;
			this.match(GqlParser.DROP);
			this.state = 1768;
			this.separator();
			this.state = 1769;
			this.match(GqlParser.SCHEMA);
			this.state = 1773;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 64, this._ctx) ) {
			case 1:
				{
				this.state = 1770;
				this.separator();
				this.state = 1771;
				this.match(GqlParser.IF_EXISTS);
				}
				break;
			}
			this.state = 1775;
			this.separator();
			this.state = 1776;
			this.catalogSchemaParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createGraphStatment(): CreateGraphStatmentContext {
		let localctx: CreateGraphStatmentContext = new CreateGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, GqlParser.RULE_createGraphStatment);
		try {
			this.state = 1780;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 65, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1778;
				this.createOnlyGraphStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1779;
				this.createOrReplaceGraphStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createOnlyGraphStatment(): CreateOnlyGraphStatmentContext {
		let localctx: CreateOnlyGraphStatmentContext = new CreateOnlyGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, GqlParser.RULE_createOnlyGraphStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1782;
			this.match(GqlParser.CREATE);
			this.state = 1783;
			this.separator();
			this.state = 1786;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 1784;
				this.match(GqlParser.PROPERTY);
				this.state = 1785;
				this.separator();
				}
			}

			this.state = 1788;
			this.match(GqlParser.GRAPH);
			this.state = 1792;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 67, this._ctx) ) {
			case 1:
				{
				this.state = 1789;
				this.separator();
				this.state = 1790;
				this.match(GqlParser.IF_NOT_EXISTS);
				}
				break;
			}
			this.state = 1794;
			this.separator();
			this.state = 1795;
			this.catalogGraphParentAndName();
			this.state = 1796;
			this.separator();
			this.state = 1799;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
				{
				this.state = 1797;
				this.openGraphType();
				}
				break;
			case 33:
			case 35:
			case 40:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 170:
			case 248:
			case 386:
			case 387:
			case 395:
				{
				this.state = 1798;
				this.ofGraphType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1804;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 69, this._ctx) ) {
			case 1:
				{
				this.state = 1801;
				this.separator();
				this.state = 1802;
				this.graphSource();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createOrReplaceGraphStatment(): CreateOrReplaceGraphStatmentContext {
		let localctx: CreateOrReplaceGraphStatmentContext = new CreateOrReplaceGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, GqlParser.RULE_createOrReplaceGraphStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1806;
			this.match(GqlParser.CREATE);
			this.state = 1807;
			this.separator();
			this.state = 1808;
			this.match(GqlParser.OR);
			this.state = 1809;
			this.separator();
			this.state = 1810;
			this.match(GqlParser.REPLACE);
			this.state = 1814;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 70, this._ctx) ) {
			case 1:
				{
				this.state = 1811;
				this.separator();
				this.state = 1812;
				this.match(GqlParser.PROPERTY);
				}
				break;
			}
			this.state = 1816;
			this.separator();
			this.state = 1817;
			this.match(GqlParser.GRAPH);
			this.state = 1818;
			this.separator();
			this.state = 1819;
			this.catalogGraphParentAndName();
			this.state = 1820;
			this.separator();
			this.state = 1823;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
				{
				this.state = 1821;
				this.openGraphType();
				}
				break;
			case 33:
			case 35:
			case 40:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 170:
			case 248:
			case 386:
			case 387:
			case 395:
				{
				this.state = 1822;
				this.ofGraphType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1828;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 72, this._ctx) ) {
			case 1:
				{
				this.state = 1825;
				this.separator();
				this.state = 1826;
				this.graphSource();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openGraphType(): OpenGraphTypeContext {
		let localctx: OpenGraphTypeContext = new OpenGraphTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, GqlParser.RULE_openGraphType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1830;
			this.match(GqlParser.OPEN);
			this.state = 1839;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 74, this._ctx) ) {
			case 1:
				{
				this.state = 1834;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 73, this._ctx) ) {
				case 1:
					{
					this.state = 1831;
					this.separator();
					this.state = 1832;
					this.match(GqlParser.PROPERTY);
					}
					break;
				}
				this.state = 1836;
				this.separator();
				this.state = 1837;
				this.match(GqlParser.GRAPH);
				}
				break;
			}
			this.state = 1841;
			this.separator();
			this.state = 1842;
			this.match(GqlParser.TYPE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ofGraphType(): OfGraphTypeContext {
		let localctx: OfGraphTypeContext = new OfGraphTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, GqlParser.RULE_ofGraphType);
		let _la: number;
		try {
			this.state = 1853;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 77, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1844;
				this.graphTypeLikeGraph();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1845;
					this.typed();
					}
				}

				this.state = 1848;
				this.graphTypeRef();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===33 || _la===248) {
					{
					this.state = 1849;
					this.typed();
					}
				}

				this.state = 1852;
				this.nestedGraphTypeSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeLikeGraph(): GraphTypeLikeGraphContext {
		let localctx: GraphTypeLikeGraphContext = new GraphTypeLikeGraphContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, GqlParser.RULE_graphTypeLikeGraph);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1855;
			this.match(GqlParser.LIKE);
			this.state = 1856;
			this.separator();
			this.state = 1857;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphSource(): GraphSourceContext {
		let localctx: GraphSourceContext = new GraphSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, GqlParser.RULE_graphSource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1859;
			this.match(GqlParser.AS);
			this.state = 1860;
			this.separator();
			this.state = 1861;
			this.match(GqlParser.COPY);
			this.state = 1862;
			this.separator();
			this.state = 1863;
			this.match(GqlParser.OF);
			this.state = 1864;
			this.separator();
			this.state = 1865;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropGraphStatment(): DropGraphStatmentContext {
		let localctx: DropGraphStatmentContext = new DropGraphStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, GqlParser.RULE_dropGraphStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1867;
			this.match(GqlParser.DROP);
			this.state = 1871;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 78, this._ctx) ) {
			case 1:
				{
				this.state = 1868;
				this.separator();
				this.state = 1869;
				this.match(GqlParser.PROPERTY);
				}
				break;
			}
			this.state = 1873;
			this.separator();
			this.state = 1874;
			this.match(GqlParser.GRAPH);
			this.state = 1878;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 79, this._ctx) ) {
			case 1:
				{
				this.state = 1875;
				this.separator();
				this.state = 1876;
				this.match(GqlParser.IF_EXISTS);
				}
				break;
			}
			this.state = 1880;
			this.separator();
			this.state = 1881;
			this.catalogGraphParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createGraphTypeStatment(): CreateGraphTypeStatmentContext {
		let localctx: CreateGraphTypeStatmentContext = new CreateGraphTypeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, GqlParser.RULE_createGraphTypeStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1883;
			this.match(GqlParser.CREATE);
			this.state = 1884;
			this.separator();
			this.state = 1910;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				{
				{
				this.state = 1887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 1885;
					this.match(GqlParser.PROPERTY);
					this.state = 1886;
					this.separator();
					}
				}

				this.state = 1889;
				this.match(GqlParser.GRAPH);
				this.state = 1890;
				this.separator();
				this.state = 1891;
				this.match(GqlParser.TYPE);
				this.state = 1895;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 81, this._ctx) ) {
				case 1:
					{
					this.state = 1892;
					this.separator();
					this.state = 1893;
					this.match(GqlParser.IF_NOT_EXISTS);
					}
					break;
				}
				}
				}
				break;
			case 200:
				{
				{
				this.state = 1897;
				this.match(GqlParser.OR);
				this.state = 1898;
				this.separator();
				this.state = 1899;
				this.match(GqlParser.REPLACE);
				this.state = 1903;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 82, this._ctx) ) {
				case 1:
					{
					this.state = 1900;
					this.separator();
					this.state = 1901;
					this.match(GqlParser.PROPERTY);
					}
					break;
				}
				this.state = 1905;
				this.separator();
				this.state = 1906;
				this.match(GqlParser.GRAPH);
				this.state = 1907;
				this.separator();
				this.state = 1908;
				this.match(GqlParser.TYPE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1912;
			this.separator();
			this.state = 1913;
			this.catalogGraphTypeParentAndName();
			this.state = 1914;
			this.separator();
			this.state = 1915;
			this.graphTypeSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeSource(): GraphTypeSourceContext {
		let localctx: GraphTypeSourceContext = new GraphTypeSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, GqlParser.RULE_graphTypeSource);
		let _la: number;
		try {
			this.state = 1928;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 86, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===67) {
					{
					this.state = 1917;
					this.match(GqlParser.AS);
					this.state = 1918;
					this.separator();
					}
				}

				this.state = 1921;
				this.copyOfGraphType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1922;
				this.graphTypeLikeGraph();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===67) {
					{
					this.state = 1923;
					this.match(GqlParser.AS);
					this.state = 1924;
					this.separator();
					}
				}

				this.state = 1927;
				this.nestedGraphTypeSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public copyOfGraphType(): CopyOfGraphTypeContext {
		let localctx: CopyOfGraphTypeContext = new CopyOfGraphTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, GqlParser.RULE_copyOfGraphType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1930;
			this.match(GqlParser.COPY);
			this.state = 1931;
			this.separator();
			this.state = 1932;
			this.match(GqlParser.OF);
			this.state = 1933;
			this.separator();
			this.state = 1936;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 386:
			case 387:
			case 395:
				{
				this.state = 1934;
				this.graphTypeRef();
				}
				break;
			case -1:
			case 40:
			case 41:
			case 47:
			case 71:
			case 84:
			case 95:
			case 101:
			case 118:
			case 121:
			case 131:
			case 132:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 218:
			case 219:
			case 220:
			case 225:
			case 226:
			case 227:
			case 231:
			case 235:
			case 261:
			case 263:
			case 312:
			case 323:
			case 339:
			case 347:
			case 388:
			case 389:
			case 390:
				{
				this.state = 1935;
				this.externalObjectRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropGraphTypeStatment(): DropGraphTypeStatmentContext {
		let localctx: DropGraphTypeStatmentContext = new DropGraphTypeStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, GqlParser.RULE_dropGraphTypeStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1938;
			this.match(GqlParser.DROP);
			this.state = 1942;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 88, this._ctx) ) {
			case 1:
				{
				this.state = 1939;
				this.separator();
				this.state = 1940;
				this.match(GqlParser.PROPERTY);
				}
				break;
			}
			this.state = 1944;
			this.separator();
			this.state = 1945;
			this.match(GqlParser.GRAPH);
			this.state = 1946;
			this.separator();
			this.state = 1947;
			this.match(GqlParser.TYPE);
			this.state = 1951;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 89, this._ctx) ) {
			case 1:
				{
				this.state = 1948;
				this.separator();
				this.state = 1949;
				this.match(GqlParser.IF_EXISTS);
				}
				break;
			}
			this.state = 1953;
			this.separator();
			this.state = 1954;
			this.catalogGraphTypeParentAndName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callCatalogModProcedureStatment(): CallCatalogModProcedureStatmentContext {
		let localctx: CallCatalogModProcedureStatmentContext = new CallCatalogModProcedureStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, GqlParser.RULE_callCatalogModProcedureStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1956;
			this.callProcedureStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public linearDataModStatment(): LinearDataModStatmentContext {
		let localctx: LinearDataModStatmentContext = new LinearDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, GqlParser.RULE_linearDataModStatment);
		try {
			this.state = 1960;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 261:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1958;
				this.focusedLinearDataModStatment();
				}
				break;
			case 40:
			case 84:
			case 118:
			case 131:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 227:
			case 231:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1959;
				this.ambientLinearDataModStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearDataModStatment(): FocusedLinearDataModStatmentContext {
		let localctx: FocusedLinearDataModStatmentContext = new FocusedLinearDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, GqlParser.RULE_focusedLinearDataModStatment);
		try {
			this.state = 1964;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 91, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1962;
				this.focusedLinearDataModStatmentBody();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1963;
				this.focusedNestedDataModProcedureSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearDataModStatmentBody(): FocusedLinearDataModStatmentBodyContext {
		let localctx: FocusedLinearDataModStatmentBodyContext = new FocusedLinearDataModStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, GqlParser.RULE_focusedLinearDataModStatmentBody);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1966;
			this.useGraphClause();
			this.state = 1967;
			this.separator();
			this.state = 1968;
			this.simpleLinearDataAccessingStatment();
			this.state = 1972;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 92, this._ctx) ) {
			case 1:
				{
				this.state = 1969;
				this.separator();
				this.state = 1970;
				this.primitiveResultStatment();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedNestedDataModProcedureSpec(): FocusedNestedDataModProcedureSpecContext {
		let localctx: FocusedNestedDataModProcedureSpecContext = new FocusedNestedDataModProcedureSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, GqlParser.RULE_focusedNestedDataModProcedureSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1974;
			this.useGraphClause();
			this.state = 1975;
			this.separator();
			this.state = 1976;
			this.nestedDataModProcedureSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ambientLinearDataModStatment(): AmbientLinearDataModStatmentContext {
		let localctx: AmbientLinearDataModStatmentContext = new AmbientLinearDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, GqlParser.RULE_ambientLinearDataModStatment);
		try {
			this.state = 1980;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 84:
			case 118:
			case 131:
			case 140:
			case 150:
			case 169:
			case 171:
			case 182:
			case 189:
			case 197:
			case 199:
			case 201:
			case 216:
			case 227:
			case 231:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1978;
				this.ambientLinearDataModStatmentBody();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1979;
				this.nestedDataModProcedureSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ambientLinearDataModStatmentBody(): AmbientLinearDataModStatmentBodyContext {
		let localctx: AmbientLinearDataModStatmentBodyContext = new AmbientLinearDataModStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, GqlParser.RULE_ambientLinearDataModStatmentBody);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1982;
			this.simpleLinearDataAccessingStatment();
			this.state = 1986;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 94, this._ctx) ) {
			case 1:
				{
				this.state = 1983;
				this.separator();
				this.state = 1984;
				this.primitiveResultStatment();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleLinearDataAccessingStatment(): SimpleLinearDataAccessingStatmentContext {
		let localctx: SimpleLinearDataAccessingStatmentContext = new SimpleLinearDataAccessingStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, GqlParser.RULE_simpleLinearDataAccessingStatment);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1989;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1988;
					this.simpleDataAccessingStatment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1991;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleDataAccessingStatment(): SimpleDataAccessingStatmentContext {
		let localctx: SimpleDataAccessingStatmentContext = new SimpleDataAccessingStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, GqlParser.RULE_simpleDataAccessingStatment);
		try {
			this.state = 1995;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 96, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1993;
				this.simpleQueryStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1994;
				this.simpleDataModStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleDataModStatment(): SimpleDataModStatmentContext {
		let localctx: SimpleDataModStatmentContext = new SimpleDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, GqlParser.RULE_simpleDataModStatment);
		try {
			this.state = 1999;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 118:
			case 150:
			case 189:
			case 216:
			case 227:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1997;
				this.primitiveDataModStatment();
				}
				break;
			case 84:
			case 199:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1998;
				this.callDataModProcedureStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveDataModStatment(): PrimitiveDataModStatmentContext {
		let localctx: PrimitiveDataModStatmentContext = new PrimitiveDataModStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, GqlParser.RULE_primitiveDataModStatment);
		try {
			this.state = 2005;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 150:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2001;
				this.insertStatment();
				}
				break;
			case 227:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2002;
				this.setStatment();
				}
				break;
			case 216:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2003;
				this.removeStatment();
				}
				break;
			case 118:
			case 189:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2004;
				this.deleteStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertStatment(): InsertStatmentContext {
		let localctx: InsertStatmentContext = new InsertStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, GqlParser.RULE_insertStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2007;
			this.match(GqlParser.INSERT);
			this.state = 2008;
			this.separator();
			this.state = 2009;
			this.insertGraphPattern();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setStatment(): SetStatmentContext {
		let localctx: SetStatmentContext = new SetStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, GqlParser.RULE_setStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2011;
			this.match(GqlParser.SET);
			this.state = 2012;
			this.separator();
			this.state = 2013;
			this.setItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setItemList(): SetItemListContext {
		let localctx: SetItemListContext = new SetItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, GqlParser.RULE_setItemList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2015;
			this.setItem();
			this.state = 2017;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2016;
				this.separator();
				}
			}

			this.state = 2027;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2019;
				this.match(GqlParser.COMMA);
				this.state = 2021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2020;
					this.separator();
					}
				}

				this.state = 2023;
				this.setItem();
				this.state = 2025;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 101, this._ctx) ) {
				case 1:
					{
					this.state = 2024;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 2029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setItem(): SetItemContext {
		let localctx: SetItemContext = new SetItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, GqlParser.RULE_setItem);
		try {
			this.state = 2034;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2031;
				this.setPropertyItem();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2032;
				this.setAllPropertiesItem();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2033;
				this.setLabelItem();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setPropertyItem(): SetPropertyItemContext {
		let localctx: SetPropertyItemContext = new SetPropertyItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, GqlParser.RULE_setPropertyItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2036;
			this.bindingVarRef();
			this.state = 2038;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2037;
				this.separator();
				}
			}

			this.state = 2040;
			this.match(GqlParser.PERIOD);
			this.state = 2042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2041;
				this.separator();
				}
			}

			this.state = 2044;
			this.propertyName();
			this.state = 2046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2045;
				this.separator();
				}
			}

			this.state = 2048;
			this.match(GqlParser.EQUALS);
			this.state = 2050;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2049;
				this.separator();
				}
			}

			this.state = 2052;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setAllPropertiesItem(): SetAllPropertiesItemContext {
		let localctx: SetAllPropertiesItemContext = new SetAllPropertiesItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, GqlParser.RULE_setAllPropertiesItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2054;
			this.bindingVarRef();
			this.state = 2056;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2055;
				this.separator();
				}
			}

			this.state = 2058;
			this.match(GqlParser.EQUALS);
			this.state = 2059;
			this.separator();
			this.state = 2060;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 2064;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 109, this._ctx) ) {
			case 1:
				{
				this.state = 2061;
				this.separator();
				this.state = 2062;
				this.propertyKeyValuePairList();
				}
				break;
			}
			this.state = 2067;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2066;
				this.separator();
				}
			}

			this.state = 2069;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setLabelItem(): SetLabelItemContext {
		let localctx: SetLabelItemContext = new SetLabelItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, GqlParser.RULE_setLabelItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2071;
			this.bindingVarRef();
			this.state = 2072;
			this.separator();
			this.state = 2073;
			this.isOrColon();
			this.state = 2074;
			this.labelSetSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelSetSpec(): LabelSetSpecContext {
		let localctx: LabelSetSpecContext = new LabelSetSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, GqlParser.RULE_labelSetSpec);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2076;
			this.labelName();
			this.state = 2087;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 113, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2078;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2077;
						this.separator();
						}
					}

					this.state = 2080;
					this.match(GqlParser.AMPERSAND);
					this.state = 2082;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2081;
						this.separator();
						}
					}

					this.state = 2084;
					this.labelName();
					}
					}
				}
				this.state = 2089;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 113, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeStatment(): RemoveStatmentContext {
		let localctx: RemoveStatmentContext = new RemoveStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, GqlParser.RULE_removeStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2090;
			this.match(GqlParser.REMOVE);
			this.state = 2091;
			this.separator();
			this.state = 2092;
			this.removeItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeItemList(): RemoveItemListContext {
		let localctx: RemoveItemListContext = new RemoveItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, GqlParser.RULE_removeItemList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2094;
			this.removeItem();
			this.state = 2095;
			this.separator();
			this.state = 2104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2096;
				this.match(GqlParser.COMMA);
				this.state = 2098;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2097;
					this.separator();
					}
				}

				this.state = 2100;
				this.removeItem();
				this.state = 2102;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 115, this._ctx) ) {
				case 1:
					{
					this.state = 2101;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 2106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeItem(): RemoveItemContext {
		let localctx: RemoveItemContext = new RemoveItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, GqlParser.RULE_removeItem);
		try {
			this.state = 2110;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 117, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2108;
				this.removePropertyItem();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2109;
				this.removeLabelItem();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removePropertyItem(): RemovePropertyItemContext {
		let localctx: RemovePropertyItemContext = new RemovePropertyItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, GqlParser.RULE_removePropertyItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2112;
			this.bindingVarRef();
			this.state = 2113;
			this.match(GqlParser.PERIOD);
			this.state = 2114;
			this.propertyName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removeLabelItem(): RemoveLabelItemContext {
		let localctx: RemoveLabelItemContext = new RemoveLabelItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, GqlParser.RULE_removeLabelItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2116;
			this.bindingVarRef();
			this.state = 2117;
			this.separator();
			this.state = 2118;
			this.isOrColon();
			this.state = 2119;
			this.labelSetSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteStatment(): DeleteStatmentContext {
		let localctx: DeleteStatmentContext = new DeleteStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, GqlParser.RULE_deleteStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2121;
			_la = this._input.LA(1);
			if(!(_la===118 || _la===189)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2122;
			this.separator();
			this.state = 2123;
			this.match(GqlParser.DELETE);
			this.state = 2124;
			this.separator();
			this.state = 2125;
			this.deleteItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteItemList(): DeleteItemListContext {
		let localctx: DeleteItemListContext = new DeleteItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, GqlParser.RULE_deleteItemList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2127;
			this.deleteItem();
			this.state = 2129;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2128;
				this.separator();
				}
			}

			this.state = 2139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2131;
				this.match(GqlParser.COMMA);
				this.state = 2133;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2132;
					this.separator();
					}
				}

				this.state = 2135;
				this.deleteItem();
				this.state = 2137;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 120, this._ctx) ) {
				case 1:
					{
					this.state = 2136;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 2141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteItem(): DeleteItemContext {
		let localctx: DeleteItemContext = new DeleteItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, GqlParser.RULE_deleteItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2143;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callDataModProcedureStatment(): CallDataModProcedureStatmentContext {
		let localctx: CallDataModProcedureStatmentContext = new CallDataModProcedureStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, GqlParser.RULE_callDataModProcedureStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2145;
			this.callProcedureStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compositeQueryStatment(): CompositeQueryStatmentContext {
		let localctx: CompositeQueryStatmentContext = new CompositeQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, GqlParser.RULE_compositeQueryStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2147;
			this.compositeQueryExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public compositeQueryExpr(): CompositeQueryExprContext;
	public compositeQueryExpr(_p: number): CompositeQueryExprContext;
	// @RuleVersion(0)
	public compositeQueryExpr(_p?: number): CompositeQueryExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: CompositeQueryExprContext = new CompositeQueryExprContext(this, this._ctx, _parentState);
		let _prevctx: CompositeQueryExprContext = localctx;
		let _startState: number = 190;
		this.enterRecursionRule(localctx, 190, GqlParser.RULE_compositeQueryExpr, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			this.state = 2150;
			this.compositeQueryPrimary();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2160;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 122, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new CompositeQueryExprContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_compositeQueryExpr);
					this.state = 2152;
					if (!(this.precpred(this._ctx, 2))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
					}
					this.state = 2153;
					this.separator();
					this.state = 2154;
					this.queryConjunction();
					this.state = 2155;
					this.separator();
					this.state = 2156;
					this.compositeQueryPrimary();
					}
					}
				}
				this.state = 2162;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 122, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryConjunction(): QueryConjunctionContext {
		let localctx: QueryConjunctionContext = new QueryConjunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 192, GqlParser.RULE_queryConjunction);
		try {
			this.state = 2165;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 127:
			case 165:
			case 257:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2163;
				this.setOperator();
				}
				break;
			case 202:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2164;
				this.match(GqlParser.OTHERWISE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setOperator(): SetOperatorContext {
		let localctx: SetOperatorContext = new SetOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, GqlParser.RULE_setOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2167;
			_la = this._input.LA(1);
			if(!(_la===127 || _la===165 || _la===257)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2168;
			this.separator();
			this.state = 2169;
			this.setQuantifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compositeQueryPrimary(): CompositeQueryPrimaryContext {
		let localctx: CompositeQueryPrimaryContext = new CompositeQueryPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, GqlParser.RULE_compositeQueryPrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2171;
			this.linearQueryStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public linearQueryStatment(): LinearQueryStatmentContext {
		let localctx: LinearQueryStatmentContext = new LinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, GqlParser.RULE_linearQueryStatment);
		try {
			this.state = 2175;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 225:
			case 261:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2173;
				this.focusedLinearQueryStatment();
				}
				break;
			case 40:
			case 84:
			case 131:
			case 132:
			case 140:
			case 169:
			case 171:
			case 182:
			case 197:
			case 199:
			case 201:
			case 219:
			case 231:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2174;
				this.ambientLinearQueryStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearQueryStatment(): FocusedLinearQueryStatmentContext {
		let localctx: FocusedLinearQueryStatmentContext = new FocusedLinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 200, GqlParser.RULE_focusedLinearQueryStatment);
		try {
			let _alt: number;
			this.state = 2189;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 126, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2180;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2177;
						this.focusedLinearQueryStatmentPart();
						this.state = 2178;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2182;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 125, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2184;
				this.focusedLinearQueryAndPrimitiveResultStatmentPart();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2186;
				this.focusedPrimitiveResultStatment();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2187;
				this.focusedNestedQuerySpec();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2188;
				this.selectStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearQueryStatmentPart(): FocusedLinearQueryStatmentPartContext {
		let localctx: FocusedLinearQueryStatmentPartContext = new FocusedLinearQueryStatmentPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, GqlParser.RULE_focusedLinearQueryStatmentPart);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2191;
			this.useGraphClause();
			this.state = 2192;
			this.separator();
			this.state = 2193;
			this.simpleLinearQueryStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedLinearQueryAndPrimitiveResultStatmentPart(): FocusedLinearQueryAndPrimitiveResultStatmentPartContext {
		let localctx: FocusedLinearQueryAndPrimitiveResultStatmentPartContext = new FocusedLinearQueryAndPrimitiveResultStatmentPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2195;
			this.useGraphClause();
			this.state = 2196;
			this.separator();
			this.state = 2197;
			this.simpleLinearQueryStatment();
			this.state = 2198;
			this.separator();
			this.state = 2199;
			this.primitiveResultStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedPrimitiveResultStatment(): FocusedPrimitiveResultStatmentContext {
		let localctx: FocusedPrimitiveResultStatmentContext = new FocusedPrimitiveResultStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, GqlParser.RULE_focusedPrimitiveResultStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2201;
			this.useGraphClause();
			this.state = 2202;
			this.separator();
			this.state = 2203;
			this.primitiveResultStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public focusedNestedQuerySpec(): FocusedNestedQuerySpecContext {
		let localctx: FocusedNestedQuerySpecContext = new FocusedNestedQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, GqlParser.RULE_focusedNestedQuerySpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2205;
			this.useGraphClause();
			this.state = 2206;
			this.separator();
			this.state = 2207;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ambientLinearQueryStatment(): AmbientLinearQueryStatmentContext {
		let localctx: AmbientLinearQueryStatmentContext = new AmbientLinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, GqlParser.RULE_ambientLinearQueryStatment);
		let _la: number;
		try {
			this.state = 2216;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 84:
			case 131:
			case 132:
			case 140:
			case 169:
			case 171:
			case 182:
			case 197:
			case 199:
			case 201:
			case 219:
			case 231:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===84 || _la===131 || _la===140 || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & 1342185477) !== 0) || _la===201 || _la===231) {
					{
					this.state = 2209;
					this.simpleLinearQueryStatment();
					this.state = 2210;
					this.separator();
					}
				}

				this.state = 2214;
				this.primitiveResultStatment();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2215;
				this.nestedQuerySpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		let localctx: SimpleLinearQueryStatmentContext = new SimpleLinearQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, GqlParser.RULE_simpleLinearQueryStatment);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2218;
			this.simpleQueryStatment();
			this.state = 2224;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2219;
					this.separator();
					this.state = 2220;
					this.simpleQueryStatment();
					}
					}
				}
				this.state = 2226;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleQueryStatment(): SimpleQueryStatmentContext {
		let localctx: SimpleQueryStatmentContext = new SimpleQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 214, GqlParser.RULE_simpleQueryStatment);
		try {
			this.state = 2229;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 130, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2227;
				this.primitiveQueryStatment();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2228;
				this.callQueryStatment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveQueryStatment(): PrimitiveQueryStatmentContext {
		let localctx: PrimitiveQueryStatmentContext = new PrimitiveQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, GqlParser.RULE_primitiveQueryStatment);
		try {
			this.state = 2236;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 182:
			case 199:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2231;
				this.matchStatment();
				}
				break;
			case 169:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2232;
				this.letStatment();
				}
				break;
			case 140:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2233;
				this.forStatment();
				}
				break;
			case 131:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2234;
				this.filterStatment();
				}
				break;
			case 171:
			case 197:
			case 201:
			case 231:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2235;
				this.orderByAndPageStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public matchStatment(): MatchStatmentContext {
		let localctx: MatchStatmentContext = new MatchStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 218, GqlParser.RULE_matchStatment);
		try {
			this.state = 2240;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 182:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2238;
				this.simpleMatchStatment();
				}
				break;
			case 199:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2239;
				this.optionalMatchStatment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleMatchStatment(): SimpleMatchStatmentContext {
		let localctx: SimpleMatchStatmentContext = new SimpleMatchStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, GqlParser.RULE_simpleMatchStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2242;
			this.match(GqlParser.MATCH);
			this.state = 2243;
			this.separator();
			this.state = 2244;
			this.graphPatternBindingTable();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionalMatchStatment(): OptionalMatchStatmentContext {
		let localctx: OptionalMatchStatmentContext = new OptionalMatchStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, GqlParser.RULE_optionalMatchStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2246;
			this.match(GqlParser.OPTIONAL);
			this.state = 2247;
			this.separator();
			this.state = 2248;
			this.optionalOperand();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionalOperand(): OptionalOperandContext {
		let localctx: OptionalOperandContext = new OptionalOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, GqlParser.RULE_optionalOperand);
		let _la: number;
		try {
			this.state = 2271;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 182:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2250;
				this.simpleMatchStatment();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2251;
				this.match(GqlParser.LEFT_BRACE);
				this.state = 2253;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 133, this._ctx) ) {
				case 1:
					{
					this.state = 2252;
					this.separator();
					}
					break;
				}
				this.state = 2255;
				this.matchStatmentBlock();
				this.state = 2257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2256;
					this.separator();
					}
				}

				this.state = 2259;
				this.match(GqlParser.RIGHT_BRACE);
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2261;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 2263;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 135, this._ctx) ) {
				case 1:
					{
					this.state = 2262;
					this.separator();
					}
					break;
				}
				this.state = 2265;
				this.matchStatmentBlock();
				this.state = 2267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2266;
					this.separator();
					}
				}

				this.state = 2269;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public matchStatmentBlock(): MatchStatmentBlockContext {
		let localctx: MatchStatmentBlockContext = new MatchStatmentBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, GqlParser.RULE_matchStatmentBlock);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2277;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2274;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2273;
						this.separator();
						}
					}

					this.state = 2276;
					this.matchStatment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2279;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 139, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callQueryStatment(): CallQueryStatmentContext {
		let localctx: CallQueryStatmentContext = new CallQueryStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, GqlParser.RULE_callQueryStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2281;
			this.callProcedureStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterStatment(): FilterStatmentContext {
		let localctx: FilterStatmentContext = new FilterStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, GqlParser.RULE_filterStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2283;
			this.match(GqlParser.FILTER);
			this.state = 2284;
			this.separator();
			this.state = 2287;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 268:
				{
				this.state = 2285;
				this.whereClause();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 63:
			case 70:
			case 72:
			case 73:
			case 80:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 102:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 114:
			case 122:
			case 123:
			case 124:
			case 128:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 175:
			case 176:
			case 177:
			case 179:
			case 180:
			case 181:
			case 183:
			case 184:
			case 186:
			case 190:
			case 191:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 215:
			case 221:
			case 222:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 246:
			case 247:
			case 258:
			case 260:
			case 263:
			case 274:
			case 275:
			case 312:
			case 323:
			case 339:
			case 347:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				{
				this.state = 2286;
				this.searchCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letStatment(): LetStatmentContext {
		let localctx: LetStatmentContext = new LetStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, GqlParser.RULE_letStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2289;
			this.match(GqlParser.LET);
			this.state = 2290;
			this.separator();
			this.state = 2291;
			this.letVarDefList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letVarDefList(): LetVarDefListContext {
		let localctx: LetVarDefListContext = new LetVarDefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, GqlParser.RULE_letVarDefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2293;
			this.letVarDef();
			this.state = 2295;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2294;
				this.separator();
				}
			}

			this.state = 2305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2297;
				this.match(GqlParser.COMMA);
				this.state = 2299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2298;
					this.separator();
					}
				}

				this.state = 2301;
				this.letVarDef();
				this.state = 2303;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 143, this._ctx) ) {
				case 1:
					{
					this.state = 2302;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 2307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letVarDef(): LetVarDefContext {
		let localctx: LetVarDefContext = new LetVarDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, GqlParser.RULE_letVarDef);
		let _la: number;
		try {
			this.state = 2320;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 263:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2309;
				this.valueVarDef();
				}
				break;
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2310;
				this.valueVar();
				this.state = 2312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2311;
					this.separator();
					}
				}

				this.state = 2314;
				this.match(GqlParser.EQUALS);
				this.state = 2316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2315;
					this.separator();
					}
				}

				this.state = 2318;
				this.valueExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forStatment(): ForStatmentContext {
		let localctx: ForStatmentContext = new ForStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, GqlParser.RULE_forStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2322;
			this.match(GqlParser.FOR);
			this.state = 2323;
			this.separator();
			this.state = 2324;
			this.forItem();
			this.state = 2326;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 148, this._ctx) ) {
			case 1:
				{
				this.state = 2325;
				this.separator();
				}
				break;
			}
			this.state = 2329;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===269) {
				{
				this.state = 2328;
				this.forOrdinalityOrOffset();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forItem(): ForItemContext {
		let localctx: ForItemContext = new ForItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, GqlParser.RULE_forItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2331;
			this.forItemAlias();
			this.state = 2332;
			this.separator();
			this.state = 2333;
			this.listValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forItemAlias(): ForItemAliasContext {
		let localctx: ForItemAliasContext = new ForItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, GqlParser.RULE_forItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2335;
			this.identifier();
			this.state = 2336;
			this.separator();
			this.state = 2337;
			this.match(GqlParser.IN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public forOrdinalityOrOffset(): ForOrdinalityOrOffsetContext {
		let localctx: ForOrdinalityOrOffsetContext = new ForOrdinalityOrOffsetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, GqlParser.RULE_forOrdinalityOrOffset);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2339;
			this.match(GqlParser.WITH);
			this.state = 2340;
			this.separator();
			this.state = 2341;
			_la = this._input.LA(1);
			if(!(_la===197 || _la===338)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2342;
			this.separator();
			this.state = 2343;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderByAndPageStatment(): OrderByAndPageStatmentContext {
		let localctx: OrderByAndPageStatmentContext = new OrderByAndPageStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, GqlParser.RULE_orderByAndPageStatment);
		try {
			this.state = 2363;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 201:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2345;
				this.orderByClause();
				this.state = 2349;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 150, this._ctx) ) {
				case 1:
					{
					this.state = 2346;
					this.separator();
					this.state = 2347;
					this.offsetClause();
					}
					break;
				}
				this.state = 2354;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 151, this._ctx) ) {
				case 1:
					{
					this.state = 2351;
					this.separator();
					this.state = 2352;
					this.limitClause();
					}
					break;
				}
				}
				break;
			case 197:
			case 231:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2356;
				this.offsetClause();
				this.state = 2360;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 152, this._ctx) ) {
				case 1:
					{
					this.state = 2357;
					this.separator();
					this.state = 2358;
					this.limitClause();
					}
					break;
				}
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2362;
				this.limitClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		let localctx: PrimitiveResultStatmentContext = new PrimitiveResultStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, GqlParser.RULE_primitiveResultStatment);
		try {
			this.state = 2372;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 219:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2365;
				this.returnStatment();
				this.state = 2369;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 154, this._ctx) ) {
				case 1:
					{
					this.state = 2366;
					this.separator();
					this.state = 2367;
					this.orderByAndPageStatment();
					}
					break;
				}
				}
				break;
			case 132:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2371;
				this.match(GqlParser.FINISH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnStatment(): ReturnStatmentContext {
		let localctx: ReturnStatmentContext = new ReturnStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 250, GqlParser.RULE_returnStatment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2374;
			this.match(GqlParser.RETURN);
			this.state = 2375;
			this.separator();
			this.state = 2376;
			this.returnStatmentBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnStatmentBody(): ReturnStatmentBodyContext {
		let localctx: ReturnStatmentBodyContext = new ReturnStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, GqlParser.RULE_returnStatmentBody);
		let _la: number;
		try {
			this.state = 2396;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 30:
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 62:
			case 63:
			case 70:
			case 72:
			case 73:
			case 80:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 102:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 114:
			case 119:
			case 122:
			case 123:
			case 124:
			case 128:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 175:
			case 176:
			case 177:
			case 179:
			case 180:
			case 181:
			case 183:
			case 184:
			case 186:
			case 190:
			case 191:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 215:
			case 221:
			case 222:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 246:
			case 247:
			case 258:
			case 260:
			case 263:
			case 274:
			case 275:
			case 312:
			case 323:
			case 339:
			case 347:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2381;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===62 || _la===119) {
					{
					this.state = 2378;
					this.setQuantifier();
					this.state = 2379;
					this.separator();
					}
				}

				this.state = 2385;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 30:
					{
					this.state = 2383;
					this.match(GqlParser.ASTERISK);
					}
					break;
				case 35:
				case 40:
				case 42:
				case 44:
				case 56:
				case 60:
				case 61:
				case 63:
				case 70:
				case 72:
				case 73:
				case 80:
				case 82:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 93:
				case 94:
				case 97:
				case 98:
				case 99:
				case 100:
				case 102:
				case 106:
				case 107:
				case 108:
				case 109:
				case 110:
				case 114:
				case 122:
				case 123:
				case 124:
				case 128:
				case 129:
				case 130:
				case 139:
				case 169:
				case 173:
				case 175:
				case 176:
				case 177:
				case 179:
				case 180:
				case 181:
				case 183:
				case 184:
				case 186:
				case 190:
				case 191:
				case 192:
				case 194:
				case 195:
				case 205:
				case 206:
				case 208:
				case 209:
				case 210:
				case 212:
				case 213:
				case 215:
				case 221:
				case 222:
				case 229:
				case 230:
				case 234:
				case 236:
				case 237:
				case 239:
				case 240:
				case 241:
				case 243:
				case 244:
				case 246:
				case 247:
				case 258:
				case 260:
				case 263:
				case 274:
				case 275:
				case 312:
				case 323:
				case 339:
				case 347:
				case 366:
				case 368:
				case 379:
				case 384:
				case 385:
				case 386:
				case 387:
				case 395:
					{
					this.state = 2384;
					this.returnItemList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2390;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 158, this._ctx) ) {
				case 1:
					{
					this.state = 2387;
					this.separator();
					this.state = 2388;
					this.groupByClause();
					}
					break;
				}
				}
				break;
			case 334:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2392;
				this.match(GqlParser.NO);
				this.state = 2393;
				this.separator();
				this.state = 2394;
				this.match(GqlParser.BINDINGS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnItemList(): ReturnItemListContext {
		let localctx: ReturnItemListContext = new ReturnItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, GqlParser.RULE_returnItemList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2398;
			this.returnItem();
			this.state = 2409;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 162, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2400;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2399;
						this.separator();
						}
					}

					this.state = 2402;
					this.match(GqlParser.COMMA);
					this.state = 2404;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2403;
						this.separator();
						}
					}

					this.state = 2406;
					this.returnItem();
					}
					}
				}
				this.state = 2411;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 162, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnItem(): ReturnItemContext {
		let localctx: ReturnItemContext = new ReturnItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, GqlParser.RULE_returnItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2412;
			this.aggregatingValueExpr();
			this.state = 2416;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				{
				this.state = 2413;
				this.separator();
				this.state = 2414;
				this.returnItemAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnItemAlias(): ReturnItemAliasContext {
		let localctx: ReturnItemAliasContext = new ReturnItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, GqlParser.RULE_returnItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2418;
			this.match(GqlParser.AS);
			this.state = 2419;
			this.separator();
			this.state = 2420;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatment(): SelectStatmentContext {
		let localctx: SelectStatmentContext = new SelectStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, GqlParser.RULE_selectStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2422;
			this.match(GqlParser.SELECT);
			this.state = 2424;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 164, this._ctx) ) {
			case 1:
				{
				this.state = 2423;
				this.separator();
				}
				break;
			}
			this.state = 2427;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===119) {
				{
				this.state = 2426;
				this.setQuantifier();
				}
			}

			this.state = 2429;
			this.separator();
			this.state = 2432;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 63:
			case 70:
			case 72:
			case 73:
			case 80:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 102:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 114:
			case 122:
			case 123:
			case 124:
			case 128:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 175:
			case 176:
			case 177:
			case 179:
			case 180:
			case 181:
			case 183:
			case 184:
			case 186:
			case 190:
			case 191:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 215:
			case 221:
			case 222:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 246:
			case 247:
			case 258:
			case 260:
			case 263:
			case 274:
			case 275:
			case 312:
			case 323:
			case 339:
			case 347:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				{
				this.state = 2430;
				this.selectItemList();
				}
				break;
			case 30:
				{
				this.state = 2431;
				this.match(GqlParser.ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2466;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 173, this._ctx) ) {
			case 1:
				{
				this.state = 2434;
				this.separator();
				this.state = 2435;
				this.selectStatmentBody();
				this.state = 2439;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 167, this._ctx) ) {
				case 1:
					{
					this.state = 2436;
					this.separator();
					this.state = 2437;
					this.whereClause();
					}
					break;
				}
				this.state = 2444;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 168, this._ctx) ) {
				case 1:
					{
					this.state = 2441;
					this.separator();
					this.state = 2442;
					this.groupByClause();
					}
					break;
				}
				this.state = 2449;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 169, this._ctx) ) {
				case 1:
					{
					this.state = 2446;
					this.separator();
					this.state = 2447;
					this.havingClause();
					}
					break;
				}
				this.state = 2454;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 170, this._ctx) ) {
				case 1:
					{
					this.state = 2451;
					this.separator();
					this.state = 2452;
					this.orderByClause();
					}
					break;
				}
				this.state = 2459;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 171, this._ctx) ) {
				case 1:
					{
					this.state = 2456;
					this.separator();
					this.state = 2457;
					this.offsetClause();
					}
					break;
				}
				this.state = 2464;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 172, this._ctx) ) {
				case 1:
					{
					this.state = 2461;
					this.separator();
					this.state = 2462;
					this.limitClause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItemList(): SelectItemListContext {
		let localctx: SelectItemListContext = new SelectItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, GqlParser.RULE_selectItemList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2468;
			this.selectItem();
			this.state = 2470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2469;
				this.separator();
				}
			}

			this.state = 2480;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2472;
					this.match(GqlParser.COMMA);
					this.state = 2474;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2473;
						this.separator();
						}
					}

					this.state = 2476;
					this.selectItem();
					this.state = 2478;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 176, this._ctx) ) {
					case 1:
						{
						this.state = 2477;
						this.separator();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2482;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 177, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let localctx: SelectItemContext = new SelectItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 264, GqlParser.RULE_selectItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2484;
			this.aggregatingValueExpr();
			this.state = 2488;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 178, this._ctx) ) {
			case 1:
				{
				this.state = 2485;
				this.separator();
				this.state = 2486;
				this.selectItemAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItemAlias(): SelectItemAliasContext {
		let localctx: SelectItemAliasContext = new SelectItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 266, GqlParser.RULE_selectItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2490;
			this.match(GqlParser.AS);
			this.state = 2491;
			this.separator();
			this.state = 2492;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let localctx: HavingClauseContext = new HavingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 268, GqlParser.RULE_havingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2494;
			this.match(GqlParser.HAVING);
			this.state = 2495;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatmentBody(): SelectStatmentBodyContext {
		let localctx: SelectStatmentBodyContext = new SelectStatmentBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 270, GqlParser.RULE_selectStatmentBody);
		try {
			this.state = 2500;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 179, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2497;
				this.match(GqlParser.FROM);
				this.state = 2498;
				this.selectGraphMatchList();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2499;
				this.selectQuerySpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectGraphMatchList(): SelectGraphMatchListContext {
		let localctx: SelectGraphMatchListContext = new SelectGraphMatchListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 272, GqlParser.RULE_selectGraphMatchList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2502;
			this.selectGraphMatch();
			this.state = 2513;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 182, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2504;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2503;
						this.separator();
						}
					}

					this.state = 2506;
					this.match(GqlParser.COMMA);
					this.state = 2508;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2507;
						this.separator();
						}
					}

					this.state = 2510;
					this.selectGraphMatch();
					}
					}
				}
				this.state = 2515;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 182, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectGraphMatch(): SelectGraphMatchContext {
		let localctx: SelectGraphMatchContext = new SelectGraphMatchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 274, GqlParser.RULE_selectGraphMatch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2516;
			this.graphExpr();
			this.state = 2517;
			this.separator();
			this.state = 2518;
			this.matchStatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectQuerySpec(): SelectQuerySpecContext {
		let localctx: SelectQuerySpecContext = new SelectQuerySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 276, GqlParser.RULE_selectQuerySpec);
		try {
			this.state = 2530;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2520;
				this.match(GqlParser.FROM);
				this.state = 2521;
				this.separator();
				this.state = 2522;
				this.nestedQuerySpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2524;
				this.match(GqlParser.FROM);
				this.state = 2525;
				this.separator();
				this.state = 2526;
				this.graphExpr();
				this.state = 2527;
				this.separator();
				this.state = 2528;
				this.nestedQuerySpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callProcedureStatment(): CallProcedureStatmentContext {
		let localctx: CallProcedureStatmentContext = new CallProcedureStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 278, GqlParser.RULE_callProcedureStatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===199) {
				{
				this.state = 2532;
				this.match(GqlParser.OPTIONAL);
				this.state = 2533;
				this.separator();
				}
			}

			this.state = 2536;
			this.match(GqlParser.CALL);
			this.state = 2537;
			this.procedureCall();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureCall(): ProcedureCallContext {
		let localctx: ProcedureCallContext = new ProcedureCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 280, GqlParser.RULE_procedureCall);
		try {
			this.state = 2541;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 40:
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2539;
				this.inlineProcedureCall();
				}
				break;
			case 35:
			case 48:
			case 54:
			case 55:
			case 56:
			case 105:
			case 146:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2540;
				this.namedProcedureCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public inlineProcedureCall(): InlineProcedureCallContext {
		let localctx: InlineProcedureCallContext = new InlineProcedureCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 282, GqlParser.RULE_inlineProcedureCall);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2546;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===44) {
				{
				this.state = 2543;
				this.varScopeClause();
				this.state = 2544;
				this.separator();
				}
			}

			this.state = 2548;
			this.nestedProcedureSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public varScopeClause(): VarScopeClauseContext {
		let localctx: VarScopeClauseContext = new VarScopeClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 284, GqlParser.RULE_varScopeClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2550;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2552;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 2551;
				this.separator();
				}
				break;
			}
			this.state = 2555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===395) {
				{
				this.state = 2554;
				this.bindingVarRefList();
				}
			}

			this.state = 2558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2557;
				this.separator();
				}
			}

			this.state = 2560;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarRefList(): BindingVarRefListContext {
		let localctx: BindingVarRefListContext = new BindingVarRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 286, GqlParser.RULE_bindingVarRefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2562;
			this.bindingVarRef();
			this.state = 2564;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2563;
				this.separator();
				}
			}

			this.state = 2574;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2566;
				this.match(GqlParser.COMMA);
				this.state = 2568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2567;
					this.separator();
					}
				}

				this.state = 2570;
				this.bindingVarRef();
				this.state = 2572;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 192, this._ctx) ) {
				case 1:
					{
					this.state = 2571;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 2576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public namedProcedureCall(): NamedProcedureCallContext {
		let localctx: NamedProcedureCallContext = new NamedProcedureCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 288, GqlParser.RULE_namedProcedureCall);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2578;
			this.procedureRef();
			this.state = 2579;
			this.separator();
			this.state = 2580;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2582;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 194, this._ctx) ) {
			case 1:
				{
				this.state = 2581;
				this.separator();
				}
				break;
			}
			this.state = 2585;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 371196577) !== 0) || ((((_la - 70)) & ~0x1F) === 0 && ((1 << (_la - 70)) & 2040501261) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & 477106673) !== 0) || _la===139 || _la===169 || ((((_la - 173)) & ~0x1F) === 0 && ((1 << (_la - 173)) & 7220701) !== 0) || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 2734884283) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 77596381) !== 0) || _la===274 || _la===275 || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 2621441) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 66017) !== 0)) {
				{
				this.state = 2584;
				this.procedureArgList();
				}
			}

			this.state = 2588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2587;
				this.separator();
				}
			}

			this.state = 2590;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureArgList(): ProcedureArgListContext {
		let localctx: ProcedureArgListContext = new ProcedureArgListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 290, GqlParser.RULE_procedureArgList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2592;
			this.procedureArg();
			this.state = 2594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2593;
				this.separator();
				}
			}

			this.state = 2604;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2596;
				this.match(GqlParser.COMMA);
				this.state = 2598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2597;
					this.separator();
					}
				}

				this.state = 2600;
				this.procedureArg();
				this.state = 2602;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 199, this._ctx) ) {
				case 1:
					{
					this.state = 2601;
					this.separator();
					}
					break;
				}
				}
				}
				this.state = 2606;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===34);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureArg(): ProcedureArgContext {
		let localctx: ProcedureArgContext = new ProcedureArgContext(this, this._ctx, this.state);
		this.enterRule(localctx, 292, GqlParser.RULE_procedureArg);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2608;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public useGraphClause(): UseGraphClauseContext {
		let localctx: UseGraphClauseContext = new UseGraphClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 294, GqlParser.RULE_useGraphClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2610;
			this.match(GqlParser.USE);
			this.state = 2611;
			this.separator();
			this.state = 2612;
			this.graphExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public atSchemaClause(): AtSchemaClauseContext {
		let localctx: AtSchemaClauseContext = new AtSchemaClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 296, GqlParser.RULE_atSchemaClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2614;
			this.match(GqlParser.AT);
			this.state = 2615;
			this.separator();
			this.state = 2616;
			this.schemaRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVarRef(): BindingVarRefContext {
		let localctx: BindingVarRefContext = new BindingVarRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 298, GqlParser.RULE_bindingVarRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2618;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementVarRef(): ElementVarRefContext {
		let localctx: ElementVarRefContext = new ElementVarRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 300, GqlParser.RULE_elementVarRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2620;
			this.bindingVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathVarRef(): PathVarRefContext {
		let localctx: PathVarRefContext = new PathVarRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 302, GqlParser.RULE_pathVarRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2622;
			this.bindingVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameter(): ParameterContext {
		let localctx: ParameterContext = new ParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 304, GqlParser.RULE_parameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2624;
			this.parameterName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternBindingTable(): GraphPatternBindingTableContext {
		let localctx: GraphPatternBindingTableContext = new GraphPatternBindingTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 306, GqlParser.RULE_graphPatternBindingTable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2626;
			this.graphPattern();
			this.state = 2630;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 201, this._ctx) ) {
			case 1:
				{
				this.state = 2627;
				this.separator();
				this.state = 2628;
				this.graphPatternYieldClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternYieldClause(): GraphPatternYieldClauseContext {
		let localctx: GraphPatternYieldClauseContext = new GraphPatternYieldClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 308, GqlParser.RULE_graphPatternYieldClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2632;
			this.match(GqlParser.YIELD);
			this.state = 2633;
			this.graphPatternYieldItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternYieldItemList(): GraphPatternYieldItemListContext {
		let localctx: GraphPatternYieldItemListContext = new GraphPatternYieldItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 310, GqlParser.RULE_graphPatternYieldItemList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2635;
			this.graphPatternYieldItem();
			this.state = 2637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2636;
				this.separator();
				}
			}

			this.state = 2647;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2639;
					this.match(GqlParser.COMMA);
					this.state = 2641;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2640;
						this.separator();
						}
					}

					this.state = 2643;
					this.graphPatternYieldItem();
					this.state = 2645;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 204, this._ctx) ) {
					case 1:
						{
						this.state = 2644;
						this.separator();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2649;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 205, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternYieldItem(): GraphPatternYieldItemContext {
		let localctx: GraphPatternYieldItemContext = new GraphPatternYieldItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 312, GqlParser.RULE_graphPatternYieldItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2651;
			this.elementVarRef();
			this.state = 2652;
			this.separator();
			this.state = 2653;
			this.pathVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPattern(): GraphPatternContext {
		let localctx: GraphPatternContext = new GraphPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 314, GqlParser.RULE_graphPattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2658;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===316 || _la===343) {
				{
				this.state = 2655;
				this.matchMode();
				this.state = 2656;
				this.separator();
				}
			}

			this.state = 2660;
			this.pathPatternList();
			this.state = 2664;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 207, this._ctx) ) {
			case 1:
				{
				this.state = 2661;
				this.separator();
				this.state = 2662;
				this.keepClause();
				}
				break;
			}
			this.state = 2669;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 208, this._ctx) ) {
			case 1:
				{
				this.state = 2666;
				this.separator();
				this.state = 2667;
				this.graphPatternWhereClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public matchMode(): MatchModeContext {
		let localctx: MatchModeContext = new MatchModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 316, GqlParser.RULE_matchMode);
		try {
			this.state = 2673;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 343:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2671;
				this.repeatableElementsMatchMode();
				}
				break;
			case 316:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2672;
				this.differentEdgesMatchMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public repeatableElementsMatchMode(): RepeatableElementsMatchModeContext {
		let localctx: RepeatableElementsMatchModeContext = new RepeatableElementsMatchModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 318, GqlParser.RULE_repeatableElementsMatchMode);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2675;
			this.match(GqlParser.REPEATABLE);
			this.state = 2676;
			this.separator();
			this.state = 2677;
			this.elementBindingsOrElements();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public differentEdgesMatchMode(): DifferentEdgesMatchModeContext {
		let localctx: DifferentEdgesMatchModeContext = new DifferentEdgesMatchModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 320, GqlParser.RULE_differentEdgesMatchMode);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2679;
			this.match(GqlParser.DIFFERENT);
			this.state = 2680;
			this.edgeBindingsOrEdges();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementBindingsOrElements(): ElementBindingsOrElementsContext {
		let localctx: ElementBindingsOrElementsContext = new ElementBindingsOrElementsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 322, GqlParser.RULE_elementBindingsOrElements);
		try {
			this.state = 2689;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 320:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2682;
				this.match(GqlParser.ELEMENT);
				this.state = 2686;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 210, this._ctx) ) {
				case 1:
					{
					this.state = 2683;
					this.separator();
					this.state = 2684;
					this.match(GqlParser.BINDINGS);
					}
					break;
				}
				}
				break;
			case 321:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2688;
				this.match(GqlParser.ELEMENTS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeBindingsOrEdges(): EdgeBindingsOrEdgesContext {
		let localctx: EdgeBindingsOrEdgesContext = new EdgeBindingsOrEdgesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 324, GqlParser.RULE_edgeBindingsOrEdges);
		try {
			this.state = 2698;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 318:
			case 341:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2691;
				this.edgeSynonym();
				this.state = 2695;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 212, this._ctx) ) {
				case 1:
					{
					this.state = 2692;
					this.separator();
					this.state = 2693;
					this.match(GqlParser.BINDINGS);
					}
					break;
				}
				}
				break;
			case 319:
			case 342:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2697;
				this.edgesSynonym();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternList(): PathPatternListContext {
		let localctx: PathPatternListContext = new PathPatternListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 326, GqlParser.RULE_pathPatternList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2700;
			this.pathPattern();
			this.state = 2711;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 216, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2701;
						this.separator();
						}
					}

					this.state = 2704;
					this.match(GqlParser.COMMA);
					this.state = 2706;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2705;
						this.separator();
						}
					}

					this.state = 2708;
					this.pathPattern();
					}
					}
				}
				this.state = 2713;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 216, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPattern(): PathPatternContext {
		let localctx: PathPatternContext = new PathPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 328, GqlParser.RULE_pathPattern);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2717;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===395) {
				{
				this.state = 2714;
				this.pathVarDeclaration();
				this.state = 2715;
				this.separator();
				}
			}

			this.state = 2722;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===65 || _la===311 || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4227) !== 0)) {
				{
				this.state = 2719;
				this.pathPatternPrefix();
				this.state = 2720;
				this.separator();
				}
			}

			this.state = 2725;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2724;
					this.pathPatternExpr();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2727;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 219, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathVarDeclaration(): PathVarDeclarationContext {
		let localctx: PathVarDeclarationContext = new PathVarDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 330, GqlParser.RULE_pathVarDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2729;
			this.pathVar();
			this.state = 2731;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2730;
				this.separator();
				}
			}

			this.state = 2733;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keepClause(): KeepClauseContext {
		let localctx: KeepClauseContext = new KeepClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 332, GqlParser.RULE_keepClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2735;
			this.match(GqlParser.KEEP);
			this.state = 2736;
			this.separator();
			this.state = 2737;
			this.pathPatternPrefix();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternWhereClause(): GraphPatternWhereClauseContext {
		let localctx: GraphPatternWhereClauseContext = new GraphPatternWhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 334, GqlParser.RULE_graphPatternWhereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2739;
			this.match(GqlParser.WHERE);
			this.state = 2740;
			this.separator();
			this.state = 2741;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternPrefix(): PathPatternPrefixContext {
		let localctx: PathPatternPrefixContext = new PathPatternPrefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 336, GqlParser.RULE_pathPatternPrefix);
		try {
			this.state = 2745;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 311:
			case 345:
			case 351:
			case 356:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2743;
				this.pathModePrefix();
				}
				break;
			case 62:
			case 65:
			case 344:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2744;
				this.pathSearchPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathModePrefix(): PathModePrefixContext {
		let localctx: PathModePrefixContext = new PathModePrefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 338, GqlParser.RULE_pathModePrefix);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2747;
			this.pathMode();
			this.state = 2751;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 222, this._ctx) ) {
			case 1:
				{
				this.state = 2748;
				this.separator();
				this.state = 2749;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathMode(): PathModeContext {
		let localctx: PathModeContext = new PathModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 340, GqlParser.RULE_pathMode);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2753;
			_la = this._input.LA(1);
			if(!(_la===311 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 2113) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathSearchPrefix(): PathSearchPrefixContext {
		let localctx: PathSearchPrefixContext = new PathSearchPrefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 342, GqlParser.RULE_pathSearchPrefix);
		try {
			this.state = 2758;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 223, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2755;
				this.allPathSearch();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2756;
				this.anyPathSearch();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2757;
				this.shortestPathSearch();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public allPathSearch(): AllPathSearchContext {
		let localctx: AllPathSearchContext = new AllPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 344, GqlParser.RULE_allPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2760;
			this.match(GqlParser.ALL);
			this.state = 2764;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 224, this._ctx) ) {
			case 1:
				{
				this.state = 2761;
				this.separator();
				this.state = 2762;
				this.pathMode();
				}
				break;
			}
			this.state = 2769;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 225, this._ctx) ) {
			case 1:
				{
				this.state = 2766;
				this.separator();
				this.state = 2767;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathOrPaths(): PathOrPathsContext {
		let localctx: PathOrPathsContext = new PathOrPathsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 346, GqlParser.RULE_pathOrPaths);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2771;
			_la = this._input.LA(1);
			if(!(_la===205 || _la===207)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public anyPathSearch(): AnyPathSearchContext {
		let localctx: AnyPathSearchContext = new AnyPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 348, GqlParser.RULE_anyPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2773;
			this.match(GqlParser.ANY);
			this.state = 2777;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 226, this._ctx) ) {
			case 1:
				{
				this.state = 2774;
				this.separator();
				this.state = 2775;
				this.numberOfPaths();
				}
				break;
			}
			this.state = 2782;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 227, this._ctx) ) {
			case 1:
				{
				this.state = 2779;
				this.separator();
				this.state = 2780;
				this.pathMode();
				}
				break;
			}
			this.state = 2787;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 228, this._ctx) ) {
			case 1:
				{
				this.state = 2784;
				this.separator();
				this.state = 2785;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numberOfPaths(): NumberOfPathsContext {
		let localctx: NumberOfPathsContext = new NumberOfPathsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 350, GqlParser.RULE_numberOfPaths);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2789;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public shortestPathSearch(): ShortestPathSearchContext {
		let localctx: ShortestPathSearchContext = new ShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 352, GqlParser.RULE_shortestPathSearch);
		try {
			this.state = 2795;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 229, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2791;
				this.allShortestPathSearch();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2792;
				this.anyShortestPathSearch();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2793;
				this.countedShortestPathSearch();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2794;
				this.countedShortestGroupSearch();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public allShortestPathSearch(): AllShortestPathSearchContext {
		let localctx: AllShortestPathSearchContext = new AllShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 354, GqlParser.RULE_allShortestPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2797;
			this.match(GqlParser.ALL);
			this.state = 2798;
			this.separator();
			this.state = 2799;
			this.match(GqlParser.SHORTEST);
			this.state = 2803;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 230, this._ctx) ) {
			case 1:
				{
				this.state = 2800;
				this.separator();
				this.state = 2801;
				this.pathMode();
				}
				break;
			}
			this.state = 2808;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				{
				this.state = 2805;
				this.separator();
				this.state = 2806;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public anyShortestPathSearch(): AnyShortestPathSearchContext {
		let localctx: AnyShortestPathSearchContext = new AnyShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 356, GqlParser.RULE_anyShortestPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2810;
			this.match(GqlParser.ANY);
			this.state = 2811;
			this.separator();
			this.state = 2812;
			this.match(GqlParser.SHORTEST);
			this.state = 2816;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				{
				this.state = 2813;
				this.separator();
				this.state = 2814;
				this.pathMode();
				}
				break;
			}
			this.state = 2821;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 233, this._ctx) ) {
			case 1:
				{
				this.state = 2818;
				this.separator();
				this.state = 2819;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public countedShortestPathSearch(): CountedShortestPathSearchContext {
		let localctx: CountedShortestPathSearchContext = new CountedShortestPathSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 358, GqlParser.RULE_countedShortestPathSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2823;
			this.match(GqlParser.SHORTEST);
			this.state = 2824;
			this.separator();
			this.state = 2825;
			this.numberOfPaths();
			this.state = 2829;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 2826;
				this.separator();
				this.state = 2827;
				this.pathMode();
				}
				break;
			}
			this.state = 2834;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				{
				this.state = 2831;
				this.separator();
				this.state = 2832;
				this.pathOrPaths();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public countedShortestGroupSearch(): CountedShortestGroupSearchContext {
		let localctx: CountedShortestGroupSearchContext = new CountedShortestGroupSearchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 360, GqlParser.RULE_countedShortestGroupSearch);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2836;
			this.match(GqlParser.SHORTEST);
			this.state = 2837;
			this.separator();
			this.state = 2838;
			this.numberOfGroups();
			this.state = 2842;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 236, this._ctx) ) {
			case 1:
				{
				this.state = 2839;
				this.separator();
				this.state = 2840;
				this.pathMode();
				}
				break;
			}
			this.state = 2847;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 237, this._ctx) ) {
			case 1:
				{
				this.state = 2844;
				this.separator();
				this.state = 2845;
				this.pathOrPaths();
				}
				break;
			}
			this.state = 2849;
			this.separator();
			this.state = 2850;
			this.groupOrGroups();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupOrGroups(): GroupOrGroupsContext {
		let localctx: GroupOrGroupsContext = new GroupOrGroupsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 362, GqlParser.RULE_groupOrGroups);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2852;
			_la = this._input.LA(1);
			if(!(_la===142 || _la===324)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numberOfGroups(): NumberOfGroupsContext {
		let localctx: NumberOfGroupsContext = new NumberOfGroupsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 364, GqlParser.RULE_numberOfGroups);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2854;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternExpr(): PathPatternExprContext {
		let localctx: PathPatternExprContext = new PathPatternExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 366, GqlParser.RULE_pathPatternExpr);
		try {
			this.state = 2859;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 238, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2856;
				this.pathTerm();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2857;
				this.pathMultisetAlternation();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2858;
				this.pathPatternUnion();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathMultisetAlternation(): PathMultisetAlternationContext {
		let localctx: PathMultisetAlternationContext = new PathMultisetAlternationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 368, GqlParser.RULE_pathMultisetAlternation);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2861;
			this.pathTerm();
			this.state = 2869;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 239, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2862;
					this.separator();
					this.state = 2863;
					this.match(GqlParser.MULTISET_ALTERNATION);
					this.state = 2864;
					this.separator();
					this.state = 2865;
					this.pathTerm();
					}
					}
				}
				this.state = 2871;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 239, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPatternUnion(): PathPatternUnionContext {
		let localctx: PathPatternUnionContext = new PathPatternUnionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 370, GqlParser.RULE_pathPatternUnion);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2872;
			this.pathTerm();
			this.state = 2874;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 240, this._ctx) ) {
			case 1:
				{
				this.state = 2873;
				this.separator();
				}
				break;
			}
			this.state = 2886;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 243, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2876;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 2878;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2877;
						this.separator();
						}
					}

					this.state = 2880;
					this.pathTerm();
					this.state = 2882;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 242, this._ctx) ) {
					case 1:
						{
						this.state = 2881;
						this.separator();
						}
						break;
					}
					}
					}
				}
				this.state = 2888;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 243, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathTerm(): PathTermContext {
		let localctx: PathTermContext = new PathTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 372, GqlParser.RULE_pathTerm);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2889;
			this.pathFactor();
			this.state = 2895;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 244, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2890;
					this.separator();
					this.state = 2891;
					this.pathFactor();
					}
					}
				}
				this.state = 2897;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 244, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathFactor(): PathFactorContext {
		let localctx: PathFactorContext = new PathFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 374, GqlParser.RULE_pathFactor);
		try {
			this.state = 2901;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 245, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2898;
				this.pathPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2899;
				this.quantifiedPathPrimary();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2900;
				this.questionedPathPrimary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public quantifiedPathPrimary(): QuantifiedPathPrimaryContext {
		let localctx: QuantifiedPathPrimaryContext = new QuantifiedPathPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 376, GqlParser.RULE_quantifiedPathPrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2903;
			this.pathPrimary();
			this.state = 2904;
			this.separator();
			this.state = 2905;
			this.graphPatternQuantifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public questionedPathPrimary(): QuestionedPathPrimaryContext {
		let localctx: QuestionedPathPrimaryContext = new QuestionedPathPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 378, GqlParser.RULE_questionedPathPrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2907;
			this.pathPrimary();
			this.state = 2908;
			this.match(GqlParser.QUESTION_MARK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathPrimary(): PathPrimaryContext {
		let localctx: PathPrimaryContext = new PathPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 380, GqlParser.RULE_pathPrimary);
		try {
			this.state = 2913;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 246, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2910;
				this.elementPattern();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2911;
				this.parenthesizedPathPatternExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2912;
				this.simplifiedPathPatternExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPattern(): ElementPatternContext {
		let localctx: ElementPatternContext = new ElementPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 382, GqlParser.RULE_elementPattern);
		try {
			this.state = 2917;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2915;
				this.nodePattern();
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 8:
			case 10:
			case 19:
			case 20:
			case 27:
			case 50:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2916;
				this.edgePattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodePattern(): NodePatternContext {
		let localctx: NodePatternContext = new NodePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 384, GqlParser.RULE_nodePattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2919;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 2921;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 248, this._ctx) ) {
			case 1:
				{
				this.state = 2920;
				this.separator();
				}
				break;
			}
			this.state = 2923;
			this.elementPatternFiller();
			this.state = 2925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2924;
				this.separator();
				}
			}

			this.state = 2927;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPatternFiller(): ElementPatternFillerContext {
		let localctx: ElementPatternFillerContext = new ElementPatternFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 386, GqlParser.RULE_elementPatternFiller);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===348 || _la===395) {
				{
				this.state = 2929;
				this.elementVarDeclaration();
				}
			}

			this.state = 2936;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 252, this._ctx) ) {
			case 1:
				{
				this.state = 2933;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2932;
					this.separator();
					}
				}

				this.state = 2935;
				this.isLabelExpr();
				}
				break;
			}
			this.state = 2941;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 253, this._ctx) ) {
			case 1:
				{
				this.state = 2938;
				this.separator();
				this.state = 2939;
				this.elementPatternPredicate();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementVarDeclaration(): ElementVarDeclarationContext {
		let localctx: ElementVarDeclarationContext = new ElementVarDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 388, GqlParser.RULE_elementVarDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2945;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===348) {
				{
				this.state = 2943;
				this.match(GqlParser.TEMP);
				this.state = 2944;
				this.separator();
				}
			}

			this.state = 2947;
			this.elementVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isLabelExpr(): IsLabelExprContext {
		let localctx: IsLabelExprContext = new IsLabelExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 390, GqlParser.RULE_isLabelExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2949;
			this.isOrColon();
			this.state = 2950;
			this.labelExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isOrColon(): IsOrColonContext {
		let localctx: IsOrColonContext = new IsOrColonContext(this, this._ctx, this.state);
		this.enterRule(localctx, 392, GqlParser.RULE_isOrColon);
		let _la: number;
		try {
			this.state = 2958;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 167:
				this.enterOuterAlt(localctx, 1);
				{
				{
				this.state = 2952;
				this.match(GqlParser.IS);
				this.state = 2953;
				this.separator();
				}
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2954;
				this.match(GqlParser.COLON);
				this.state = 2956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 2955;
					this.separator();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPatternPredicate(): ElementPatternPredicateContext {
		let localctx: ElementPatternPredicateContext = new ElementPatternPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 394, GqlParser.RULE_elementPatternPredicate);
		try {
			this.state = 2962;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 268:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2960;
				this.elementPatternWhereClause();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2961;
				this.elementPropertySpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPatternWhereClause(): ElementPatternWhereClauseContext {
		let localctx: ElementPatternWhereClauseContext = new ElementPatternWhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 396, GqlParser.RULE_elementPatternWhereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2964;
			this.match(GqlParser.WHERE);
			this.state = 2965;
			this.separator();
			this.state = 2966;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementPropertySpec(): ElementPropertySpecContext {
		let localctx: ElementPropertySpecContext = new ElementPropertySpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 398, GqlParser.RULE_elementPropertySpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2968;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 2970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2969;
				this.separator();
				}
			}

			this.state = 2972;
			this.propertyKeyValuePairList();
			this.state = 2974;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2973;
				this.separator();
				}
			}

			this.state = 2976;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
		let localctx: PropertyKeyValuePairListContext = new PropertyKeyValuePairListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 400, GqlParser.RULE_propertyKeyValuePairList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2978;
			this.propertyKeyValuePair();
			this.state = 2989;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 262, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2980;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2979;
						this.separator();
						}
					}

					this.state = 2982;
					this.match(GqlParser.COMMA);
					this.state = 2984;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 2983;
						this.separator();
						}
					}

					this.state = 2986;
					this.propertyKeyValuePair();
					}
					}
				}
				this.state = 2991;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 262, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyKeyValuePair(): PropertyKeyValuePairContext {
		let localctx: PropertyKeyValuePairContext = new PropertyKeyValuePairContext(this, this._ctx, this.state);
		this.enterRule(localctx, 402, GqlParser.RULE_propertyKeyValuePair);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2992;
			this.propertyName();
			this.state = 2994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2993;
				this.separator();
				}
			}

			this.state = 2996;
			this.match(GqlParser.COLON);
			this.state = 2998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 2997;
				this.separator();
				}
			}

			this.state = 3000;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgePattern(): EdgePatternContext {
		let localctx: EdgePatternContext = new EdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 404, GqlParser.RULE_edgePattern);
		try {
			this.state = 3004;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 3:
			case 4:
			case 8:
			case 19:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3002;
				this.fullEdgePattern();
				}
				break;
			case 1:
			case 2:
			case 5:
			case 10:
			case 20:
			case 27:
			case 50:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3003;
				this.abbreviatedEdgePattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgePattern(): FullEdgePatternContext {
		let localctx: FullEdgePatternContext = new FullEdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 406, GqlParser.RULE_fullEdgePattern);
		try {
			this.state = 3013;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 266, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3006;
				this.fullEdgePointingLeft();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3007;
				this.fullEdgeUndirected();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3008;
				this.fullEdgePointingRight();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3009;
				this.fullEdgeLeftOrUndirected();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3010;
				this.fullEdgeUndirectedOrRight();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3011;
				this.fullEdgeLeftOrRight();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3012;
				this.fullEdgeAnyDirection();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgePointingLeft(): FullEdgePointingLeftContext {
		let localctx: FullEdgePointingLeftContext = new FullEdgePointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 408, GqlParser.RULE_fullEdgePointingLeft);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3015;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 3017;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 267, this._ctx) ) {
			case 1:
				{
				this.state = 3016;
				this.separator();
				}
				break;
			}
			this.state = 3019;
			this.elementPatternFiller();
			this.state = 3021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3020;
				this.separator();
				}
			}

			this.state = 3023;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeUndirected(): FullEdgeUndirectedContext {
		let localctx: FullEdgeUndirectedContext = new FullEdgeUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 410, GqlParser.RULE_fullEdgeUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3025;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 3027;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 269, this._ctx) ) {
			case 1:
				{
				this.state = 3026;
				this.separator();
				}
				break;
			}
			this.state = 3029;
			this.elementPatternFiller();
			this.state = 3031;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3030;
				this.separator();
				}
			}

			this.state = 3033;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgePointingRight(): FullEdgePointingRightContext {
		let localctx: FullEdgePointingRightContext = new FullEdgePointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 412, GqlParser.RULE_fullEdgePointingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3035;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 3037;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 271, this._ctx) ) {
			case 1:
				{
				this.state = 3036;
				this.separator();
				}
				break;
			}
			this.state = 3039;
			this.elementPatternFiller();
			this.state = 3041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3040;
				this.separator();
				}
			}

			this.state = 3043;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeLeftOrUndirected(): FullEdgeLeftOrUndirectedContext {
		let localctx: FullEdgeLeftOrUndirectedContext = new FullEdgeLeftOrUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 414, GqlParser.RULE_fullEdgeLeftOrUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3045;
			this.match(GqlParser.LEFT_ARROW_TILDE_BRACKET);
			this.state = 3047;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 273, this._ctx) ) {
			case 1:
				{
				this.state = 3046;
				this.separator();
				}
				break;
			}
			this.state = 3049;
			this.elementPatternFiller();
			this.state = 3051;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3050;
				this.separator();
				}
			}

			this.state = 3053;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeUndirectedOrRight(): FullEdgeUndirectedOrRightContext {
		let localctx: FullEdgeUndirectedOrRightContext = new FullEdgeUndirectedOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 416, GqlParser.RULE_fullEdgeUndirectedOrRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3055;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 3057;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 275, this._ctx) ) {
			case 1:
				{
				this.state = 3056;
				this.separator();
				}
				break;
			}
			this.state = 3059;
			this.elementPatternFiller();
			this.state = 3061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3060;
				this.separator();
				}
			}

			this.state = 3063;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeLeftOrRight(): FullEdgeLeftOrRightContext {
		let localctx: FullEdgeLeftOrRightContext = new FullEdgeLeftOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 418, GqlParser.RULE_fullEdgeLeftOrRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3065;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 3067;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 277, this._ctx) ) {
			case 1:
				{
				this.state = 3066;
				this.separator();
				}
				break;
			}
			this.state = 3069;
			this.elementPatternFiller();
			this.state = 3071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3070;
				this.separator();
				}
			}

			this.state = 3073;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeAnyDirection(): FullEdgeAnyDirectionContext {
		let localctx: FullEdgeAnyDirectionContext = new FullEdgeAnyDirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 420, GqlParser.RULE_fullEdgeAnyDirection);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3075;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 3077;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				{
				this.state = 3076;
				this.separator();
				}
				break;
			}
			this.state = 3079;
			this.elementPatternFiller();
			this.state = 3081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3080;
				this.separator();
				}
			}

			this.state = 3083;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgePattern(): AbbreviatedEdgePatternContext {
		let localctx: AbbreviatedEdgePatternContext = new AbbreviatedEdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 422, GqlParser.RULE_abbreviatedEdgePattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3085;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 135267366) !== 0) || _la===50)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedPathPatternExpr(): ParenthesizedPathPatternExprContext {
		let localctx: ParenthesizedPathPatternExprContext = new ParenthesizedPathPatternExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 424, GqlParser.RULE_parenthesizedPathPatternExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3087;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3088;
				this.separator();
				}
			}

			this.state = 3094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===395) {
				{
				this.state = 3091;
				this.subpathVarDeclaration();
				this.state = 3092;
				this.separator();
				}
			}

			this.state = 3099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===311 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 2113) !== 0)) {
				{
				this.state = 3096;
				this.pathModePrefix();
				this.state = 3097;
				this.separator();
				}
			}

			this.state = 3101;
			this.pathPatternExpr();
			this.state = 3105;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 284, this._ctx) ) {
			case 1:
				{
				this.state = 3102;
				this.separator();
				this.state = 3103;
				this.parenthesizedPathPatternWhereClause();
				}
				break;
			}
			this.state = 3108;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3107;
				this.separator();
				}
			}

			this.state = 3110;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subpathVarDeclaration(): SubpathVarDeclarationContext {
		let localctx: SubpathVarDeclarationContext = new SubpathVarDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 426, GqlParser.RULE_subpathVarDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3112;
			this.subpathVar();
			this.state = 3114;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3113;
				this.separator();
				}
			}

			this.state = 3116;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedPathPatternWhereClause(): ParenthesizedPathPatternWhereClauseContext {
		let localctx: ParenthesizedPathPatternWhereClauseContext = new ParenthesizedPathPatternWhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 428, GqlParser.RULE_parenthesizedPathPatternWhereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3118;
			this.match(GqlParser.WHERE);
			this.state = 3119;
			this.separator();
			this.state = 3120;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertGraphPattern(): InsertGraphPatternContext {
		let localctx: InsertGraphPatternContext = new InsertGraphPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 430, GqlParser.RULE_insertGraphPattern);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3122;
			this.insertGraphPatternList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertGraphPatternList(): InsertGraphPatternListContext {
		let localctx: InsertGraphPatternListContext = new InsertGraphPatternListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 432, GqlParser.RULE_insertGraphPatternList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3124;
			this.insertPathPattern();
			this.state = 3138;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 290, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3126;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3125;
						this.separator();
						}
					}

					this.state = 3128;
					this.match(GqlParser.COMMA);
					this.state = 3130;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3129;
						this.separator();
						}
					}

					this.state = 3132;
					this.insertPathPattern();
					this.state = 3134;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 289, this._ctx) ) {
					case 1:
						{
						this.state = 3133;
						this.separator();
						}
						break;
					}
					}
					}
				}
				this.state = 3140;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 290, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertPathPattern(): InsertPathPatternContext {
		let localctx: InsertPathPatternContext = new InsertPathPatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 434, GqlParser.RULE_insertPathPattern);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3141;
			this.insertNodePattern();
			this.state = 3155;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 294, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3143;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3142;
						this.separator();
						}
					}

					this.state = 3145;
					this.insertEdgePattern();
					this.state = 3147;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3146;
						this.separator();
						}
					}

					this.state = 3149;
					this.insertNodePattern();
					this.state = 3151;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 293, this._ctx) ) {
					case 1:
						{
						this.state = 3150;
						this.separator();
						}
						break;
					}
					}
					}
				}
				this.state = 3157;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 294, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertNodePattern(): InsertNodePatternContext {
		let localctx: InsertNodePatternContext = new InsertNodePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 436, GqlParser.RULE_insertNodePattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3158;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3160;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 295, this._ctx) ) {
			case 1:
				{
				this.state = 3159;
				this.separator();
				}
				break;
			}
			this.state = 3163;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===32 || _la===40 || _la===167 || _la===348 || _la===395) {
				{
				this.state = 3162;
				this.insertElementPatternFiller();
				}
			}

			this.state = 3166;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3165;
				this.separator();
				}
			}

			this.state = 3168;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgePattern(): InsertEdgePatternContext {
		let localctx: InsertEdgePatternContext = new InsertEdgePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 438, GqlParser.RULE_insertEdgePattern);
		try {
			this.state = 3173;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 3:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3170;
				this.insertEdgePointingLeft();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3171;
				this.insertEdgePointingRight();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3172;
				this.insertEdgeUndirected();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgePointingLeft(): InsertEdgePointingLeftContext {
		let localctx: InsertEdgePointingLeftContext = new InsertEdgePointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 440, GqlParser.RULE_insertEdgePointingLeft);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3175;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 3177;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3176;
				this.separator();
				}
			}

			this.state = 3179;
			this.insertElementPatternFiller();
			this.state = 3181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3180;
				this.separator();
				}
			}

			this.state = 3183;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgePointingRight(): InsertEdgePointingRightContext {
		let localctx: InsertEdgePointingRightContext = new InsertEdgePointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 442, GqlParser.RULE_insertEdgePointingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3185;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 3187;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3186;
				this.separator();
				}
			}

			this.state = 3189;
			this.insertElementPatternFiller();
			this.state = 3191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3190;
				this.separator();
				}
			}

			this.state = 3193;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertEdgeUndirected(): InsertEdgeUndirectedContext {
		let localctx: InsertEdgeUndirectedContext = new InsertEdgeUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 444, GqlParser.RULE_insertEdgeUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3195;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 3197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3196;
				this.separator();
				}
			}

			this.state = 3199;
			this.insertElementPatternFiller();
			this.state = 3201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3200;
				this.separator();
				}
			}

			this.state = 3203;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		let localctx: InsertElementPatternFillerContext = new InsertElementPatternFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 446, GqlParser.RULE_insertElementPatternFiller);
		let _la: number;
		try {
			this.state = 3217;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 307, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3205;
				this.elementVarDeclaration();
				this.state = 3209;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 305, this._ctx) ) {
				case 1:
					{
					this.state = 3206;
					this.separator();
					this.state = 3207;
					this.labelAndPropertySetSpec();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===348 || _la===395) {
					{
					this.state = 3211;
					this.elementVarDeclaration();
					this.state = 3212;
					this.separator();
					}
				}

				this.state = 3216;
				this.labelAndPropertySetSpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelAndPropertySetSpec(): LabelAndPropertySetSpecContext {
		let localctx: LabelAndPropertySetSpecContext = new LabelAndPropertySetSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 448, GqlParser.RULE_labelAndPropertySetSpec);
		let _la: number;
		try {
			this.state = 3233;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 310, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3219;
				this.isOrColon();
				this.state = 3220;
				this.labelSetSpec();
				this.state = 3224;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 308, this._ctx) ) {
				case 1:
					{
					this.state = 3221;
					this.separator();
					this.state = 3222;
					this.elementPropertySpec();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3230;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===32 || _la===167) {
					{
					this.state = 3226;
					this.isOrColon();
					this.state = 3227;
					this.labelSetSpec();
					this.state = 3228;
					this.separator();
					}
				}

				this.state = 3232;
				this.elementPropertySpec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelExpr(): LabelExprContext {
		let localctx: LabelExprContext = new LabelExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 450, GqlParser.RULE_labelExpr);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3235;
			this.labelTerm();
			this.state = 3246;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 313, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3236;
						this.separator();
						}
					}

					this.state = 3239;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 3241;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3240;
						this.separator();
						}
					}

					this.state = 3243;
					this.labelTerm();
					}
					}
				}
				this.state = 3248;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 313, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelTerm(): LabelTermContext {
		let localctx: LabelTermContext = new LabelTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 452, GqlParser.RULE_labelTerm);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3249;
			this.labelFactor();
			this.state = 3260;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 316, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3251;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3250;
						this.separator();
						}
					}

					this.state = 3253;
					this.match(GqlParser.AMPERSAND);
					this.state = 3255;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3254;
						this.separator();
						}
					}

					this.state = 3257;
					this.labelFactor();
					}
					}
				}
				this.state = 3262;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 316, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelFactor(): LabelFactorContext {
		let localctx: LabelFactorContext = new LabelFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 454, GqlParser.RULE_labelFactor);
		try {
			this.state = 3265;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
			case 53:
			case 56:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3263;
				this.labelPrimary();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3264;
				this.labelNegation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelNegation(): LabelNegationContext {
		let localctx: LabelNegationContext = new LabelNegationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 456, GqlParser.RULE_labelNegation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3267;
			this.match(GqlParser.EXCLAMATION);
			this.state = 3269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3268;
				this.separator();
				}
			}

			this.state = 3271;
			this.labelPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelPrimary(): LabelPrimaryContext {
		let localctx: LabelPrimaryContext = new LabelPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 458, GqlParser.RULE_labelPrimary);
		try {
			this.state = 3276;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3273;
				this.labelName();
				}
				break;
			case 53:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3274;
				this.wildcardLabel();
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3275;
				this.parenthesizedLabelExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public wildcardLabel(): WildcardLabelContext {
		let localctx: WildcardLabelContext = new WildcardLabelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 460, GqlParser.RULE_wildcardLabel);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3278;
			this.match(GqlParser.PERCENT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedLabelExpr(): ParenthesizedLabelExprContext {
		let localctx: ParenthesizedLabelExprContext = new ParenthesizedLabelExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 462, GqlParser.RULE_parenthesizedLabelExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3280;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3282;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3281;
				this.separator();
				}
			}

			this.state = 3284;
			this.labelExpr();
			this.state = 3286;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3285;
				this.separator();
				}
			}

			this.state = 3288;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternQuantifier(): GraphPatternQuantifierContext {
		let localctx: GraphPatternQuantifierContext = new GraphPatternQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 464, GqlParser.RULE_graphPatternQuantifier);
		try {
			this.state = 3294;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 322, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3290;
				this.match(GqlParser.ASTERISK);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3291;
				this.match(GqlParser.PLUS);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3292;
				this.fixedQuantifier();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3293;
				this.generalQuantifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fixedQuantifier(): FixedQuantifierContext {
		let localctx: FixedQuantifierContext = new FixedQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 466, GqlParser.RULE_fixedQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3296;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 3298;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3297;
				this.separator();
				}
			}

			this.state = 3300;
			this.match(GqlParser.UNSIGNED_INT);
			this.state = 3302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3301;
				this.separator();
				}
			}

			this.state = 3304;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalQuantifier(): GeneralQuantifierContext {
		let localctx: GeneralQuantifierContext = new GeneralQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 468, GqlParser.RULE_generalQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3306;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 3308;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3307;
				this.separator();
				}
			}

			this.state = 3313;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===379) {
				{
				this.state = 3310;
				this.lowerBound();
				this.state = 3311;
				this.separator();
				}
			}

			this.state = 3315;
			this.match(GqlParser.COMMA);
			this.state = 3319;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 327, this._ctx) ) {
			case 1:
				{
				this.state = 3316;
				this.separator();
				this.state = 3317;
				this.upperBound();
				}
				break;
			}
			this.state = 3322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3321;
				this.separator();
				}
			}

			this.state = 3324;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lowerBound(): LowerBoundContext {
		let localctx: LowerBoundContext = new LowerBoundContext(this, this._ctx, this.state);
		this.enterRule(localctx, 470, GqlParser.RULE_lowerBound);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3326;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public upperBound(): UpperBoundContext {
		let localctx: UpperBoundContext = new UpperBoundContext(this, this._ctx, this.state);
		this.enterRule(localctx, 472, GqlParser.RULE_upperBound);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3328;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedPathPatternExpr(): SimplifiedPathPatternExprContext {
		let localctx: SimplifiedPathPatternExprContext = new SimplifiedPathPatternExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 474, GqlParser.RULE_simplifiedPathPatternExpr);
		try {
			this.state = 3337;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 329, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3330;
				this.simplifiedDefaultingLeft();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3331;
				this.simplifiedDefaultingUndirected();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3332;
				this.simplifiedDefaultingRight();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3333;
				this.simplifiedDefaultingLeftOrUndirected();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3334;
				this.simplifiedDefaultingUndirectedOrRight();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3335;
				this.simplifiedDefaultingLeftOrRight();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3336;
				this.simplifiedDefaultingAnyDirection();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingLeft(): SimplifiedDefaultingLeftContext {
		let localctx: SimplifiedDefaultingLeftContext = new SimplifiedDefaultingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 476, GqlParser.RULE_simplifiedDefaultingLeft);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3339;
			this.match(GqlParser.LEFT_MINUS_SLASH);
			this.state = 3341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3340;
				this.separator();
				}
			}

			this.state = 3343;
			this.simplifiedContents();
			this.state = 3345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3344;
				this.separator();
				}
			}

			this.state = 3347;
			this.match(GqlParser.SLASH_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingUndirected(): SimplifiedDefaultingUndirectedContext {
		let localctx: SimplifiedDefaultingUndirectedContext = new SimplifiedDefaultingUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 478, GqlParser.RULE_simplifiedDefaultingUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3349;
			this.match(GqlParser.TILDE_SLASH);
			this.state = 3351;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3350;
				this.separator();
				}
			}

			this.state = 3353;
			this.simplifiedContents();
			this.state = 3355;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3354;
				this.separator();
				}
			}

			this.state = 3357;
			this.match(GqlParser.SLASH_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingRight(): SimplifiedDefaultingRightContext {
		let localctx: SimplifiedDefaultingRightContext = new SimplifiedDefaultingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 480, GqlParser.RULE_simplifiedDefaultingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3359;
			this.match(GqlParser.MINUS_SLASH);
			this.state = 3361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3360;
				this.separator();
				}
			}

			this.state = 3363;
			this.simplifiedContents();
			this.state = 3365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3364;
				this.separator();
				}
			}

			this.state = 3367;
			this.match(GqlParser.SLASH_MINUS_RIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingLeftOrUndirected(): SimplifiedDefaultingLeftOrUndirectedContext {
		let localctx: SimplifiedDefaultingLeftOrUndirectedContext = new SimplifiedDefaultingLeftOrUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 482, GqlParser.RULE_simplifiedDefaultingLeftOrUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3369;
			this.match(GqlParser.LEFT_TILDE_SLASH);
			this.state = 3371;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3370;
				this.separator();
				}
			}

			this.state = 3373;
			this.simplifiedContents();
			this.state = 3375;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3374;
				this.separator();
				}
			}

			this.state = 3377;
			this.match(GqlParser.SLASH_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingUndirectedOrRight(): SimplifiedDefaultingUndirectedOrRightContext {
		let localctx: SimplifiedDefaultingUndirectedOrRightContext = new SimplifiedDefaultingUndirectedOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 484, GqlParser.RULE_simplifiedDefaultingUndirectedOrRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3379;
			this.match(GqlParser.TILDE_SLASH);
			this.state = 3381;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3380;
				this.separator();
				}
			}

			this.state = 3383;
			this.simplifiedContents();
			this.state = 3385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3384;
				this.separator();
				}
			}

			this.state = 3387;
			this.match(GqlParser.SLASH_TILDE_RIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingLeftOrRight(): SimplifiedDefaultingLeftOrRightContext {
		let localctx: SimplifiedDefaultingLeftOrRightContext = new SimplifiedDefaultingLeftOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 486, GqlParser.RULE_simplifiedDefaultingLeftOrRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3389;
			this.match(GqlParser.LEFT_MINUS_SLASH);
			this.state = 3391;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3390;
				this.separator();
				}
			}

			this.state = 3393;
			this.simplifiedContents();
			this.state = 3395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3394;
				this.separator();
				}
			}

			this.state = 3397;
			this.match(GqlParser.SLASH_MINUS_RIGHT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDefaultingAnyDirection(): SimplifiedDefaultingAnyDirectionContext {
		let localctx: SimplifiedDefaultingAnyDirectionContext = new SimplifiedDefaultingAnyDirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 488, GqlParser.RULE_simplifiedDefaultingAnyDirection);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3399;
			this.match(GqlParser.MINUS_SLASH);
			this.state = 3401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3400;
				this.separator();
				}
			}

			this.state = 3403;
			this.simplifiedContents();
			this.state = 3405;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3404;
				this.separator();
				}
			}

			this.state = 3407;
			this.match(GqlParser.SLASH_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedContents(): SimplifiedContentsContext {
		let localctx: SimplifiedContentsContext = new SimplifiedContentsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 490, GqlParser.RULE_simplifiedContents);
		try {
			this.state = 3412;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 344, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3409;
				this.simplifiedTerm();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3410;
				this.simplifiedPathUnion();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3411;
				this.simplifiedMultisetAlternation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedPathUnion(): SimplifiedPathUnionContext {
		let localctx: SimplifiedPathUnionContext = new SimplifiedPathUnionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 492, GqlParser.RULE_simplifiedPathUnion);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3414;
			this.simplifiedTerm();
			this.state = 3425;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 347, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3416;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3415;
						this.separator();
						}
					}

					this.state = 3418;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 3420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3419;
						this.separator();
						}
					}

					this.state = 3422;
					this.simplifiedTerm();
					}
					}
				}
				this.state = 3427;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 347, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedMultisetAlternation(): SimplifiedMultisetAlternationContext {
		let localctx: SimplifiedMultisetAlternationContext = new SimplifiedMultisetAlternationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 494, GqlParser.RULE_simplifiedMultisetAlternation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3428;
			this.simplifiedTerm();
			this.state = 3439;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 350, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3430;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3429;
						this.separator();
						}
					}

					this.state = 3432;
					this.match(GqlParser.MULTISET_ALTERNATION);
					this.state = 3434;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3433;
						this.separator();
						}
					}

					this.state = 3436;
					this.simplifiedTerm();
					}
					}
				}
				this.state = 3441;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 350, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedTerm(): SimplifiedTermContext {
		let localctx: SimplifiedTermContext = new SimplifiedTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 496, GqlParser.RULE_simplifiedTerm);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3442;
			this.simplifiedFactorLow();
			this.state = 3448;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 351, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3443;
					this.separator();
					this.state = 3444;
					this.simplifiedFactorLow();
					}
					}
				}
				this.state = 3450;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 351, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedFactorLow(): SimplifiedFactorLowContext {
		let localctx: SimplifiedFactorLowContext = new SimplifiedFactorLowContext(this, this._ctx, this.state);
		this.enterRule(localctx, 498, GqlParser.RULE_simplifiedFactorLow);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3451;
			this.simplifiedFactorHigh();
			this.state = 3462;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 354, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3453;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3452;
						this.separator();
						}
					}

					this.state = 3455;
					this.match(GqlParser.AMPERSAND);
					this.state = 3457;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3456;
						this.separator();
						}
					}

					this.state = 3459;
					this.simplifiedFactorHigh();
					}
					}
				}
				this.state = 3464;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 354, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedFactorHigh(): SimplifiedFactorHighContext {
		let localctx: SimplifiedFactorHighContext = new SimplifiedFactorHighContext(this, this._ctx, this.state);
		this.enterRule(localctx, 500, GqlParser.RULE_simplifiedFactorHigh);
		try {
			this.state = 3468;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 355, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3465;
				this.simplifiedTertiary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3466;
				this.simplifiedQuntified();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3467;
				this.simplifiedQuestioned();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedQuntified(): SimplifiedQuntifiedContext {
		let localctx: SimplifiedQuntifiedContext = new SimplifiedQuntifiedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 502, GqlParser.RULE_simplifiedQuntified);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3470;
			this.simplifiedTertiary();
			this.state = 3471;
			this.separator();
			this.state = 3472;
			this.graphPatternQuantifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedQuestioned(): SimplifiedQuestionedContext {
		let localctx: SimplifiedQuestionedContext = new SimplifiedQuestionedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 504, GqlParser.RULE_simplifiedQuestioned);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3474;
			this.simplifiedTertiary();
			this.state = 3475;
			this.match(GqlParser.QUESTION_MARK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		let localctx: SimplifiedTertiaryContext = new SimplifiedTertiaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 506, GqlParser.RULE_simplifiedTertiary);
		try {
			this.state = 3479;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 356, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3477;
				this.simplifiedDirectionOverride();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3478;
				this.simplifiedSecondary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedDirectionOverride(): SimplifiedDirectionOverrideContext {
		let localctx: SimplifiedDirectionOverrideContext = new SimplifiedDirectionOverrideContext(this, this._ctx, this.state);
		this.enterRule(localctx, 508, GqlParser.RULE_simplifiedDirectionOverride);
		try {
			this.state = 3488;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 357, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3481;
				this.simplifiedOverrideLeft();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3482;
				this.simplifiedOverrideUndirected();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3483;
				this.simplifiedOverrideRight();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3484;
				this.simplifiedOverrideLeftOrUndirected();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3485;
				this.simplifiedOverrideUndirectedOrRight();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3486;
				this.simplifiedOverrideLeftOrRight();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3487;
				this.simplifiedOverrideAnyDirection();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideLeft(): SimplifiedOverrideLeftContext {
		let localctx: SimplifiedOverrideLeftContext = new SimplifiedOverrideLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 510, GqlParser.RULE_simplifiedOverrideLeft);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3490;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 3492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3491;
				this.separator();
				}
			}

			this.state = 3494;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideUndirected(): SimplifiedOverrideUndirectedContext {
		let localctx: SimplifiedOverrideUndirectedContext = new SimplifiedOverrideUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 512, GqlParser.RULE_simplifiedOverrideUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3496;
			this.match(GqlParser.TILDE);
			this.state = 3498;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3497;
				this.separator();
				}
			}

			this.state = 3500;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideRight(): SimplifiedOverrideRightContext {
		let localctx: SimplifiedOverrideRightContext = new SimplifiedOverrideRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 514, GqlParser.RULE_simplifiedOverrideRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3502;
			this.simplifiedSecondary();
			this.state = 3504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3503;
				this.separator();
				}
			}

			this.state = 3506;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideLeftOrUndirected(): SimplifiedOverrideLeftOrUndirectedContext {
		let localctx: SimplifiedOverrideLeftOrUndirectedContext = new SimplifiedOverrideLeftOrUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 516, GqlParser.RULE_simplifiedOverrideLeftOrUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3508;
			this.match(GqlParser.LEFT_ARROW_TILDE);
			this.state = 3510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3509;
				this.separator();
				}
			}

			this.state = 3512;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideUndirectedOrRight(): SimplifiedOverrideUndirectedOrRightContext {
		let localctx: SimplifiedOverrideUndirectedOrRightContext = new SimplifiedOverrideUndirectedOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 518, GqlParser.RULE_simplifiedOverrideUndirectedOrRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3514;
			this.match(GqlParser.TILDE);
			this.state = 3516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3515;
				this.separator();
				}
			}

			this.state = 3518;
			this.simplifiedSecondary();
			this.state = 3520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3519;
				this.separator();
				}
			}

			this.state = 3522;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideLeftOrRight(): SimplifiedOverrideLeftOrRightContext {
		let localctx: SimplifiedOverrideLeftOrRightContext = new SimplifiedOverrideLeftOrRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 520, GqlParser.RULE_simplifiedOverrideLeftOrRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3524;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 3526;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3525;
				this.separator();
				}
			}

			this.state = 3528;
			this.simplifiedSecondary();
			this.state = 3530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3529;
				this.separator();
				}
			}

			this.state = 3532;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedOverrideAnyDirection(): SimplifiedOverrideAnyDirectionContext {
		let localctx: SimplifiedOverrideAnyDirectionContext = new SimplifiedOverrideAnyDirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 522, GqlParser.RULE_simplifiedOverrideAnyDirection);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3534;
			this.match(GqlParser.MINUS);
			this.state = 3536;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3535;
				this.separator();
				}
			}

			this.state = 3538;
			this.simplifiedSecondary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		let localctx: SimplifiedSecondaryContext = new SimplifiedSecondaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 524, GqlParser.RULE_simplifiedSecondary);
		try {
			this.state = 3542;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
			case 56:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3540;
				this.simplifiedPrimary();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3541;
				this.simplifiedNegation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedNegation(): SimplifiedNegationContext {
		let localctx: SimplifiedNegationContext = new SimplifiedNegationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 526, GqlParser.RULE_simplifiedNegation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3544;
			this.match(GqlParser.EXCLAMATION);
			this.state = 3545;
			this.simplifiedPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simplifiedPrimary(): SimplifiedPrimaryContext {
		let localctx: SimplifiedPrimaryContext = new SimplifiedPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 528, GqlParser.RULE_simplifiedPrimary);
		let _la: number;
		try {
			this.state = 3558;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3547;
				this.labelName();
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3548;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3549;
					this.separator();
					}
				}

				this.state = 3552;
				this.simplifiedContents();
				this.state = 3554;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3553;
					this.separator();
					}
				}

				this.state = 3556;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whereClause(): WhereClauseContext {
		let localctx: WhereClauseContext = new WhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 530, GqlParser.RULE_whereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3560;
			this.match(GqlParser.WHERE);
			this.state = 3561;
			this.separator();
			this.state = 3562;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldClause(): YieldClauseContext {
		let localctx: YieldClauseContext = new YieldClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 532, GqlParser.RULE_yieldClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3564;
			this.match(GqlParser.YIELD);
			this.state = 3565;
			this.separator();
			this.state = 3566;
			this.yieldItemList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItemList(): YieldItemListContext {
		let localctx: YieldItemListContext = new YieldItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 534, GqlParser.RULE_yieldItemList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3568;
			this.yieldItem();
			this.state = 3577;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3570;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3569;
						this.separator();
						}
					}

					this.state = 3572;
					this.match(GqlParser.COMMA);
					this.state = 3574;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3573;
						this.separator();
						}
					}

					this.state = 3576;
					this.yieldItem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3579;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 373, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItem(): YieldItemContext {
		let localctx: YieldItemContext = new YieldItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 536, GqlParser.RULE_yieldItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3581;
			this.yieldItemName();
			this.state = 3585;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 374, this._ctx) ) {
			case 1:
				{
				this.state = 3582;
				this.separator();
				this.state = 3583;
				this.yieldItemAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItemName(): YieldItemNameContext {
		let localctx: YieldItemNameContext = new YieldItemNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 538, GqlParser.RULE_yieldItemName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3587;
			this.fieldName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public yieldItemAlias(): YieldItemAliasContext {
		let localctx: YieldItemAliasContext = new YieldItemAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 540, GqlParser.RULE_yieldItemAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3589;
			this.match(GqlParser.AS);
			this.state = 3590;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let localctx: GroupByClauseContext = new GroupByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 542, GqlParser.RULE_groupByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3592;
			this.match(GqlParser.GROUP);
			this.state = 3593;
			this.separator();
			this.state = 3594;
			this.match(GqlParser.BY);
			this.state = 3595;
			this.separator();
			this.state = 3596;
			this.groupingElementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingElementList(): GroupingElementListContext {
		let localctx: GroupingElementListContext = new GroupingElementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 544, GqlParser.RULE_groupingElementList);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3612;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3598;
				this.groupingElement();
				this.state = 3607;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3600;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 3599;
							this.separator();
							}
						}

						this.state = 3602;
						this.match(GqlParser.COMMA);
						this.state = 3604;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 3603;
							this.separator();
							}
						}

						this.state = 3606;
						this.groupingElement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3609;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 377, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3611;
				this.emptyGroupingSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingElement(): GroupingElementContext {
		let localctx: GroupingElementContext = new GroupingElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 546, GqlParser.RULE_groupingElement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3614;
			this.bindingVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public emptyGroupingSet(): EmptyGroupingSetContext {
		let localctx: EmptyGroupingSetContext = new EmptyGroupingSetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 548, GqlParser.RULE_emptyGroupingSet);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3616;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3618;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3617;
				this.separator();
				}
			}

			this.state = 3620;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let localctx: OrderByClauseContext = new OrderByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 550, GqlParser.RULE_orderByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3622;
			this.match(GqlParser.ORDER);
			this.state = 3623;
			this.separator();
			this.state = 3624;
			this.match(GqlParser.BY);
			this.state = 3625;
			this.separator();
			this.state = 3626;
			this.sortSpecList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public aggregateFunction(): AggregateFunctionContext {
		let localctx: AggregateFunctionContext = new AggregateFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 552, GqlParser.RULE_aggregateFunction);
		try {
			this.state = 3634;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 380, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3628;
				this.match(GqlParser.COUNT);
				this.state = 3629;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3630;
				this.match(GqlParser.ASTERISK);
				this.state = 3631;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3632;
				this.generalSetFunction();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3633;
				this.binarySetFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalSetFunction(): GeneralSetFunctionContext {
		let localctx: GeneralSetFunctionContext = new GeneralSetFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 554, GqlParser.RULE_generalSetFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3636;
			this.generalSetFunctionType();
			this.state = 3637;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3639;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3638;
				this.separator();
				}
			}

			this.state = 3644;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===119) {
				{
				this.state = 3641;
				this.setQuantifier();
				this.state = 3642;
				this.separator();
				}
			}

			this.state = 3646;
			this.valueExpr();
			this.state = 3648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3647;
				this.separator();
				}
			}

			this.state = 3650;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalSetFunctionType(): GeneralSetFunctionTypeContext {
		let localctx: GeneralSetFunctionTypeContext = new GeneralSetFunctionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 556, GqlParser.RULE_generalSetFunctionType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3652;
			_la = this._input.LA(1);
			if(!(((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 136314881) !== 0) || _la===183 || _la===184 || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 11) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setQuantifier(): SetQuantifierContext {
		let localctx: SetQuantifierContext = new SetQuantifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 558, GqlParser.RULE_setQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3654;
			_la = this._input.LA(1);
			if(!(_la===62 || _la===119)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public binarySetFunction(): BinarySetFunctionContext {
		let localctx: BinarySetFunctionContext = new BinarySetFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 560, GqlParser.RULE_binarySetFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3656;
			_la = this._input.LA(1);
			if(!(_la===208 || _la===209)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dependantValueExpr(): DependantValueExprContext {
		let localctx: DependantValueExprContext = new DependantValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 562, GqlParser.RULE_dependantValueExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===119) {
				{
				this.state = 3658;
				this.setQuantifier();
				this.state = 3659;
				this.separator();
				}
			}

			this.state = 3663;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public independentValueExpr(): IndependentValueExprContext {
		let localctx: IndependentValueExprContext = new IndependentValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 564, GqlParser.RULE_independentValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3665;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sortSpecList(): SortSpecListContext {
		let localctx: SortSpecListContext = new SortSpecListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 566, GqlParser.RULE_sortSpecList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3667;
			this.sortSpec();
			this.state = 3676;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3668;
						this.separator();
						}
					}

					this.state = 3671;
					this.match(GqlParser.COMMA);
					this.state = 3673;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3672;
						this.separator();
						}
					}

					this.state = 3675;
					this.sortSpec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3678;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 387, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sortSpec(): SortSpecContext {
		let localctx: SortSpecContext = new SortSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 568, GqlParser.RULE_sortSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3680;
			this.sortKey();
			this.state = 3684;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 388, this._ctx) ) {
			case 1:
				{
				this.state = 3681;
				this.separator();
				this.state = 3682;
				this.orderingSpec();
				}
				break;
			}
			this.state = 3689;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				{
				this.state = 3686;
				this.separator();
				this.state = 3687;
				this.nullOrdering();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sortKey(): SortKeyContext {
		let localctx: SortKeyContext = new SortKeyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 570, GqlParser.RULE_sortKey);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3691;
			this.aggregatingValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderingSpec(): OrderingSpecContext {
		let localctx: OrderingSpecContext = new OrderingSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 572, GqlParser.RULE_orderingSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3693;
			_la = this._input.LA(1);
			if(!(_la===68 || _la===69 || _la===116 || _la===117)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullOrdering(): NullOrderingContext {
		let localctx: NullOrderingContext = new NullOrderingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 574, GqlParser.RULE_nullOrdering);
		try {
			this.state = 3703;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3695;
				this.match(GqlParser.NULLS);
				this.state = 3696;
				this.separator();
				this.state = 3697;
				this.match(GqlParser.FIRST);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3699;
				this.match(GqlParser.NULLS);
				this.state = 3700;
				this.separator();
				this.state = 3701;
				this.match(GqlParser.LAST);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let localctx: LimitClauseContext = new LimitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 576, GqlParser.RULE_limitClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3705;
			this.match(GqlParser.LIMIT);
			this.state = 3706;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public offsetClause(): OffsetClauseContext {
		let localctx: OffsetClauseContext = new OffsetClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 578, GqlParser.RULE_offsetClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3708;
			this.offsetSynonym();
			this.state = 3709;
			this.separator();
			this.state = 3710;
			this.unsignedIntSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public offsetSynonym(): OffsetSynonymContext {
		let localctx: OffsetSynonymContext = new OffsetSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 580, GqlParser.RULE_offsetSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3712;
			_la = this._input.LA(1);
			if(!(_la===197 || _la===231)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeSpec(): GraphTypeSpecContext {
		let localctx: GraphTypeSpecContext = new GraphTypeSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 582, GqlParser.RULE_graphTypeSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3716;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===339) {
				{
				this.state = 3714;
				this.match(GqlParser.PROPERTY);
				this.state = 3715;
				this.separator();
				}
			}

			this.state = 3718;
			this.match(GqlParser.GRAPH);
			this.state = 3719;
			this.separator();
			this.state = 3720;
			this.match(GqlParser.TYPE);
			this.state = 3721;
			this.separator();
			this.state = 3722;
			this.nestedGraphTypeSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		let localctx: NestedGraphTypeSpecContext = new NestedGraphTypeSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 584, GqlParser.RULE_nestedGraphTypeSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3724;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 3726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3725;
				this.separator();
				}
			}

			this.state = 3728;
			this.graphTypeSpecBody();
			this.state = 3730;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3729;
				this.separator();
				}
			}

			this.state = 3732;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeSpecBody(): GraphTypeSpecBodyContext {
		let localctx: GraphTypeSpecBodyContext = new GraphTypeSpecBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 586, GqlParser.RULE_graphTypeSpecBody);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3734;
			this.elementTypeDefList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementTypeDefList(): ElementTypeDefListContext {
		let localctx: ElementTypeDefListContext = new ElementTypeDefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 588, GqlParser.RULE_elementTypeDefList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3736;
			this.elementTypeDef();
			this.state = 3747;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 396, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3738;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3737;
						this.separator();
						}
					}

					this.state = 3740;
					this.match(GqlParser.COMMA);
					this.state = 3742;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 3741;
						this.separator();
						}
					}

					this.state = 3744;
					this.elementTypeDef();
					}
					}
				}
				this.state = 3749;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 396, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementTypeDef(): ElementTypeDefContext {
		let localctx: ElementTypeDefContext = new ElementTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 590, GqlParser.RULE_elementTypeDef);
		try {
			this.state = 3752;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 397, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3750;
				this.nodeTypeDef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3751;
				this.edgeTypeDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeDef(): NodeTypeDefContext {
		let localctx: NodeTypeDefContext = new NodeTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 592, GqlParser.RULE_nodeTypeDef);
		try {
			this.state = 3759;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3754;
				this.nodeTypePattern();
				}
				break;
			case 335:
			case 355:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3755;
				this.nodeSynonym();
				this.state = 3756;
				this.separator();
				this.state = 3757;
				this.nodeTypePhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypePattern(): NodeTypePatternContext {
		let localctx: NodeTypePatternContext = new NodeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 594, GqlParser.RULE_nodeTypePattern);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3761;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3762;
				this.separator();
				}
			}

			this.state = 3765;
			this.nodeTypeName();
			this.state = 3766;
			this.separator();
			this.state = 3767;
			this.nodeTypeFiller();
			this.state = 3769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3768;
				this.separator();
				}
			}

			this.state = 3771;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypePhrase(): NodeTypePhraseContext {
		let localctx: NodeTypePhraseContext = new NodeTypePhraseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 596, GqlParser.RULE_nodeTypePhrase);
		let _la: number;
		try {
			this.state = 3784;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 353:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===353) {
					{
					this.state = 3773;
					this.match(GqlParser.TYPE);
					this.state = 3774;
					this.separator();
					}
				}

				this.state = 3777;
				this.nodeTypeName();
				this.state = 3781;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 402, this._ctx) ) {
				case 1:
					{
					this.state = 3778;
					this.separator();
					this.state = 3779;
					this.nodeTypeFiller();
					}
					break;
				}
				}
				break;
			case 32:
			case 40:
			case 167:
			case 326:
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3783;
				this.nodeTypeFiller();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeName(): NodeTypeNameContext {
		let localctx: NodeTypeNameContext = new NodeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 598, GqlParser.RULE_nodeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3786;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeFiller(): NodeTypeFillerContext {
		let localctx: NodeTypeFillerContext = new NodeTypeFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 600, GqlParser.RULE_nodeTypeFiller);
		try {
			this.state = 3794;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3788;
				this.nodeTypeLabelSetDef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3789;
				this.nodeTypePropertyTypeSetDef();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3790;
				this.nodeTypeLabelSetDef();
				this.state = 3791;
				this.separator();
				this.state = 3792;
				this.nodeTypePropertyTypeSetDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeLabelSetDef(): NodeTypeLabelSetDefContext {
		let localctx: NodeTypeLabelSetDefContext = new NodeTypeLabelSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 602, GqlParser.RULE_nodeTypeLabelSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3796;
			this.labelSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypePropertyTypeSetDef(): NodeTypePropertyTypeSetDefContext {
		let localctx: NodeTypePropertyTypeSetDefContext = new NodeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 604, GqlParser.RULE_nodeTypePropertyTypeSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3798;
			this.propertyTypeSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeDef(): EdgeTypeDefContext {
		let localctx: EdgeTypeDefContext = new EdgeTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 606, GqlParser.RULE_edgeTypeDef);
		let _la: number;
		try {
			this.state = 3810;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3800;
				this.edgeTypePattern();
				}
				break;
			case 317:
			case 318:
			case 341:
			case 354:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3804;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===317 || _la===354) {
					{
					this.state = 3801;
					this.edgeKind();
					this.state = 3802;
					this.separator();
					}
				}

				this.state = 3806;
				this.edgeSynonym();
				this.state = 3807;
				this.separator();
				this.state = 3808;
				this.edgeTypePhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypePattern(): EdgeTypePatternContext {
		let localctx: EdgeTypePatternContext = new EdgeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 608, GqlParser.RULE_edgeTypePattern);
		try {
			this.state = 3814;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 407, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3812;
				this.fullEdgeTypePattern();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3813;
				this.abbreviatedEdgeTypePattern();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypePhrase(): EdgeTypePhraseContext {
		let localctx: EdgeTypePhraseContext = new EdgeTypePhraseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 610, GqlParser.RULE_edgeTypePhrase);
		let _la: number;
		try {
			this.state = 3830;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 353:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3818;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===353) {
					{
					this.state = 3816;
					this.match(GqlParser.TYPE);
					this.state = 3817;
					this.separator();
					}
				}

				this.state = 3820;
				this.edgeTypeName();
				{
				this.state = 3821;
				this.separator();
				this.state = 3822;
				this.edgeTypeFiller();
				this.state = 3823;
				this.separator();
				this.state = 3824;
				this.endpointDef();
				}
				}
				break;
			case 32:
			case 40:
			case 167:
			case 326:
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3826;
				this.edgeTypeFiller();
				this.state = 3827;
				this.separator();
				this.state = 3828;
				this.endpointDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeName(): EdgeTypeNameContext {
		let localctx: EdgeTypeNameContext = new EdgeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 612, GqlParser.RULE_edgeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3832;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeFiller(): EdgeTypeFillerContext {
		let localctx: EdgeTypeFillerContext = new EdgeTypeFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 614, GqlParser.RULE_edgeTypeFiller);
		try {
			this.state = 3840;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 410, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3834;
				this.edgeTypeLabelSetDef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3835;
				this.edgeTypePropertyTypeSetDef();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3836;
				this.edgeTypeLabelSetDef();
				this.state = 3837;
				this.separator();
				this.state = 3838;
				this.edgeTypePropertyTypeSetDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypeLabelSetDef(): EdgeTypeLabelSetDefContext {
		let localctx: EdgeTypeLabelSetDefContext = new EdgeTypeLabelSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 616, GqlParser.RULE_edgeTypeLabelSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3842;
			this.labelSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeTypePropertyTypeSetDef(): EdgeTypePropertyTypeSetDefContext {
		let localctx: EdgeTypePropertyTypeSetDefContext = new EdgeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 618, GqlParser.RULE_edgeTypePropertyTypeSetDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3844;
			this.propertyTypeSetDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePattern(): FullEdgeTypePatternContext {
		let localctx: FullEdgeTypePatternContext = new FullEdgeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 620, GqlParser.RULE_fullEdgeTypePattern);
		try {
			this.state = 3849;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 411, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3846;
				this.fullEdgeTypePatternPointingRight();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3847;
				this.fullEdgeTypePatternPointingLeft();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3848;
				this.fullEdgeTypePatternUndirected();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePatternPointingRight(): FullEdgeTypePatternPointingRightContext {
		let localctx: FullEdgeTypePatternPointingRightContext = new FullEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 622, GqlParser.RULE_fullEdgeTypePatternPointingRight);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3851;
			this.sourceNodeTypeRef();
			this.state = 3852;
			this.arcTypePointingRight();
			this.state = 3853;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePatternPointingLeft(): FullEdgeTypePatternPointingLeftContext {
		let localctx: FullEdgeTypePatternPointingLeftContext = new FullEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 624, GqlParser.RULE_fullEdgeTypePatternPointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3855;
			this.destinationNodeTypeRef();
			this.state = 3856;
			this.arcTypePointingLeft();
			this.state = 3857;
			this.sourceNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullEdgeTypePatternUndirected(): FullEdgeTypePatternUndirectedContext {
		let localctx: FullEdgeTypePatternUndirectedContext = new FullEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 626, GqlParser.RULE_fullEdgeTypePatternUndirected);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3859;
			this.sourceNodeTypeRef();
			this.state = 3860;
			this.arcTypeUndirected();
			this.state = 3861;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypePointingRight(): ArcTypePointingRightContext {
		let localctx: ArcTypePointingRightContext = new ArcTypePointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 628, GqlParser.RULE_arcTypePointingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3863;
			this.match(GqlParser.MINUS_LEFT_BRACKET);
			this.state = 3865;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3864;
				this.separator();
				}
			}

			this.state = 3867;
			this.arcTypeFiller();
			this.state = 3869;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3868;
				this.separator();
				}
			}

			this.state = 3871;
			this.match(GqlParser.BRACKET_RIGHT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypePointingLeft(): ArcTypePointingLeftContext {
		let localctx: ArcTypePointingLeftContext = new ArcTypePointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 630, GqlParser.RULE_arcTypePointingLeft);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3873;
			this.match(GqlParser.LEFT_ARROW_BRACKET);
			this.state = 3875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3874;
				this.separator();
				}
			}

			this.state = 3877;
			this.arcTypeFiller();
			this.state = 3879;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3878;
				this.separator();
				}
			}

			this.state = 3881;
			this.match(GqlParser.RIGHT_BRACKET_MINUS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypeUndirected(): ArcTypeUndirectedContext {
		let localctx: ArcTypeUndirectedContext = new ArcTypeUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 632, GqlParser.RULE_arcTypeUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3883;
			this.match(GqlParser.TILDE_LEFT_BRACKET);
			this.state = 3885;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3884;
				this.separator();
				}
			}

			this.state = 3887;
			this.arcTypeFiller();
			this.state = 3889;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3888;
				this.separator();
				}
			}

			this.state = 3891;
			this.match(GqlParser.RIGHT_BRACKET_TILDE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arcTypeFiller(): ArcTypeFillerContext {
		let localctx: ArcTypeFillerContext = new ArcTypeFillerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 634, GqlParser.RULE_arcTypeFiller);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3893;
			this.edgeTypeName();
			this.state = 3895;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3894;
				this.separator();
				}
			}

			this.state = 3897;
			this.edgeTypeFiller();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePattern(): AbbreviatedEdgeTypePatternContext {
		let localctx: AbbreviatedEdgeTypePatternContext = new AbbreviatedEdgeTypePatternContext(this, this._ctx, this.state);
		this.enterRule(localctx, 636, GqlParser.RULE_abbreviatedEdgeTypePattern);
		try {
			this.state = 3902;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3899;
				this.abbreviatedEdgeTypePatternPointingRight();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3900;
				this.abbreviatedEdgeTypePatternPointingLeft();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3901;
				this.abbreviatedEdgeTypePatternUndirected();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePatternPointingRight(): AbbreviatedEdgeTypePatternPointingRightContext {
		let localctx: AbbreviatedEdgeTypePatternPointingRightContext = new AbbreviatedEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 638, GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3904;
			this.sourceNodeTypeRef();
			this.state = 3906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3905;
				this.separator();
				}
			}

			this.state = 3908;
			this.match(GqlParser.RIGHT_ARROW);
			this.state = 3910;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3909;
				this.separator();
				}
			}

			this.state = 3912;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePatternPointingLeft(): AbbreviatedEdgeTypePatternPointingLeftContext {
		let localctx: AbbreviatedEdgeTypePatternPointingLeftContext = new AbbreviatedEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 640, GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3914;
			this.destinationNodeTypeRef();
			this.state = 3916;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3915;
				this.separator();
				}
			}

			this.state = 3918;
			this.match(GqlParser.LEFT_ARROW);
			this.state = 3920;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3919;
				this.separator();
				}
			}

			this.state = 3922;
			this.sourceNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abbreviatedEdgeTypePatternUndirected(): AbbreviatedEdgeTypePatternUndirectedContext {
		let localctx: AbbreviatedEdgeTypePatternUndirectedContext = new AbbreviatedEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 642, GqlParser.RULE_abbreviatedEdgeTypePatternUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3924;
			this.sourceNodeTypeRef();
			this.state = 3926;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3925;
				this.separator();
				}
			}

			this.state = 3928;
			this.match(GqlParser.TILDE);
			this.state = 3930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3929;
				this.separator();
				}
			}

			this.state = 3932;
			this.destinationNodeTypeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeTypeRef(): NodeTypeRefContext {
		let localctx: NodeTypeRefContext = new NodeTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 644, GqlParser.RULE_nodeTypeRef);
		try {
			this.state = 3936;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3934;
				this.sourceNodeTypeRef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3935;
				this.destinationNodeTypeRef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		let localctx: SourceNodeTypeRefContext = new SourceNodeTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 646, GqlParser.RULE_sourceNodeTypeRef);
		let _la: number;
		try {
			this.state = 3959;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 432, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3938;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3939;
					this.separator();
					}
				}

				this.state = 3942;
				this.sourceNodeTypeName();
				this.state = 3944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3943;
					this.separator();
					}
				}

				this.state = 3946;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3948;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3950;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 429, this._ctx) ) {
				case 1:
					{
					this.state = 3949;
					this.separator();
					}
					break;
				}
				this.state = 3953;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
					{
					this.state = 3952;
					this.nodeTypeFiller();
					}
				}

				this.state = 3956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3955;
					this.separator();
					}
				}

				this.state = 3958;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		let localctx: DestinationNodeTypeRefContext = new DestinationNodeTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 648, GqlParser.RULE_destinationNodeTypeRef);
		let _la: number;
		try {
			this.state = 3982;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 438, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3961;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3962;
					this.separator();
					}
				}

				this.state = 3965;
				this.destinationNodeTypeName();
				this.state = 3967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3966;
					this.separator();
					}
				}

				this.state = 3969;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3971;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 3973;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 435, this._ctx) ) {
				case 1:
					{
					this.state = 3972;
					this.separator();
					}
					break;
				}
				this.state = 3976;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
					{
					this.state = 3975;
					this.nodeTypeFiller();
					}
				}

				this.state = 3979;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 3978;
					this.separator();
					}
				}

				this.state = 3981;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeKind(): EdgeKindContext {
		let localctx: EdgeKindContext = new EdgeKindContext(this, this._ctx, this.state);
		this.enterRule(localctx, 650, GqlParser.RULE_edgeKind);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3984;
			_la = this._input.LA(1);
			if(!(_la===317 || _la===354)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointDef(): EndpointDefContext {
		let localctx: EndpointDefContext = new EndpointDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 652, GqlParser.RULE_endpointDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3986;
			this.match(GqlParser.CONNECTING);
			this.state = 3987;
			this.enpointPairDef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enpointPairDef(): EnpointPairDefContext {
		let localctx: EnpointPairDefContext = new EnpointPairDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 654, GqlParser.RULE_enpointPairDef);
		try {
			this.state = 3993;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 439, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3989;
				this.endpointPairDefPointingRight();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3990;
				this.endpointPairDefPointingLeft();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3991;
				this.endpointPairDefUndirected();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3992;
				this.abbreviatedEdgeTypePattern();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointPairDefPointingRight(): EndpointPairDefPointingRightContext {
		let localctx: EndpointPairDefPointingRightContext = new EndpointPairDefPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 656, GqlParser.RULE_endpointPairDefPointingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3995;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 3997;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 3996;
				this.separator();
				}
			}

			this.state = 3999;
			this.sourceNodeTypeName();
			this.state = 4001;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4000;
				this.separator();
				}
			}

			this.state = 4003;
			this.connectorPointingRight();
			this.state = 4005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4004;
				this.separator();
				}
			}

			this.state = 4007;
			this.destinationNodeTypeName();
			this.state = 4009;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4008;
				this.separator();
				}
			}

			this.state = 4011;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointPairDefPointingLeft(): EndpointPairDefPointingLeftContext {
		let localctx: EndpointPairDefPointingLeftContext = new EndpointPairDefPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 658, GqlParser.RULE_endpointPairDefPointingLeft);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4013;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4014;
				this.separator();
				}
			}

			this.state = 4017;
			this.destinationNodeTypeName();
			this.state = 4019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4018;
				this.separator();
				}
			}

			this.state = 4021;
			this.connectorPointingLeft();
			this.state = 4023;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4022;
				this.separator();
				}
			}

			this.state = 4025;
			this.sourceNodeTypeName();
			this.state = 4027;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4026;
				this.separator();
				}
			}

			this.state = 4029;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public endpointPairDefUndirected(): EndpointPairDefUndirectedContext {
		let localctx: EndpointPairDefUndirectedContext = new EndpointPairDefUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 660, GqlParser.RULE_endpointPairDefUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4031;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 4033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4032;
				this.separator();
				}
			}

			this.state = 4035;
			this.sourceNodeTypeName();
			this.state = 4037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4036;
				this.separator();
				}
			}

			this.state = 4039;
			this.connectorUndirected();
			this.state = 4041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4040;
				this.separator();
				}
			}

			this.state = 4043;
			this.destinationNodeTypeName();
			this.state = 4045;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4044;
				this.separator();
				}
			}

			this.state = 4047;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectorPointingRight(): ConnectorPointingRightContext {
		let localctx: ConnectorPointingRightContext = new ConnectorPointingRightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 662, GqlParser.RULE_connectorPointingRight);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4049;
			_la = this._input.LA(1);
			if(!(_la===10 || _la===350)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectorPointingLeft(): ConnectorPointingLeftContext {
		let localctx: ConnectorPointingLeftContext = new ConnectorPointingLeftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 664, GqlParser.RULE_connectorPointingLeft);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4051;
			this.match(GqlParser.LEFT_ARROW);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectorUndirected(): ConnectorUndirectedContext {
		let localctx: ConnectorUndirectedContext = new ConnectorUndirectedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 666, GqlParser.RULE_connectorUndirected);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4053;
			_la = this._input.LA(1);
			if(!(_la===50 || _la===350)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		let localctx: SourceNodeTypeNameContext = new SourceNodeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 668, GqlParser.RULE_sourceNodeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4055;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		let localctx: DestinationNodeTypeNameContext = new DestinationNodeTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 670, GqlParser.RULE_destinationNodeTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4057;
			this.elementTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelSetDef(): LabelSetDefContext {
		let localctx: LabelSetDefContext = new LabelSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 672, GqlParser.RULE_labelSetDef);
		let _la: number;
		try {
			this.state = 4076;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 326:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4059;
				this.match(GqlParser.LABEL);
				this.state = 4060;
				this.separator();
				this.state = 4061;
				this.labelName();
				}
				break;
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4063;
				this.match(GqlParser.LABELS);
				this.state = 4064;
				this.separator();
				this.state = 4065;
				this.labelSetSpec();
				}
				break;
			case 167:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4067;
				this.match(GqlParser.IS);
				this.state = 4068;
				this.separator();
				this.state = 4069;
				this.labelSetSpec();
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4071;
				this.match(GqlParser.COLON);
				this.state = 4073;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 4072;
					this.separator();
					}
				}

				this.state = 4075;
				this.labelSetSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyTypeSetDef(): PropertyTypeSetDefContext {
		let localctx: PropertyTypeSetDefContext = new PropertyTypeSetDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 674, GqlParser.RULE_propertyTypeSetDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4078;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 4080;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 454, this._ctx) ) {
			case 1:
				{
				this.state = 4079;
				this.separator();
				}
				break;
			}
			this.state = 4083;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 515) !== 0)) {
				{
				this.state = 4082;
				this.propertyTypeDefList();
				}
			}

			this.state = 4086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4085;
				this.separator();
				}
			}

			this.state = 4088;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyTypeDefList(): PropertyTypeDefListContext {
		let localctx: PropertyTypeDefListContext = new PropertyTypeDefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 676, GqlParser.RULE_propertyTypeDefList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4090;
			this.propertyTypeDef();
			this.state = 4101;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 459, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4092;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4091;
						this.separator();
						}
					}

					this.state = 4094;
					this.match(GqlParser.COMMA);
					this.state = 4096;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4095;
						this.separator();
						}
					}

					this.state = 4098;
					this.propertyTypeDef();
					}
					}
				}
				this.state = 4103;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 459, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyTypeDef(): PropertyTypeDefContext {
		let localctx: PropertyTypeDefContext = new PropertyTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 678, GqlParser.RULE_propertyTypeDef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4104;
			this.propertyName();
			this.state = 4108;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 460, this._ctx) ) {
			case 1:
				{
				this.state = 4105;
				this.separator();
				this.state = 4106;
				this.typed();
				}
				break;
			}
			this.state = 4110;
			this.separator();
			this.state = 4111;
			this.propertyValueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyValueType(): PropertyValueTypeContext {
		let localctx: PropertyValueTypeContext = new PropertyValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 680, GqlParser.RULE_propertyValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4113;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableType(): BindingTableTypeContext {
		let localctx: BindingTableTypeContext = new BindingTableTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 682, GqlParser.RULE_bindingTableType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4117;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===312) {
				{
				this.state = 4115;
				this.match(GqlParser.BINDING);
				this.state = 4116;
				this.separator();
				}
			}

			this.state = 4119;
			this.match(GqlParser.TABLE);
			this.state = 4120;
			this.separator();
			this.state = 4121;
			this.fieldTypesSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueType(): ValueTypeContext {
		let localctx: ValueTypeContext = new ValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 684, GqlParser.RULE_valueType);
		try {
			this.state = 4126;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 462, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4123;
				this.predefinedType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4124;
				this.constructedType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4125;
				this.dynamicUnionType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public typed(): TypedContext {
		let localctx: TypedContext = new TypedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 686, GqlParser.RULE_typed);
		try {
			this.state = 4131;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 33:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4128;
				this.match(GqlParser.DOUBLE_COLON);
				}
				break;
			case 248:
				this.enterOuterAlt(localctx, 2);
				{
				{
				this.state = 4129;
				this.match(GqlParser.TYPED);
				this.state = 4130;
				this.separator();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedType(): PredefinedTypeContext {
		let localctx: PredefinedTypeContext = new PredefinedTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 688, GqlParser.RULE_predefinedType);
		try {
			this.state = 4140;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 77:
			case 78:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4133;
				this.booleanType();
				}
				break;
			case 238:
			case 265:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4134;
				this.charStringType();
				}
				break;
			case 76:
			case 83:
			case 264:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4135;
				this.byteStringType();
				}
				break;
			case 74:
			case 75:
			case 112:
			case 113:
			case 120:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 214:
			case 228:
			case 232:
			case 233:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4136;
				this.numericType();
				}
				break;
			case 109:
			case 122:
			case 174:
			case 243:
			case 244:
			case 273:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4137;
				this.temporalType();
				}
				break;
			case 44:
			case 198:
			case 312:
			case 317:
			case 318:
			case 323:
			case 335:
			case 339:
			case 341:
			case 347:
			case 354:
			case 355:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4138;
				this.refValueType();
				}
				break;
			case 205:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4139;
				this.pathValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanType(): BooleanTypeContext {
		let localctx: BooleanTypeContext = new BooleanTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 690, GqlParser.RULE_booleanType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4142;
			_la = this._input.LA(1);
			if(!(_la===77 || _la===78)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4146;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 465, this._ctx) ) {
			case 1:
				{
				this.state = 4143;
				this.separator();
				this.state = 4144;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringType(): CharStringTypeContext {
		let localctx: CharStringTypeContext = new CharStringTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 692, GqlParser.RULE_charStringType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4148;
			_la = this._input.LA(1);
			if(!(_la===238 || _la===265)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4159;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				{
				this.state = 4149;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 4150;
					this.separator();
					}
				}

				this.state = 4153;
				this.maxLength();
				this.state = 4155;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 4154;
					this.separator();
					}
				}

				this.state = 4157;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
			this.state = 4164;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 469, this._ctx) ) {
			case 1:
				{
				this.state = 4161;
				this.separator();
				this.state = 4162;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringType(): ByteStringTypeContext {
		let localctx: ByteStringTypeContext = new ByteStringTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 694, GqlParser.RULE_byteStringType);
		let _la: number;
		try {
			this.state = 4230;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 83:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4166;
				this.match(GqlParser.BYTES);
				this.state = 4187;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 475, this._ctx) ) {
				case 1:
					{
					this.state = 4167;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 4169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4168;
						this.separator();
						}
					}

					this.state = 4179;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 473, this._ctx) ) {
					case 1:
						{
						this.state = 4171;
						this.minLength();
						this.state = 4173;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 4172;
							this.separator();
							}
						}

						this.state = 4175;
						this.match(GqlParser.COMMA);
						this.state = 4177;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 4176;
							this.separator();
							}
						}

						}
						break;
					}
					this.state = 4181;
					this.maxLength();
					this.state = 4183;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4182;
						this.separator();
						}
					}

					this.state = 4185;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 4192;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 476, this._ctx) ) {
				case 1:
					{
					this.state = 4189;
					this.separator();
					this.state = 4190;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 76:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4194;
				this.match(GqlParser.BINARY);
				this.state = 4205;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 479, this._ctx) ) {
				case 1:
					{
					this.state = 4195;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 4197;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4196;
						this.separator();
						}
					}

					this.state = 4199;
					this.fixedLength();
					this.state = 4201;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4200;
						this.separator();
						}
					}

					this.state = 4203;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 4210;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 480, this._ctx) ) {
				case 1:
					{
					this.state = 4207;
					this.separator();
					this.state = 4208;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 264:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4212;
				this.match(GqlParser.VARBINARY);
				this.state = 4223;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 483, this._ctx) ) {
				case 1:
					{
					this.state = 4213;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 4215;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4214;
						this.separator();
						}
					}

					this.state = 4217;
					this.maxLength();
					this.state = 4219;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4218;
						this.separator();
						}
					}

					this.state = 4221;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 4228;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 484, this._ctx) ) {
				case 1:
					{
					this.state = 4225;
					this.separator();
					this.state = 4226;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public minLength(): MinLengthContext {
		let localctx: MinLengthContext = new MinLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 696, GqlParser.RULE_minLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4232;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public maxLength(): MaxLengthContext {
		let localctx: MaxLengthContext = new MaxLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 698, GqlParser.RULE_maxLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4234;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fixedLength(): FixedLengthContext {
		let localctx: FixedLengthContext = new FixedLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 700, GqlParser.RULE_fixedLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4236;
			this.match(GqlParser.UNSIGNED_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericType(): NumericTypeContext {
		let localctx: NumericTypeContext = new NumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 702, GqlParser.RULE_numericType);
		try {
			this.state = 4240;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 74:
			case 75:
			case 112:
			case 113:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 228:
			case 232:
			case 233:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4238;
				this.exactNumericType();
				}
				break;
			case 120:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 214:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4239;
				this.approximateNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exactNumericType(): ExactNumericTypeContext {
		let localctx: ExactNumericTypeContext = new ExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 704, GqlParser.RULE_exactNumericType);
		try {
			this.state = 4244;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 74:
			case 75:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 228:
			case 232:
			case 233:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4242;
				this.binaryExactNumericType();
				}
				break;
			case 112:
			case 113:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4243;
				this.decimalExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public binaryExactNumericType(): BinaryExactNumericTypeContext {
		let localctx: BinaryExactNumericTypeContext = new BinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 706, GqlParser.RULE_binaryExactNumericType);
		try {
			this.state = 4248;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 74:
			case 75:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 228:
			case 232:
			case 233:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4246;
				this.signedBinaryExactNumericType();
				}
				break;
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4247;
				this.unsignedBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signedBinaryExactNumericType(): SignedBinaryExactNumericTypeContext {
		let localctx: SignedBinaryExactNumericTypeContext = new SignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 708, GqlParser.RULE_signedBinaryExactNumericType);
		let _la: number;
		try {
			this.state = 4321;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 153:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4250;
				this.match(GqlParser.INT8);
				this.state = 4254;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 489, this._ctx) ) {
				case 1:
					{
					this.state = 4251;
					this.separator();
					this.state = 4252;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 155:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4256;
				this.match(GqlParser.INT16);
				this.state = 4260;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 490, this._ctx) ) {
				case 1:
					{
					this.state = 4257;
					this.separator();
					this.state = 4258;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 157:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4262;
				this.match(GqlParser.INT32);
				this.state = 4266;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 491, this._ctx) ) {
				case 1:
					{
					this.state = 4263;
					this.separator();
					this.state = 4264;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 159:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4268;
				this.match(GqlParser.INT64);
				this.state = 4272;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 492, this._ctx) ) {
				case 1:
					{
					this.state = 4269;
					this.separator();
					this.state = 4270;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 161:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4274;
				this.match(GqlParser.INT128);
				this.state = 4278;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 493, this._ctx) ) {
				case 1:
					{
					this.state = 4275;
					this.separator();
					this.state = 4276;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 163:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4280;
				this.match(GqlParser.INT256);
				this.state = 4284;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 494, this._ctx) ) {
				case 1:
					{
					this.state = 4281;
					this.separator();
					this.state = 4282;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 233:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4286;
				this.match(GqlParser.SMALLINT);
				this.state = 4290;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 495, this._ctx) ) {
				case 1:
					{
					this.state = 4287;
					this.separator();
					this.state = 4288;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 151:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4292;
				this.match(GqlParser.INT);
				this.state = 4303;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 498, this._ctx) ) {
				case 1:
					{
					this.state = 4293;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 4295;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4294;
						this.separator();
						}
					}

					this.state = 4297;
					this.precision();
					this.state = 4299;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4298;
						this.separator();
						}
					}

					this.state = 4301;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 4308;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 499, this._ctx) ) {
				case 1:
					{
					this.state = 4305;
					this.separator();
					this.state = 4306;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 75:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4310;
				this.match(GqlParser.BIGINT);
				this.state = 4314;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 500, this._ctx) ) {
				case 1:
					{
					this.state = 4311;
					this.separator();
					this.state = 4312;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 74:
			case 152:
			case 154:
			case 156:
			case 158:
			case 160:
			case 162:
			case 164:
			case 228:
			case 232:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 4318;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===228) {
					{
					this.state = 4316;
					this.match(GqlParser.SIGNED);
					this.state = 4317;
					this.separator();
					}
				}

				this.state = 4320;
				this.verboseBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedBinaryExactNumericType(): UnsignedBinaryExactNumericTypeContext {
		let localctx: UnsignedBinaryExactNumericTypeContext = new UnsignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 710, GqlParser.RULE_unsignedBinaryExactNumericType);
		let _la: number;
		try {
			this.state = 4393;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 251:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4323;
				this.match(GqlParser.UINT8);
				this.state = 4327;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 503, this._ctx) ) {
				case 1:
					{
					this.state = 4324;
					this.separator();
					this.state = 4325;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 252:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4329;
				this.match(GqlParser.UINT16);
				this.state = 4333;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 504, this._ctx) ) {
				case 1:
					{
					this.state = 4330;
					this.separator();
					this.state = 4331;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 253:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4335;
				this.match(GqlParser.UINT32);
				this.state = 4339;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 505, this._ctx) ) {
				case 1:
					{
					this.state = 4336;
					this.separator();
					this.state = 4337;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 254:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4341;
				this.match(GqlParser.UINT64);
				this.state = 4345;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 506, this._ctx) ) {
				case 1:
					{
					this.state = 4342;
					this.separator();
					this.state = 4343;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 255:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4347;
				this.match(GqlParser.UINT128);
				this.state = 4351;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 507, this._ctx) ) {
				case 1:
					{
					this.state = 4348;
					this.separator();
					this.state = 4349;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 256:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4353;
				this.match(GqlParser.UINT256);
				this.state = 4357;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 508, this._ctx) ) {
				case 1:
					{
					this.state = 4354;
					this.separator();
					this.state = 4355;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 262:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4359;
				this.match(GqlParser.USMALLINT);
				this.state = 4363;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 509, this._ctx) ) {
				case 1:
					{
					this.state = 4360;
					this.separator();
					this.state = 4361;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 250:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4365;
				this.match(GqlParser.UINT);
				this.state = 4376;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 512, this._ctx) ) {
				case 1:
					{
					this.state = 4366;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 4368;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4367;
						this.separator();
						}
					}

					this.state = 4370;
					this.precision();
					this.state = 4372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4371;
						this.separator();
						}
					}

					this.state = 4374;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 4381;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 513, this._ctx) ) {
				case 1:
					{
					this.state = 4378;
					this.separator();
					this.state = 4379;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 249:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4383;
				this.match(GqlParser.UBIGINT);
				this.state = 4387;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 514, this._ctx) ) {
				case 1:
					{
					this.state = 4384;
					this.separator();
					this.state = 4385;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 259:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 4389;
				this.match(GqlParser.UNSIGNED);
				this.state = 4390;
				this.separator();
				this.state = 4391;
				this.verboseBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext {
		let localctx: VerboseBinaryExactNumericTypeContext = new VerboseBinaryExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 712, GqlParser.RULE_verboseBinaryExactNumericType);
		let _la: number;
		try {
			this.state = 4466;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 154:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4395;
				this.match(GqlParser.INTEGER8);
				this.state = 4399;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 516, this._ctx) ) {
				case 1:
					{
					this.state = 4396;
					this.separator();
					this.state = 4397;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 156:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4401;
				this.match(GqlParser.INTEGER16);
				this.state = 4405;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 517, this._ctx) ) {
				case 1:
					{
					this.state = 4402;
					this.separator();
					this.state = 4403;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 158:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4407;
				this.match(GqlParser.INTEGER32);
				this.state = 4411;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 518, this._ctx) ) {
				case 1:
					{
					this.state = 4408;
					this.separator();
					this.state = 4409;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 160:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4413;
				this.match(GqlParser.INTEGER64);
				this.state = 4417;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 519, this._ctx) ) {
				case 1:
					{
					this.state = 4414;
					this.separator();
					this.state = 4415;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 162:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4419;
				this.match(GqlParser.INTEGER128);
				this.state = 4423;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 520, this._ctx) ) {
				case 1:
					{
					this.state = 4420;
					this.separator();
					this.state = 4421;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 164:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4425;
				this.match(GqlParser.INTEGER256);
				this.state = 4429;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 521, this._ctx) ) {
				case 1:
					{
					this.state = 4426;
					this.separator();
					this.state = 4427;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 232:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4431;
				this.match(GqlParser.SMALL);
				this.state = 4432;
				this.separator();
				this.state = 4433;
				this.match(GqlParser.INTEGER);
				this.state = 4437;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 522, this._ctx) ) {
				case 1:
					{
					this.state = 4434;
					this.separator();
					this.state = 4435;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 152:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4439;
				this.match(GqlParser.INTEGER);
				this.state = 4450;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 525, this._ctx) ) {
				case 1:
					{
					this.state = 4440;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 4442;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4441;
						this.separator();
						}
					}

					this.state = 4444;
					this.precision();
					this.state = 4446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4445;
						this.separator();
						}
					}

					this.state = 4448;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 4455;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 526, this._ctx) ) {
				case 1:
					{
					this.state = 4452;
					this.separator();
					this.state = 4453;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 74:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4457;
				this.match(GqlParser.BIG);
				this.state = 4458;
				this.separator();
				this.state = 4459;
				this.match(GqlParser.INTEGER);
				this.state = 4464;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 528, this._ctx) ) {
				case 1:
					{
					this.state = 4461;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4460;
						this.separator();
						}
					}

					this.state = 4463;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public decimalExactNumericType(): DecimalExactNumericTypeContext {
		let localctx: DecimalExactNumericTypeContext = new DecimalExactNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 714, GqlParser.RULE_decimalExactNumericType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4468;
			_la = this._input.LA(1);
			if(!(_la===112 || _la===113)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4489;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 535, this._ctx) ) {
			case 1:
				{
				this.state = 4469;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 4471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 4470;
					this.separator();
					}
				}

				this.state = 4473;
				this.precision();
				this.state = 4482;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 533, this._ctx) ) {
				case 1:
					{
					this.state = 4475;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4474;
						this.separator();
						}
					}

					this.state = 4477;
					this.match(GqlParser.COMMA);
					this.state = 4479;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4478;
						this.separator();
						}
					}

					this.state = 4481;
					this.scale();
					}
					break;
				}
				this.state = 4485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 4484;
					this.separator();
					}
				}

				this.state = 4487;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
			this.state = 4494;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 536, this._ctx) ) {
			case 1:
				{
				this.state = 4491;
				this.separator();
				this.state = 4492;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precision(): PrecisionContext {
		let localctx: PrecisionContext = new PrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 716, GqlParser.RULE_precision);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4496;
			this.match(GqlParser.UNSIGNED_DECIMAL_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public scale(): ScaleContext {
		let localctx: ScaleContext = new ScaleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 718, GqlParser.RULE_scale);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4498;
			this.match(GqlParser.UNSIGNED_DECIMAL_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public approximateNumericType(): ApproximateNumericTypeContext {
		let localctx: ApproximateNumericTypeContext = new ApproximateNumericTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 720, GqlParser.RULE_approximateNumericType);
		let _la: number;
		try {
			this.state = 4573;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 134:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4500;
				this.match(GqlParser.FLOAT16);
				this.state = 4504;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 537, this._ctx) ) {
				case 1:
					{
					this.state = 4501;
					this.separator();
					this.state = 4502;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 135:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4506;
				this.match(GqlParser.FLOAT32);
				this.state = 4510;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 538, this._ctx) ) {
				case 1:
					{
					this.state = 4507;
					this.separator();
					this.state = 4508;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 136:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4512;
				this.match(GqlParser.FLOAT64);
				this.state = 4516;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 539, this._ctx) ) {
				case 1:
					{
					this.state = 4513;
					this.separator();
					this.state = 4514;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 137:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4518;
				this.match(GqlParser.FLOAT128);
				this.state = 4522;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 540, this._ctx) ) {
				case 1:
					{
					this.state = 4519;
					this.separator();
					this.state = 4520;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 138:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4524;
				this.match(GqlParser.FLOAT256);
				this.state = 4528;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 541, this._ctx) ) {
				case 1:
					{
					this.state = 4525;
					this.separator();
					this.state = 4526;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 133:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4530;
				this.match(GqlParser.FLOAT);
				this.state = 4551;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 547, this._ctx) ) {
				case 1:
					{
					this.state = 4531;
					this.match(GqlParser.LEFT_PAREN);
					this.state = 4533;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4532;
						this.separator();
						}
					}

					this.state = 4535;
					this.precision();
					this.state = 4544;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 545, this._ctx) ) {
					case 1:
						{
						this.state = 4537;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 4536;
							this.separator();
							}
						}

						this.state = 4539;
						this.match(GqlParser.COMMA);
						this.state = 4541;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 4540;
							this.separator();
							}
						}

						this.state = 4543;
						this.scale();
						}
						break;
					}
					this.state = 4547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4546;
						this.separator();
						}
					}

					this.state = 4549;
					this.match(GqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 4556;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 548, this._ctx) ) {
				case 1:
					{
					this.state = 4553;
					this.separator();
					this.state = 4554;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 214:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4558;
				this.match(GqlParser.REAL);
				this.state = 4562;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 549, this._ctx) ) {
				case 1:
					{
					this.state = 4559;
					this.separator();
					this.state = 4560;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 120:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4564;
				this.match(GqlParser.DOUBLE);
				this.state = 4568;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 550, this._ctx) ) {
				case 1:
					{
					this.state = 4565;
					this.separator();
					this.state = 4566;
					this.match(GqlParser.PRECISION);
					}
					break;
				}
				{
				this.state = 4570;
				this.separator();
				this.state = 4571;
				this.notNull();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalType(): TemporalTypeContext {
		let localctx: TemporalTypeContext = new TemporalTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 722, GqlParser.RULE_temporalType);
		try {
			this.state = 4577;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 109:
			case 174:
			case 243:
			case 244:
			case 273:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4575;
				this.temporalInstantType();
				}
				break;
			case 122:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4576;
				this.temporalDurationType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalInstantType(): TemporalInstantTypeContext {
		let localctx: TemporalInstantTypeContext = new TemporalInstantTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 724, GqlParser.RULE_temporalInstantType);
		try {
			this.state = 4584;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 553, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4579;
				this.dateTimeType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4580;
				this.localDateTimeType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4581;
				this.dateType();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4582;
				this.timeType();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4583;
				this.localTimeType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalDurationType(): TemporalDurationTypeContext {
		let localctx: TemporalDurationTypeContext = new TemporalDurationTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 726, GqlParser.RULE_temporalDurationType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4586;
			this.durationType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeType(): DateTimeTypeContext {
		let localctx: DateTimeTypeContext = new DateTimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 728, GqlParser.RULE_dateTimeType);
		try {
			this.state = 4606;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 273:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4588;
				this.match(GqlParser.ZONED);
				this.state = 4589;
				this.separator();
				this.state = 4590;
				this.match(GqlParser.DATETIME);
				this.state = 4594;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 554, this._ctx) ) {
				case 1:
					{
					this.state = 4591;
					this.separator();
					this.state = 4592;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4596;
				this.match(GqlParser.TIMESTAMP);
				this.state = 4597;
				this.separator();
				this.state = 4598;
				this.match(GqlParser.WITH);
				this.state = 4599;
				this.separator();
				this.state = 4600;
				this.match(GqlParser.TIMEZONE);
				this.state = 4604;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 555, this._ctx) ) {
				case 1:
					{
					this.state = 4601;
					this.separator();
					this.state = 4602;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localDateTimeType(): LocalDateTimeTypeContext {
		let localctx: LocalDateTimeTypeContext = new LocalDateTimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 730, GqlParser.RULE_localDateTimeType);
		let _la: number;
		try {
			this.state = 4629;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 174:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4608;
				this.match(GqlParser.LOCAL);
				this.state = 4609;
				this.separator();
				this.state = 4610;
				this.match(GqlParser.DATETIME);
				this.state = 4614;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 557, this._ctx) ) {
				case 1:
					{
					this.state = 4611;
					this.separator();
					this.state = 4612;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4616;
				this.match(GqlParser.TIMESTAMP);
				{
				this.state = 4618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 4617;
					this.separator();
					}
				}

				this.state = 4620;
				this.match(GqlParser.WITHOUT);
				this.state = 4621;
				this.separator();
				this.state = 4622;
				this.match(GqlParser.TIMEZONE);
				}
				this.state = 4627;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 559, this._ctx) ) {
				case 1:
					{
					this.state = 4624;
					this.separator();
					this.state = 4625;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateType(): DateTypeContext {
		let localctx: DateTypeContext = new DateTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 732, GqlParser.RULE_dateType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4631;
			this.match(GqlParser.DATE);
			this.state = 4635;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 561, this._ctx) ) {
			case 1:
				{
				this.state = 4632;
				this.separator();
				this.state = 4633;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeType(): TimeTypeContext {
		let localctx: TimeTypeContext = new TimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 734, GqlParser.RULE_timeType);
		try {
			this.state = 4655;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 273:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4637;
				this.match(GqlParser.ZONED);
				this.state = 4638;
				this.separator();
				this.state = 4639;
				this.match(GqlParser.TIME);
				this.state = 4643;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 562, this._ctx) ) {
				case 1:
					{
					this.state = 4640;
					this.separator();
					this.state = 4641;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4645;
				this.match(GqlParser.TIME);
				this.state = 4646;
				this.separator();
				this.state = 4647;
				this.match(GqlParser.WITH);
				this.state = 4648;
				this.separator();
				this.state = 4649;
				this.match(GqlParser.TIMEZONE);
				this.state = 4653;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 563, this._ctx) ) {
				case 1:
					{
					this.state = 4650;
					this.separator();
					this.state = 4651;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localTimeType(): LocalTimeTypeContext {
		let localctx: LocalTimeTypeContext = new LocalTimeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 736, GqlParser.RULE_localTimeType);
		try {
			this.state = 4675;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 174:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4657;
				this.match(GqlParser.LOCAL);
				this.state = 4658;
				this.separator();
				this.state = 4659;
				this.match(GqlParser.TIME);
				this.state = 4663;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 565, this._ctx) ) {
				case 1:
					{
					this.state = 4660;
					this.separator();
					this.state = 4661;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4665;
				this.match(GqlParser.TIME);
				this.state = 4666;
				this.separator();
				this.state = 4667;
				this.match(GqlParser.WITHOUT);
				this.state = 4668;
				this.separator();
				this.state = 4669;
				this.match(GqlParser.TIMEZONE);
				this.state = 4673;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 566, this._ctx) ) {
				case 1:
					{
					this.state = 4670;
					this.separator();
					this.state = 4671;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationType(): DurationTypeContext {
		let localctx: DurationTypeContext = new DurationTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 738, GqlParser.RULE_durationType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4677;
			this.match(GqlParser.DURATION);
			this.state = 4681;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 568, this._ctx) ) {
			case 1:
				{
				this.state = 4678;
				this.separator();
				this.state = 4679;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public refValueType(): RefValueTypeContext {
		let localctx: RefValueTypeContext = new RefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 740, GqlParser.RULE_refValueType);
		try {
			this.state = 4687;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 569, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4683;
				this.graphRefValueType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4684;
				this.bindingTableRefValueType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4685;
				this.nodeRefValueType();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4686;
				this.edgeRefValueType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphRefValueType(): GraphRefValueTypeContext {
		let localctx: GraphRefValueTypeContext = new GraphRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 742, GqlParser.RULE_graphRefValueType);
		try {
			this.state = 4691;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4689;
				this.openGraphRefValueType();
				}
				break;
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4690;
				this.closedGraphRefValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openGraphRefValueType(): OpenGraphRefValueTypeContext {
		let localctx: OpenGraphRefValueTypeContext = new OpenGraphRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 744, GqlParser.RULE_openGraphRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4693;
			this.match(GqlParser.OPEN);
			this.state = 4697;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 571, this._ctx) ) {
			case 1:
				{
				this.state = 4694;
				this.separator();
				this.state = 4695;
				this.match(GqlParser.PROPERTY);
				}
				break;
			}
			this.state = 4699;
			this.separator();
			this.state = 4700;
			this.match(GqlParser.GRAPH);
			this.state = 4704;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 572, this._ctx) ) {
			case 1:
				{
				this.state = 4701;
				this.separator();
				this.state = 4702;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedGraphRefValueType(): ClosedGraphRefValueTypeContext {
		let localctx: ClosedGraphRefValueTypeContext = new ClosedGraphRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 746, GqlParser.RULE_closedGraphRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4706;
			this.graphTypeSpec();
			this.state = 4710;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 573, this._ctx) ) {
			case 1:
				{
				this.state = 4707;
				this.separator();
				this.state = 4708;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableRefValueType(): BindingTableRefValueTypeContext {
		let localctx: BindingTableRefValueTypeContext = new BindingTableRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 748, GqlParser.RULE_bindingTableRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4712;
			this.bindingTableType();
			this.state = 4716;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 574, this._ctx) ) {
			case 1:
				{
				this.state = 4713;
				this.separator();
				this.state = 4714;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeRefValueType(): NodeRefValueTypeContext {
		let localctx: NodeRefValueTypeContext = new NodeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 750, GqlParser.RULE_nodeRefValueType);
		try {
			this.state = 4720;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 198:
			case 335:
			case 355:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4718;
				this.openNodeRefValueType();
				}
				break;
			case 44:
			case 317:
			case 318:
			case 341:
			case 354:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4719;
				this.closedNodeRefValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openNodeRefValueType(): OpenNodeRefValueTypeContext {
		let localctx: OpenNodeRefValueTypeContext = new OpenNodeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 752, GqlParser.RULE_openNodeRefValueType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4724;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===198) {
				{
				this.state = 4722;
				this.match(GqlParser.OPEN);
				this.state = 4723;
				this.separator();
				}
			}

			this.state = 4726;
			this.nodeSynonym();
			this.state = 4730;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 577, this._ctx) ) {
			case 1:
				{
				this.state = 4727;
				this.separator();
				this.state = 4728;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedNodeRefValueType(): ClosedNodeRefValueTypeContext {
		let localctx: ClosedNodeRefValueTypeContext = new ClosedNodeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 754, GqlParser.RULE_closedNodeRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4732;
			this.edgeTypeDef();
			this.state = 4736;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 578, this._ctx) ) {
			case 1:
				{
				this.state = 4733;
				this.separator();
				this.state = 4734;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeRefValueType(): EdgeRefValueTypeContext {
		let localctx: EdgeRefValueTypeContext = new EdgeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 756, GqlParser.RULE_edgeRefValueType);
		try {
			this.state = 4740;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 579, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4738;
				this.openEdgeRefValueType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4739;
				this.closedEdgeRefValueType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openEdgeRefValueType(): OpenEdgeRefValueTypeContext {
		let localctx: OpenEdgeRefValueTypeContext = new OpenEdgeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 758, GqlParser.RULE_openEdgeRefValueType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4744;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===198) {
				{
				this.state = 4742;
				this.match(GqlParser.OPEN);
				this.state = 4743;
				this.separator();
				}
			}

			this.state = 4746;
			this.edgeSynonym();
			this.state = 4750;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 581, this._ctx) ) {
			case 1:
				{
				this.state = 4747;
				this.separator();
				this.state = 4748;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedEdgeRefValueType(): ClosedEdgeRefValueTypeContext {
		let localctx: ClosedEdgeRefValueTypeContext = new ClosedEdgeRefValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 760, GqlParser.RULE_closedEdgeRefValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4752;
			this.edgeTypeDef();
			this.state = 4756;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 582, this._ctx) ) {
			case 1:
				{
				this.state = 4753;
				this.separator();
				this.state = 4754;
				this.notNull();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constructedType(): ConstructedTypeContext {
		let localctx: ConstructedTypeContext = new ConstructedTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 762, GqlParser.RULE_constructedType);
		try {
			this.state = 4760;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 583, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4758;
				this.listValueType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4759;
				this.recordType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueType(): ListValueTypeContext {
		let localctx: ListValueTypeContext = new ListValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 764, GqlParser.RULE_listValueType);
		let _la: number;
		try {
			this.state = 4803;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 66:
			case 142:
			case 172:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4762;
				this.listValueTypeName();
				this.state = 4763;
				this.match(GqlParser.LEFT_ANGLE_BRACKET);
				this.state = 4764;
				this.predefinedType();
				this.state = 4765;
				this.match(GqlParser.RIGHT_ANGLE_BRACKET);
				this.state = 4776;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 586, this._ctx) ) {
				case 1:
					{
					this.state = 4766;
					this.match(GqlParser.LEFT_BRACKET);
					this.state = 4768;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4767;
						this.separator();
						}
					}

					this.state = 4770;
					this.maxLength();
					this.state = 4772;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4771;
						this.separator();
						}
					}

					this.state = 4774;
					this.match(GqlParser.RIGHT_BRACKET);
					}
					break;
				}
				this.state = 4781;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 587, this._ctx) ) {
				case 1:
					{
					this.state = 4778;
					this.separator();
					this.state = 4779;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 44:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 83:
			case 109:
			case 112:
			case 113:
			case 120:
			case 122:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 174:
			case 198:
			case 205:
			case 214:
			case 228:
			case 232:
			case 233:
			case 238:
			case 243:
			case 244:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 259:
			case 262:
			case 264:
			case 265:
			case 273:
			case 312:
			case 317:
			case 318:
			case 323:
			case 335:
			case 339:
			case 341:
			case 347:
			case 354:
			case 355:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4783;
				this.predefinedType();
				this.state = 4784;
				this.separator();
				this.state = 4785;
				this.listValueTypeName();
				this.state = 4796;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 590, this._ctx) ) {
				case 1:
					{
					this.state = 4786;
					this.match(GqlParser.LEFT_BRACKET);
					this.state = 4788;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4787;
						this.separator();
						}
					}

					this.state = 4790;
					this.maxLength();
					this.state = 4792;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4791;
						this.separator();
						}
					}

					this.state = 4794;
					this.match(GqlParser.RIGHT_BRACKET);
					}
					break;
				}
				this.state = 4801;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 591, this._ctx) ) {
				case 1:
					{
					this.state = 4798;
					this.separator();
					this.state = 4799;
					this.notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueTypeName(): ListValueTypeNameContext {
		let localctx: ListValueTypeNameContext = new ListValueTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 766, GqlParser.RULE_listValueTypeName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4807;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===142) {
				{
				this.state = 4805;
				this.match(GqlParser.GROUP);
				this.state = 4806;
				this.separator();
				}
			}

			this.state = 4809;
			this.listValueTypeNameSynonym();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueTypeNameSynonym(): ListValueTypeNameSynonymContext {
		let localctx: ListValueTypeNameSynonymContext = new ListValueTypeNameSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 768, GqlParser.RULE_listValueTypeNameSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4811;
			_la = this._input.LA(1);
			if(!(_la===66 || _la===172)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordType(): RecordTypeContext {
		let localctx: RecordTypeContext = new RecordTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 770, GqlParser.RULE_recordType);
		let _la: number;
		try {
			this.state = 4833;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 598, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4815;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===198) {
					{
					this.state = 4813;
					this.match(GqlParser.OPEN);
					this.state = 4814;
					this.separator();
					}
				}

				this.state = 4817;
				this.match(GqlParser.RECORD);
				this.state = 4821;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 595, this._ctx) ) {
				case 1:
					{
					this.state = 4818;
					this.separator();
					this.state = 4819;
					this.notNull();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===215) {
					{
					this.state = 4823;
					this.match(GqlParser.RECORD);
					this.state = 4824;
					this.separator();
					}
				}

				this.state = 4827;
				this.fieldTypesSpec();
				this.state = 4831;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 597, this._ctx) ) {
				case 1:
					{
					this.state = 4828;
					this.separator();
					this.state = 4829;
					this.notNull();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldTypesSpec(): FieldTypesSpecContext {
		let localctx: FieldTypesSpecContext = new FieldTypesSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 772, GqlParser.RULE_fieldTypesSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4835;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 4837;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 599, this._ctx) ) {
			case 1:
				{
				this.state = 4836;
				this.separator();
				}
				break;
			}
			this.state = 4840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 515) !== 0)) {
				{
				this.state = 4839;
				this.fieldTypeList();
				}
			}

			this.state = 4843;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4842;
				this.separator();
				}
			}

			this.state = 4845;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldTypeList(): FieldTypeListContext {
		let localctx: FieldTypeListContext = new FieldTypeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 774, GqlParser.RULE_fieldTypeList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4847;
			this.fieldType();
			this.state = 4856;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4849;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4848;
						this.separator();
						}
					}

					this.state = 4851;
					this.match(GqlParser.COMMA);
					this.state = 4853;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4852;
						this.separator();
						}
					}

					this.state = 4855;
					this.fieldType();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4858;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 604, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dynamicUnionType(): DynamicUnionTypeContext {
		let localctx: DynamicUnionTypeContext = new DynamicUnionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 776, GqlParser.RULE_dynamicUnionType);
		try {
			this.state = 4863;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 605, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4860;
				this.openDynamicUnionType();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4861;
				this.dynamicPropertyValueType();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4862;
				this.closedDynamicUnionType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public openDynamicUnionType(): OpenDynamicUnionTypeContext {
		let localctx: OpenDynamicUnionTypeContext = new OpenDynamicUnionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 778, GqlParser.RULE_openDynamicUnionType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4865;
			this.match(GqlParser.ANY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dynamicPropertyValueType(): DynamicPropertyValueTypeContext {
		let localctx: DynamicPropertyValueTypeContext = new DynamicPropertyValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 780, GqlParser.RULE_dynamicPropertyValueType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4869;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===65) {
				{
				this.state = 4867;
				this.match(GqlParser.ANY);
				this.state = 4868;
				this.separator();
				}
			}

			this.state = 4871;
			this.match(GqlParser.PROPERTY);
			this.state = 4872;
			this.separator();
			this.state = 4873;
			this.match(GqlParser.VALUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public closedDynamicUnionType(): ClosedDynamicUnionTypeContext {
		let localctx: ClosedDynamicUnionTypeContext = new ClosedDynamicUnionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 782, GqlParser.RULE_closedDynamicUnionType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4875;
			this.match(GqlParser.ANY);
			this.state = 4876;
			this.separator();
			this.state = 4877;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 4879;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4878;
				this.separator();
				}
			}

			this.state = 4881;
			this.componentTypeList();
			this.state = 4883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 4882;
				this.separator();
				}
			}

			this.state = 4885;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public componentTypeList(): ComponentTypeListContext {
		let localctx: ComponentTypeListContext = new ComponentTypeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 784, GqlParser.RULE_componentTypeList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4887;
			this.componentType();
			this.state = 4898;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 611, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4889;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4888;
						this.separator();
						}
					}

					this.state = 4891;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 4893;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 4892;
						this.separator();
						}
					}

					this.state = 4895;
					this.componentType();
					}
					}
				}
				this.state = 4900;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 611, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public componentType(): ComponentTypeContext {
		let localctx: ComponentTypeContext = new ComponentTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 786, GqlParser.RULE_componentType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4901;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueType(): PathValueTypeContext {
		let localctx: PathValueTypeContext = new PathValueTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 788, GqlParser.RULE_pathValueType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4903;
			this.match(GqlParser.PATH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public notNull(): NotNullContext {
		let localctx: NotNullContext = new NotNullContext(this, this._ctx, this.state);
		this.enterRule(localctx, 790, GqlParser.RULE_notNull);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4905;
			this.match(GqlParser.NOT);
			this.state = 4906;
			this.separator();
			this.state = 4907;
			this.match(GqlParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldType(): FieldTypeContext {
		let localctx: FieldTypeContext = new FieldTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 792, GqlParser.RULE_fieldType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4909;
			this.fieldName();
			{
			this.state = 4910;
			this.separator();
			this.state = 4911;
			this.typed();
			}
			this.state = 4913;
			this.separator();
			this.state = 4914;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schemaRef(): SchemaRefContext {
		let localctx: SchemaRefContext = new SchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 794, GqlParser.RULE_schemaRef);
		try {
			this.state = 4919;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 48:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4916;
				this.absoluteCatalogSchemaRef();
				}
				break;
			case 54:
			case 55:
			case 105:
			case 146:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4917;
				this.relativeCatalogSchemaRef();
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4918;
				this.refParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public absoluteCatalogSchemaRef(): AbsoluteCatalogSchemaRefContext {
		let localctx: AbsoluteCatalogSchemaRefContext = new AbsoluteCatalogSchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 796, GqlParser.RULE_absoluteCatalogSchemaRef);
		try {
			this.state = 4925;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 613, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4921;
				this.match(GqlParser.SOLIDUS);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4922;
				this.absoluteDirectoryPath();
				this.state = 4923;
				this.schemaName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
		let localctx: CatalogSchemaParentAndNameContext = new CatalogSchemaParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 798, GqlParser.RULE_catalogSchemaParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4927;
			this.absoluteDirectoryPath();
			this.state = 4928;
			this.schemaName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public relativeCatalogSchemaRef(): RelativeCatalogSchemaRefContext {
		let localctx: RelativeCatalogSchemaRefContext = new RelativeCatalogSchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 800, GqlParser.RULE_relativeCatalogSchemaRef);
		try {
			this.state = 4934;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 54:
			case 105:
			case 146:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4930;
				this.predefinedSchemaRef();
				}
				break;
			case 55:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4931;
				this.relativeDirectoryPath();
				this.state = 4932;
				this.schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedSchemaRef(): PredefinedSchemaRefContext {
		let localctx: PredefinedSchemaRefContext = new PredefinedSchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 802, GqlParser.RULE_predefinedSchemaRef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4936;
			_la = this._input.LA(1);
			if(!(_la===54 || _la===105 || _la===146)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
		let localctx: AbsoluteDirectoryPathContext = new AbsoluteDirectoryPathContext(this, this._ctx, this.state);
		this.enterRule(localctx, 804, GqlParser.RULE_absoluteDirectoryPath);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4938;
			this.match(GqlParser.SOLIDUS);
			this.state = 4940;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 615, this._ctx) ) {
			case 1:
				{
				this.state = 4939;
				this.simpleDirectoryPath();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public relativeDirectoryPath(): RelativeDirectoryPathContext {
		let localctx: RelativeDirectoryPathContext = new RelativeDirectoryPathContext(this, this._ctx, this.state);
		this.enterRule(localctx, 806, GqlParser.RULE_relativeDirectoryPath);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4942;
			this.match(GqlParser.DOUBLE_PERIOD);
			this.state = 4954;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===48) {
				{
				this.state = 4947;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 616, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4943;
						this.match(GqlParser.SOLIDUS);
						this.state = 4944;
						this.match(GqlParser.DOUBLE_PERIOD);
						}
						}
					}
					this.state = 4949;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 616, this._ctx);
				}
				this.state = 4950;
				this.match(GqlParser.SOLIDUS);
				this.state = 4952;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 617, this._ctx) ) {
				case 1:
					{
					this.state = 4951;
					this.simpleDirectoryPath();
					}
					break;
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleDirectoryPath(): SimpleDirectoryPathContext {
		let localctx: SimpleDirectoryPathContext = new SimpleDirectoryPathContext(this, this._ctx, this.state);
		this.enterRule(localctx, 808, GqlParser.RULE_simpleDirectoryPath);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4959;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4956;
					this.directoryName();
					this.state = 4957;
					this.match(GqlParser.SOLIDUS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4961;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 619, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphRef(): GraphRefContext {
		let localctx: GraphRefContext = new GraphRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 810, GqlParser.RULE_graphRef);
		try {
			this.state = 4970;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 620, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4963;
				this.catalogObjectParentRef();
				this.state = 4964;
				this.separator();
				this.state = 4965;
				this.graphName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4967;
				this.delimitedGraphName();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4968;
				this.homeGraph();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4969;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		let localctx: CatalogGraphParentAndNameContext = new CatalogGraphParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 812, GqlParser.RULE_catalogGraphParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4975;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 621, this._ctx) ) {
			case 1:
				{
				this.state = 4972;
				this.catalogObjectParentRef();
				this.state = 4973;
				this.separator();
				}
				break;
			}
			this.state = 4977;
			this.graphName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public homeGraph(): HomeGraphContext {
		let localctx: HomeGraphContext = new HomeGraphContext(this, this._ctx, this.state);
		this.enterRule(localctx, 814, GqlParser.RULE_homeGraph);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4979;
			_la = this._input.LA(1);
			if(!(_la===144 || _la===145)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeRef(): GraphTypeRefContext {
		let localctx: GraphTypeRefContext = new GraphTypeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 816, GqlParser.RULE_graphTypeRef);
		try {
			this.state = 4983;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 622, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4981;
				this.catalogGraphTypeParentAndName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4982;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		let localctx: CatalogGraphTypeParentAndNameContext = new CatalogGraphTypeParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 818, GqlParser.RULE_catalogGraphTypeParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4988;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 623, this._ctx) ) {
			case 1:
				{
				this.state = 4985;
				this.catalogObjectParentRef();
				this.state = 4986;
				this.separator();
				}
				break;
			}
			this.state = 4990;
			this.graphTypeName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableRef(): BindingTableRefContext {
		let localctx: BindingTableRefContext = new BindingTableRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 820, GqlParser.RULE_bindingTableRef);
		try {
			this.state = 4998;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 624, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4992;
				this.catalogObjectParentRef();
				this.state = 4993;
				this.separator();
				this.state = 4994;
				this.bindingTableName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4996;
				this.delimitedBindingTableName();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4997;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogBindingTableParentAndName(): CatalogBindingTableParentAndNameContext {
		let localctx: CatalogBindingTableParentAndNameContext = new CatalogBindingTableParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 822, GqlParser.RULE_catalogBindingTableParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5003;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 625, this._ctx) ) {
			case 1:
				{
				this.state = 5000;
				this.catalogObjectParentRef();
				this.state = 5001;
				this.separator();
				}
				break;
			}
			this.state = 5005;
			this.bindingTableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureRef(): ProcedureRefContext {
		let localctx: ProcedureRefContext = new ProcedureRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 824, GqlParser.RULE_procedureRef);
		try {
			this.state = 5009;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 626, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5007;
				this.catalogProcedureParentAndName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5008;
				this.refParameter();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogProcedureParentAndName(): CatalogProcedureParentAndNameContext {
		let localctx: CatalogProcedureParentAndNameContext = new CatalogProcedureParentAndNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 826, GqlParser.RULE_catalogProcedureParentAndName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5014;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 627, this._ctx) ) {
			case 1:
				{
				this.state = 5011;
				this.catalogObjectParentRef();
				this.state = 5012;
				this.separator();
				}
				break;
			}
			this.state = 5016;
			this.procedureName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		let localctx: CatalogObjectParentRefContext = new CatalogObjectParentRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 828, GqlParser.RULE_catalogObjectParentRef);
		let _la: number;
		try {
			this.state = 5037;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 48:
			case 54:
			case 55:
			case 105:
			case 146:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5018;
				this.schemaRef();
				this.state = 5020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===48) {
					{
					this.state = 5019;
					this.match(GqlParser.SOLIDUS);
					}
				}

				this.state = 5027;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 515) !== 0)) {
					{
					{
					this.state = 5022;
					this.objectName();
					this.state = 5023;
					this.match(GqlParser.PERIOD);
					}
					}
					this.state = 5029;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 56:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5033;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5030;
					this.objectName();
					this.state = 5031;
					this.match(GqlParser.PERIOD);
					}
					}
					this.state = 5035;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 515) !== 0));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public refParameter(): RefParameterContext {
		let localctx: RefParameterContext = new RefParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 830, GqlParser.RULE_refParameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5039;
			this.parameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public externalObjectRef(): ExternalObjectRefContext {
		let localctx: ExternalObjectRefContext = new ExternalObjectRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 832, GqlParser.RULE_externalObjectRef);
		try {
			this.enterOuterAlt(localctx, 1);
			// tslint:disable-next-line:no-empty
			{
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public searchCondition(): SearchConditionContext {
		let localctx: SearchConditionContext = new SearchConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 834, GqlParser.RULE_searchCondition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5043;
			this.booleanValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predicate(): PredicateContext {
		let localctx: PredicateContext = new PredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 836, GqlParser.RULE_predicate);
		try {
			this.state = 5056;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 632, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5045;
				this.comparisonPredicate();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5046;
				this.existsPredicate();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5047;
				this.nullPredicate();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5048;
				this.valueTypePredicate();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5049;
				this.normalizedPredicate();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5050;
				this.directedPredicate();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5051;
				this.labeledPredicate();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5052;
				this.sourceOrDestinationPredicate();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5053;
				this.allDifferentPredicate();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5054;
				this.samePredicate();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 5055;
				this.propertyExistsPredicate();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonPredicate(): ComparisonPredicateContext {
		let localctx: ComparisonPredicateContext = new ComparisonPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 838, GqlParser.RULE_comparisonPredicate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5058;
			this.comparisonPredicand();
			this.state = 5060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5059;
				this.separator();
				}
			}

			this.state = 5062;
			this.comparisonPredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonPredicatePart2(): ComparisonPredicatePart2Context {
		let localctx: ComparisonPredicatePart2Context = new ComparisonPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 840, GqlParser.RULE_comparisonPredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5064;
			this.comparisonOperator();
			this.state = 5066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5065;
				this.separator();
				}
			}

			this.state = 5068;
			this.comparisonPredicand();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 842, GqlParser.RULE_comparisonOperator);
		try {
			this.state = 5076;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 635, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5070;
				this.equals();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5071;
				this.notEquals();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5072;
				this.lessThen();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5073;
				this.greaterThan();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5074;
				this.lessThanOrEquals();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5075;
				this.graterThanOrEquals();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public equals(): EqualsContext {
		let localctx: EqualsContext = new EqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 844, GqlParser.RULE_equals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5078;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public notEquals(): NotEqualsContext {
		let localctx: NotEqualsContext = new NotEqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 846, GqlParser.RULE_notEquals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5080;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 5081;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lessThen(): LessThenContext {
		let localctx: LessThenContext = new LessThenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 848, GqlParser.RULE_lessThen);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5083;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public greaterThan(): GreaterThanContext {
		let localctx: GreaterThanContext = new GreaterThanContext(this, this._ctx, this.state);
		this.enterRule(localctx, 850, GqlParser.RULE_greaterThan);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5085;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lessThanOrEquals(): LessThanOrEqualsContext {
		let localctx: LessThanOrEqualsContext = new LessThanOrEqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 852, GqlParser.RULE_lessThanOrEquals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5087;
			this.match(GqlParser.LEFT_ANGLE_BRACKET);
			this.state = 5088;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graterThanOrEquals(): GraterThanOrEqualsContext {
		let localctx: GraterThanOrEqualsContext = new GraterThanOrEqualsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 854, GqlParser.RULE_graterThanOrEquals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5090;
			this.match(GqlParser.RIGHT_ANGLE_BRACKET);
			this.state = 5091;
			this.match(GqlParser.EQUALS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonPredicand(): ComparisonPredicandContext {
		let localctx: ComparisonPredicandContext = new ComparisonPredicandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 856, GqlParser.RULE_comparisonPredicand);
		try {
			this.state = 5095;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 636, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5093;
				this.commonValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5094;
				this.booleanPredicand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public existsPredicate(): ExistsPredicateContext {
		let localctx: ExistsPredicateContext = new ExistsPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 858, GqlParser.RULE_existsPredicate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5097;
			this.match(GqlParser.EXISTS);
			this.state = 5099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5098;
				this.separator();
				}
			}

			this.state = 5142;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 646, this._ctx) ) {
			case 1:
				{
				this.state = 5101;
				this.match(GqlParser.LEFT_BRACE);
				this.state = 5103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5102;
					this.separator();
					}
				}

				this.state = 5105;
				this.graphPattern();
				this.state = 5107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5106;
					this.separator();
					}
				}

				this.state = 5109;
				this.match(GqlParser.RIGHT_BRACE);
				}
				break;
			case 2:
				{
				this.state = 5111;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 5113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5112;
					this.separator();
					}
				}

				this.state = 5115;
				this.graphPattern();
				this.state = 5117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5116;
					this.separator();
					}
				}

				this.state = 5119;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 3:
				{
				this.state = 5121;
				this.match(GqlParser.LEFT_BRACE);
				this.state = 5123;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 642, this._ctx) ) {
				case 1:
					{
					this.state = 5122;
					this.separator();
					}
					break;
				}
				this.state = 5125;
				this.matchStatmentBlock();
				this.state = 5127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5126;
					this.separator();
					}
				}

				this.state = 5129;
				this.match(GqlParser.RIGHT_BRACE);
				}
				break;
			case 4:
				{
				this.state = 5131;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 5133;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 644, this._ctx) ) {
				case 1:
					{
					this.state = 5132;
					this.separator();
					}
					break;
				}
				this.state = 5135;
				this.matchStatmentBlock();
				this.state = 5137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5136;
					this.separator();
					}
				}

				this.state = 5139;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 5:
				{
				this.state = 5141;
				this.nestedQuerySpec();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullPredicate(): NullPredicateContext {
		let localctx: NullPredicateContext = new NullPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 860, GqlParser.RULE_nullPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5144;
			this.valueExprPrimary();
			this.state = 5145;
			this.separator();
			this.state = 5146;
			this.nullPredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullPredicatePart2(): NullPredicatePart2Context {
		let localctx: NullPredicatePart2Context = new NullPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 862, GqlParser.RULE_nullPredicatePart2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5148;
			this.match(GqlParser.IS);
			this.state = 5152;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 647, this._ctx) ) {
			case 1:
				{
				this.state = 5149;
				this.separator();
				this.state = 5150;
				this.match(GqlParser.NOT);
				}
				break;
			}
			this.state = 5154;
			this.separator();
			this.state = 5155;
			this.match(GqlParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueTypePredicate(): ValueTypePredicateContext {
		let localctx: ValueTypePredicateContext = new ValueTypePredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 864, GqlParser.RULE_valueTypePredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5157;
			this.valueExprPrimary();
			this.state = 5158;
			this.separator();
			this.state = 5159;
			this.valueTypePredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
		let localctx: ValueTypePredicatePart2Context = new ValueTypePredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 866, GqlParser.RULE_valueTypePredicatePart2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5161;
			this.match(GqlParser.IS);
			this.state = 5165;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 648, this._ctx) ) {
			case 1:
				{
				this.state = 5162;
				this.separator();
				this.state = 5163;
				this.match(GqlParser.NOT);
				}
				break;
			}
			this.state = 5167;
			this.separator();
			this.state = 5168;
			this.typed();
			this.state = 5169;
			this.separator();
			this.state = 5170;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalizedPredicate(): NormalizedPredicateContext {
		let localctx: NormalizedPredicateContext = new NormalizedPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 868, GqlParser.RULE_normalizedPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5172;
			this.stringValueExpr();
			this.state = 5173;
			this.separator();
			this.state = 5174;
			this.normalizedPredicatePart2();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalizedPredicatePart2(): NormalizedPredicatePart2Context {
		let localctx: NormalizedPredicatePart2Context = new NormalizedPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 870, GqlParser.RULE_normalizedPredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5176;
			this.match(GqlParser.IS);
			this.state = 5180;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 649, this._ctx) ) {
			case 1:
				{
				this.state = 5177;
				this.separator();
				this.state = 5178;
				this.match(GqlParser.NOT);
				}
				break;
			}
			this.state = 5185;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5182;
				this.separator();
				this.state = 5183;
				this.normalForm();
				}
			}

			this.state = 5187;
			this.match(GqlParser.NORMALIZED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public directedPredicate(): DirectedPredicateContext {
		let localctx: DirectedPredicateContext = new DirectedPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 872, GqlParser.RULE_directedPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5189;
			this.elementVarRef();
			this.state = 5190;
			this.separator();
			this.state = 5191;
			this.directedPredicate();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public directedPredicatePart2(): DirectedPredicatePart2Context {
		let localctx: DirectedPredicatePart2Context = new DirectedPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 874, GqlParser.RULE_directedPredicatePart2);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5193;
			this.match(GqlParser.IS);
			this.state = 5197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5194;
				this.separator();
				this.state = 5195;
				this.match(GqlParser.NOT);
				}
			}

			this.state = 5199;
			this.match(GqlParser.DIRECTED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labeledPredicate(): LabeledPredicateContext {
		let localctx: LabeledPredicateContext = new LabeledPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 876, GqlParser.RULE_labeledPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5201;
			this.elementVarRef();
			this.state = 5202;
			this.separator();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labeledPredicatePart2(): LabeledPredicatePart2Context {
		let localctx: LabeledPredicatePart2Context = new LabeledPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 878, GqlParser.RULE_labeledPredicatePart2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5204;
			this.isLabeledOrColon();
			this.state = 5205;
			this.separator();
			this.state = 5206;
			this.labelExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isLabeledOrColon(): IsLabeledOrColonContext {
		let localctx: IsLabeledOrColonContext = new IsLabeledOrColonContext(this, this._ctx, this.state);
		this.enterRule(localctx, 880, GqlParser.RULE_isLabeledOrColon);
		try {
			this.state = 5218;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 167:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5208;
				this.match(GqlParser.IS);
				this.state = 5212;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 652, this._ctx) ) {
				case 1:
					{
					this.state = 5209;
					this.separator();
					this.state = 5210;
					this.match(GqlParser.NOT);
					}
					break;
				}
				this.state = 5214;
				this.separator();
				this.state = 5215;
				this.match(GqlParser.LABELED);
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5217;
				this.match(GqlParser.COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourceOrDestinationPredicate(): SourceOrDestinationPredicateContext {
		let localctx: SourceOrDestinationPredicateContext = new SourceOrDestinationPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 882, GqlParser.RULE_sourceOrDestinationPredicate);
		try {
			this.state = 5228;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 654, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5220;
				this.nodeRef();
				this.state = 5221;
				this.separator();
				this.state = 5222;
				this.sourcePredicatePart2();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5224;
				this.nodeRef();
				this.state = 5225;
				this.separator();
				this.state = 5226;
				this.destinationPredicatePart2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeRef(): NodeRefContext {
		let localctx: NodeRefContext = new NodeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 884, GqlParser.RULE_nodeRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5230;
			this.elementVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sourcePredicatePart2(): SourcePredicatePart2Context {
		let localctx: SourcePredicatePart2Context = new SourcePredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 886, GqlParser.RULE_sourcePredicatePart2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5232;
			this.match(GqlParser.IS);
			this.state = 5236;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 655, this._ctx) ) {
			case 1:
				{
				this.state = 5233;
				this.separator();
				this.state = 5234;
				this.match(GqlParser.NOT);
				}
				break;
			}
			this.state = 5238;
			this.separator();
			this.state = 5239;
			this.match(GqlParser.SOURCE);
			this.state = 5240;
			this.separator();
			this.state = 5241;
			this.match(GqlParser.OF);
			this.state = 5242;
			this.separator();
			this.state = 5243;
			this.edgeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public destinationPredicatePart2(): DestinationPredicatePart2Context {
		let localctx: DestinationPredicatePart2Context = new DestinationPredicatePart2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 888, GqlParser.RULE_destinationPredicatePart2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5245;
			this.match(GqlParser.IS);
			this.state = 5249;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 656, this._ctx) ) {
			case 1:
				{
				this.state = 5246;
				this.separator();
				this.state = 5247;
				this.match(GqlParser.NOT);
				}
				break;
			}
			this.state = 5251;
			this.separator();
			this.state = 5252;
			this.match(GqlParser.DESTINATION);
			this.state = 5253;
			this.match(GqlParser.OF);
			this.state = 5254;
			this.separator();
			this.state = 5255;
			this.edgeRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeRef(): EdgeRefContext {
		let localctx: EdgeRefContext = new EdgeRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 890, GqlParser.RULE_edgeRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5257;
			this.elementVarRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public allDifferentPredicate(): AllDifferentPredicateContext {
		let localctx: AllDifferentPredicateContext = new AllDifferentPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 892, GqlParser.RULE_allDifferentPredicate);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5259;
			this.match(GqlParser.ALL_DIFFERENT);
			this.state = 5260;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5262;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5261;
				this.separator();
				}
			}

			this.state = 5264;
			this.elementVarRef();
			this.state = 5273;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5266;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 5265;
						this.separator();
						}
					}

					this.state = 5268;
					this.match(GqlParser.COMMA);
					this.state = 5270;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 5269;
						this.separator();
						}
					}

					this.state = 5272;
					this.elementVarRef();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5275;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 660, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 5278;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5277;
				this.separator();
				}
			}

			this.state = 5280;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public samePredicate(): SamePredicateContext {
		let localctx: SamePredicateContext = new SamePredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 894, GqlParser.RULE_samePredicate);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5282;
			this.match(GqlParser.SAME);
			this.state = 5283;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5284;
				this.separator();
				}
			}

			this.state = 5287;
			this.elementVarRef();
			this.state = 5296;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5289;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 5288;
						this.separator();
						}
					}

					this.state = 5291;
					this.match(GqlParser.COMMA);
					this.state = 5293;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 5292;
						this.separator();
						}
					}

					this.state = 5295;
					this.elementVarRef();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5298;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 665, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 5301;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5300;
				this.separator();
				}
			}

			this.state = 5303;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyExistsPredicate(): PropertyExistsPredicateContext {
		let localctx: PropertyExistsPredicateContext = new PropertyExistsPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 896, GqlParser.RULE_propertyExistsPredicate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5305;
			this.match(GqlParser.PROPERTY_EXISTS);
			this.state = 5306;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5308;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5307;
				this.separator();
				}
			}

			this.state = 5310;
			this.elementVarRef();
			this.state = 5312;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5311;
				this.separator();
				}
			}

			this.state = 5314;
			this.match(GqlParser.COMMA);
			this.state = 5316;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5315;
				this.separator();
				}
			}

			this.state = 5318;
			this.propertyName();
			this.state = 5320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5319;
				this.separator();
				}
			}

			this.state = 5322;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueSpec(): ValueSpecContext {
		let localctx: ValueSpecContext = new ValueSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 898, GqlParser.RULE_valueSpec);
		try {
			this.state = 5326;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 367:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5324;
				this.literal();
				}
				break;
			case 35:
			case 108:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5325;
				this.parameterValueSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedValueSpec(): UnsignedValueSpecContext {
		let localctx: UnsignedValueSpecContext = new UnsignedValueSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 900, GqlParser.RULE_unsignedValueSpec);
		try {
			this.state = 5330;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5328;
				this.unsignedLiteral();
				}
				break;
			case 35:
			case 108:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5329;
				this.parameterValueSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedIntSpec(): UnsignedIntSpecContext {
		let localctx: UnsignedIntSpecContext = new UnsignedIntSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 902, GqlParser.RULE_unsignedIntSpec);
		try {
			this.state = 5334;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 379:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5332;
				this.match(GqlParser.UNSIGNED_INT);
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5333;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameterValueSpec(): ParameterValueSpecContext {
		let localctx: ParameterValueSpecContext = new ParameterValueSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 904, GqlParser.RULE_parameterValueSpec);
		try {
			this.state = 5338;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5336;
				this.parameter();
				}
				break;
			case 108:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5337;
				this.predefinedParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedParameter(): PredefinedParameterContext {
		let localctx: PredefinedParameterContext = new PredefinedParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 906, GqlParser.RULE_predefinedParameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5340;
			this.match(GqlParser.CURRENT_USER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueExpr(): ValueExprContext {
		let localctx: ValueExprContext = new ValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 908, GqlParser.RULE_valueExpr);
		try {
			this.state = 5344;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 675, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5342;
				this.commonValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5343;
				this.booleanValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonValueExpr(): CommonValueExprContext {
		let localctx: CommonValueExprContext = new CommonValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 910, GqlParser.RULE_commonValueExpr);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5367;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 679, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5346;
				this.numericValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5347;
				this.stringValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5348;
				this.dateTimeValueExpr(0);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5349;
				this.durationValueExpr(0);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5350;
				this.listValueExpr();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5351;
				this.recordValueExpr();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5352;
				this.pathValueExpr();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5353;
				this.refValueExpr();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5354;
				this.propertyName();
				this.state = 5363;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5356;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 5355;
							this.separator();
							}
						}

						this.state = 5358;
						this.match(GqlParser.PERIOD);
						this.state = 5360;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 5359;
							this.separator();
							}
						}

						this.state = 5362;
						this.propertyName();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5365;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 678, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public refValueExpr(): RefValueExprContext {
		let localctx: RefValueExprContext = new RefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 912, GqlParser.RULE_refValueExpr);
		try {
			this.state = 5373;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 680, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5369;
				this.graphRefValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5370;
				this.bindingTableRefValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5371;
				this.nodeRefValueExpr();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5372;
				this.edgeRefValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphRefValueExpr(): GraphRefValueExprContext {
		let localctx: GraphRefValueExprContext = new GraphRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 914, GqlParser.RULE_graphRefValueExpr);
		let _la: number;
		try {
			this.state = 5384;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 323:
			case 339:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===339) {
					{
					this.state = 5375;
					this.match(GqlParser.PROPERTY);
					this.state = 5376;
					this.separator();
					}
				}

				this.state = 5379;
				this.match(GqlParser.GRAPH);
				this.state = 5380;
				this.separator();
				this.state = 5381;
				this.graphExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5383;
				this.valueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableRefValueExpr(): BindingTableRefValueExprContext {
		let localctx: BindingTableRefValueExprContext = new BindingTableRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 916, GqlParser.RULE_bindingTableRefValueExpr);
		let _la: number;
		try {
			this.state = 5395;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 312:
			case 347:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===312) {
					{
					this.state = 5386;
					this.match(GqlParser.BINDING);
					this.state = 5387;
					this.separator();
					}
				}

				this.state = 5390;
				this.match(GqlParser.TABLE);
				this.state = 5391;
				this.separator();
				this.state = 5392;
				this.bindingTableExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5394;
				this.valueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeRefValueExpr(): NodeRefValueExprContext {
		let localctx: NodeRefValueExprContext = new NodeRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 918, GqlParser.RULE_nodeRefValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5397;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		let localctx: EdgeRefValueExprContext = new EdgeRefValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 920, GqlParser.RULE_edgeRefValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5399;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordValueExpr(): RecordValueExprContext {
		let localctx: RecordValueExprContext = new RecordValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 922, GqlParser.RULE_recordValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5401;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public aggregatingValueExpr(): AggregatingValueExprContext {
		let localctx: AggregatingValueExprContext = new AggregatingValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 924, GqlParser.RULE_aggregatingValueExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5403;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanValueExpr(): BooleanValueExprContext {
		let localctx: BooleanValueExprContext = new BooleanValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 926, GqlParser.RULE_booleanValueExpr);
		try {
			this.state = 5418;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 685, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5405;
				this.booleanTerm(0);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5406;
				this.booleanTerm(0);
				this.state = 5407;
				this.separator();
				this.state = 5408;
				this.match(GqlParser.OR);
				this.state = 5409;
				this.separator();
				this.state = 5410;
				this.booleanValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5412;
				this.booleanTerm(0);
				this.state = 5413;
				this.separator();
				this.state = 5414;
				this.match(GqlParser.XOR);
				this.state = 5415;
				this.separator();
				this.state = 5416;
				this.booleanValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public booleanTerm(): BooleanTermContext;
	public booleanTerm(_p: number): BooleanTermContext;
	// @RuleVersion(0)
	public booleanTerm(_p?: number): BooleanTermContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: BooleanTermContext = new BooleanTermContext(this, this._ctx, _parentState);
		let _prevctx: BooleanTermContext = localctx;
		let _startState: number = 928;
		this.enterRecursionRule(localctx, 928, GqlParser.RULE_booleanTerm, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			this.state = 5421;
			this.booleanFactor();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 5428;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 686, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new BooleanTermContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_booleanTerm);
					this.state = 5423;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 5424;
					this.match(GqlParser.AND);
					this.state = 5425;
					this.booleanFactor();
					}
					}
				}
				this.state = 5430;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 686, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanFactor(): BooleanFactorContext {
		let localctx: BooleanFactorContext = new BooleanFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 930, GqlParser.RULE_booleanFactor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===191) {
				{
				this.state = 5431;
				this.match(GqlParser.NOT);
				this.state = 5432;
				this.separator();
				}
			}

			this.state = 5435;
			this.booleanTest();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanTest(): BooleanTestContext {
		let localctx: BooleanTestContext = new BooleanTestContext(this, this._ctx, this.state);
		this.enterRule(localctx, 932, GqlParser.RULE_booleanTest);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5437;
			this.booleanPrimary();
			this.state = 5447;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 689, this._ctx) ) {
			case 1:
				{
				this.state = 5438;
				this.separator();
				this.state = 5439;
				this.match(GqlParser.IS);
				this.state = 5443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5440;
					this.separator();
					this.state = 5441;
					this.match(GqlParser.NOT);
					}
				}

				this.state = 5445;
				this.truthValue();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public truthValue(): TruthValueContext {
		let localctx: TruthValueContext = new TruthValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 934, GqlParser.RULE_truthValue);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5449;
			_la = this._input.LA(1);
			if(!(_la===130 || _la===247 || _la===258)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanPrimary(): BooleanPrimaryContext {
		let localctx: BooleanPrimaryContext = new BooleanPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 936, GqlParser.RULE_booleanPrimary);
		try {
			this.state = 5453;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 690, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5451;
				this.predicate();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5452;
				this.booleanPredicand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanPredicand(): BooleanPredicandContext {
		let localctx: BooleanPredicandContext = new BooleanPredicandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 938, GqlParser.RULE_booleanPredicand);
		try {
			this.state = 5457;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5455;
				this.paranthisedBooleanValueExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5456;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public paranthisedBooleanValueExpr(): ParanthisedBooleanValueExprContext {
		let localctx: ParanthisedBooleanValueExprContext = new ParanthisedBooleanValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 940, GqlParser.RULE_paranthisedBooleanValueExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5459;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5460;
				this.separator();
				}
			}

			this.state = 5463;
			this.booleanValueExpr();
			this.state = 5465;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5464;
				this.separator();
				}
			}

			this.state = 5467;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExpr(): NumericValueExprContext {
		let localctx: NumericValueExprContext = new NumericValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 942, GqlParser.RULE_numericValueExpr);
		let _la: number;
		try {
			this.state = 5490;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 698, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5469;
				this.term();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5470;
				this.term();
				this.state = 5472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5471;
					this.separator();
					}
				}

				this.state = 5474;
				this.match(GqlParser.PLUS);
				this.state = 5476;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5475;
					this.separator();
					}
				}

				this.state = 5478;
				this.numericValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5480;
				this.term();
				this.state = 5482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5481;
					this.separator();
					}
				}

				this.state = 5484;
				this.match(GqlParser.MINUS);
				this.state = 5486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5485;
					this.separator();
					}
				}

				this.state = 5488;
				this.numericValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public term(): TermContext {
		let localctx: TermContext = new TermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 944, GqlParser.RULE_term);
		let _la: number;
		try {
			this.state = 5513;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 703, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5492;
				this.factor();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5493;
				this.factor();
				this.state = 5495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5494;
					this.separator();
					}
				}

				this.state = 5497;
				this.match(GqlParser.ASTERISK);
				this.state = 5499;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5498;
					this.separator();
					}
				}

				this.state = 5501;
				this.term();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5503;
				this.factor();
				this.state = 5505;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5504;
					this.separator();
					}
				}

				this.state = 5507;
				this.match(GqlParser.SOLIDUS);
				this.state = 5509;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5508;
					this.separator();
					}
				}

				this.state = 5511;
				this.term();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public factor(): FactorContext {
		let localctx: FactorContext = new FactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 946, GqlParser.RULE_factor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 5515;
				this.match(GqlParser.SIGN);
				}
			}

			this.state = 5518;
			this.numericPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericPrimary(): NumericPrimaryContext {
		let localctx: NumericPrimaryContext = new NumericPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 948, GqlParser.RULE_numericPrimary);
		try {
			this.state = 5522;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5520;
				this.valueExprPrimary();
				}
				break;
			case 60:
			case 61:
			case 70:
			case 72:
			case 82:
			case 87:
			case 88:
			case 89:
			case 90:
			case 97:
			case 98:
			case 99:
			case 114:
			case 129:
			case 139:
			case 173:
			case 179:
			case 186:
			case 195:
			case 206:
			case 210:
			case 213:
			case 229:
			case 230:
			case 234:
			case 240:
			case 241:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5521;
				this.numericValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueExprPrimary(): ValueExprPrimaryContext {
		let localctx: ValueExprPrimaryContext = new ValueExprPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 950, GqlParser.RULE_valueExprPrimary);
		try {
			this.state = 5526;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5524;
				this.parenthesizedValueExpr();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5525;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesizedValueExpr(): ParenthesizedValueExprContext {
		let localctx: ParenthesizedValueExprContext = new ParenthesizedValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 952, GqlParser.RULE_parenthesizedValueExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5528;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5529;
				this.separator();
				}
			}

			this.state = 5532;
			this.valueExpr();
			this.state = 5534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5533;
				this.separator();
				}
			}

			this.state = 5536;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		let localctx: NonParenthesizedValueExprPrimaryContext = new NonParenthesizedValueExprPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 954, GqlParser.RULE_nonParenthesizedValueExprPrimary);
		try {
			this.state = 5540;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5538;
				this.nonParenthesizedValueExprPrimarySpecialCase();
				}
				break;
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5539;
				this.bindingVarRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonParenthesizedValueExprPrimarySpecialCase(): NonParenthesizedValueExprPrimarySpecialCaseContext {
		let localctx: NonParenthesizedValueExprPrimarySpecialCaseContext = new NonParenthesizedValueExprPrimarySpecialCaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 956, GqlParser.RULE_nonParenthesizedValueExprPrimarySpecialCase);
		try {
			this.state = 5550;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 710, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5542;
				this.unsignedValueSpec();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5543;
				this.aggregateFunction();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5544;
				this.collectionValueConstructor();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5545;
				this.valueQueryExpr();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5546;
				this.caseExpr();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5547;
				this.letValueExpr();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5548;
				this.castSpec();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5549;
				this.elementIdFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public collectionValueConstructor(): CollectionValueConstructorContext {
		let localctx: CollectionValueConstructorContext = new CollectionValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 958, GqlParser.RULE_collectionValueConstructor);
		try {
			this.state = 5555;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 42:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5552;
				this.listValueConstructor();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5553;
				this.recordValueConstructor();
				}
				break;
			case 205:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5554;
				this.pathValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueFunction(): NumericValueFunctionContext {
		let localctx: NumericValueFunctionContext = new NumericValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 960, GqlParser.RULE_numericValueFunction);
		try {
			this.state = 5567;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 712, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5557;
				this.lengthExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5558;
				this.absoluteValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5559;
				this.modulusExpr();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5560;
				this.trigonometricFunction();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5561;
				this.logarithmFunction();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5562;
				this.exponentialFunction();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5563;
				this.powerFunction();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5564;
				this.squareRootFunciton();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5565;
				this.floorFunction();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5566;
				this.ceilingFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lengthExpr(): LengthExprContext {
		let localctx: LengthExprContext = new LengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 962, GqlParser.RULE_lengthExpr);
		try {
			this.state = 5572;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 89:
			case 90:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5569;
				this.charLengthExpr();
				}
				break;
			case 82:
			case 195:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5570;
				this.byteLengthExpr();
				}
				break;
			case 206:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5571;
				this.pathLengthExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charLengthExpr(): CharLengthExprContext {
		let localctx: CharLengthExprContext = new CharLengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 964, GqlParser.RULE_charLengthExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5574;
			_la = this._input.LA(1);
			if(!(_la===89 || _la===90)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5575;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5577;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5576;
				this.separator();
				}
			}

			this.state = 5579;
			this.charStringValueExpr();
			this.state = 5581;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5580;
				this.separator();
				}
			}

			this.state = 5583;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteLengthExpr(): ByteLengthExprContext {
		let localctx: ByteLengthExprContext = new ByteLengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 966, GqlParser.RULE_byteLengthExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5585;
			_la = this._input.LA(1);
			if(!(_la===82 || _la===195)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5586;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5587;
				this.separator();
				}
			}

			this.state = 5590;
			this.byteStringValueExpr();
			this.state = 5592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5591;
				this.separator();
				}
			}

			this.state = 5594;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathLengthExpr(): PathLengthExprContext {
		let localctx: PathLengthExprContext = new PathLengthExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 968, GqlParser.RULE_pathLengthExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5596;
			this.match(GqlParser.PATH_LENGTH);
			this.state = 5597;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5599;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5598;
				this.separator();
				}
			}

			this.state = 5601;
			this.pathValueExpr();
			this.state = 5603;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5602;
				this.separator();
				}
			}

			this.state = 5605;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public absoluteValueExpr(): AbsoluteValueExprContext {
		let localctx: AbsoluteValueExprContext = new AbsoluteValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 970, GqlParser.RULE_absoluteValueExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5607;
			this.match(GqlParser.ABS);
			this.state = 5608;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5610;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5609;
				this.separator();
				}
			}

			this.state = 5612;
			this.numericValueExpr();
			this.state = 5614;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5613;
				this.separator();
				}
			}

			this.state = 5616;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public modulusExpr(): ModulusExprContext {
		let localctx: ModulusExprContext = new ModulusExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 972, GqlParser.RULE_modulusExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5618;
			this.match(GqlParser.MOD);
			this.state = 5619;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5620;
				this.separator();
				}
			}

			this.state = 5623;
			this.numericValueExprDividen();
			this.state = 5625;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5624;
				this.separator();
				}
			}

			this.state = 5627;
			this.match(GqlParser.COMMA);
			this.state = 5629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5628;
				this.separator();
				}
			}

			this.state = 5631;
			this.numericValueExprDivisor();
			this.state = 5633;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5632;
				this.separator();
				}
			}

			this.state = 5635;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprDividen(): NumericValueExprDividenContext {
		let localctx: NumericValueExprDividenContext = new NumericValueExprDividenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 974, GqlParser.RULE_numericValueExprDividen);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5637;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprDivisor(): NumericValueExprDivisorContext {
		let localctx: NumericValueExprDivisorContext = new NumericValueExprDivisorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 976, GqlParser.RULE_numericValueExprDivisor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5639;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trigonometricFunction(): TrigonometricFunctionContext {
		let localctx: TrigonometricFunctionContext = new TrigonometricFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 978, GqlParser.RULE_trigonometricFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5641;
			this.trigonometricFunctionName();
			this.state = 5642;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5644;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5643;
				this.separator();
				}
			}

			this.state = 5646;
			this.numericValueExpr();
			this.state = 5648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5647;
				this.separator();
				}
			}

			this.state = 5650;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trigonometricFunctionName(): TrigonometricFunctionNameContext {
		let localctx: TrigonometricFunctionNameContext = new TrigonometricFunctionNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 980, GqlParser.RULE_trigonometricFunctionName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5652;
			_la = this._input.LA(1);
			if(!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & 2561) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 131079) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & 402849793) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logarithmFunction(): LogarithmFunctionContext {
		let localctx: LogarithmFunctionContext = new LogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 982, GqlParser.RULE_logarithmFunction);
		try {
			this.state = 5657;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 186:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5654;
				this.generalLogarithmFunction();
				}
				break;
			case 179:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5655;
				this.commonLogarithmFunction();
				}
				break;
			case 173:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5656;
				this.naturalLogarithmFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLogarithmFunction(): GeneralLogarithmFunctionContext {
		let localctx: GeneralLogarithmFunctionContext = new GeneralLogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 984, GqlParser.RULE_generalLogarithmFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5659;
			this.match(GqlParser.MOD);
			this.state = 5660;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5662;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5661;
				this.separator();
				}
			}

			this.state = 5664;
			this.generalLogarithmBase();
			this.state = 5666;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5665;
				this.separator();
				}
			}

			this.state = 5668;
			this.match(GqlParser.COMMA);
			this.state = 5670;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5669;
				this.separator();
				}
			}

			this.state = 5672;
			this.generalLogarithmArgument();
			this.state = 5674;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5673;
				this.separator();
				}
			}

			this.state = 5676;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLogarithmBase(): GeneralLogarithmBaseContext {
		let localctx: GeneralLogarithmBaseContext = new GeneralLogarithmBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 986, GqlParser.RULE_generalLogarithmBase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5678;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLogarithmArgument(): GeneralLogarithmArgumentContext {
		let localctx: GeneralLogarithmArgumentContext = new GeneralLogarithmArgumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 988, GqlParser.RULE_generalLogarithmArgument);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5680;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonLogarithmFunction(): CommonLogarithmFunctionContext {
		let localctx: CommonLogarithmFunctionContext = new CommonLogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 990, GqlParser.RULE_commonLogarithmFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5682;
			this.match(GqlParser.LOG10);
			this.state = 5683;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5684;
				this.separator();
				}
			}

			this.state = 5687;
			this.numericValueExpr();
			this.state = 5689;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5688;
				this.separator();
				}
			}

			this.state = 5691;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public naturalLogarithmFunction(): NaturalLogarithmFunctionContext {
		let localctx: NaturalLogarithmFunctionContext = new NaturalLogarithmFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 992, GqlParser.RULE_naturalLogarithmFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5693;
			this.match(GqlParser.LN);
			this.state = 5694;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5696;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5695;
				this.separator();
				}
			}

			this.state = 5698;
			this.numericValueExpr();
			this.state = 5700;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5699;
				this.separator();
				}
			}

			this.state = 5702;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exponentialFunction(): ExponentialFunctionContext {
		let localctx: ExponentialFunctionContext = new ExponentialFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 994, GqlParser.RULE_exponentialFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5704;
			this.match(GqlParser.EXP);
			this.state = 5705;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5707;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5706;
				this.separator();
				}
			}

			this.state = 5709;
			this.numericValueExpr();
			this.state = 5711;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5710;
				this.separator();
				}
			}

			this.state = 5713;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public powerFunction(): PowerFunctionContext {
		let localctx: PowerFunctionContext = new PowerFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 996, GqlParser.RULE_powerFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5715;
			this.match(GqlParser.POWER);
			this.state = 5716;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5717;
				this.separator();
				}
			}

			this.state = 5720;
			this.numericValueExprBase();
			this.state = 5722;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5721;
				this.separator();
				}
			}

			this.state = 5724;
			this.match(GqlParser.COMMA);
			this.state = 5726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5725;
				this.separator();
				}
			}

			this.state = 5728;
			this.numericValueExprExponent();
			this.state = 5730;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5729;
				this.separator();
				}
			}

			this.state = 5732;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprBase(): NumericValueExprBaseContext {
		let localctx: NumericValueExprBaseContext = new NumericValueExprBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 998, GqlParser.RULE_numericValueExprBase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5734;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numericValueExprExponent(): NumericValueExprExponentContext {
		let localctx: NumericValueExprExponentContext = new NumericValueExprExponentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1000, GqlParser.RULE_numericValueExprExponent);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5736;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public squareRootFunciton(): SquareRootFuncitonContext {
		let localctx: SquareRootFuncitonContext = new SquareRootFuncitonContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1002, GqlParser.RULE_squareRootFunciton);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5738;
			this.match(GqlParser.SQRT);
			this.state = 5739;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5740;
				this.separator();
				}
			}

			this.state = 5743;
			this.numericValueExpr();
			this.state = 5745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5744;
				this.separator();
				}
			}

			this.state = 5747;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public floorFunction(): FloorFunctionContext {
		let localctx: FloorFunctionContext = new FloorFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1004, GqlParser.RULE_floorFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5749;
			this.match(GqlParser.FLOOR);
			this.state = 5750;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5752;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5751;
				this.separator();
				}
			}

			this.state = 5754;
			this.numericValueExpr();
			this.state = 5756;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5755;
				this.separator();
				}
			}

			this.state = 5758;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ceilingFunction(): CeilingFunctionContext {
		let localctx: CeilingFunctionContext = new CeilingFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1006, GqlParser.RULE_ceilingFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5760;
			_la = this._input.LA(1);
			if(!(_la===87 || _la===88)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5761;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5762;
				this.separator();
				}
			}

			this.state = 5765;
			this.numericValueExpr();
			this.state = 5767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5766;
				this.separator();
				}
			}

			this.state = 5769;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringValueExpr(): StringValueExprContext {
		let localctx: StringValueExprContext = new StringValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1008, GqlParser.RULE_stringValueExpr);
		try {
			this.state = 5773;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 749, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5771;
				this.charStringValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5772;
				this.byteStringValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringValueExpr(): CharStringValueExprContext {
		let localctx: CharStringValueExprContext = new CharStringValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1010, GqlParser.RULE_charStringValueExpr);
		try {
			this.state = 5777;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 750, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5775;
				this.charStringConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5776;
				this.charStringFactor();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringConcatenation(): CharStringConcatenationContext {
		let localctx: CharStringConcatenationContext = new CharStringConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1012, GqlParser.RULE_charStringConcatenation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5779;
			this.charStringFactor();
			this.state = 5780;
			this.match(GqlParser.CONCATENATION);
			this.state = 5781;
			this.charStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringFactor(): CharStringFactorContext {
		let localctx: CharStringFactorContext = new CharStringFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1014, GqlParser.RULE_charStringFactor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5783;
			this.charStringPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringPrimary(): CharStringPrimaryContext {
		let localctx: CharStringPrimaryContext = new CharStringPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1016, GqlParser.RULE_charStringPrimary);
		try {
			this.state = 5787;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5785;
				this.valueExprPrimary();
				}
				break;
			case 80:
			case 180:
			case 181:
			case 190:
			case 221:
			case 246:
			case 260:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5786;
				this.stringValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringValueExpr(): ByteStringValueExprContext {
		let localctx: ByteStringValueExprContext = new ByteStringValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1018, GqlParser.RULE_byteStringValueExpr);
		try {
			this.state = 5791;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 752, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5789;
				this.byteStringConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5790;
				this.byteStringFactor();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringFactor(): ByteStringFactorContext {
		let localctx: ByteStringFactorContext = new ByteStringFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1020, GqlParser.RULE_byteStringFactor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5793;
			this.byteStringPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringPrimary(): ByteStringPrimaryContext {
		let localctx: ByteStringPrimaryContext = new ByteStringPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1022, GqlParser.RULE_byteStringPrimary);
		try {
			this.state = 5797;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5795;
				this.valueExprPrimary();
				}
				break;
			case 80:
			case 180:
			case 181:
			case 190:
			case 221:
			case 246:
			case 260:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5796;
				this.stringValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringConcatenation(): ByteStringConcatenationContext {
		let localctx: ByteStringConcatenationContext = new ByteStringConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1024, GqlParser.RULE_byteStringConcatenation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5799;
			this.byteStringFactor();
			this.state = 5800;
			this.match(GqlParser.CONCATENATION);
			this.state = 5801;
			this.byteStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringValueFunction(): StringValueFunctionContext {
		let localctx: StringValueFunctionContext = new StringValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1026, GqlParser.RULE_stringValueFunction);
		try {
			this.state = 5805;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 754, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5803;
				this.charStringFunction();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5804;
				this.byteStringFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charStringFunction(): CharStringFunctionContext {
		let localctx: CharStringFunctionContext = new CharStringFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1028, GqlParser.RULE_charStringFunction);
		try {
			this.state = 5810;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 180:
			case 260:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5807;
				this.foldFunction();
				}
				break;
			case 80:
			case 181:
			case 221:
			case 246:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5808;
				this.trimFunction();
				}
				break;
			case 190:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5809;
				this.normalizeFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public foldFunction(): FoldFunctionContext {
		let localctx: FoldFunctionContext = new FoldFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1030, GqlParser.RULE_foldFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5812;
			_la = this._input.LA(1);
			if(!(_la===180 || _la===260)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5813;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5815;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5814;
				this.separator();
				}
			}

			this.state = 5817;
			this.charStringValueExpr();
			this.state = 5819;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5818;
				this.separator();
				}
			}

			this.state = 5821;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimFunction(): TrimFunctionContext {
		let localctx: TrimFunctionContext = new TrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1032, GqlParser.RULE_trimFunction);
		try {
			this.state = 5825;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 246:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5823;
				this.singleCharTrimFunction();
				}
				break;
			case 80:
			case 181:
			case 221:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5824;
				this.multiCharTrimFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleCharTrimFunction(): SingleCharTrimFunctionContext {
		let localctx: SingleCharTrimFunctionContext = new SingleCharTrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1034, GqlParser.RULE_singleCharTrimFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5827;
			this.match(GqlParser.TRIM);
			this.state = 5828;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5830;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5829;
				this.separator();
				}
			}

			this.state = 5832;
			this.trimOperands();
			this.state = 5834;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5833;
				this.separator();
				}
			}

			this.state = 5836;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public multiCharTrimFunction(): MultiCharTrimFunctionContext {
		let localctx: MultiCharTrimFunctionContext = new MultiCharTrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1036, GqlParser.RULE_multiCharTrimFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5838;
			_la = this._input.LA(1);
			if(!(_la===80 || _la===181 || _la===221)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5839;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5840;
				this.separator();
				}
			}

			this.state = 5843;
			this.trimSource();
			{
			this.state = 5845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5844;
				this.separator();
				}
			}

			this.state = 5847;
			this.match(GqlParser.COMMA);
			this.state = 5849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5848;
				this.separator();
				}
			}

			this.state = 5851;
			this.trimCharString();
			}
			this.state = 5854;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5853;
				this.separator();
				}
			}

			this.state = 5856;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimOperands(): TrimOperandsContext {
		let localctx: TrimOperandsContext = new TrimOperandsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1038, GqlParser.RULE_trimOperands);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5870;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 767, this._ctx) ) {
			case 1:
				{
				this.state = 5861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===79 || _la===168 || _la===245) {
					{
					this.state = 5858;
					this.trimSpec();
					this.state = 5859;
					this.separator();
					}
				}

				this.state = 5866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 137375873) !== 0) || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 4276231) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & 44095489) !== 0) || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 2147550233) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 77596357) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 540811265) !== 0)) {
					{
					this.state = 5863;
					this.trimCharString();
					this.state = 5864;
					this.separator();
					}
				}

				this.state = 5868;
				this.match(GqlParser.FROM);
				this.state = 5869;
				this.separator();
				}
				break;
			}
			this.state = 5872;
			this.trimSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimSource(): TrimSourceContext {
		let localctx: TrimSourceContext = new TrimSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1040, GqlParser.RULE_trimSource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5874;
			this.charStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimSpec(): TrimSpecContext {
		let localctx: TrimSpecContext = new TrimSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1042, GqlParser.RULE_trimSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5876;
			_la = this._input.LA(1);
			if(!(_la===79 || _la===168 || _la===245)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimCharString(): TrimCharStringContext {
		let localctx: TrimCharStringContext = new TrimCharStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1044, GqlParser.RULE_trimCharString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5878;
			this.charStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalizeFunction(): NormalizeFunctionContext {
		let localctx: NormalizeFunctionContext = new NormalizeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1046, GqlParser.RULE_normalizeFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5880;
			this.match(GqlParser.NORMALIZE);
			this.state = 5881;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5882;
				this.separator();
				}
			}

			this.state = 5885;
			this.charStringValueExpr();
			{
			this.state = 5887;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5886;
				this.separator();
				}
			}

			this.state = 5889;
			this.match(GqlParser.COMMA);
			this.state = 5891;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5890;
				this.separator();
				}
			}

			this.state = 5893;
			this.normalForm();
			}
			this.state = 5896;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5895;
				this.separator();
				}
			}

			this.state = 5898;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public normalForm(): NormalFormContext {
		let localctx: NormalFormContext = new NormalFormContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1048, GqlParser.RULE_normalForm);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5900;
			_la = this._input.LA(1);
			if(!(((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 15) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringFunction(): ByteStringFunctionContext {
		let localctx: ByteStringFunctionContext = new ByteStringFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1050, GqlParser.RULE_byteStringFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5902;
			this.byteStrinTrimFunction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStrinTrimFunction(): ByteStrinTrimFunctionContext {
		let localctx: ByteStrinTrimFunctionContext = new ByteStrinTrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1052, GqlParser.RULE_byteStrinTrimFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5904;
			this.match(GqlParser.TRIM);
			this.state = 5905;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 5907;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5906;
				this.separator();
				}
			}

			this.state = 5909;
			this.byteStringTrimOperands();
			this.state = 5911;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 5910;
				this.separator();
				}
			}

			this.state = 5913;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringTrimOperands(): ByteStringTrimOperandsContext {
		let localctx: ByteStringTrimOperandsContext = new ByteStringTrimOperandsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1054, GqlParser.RULE_byteStringTrimOperands);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5927;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 776, this._ctx) ) {
			case 1:
				{
				this.state = 5918;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===79 || _la===168 || _la===245) {
					{
					this.state = 5915;
					this.trimSpec();
					this.state = 5916;
					this.separator();
					}
				}

				this.state = 5923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 137375873) !== 0) || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 4276231) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & 44095489) !== 0) || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 2147550233) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 77596357) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 540811265) !== 0)) {
					{
					this.state = 5920;
					this.trimByteString();
					this.state = 5921;
					this.separator();
					}
				}

				this.state = 5925;
				this.match(GqlParser.FROM);
				this.state = 5926;
				this.separator();
				}
				break;
			}
			this.state = 5929;
			this.byteStringTrimSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public byteStringTrimSource(): ByteStringTrimSourceContext {
		let localctx: ByteStringTrimSourceContext = new ByteStringTrimSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1056, GqlParser.RULE_byteStringTrimSource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5931;
			this.byteStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimByteString(): TrimByteStringContext {
		let localctx: TrimByteStringContext = new TrimByteStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1058, GqlParser.RULE_trimByteString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5933;
			this.byteStringValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringLength(): StringLengthContext {
		let localctx: StringLengthContext = new StringLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1060, GqlParser.RULE_stringLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5935;
			this.numericValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public dateTimeValueExpr(): DateTimeValueExprContext;
	public dateTimeValueExpr(_p: number): DateTimeValueExprContext;
	// @RuleVersion(0)
	public dateTimeValueExpr(_p?: number): DateTimeValueExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: DateTimeValueExprContext = new DateTimeValueExprContext(this, this._ctx, _parentState);
		let _prevctx: DateTimeValueExprContext = localctx;
		let _startState: number = 1062;
		this.enterRecursionRule(localctx, 1062, GqlParser.RULE_dateTimeValueExpr, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5943;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 777, this._ctx) ) {
			case 1:
				{
				this.state = 5938;
				this.dateTimeTerm();
				}
				break;
			case 2:
				{
				this.state = 5939;
				this.durationValueExpr(0);
				this.state = 5940;
				this.match(GqlParser.PLUS);
				this.state = 5941;
				this.dateTimeTerm();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 5953;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 779, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 5951;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 778, this._ctx) ) {
					case 1:
						{
						localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_dateTimeValueExpr);
						this.state = 5945;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5946;
						this.match(GqlParser.PLUS);
						this.state = 5947;
						this.durationTerm(0);
						}
						break;
					case 2:
						{
						localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_dateTimeValueExpr);
						this.state = 5948;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 5949;
						this.match(GqlParser.MINUS);
						this.state = 5950;
						this.durationTerm(0);
						}
						break;
					}
					}
				}
				this.state = 5955;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 779, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeTerm(): DateTimeTermContext {
		let localctx: DateTimeTermContext = new DateTimeTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1064, GqlParser.RULE_dateTimeTerm);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5956;
			this.dateTimeFactor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeFactor(): DateTimeFactorContext {
		let localctx: DateTimeFactorContext = new DateTimeFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1066, GqlParser.RULE_dateTimeFactor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5958;
			this.dateTimePrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimePrimary(): DateTimePrimaryContext {
		let localctx: DateTimePrimaryContext = new DateTimePrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1068, GqlParser.RULE_dateTimePrimary);
		try {
			this.state = 5962;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 780, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5960;
				this.valueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5961;
				this.dateTimeValueFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeValueFunction(): DateTimeValueFunctionContext {
		let localctx: DateTimeValueFunctionContext = new DateTimeValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1070, GqlParser.RULE_dateTimeValueFunction);
		try {
			this.state = 5969;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 102:
			case 109:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5964;
				this.dateFunction();
				}
				break;
			case 106:
			case 275:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5965;
				this.timeFunction();
				}
				break;
			case 107:
			case 274:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5966;
				this.dateTimeFunction();
				}
				break;
			case 176:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5967;
				this.localTimeFunction();
				}
				break;
			case 175:
			case 177:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5968;
				this.localDatetimeFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateFunction(): DateFunctionContext {
		let localctx: DateFunctionContext = new DateFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1072, GqlParser.RULE_dateFunction);
		let _la: number;
		try {
			this.state = 5984;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 102:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5971;
				this.match(GqlParser.CURRENT_DATE);
				}
				break;
			case 109:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5972;
				this.match(GqlParser.DATE);
				this.state = 5973;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 5975;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 782, this._ctx) ) {
				case 1:
					{
					this.state = 5974;
					this.separator();
					}
					break;
				}
				this.state = 5978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 5977;
					this.dateFunctionParameters();
					}
				}

				this.state = 5981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5980;
					this.separator();
					}
				}

				this.state = 5983;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeFunction(): TimeFunctionContext {
		let localctx: TimeFunctionContext = new TimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1074, GqlParser.RULE_timeFunction);
		let _la: number;
		try {
			this.state = 5999;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 106:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5986;
				this.match(GqlParser.CURRENT_TIME);
				}
				break;
			case 275:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5987;
				this.match(GqlParser.ZONED_TIME);
				this.state = 5988;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 5990;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 786, this._ctx) ) {
				case 1:
					{
					this.state = 5989;
					this.separator();
					}
					break;
				}
				this.state = 5993;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 5992;
					this.timeFunctionParameters();
					}
				}

				this.state = 5996;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 5995;
					this.separator();
					}
				}

				this.state = 5998;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localTimeFunction(): LocalTimeFunctionContext {
		let localctx: LocalTimeFunctionContext = new LocalTimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1076, GqlParser.RULE_localTimeFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6001;
			this.match(GqlParser.LOCAL_TIME);
			this.state = 6002;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6004;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 790, this._ctx) ) {
			case 1:
				{
				this.state = 6003;
				this.separator();
				}
				break;
			}
			this.state = 6007;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 791, this._ctx) ) {
			case 1:
				{
				this.state = 6006;
				this.timeFunctionParameters();
				}
				break;
			}
			this.state = 6010;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 792, this._ctx) ) {
			case 1:
				{
				this.state = 6009;
				this.separator();
				}
				break;
			}
			this.state = 6013;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 793, this._ctx) ) {
			case 1:
				{
				this.state = 6012;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeFunction(): DateTimeFunctionContext {
		let localctx: DateTimeFunctionContext = new DateTimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1078, GqlParser.RULE_dateTimeFunction);
		let _la: number;
		try {
			this.state = 6028;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 107:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6015;
				this.match(GqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case 274:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6016;
				this.match(GqlParser.ZONED_DATETIME);
				this.state = 6017;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 6019;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 794, this._ctx) ) {
				case 1:
					{
					this.state = 6018;
					this.separator();
					}
					break;
				}
				this.state = 6022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 6021;
					this.dateTimeFunctionParameters();
					}
				}

				this.state = 6025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6024;
					this.separator();
					}
				}

				this.state = 6027;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public localDatetimeFunction(): LocalDatetimeFunctionContext {
		let localctx: LocalDatetimeFunctionContext = new LocalDatetimeFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1080, GqlParser.RULE_localDatetimeFunction);
		let _la: number;
		try {
			this.state = 6043;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 177:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6030;
				this.match(GqlParser.LOCAL_TIMESTAMP);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6031;
				this.match(GqlParser.LOCAL_DATETIME);
				this.state = 6032;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 6034;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 798, this._ctx) ) {
				case 1:
					{
					this.state = 6033;
					this.separator();
					}
					break;
				}
				this.state = 6037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
					{
					this.state = 6036;
					this.dateTimeFunctionParameters();
					}
				}

				this.state = 6040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6039;
					this.separator();
					}
				}

				this.state = 6042;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateFunctionParameters(): DateFunctionParametersContext {
		let localctx: DateFunctionParametersContext = new DateFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1082, GqlParser.RULE_dateFunctionParameters);
		try {
			this.state = 6047;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6045;
				this.dateString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6046;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeFunctionParameters(): TimeFunctionParametersContext {
		let localctx: TimeFunctionParametersContext = new TimeFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1084, GqlParser.RULE_timeFunctionParameters);
		try {
			this.state = 6051;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6049;
				this.timeString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6050;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeFunctionParameters(): DateTimeFunctionParametersContext {
		let localctx: DateTimeFunctionParametersContext = new DateTimeFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1086, GqlParser.RULE_dateTimeFunctionParameters);
		try {
			this.state = 6055;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6053;
				this.dateTimeString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6054;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public durationValueExpr(): DurationValueExprContext;
	public durationValueExpr(_p: number): DurationValueExprContext;
	// @RuleVersion(0)
	public durationValueExpr(_p?: number): DurationValueExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: DurationValueExprContext = new DurationValueExprContext(this, this._ctx, _parentState);
		let _prevctx: DurationValueExprContext = localctx;
		let _startState: number = 1088;
		this.enterRecursionRule(localctx, 1088, GqlParser.RULE_durationValueExpr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6060;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 60:
			case 61:
			case 70:
			case 72:
			case 73:
			case 82:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 108:
			case 109:
			case 110:
			case 114:
			case 122:
			case 124:
			case 129:
			case 130:
			case 139:
			case 169:
			case 173:
			case 179:
			case 183:
			case 184:
			case 186:
			case 192:
			case 194:
			case 195:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 213:
			case 215:
			case 229:
			case 230:
			case 234:
			case 236:
			case 237:
			case 239:
			case 240:
			case 241:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 368:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				{
				this.state = 6058;
				this.durationTerm(0);
				}
				break;
			case 123:
				{
				this.state = 6059;
				this.dateTimeSubtraction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 6082;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 811, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 6080;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 810, this._ctx) ) {
					case 1:
						{
						localctx = new DurationValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpr);
						this.state = 6062;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 6064;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6063;
							this.separator();
							}
						}

						this.state = 6066;
						this.match(GqlParser.PLUS);
						this.state = 6068;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6067;
							this.separator();
							}
						}

						this.state = 6070;
						this.durationTerm(0);
						}
						break;
					case 2:
						{
						localctx = new DurationValueExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationValueExpr);
						this.state = 6071;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 6073;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6072;
							this.separator();
							}
						}

						this.state = 6075;
						this.match(GqlParser.MINUS);
						this.state = 6077;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6076;
							this.separator();
							}
						}

						this.state = 6079;
						this.durationTerm(0);
						}
						break;
					}
					}
				}
				this.state = 6084;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 811, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeSubtraction(): DateTimeSubtractionContext {
		let localctx: DateTimeSubtractionContext = new DateTimeSubtractionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1090, GqlParser.RULE_dateTimeSubtraction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6085;
			this.match(GqlParser.DURATION_BETWEEN);
			this.state = 6086;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6088;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6087;
				this.separator();
				}
			}

			this.state = 6090;
			this.dateTimeSubtractionParameters();
			this.state = 6092;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6091;
				this.separator();
				}
			}

			this.state = 6094;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeSubtractionParameters(): DateTimeSubtractionParametersContext {
		let localctx: DateTimeSubtractionParametersContext = new DateTimeSubtractionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1092, GqlParser.RULE_dateTimeSubtractionParameters);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6096;
			this.dateTimeValueExpr(0);
			this.state = 6098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6097;
				this.separator();
				}
			}

			this.state = 6100;
			this.match(GqlParser.COMMA);
			this.state = 6102;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6101;
				this.separator();
				}
			}

			this.state = 6104;
			this.dateTimeValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public durationTerm(): DurationTermContext;
	public durationTerm(_p: number): DurationTermContext;
	// @RuleVersion(0)
	public durationTerm(_p?: number): DurationTermContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: DurationTermContext = new DurationTermContext(this, this._ctx, _parentState);
		let _prevctx: DurationTermContext = localctx;
		let _startState: number = 1094;
		this.enterRecursionRule(localctx, 1094, GqlParser.RULE_durationTerm, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6118;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 818, this._ctx) ) {
			case 1:
				{
				this.state = 6107;
				this.durationFactor();
				}
				break;
			case 2:
				{
				this.state = 6108;
				this.term();
				this.state = 6110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6109;
					this.separator();
					}
				}

				this.state = 6112;
				this.match(GqlParser.ASTERISK);
				this.state = 6114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6113;
					this.separator();
					}
				}

				this.state = 6116;
				this.durationFactor();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 6140;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 824, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 6138;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 823, this._ctx) ) {
					case 1:
						{
						localctx = new DurationTermContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
						this.state = 6120;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 6122;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6121;
							this.separator();
							}
						}

						this.state = 6124;
						this.match(GqlParser.ASTERISK);
						this.state = 6126;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6125;
							this.separator();
							}
						}

						this.state = 6128;
						this.factor();
						}
						break;
					case 2:
						{
						localctx = new DurationTermContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, GqlParser.RULE_durationTerm);
						this.state = 6129;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 6131;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6130;
							this.separator();
							}
						}

						this.state = 6133;
						this.match(GqlParser.SOLIDUS);
						this.state = 6135;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6134;
							this.separator();
							}
						}

						this.state = 6137;
						this.factor();
						}
						break;
					}
					}
				}
				this.state = 6142;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 824, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationFactor(): DurationFactorContext {
		let localctx: DurationFactorContext = new DurationFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1096, GqlParser.RULE_durationFactor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 6143;
				this.match(GqlParser.SIGN);
				}
			}

			this.state = 6146;
			this.durationPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationPrimary(): DurationPrimaryContext {
		let localctx: DurationPrimaryContext = new DurationPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1098, GqlParser.RULE_durationPrimary);
		try {
			this.state = 6150;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 826, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6148;
				this.valueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6149;
				this.durationValueFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationValueExpr1(): DurationValueExpr1Context {
		let localctx: DurationValueExpr1Context = new DurationValueExpr1Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1100, GqlParser.RULE_durationValueExpr1);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6152;
			this.durationValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationTerm1(): DurationTerm1Context {
		let localctx: DurationTerm1Context = new DurationTerm1Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1102, GqlParser.RULE_durationTerm1);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6154;
			this.durationTerm(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationTerm2(): DurationTerm2Context {
		let localctx: DurationTerm2Context = new DurationTerm2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1104, GqlParser.RULE_durationTerm2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6156;
			this.durationTerm(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeValueExpr1(): DateTimeValueExpr1Context {
		let localctx: DateTimeValueExpr1Context = new DateTimeValueExpr1Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1106, GqlParser.RULE_dateTimeValueExpr1);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6158;
			this.dateTimeValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeValueExpr2(): DateTimeValueExpr2Context {
		let localctx: DateTimeValueExpr2Context = new DateTimeValueExpr2Context(this, this._ctx, this.state);
		this.enterRule(localctx, 1108, GqlParser.RULE_dateTimeValueExpr2);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6160;
			this.dateTimeValueExpr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationValueFunction(): DurationValueFunctionContext {
		let localctx: DurationValueFunctionContext = new DurationValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1110, GqlParser.RULE_durationValueFunction);
		try {
			this.state = 6164;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 122:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6162;
				this.durationFunction();
				}
				break;
			case 60:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6163;
				this.durationAbsoluteValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationFunction(): DurationFunctionContext {
		let localctx: DurationFunctionContext = new DurationFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1112, GqlParser.RULE_durationFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6166;
			this.match(GqlParser.DURATION);
			this.state = 6167;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6169;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6168;
				this.separator();
				}
			}

			this.state = 6171;
			this.durationFunctionParameters();
			this.state = 6173;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6172;
				this.separator();
				}
			}

			this.state = 6175;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationFunctionParameters(): DurationFunctionParametersContext {
		let localctx: DurationFunctionParametersContext = new DurationFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1114, GqlParser.RULE_durationFunctionParameters);
		try {
			this.state = 6179;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 385:
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6177;
				this.durationString();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6178;
				this.recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationAbsoluteValueFunction(): DurationAbsoluteValueFunctionContext {
		let localctx: DurationAbsoluteValueFunctionContext = new DurationAbsoluteValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1116, GqlParser.RULE_durationAbsoluteValueFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6181;
			this.match(GqlParser.ABS);
			this.state = 6182;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6184;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6183;
				this.separator();
				}
			}

			this.state = 6186;
			this.durationValueExpr(0);
			this.state = 6187;
			this.separator();
			this.state = 6188;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueExpr(): ListValueExprContext {
		let localctx: ListValueExprContext = new ListValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1118, GqlParser.RULE_listValueExpr);
		try {
			this.state = 6192;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 832, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6190;
				this.listConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6191;
				this.listPrimary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listConcatenation(): ListConcatenationContext {
		let localctx: ListConcatenationContext = new ListConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1120, GqlParser.RULE_listConcatenation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6194;
			this.listPrimary();
			this.state = 6196;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6195;
				this.separator();
				}
			}

			this.state = 6198;
			this.match(GqlParser.CONCATENATION);
			this.state = 6200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6199;
				this.separator();
				}
			}

			this.state = 6202;
			this.listValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listPrimary(): ListPrimaryContext {
		let localctx: ListPrimaryContext = new ListPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1122, GqlParser.RULE_listPrimary);
		try {
			this.state = 6206;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 246:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6204;
				this.listValueFunction();
				}
				break;
			case 35:
			case 40:
			case 42:
			case 44:
			case 56:
			case 73:
			case 85:
			case 86:
			case 93:
			case 94:
			case 100:
			case 108:
			case 109:
			case 110:
			case 122:
			case 124:
			case 130:
			case 169:
			case 183:
			case 184:
			case 192:
			case 194:
			case 205:
			case 208:
			case 209:
			case 215:
			case 236:
			case 237:
			case 239:
			case 243:
			case 244:
			case 247:
			case 258:
			case 263:
			case 366:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6205;
				this.valueExprPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueFunction(): ListValueFunctionContext {
		let localctx: ListValueFunctionContext = new ListValueFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1124, GqlParser.RULE_listValueFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6208;
			this.trimListFunction();
			this.state = 6210;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6209;
				this.separator();
				}
			}

			this.state = 6212;
			this.elementsFunction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimListFunction(): TrimListFunctionContext {
		let localctx: TrimListFunctionContext = new TrimListFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1126, GqlParser.RULE_trimListFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6214;
			this.match(GqlParser.TRIM);
			this.state = 6215;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6217;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6216;
				this.separator();
				}
			}

			this.state = 6219;
			this.listValueExpr();
			this.state = 6221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6220;
				this.separator();
				}
			}

			this.state = 6223;
			this.match(GqlParser.COMMA);
			this.state = 6225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6224;
				this.separator();
				}
			}

			this.state = 6227;
			this.numericValueExpr();
			this.state = 6229;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6228;
				this.separator();
				}
			}

			this.state = 6231;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementsFunction(): ElementsFunctionContext {
		let localctx: ElementsFunctionContext = new ElementsFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1128, GqlParser.RULE_elementsFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6233;
			this.match(GqlParser.ELEMENTS);
			this.state = 6234;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6235;
				this.separator();
				}
			}

			this.state = 6238;
			this.pathValueExpr();
			this.state = 6240;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6239;
				this.separator();
				}
			}

			this.state = 6242;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueConstructor(): ListValueConstructorContext {
		let localctx: ListValueConstructorContext = new ListValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1130, GqlParser.RULE_listValueConstructor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6244;
			this.listValueConstructorByEnumeration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
		let localctx: ListValueConstructorByEnumerationContext = new ListValueConstructorByEnumerationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1132, GqlParser.RULE_listValueConstructorByEnumeration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6246;
			this.match(GqlParser.LEFT_BRACKET);
			this.state = 6248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6247;
				this.separator();
				}
			}

			this.state = 6250;
			this.listValueTypeName();
			this.state = 6252;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6251;
				this.separator();
				}
			}

			this.state = 6254;
			this.match(GqlParser.RIGHT_BRACKET);
			this.state = 6255;
			this.match(GqlParser.LEFT_BRACKET);
			this.state = 6257;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6256;
				this.separator();
				}
			}

			this.state = 6259;
			this.listElementList();
			this.state = 6261;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6260;
				this.separator();
				}
			}

			this.state = 6263;
			this.match(GqlParser.RIGHT_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listElementList(): ListElementListContext {
		let localctx: ListElementListContext = new ListElementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1134, GqlParser.RULE_listElementList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6265;
			this.listElement();
			this.state = 6276;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 849, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6267;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6266;
						this.separator();
						}
					}

					this.state = 6269;
					this.match(GqlParser.COMMA);
					this.state = 6271;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6270;
						this.separator();
						}
					}

					this.state = 6273;
					this.listElement();
					}
					}
				}
				this.state = 6278;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 849, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listElement(): ListElementContext {
		let localctx: ListElementContext = new ListElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1136, GqlParser.RULE_listElement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6279;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordValueConstructor(): RecordValueConstructorContext {
		let localctx: RecordValueConstructorContext = new RecordValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1138, GqlParser.RULE_recordValueConstructor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6283;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===215) {
				{
				this.state = 6281;
				this.match(GqlParser.RECORD);
				this.state = 6282;
				this.separator();
				}
			}

			this.state = 6285;
			this.fieldsSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldsSpec(): FieldsSpecContext {
		let localctx: FieldsSpecContext = new FieldsSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1140, GqlParser.RULE_fieldsSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6287;
			this.match(GqlParser.LEFT_BRACE);
			this.state = 6289;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 851, this._ctx) ) {
			case 1:
				{
				this.state = 6288;
				this.separator();
				}
				break;
			}
			this.state = 6292;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56 || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 515) !== 0)) {
				{
				this.state = 6291;
				this.fieldList();
				}
			}

			this.state = 6295;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6294;
				this.separator();
				}
			}

			this.state = 6297;
			this.match(GqlParser.RIGHT_BRACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldList(): FieldListContext {
		let localctx: FieldListContext = new FieldListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1142, GqlParser.RULE_fieldList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6299;
			this.field();
			this.state = 6310;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 856, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6301;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6300;
						this.separator();
						}
					}

					this.state = 6303;
					this.match(GqlParser.COMMA);
					this.state = 6305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6304;
						this.separator();
						}
					}

					this.state = 6307;
					this.field();
					}
					}
				}
				this.state = 6312;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 856, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public field(): FieldContext {
		let localctx: FieldContext = new FieldContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1144, GqlParser.RULE_field);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6313;
			this.fieldName();
			this.state = 6315;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6314;
				this.separator();
				}
			}

			this.state = 6317;
			this.match(GqlParser.COLON);
			this.state = 6319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6318;
				this.separator();
				}
			}

			this.state = 6321;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueExpr(): PathValueExprContext {
		let localctx: PathValueExprContext = new PathValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1146, GqlParser.RULE_pathValueExpr);
		try {
			this.state = 6325;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 859, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6323;
				this.pathValueConcatenation();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6324;
				this.pathValuePrimary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueConcatenation(): PathValueConcatenationContext {
		let localctx: PathValueConcatenationContext = new PathValueConcatenationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1148, GqlParser.RULE_pathValueConcatenation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6327;
			this.pathValuePrimary();
			this.state = 6329;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6328;
				this.separator();
				}
			}

			this.state = 6331;
			this.match(GqlParser.CONCATENATION);
			this.state = 6333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6332;
				this.separator();
				}
			}

			this.state = 6335;
			this.pathValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValuePrimary(): PathValuePrimaryContext {
		let localctx: PathValuePrimaryContext = new PathValuePrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1150, GqlParser.RULE_pathValuePrimary);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6337;
			this.valueExprPrimary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueConstructor(): PathValueConstructorContext {
		let localctx: PathValueConstructorContext = new PathValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1152, GqlParser.RULE_pathValueConstructor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6339;
			this.pathValueConstructorByEnumeration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathValueConstructorByEnumeration(): PathValueConstructorByEnumerationContext {
		let localctx: PathValueConstructorByEnumerationContext = new PathValueConstructorByEnumerationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1154, GqlParser.RULE_pathValueConstructorByEnumeration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6341;
			this.match(GqlParser.PATH);
			this.state = 6342;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6343;
				this.separator();
				}
			}

			this.state = 6346;
			this.pathElementList();
			this.state = 6348;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6347;
				this.separator();
				}
			}

			this.state = 6350;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathElementList(): PathElementListContext {
		let localctx: PathElementListContext = new PathElementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1156, GqlParser.RULE_pathElementList);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6352;
			this.pathElementListStart();
			this.state = 6356;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 864, this._ctx) ) {
			case 1:
				{
				this.state = 6353;
				this.separator();
				this.state = 6354;
				this.pathElementListStep();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathElementListStart(): PathElementListStartContext {
		let localctx: PathElementListStartContext = new PathElementListStartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1158, GqlParser.RULE_pathElementListStart);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6358;
			this.nodeRefValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathElementListStep(): PathElementListStepContext {
		let localctx: PathElementListStepContext = new PathElementListStepContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1160, GqlParser.RULE_pathElementListStep);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6360;
			this.match(GqlParser.COMMA);
			this.state = 6362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6361;
				this.separator();
				}
			}

			this.state = 6364;
			this.edgeRefValueExpr();
			this.state = 6366;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6365;
				this.separator();
				}
			}

			this.state = 6368;
			this.match(GqlParser.COMMA);
			this.state = 6370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6369;
				this.separator();
				}
			}

			this.state = 6372;
			this.nodeRefValueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyRef(): PropertyRefContext {
		let localctx: PropertyRefContext = new PropertyRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1162, GqlParser.RULE_propertyRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6374;
			this.propertySource();
			this.state = 6375;
			this.match(GqlParser.PERIOD);
			this.state = 6376;
			this.propertyName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertySource(): PropertySourceContext {
		let localctx: PropertySourceContext = new PropertySourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1164, GqlParser.RULE_propertySource);
		try {
			this.state = 6381;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 868, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6378;
				this.nodeRefValueExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6379;
				this.edgeRefValueExpr();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6380;
				this.recordValueExpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueQueryExpr(): ValueQueryExprContext {
		let localctx: ValueQueryExprContext = new ValueQueryExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1166, GqlParser.RULE_valueQueryExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6383;
			this.match(GqlParser.VALUE);
			this.state = 6385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6384;
				this.separator();
				}
			}

			this.state = 6387;
			this.nestedQuerySpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseExpr(): CaseExprContext {
		let localctx: CaseExprContext = new CaseExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1168, GqlParser.RULE_caseExpr);
		try {
			this.state = 6391;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 93:
			case 194:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6389;
				this.caseAbbreviation();
				}
				break;
			case 85:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6390;
				this.caseSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseAbbreviation(): CaseAbbreviationContext {
		let localctx: CaseAbbreviationContext = new CaseAbbreviationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1170, GqlParser.RULE_caseAbbreviation);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6436;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 194:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6393;
				this.match(GqlParser.NULLIF);
				this.state = 6394;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 6396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6395;
					this.separator();
					}
				}

				this.state = 6398;
				this.valueExpr();
				this.state = 6400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6399;
					this.separator();
					}
				}

				this.state = 6402;
				this.match(GqlParser.COMMA);
				this.state = 6404;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6403;
					this.separator();
					}
				}

				this.state = 6406;
				this.valueExpr();
				this.state = 6408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6407;
					this.separator();
					}
				}

				this.state = 6410;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			case 93:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6412;
				this.match(GqlParser.COALESCE);
				this.state = 6413;
				this.match(GqlParser.LEFT_PAREN);
				this.state = 6415;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6414;
					this.separator();
					}
				}

				this.state = 6417;
				this.valueExpr();
				this.state = 6428;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 878, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6419;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6418;
							this.separator();
							}
						}

						this.state = 6421;
						this.match(GqlParser.COMMA);
						this.state = 6423;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
							{
							this.state = 6422;
							this.separator();
							}
						}

						this.state = 6425;
						this.valueExpr();
						}
						}
					}
					this.state = 6430;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 878, this._ctx);
				}
				this.state = 6432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
					{
					this.state = 6431;
					this.separator();
					}
				}

				this.state = 6434;
				this.match(GqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseSpecification(): CaseSpecificationContext {
		let localctx: CaseSpecificationContext = new CaseSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1172, GqlParser.RULE_caseSpecification);
		try {
			this.state = 6440;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 881, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6438;
				this.simpleCase();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6439;
				this.searchedCase();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleCase(): SimpleCaseContext {
		let localctx: SimpleCaseContext = new SimpleCaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1174, GqlParser.RULE_simpleCase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6442;
			this.match(GqlParser.CASE);
			this.state = 6443;
			this.separator();
			this.state = 6444;
			this.caseOperand();
			this.state = 6445;
			this.separator();
			this.state = 6446;
			this.simpleWhenClause();
			this.state = 6450;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 882, this._ctx) ) {
			case 1:
				{
				this.state = 6447;
				this.separator();
				this.state = 6448;
				this.elseClause();
				}
				break;
			}
			this.state = 6452;
			this.separator();
			this.state = 6453;
			this.match(GqlParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public searchedCase(): SearchedCaseContext {
		let localctx: SearchedCaseContext = new SearchedCaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1176, GqlParser.RULE_searchedCase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6455;
			this.match(GqlParser.CASE);
			this.state = 6456;
			this.separator();
			this.state = 6457;
			this.searchedWhenClause();
			this.state = 6461;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 883, this._ctx) ) {
			case 1:
				{
				this.state = 6458;
				this.separator();
				this.state = 6459;
				this.elseClause();
				}
				break;
			}
			this.state = 6463;
			this.separator();
			this.state = 6464;
			this.match(GqlParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleWhenClause(): SimpleWhenClauseContext {
		let localctx: SimpleWhenClauseContext = new SimpleWhenClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1178, GqlParser.RULE_simpleWhenClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6466;
			this.match(GqlParser.WHEN);
			this.state = 6467;
			this.separator();
			this.state = 6468;
			this.whenOperandList();
			this.state = 6469;
			this.separator();
			this.state = 6470;
			this.match(GqlParser.THEN);
			this.state = 6471;
			this.separator();
			this.state = 6472;
			this.result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public searchedWhenClause(): SearchedWhenClauseContext {
		let localctx: SearchedWhenClauseContext = new SearchedWhenClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1180, GqlParser.RULE_searchedWhenClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6474;
			this.match(GqlParser.WHEN);
			this.state = 6475;
			this.separator();
			this.state = 6476;
			this.searchCondition();
			this.state = 6477;
			this.separator();
			this.state = 6478;
			this.match(GqlParser.THEN);
			this.state = 6479;
			this.separator();
			this.state = 6480;
			this.result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elseClause(): ElseClauseContext {
		let localctx: ElseClauseContext = new ElseClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1182, GqlParser.RULE_elseClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6482;
			this.match(GqlParser.ELSE);
			this.state = 6483;
			this.result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseOperand(): CaseOperandContext {
		let localctx: CaseOperandContext = new CaseOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1184, GqlParser.RULE_caseOperand);
		try {
			this.state = 6487;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 884, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6485;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6486;
				this.elementVarRef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenOperandList(): WhenOperandListContext {
		let localctx: WhenOperandListContext = new WhenOperandListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1186, GqlParser.RULE_whenOperandList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6489;
			this.whenOperand();
			this.state = 6500;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 887, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6491;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6490;
						this.separator();
						}
					}

					this.state = 6493;
					this.match(GqlParser.COMMA);
					this.state = 6495;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6494;
						this.separator();
						}
					}

					this.state = 6497;
					this.whenOperand();
					}
					}
				}
				this.state = 6502;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 887, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenOperand(): WhenOperandContext {
		let localctx: WhenOperandContext = new WhenOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1188, GqlParser.RULE_whenOperand);
		try {
			this.state = 6511;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 888, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6503;
				this.nonParenthesizedValueExprPrimary();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6504;
				this.comparisonPredicatePart2();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6505;
				this.nullPredicatePart2();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6506;
				this.valueTypePredicatePart2();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6507;
				this.directedPredicatePart2();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6508;
				this.labeledPredicatePart2();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6509;
				this.sourcePredicatePart2();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6510;
				this.destinationPredicatePart2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public result(): ResultContext {
		let localctx: ResultContext = new ResultContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1190, GqlParser.RULE_result);
		try {
			this.state = 6515;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 889, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6513;
				this.resultExpr();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6514;
				this.match(GqlParser.NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resultExpr(): ResultExprContext {
		let localctx: ResultExprContext = new ResultExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1192, GqlParser.RULE_resultExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6517;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castSpec(): CastSpecContext {
		let localctx: CastSpecContext = new CastSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1194, GqlParser.RULE_castSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6519;
			this.match(GqlParser.CAST);
			this.state = 6520;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6522;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6521;
				this.separator();
				}
			}

			this.state = 6524;
			this.castOperand();
			this.state = 6525;
			this.separator();
			this.state = 6526;
			this.match(GqlParser.AS);
			this.state = 6527;
			this.separator();
			this.state = 6528;
			this.castTarget();
			this.state = 6530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6529;
				this.separator();
				}
			}

			this.state = 6532;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castOperand(): CastOperandContext {
		let localctx: CastOperandContext = new CastOperandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1196, GqlParser.RULE_castOperand);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6534;
			this.valueExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castTarget(): CastTargetContext {
		let localctx: CastTargetContext = new CastTargetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1198, GqlParser.RULE_castTarget);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6536;
			this.valueType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementIdFunction(): ElementIdFunctionContext {
		let localctx: ElementIdFunctionContext = new ElementIdFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1200, GqlParser.RULE_elementIdFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6538;
			this.match(GqlParser.ELEMENT_ID);
			this.state = 6539;
			this.match(GqlParser.LEFT_PAREN);
			this.state = 6541;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6540;
				this.separator();
				}
			}

			this.state = 6543;
			this.elementVarRef();
			this.state = 6545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6544;
				this.separator();
				}
			}

			this.state = 6547;
			this.match(GqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public letValueExpr(): LetValueExprContext {
		let localctx: LetValueExprContext = new LetValueExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1202, GqlParser.RULE_letValueExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6549;
			this.match(GqlParser.LET);
			this.state = 6551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6550;
				this.separator();
				}
			}

			this.state = 6553;
			this.letVarDefList();
			this.state = 6555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6554;
				this.separator();
				}
			}

			this.state = 6557;
			this.match(GqlParser.IN);
			this.state = 6559;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6558;
				this.separator();
				}
			}

			this.state = 6561;
			this.valueExpr();
			this.state = 6563;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6562;
				this.separator();
				}
			}

			this.state = 6565;
			this.match(GqlParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public literal(): LiteralContext {
		let localctx: LiteralContext = new LiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1204, GqlParser.RULE_literal);
		try {
			this.state = 6569;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 367:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6567;
				this.match(GqlParser.SIGNED_NUMERIC_LITERAL);
				}
				break;
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6568;
				this.generalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public generalLiteral(): GeneralLiteralContext {
		let localctx: GeneralLiteralContext = new GeneralLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1206, GqlParser.RULE_generalLiteral);
		try {
			this.state = 6574;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 243:
			case 244:
			case 247:
			case 258:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6571;
				this.predefinedTypeLiteral();
				}
				break;
			case 42:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6572;
				this.listLiteral();
				}
				break;
			case 40:
			case 215:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6573;
				this.recordLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predefinedTypeLiteral(): PredefinedTypeLiteralContext {
		let localctx: PredefinedTypeLiteralContext = new PredefinedTypeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1208, GqlParser.RULE_predefinedTypeLiteral);
		try {
			this.state = 6582;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 130:
			case 247:
			case 258:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6576;
				this.booleanLiteral();
				}
				break;
			case 56:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6577;
				this.characterStringLiteral();
				}
				break;
			case 384:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6578;
				this.match(GqlParser.BYTE_STRING_LITERAL);
				}
				break;
			case 109:
			case 110:
			case 243:
			case 244:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6579;
				this.temporalLiteral();
				}
				break;
			case 122:
			case 379:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6580;
				this.durationLiteral();
				}
				break;
			case 192:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6581;
				this.nullLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unsignedLiteral(): UnsignedLiteralContext {
		let localctx: UnsignedLiteralContext = new UnsignedLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1210, GqlParser.RULE_unsignedLiteral);
		try {
			this.state = 6586;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 366:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6584;
				this.match(GqlParser.UNSIGNED_NUMERIC_LITERAL);
				}
				break;
			case 40:
			case 42:
			case 56:
			case 109:
			case 110:
			case 122:
			case 130:
			case 192:
			case 215:
			case 243:
			case 244:
			case 247:
			case 258:
			case 379:
			case 384:
			case 385:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6585;
				this.generalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanLiteral(): BooleanLiteralContext {
		let localctx: BooleanLiteralContext = new BooleanLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1212, GqlParser.RULE_booleanLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6588;
			_la = this._input.LA(1);
			if(!(_la===130 || _la===247 || _la===258)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public characterStringLiteral(): CharacterStringLiteralContext {
		let localctx: CharacterStringLiteralContext = new CharacterStringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1214, GqlParser.RULE_characterStringLiteral);
		try {
			this.state = 6593;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 902, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6590;
				this.singleQuotedCharacterSequence();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6591;
				this.doubleQuotedCharacterSequence();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6592;
				this.accentQuotedCharacterSequence();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		let localctx: UnbrokenCharacterStringLiteralContext = new UnbrokenCharacterStringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1216, GqlParser.RULE_unbrokenCharacterStringLiteral);
		let _la: number;
		try {
			this.state = 6603;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 905, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===56) {
					{
					this.state = 6595;
					this.noEscape();
					}
				}

				this.state = 6598;
				this.unbrokenSingleQuotedCharacterSequence();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6600;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===56) {
					{
					this.state = 6599;
					this.noEscape();
					}
				}

				this.state = 6602;
				this.unbrokenDoubleQuotedCharacterSequence();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleQuotedCharacterSequence(): SingleQuotedCharacterSequenceContext {
		let localctx: SingleQuotedCharacterSequenceContext = new SingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1218, GqlParser.RULE_singleQuotedCharacterSequence);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6606;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56) {
				{
				this.state = 6605;
				this.noEscape();
				}
			}

			this.state = 6608;
			this.unbrokenSingleQuotedCharacterSequence();
			this.state = 6619;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 909, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6609;
						this.separator();
						}
					}

					this.state = 6612;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 6614;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6613;
						this.separator();
						}
					}

					this.state = 6616;
					this.unbrokenSingleQuotedCharacterSequence();
					}
					}
				}
				this.state = 6621;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 909, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public doubleQuotedCharacterSequence(): DoubleQuotedCharacterSequenceContext {
		let localctx: DoubleQuotedCharacterSequenceContext = new DoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1220, GqlParser.RULE_doubleQuotedCharacterSequence);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56) {
				{
				this.state = 6622;
				this.noEscape();
				}
			}

			this.state = 6625;
			this.unbrokenDoubleQuotedCharacterSequence();
			this.state = 6636;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 913, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6626;
						this.separator();
						}
					}

					this.state = 6629;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 6631;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6630;
						this.separator();
						}
					}

					this.state = 6633;
					this.unbrokenDoubleQuotedCharacterSequence();
					}
					}
				}
				this.state = 6638;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 913, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public accentQuotedCharacterSequence(): AccentQuotedCharacterSequenceContext {
		let localctx: AccentQuotedCharacterSequenceContext = new AccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1222, GqlParser.RULE_accentQuotedCharacterSequence);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===56) {
				{
				this.state = 6639;
				this.noEscape();
				}
			}

			this.state = 6642;
			this.unbrokenAccentQuotedCharacterSequence();
			this.state = 6653;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 917, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6644;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6643;
						this.separator();
						}
					}

					this.state = 6646;
					this.match(GqlParser.VERTICAL_BAR);
					this.state = 6648;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
						{
						this.state = 6647;
						this.separator();
						}
					}

					this.state = 6650;
					this.unbrokenAccentQuotedCharacterSequence();
					}
					}
				}
				this.state = 6655;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 917, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public noEscape(): NoEscapeContext {
		let localctx: NoEscapeContext = new NoEscapeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1224, GqlParser.RULE_noEscape);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6656;
			this.match(GqlParser.COMMERCIAL_AT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenSingleQuotedCharacterSequence(): UnbrokenSingleQuotedCharacterSequenceContext {
		let localctx: UnbrokenSingleQuotedCharacterSequenceContext = new UnbrokenSingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1226, GqlParser.RULE_unbrokenSingleQuotedCharacterSequence);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6658;
			this.match(GqlParser.SINGLE_QUOTED_STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenDoubleQuotedCharacterSequence(): UnbrokenDoubleQuotedCharacterSequenceContext {
		let localctx: UnbrokenDoubleQuotedCharacterSequenceContext = new UnbrokenDoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1228, GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6660;
			this.match(GqlParser.DOUBLE_QUOTED_STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unbrokenAccentQuotedCharacterSequence(): UnbrokenAccentQuotedCharacterSequenceContext {
		let localctx: UnbrokenAccentQuotedCharacterSequenceContext = new UnbrokenAccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1230, GqlParser.RULE_unbrokenAccentQuotedCharacterSequence);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6662;
			this.match(GqlParser.ACCENT_QUOTED_STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalLiteral(): TemporalLiteralContext {
		let localctx: TemporalLiteralContext = new TemporalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1232, GqlParser.RULE_temporalLiteral);
		try {
			this.state = 6668;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 918, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6664;
				this.dateLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6665;
				this.timeLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6666;
				this.dateTimeLiteral();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6667;
				this.sqlDateTimeLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateLiteral(): DateLiteralContext {
		let localctx: DateLiteralContext = new DateLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1234, GqlParser.RULE_dateLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6670;
			this.match(GqlParser.DATE);
			this.state = 6671;
			this.separator();
			this.state = 6672;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeLiteral(): TimeLiteralContext {
		let localctx: TimeLiteralContext = new TimeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1236, GqlParser.RULE_timeLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6674;
			this.match(GqlParser.TIME);
			this.state = 6675;
			this.separator();
			this.state = 6676;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeLiteral(): DateTimeLiteralContext {
		let localctx: DateTimeLiteralContext = new DateTimeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1238, GqlParser.RULE_dateTimeLiteral);
		try {
			this.state = 6686;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 110:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6678;
				this.match(GqlParser.DATETIME);
				this.state = 6679;
				this.separator();
				this.state = 6680;
				this.unbrokenCharacterStringLiteral();
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6682;
				this.match(GqlParser.TIMESTAMP);
				this.state = 6683;
				this.separator();
				this.state = 6684;
				this.unbrokenCharacterStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateString(): DateStringContext {
		let localctx: DateStringContext = new DateStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1240, GqlParser.RULE_dateString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6688;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeString(): TimeStringContext {
		let localctx: TimeStringContext = new TimeStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1242, GqlParser.RULE_timeString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6690;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeString(): DateTimeStringContext {
		let localctx: DateTimeStringContext = new DateTimeStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1244, GqlParser.RULE_dateTimeString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6692;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlDateTimeLiteral(): SqlDateTimeLiteralContext {
		let localctx: SqlDateTimeLiteralContext = new SqlDateTimeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1246, GqlParser.RULE_sqlDateTimeLiteral);
		try {
			this.state = 6746;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 109:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6694;
				this.match(GqlParser.DATE);
				this.state = 6695;
				this.separator();
				this.state = 6696;
				this.match(GqlParser.QUOTE);
				this.state = 6697;
				this.match(GqlParser.FOUR_DIGIT);
				this.state = 6698;
				this.match(GqlParser.MINUS);
				this.state = 6699;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6700;
				this.match(GqlParser.MINUS);
				this.state = 6701;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6702;
				this.match(GqlParser.QUOTE);
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6704;
				this.match(GqlParser.TIME);
				this.state = 6705;
				this.separator();
				this.state = 6706;
				this.match(GqlParser.QUOTE);
				this.state = 6707;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6708;
				this.match(GqlParser.COLON);
				this.state = 6709;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6710;
				this.match(GqlParser.COLON);
				this.state = 6711;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6712;
				this.match(GqlParser.QUOTE);
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6714;
				this.match(GqlParser.TIMESTAMP);
				this.state = 6715;
				this.separator();
				this.state = 6716;
				this.match(GqlParser.QUOTE);
				this.state = 6717;
				this.match(GqlParser.FOUR_DIGIT);
				this.state = 6718;
				this.match(GqlParser.MINUS);
				this.state = 6719;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6720;
				this.match(GqlParser.MINUS);
				this.state = 6721;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6722;
				this.separator();
				this.state = 6723;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6724;
				this.match(GqlParser.COLON);
				this.state = 6725;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6726;
				this.match(GqlParser.COLON);
				this.state = 6727;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6728;
				this.match(GqlParser.QUOTE);
				}
				break;
			case 110:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6730;
				this.match(GqlParser.DATETIME);
				this.state = 6731;
				this.separator();
				this.state = 6732;
				this.match(GqlParser.QUOTE);
				this.state = 6733;
				this.match(GqlParser.FOUR_DIGIT);
				this.state = 6734;
				this.match(GqlParser.MINUS);
				this.state = 6735;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6736;
				this.match(GqlParser.MINUS);
				this.state = 6737;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6738;
				this.separator();
				this.state = 6739;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6740;
				this.match(GqlParser.COLON);
				this.state = 6741;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6742;
				this.match(GqlParser.COLON);
				this.state = 6743;
				this.match(GqlParser.DOUBLE_DIGIT);
				this.state = 6744;
				this.match(GqlParser.QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationLiteral(): DurationLiteralContext {
		let localctx: DurationLiteralContext = new DurationLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1248, GqlParser.RULE_durationLiteral);
		try {
			this.state = 6753;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 122:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6748;
				this.match(GqlParser.DURATION);
				this.state = 6749;
				this.separator();
				this.state = 6750;
				this.durationString();
				}
				break;
			case 379:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6752;
				this.sqlIntervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public durationString(): DurationStringContext {
		let localctx: DurationStringContext = new DurationStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1250, GqlParser.RULE_durationString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6755;
			this.unbrokenCharacterStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlIntervalLiteral(): SqlIntervalLiteralContext {
		let localctx: SqlIntervalLiteralContext = new SqlIntervalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1252, GqlParser.RULE_sqlIntervalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6757;
			this.match(GqlParser.UNSIGNED_INT);
			this.state = 6759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 7) !== 0)) {
				{
				this.state = 6758;
				this.separator();
				}
			}

			this.state = 6761;
			this.sqlIntervalType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlIntervalType(): SqlIntervalTypeContext {
		let localctx: SqlIntervalTypeContext = new SqlIntervalTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1254, GqlParser.RULE_sqlIntervalType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6763;
			_la = this._input.LA(1);
			if(!(((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 15) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullLiteral(): NullLiteralContext {
		let localctx: NullLiteralContext = new NullLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1256, GqlParser.RULE_nullLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6765;
			this.match(GqlParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listLiteral(): ListLiteralContext {
		let localctx: ListLiteralContext = new ListLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1258, GqlParser.RULE_listLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6767;
			this.listValueConstructorByEnumeration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordLiteral(): RecordLiteralContext {
		let localctx: RecordLiteralContext = new RecordLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1260, GqlParser.RULE_recordLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6769;
			this.recordValueConstructor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public objectName(): ObjectNameContext {
		let localctx: ObjectNameContext = new ObjectNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1262, GqlParser.RULE_objectName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6771;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public objectNameOrBindingVar(): ObjectNameOrBindingVarContext {
		let localctx: ObjectNameOrBindingVarContext = new ObjectNameOrBindingVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1264, GqlParser.RULE_objectNameOrBindingVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6773;
			this.match(GqlParser.REGULAR_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public directoryName(): DirectoryNameContext {
		let localctx: DirectoryNameContext = new DirectoryNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1266, GqlParser.RULE_directoryName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6775;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schemaName(): SchemaNameContext {
		let localctx: SchemaNameContext = new SchemaNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1268, GqlParser.RULE_schemaName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6777;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphName(): GraphNameContext {
		let localctx: GraphNameContext = new GraphNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1270, GqlParser.RULE_graphName);
		try {
			this.state = 6781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6779;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6780;
				this.delimitedGraphName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimitedGraphName(): DelimitedGraphNameContext {
		let localctx: DelimitedGraphNameContext = new DelimitedGraphNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1272, GqlParser.RULE_delimitedGraphName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6783;
			this.delimitedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphTypeName(): GraphTypeNameContext {
		let localctx: GraphTypeNameContext = new GraphTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1274, GqlParser.RULE_graphTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6785;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementTypeName(): ElementTypeNameContext {
		let localctx: ElementTypeNameContext = new ElementTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1276, GqlParser.RULE_elementTypeName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6787;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableName(): BindingTableNameContext {
		let localctx: BindingTableNameContext = new BindingTableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1278, GqlParser.RULE_bindingTableName);
		try {
			this.state = 6791;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6789;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6790;
				this.delimitedBindingTableName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimitedBindingTableName(): DelimitedBindingTableNameContext {
		let localctx: DelimitedBindingTableNameContext = new DelimitedBindingTableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1280, GqlParser.RULE_delimitedBindingTableName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6793;
			this.delimitedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureName(): ProcedureNameContext {
		let localctx: ProcedureNameContext = new ProcedureNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1282, GqlParser.RULE_procedureName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6795;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelName(): LabelNameContext {
		let localctx: LabelNameContext = new LabelNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1284, GqlParser.RULE_labelName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6797;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public propertyName(): PropertyNameContext {
		let localctx: PropertyNameContext = new PropertyNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1286, GqlParser.RULE_propertyName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6799;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldName(): FieldNameContext {
		let localctx: FieldNameContext = new FieldNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1288, GqlParser.RULE_fieldName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6801;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameterName(): ParameterNameContext {
		let localctx: ParameterNameContext = new ParameterNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1290, GqlParser.RULE_parameterName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6803;
			this.match(GqlParser.DOLLAR);
			this.state = 6804;
			this.separatedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public var_(): VarContext {
		let localctx: VarContext = new VarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1292, GqlParser.RULE_var);
		try {
			this.state = 6811;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 925, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6806;
				this.graphVar();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6807;
				this.graphPatternVar();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6808;
				this.bindingTableVar();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6809;
				this.valueVar();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6810;
				this.bindingVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphVar(): GraphVarContext {
		let localctx: GraphVarContext = new GraphVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1294, GqlParser.RULE_graphVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6813;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public graphPatternVar(): GraphPatternVarContext {
		let localctx: GraphPatternVarContext = new GraphPatternVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1296, GqlParser.RULE_graphPatternVar);
		try {
			this.state = 6817;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 926, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6815;
				this.elementVar();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6816;
				this.pathOrSubpathVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathOrSubpathVar(): PathOrSubpathVarContext {
		let localctx: PathOrSubpathVarContext = new PathOrSubpathVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1298, GqlParser.RULE_pathOrSubpathVar);
		try {
			this.state = 6821;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 927, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6819;
				this.pathVar();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6820;
				this.subpathVar();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elementVar(): ElementVarContext {
		let localctx: ElementVarContext = new ElementVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1300, GqlParser.RULE_elementVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6823;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pathVar(): PathVarContext {
		let localctx: PathVarContext = new PathVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1302, GqlParser.RULE_pathVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6825;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subpathVar(): SubpathVarContext {
		let localctx: SubpathVarContext = new SubpathVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1304, GqlParser.RULE_subpathVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6827;
			this.match(GqlParser.REGULAR_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingTableVar(): BindingTableVarContext {
		let localctx: BindingTableVarContext = new BindingTableVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1306, GqlParser.RULE_bindingTableVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6829;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueVar(): ValueVarContext {
		let localctx: ValueVarContext = new ValueVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1308, GqlParser.RULE_valueVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6831;
			this.bindingVar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bindingVar(): BindingVarContext {
		let localctx: BindingVarContext = new BindingVarContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1310, GqlParser.RULE_bindingVar);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6833;
			this.match(GqlParser.REGULAR_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public token(): TokenContext {
		let localctx: TokenContext = new TokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1312, GqlParser.RULE_token);
		try {
			this.state = 6837;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
			case 58:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 196:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
			case 211:
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 222:
			case 223:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
			case 236:
			case 237:
			case 238:
			case 239:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 248:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 321:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 366:
			case 384:
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6835;
				this.nonDelimiterToken();
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 19:
			case 20:
			case 21:
			case 28:
			case 33:
			case 38:
			case 39:
			case 55:
			case 56:
			case 59:
			case 385:
			case 386:
			case 387:
			case 413:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6836;
				this.delimiterToken();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonDelimiterToken(): NonDelimiterTokenContext {
		let localctx: NonDelimiterTokenContext = new NonDelimiterTokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1314, GqlParser.RULE_nonDelimiterToken);
		try {
			this.state = 6845;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6839;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6840;
				this.parameterName();
				}
				break;
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 196:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
			case 211:
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 222:
			case 223:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
			case 236:
			case 237:
			case 238:
			case 239:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 248:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 321:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6841;
				this.keyWord();
				}
				break;
			case 366:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6842;
				this.match(GqlParser.UNSIGNED_NUMERIC_LITERAL);
				}
				break;
			case 384:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6843;
				this.match(GqlParser.BYTE_STRING_LITERAL);
				}
				break;
			case 58:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6844;
				this.match(GqlParser.MULTISET_ALTERNATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let localctx: IdentifierContext = new IdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1316, GqlParser.RULE_identifier);
		try {
			this.state = 6849;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6847;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6848;
				this.delimitedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public separatedIdentifier(): SeparatedIdentifierContext {
		let localctx: SeparatedIdentifierContext = new SeparatedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1318, GqlParser.RULE_separatedIdentifier);
		try {
			this.state = 6853;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 395:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6851;
				this.match(GqlParser.REGULAR_IDENTIFIER);
				}
				break;
			case 56:
			case 386:
			case 387:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6852;
				this.delimitedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonDelimitedIdentifier(): NonDelimitedIdentifierContext {
		let localctx: NonDelimitedIdentifierContext = new NonDelimitedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1320, GqlParser.RULE_nonDelimitedIdentifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6855;
			_la = this._input.LA(1);
			if(!(_la===395 || _la===396)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimitedIdentifier(): DelimitedIdentifierContext {
		let localctx: DelimitedIdentifierContext = new DelimitedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1322, GqlParser.RULE_delimitedIdentifier);
		try {
			this.state = 6859;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 932, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6857;
				this.doubleQuotedCharacterSequence();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6858;
				this.accentQuotedCharacterSequence();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyWord(): KeyWordContext {
		let localctx: KeyWordContext = new KeyWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1324, GqlParser.RULE_keyWord);
		try {
			this.state = 6863;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 196:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
			case 211:
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 222:
			case 223:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
			case 236:
			case 237:
			case 238:
			case 239:
			case 240:
			case 241:
			case 242:
			case 243:
			case 244:
			case 245:
			case 246:
			case 247:
			case 248:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6861;
				this.reservedWord();
				}
				break;
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 321:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6862;
				this.nonReservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public reservedWord(): ReservedWordContext {
		let localctx: ReservedWordContext = new ReservedWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1326, GqlParser.RULE_reservedWord);
		try {
			this.state = 7082;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6865;
				this.preReservedWord();
				}
				break;
			case 60:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6866;
				this.match(GqlParser.ABS);
				}
				break;
			case 61:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6867;
				this.match(GqlParser.ACOS);
				}
				break;
			case 62:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6868;
				this.match(GqlParser.ALL);
				}
				break;
			case 63:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6869;
				this.match(GqlParser.ALL_DIFFERENT);
				}
				break;
			case 64:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6870;
				this.match(GqlParser.AND);
				}
				break;
			case 65:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6871;
				this.match(GqlParser.ANY);
				}
				break;
			case 66:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6872;
				this.match(GqlParser.ARRAY);
				}
				break;
			case 67:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 6873;
				this.match(GqlParser.AS);
				}
				break;
			case 68:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 6874;
				this.match(GqlParser.ASC);
				}
				break;
			case 69:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 6875;
				this.match(GqlParser.ASCENDING);
				}
				break;
			case 70:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 6876;
				this.match(GqlParser.ASIN);
				}
				break;
			case 71:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 6877;
				this.match(GqlParser.AT);
				}
				break;
			case 72:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 6878;
				this.match(GqlParser.ATAN);
				}
				break;
			case 73:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 6879;
				this.match(GqlParser.AVG);
				}
				break;
			case 74:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 6880;
				this.match(GqlParser.BIG);
				}
				break;
			case 75:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 6881;
				this.match(GqlParser.BIGINT);
				}
				break;
			case 76:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 6882;
				this.match(GqlParser.BINARY);
				}
				break;
			case 77:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 6883;
				this.match(GqlParser.BOOL);
				}
				break;
			case 78:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 6884;
				this.match(GqlParser.BOOLEAN);
				}
				break;
			case 79:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 6885;
				this.match(GqlParser.BOTH);
				}
				break;
			case 80:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 6886;
				this.match(GqlParser.BTRIM);
				}
				break;
			case 81:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 6887;
				this.match(GqlParser.BY);
				}
				break;
			case 82:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 6888;
				this.match(GqlParser.BYTE_LENGTH);
				}
				break;
			case 83:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 6889;
				this.match(GqlParser.BYTES);
				}
				break;
			case 84:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 6890;
				this.match(GqlParser.CALL);
				}
				break;
			case 85:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 6891;
				this.match(GqlParser.CASE);
				}
				break;
			case 86:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 6892;
				this.match(GqlParser.CAST);
				}
				break;
			case 87:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 6893;
				this.match(GqlParser.CEIL);
				}
				break;
			case 88:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 6894;
				this.match(GqlParser.CEILING);
				}
				break;
			case 89:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 6895;
				this.match(GqlParser.CHAR_LENGTH);
				}
				break;
			case 90:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 6896;
				this.match(GqlParser.CHARACTER_LENGTH);
				}
				break;
			case 91:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 6897;
				this.match(GqlParser.CHARACTERISTICS);
				}
				break;
			case 92:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 6898;
				this.match(GqlParser.CLOSE);
				}
				break;
			case 93:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 6899;
				this.match(GqlParser.COALESCE);
				}
				break;
			case 94:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 6900;
				this.match(GqlParser.COLLECT);
				}
				break;
			case 95:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 6901;
				this.match(GqlParser.COMMIT);
				}
				break;
			case 96:
				this.enterOuterAlt(localctx, 38);
				{
				this.state = 6902;
				this.match(GqlParser.COPY);
				}
				break;
			case 97:
				this.enterOuterAlt(localctx, 39);
				{
				this.state = 6903;
				this.match(GqlParser.COS);
				}
				break;
			case 98:
				this.enterOuterAlt(localctx, 40);
				{
				this.state = 6904;
				this.match(GqlParser.COSH);
				}
				break;
			case 99:
				this.enterOuterAlt(localctx, 41);
				{
				this.state = 6905;
				this.match(GqlParser.COT);
				}
				break;
			case 100:
				this.enterOuterAlt(localctx, 42);
				{
				this.state = 6906;
				this.match(GqlParser.COUNT);
				}
				break;
			case 101:
				this.enterOuterAlt(localctx, 43);
				{
				this.state = 6907;
				this.match(GqlParser.CREATE);
				}
				break;
			case 102:
				this.enterOuterAlt(localctx, 44);
				{
				this.state = 6908;
				this.match(GqlParser.CURRENT_DATE);
				}
				break;
			case 103:
				this.enterOuterAlt(localctx, 45);
				{
				this.state = 6909;
				this.match(GqlParser.CURRENT_GRAPH);
				}
				break;
			case 104:
				this.enterOuterAlt(localctx, 46);
				{
				this.state = 6910;
				this.match(GqlParser.CURRENT_PROPERTY_GRAPH);
				}
				break;
			case 105:
				this.enterOuterAlt(localctx, 47);
				{
				this.state = 6911;
				this.match(GqlParser.CURRENT_SCHEMA);
				}
				break;
			case 106:
				this.enterOuterAlt(localctx, 48);
				{
				this.state = 6912;
				this.match(GqlParser.CURRENT_TIME);
				}
				break;
			case 107:
				this.enterOuterAlt(localctx, 49);
				{
				this.state = 6913;
				this.match(GqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case 108:
				this.enterOuterAlt(localctx, 50);
				{
				this.state = 6914;
				this.match(GqlParser.CURRENT_USER);
				}
				break;
			case 109:
				this.enterOuterAlt(localctx, 51);
				{
				this.state = 6915;
				this.match(GqlParser.DATE);
				}
				break;
			case 110:
				this.enterOuterAlt(localctx, 52);
				{
				this.state = 6916;
				this.match(GqlParser.DATETIME);
				}
				break;
			case 111:
				this.enterOuterAlt(localctx, 53);
				{
				this.state = 6917;
				this.match(GqlParser.DAY);
				}
				break;
			case 112:
				this.enterOuterAlt(localctx, 54);
				{
				this.state = 6918;
				this.match(GqlParser.DEC);
				}
				break;
			case 113:
				this.enterOuterAlt(localctx, 55);
				{
				this.state = 6919;
				this.match(GqlParser.DECIMAL);
				}
				break;
			case 114:
				this.enterOuterAlt(localctx, 56);
				{
				this.state = 6920;
				this.match(GqlParser.DEGREES);
				}
				break;
			case 115:
				this.enterOuterAlt(localctx, 57);
				{
				this.state = 6921;
				this.match(GqlParser.DELETE);
				}
				break;
			case 116:
				this.enterOuterAlt(localctx, 58);
				{
				this.state = 6922;
				this.match(GqlParser.DESC);
				}
				break;
			case 117:
				this.enterOuterAlt(localctx, 59);
				{
				this.state = 6923;
				this.match(GqlParser.DESCENDING);
				}
				break;
			case 118:
				this.enterOuterAlt(localctx, 60);
				{
				this.state = 6924;
				this.match(GqlParser.DETACH);
				}
				break;
			case 119:
				this.enterOuterAlt(localctx, 61);
				{
				this.state = 6925;
				this.match(GqlParser.DISTINCT);
				}
				break;
			case 120:
				this.enterOuterAlt(localctx, 62);
				{
				this.state = 6926;
				this.match(GqlParser.DOUBLE);
				}
				break;
			case 121:
				this.enterOuterAlt(localctx, 63);
				{
				this.state = 6927;
				this.match(GqlParser.DROP);
				}
				break;
			case 122:
				this.enterOuterAlt(localctx, 64);
				{
				this.state = 6928;
				this.match(GqlParser.DURATION);
				}
				break;
			case 123:
				this.enterOuterAlt(localctx, 65);
				{
				this.state = 6929;
				this.match(GqlParser.DURATION_BETWEEN);
				}
				break;
			case 124:
				this.enterOuterAlt(localctx, 66);
				{
				this.state = 6930;
				this.match(GqlParser.ELEMENT_ID);
				}
				break;
			case 125:
				this.enterOuterAlt(localctx, 67);
				{
				this.state = 6931;
				this.match(GqlParser.ELSE);
				}
				break;
			case 126:
				this.enterOuterAlt(localctx, 68);
				{
				this.state = 6932;
				this.match(GqlParser.END);
				}
				break;
			case 127:
				this.enterOuterAlt(localctx, 69);
				{
				this.state = 6933;
				this.match(GqlParser.EXCEPT);
				}
				break;
			case 128:
				this.enterOuterAlt(localctx, 70);
				{
				this.state = 6934;
				this.match(GqlParser.EXISTS);
				}
				break;
			case 129:
				this.enterOuterAlt(localctx, 71);
				{
				this.state = 6935;
				this.match(GqlParser.EXP);
				}
				break;
			case 130:
				this.enterOuterAlt(localctx, 72);
				{
				this.state = 6936;
				this.match(GqlParser.FALSE);
				}
				break;
			case 131:
				this.enterOuterAlt(localctx, 73);
				{
				this.state = 6937;
				this.match(GqlParser.FILTER);
				}
				break;
			case 132:
				this.enterOuterAlt(localctx, 74);
				{
				this.state = 6938;
				this.match(GqlParser.FINISH);
				}
				break;
			case 133:
				this.enterOuterAlt(localctx, 75);
				{
				this.state = 6939;
				this.match(GqlParser.FLOAT);
				}
				break;
			case 134:
				this.enterOuterAlt(localctx, 76);
				{
				this.state = 6940;
				this.match(GqlParser.FLOAT16);
				}
				break;
			case 135:
				this.enterOuterAlt(localctx, 77);
				{
				this.state = 6941;
				this.match(GqlParser.FLOAT32);
				}
				break;
			case 136:
				this.enterOuterAlt(localctx, 78);
				{
				this.state = 6942;
				this.match(GqlParser.FLOAT64);
				}
				break;
			case 137:
				this.enterOuterAlt(localctx, 79);
				{
				this.state = 6943;
				this.match(GqlParser.FLOAT128);
				}
				break;
			case 138:
				this.enterOuterAlt(localctx, 80);
				{
				this.state = 6944;
				this.match(GqlParser.FLOAT256);
				}
				break;
			case 139:
				this.enterOuterAlt(localctx, 81);
				{
				this.state = 6945;
				this.match(GqlParser.FLOOR);
				}
				break;
			case 140:
				this.enterOuterAlt(localctx, 82);
				{
				this.state = 6946;
				this.match(GqlParser.FOR);
				}
				break;
			case 141:
				this.enterOuterAlt(localctx, 83);
				{
				this.state = 6947;
				this.match(GqlParser.FROM);
				}
				break;
			case 142:
				this.enterOuterAlt(localctx, 84);
				{
				this.state = 6948;
				this.match(GqlParser.GROUP);
				}
				break;
			case 143:
				this.enterOuterAlt(localctx, 85);
				{
				this.state = 6949;
				this.match(GqlParser.HAVING);
				}
				break;
			case 144:
				this.enterOuterAlt(localctx, 86);
				{
				this.state = 6950;
				this.match(GqlParser.HOME_GRAPH);
				}
				break;
			case 145:
				this.enterOuterAlt(localctx, 87);
				{
				this.state = 6951;
				this.match(GqlParser.HOME_PROPERTY_GRAPH);
				}
				break;
			case 146:
				this.enterOuterAlt(localctx, 88);
				{
				this.state = 6952;
				this.match(GqlParser.HOME_SCHEMA);
				}
				break;
			case 147:
				this.enterOuterAlt(localctx, 89);
				{
				this.state = 6953;
				this.match(GqlParser.HOUR);
				}
				break;
			case 148:
				this.enterOuterAlt(localctx, 90);
				{
				this.state = 6954;
				this.match(GqlParser.IF);
				}
				break;
			case 149:
				this.enterOuterAlt(localctx, 91);
				{
				this.state = 6955;
				this.match(GqlParser.IN);
				}
				break;
			case 150:
				this.enterOuterAlt(localctx, 92);
				{
				this.state = 6956;
				this.match(GqlParser.INSERT);
				}
				break;
			case 151:
				this.enterOuterAlt(localctx, 93);
				{
				this.state = 6957;
				this.match(GqlParser.INT);
				}
				break;
			case 152:
				this.enterOuterAlt(localctx, 94);
				{
				this.state = 6958;
				this.match(GqlParser.INTEGER);
				}
				break;
			case 153:
				this.enterOuterAlt(localctx, 95);
				{
				this.state = 6959;
				this.match(GqlParser.INT8);
				}
				break;
			case 154:
				this.enterOuterAlt(localctx, 96);
				{
				this.state = 6960;
				this.match(GqlParser.INTEGER8);
				}
				break;
			case 155:
				this.enterOuterAlt(localctx, 97);
				{
				this.state = 6961;
				this.match(GqlParser.INT16);
				}
				break;
			case 156:
				this.enterOuterAlt(localctx, 98);
				{
				this.state = 6962;
				this.match(GqlParser.INTEGER16);
				}
				break;
			case 157:
				this.enterOuterAlt(localctx, 99);
				{
				this.state = 6963;
				this.match(GqlParser.INT32);
				}
				break;
			case 158:
				this.enterOuterAlt(localctx, 100);
				{
				this.state = 6964;
				this.match(GqlParser.INTEGER32);
				}
				break;
			case 159:
				this.enterOuterAlt(localctx, 101);
				{
				this.state = 6965;
				this.match(GqlParser.INT64);
				}
				break;
			case 160:
				this.enterOuterAlt(localctx, 102);
				{
				this.state = 6966;
				this.match(GqlParser.INTEGER64);
				}
				break;
			case 161:
				this.enterOuterAlt(localctx, 103);
				{
				this.state = 6967;
				this.match(GqlParser.INT128);
				}
				break;
			case 162:
				this.enterOuterAlt(localctx, 104);
				{
				this.state = 6968;
				this.match(GqlParser.INTEGER128);
				}
				break;
			case 163:
				this.enterOuterAlt(localctx, 105);
				{
				this.state = 6969;
				this.match(GqlParser.INT256);
				}
				break;
			case 164:
				this.enterOuterAlt(localctx, 106);
				{
				this.state = 6970;
				this.match(GqlParser.INTEGER256);
				}
				break;
			case 165:
				this.enterOuterAlt(localctx, 107);
				{
				this.state = 6971;
				this.match(GqlParser.INTERSECT);
				}
				break;
			case 166:
				this.enterOuterAlt(localctx, 108);
				{
				this.state = 6972;
				this.match(GqlParser.INTERVAL);
				}
				break;
			case 167:
				this.enterOuterAlt(localctx, 109);
				{
				this.state = 6973;
				this.match(GqlParser.IS);
				}
				break;
			case 168:
				this.enterOuterAlt(localctx, 110);
				{
				this.state = 6974;
				this.match(GqlParser.LEADING);
				}
				break;
			case 169:
				this.enterOuterAlt(localctx, 111);
				{
				this.state = 6975;
				this.match(GqlParser.LET);
				}
				break;
			case 170:
				this.enterOuterAlt(localctx, 112);
				{
				this.state = 6976;
				this.match(GqlParser.LIKE);
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 113);
				{
				this.state = 6977;
				this.match(GqlParser.LIMIT);
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 114);
				{
				this.state = 6978;
				this.match(GqlParser.LIST);
				}
				break;
			case 173:
				this.enterOuterAlt(localctx, 115);
				{
				this.state = 6979;
				this.match(GqlParser.LN);
				}
				break;
			case 174:
				this.enterOuterAlt(localctx, 116);
				{
				this.state = 6980;
				this.match(GqlParser.LOCAL);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 117);
				{
				this.state = 6981;
				this.match(GqlParser.LOCAL_DATETIME);
				}
				break;
			case 176:
				this.enterOuterAlt(localctx, 118);
				{
				this.state = 6982;
				this.match(GqlParser.LOCAL_TIME);
				}
				break;
			case 177:
				this.enterOuterAlt(localctx, 119);
				{
				this.state = 6983;
				this.match(GqlParser.LOCAL_TIMESTAMP);
				}
				break;
			case 178:
				this.enterOuterAlt(localctx, 120);
				{
				this.state = 6984;
				this.match(GqlParser.LOG);
				}
				break;
			case 179:
				this.enterOuterAlt(localctx, 121);
				{
				this.state = 6985;
				this.match(GqlParser.LOG10);
				}
				break;
			case 180:
				this.enterOuterAlt(localctx, 122);
				{
				this.state = 6986;
				this.match(GqlParser.LOWER);
				}
				break;
			case 181:
				this.enterOuterAlt(localctx, 123);
				{
				this.state = 6987;
				this.match(GqlParser.LTRIM);
				}
				break;
			case 182:
				this.enterOuterAlt(localctx, 124);
				{
				this.state = 6988;
				this.match(GqlParser.MATCH);
				}
				break;
			case 183:
				this.enterOuterAlt(localctx, 125);
				{
				this.state = 6989;
				this.match(GqlParser.MAX);
				}
				break;
			case 184:
				this.enterOuterAlt(localctx, 126);
				{
				this.state = 6990;
				this.match(GqlParser.MIN);
				}
				break;
			case 185:
				this.enterOuterAlt(localctx, 127);
				{
				this.state = 6991;
				this.match(GqlParser.MINUTE);
				}
				break;
			case 186:
				this.enterOuterAlt(localctx, 128);
				{
				this.state = 6992;
				this.match(GqlParser.MOD);
				}
				break;
			case 187:
				this.enterOuterAlt(localctx, 129);
				{
				this.state = 6993;
				this.match(GqlParser.MONTH);
				}
				break;
			case 188:
				this.enterOuterAlt(localctx, 130);
				{
				this.state = 6994;
				this.match(GqlParser.NEXT);
				}
				break;
			case 189:
				this.enterOuterAlt(localctx, 131);
				{
				this.state = 6995;
				this.match(GqlParser.NODETACH);
				}
				break;
			case 190:
				this.enterOuterAlt(localctx, 132);
				{
				this.state = 6996;
				this.match(GqlParser.NORMALIZE);
				}
				break;
			case 191:
				this.enterOuterAlt(localctx, 133);
				{
				this.state = 6997;
				this.match(GqlParser.NOT);
				}
				break;
			case 192:
				this.enterOuterAlt(localctx, 134);
				{
				this.state = 6998;
				this.match(GqlParser.NULL);
				}
				break;
			case 193:
				this.enterOuterAlt(localctx, 135);
				{
				this.state = 6999;
				this.match(GqlParser.NULLS);
				}
				break;
			case 194:
				this.enterOuterAlt(localctx, 136);
				{
				this.state = 7000;
				this.match(GqlParser.NULLIF);
				}
				break;
			case 195:
				this.enterOuterAlt(localctx, 137);
				{
				this.state = 7001;
				this.match(GqlParser.OCTET_LENGTH);
				}
				break;
			case 196:
				this.enterOuterAlt(localctx, 138);
				{
				this.state = 7002;
				this.match(GqlParser.OF);
				}
				break;
			case 197:
				this.enterOuterAlt(localctx, 139);
				{
				this.state = 7003;
				this.match(GqlParser.OFFSET);
				}
				break;
			case 198:
				this.enterOuterAlt(localctx, 140);
				{
				this.state = 7004;
				this.match(GqlParser.OPEN);
				}
				break;
			case 199:
				this.enterOuterAlt(localctx, 141);
				{
				this.state = 7005;
				this.match(GqlParser.OPTIONAL);
				}
				break;
			case 200:
				this.enterOuterAlt(localctx, 142);
				{
				this.state = 7006;
				this.match(GqlParser.OR);
				}
				break;
			case 201:
				this.enterOuterAlt(localctx, 143);
				{
				this.state = 7007;
				this.match(GqlParser.ORDER);
				}
				break;
			case 202:
				this.enterOuterAlt(localctx, 144);
				{
				this.state = 7008;
				this.match(GqlParser.OTHERWISE);
				}
				break;
			case 203:
				this.enterOuterAlt(localctx, 145);
				{
				this.state = 7009;
				this.match(GqlParser.PARAMETER);
				}
				break;
			case 204:
				this.enterOuterAlt(localctx, 146);
				{
				this.state = 7010;
				this.match(GqlParser.PARAMETERS);
				}
				break;
			case 205:
				this.enterOuterAlt(localctx, 147);
				{
				this.state = 7011;
				this.match(GqlParser.PATH);
				}
				break;
			case 206:
				this.enterOuterAlt(localctx, 148);
				{
				this.state = 7012;
				this.match(GqlParser.PATH_LENGTH);
				}
				break;
			case 207:
				this.enterOuterAlt(localctx, 149);
				{
				this.state = 7013;
				this.match(GqlParser.PATHS);
				}
				break;
			case 208:
				this.enterOuterAlt(localctx, 150);
				{
				this.state = 7014;
				this.match(GqlParser.PERCENTILE_CONT);
				}
				break;
			case 209:
				this.enterOuterAlt(localctx, 151);
				{
				this.state = 7015;
				this.match(GqlParser.PERCENTILE_DISC);
				}
				break;
			case 210:
				this.enterOuterAlt(localctx, 152);
				{
				this.state = 7016;
				this.match(GqlParser.POWER);
				}
				break;
			case 211:
				this.enterOuterAlt(localctx, 153);
				{
				this.state = 7017;
				this.match(GqlParser.PRECISION);
				}
				break;
			case 212:
				this.enterOuterAlt(localctx, 154);
				{
				this.state = 7018;
				this.match(GqlParser.PROPERTY_EXISTS);
				}
				break;
			case 213:
				this.enterOuterAlt(localctx, 155);
				{
				this.state = 7019;
				this.match(GqlParser.RADIANS);
				}
				break;
			case 214:
				this.enterOuterAlt(localctx, 156);
				{
				this.state = 7020;
				this.match(GqlParser.REAL);
				}
				break;
			case 215:
				this.enterOuterAlt(localctx, 157);
				{
				this.state = 7021;
				this.match(GqlParser.RECORD);
				}
				break;
			case 216:
				this.enterOuterAlt(localctx, 158);
				{
				this.state = 7022;
				this.match(GqlParser.REMOVE);
				}
				break;
			case 217:
				this.enterOuterAlt(localctx, 159);
				{
				this.state = 7023;
				this.match(GqlParser.REPLACE);
				}
				break;
			case 218:
				this.enterOuterAlt(localctx, 160);
				{
				this.state = 7024;
				this.match(GqlParser.RESET);
				}
				break;
			case 219:
				this.enterOuterAlt(localctx, 161);
				{
				this.state = 7025;
				this.match(GqlParser.RETURN);
				}
				break;
			case 220:
				this.enterOuterAlt(localctx, 162);
				{
				this.state = 7026;
				this.match(GqlParser.ROLLBACK);
				}
				break;
			case 221:
				this.enterOuterAlt(localctx, 163);
				{
				this.state = 7027;
				this.match(GqlParser.RTRIM);
				}
				break;
			case 222:
				this.enterOuterAlt(localctx, 164);
				{
				this.state = 7028;
				this.match(GqlParser.SAME);
				}
				break;
			case 223:
				this.enterOuterAlt(localctx, 165);
				{
				this.state = 7029;
				this.match(GqlParser.SCHEMA);
				}
				break;
			case 224:
				this.enterOuterAlt(localctx, 166);
				{
				this.state = 7030;
				this.match(GqlParser.SECOND);
				}
				break;
			case 225:
				this.enterOuterAlt(localctx, 167);
				{
				this.state = 7031;
				this.match(GqlParser.SELECT);
				}
				break;
			case 226:
				this.enterOuterAlt(localctx, 168);
				{
				this.state = 7032;
				this.match(GqlParser.SESSION);
				}
				break;
			case 227:
				this.enterOuterAlt(localctx, 169);
				{
				this.state = 7033;
				this.match(GqlParser.SET);
				}
				break;
			case 228:
				this.enterOuterAlt(localctx, 170);
				{
				this.state = 7034;
				this.match(GqlParser.SIGNED);
				}
				break;
			case 229:
				this.enterOuterAlt(localctx, 171);
				{
				this.state = 7035;
				this.match(GqlParser.SIN);
				}
				break;
			case 230:
				this.enterOuterAlt(localctx, 172);
				{
				this.state = 7036;
				this.match(GqlParser.SINH);
				}
				break;
			case 231:
				this.enterOuterAlt(localctx, 173);
				{
				this.state = 7037;
				this.match(GqlParser.SKIP_);
				}
				break;
			case 232:
				this.enterOuterAlt(localctx, 174);
				{
				this.state = 7038;
				this.match(GqlParser.SMALL);
				}
				break;
			case 233:
				this.enterOuterAlt(localctx, 175);
				{
				this.state = 7039;
				this.match(GqlParser.SMALLINT);
				}
				break;
			case 234:
				this.enterOuterAlt(localctx, 176);
				{
				this.state = 7040;
				this.match(GqlParser.SQRT);
				}
				break;
			case 235:
				this.enterOuterAlt(localctx, 177);
				{
				this.state = 7041;
				this.match(GqlParser.START);
				}
				break;
			case 236:
				this.enterOuterAlt(localctx, 178);
				{
				this.state = 7042;
				this.match(GqlParser.STDDEV_POP);
				}
				break;
			case 237:
				this.enterOuterAlt(localctx, 179);
				{
				this.state = 7043;
				this.match(GqlParser.STDDEV_SAMP);
				}
				break;
			case 238:
				this.enterOuterAlt(localctx, 180);
				{
				this.state = 7044;
				this.match(GqlParser.STRING);
				}
				break;
			case 239:
				this.enterOuterAlt(localctx, 181);
				{
				this.state = 7045;
				this.match(GqlParser.SUM);
				}
				break;
			case 240:
				this.enterOuterAlt(localctx, 182);
				{
				this.state = 7046;
				this.match(GqlParser.TAN);
				}
				break;
			case 241:
				this.enterOuterAlt(localctx, 183);
				{
				this.state = 7047;
				this.match(GqlParser.TANH);
				}
				break;
			case 242:
				this.enterOuterAlt(localctx, 184);
				{
				this.state = 7048;
				this.match(GqlParser.THEN);
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 185);
				{
				this.state = 7049;
				this.match(GqlParser.TIME);
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 186);
				{
				this.state = 7050;
				this.match(GqlParser.TIMESTAMP);
				}
				break;
			case 245:
				this.enterOuterAlt(localctx, 187);
				{
				this.state = 7051;
				this.match(GqlParser.TRAILING);
				}
				break;
			case 246:
				this.enterOuterAlt(localctx, 188);
				{
				this.state = 7052;
				this.match(GqlParser.TRIM);
				}
				break;
			case 247:
				this.enterOuterAlt(localctx, 189);
				{
				this.state = 7053;
				this.match(GqlParser.TRUE);
				}
				break;
			case 248:
				this.enterOuterAlt(localctx, 190);
				{
				this.state = 7054;
				this.match(GqlParser.TYPED);
				}
				break;
			case 249:
				this.enterOuterAlt(localctx, 191);
				{
				this.state = 7055;
				this.match(GqlParser.UBIGINT);
				}
				break;
			case 250:
				this.enterOuterAlt(localctx, 192);
				{
				this.state = 7056;
				this.match(GqlParser.UINT);
				}
				break;
			case 251:
				this.enterOuterAlt(localctx, 193);
				{
				this.state = 7057;
				this.match(GqlParser.UINT8);
				}
				break;
			case 252:
				this.enterOuterAlt(localctx, 194);
				{
				this.state = 7058;
				this.match(GqlParser.UINT16);
				}
				break;
			case 253:
				this.enterOuterAlt(localctx, 195);
				{
				this.state = 7059;
				this.match(GqlParser.UINT32);
				}
				break;
			case 254:
				this.enterOuterAlt(localctx, 196);
				{
				this.state = 7060;
				this.match(GqlParser.UINT64);
				}
				break;
			case 255:
				this.enterOuterAlt(localctx, 197);
				{
				this.state = 7061;
				this.match(GqlParser.UINT128);
				}
				break;
			case 256:
				this.enterOuterAlt(localctx, 198);
				{
				this.state = 7062;
				this.match(GqlParser.UINT256);
				}
				break;
			case 257:
				this.enterOuterAlt(localctx, 199);
				{
				this.state = 7063;
				this.match(GqlParser.UNION);
				}
				break;
			case 258:
				this.enterOuterAlt(localctx, 200);
				{
				this.state = 7064;
				this.match(GqlParser.UNKNOWN);
				}
				break;
			case 259:
				this.enterOuterAlt(localctx, 201);
				{
				this.state = 7065;
				this.match(GqlParser.UNSIGNED);
				}
				break;
			case 260:
				this.enterOuterAlt(localctx, 202);
				{
				this.state = 7066;
				this.match(GqlParser.UPPER);
				}
				break;
			case 261:
				this.enterOuterAlt(localctx, 203);
				{
				this.state = 7067;
				this.match(GqlParser.USE);
				}
				break;
			case 262:
				this.enterOuterAlt(localctx, 204);
				{
				this.state = 7068;
				this.match(GqlParser.USMALLINT);
				}
				break;
			case 263:
				this.enterOuterAlt(localctx, 205);
				{
				this.state = 7069;
				this.match(GqlParser.VALUE);
				}
				break;
			case 264:
				this.enterOuterAlt(localctx, 206);
				{
				this.state = 7070;
				this.match(GqlParser.VARBINARY);
				}
				break;
			case 265:
				this.enterOuterAlt(localctx, 207);
				{
				this.state = 7071;
				this.match(GqlParser.VARCHAR);
				}
				break;
			case 266:
				this.enterOuterAlt(localctx, 208);
				{
				this.state = 7072;
				this.match(GqlParser.VARIABLE);
				}
				break;
			case 267:
				this.enterOuterAlt(localctx, 209);
				{
				this.state = 7073;
				this.match(GqlParser.WHEN);
				}
				break;
			case 268:
				this.enterOuterAlt(localctx, 210);
				{
				this.state = 7074;
				this.match(GqlParser.WHERE);
				}
				break;
			case 269:
				this.enterOuterAlt(localctx, 211);
				{
				this.state = 7075;
				this.match(GqlParser.WITH);
				}
				break;
			case 270:
				this.enterOuterAlt(localctx, 212);
				{
				this.state = 7076;
				this.match(GqlParser.XOR);
				}
				break;
			case 271:
				this.enterOuterAlt(localctx, 213);
				{
				this.state = 7077;
				this.match(GqlParser.YEAR);
				}
				break;
			case 272:
				this.enterOuterAlt(localctx, 214);
				{
				this.state = 7078;
				this.match(GqlParser.YIELD);
				}
				break;
			case 273:
				this.enterOuterAlt(localctx, 215);
				{
				this.state = 7079;
				this.match(GqlParser.ZONED);
				}
				break;
			case 274:
				this.enterOuterAlt(localctx, 216);
				{
				this.state = 7080;
				this.match(GqlParser.ZONED_DATETIME);
				}
				break;
			case 275:
				this.enterOuterAlt(localctx, 217);
				{
				this.state = 7081;
				this.match(GqlParser.ZONED_TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public preReservedWord(): PreReservedWordContext {
		let localctx: PreReservedWordContext = new PreReservedWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1328, GqlParser.RULE_preReservedWord);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7084;
			_la = this._input.LA(1);
			if(!(((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 7) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonReservedWord(): NonReservedWordContext {
		let localctx: NonReservedWordContext = new NonReservedWordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1330, GqlParser.RULE_nonReservedWord);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7086;
			_la = this._input.LA(1);
			if(!(((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & 4294967295) !== 0) || ((((_la - 343)) & ~0x1F) === 0 && ((1 << (_la - 343)) & 131071) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public delimiterToken(): DelimiterTokenContext {
		let localctx: DelimiterTokenContext = new DelimiterTokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1332, GqlParser.RULE_delimiterToken);
		try {
			this.state = 7125;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 935, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7088;
				this.match(GqlParser.GQL_SPECIAL_CHAR);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7089;
				this.characterStringLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7090;
				this.dateString();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7091;
				this.dateTimeString();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7092;
				this.delimitedIdentifier();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 7093;
				this.durationString();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 7094;
				this.timeString();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 7095;
				this.match(GqlParser.CONCATENATION);
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 7096;
				this.match(GqlParser.DOUBLE_COLON);
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 7097;
				this.match(GqlParser.DOUBLE_MINUS);
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 7098;
				this.match(GqlParser.DOUBLE_PERIOD);
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 7099;
				this.notEquals();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 7100;
				this.lessThen();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 7101;
				this.graterThanOrEquals();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 7102;
				this.lessThanOrEquals();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 7103;
				this.graterThanOrEquals();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 7104;
				this.match(GqlParser.LEFT_ARROW);
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 7105;
				this.match(GqlParser.LEFT_ARROW_TILDE);
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 7106;
				this.match(GqlParser.LEFT_ARROW_BRACKET);
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 7107;
				this.match(GqlParser.LEFT_ARROW_TILDE_BRACKET);
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 7108;
				this.match(GqlParser.LEFT_MINUS_RIGHT);
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 7109;
				this.match(GqlParser.LEFT_MINUS_SLASH);
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 7110;
				this.match(GqlParser.LEFT_TILDE_SLASH);
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 7111;
				this.match(GqlParser.MINUS_LEFT_BRACKET);
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 7112;
				this.match(GqlParser.MINUS_SLASH);
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 7113;
				this.match(GqlParser.RIGHT_ARROW);
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 7114;
				this.match(GqlParser.RIGHT_BRACKET_MINUS);
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 7115;
				this.match(GqlParser.RIGHT_BRACKET_TILDE);
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 7116;
				this.match(GqlParser.BRACKET_RIGHT_ARROW);
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 7117;
				this.match(GqlParser.BRACKET_TILDE_RIGHT_ARROW);
				}
				break;
			case 31:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 7118;
				this.match(GqlParser.SLASH_MINUS);
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 7119;
				this.match(GqlParser.SLASH_MINUS_RIGHT);
				}
				break;
			case 33:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 7120;
				this.match(GqlParser.SLASH_TILDE);
				}
				break;
			case 34:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 7121;
				this.match(GqlParser.SLASH_TILDE_RIGHT);
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 7122;
				this.match(GqlParser.TILDE_LEFT_BRACKET);
				}
				break;
			case 36:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 7123;
				this.match(GqlParser.TILDE_RIGHT_ARROW);
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 7124;
				this.match(GqlParser.TILDE_SLASH);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public separator(): SeparatorContext {
		let localctx: SeparatorContext = new SeparatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1334, GqlParser.RULE_separator);
		try {
			this.state = 7129;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 388:
			case 389:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7127;
				this.comment();
				}
				break;
			case 390:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7128;
				this.match(GqlParser.WS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comment(): CommentContext {
		let localctx: CommentContext = new CommentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1336, GqlParser.RULE_comment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7131;
			_la = this._input.LA(1);
			if(!(_la===388 || _la===389)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgeSynonym(): EdgeSynonymContext {
		let localctx: EdgeSynonymContext = new EdgeSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1338, GqlParser.RULE_edgeSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7133;
			_la = this._input.LA(1);
			if(!(_la===318 || _la===341)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public edgesSynonym(): EdgesSynonymContext {
		let localctx: EdgesSynonymContext = new EdgesSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1340, GqlParser.RULE_edgesSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7135;
			_la = this._input.LA(1);
			if(!(_la===319 || _la===342)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nodeSynonym(): NodeSynonymContext {
		let localctx: NodeSynonymContext = new NodeSynonymContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1342, GqlParser.RULE_nodeSynonym);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7137;
			_la = this._input.LA(1);
			if(!(_la===335 || _la===355)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 95:
			return this.compositeQueryExpr_sempred(localctx as CompositeQueryExprContext, predIndex);
		case 464:
			return this.booleanTerm_sempred(localctx as BooleanTermContext, predIndex);
		case 531:
			return this.dateTimeValueExpr_sempred(localctx as DateTimeValueExprContext, predIndex);
		case 544:
			return this.durationValueExpr_sempred(localctx as DurationValueExprContext, predIndex);
		case 547:
			return this.durationTerm_sempred(localctx as DurationTermContext, predIndex);
		}
		return true;
	}
	private compositeQueryExpr_sempred(localctx: CompositeQueryExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private booleanTerm_sempred(localctx: BooleanTermContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private dateTimeValueExpr_sempred(localctx: DateTimeValueExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		case 3:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private durationValueExpr_sempred(localctx: DurationValueExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private durationTerm_sempred(localctx: DurationTermContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.precpred(this._ctx, 3);
		case 7:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,1,413,7140,2,0,7,0,
	2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,
	2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,
	17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,
	7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,
	31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
	2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
	46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,
	7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,
	60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,
	2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,
	75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,
	7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
	89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,
	2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,
	7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,
	7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,
	7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,
	7,163,2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
	7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
	7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,
	7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,
	7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,
	7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,
	7,199,2,200,7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,
	7,205,2,206,7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,
	7,211,2,212,7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,
	7,217,2,218,7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,
	7,223,2,224,7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,
	7,229,2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
	7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
	7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,
	7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,
	7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,
	7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,
	7,265,2,266,7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,
	7,271,2,272,7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,
	7,277,2,278,7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,
	7,283,2,284,7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,
	7,289,2,290,7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,
	7,295,2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
	7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
	7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,
	7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,
	7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,
	7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,
	7,331,2,332,7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,
	7,337,2,338,7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,
	7,343,2,344,7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,
	7,349,2,350,7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,
	7,355,2,356,7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,
	7,361,2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
	7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
	7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,
	7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,
	7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,
	7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,
	7,397,2,398,7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,
	7,403,2,404,7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,
	7,409,2,410,7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,
	7,415,2,416,7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,
	7,421,2,422,7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,
	7,427,2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
	7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
	7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,
	7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,
	7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,
	7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,
	7,463,2,464,7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,
	7,469,2,470,7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,
	7,475,2,476,7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,
	7,481,2,482,7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,
	7,487,2,488,7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,
	7,493,2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
	7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
	7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,
	7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,
	7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,
	7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,
	7,529,2,530,7,530,2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,
	7,535,2,536,7,536,2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,
	7,541,2,542,7,542,2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,
	7,547,2,548,7,548,2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,
	7,553,2,554,7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,
	7,559,2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
	7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
	7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,
	7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,
	7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,
	7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,
	7,595,2,596,7,596,2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,
	7,601,2,602,7,602,2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,
	7,607,2,608,7,608,2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,
	7,613,2,614,7,614,2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,
	7,619,2,620,7,620,2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,
	7,625,2,626,7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,
	7,631,2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,
	7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,
	7,643,2,644,7,644,2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,
	7,649,2,650,7,650,2,651,7,651,2,652,7,652,2,653,7,653,2,654,7,654,2,655,
	7,655,2,656,7,656,2,657,7,657,2,658,7,658,2,659,7,659,2,660,7,660,2,661,
	7,661,2,662,7,662,2,663,7,663,2,664,7,664,2,665,7,665,2,666,7,666,2,667,
	7,667,2,668,7,668,2,669,7,669,2,670,7,670,2,671,7,671,1,0,3,0,1346,8,0,
	1,0,1,0,3,0,1350,8,0,1,0,3,0,1353,8,0,1,0,3,0,1356,8,0,5,0,1358,8,0,10,
	0,12,0,1361,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,1369,8,1,1,2,1,2,3,2,1373,8,
	2,1,3,1,3,3,3,1377,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,1387,8,4,1,5,
	1,5,1,5,1,5,1,6,1,6,3,6,1395,8,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
	7,1,8,1,8,1,9,1,9,1,9,3,9,1412,8,9,1,10,1,10,3,10,1416,8,10,1,10,1,10,1,
	10,1,10,3,10,1422,8,10,1,10,1,10,1,11,1,11,3,11,1428,8,11,1,11,1,11,1,11,
	1,11,3,11,1434,8,11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,1442,8,12,1,12,1,
	12,1,13,1,13,3,13,1448,8,13,1,13,1,13,1,14,1,14,3,14,1454,8,14,1,14,1,14,
	1,14,1,14,1,15,1,15,3,15,1462,8,15,1,15,1,15,1,15,1,15,3,15,1468,8,15,1,
	15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,1479,8,15,1,16,3,16,1482,
	8,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1493,8,17,3,17,1495,
	8,17,1,17,1,17,1,17,1,17,3,17,1501,8,17,1,17,3,17,1504,8,17,1,18,1,18,1,
	18,1,18,1,18,1,18,3,18,1512,8,18,1,19,1,19,1,20,1,20,3,20,1518,8,20,1,20,
	1,20,3,20,1522,8,20,1,20,5,20,1525,8,20,10,20,12,20,1528,9,20,1,21,1,21,
	3,21,1532,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1542,8,22,1,
	23,1,23,1,24,1,24,3,24,1548,8,24,1,24,1,24,3,24,1552,8,24,1,24,1,24,1,25,
	1,25,1,26,1,26,3,26,1560,8,26,1,26,1,26,3,26,1564,8,26,1,26,1,26,1,27,1,
	27,3,27,1570,8,27,1,27,1,27,3,27,1574,8,27,1,27,1,27,1,28,1,28,1,28,3,28,
	1581,8,28,1,28,1,28,1,28,3,28,1586,8,28,1,28,1,28,1,29,1,29,3,29,1592,8,
	29,4,29,1594,8,29,11,29,12,29,1595,1,30,1,30,1,30,3,30,1601,8,30,1,31,1,
	31,1,31,1,31,5,31,1607,8,31,10,31,12,31,1610,9,31,1,32,1,32,1,32,3,32,1615,
	8,32,1,33,1,33,1,33,1,33,3,33,1621,8,33,1,33,1,33,1,33,1,34,1,34,3,34,1628,
	8,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,3,35,1638,8,35,1,35,1,35,1,
	35,1,35,3,35,1644,8,35,1,35,1,35,1,36,1,36,3,36,1650,8,36,1,36,1,36,1,37,
	1,37,3,37,1656,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,1667,
	8,38,1,38,1,38,1,38,1,38,3,38,1673,8,38,1,38,1,38,1,39,1,39,3,39,1679,8,
	39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,3,41,1692,8,41,
	1,41,1,41,1,41,1,41,3,41,1698,8,41,1,41,1,41,1,42,1,42,3,42,1704,8,42,1,
	42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,1713,8,43,1,44,1,44,1,45,1,45,1,46,
	1,46,1,46,1,46,3,46,1723,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,
	48,1,48,1,48,1,48,1,48,3,48,1738,8,48,1,49,4,49,1741,8,49,11,49,12,49,1742,
	1,50,1,50,3,50,1747,8,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1755,8,51,1,
	52,1,52,1,52,1,52,1,52,1,52,3,52,1763,8,52,1,52,1,52,1,52,1,53,1,53,1,53,
	1,53,1,53,1,53,3,53,1774,8,53,1,53,1,53,1,53,1,54,1,54,3,54,1781,8,54,1,
	55,1,55,1,55,1,55,3,55,1787,8,55,1,55,1,55,1,55,1,55,3,55,1793,8,55,1,55,
	1,55,1,55,1,55,1,55,3,55,1800,8,55,1,55,1,55,1,55,3,55,1805,8,55,1,56,1,
	56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1815,8,56,1,56,1,56,1,56,1,56,1,56,
	1,56,1,56,3,56,1824,8,56,1,56,1,56,1,56,3,56,1829,8,56,1,57,1,57,1,57,1,
	57,3,57,1835,8,57,1,57,1,57,1,57,3,57,1840,8,57,1,57,1,57,1,57,1,58,1,58,
	3,58,1847,8,58,1,58,1,58,3,58,1851,8,58,1,58,3,58,1854,8,58,1,59,1,59,1,
	59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,3,61,
	1872,8,61,1,61,1,61,1,61,1,61,1,61,3,61,1879,8,61,1,61,1,61,1,61,1,62,1,
	62,1,62,1,62,3,62,1888,8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1896,8,62,
	1,62,1,62,1,62,1,62,1,62,1,62,3,62,1904,8,62,1,62,1,62,1,62,1,62,1,62,3,
	62,1911,8,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,3,63,1920,8,63,1,63,1,63,
	1,63,1,63,3,63,1926,8,63,1,63,3,63,1929,8,63,1,64,1,64,1,64,1,64,1,64,1,
	64,3,64,1937,8,64,1,65,1,65,1,65,1,65,3,65,1943,8,65,1,65,1,65,1,65,1,65,
	1,65,1,65,1,65,3,65,1952,8,65,1,65,1,65,1,65,1,66,1,66,1,67,1,67,3,67,1961,
	8,67,1,68,1,68,3,68,1965,8,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1973,8,
	69,1,70,1,70,1,70,1,70,1,71,1,71,3,71,1981,8,71,1,72,1,72,1,72,1,72,3,72,
	1987,8,72,1,73,4,73,1990,8,73,11,73,12,73,1991,1,74,1,74,3,74,1996,8,74,
	1,75,1,75,3,75,2000,8,75,1,76,1,76,1,76,1,76,3,76,2006,8,76,1,77,1,77,1,
	77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,3,79,2018,8,79,1,79,1,79,3,79,2022,
	8,79,1,79,1,79,3,79,2026,8,79,4,79,2028,8,79,11,79,12,79,2029,1,80,1,80,
	1,80,3,80,2035,8,80,1,81,1,81,3,81,2039,8,81,1,81,1,81,3,81,2043,8,81,1,
	81,1,81,3,81,2047,8,81,1,81,1,81,3,81,2051,8,81,1,81,1,81,1,82,1,82,3,82,
	2057,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2065,8,82,1,82,3,82,2068,8,
	82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,3,84,2079,8,84,1,84,1,84,
	3,84,2083,8,84,1,84,5,84,2086,8,84,10,84,12,84,2089,9,84,1,85,1,85,1,85,
	1,85,1,86,1,86,1,86,1,86,3,86,2099,8,86,1,86,1,86,3,86,2103,8,86,4,86,2105,
	8,86,11,86,12,86,2106,1,87,1,87,3,87,2111,8,87,1,88,1,88,1,88,1,88,1,89,
	1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,3,91,2130,8,
	91,1,91,1,91,3,91,2134,8,91,1,91,1,91,3,91,2138,8,91,4,91,2140,8,91,11,
	91,12,91,2141,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,
	95,1,95,1,95,1,95,5,95,2159,8,95,10,95,12,95,2162,9,95,1,96,1,96,3,96,2166,
	8,96,1,97,1,97,1,97,1,97,1,98,1,98,1,99,1,99,3,99,2176,8,99,1,100,1,100,
	1,100,4,100,2181,8,100,11,100,12,100,2182,1,100,1,100,1,100,1,100,1,100,
	3,100,2190,8,100,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,
	1,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
	3,105,2213,8,105,1,105,1,105,3,105,2217,8,105,1,106,1,106,1,106,1,106,5,
	106,2223,8,106,10,106,12,106,2226,9,106,1,107,1,107,3,107,2230,8,107,1,
	108,1,108,1,108,1,108,1,108,3,108,2237,8,108,1,109,1,109,3,109,2241,8,109,
	1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,112,1,112,1,112,3,112,
	2254,8,112,1,112,1,112,3,112,2258,8,112,1,112,1,112,1,112,1,112,3,112,2264,
	8,112,1,112,1,112,3,112,2268,8,112,1,112,1,112,3,112,2272,8,112,1,113,3,
	113,2275,8,113,1,113,4,113,2278,8,113,11,113,12,113,2279,1,114,1,114,1,
	115,1,115,1,115,1,115,3,115,2288,8,115,1,116,1,116,1,116,1,116,1,117,1,
	117,3,117,2296,8,117,1,117,1,117,3,117,2300,8,117,1,117,1,117,3,117,2304,
	8,117,4,117,2306,8,117,11,117,12,117,2307,1,118,1,118,1,118,3,118,2313,
	8,118,1,118,1,118,3,118,2317,8,118,1,118,1,118,3,118,2321,8,118,1,119,1,
	119,1,119,1,119,3,119,2327,8,119,1,119,3,119,2330,8,119,1,120,1,120,1,120,
	1,120,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,122,1,123,
	1,123,1,123,1,123,3,123,2350,8,123,1,123,1,123,1,123,3,123,2355,8,123,1,
	123,1,123,1,123,1,123,3,123,2361,8,123,1,123,3,123,2364,8,123,1,124,1,124,
	1,124,1,124,3,124,2370,8,124,1,124,3,124,2373,8,124,1,125,1,125,1,125,1,
	125,1,126,1,126,1,126,3,126,2382,8,126,1,126,1,126,3,126,2386,8,126,1,126,
	1,126,1,126,3,126,2391,8,126,1,126,1,126,1,126,1,126,3,126,2397,8,126,1,
	127,1,127,3,127,2401,8,127,1,127,1,127,3,127,2405,8,127,1,127,5,127,2408,
	8,127,10,127,12,127,2411,9,127,1,128,1,128,1,128,1,128,3,128,2417,8,128,
	1,129,1,129,1,129,1,129,1,130,1,130,3,130,2425,8,130,1,130,3,130,2428,8,
	130,1,130,1,130,1,130,3,130,2433,8,130,1,130,1,130,1,130,1,130,1,130,3,
	130,2440,8,130,1,130,1,130,1,130,3,130,2445,8,130,1,130,1,130,1,130,3,130,
	2450,8,130,1,130,1,130,1,130,3,130,2455,8,130,1,130,1,130,1,130,3,130,2460,
	8,130,1,130,1,130,1,130,3,130,2465,8,130,3,130,2467,8,130,1,131,1,131,3,
	131,2471,8,131,1,131,1,131,3,131,2475,8,131,1,131,1,131,3,131,2479,8,131,
	4,131,2481,8,131,11,131,12,131,2482,1,132,1,132,1,132,1,132,3,132,2489,
	8,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,135,1,135,1,135,3,135,
	2501,8,135,1,136,1,136,3,136,2505,8,136,1,136,1,136,3,136,2509,8,136,1,
	136,5,136,2512,8,136,10,136,12,136,2515,9,136,1,137,1,137,1,137,1,137,1,
	138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2531,8,
	138,1,139,1,139,3,139,2535,8,139,1,139,1,139,1,139,1,140,1,140,3,140,2542,
	8,140,1,141,1,141,1,141,3,141,2547,8,141,1,141,1,141,1,142,1,142,3,142,
	2553,8,142,1,142,3,142,2556,8,142,1,142,3,142,2559,8,142,1,142,1,142,1,
	143,1,143,3,143,2565,8,143,1,143,1,143,3,143,2569,8,143,1,143,1,143,3,143,
	2573,8,143,4,143,2575,8,143,11,143,12,143,2576,1,144,1,144,1,144,1,144,
	3,144,2583,8,144,1,144,3,144,2586,8,144,1,144,3,144,2589,8,144,1,144,1,
	144,1,145,1,145,3,145,2595,8,145,1,145,1,145,3,145,2599,8,145,1,145,1,145,
	3,145,2603,8,145,4,145,2605,8,145,11,145,12,145,2606,1,146,1,146,1,147,
	1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,149,1,149,1,150,1,150,1,151,
	1,151,1,152,1,152,1,153,1,153,1,153,1,153,3,153,2631,8,153,1,154,1,154,
	1,154,1,155,1,155,3,155,2638,8,155,1,155,1,155,3,155,2642,8,155,1,155,1,
	155,3,155,2646,8,155,4,155,2648,8,155,11,155,12,155,2649,1,156,1,156,1,
	156,1,156,1,157,1,157,1,157,3,157,2659,8,157,1,157,1,157,1,157,1,157,3,
	157,2665,8,157,1,157,1,157,1,157,3,157,2670,8,157,1,158,1,158,3,158,2674,
	8,158,1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,161,1,161,1,161,1,161,
	3,161,2687,8,161,1,161,3,161,2690,8,161,1,162,1,162,1,162,1,162,3,162,2696,
	8,162,1,162,3,162,2699,8,162,1,163,1,163,3,163,2703,8,163,1,163,1,163,3,
	163,2707,8,163,1,163,5,163,2710,8,163,10,163,12,163,2713,9,163,1,164,1,
	164,1,164,3,164,2718,8,164,1,164,1,164,1,164,3,164,2723,8,164,1,164,4,164,
	2726,8,164,11,164,12,164,2727,1,165,1,165,3,165,2732,8,165,1,165,1,165,
	1,166,1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,168,1,168,3,168,2746,
	8,168,1,169,1,169,1,169,1,169,3,169,2752,8,169,1,170,1,170,1,171,1,171,
	1,171,3,171,2759,8,171,1,172,1,172,1,172,1,172,3,172,2765,8,172,1,172,1,
	172,1,172,3,172,2770,8,172,1,173,1,173,1,174,1,174,1,174,1,174,3,174,2778,
	8,174,1,174,1,174,1,174,3,174,2783,8,174,1,174,1,174,1,174,3,174,2788,8,
	174,1,175,1,175,1,176,1,176,1,176,1,176,3,176,2796,8,176,1,177,1,177,1,
	177,1,177,1,177,1,177,3,177,2804,8,177,1,177,1,177,1,177,3,177,2809,8,177,
	1,178,1,178,1,178,1,178,1,178,1,178,3,178,2817,8,178,1,178,1,178,1,178,
	3,178,2822,8,178,1,179,1,179,1,179,1,179,1,179,1,179,3,179,2830,8,179,1,
	179,1,179,1,179,3,179,2835,8,179,1,180,1,180,1,180,1,180,1,180,1,180,3,
	180,2843,8,180,1,180,1,180,1,180,3,180,2848,8,180,1,180,1,180,1,180,1,181,
	1,181,1,182,1,182,1,183,1,183,1,183,3,183,2860,8,183,1,184,1,184,1,184,
	1,184,1,184,1,184,5,184,2868,8,184,10,184,12,184,2871,9,184,1,185,1,185,
	3,185,2875,8,185,1,185,1,185,3,185,2879,8,185,1,185,1,185,3,185,2883,8,
	185,5,185,2885,8,185,10,185,12,185,2888,9,185,1,186,1,186,1,186,1,186,5,
	186,2894,8,186,10,186,12,186,2897,9,186,1,187,1,187,1,187,3,187,2902,8,
	187,1,188,1,188,1,188,1,188,1,189,1,189,1,189,1,190,1,190,1,190,3,190,2914,
	8,190,1,191,1,191,3,191,2918,8,191,1,192,1,192,3,192,2922,8,192,1,192,1,
	192,3,192,2926,8,192,1,192,1,192,1,193,3,193,2931,8,193,1,193,3,193,2934,
	8,193,1,193,3,193,2937,8,193,1,193,1,193,1,193,3,193,2942,8,193,1,194,1,
	194,3,194,2946,8,194,1,194,1,194,1,195,1,195,1,195,1,196,1,196,1,196,1,
	196,3,196,2957,8,196,3,196,2959,8,196,1,197,1,197,3,197,2963,8,197,1,198,
	1,198,1,198,1,198,1,199,1,199,3,199,2971,8,199,1,199,1,199,3,199,2975,8,
	199,1,199,1,199,1,200,1,200,3,200,2981,8,200,1,200,1,200,3,200,2985,8,200,
	1,200,5,200,2988,8,200,10,200,12,200,2991,9,200,1,201,1,201,3,201,2995,
	8,201,1,201,1,201,3,201,2999,8,201,1,201,1,201,1,202,1,202,3,202,3005,8,
	202,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,3014,8,203,1,204,1,
	204,3,204,3018,8,204,1,204,1,204,3,204,3022,8,204,1,204,1,204,1,205,1,205,
	3,205,3028,8,205,1,205,1,205,3,205,3032,8,205,1,205,1,205,1,206,1,206,3,
	206,3038,8,206,1,206,1,206,3,206,3042,8,206,1,206,1,206,1,207,1,207,3,207,
	3048,8,207,1,207,1,207,3,207,3052,8,207,1,207,1,207,1,208,1,208,3,208,3058,
	8,208,1,208,1,208,3,208,3062,8,208,1,208,1,208,1,209,1,209,3,209,3068,8,
	209,1,209,1,209,3,209,3072,8,209,1,209,1,209,1,210,1,210,3,210,3078,8,210,
	1,210,1,210,3,210,3082,8,210,1,210,1,210,1,211,1,211,1,212,1,212,3,212,
	3090,8,212,1,212,1,212,1,212,3,212,3095,8,212,1,212,1,212,1,212,3,212,3100,
	8,212,1,212,1,212,1,212,1,212,3,212,3106,8,212,1,212,3,212,3109,8,212,1,
	212,1,212,1,213,1,213,3,213,3115,8,213,1,213,1,213,1,214,1,214,1,214,1,
	214,1,215,1,215,1,216,1,216,3,216,3127,8,216,1,216,1,216,3,216,3131,8,216,
	1,216,1,216,3,216,3135,8,216,5,216,3137,8,216,10,216,12,216,3140,9,216,
	1,217,1,217,3,217,3144,8,217,1,217,1,217,3,217,3148,8,217,1,217,1,217,3,
	217,3152,8,217,5,217,3154,8,217,10,217,12,217,3157,9,217,1,218,1,218,3,
	218,3161,8,218,1,218,3,218,3164,8,218,1,218,3,218,3167,8,218,1,218,1,218,
	1,219,1,219,1,219,3,219,3174,8,219,1,220,1,220,3,220,3178,8,220,1,220,1,
	220,3,220,3182,8,220,1,220,1,220,1,221,1,221,3,221,3188,8,221,1,221,1,221,
	3,221,3192,8,221,1,221,1,221,1,222,1,222,3,222,3198,8,222,1,222,1,222,3,
	222,3202,8,222,1,222,1,222,1,223,1,223,1,223,1,223,3,223,3210,8,223,1,223,
	1,223,1,223,3,223,3215,8,223,1,223,3,223,3218,8,223,1,224,1,224,1,224,1,
	224,1,224,3,224,3225,8,224,1,224,1,224,1,224,1,224,3,224,3231,8,224,1,224,
	3,224,3234,8,224,1,225,1,225,3,225,3238,8,225,1,225,1,225,3,225,3242,8,
	225,1,225,5,225,3245,8,225,10,225,12,225,3248,9,225,1,226,1,226,3,226,3252,
	8,226,1,226,1,226,3,226,3256,8,226,1,226,5,226,3259,8,226,10,226,12,226,
	3262,9,226,1,227,1,227,3,227,3266,8,227,1,228,1,228,3,228,3270,8,228,1,
	228,1,228,1,229,1,229,1,229,3,229,3277,8,229,1,230,1,230,1,231,1,231,3,
	231,3283,8,231,1,231,1,231,3,231,3287,8,231,1,231,1,231,1,232,1,232,1,232,
	1,232,3,232,3295,8,232,1,233,1,233,3,233,3299,8,233,1,233,1,233,3,233,3303,
	8,233,1,233,1,233,1,234,1,234,3,234,3309,8,234,1,234,1,234,1,234,3,234,
	3314,8,234,1,234,1,234,1,234,1,234,3,234,3320,8,234,1,234,3,234,3323,8,
	234,1,234,1,234,1,235,1,235,1,236,1,236,1,237,1,237,1,237,1,237,1,237,1,
	237,1,237,3,237,3338,8,237,1,238,1,238,3,238,3342,8,238,1,238,1,238,3,238,
	3346,8,238,1,238,1,238,1,239,1,239,3,239,3352,8,239,1,239,1,239,3,239,3356,
	8,239,1,239,1,239,1,240,1,240,3,240,3362,8,240,1,240,1,240,3,240,3366,8,
	240,1,240,1,240,1,241,1,241,3,241,3372,8,241,1,241,1,241,3,241,3376,8,241,
	1,241,1,241,1,242,1,242,3,242,3382,8,242,1,242,1,242,3,242,3386,8,242,1,
	242,1,242,1,243,1,243,3,243,3392,8,243,1,243,1,243,3,243,3396,8,243,1,243,
	1,243,1,244,1,244,3,244,3402,8,244,1,244,1,244,3,244,3406,8,244,1,244,1,
	244,1,245,1,245,1,245,3,245,3413,8,245,1,246,1,246,3,246,3417,8,246,1,246,
	1,246,3,246,3421,8,246,1,246,5,246,3424,8,246,10,246,12,246,3427,9,246,
	1,247,1,247,3,247,3431,8,247,1,247,1,247,3,247,3435,8,247,1,247,5,247,3438,
	8,247,10,247,12,247,3441,9,247,1,248,1,248,1,248,1,248,5,248,3447,8,248,
	10,248,12,248,3450,9,248,1,249,1,249,3,249,3454,8,249,1,249,1,249,3,249,
	3458,8,249,1,249,5,249,3461,8,249,10,249,12,249,3464,9,249,1,250,1,250,
	1,250,3,250,3469,8,250,1,251,1,251,1,251,1,251,1,252,1,252,1,252,1,253,
	1,253,3,253,3480,8,253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,
	3489,8,254,1,255,1,255,3,255,3493,8,255,1,255,1,255,1,256,1,256,3,256,3499,
	8,256,1,256,1,256,1,257,1,257,3,257,3505,8,257,1,257,1,257,1,258,1,258,
	3,258,3511,8,258,1,258,1,258,1,259,1,259,3,259,3517,8,259,1,259,1,259,3,
	259,3521,8,259,1,259,1,259,1,260,1,260,3,260,3527,8,260,1,260,1,260,3,260,
	3531,8,260,1,260,1,260,1,261,1,261,3,261,3537,8,261,1,261,1,261,1,262,1,
	262,3,262,3543,8,262,1,263,1,263,1,263,1,264,1,264,1,264,3,264,3551,8,264,
	1,264,1,264,3,264,3555,8,264,1,264,1,264,3,264,3559,8,264,1,265,1,265,1,
	265,1,265,1,266,1,266,1,266,1,266,1,267,1,267,3,267,3571,8,267,1,267,1,
	267,3,267,3575,8,267,1,267,4,267,3578,8,267,11,267,12,267,3579,1,268,1,
	268,1,268,1,268,3,268,3586,8,268,1,269,1,269,1,270,1,270,1,270,1,271,1,
	271,1,271,1,271,1,271,1,271,1,272,1,272,3,272,3601,8,272,1,272,1,272,3,
	272,3605,8,272,1,272,4,272,3608,8,272,11,272,12,272,3609,1,272,3,272,3613,
	8,272,1,273,1,273,1,274,1,274,3,274,3619,8,274,1,274,1,274,1,275,1,275,
	1,275,1,275,1,275,1,275,1,276,1,276,1,276,1,276,1,276,1,276,3,276,3635,
	8,276,1,277,1,277,1,277,3,277,3640,8,277,1,277,1,277,1,277,3,277,3645,8,
	277,1,277,1,277,3,277,3649,8,277,1,277,1,277,1,278,1,278,1,279,1,279,1,
	280,1,280,1,281,1,281,1,281,3,281,3662,8,281,1,281,1,281,1,282,1,282,1,
	283,1,283,3,283,3670,8,283,1,283,1,283,3,283,3674,8,283,1,283,4,283,3677,
	8,283,11,283,12,283,3678,1,284,1,284,1,284,1,284,3,284,3685,8,284,1,284,
	1,284,1,284,3,284,3690,8,284,1,285,1,285,1,286,1,286,1,287,1,287,1,287,
	1,287,1,287,1,287,1,287,1,287,3,287,3704,8,287,1,288,1,288,1,288,1,289,
	1,289,1,289,1,289,1,290,1,290,1,291,1,291,3,291,3717,8,291,1,291,1,291,
	1,291,1,291,1,291,1,291,1,292,1,292,3,292,3727,8,292,1,292,1,292,3,292,
	3731,8,292,1,292,1,292,1,293,1,293,1,294,1,294,3,294,3739,8,294,1,294,1,
	294,3,294,3743,8,294,1,294,5,294,3746,8,294,10,294,12,294,3749,9,294,1,
	295,1,295,3,295,3753,8,295,1,296,1,296,1,296,1,296,1,296,3,296,3760,8,296,
	1,297,1,297,3,297,3764,8,297,1,297,1,297,1,297,1,297,3,297,3770,8,297,1,
	297,1,297,1,298,1,298,3,298,3776,8,298,1,298,1,298,1,298,1,298,3,298,3782,
	8,298,1,298,3,298,3785,8,298,1,299,1,299,1,300,1,300,1,300,1,300,1,300,
	1,300,3,300,3795,8,300,1,301,1,301,1,302,1,302,1,303,1,303,1,303,1,303,
	3,303,3805,8,303,1,303,1,303,1,303,1,303,3,303,3811,8,303,1,304,1,304,3,
	304,3815,8,304,1,305,1,305,3,305,3819,8,305,1,305,1,305,1,305,1,305,1,305,
	1,305,1,305,1,305,1,305,1,305,3,305,3831,8,305,1,306,1,306,1,307,1,307,
	1,307,1,307,1,307,1,307,3,307,3841,8,307,1,308,1,308,1,309,1,309,1,310,
	1,310,1,310,3,310,3850,8,310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,
	1,312,1,313,1,313,1,313,1,313,1,314,1,314,3,314,3866,8,314,1,314,1,314,
	3,314,3870,8,314,1,314,1,314,1,315,1,315,3,315,3876,8,315,1,315,1,315,3,
	315,3880,8,315,1,315,1,315,1,316,1,316,3,316,3886,8,316,1,316,1,316,3,316,
	3890,8,316,1,316,1,316,1,317,1,317,3,317,3896,8,317,1,317,1,317,1,318,1,
	318,1,318,3,318,3903,8,318,1,319,1,319,3,319,3907,8,319,1,319,1,319,3,319,
	3911,8,319,1,319,1,319,1,320,1,320,3,320,3917,8,320,1,320,1,320,3,320,3921,
	8,320,1,320,1,320,1,321,1,321,3,321,3927,8,321,1,321,1,321,3,321,3931,8,
	321,1,321,1,321,1,322,1,322,3,322,3937,8,322,1,323,1,323,3,323,3941,8,323,
	1,323,1,323,3,323,3945,8,323,1,323,1,323,1,323,1,323,3,323,3951,8,323,1,
	323,3,323,3954,8,323,1,323,3,323,3957,8,323,1,323,3,323,3960,8,323,1,324,
	1,324,3,324,3964,8,324,1,324,1,324,3,324,3968,8,324,1,324,1,324,1,324,1,
	324,3,324,3974,8,324,1,324,3,324,3977,8,324,1,324,3,324,3980,8,324,1,324,
	3,324,3983,8,324,1,325,1,325,1,326,1,326,1,326,1,327,1,327,1,327,1,327,
	3,327,3994,8,327,1,328,1,328,3,328,3998,8,328,1,328,1,328,3,328,4002,8,
	328,1,328,1,328,3,328,4006,8,328,1,328,1,328,3,328,4010,8,328,1,328,1,328,
	1,329,1,329,3,329,4016,8,329,1,329,1,329,3,329,4020,8,329,1,329,1,329,3,
	329,4024,8,329,1,329,1,329,3,329,4028,8,329,1,329,1,329,1,330,1,330,3,330,
	4034,8,330,1,330,1,330,3,330,4038,8,330,1,330,1,330,3,330,4042,8,330,1,
	330,1,330,3,330,4046,8,330,1,330,1,330,1,331,1,331,1,332,1,332,1,333,1,
	333,1,334,1,334,1,335,1,335,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,
	336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,4074,8,336,1,336,3,336,4077,
	8,336,1,337,1,337,3,337,4081,8,337,1,337,3,337,4084,8,337,1,337,3,337,4087,
	8,337,1,337,1,337,1,338,1,338,3,338,4093,8,338,1,338,1,338,3,338,4097,8,
	338,1,338,5,338,4100,8,338,10,338,12,338,4103,9,338,1,339,1,339,1,339,1,
	339,3,339,4109,8,339,1,339,1,339,1,339,1,340,1,340,1,341,1,341,3,341,4118,
	8,341,1,341,1,341,1,341,1,341,1,342,1,342,1,342,3,342,4127,8,342,1,343,
	1,343,1,343,3,343,4132,8,343,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
	3,344,4141,8,344,1,345,1,345,1,345,1,345,3,345,4147,8,345,1,346,1,346,1,
	346,3,346,4152,8,346,1,346,1,346,3,346,4156,8,346,1,346,1,346,3,346,4160,
	8,346,1,346,1,346,1,346,3,346,4165,8,346,1,347,1,347,1,347,3,347,4170,8,
	347,1,347,1,347,3,347,4174,8,347,1,347,1,347,3,347,4178,8,347,3,347,4180,
	8,347,1,347,1,347,3,347,4184,8,347,1,347,1,347,3,347,4188,8,347,1,347,1,
	347,1,347,3,347,4193,8,347,1,347,1,347,1,347,3,347,4198,8,347,1,347,1,347,
	3,347,4202,8,347,1,347,1,347,3,347,4206,8,347,1,347,1,347,1,347,3,347,4211,
	8,347,1,347,1,347,1,347,3,347,4216,8,347,1,347,1,347,3,347,4220,8,347,1,
	347,1,347,3,347,4224,8,347,1,347,1,347,1,347,3,347,4229,8,347,3,347,4231,
	8,347,1,348,1,348,1,349,1,349,1,350,1,350,1,351,1,351,3,351,4241,8,351,
	1,352,1,352,3,352,4245,8,352,1,353,1,353,3,353,4249,8,353,1,354,1,354,1,
	354,1,354,3,354,4255,8,354,1,354,1,354,1,354,1,354,3,354,4261,8,354,1,354,
	1,354,1,354,1,354,3,354,4267,8,354,1,354,1,354,1,354,1,354,3,354,4273,8,
	354,1,354,1,354,1,354,1,354,3,354,4279,8,354,1,354,1,354,1,354,1,354,3,
	354,4285,8,354,1,354,1,354,1,354,1,354,3,354,4291,8,354,1,354,1,354,1,354,
	3,354,4296,8,354,1,354,1,354,3,354,4300,8,354,1,354,1,354,3,354,4304,8,
	354,1,354,1,354,1,354,3,354,4309,8,354,1,354,1,354,1,354,1,354,3,354,4315,
	8,354,1,354,1,354,3,354,4319,8,354,1,354,3,354,4322,8,354,1,355,1,355,1,
	355,1,355,3,355,4328,8,355,1,355,1,355,1,355,1,355,3,355,4334,8,355,1,355,
	1,355,1,355,1,355,3,355,4340,8,355,1,355,1,355,1,355,1,355,3,355,4346,8,
	355,1,355,1,355,1,355,1,355,3,355,4352,8,355,1,355,1,355,1,355,1,355,3,
	355,4358,8,355,1,355,1,355,1,355,1,355,3,355,4364,8,355,1,355,1,355,1,355,
	3,355,4369,8,355,1,355,1,355,3,355,4373,8,355,1,355,1,355,3,355,4377,8,
	355,1,355,1,355,1,355,3,355,4382,8,355,1,355,1,355,1,355,1,355,3,355,4388,
	8,355,1,355,1,355,1,355,1,355,3,355,4394,8,355,1,356,1,356,1,356,1,356,
	3,356,4400,8,356,1,356,1,356,1,356,1,356,3,356,4406,8,356,1,356,1,356,1,
	356,1,356,3,356,4412,8,356,1,356,1,356,1,356,1,356,3,356,4418,8,356,1,356,
	1,356,1,356,1,356,3,356,4424,8,356,1,356,1,356,1,356,1,356,3,356,4430,8,
	356,1,356,1,356,1,356,1,356,1,356,1,356,3,356,4438,8,356,1,356,1,356,1,
	356,3,356,4443,8,356,1,356,1,356,3,356,4447,8,356,1,356,1,356,3,356,4451,
	8,356,1,356,1,356,1,356,3,356,4456,8,356,1,356,1,356,1,356,1,356,3,356,
	4462,8,356,1,356,3,356,4465,8,356,3,356,4467,8,356,1,357,1,357,1,357,3,
	357,4472,8,357,1,357,1,357,3,357,4476,8,357,1,357,1,357,3,357,4480,8,357,
	1,357,3,357,4483,8,357,1,357,3,357,4486,8,357,1,357,1,357,3,357,4490,8,
	357,1,357,1,357,1,357,3,357,4495,8,357,1,358,1,358,1,359,1,359,1,360,1,
	360,1,360,1,360,3,360,4505,8,360,1,360,1,360,1,360,1,360,3,360,4511,8,360,
	1,360,1,360,1,360,1,360,3,360,4517,8,360,1,360,1,360,1,360,1,360,3,360,
	4523,8,360,1,360,1,360,1,360,1,360,3,360,4529,8,360,1,360,1,360,1,360,3,
	360,4534,8,360,1,360,1,360,3,360,4538,8,360,1,360,1,360,3,360,4542,8,360,
	1,360,3,360,4545,8,360,1,360,3,360,4548,8,360,1,360,1,360,3,360,4552,8,
	360,1,360,1,360,1,360,3,360,4557,8,360,1,360,1,360,1,360,1,360,3,360,4563,
	8,360,1,360,1,360,1,360,1,360,3,360,4569,8,360,1,360,1,360,1,360,3,360,
	4574,8,360,1,361,1,361,3,361,4578,8,361,1,362,1,362,1,362,1,362,1,362,3,
	362,4585,8,362,1,363,1,363,1,364,1,364,1,364,1,364,1,364,1,364,3,364,4595,
	8,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,3,364,4605,8,364,
	3,364,4607,8,364,1,365,1,365,1,365,1,365,1,365,1,365,3,365,4615,8,365,1,
	365,1,365,3,365,4619,8,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,3,
	365,4628,8,365,3,365,4630,8,365,1,366,1,366,1,366,1,366,3,366,4636,8,366,
	1,367,1,367,1,367,1,367,1,367,1,367,3,367,4644,8,367,1,367,1,367,1,367,
	1,367,1,367,1,367,1,367,1,367,3,367,4654,8,367,3,367,4656,8,367,1,368,1,
	368,1,368,1,368,1,368,1,368,3,368,4664,8,368,1,368,1,368,1,368,1,368,1,
	368,1,368,1,368,1,368,3,368,4674,8,368,3,368,4676,8,368,1,369,1,369,1,369,
	1,369,3,369,4682,8,369,1,370,1,370,1,370,1,370,3,370,4688,8,370,1,371,1,
	371,3,371,4692,8,371,1,372,1,372,1,372,1,372,3,372,4698,8,372,1,372,1,372,
	1,372,1,372,1,372,3,372,4705,8,372,1,373,1,373,1,373,1,373,3,373,4711,8,
	373,1,374,1,374,1,374,1,374,3,374,4717,8,374,1,375,1,375,3,375,4721,8,375,
	1,376,1,376,3,376,4725,8,376,1,376,1,376,1,376,1,376,3,376,4731,8,376,1,
	377,1,377,1,377,1,377,3,377,4737,8,377,1,378,1,378,3,378,4741,8,378,1,379,
	1,379,3,379,4745,8,379,1,379,1,379,1,379,1,379,3,379,4751,8,379,1,380,1,
	380,1,380,1,380,3,380,4757,8,380,1,381,1,381,3,381,4761,8,381,1,382,1,382,
	1,382,1,382,1,382,1,382,3,382,4769,8,382,1,382,1,382,3,382,4773,8,382,1,
	382,1,382,3,382,4777,8,382,1,382,1,382,1,382,3,382,4782,8,382,1,382,1,382,
	1,382,1,382,1,382,3,382,4789,8,382,1,382,1,382,3,382,4793,8,382,1,382,1,
	382,3,382,4797,8,382,1,382,1,382,1,382,3,382,4802,8,382,3,382,4804,8,382,
	1,383,1,383,3,383,4808,8,383,1,383,1,383,1,384,1,384,1,385,1,385,3,385,
	4816,8,385,1,385,1,385,1,385,1,385,3,385,4822,8,385,1,385,1,385,3,385,4826,
	8,385,1,385,1,385,1,385,1,385,3,385,4832,8,385,3,385,4834,8,385,1,386,1,
	386,3,386,4838,8,386,1,386,3,386,4841,8,386,1,386,3,386,4844,8,386,1,386,
	1,386,1,387,1,387,3,387,4850,8,387,1,387,1,387,3,387,4854,8,387,1,387,4,
	387,4857,8,387,11,387,12,387,4858,1,388,1,388,1,388,3,388,4864,8,388,1,
	389,1,389,1,390,1,390,3,390,4870,8,390,1,390,1,390,1,390,1,390,1,391,1,
	391,1,391,1,391,3,391,4880,8,391,1,391,1,391,3,391,4884,8,391,1,391,1,391,
	1,392,1,392,3,392,4890,8,392,1,392,1,392,3,392,4894,8,392,1,392,5,392,4897,
	8,392,10,392,12,392,4900,9,392,1,393,1,393,1,394,1,394,1,395,1,395,1,395,
	1,395,1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,397,1,397,1,397,3,397,
	4920,8,397,1,398,1,398,1,398,1,398,3,398,4926,8,398,1,399,1,399,1,399,1,
	400,1,400,1,400,1,400,3,400,4935,8,400,1,401,1,401,1,402,1,402,3,402,4941,
	8,402,1,403,1,403,1,403,5,403,4946,8,403,10,403,12,403,4949,9,403,1,403,
	1,403,3,403,4953,8,403,3,403,4955,8,403,1,404,1,404,1,404,4,404,4960,8,
	404,11,404,12,404,4961,1,405,1,405,1,405,1,405,1,405,1,405,1,405,3,405,
	4971,8,405,1,406,1,406,1,406,3,406,4976,8,406,1,406,1,406,1,407,1,407,1,
	408,1,408,3,408,4984,8,408,1,409,1,409,1,409,3,409,4989,8,409,1,409,1,409,
	1,410,1,410,1,410,1,410,1,410,1,410,3,410,4999,8,410,1,411,1,411,1,411,
	3,411,5004,8,411,1,411,1,411,1,412,1,412,3,412,5010,8,412,1,413,1,413,1,
	413,3,413,5015,8,413,1,413,1,413,1,414,1,414,3,414,5021,8,414,1,414,1,414,
	1,414,5,414,5026,8,414,10,414,12,414,5029,9,414,1,414,1,414,1,414,4,414,
	5034,8,414,11,414,12,414,5035,3,414,5038,8,414,1,415,1,415,1,416,1,416,
	1,417,1,417,1,418,1,418,1,418,1,418,1,418,1,418,1,418,1,418,1,418,1,418,
	1,418,3,418,5057,8,418,1,419,1,419,3,419,5061,8,419,1,419,1,419,1,420,1,
	420,3,420,5067,8,420,1,420,1,420,1,421,1,421,1,421,1,421,1,421,1,421,3,
	421,5077,8,421,1,422,1,422,1,423,1,423,1,423,1,424,1,424,1,425,1,425,1,
	426,1,426,1,426,1,427,1,427,1,427,1,428,1,428,3,428,5096,8,428,1,429,1,
	429,3,429,5100,8,429,1,429,1,429,3,429,5104,8,429,1,429,1,429,3,429,5108,
	8,429,1,429,1,429,1,429,1,429,3,429,5114,8,429,1,429,1,429,3,429,5118,8,
	429,1,429,1,429,1,429,1,429,3,429,5124,8,429,1,429,1,429,3,429,5128,8,429,
	1,429,1,429,1,429,1,429,3,429,5134,8,429,1,429,1,429,3,429,5138,8,429,1,
	429,1,429,1,429,3,429,5143,8,429,1,430,1,430,1,430,1,430,1,431,1,431,1,
	431,1,431,3,431,5153,8,431,1,431,1,431,1,431,1,432,1,432,1,432,1,432,1,
	433,1,433,1,433,1,433,3,433,5166,8,433,1,433,1,433,1,433,1,433,1,433,1,
	434,1,434,1,434,1,434,1,435,1,435,1,435,1,435,3,435,5181,8,435,1,435,1,
	435,1,435,3,435,5186,8,435,1,435,1,435,1,436,1,436,1,436,1,436,1,437,1,
	437,1,437,1,437,3,437,5198,8,437,1,437,1,437,1,438,1,438,1,438,1,439,1,
	439,1,439,1,439,1,440,1,440,1,440,1,440,3,440,5213,8,440,1,440,1,440,1,
	440,1,440,3,440,5219,8,440,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,
	441,3,441,5229,8,441,1,442,1,442,1,443,1,443,1,443,1,443,3,443,5237,8,443,
	1,443,1,443,1,443,1,443,1,443,1,443,1,443,1,444,1,444,1,444,1,444,3,444,
	5250,8,444,1,444,1,444,1,444,1,444,1,444,1,444,1,445,1,445,1,446,1,446,
	1,446,3,446,5263,8,446,1,446,1,446,3,446,5267,8,446,1,446,1,446,3,446,5271,
	8,446,1,446,4,446,5274,8,446,11,446,12,446,5275,1,446,3,446,5279,8,446,
	1,446,1,446,1,447,1,447,1,447,3,447,5286,8,447,1,447,1,447,3,447,5290,8,
	447,1,447,1,447,3,447,5294,8,447,1,447,4,447,5297,8,447,11,447,12,447,5298,
	1,447,3,447,5302,8,447,1,447,1,447,1,448,1,448,1,448,3,448,5309,8,448,1,
	448,1,448,3,448,5313,8,448,1,448,1,448,3,448,5317,8,448,1,448,1,448,3,448,
	5321,8,448,1,448,1,448,1,449,1,449,3,449,5327,8,449,1,450,1,450,3,450,5331,
	8,450,1,451,1,451,3,451,5335,8,451,1,452,1,452,3,452,5339,8,452,1,453,1,
	453,1,454,1,454,3,454,5345,8,454,1,455,1,455,1,455,1,455,1,455,1,455,1,
	455,1,455,1,455,1,455,3,455,5357,8,455,1,455,1,455,3,455,5361,8,455,1,455,
	4,455,5364,8,455,11,455,12,455,5365,3,455,5368,8,455,1,456,1,456,1,456,
	1,456,3,456,5374,8,456,1,457,1,457,3,457,5378,8,457,1,457,1,457,1,457,1,
	457,1,457,3,457,5385,8,457,1,458,1,458,3,458,5389,8,458,1,458,1,458,1,458,
	1,458,1,458,3,458,5396,8,458,1,459,1,459,1,460,1,460,1,461,1,461,1,462,
	1,462,1,463,1,463,1,463,1,463,1,463,1,463,1,463,1,463,1,463,1,463,1,463,
	1,463,1,463,3,463,5419,8,463,1,464,1,464,1,464,1,464,1,464,1,464,5,464,
	5427,8,464,10,464,12,464,5430,9,464,1,465,1,465,3,465,5434,8,465,1,465,
	1,465,1,466,1,466,1,466,1,466,1,466,1,466,3,466,5444,8,466,1,466,1,466,
	3,466,5448,8,466,1,467,1,467,1,468,1,468,3,468,5454,8,468,1,469,1,469,3,
	469,5458,8,469,1,470,1,470,3,470,5462,8,470,1,470,1,470,3,470,5466,8,470,
	1,470,1,470,1,471,1,471,1,471,3,471,5473,8,471,1,471,1,471,3,471,5477,8,
	471,1,471,1,471,1,471,1,471,3,471,5483,8,471,1,471,1,471,3,471,5487,8,471,
	1,471,1,471,3,471,5491,8,471,1,472,1,472,1,472,3,472,5496,8,472,1,472,1,
	472,3,472,5500,8,472,1,472,1,472,1,472,1,472,3,472,5506,8,472,1,472,1,472,
	3,472,5510,8,472,1,472,1,472,3,472,5514,8,472,1,473,3,473,5517,8,473,1,
	473,1,473,1,474,1,474,3,474,5523,8,474,1,475,1,475,3,475,5527,8,475,1,476,
	1,476,3,476,5531,8,476,1,476,1,476,3,476,5535,8,476,1,476,1,476,1,477,1,
	477,3,477,5541,8,477,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,3,
	478,5551,8,478,1,479,1,479,1,479,3,479,5556,8,479,1,480,1,480,1,480,1,480,
	1,480,1,480,1,480,1,480,1,480,1,480,3,480,5568,8,480,1,481,1,481,1,481,
	3,481,5573,8,481,1,482,1,482,1,482,3,482,5578,8,482,1,482,1,482,3,482,5582,
	8,482,1,482,1,482,1,483,1,483,1,483,3,483,5589,8,483,1,483,1,483,3,483,
	5593,8,483,1,483,1,483,1,484,1,484,1,484,3,484,5600,8,484,1,484,1,484,3,
	484,5604,8,484,1,484,1,484,1,485,1,485,1,485,3,485,5611,8,485,1,485,1,485,
	3,485,5615,8,485,1,485,1,485,1,486,1,486,1,486,3,486,5622,8,486,1,486,1,
	486,3,486,5626,8,486,1,486,1,486,3,486,5630,8,486,1,486,1,486,3,486,5634,
	8,486,1,486,1,486,1,487,1,487,1,488,1,488,1,489,1,489,1,489,3,489,5645,
	8,489,1,489,1,489,3,489,5649,8,489,1,489,1,489,1,490,1,490,1,491,1,491,
	1,491,3,491,5658,8,491,1,492,1,492,1,492,3,492,5663,8,492,1,492,1,492,3,
	492,5667,8,492,1,492,1,492,3,492,5671,8,492,1,492,1,492,3,492,5675,8,492,
	1,492,1,492,1,493,1,493,1,494,1,494,1,495,1,495,1,495,3,495,5686,8,495,
	1,495,1,495,3,495,5690,8,495,1,495,1,495,1,496,1,496,1,496,3,496,5697,8,
	496,1,496,1,496,3,496,5701,8,496,1,496,1,496,1,497,1,497,1,497,3,497,5708,
	8,497,1,497,1,497,3,497,5712,8,497,1,497,1,497,1,498,1,498,1,498,3,498,
	5719,8,498,1,498,1,498,3,498,5723,8,498,1,498,1,498,3,498,5727,8,498,1,
	498,1,498,3,498,5731,8,498,1,498,1,498,1,499,1,499,1,500,1,500,1,501,1,
	501,1,501,3,501,5742,8,501,1,501,1,501,3,501,5746,8,501,1,501,1,501,1,502,
	1,502,1,502,3,502,5753,8,502,1,502,1,502,3,502,5757,8,502,1,502,1,502,1,
	503,1,503,1,503,3,503,5764,8,503,1,503,1,503,3,503,5768,8,503,1,503,1,503,
	1,504,1,504,3,504,5774,8,504,1,505,1,505,3,505,5778,8,505,1,506,1,506,1,
	506,1,506,1,507,1,507,1,508,1,508,3,508,5788,8,508,1,509,1,509,3,509,5792,
	8,509,1,510,1,510,1,511,1,511,3,511,5798,8,511,1,512,1,512,1,512,1,512,
	1,513,1,513,3,513,5806,8,513,1,514,1,514,1,514,3,514,5811,8,514,1,515,1,
	515,1,515,3,515,5816,8,515,1,515,1,515,3,515,5820,8,515,1,515,1,515,1,516,
	1,516,3,516,5826,8,516,1,517,1,517,1,517,3,517,5831,8,517,1,517,1,517,3,
	517,5835,8,517,1,517,1,517,1,518,1,518,1,518,3,518,5842,8,518,1,518,1,518,
	3,518,5846,8,518,1,518,1,518,3,518,5850,8,518,1,518,1,518,1,518,3,518,5855,
	8,518,1,518,1,518,1,519,1,519,1,519,3,519,5862,8,519,1,519,1,519,1,519,
	3,519,5867,8,519,1,519,1,519,3,519,5871,8,519,1,519,1,519,1,520,1,520,1,
	521,1,521,1,522,1,522,1,523,1,523,1,523,3,523,5884,8,523,1,523,1,523,3,
	523,5888,8,523,1,523,1,523,3,523,5892,8,523,1,523,1,523,1,523,3,523,5897,
	8,523,1,523,1,523,1,524,1,524,1,525,1,525,1,526,1,526,1,526,3,526,5908,
	8,526,1,526,1,526,3,526,5912,8,526,1,526,1,526,1,527,1,527,1,527,3,527,
	5919,8,527,1,527,1,527,1,527,3,527,5924,8,527,1,527,1,527,3,527,5928,8,
	527,1,527,1,527,1,528,1,528,1,529,1,529,1,530,1,530,1,531,1,531,1,531,1,
	531,1,531,1,531,3,531,5944,8,531,1,531,1,531,1,531,1,531,1,531,1,531,5,
	531,5952,8,531,10,531,12,531,5955,9,531,1,532,1,532,1,533,1,533,1,534,1,
	534,3,534,5963,8,534,1,535,1,535,1,535,1,535,1,535,3,535,5970,8,535,1,536,
	1,536,1,536,1,536,3,536,5976,8,536,1,536,3,536,5979,8,536,1,536,3,536,5982,
	8,536,1,536,3,536,5985,8,536,1,537,1,537,1,537,1,537,3,537,5991,8,537,1,
	537,3,537,5994,8,537,1,537,3,537,5997,8,537,1,537,3,537,6000,8,537,1,538,
	1,538,1,538,3,538,6005,8,538,1,538,3,538,6008,8,538,1,538,3,538,6011,8,
	538,1,538,3,538,6014,8,538,1,539,1,539,1,539,1,539,3,539,6020,8,539,1,539,
	3,539,6023,8,539,1,539,3,539,6026,8,539,1,539,3,539,6029,8,539,1,540,1,
	540,1,540,1,540,3,540,6035,8,540,1,540,3,540,6038,8,540,1,540,3,540,6041,
	8,540,1,540,3,540,6044,8,540,1,541,1,541,3,541,6048,8,541,1,542,1,542,3,
	542,6052,8,542,1,543,1,543,3,543,6056,8,543,1,544,1,544,1,544,3,544,6061,
	8,544,1,544,1,544,3,544,6065,8,544,1,544,1,544,3,544,6069,8,544,1,544,1,
	544,1,544,3,544,6074,8,544,1,544,1,544,3,544,6078,8,544,1,544,5,544,6081,
	8,544,10,544,12,544,6084,9,544,1,545,1,545,1,545,3,545,6089,8,545,1,545,
	1,545,3,545,6093,8,545,1,545,1,545,1,546,1,546,3,546,6099,8,546,1,546,1,
	546,3,546,6103,8,546,1,546,1,546,1,547,1,547,1,547,1,547,3,547,6111,8,547,
	1,547,1,547,3,547,6115,8,547,1,547,1,547,3,547,6119,8,547,1,547,1,547,3,
	547,6123,8,547,1,547,1,547,3,547,6127,8,547,1,547,1,547,1,547,3,547,6132,
	8,547,1,547,1,547,3,547,6136,8,547,1,547,5,547,6139,8,547,10,547,12,547,
	6142,9,547,1,548,3,548,6145,8,548,1,548,1,548,1,549,1,549,3,549,6151,8,
	549,1,550,1,550,1,551,1,551,1,552,1,552,1,553,1,553,1,554,1,554,1,555,1,
	555,3,555,6165,8,555,1,556,1,556,1,556,3,556,6170,8,556,1,556,1,556,3,556,
	6174,8,556,1,556,1,556,1,557,1,557,3,557,6180,8,557,1,558,1,558,1,558,3,
	558,6185,8,558,1,558,1,558,1,558,1,558,1,559,1,559,3,559,6193,8,559,1,560,
	1,560,3,560,6197,8,560,1,560,1,560,3,560,6201,8,560,1,560,1,560,1,561,1,
	561,3,561,6207,8,561,1,562,1,562,3,562,6211,8,562,1,562,1,562,1,563,1,563,
	1,563,3,563,6218,8,563,1,563,1,563,3,563,6222,8,563,1,563,1,563,3,563,6226,
	8,563,1,563,1,563,3,563,6230,8,563,1,563,1,563,1,564,1,564,1,564,3,564,
	6237,8,564,1,564,1,564,3,564,6241,8,564,1,564,1,564,1,565,1,565,1,566,1,
	566,3,566,6249,8,566,1,566,1,566,3,566,6253,8,566,1,566,1,566,1,566,3,566,
	6258,8,566,1,566,1,566,3,566,6262,8,566,1,566,1,566,1,567,1,567,3,567,6268,
	8,567,1,567,1,567,3,567,6272,8,567,1,567,5,567,6275,8,567,10,567,12,567,
	6278,9,567,1,568,1,568,1,569,1,569,3,569,6284,8,569,1,569,1,569,1,570,1,
	570,3,570,6290,8,570,1,570,3,570,6293,8,570,1,570,3,570,6296,8,570,1,570,
	1,570,1,571,1,571,3,571,6302,8,571,1,571,1,571,3,571,6306,8,571,1,571,5,
	571,6309,8,571,10,571,12,571,6312,9,571,1,572,1,572,3,572,6316,8,572,1,
	572,1,572,3,572,6320,8,572,1,572,1,572,1,573,1,573,3,573,6326,8,573,1,574,
	1,574,3,574,6330,8,574,1,574,1,574,3,574,6334,8,574,1,574,1,574,1,575,1,
	575,1,576,1,576,1,577,1,577,1,577,3,577,6345,8,577,1,577,1,577,3,577,6349,
	8,577,1,577,1,577,1,578,1,578,1,578,1,578,3,578,6357,8,578,1,579,1,579,
	1,580,1,580,3,580,6363,8,580,1,580,1,580,3,580,6367,8,580,1,580,1,580,3,
	580,6371,8,580,1,580,1,580,1,581,1,581,1,581,1,581,1,582,1,582,1,582,3,
	582,6382,8,582,1,583,1,583,3,583,6386,8,583,1,583,1,583,1,584,1,584,3,584,
	6392,8,584,1,585,1,585,1,585,3,585,6397,8,585,1,585,1,585,3,585,6401,8,
	585,1,585,1,585,3,585,6405,8,585,1,585,1,585,3,585,6409,8,585,1,585,1,585,
	1,585,1,585,1,585,3,585,6416,8,585,1,585,1,585,3,585,6420,8,585,1,585,1,
	585,3,585,6424,8,585,1,585,5,585,6427,8,585,10,585,12,585,6430,9,585,1,
	585,3,585,6433,8,585,1,585,1,585,3,585,6437,8,585,1,586,1,586,3,586,6441,
	8,586,1,587,1,587,1,587,1,587,1,587,1,587,1,587,1,587,3,587,6451,8,587,
	1,587,1,587,1,587,1,588,1,588,1,588,1,588,1,588,1,588,3,588,6462,8,588,
	1,588,1,588,1,588,1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,590,
	1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,591,1,591,1,591,1,592,1,592,
	3,592,6488,8,592,1,593,1,593,3,593,6492,8,593,1,593,1,593,3,593,6496,8,
	593,1,593,5,593,6499,8,593,10,593,12,593,6502,9,593,1,594,1,594,1,594,1,
	594,1,594,1,594,1,594,1,594,3,594,6512,8,594,1,595,1,595,3,595,6516,8,595,
	1,596,1,596,1,597,1,597,1,597,3,597,6523,8,597,1,597,1,597,1,597,1,597,
	1,597,1,597,3,597,6531,8,597,1,597,1,597,1,598,1,598,1,599,1,599,1,600,
	1,600,1,600,3,600,6542,8,600,1,600,1,600,3,600,6546,8,600,1,600,1,600,1,
	601,1,601,3,601,6552,8,601,1,601,1,601,3,601,6556,8,601,1,601,1,601,3,601,
	6560,8,601,1,601,1,601,3,601,6564,8,601,1,601,1,601,1,602,1,602,3,602,6570,
	8,602,1,603,1,603,1,603,3,603,6575,8,603,1,604,1,604,1,604,1,604,1,604,
	1,604,3,604,6583,8,604,1,605,1,605,3,605,6587,8,605,1,606,1,606,1,607,1,
	607,1,607,3,607,6594,8,607,1,608,3,608,6597,8,608,1,608,1,608,3,608,6601,
	8,608,1,608,3,608,6604,8,608,1,609,3,609,6607,8,609,1,609,1,609,3,609,6611,
	8,609,1,609,1,609,3,609,6615,8,609,1,609,5,609,6618,8,609,10,609,12,609,
	6621,9,609,1,610,3,610,6624,8,610,1,610,1,610,3,610,6628,8,610,1,610,1,
	610,3,610,6632,8,610,1,610,5,610,6635,8,610,10,610,12,610,6638,9,610,1,
	611,3,611,6641,8,611,1,611,1,611,3,611,6645,8,611,1,611,1,611,3,611,6649,
	8,611,1,611,5,611,6652,8,611,10,611,12,611,6655,9,611,1,612,1,612,1,613,
	1,613,1,614,1,614,1,615,1,615,1,616,1,616,1,616,1,616,3,616,6669,8,616,
	1,617,1,617,1,617,1,617,1,618,1,618,1,618,1,618,1,619,1,619,1,619,1,619,
	1,619,1,619,1,619,1,619,3,619,6687,8,619,1,620,1,620,1,621,1,621,1,622,
	1,622,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,
	1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,
	1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,
	1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,1,623,
	1,623,1,623,1,623,1,623,1,623,3,623,6747,8,623,1,624,1,624,1,624,1,624,
	1,624,3,624,6754,8,624,1,625,1,625,1,626,1,626,3,626,6760,8,626,1,626,1,
	626,1,627,1,627,1,628,1,628,1,629,1,629,1,630,1,630,1,631,1,631,1,632,1,
	632,1,633,1,633,1,634,1,634,1,635,1,635,3,635,6782,8,635,1,636,1,636,1,
	637,1,637,1,638,1,638,1,639,1,639,3,639,6792,8,639,1,640,1,640,1,641,1,
	641,1,642,1,642,1,643,1,643,1,644,1,644,1,645,1,645,1,645,1,646,1,646,1,
	646,1,646,1,646,3,646,6812,8,646,1,647,1,647,1,648,1,648,3,648,6818,8,648,
	1,649,1,649,3,649,6822,8,649,1,650,1,650,1,651,1,651,1,652,1,652,1,653,
	1,653,1,654,1,654,1,655,1,655,1,656,1,656,3,656,6838,8,656,1,657,1,657,
	1,657,1,657,1,657,1,657,3,657,6846,8,657,1,658,1,658,3,658,6850,8,658,1,
	659,1,659,3,659,6854,8,659,1,660,1,660,1,661,1,661,3,661,6860,8,661,1,662,
	1,662,3,662,6864,8,662,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,1,663,
	1,663,1,663,1,663,1,663,1,663,3,663,7083,8,663,1,664,1,664,1,665,1,665,
	1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,
	1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,
	1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,1,666,
	1,666,3,666,7126,8,666,1,667,1,667,3,667,7130,8,667,1,668,1,668,1,669,1,
	669,1,670,1,670,1,671,1,671,1,671,0,5,190,928,1062,1088,1094,672,0,2,4,
	6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
	104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
	140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
	176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
	212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
	248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
	284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
	320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
	356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
	392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
	428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,
	464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,
	500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,
	536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,
	572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,
	608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,
	644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,
	680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
	716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,
	752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,
	788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,
	824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,
	860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,
	896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,
	932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,
	968,970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,
	1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,
	1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,
	1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,
	1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,
	1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,
	1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,
	1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,
	1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,
	1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,
	1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,
	1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,
	1334,1336,1338,1340,1342,0,41,2,0,91,91,204,204,2,0,95,95,220,220,1,0,103,
	104,2,0,118,118,189,189,3,0,127,127,165,165,257,257,2,0,197,197,338,338,
	4,0,311,311,345,345,351,351,356,356,2,0,205,205,207,207,2,0,142,142,324,
	324,6,0,1,2,5,5,10,10,20,20,27,27,50,50,6,0,73,73,94,94,100,100,183,184,
	236,237,239,239,2,0,62,62,119,119,1,0,208,209,2,0,68,69,116,117,2,0,197,
	197,231,231,2,0,317,317,354,354,2,0,10,10,350,350,2,0,50,50,350,350,1,0,
	77,78,2,0,238,238,265,265,1,0,112,113,2,0,66,66,172,172,3,0,54,54,105,105,
	146,146,1,0,144,145,3,0,130,130,247,247,258,258,1,0,89,90,2,0,82,82,195,
	195,8,0,61,61,70,70,72,72,97,99,114,114,213,213,229,230,240,241,1,0,87,
	88,2,0,180,180,260,260,3,0,80,80,181,181,221,221,3,0,79,79,168,168,245,
	245,1,0,330,333,1,0,360,363,1,0,395,396,1,0,276,310,1,0,311,359,1,0,388,
	389,2,0,318,318,341,341,2,0,319,319,342,342,2,0,335,335,355,355,7845,0,
	1359,1,0,0,0,2,1364,1,0,0,0,4,1372,1,0,0,0,6,1376,1,0,0,0,8,1378,1,0,0,
	0,10,1388,1,0,0,0,12,1394,1,0,0,0,14,1400,1,0,0,0,16,1406,1,0,0,0,18,1411,
	1,0,0,0,20,1415,1,0,0,0,22,1427,1,0,0,0,24,1437,1,0,0,0,26,1447,1,0,0,0,
	28,1453,1,0,0,0,30,1478,1,0,0,0,32,1481,1,0,0,0,34,1503,1,0,0,0,36,1505,
	1,0,0,0,38,1513,1,0,0,0,40,1515,1,0,0,0,42,1531,1,0,0,0,44,1541,1,0,0,0,
	46,1543,1,0,0,0,48,1545,1,0,0,0,50,1555,1,0,0,0,52,1557,1,0,0,0,54,1567,
	1,0,0,0,56,1580,1,0,0,0,58,1593,1,0,0,0,60,1600,1,0,0,0,62,1602,1,0,0,0,
	64,1614,1,0,0,0,66,1616,1,0,0,0,68,1627,1,0,0,0,70,1643,1,0,0,0,72,1647,
	1,0,0,0,74,1655,1,0,0,0,76,1672,1,0,0,0,78,1676,1,0,0,0,80,1682,1,0,0,0,
	82,1697,1,0,0,0,84,1701,1,0,0,0,86,1712,1,0,0,0,88,1714,1,0,0,0,90,1716,
	1,0,0,0,92,1722,1,0,0,0,94,1724,1,0,0,0,96,1737,1,0,0,0,98,1740,1,0,0,0,
	100,1746,1,0,0,0,102,1754,1,0,0,0,104,1756,1,0,0,0,106,1767,1,0,0,0,108,
	1780,1,0,0,0,110,1782,1,0,0,0,112,1806,1,0,0,0,114,1830,1,0,0,0,116,1853,
	1,0,0,0,118,1855,1,0,0,0,120,1859,1,0,0,0,122,1867,1,0,0,0,124,1883,1,0,
	0,0,126,1928,1,0,0,0,128,1930,1,0,0,0,130,1938,1,0,0,0,132,1956,1,0,0,0,
	134,1960,1,0,0,0,136,1964,1,0,0,0,138,1966,1,0,0,0,140,1974,1,0,0,0,142,
	1980,1,0,0,0,144,1982,1,0,0,0,146,1989,1,0,0,0,148,1995,1,0,0,0,150,1999,
	1,0,0,0,152,2005,1,0,0,0,154,2007,1,0,0,0,156,2011,1,0,0,0,158,2015,1,0,
	0,0,160,2034,1,0,0,0,162,2036,1,0,0,0,164,2054,1,0,0,0,166,2071,1,0,0,0,
	168,2076,1,0,0,0,170,2090,1,0,0,0,172,2094,1,0,0,0,174,2110,1,0,0,0,176,
	2112,1,0,0,0,178,2116,1,0,0,0,180,2121,1,0,0,0,182,2127,1,0,0,0,184,2143,
	1,0,0,0,186,2145,1,0,0,0,188,2147,1,0,0,0,190,2149,1,0,0,0,192,2165,1,0,
	0,0,194,2167,1,0,0,0,196,2171,1,0,0,0,198,2175,1,0,0,0,200,2189,1,0,0,0,
	202,2191,1,0,0,0,204,2195,1,0,0,0,206,2201,1,0,0,0,208,2205,1,0,0,0,210,
	2216,1,0,0,0,212,2218,1,0,0,0,214,2229,1,0,0,0,216,2236,1,0,0,0,218,2240,
	1,0,0,0,220,2242,1,0,0,0,222,2246,1,0,0,0,224,2271,1,0,0,0,226,2277,1,0,
	0,0,228,2281,1,0,0,0,230,2283,1,0,0,0,232,2289,1,0,0,0,234,2293,1,0,0,0,
	236,2320,1,0,0,0,238,2322,1,0,0,0,240,2331,1,0,0,0,242,2335,1,0,0,0,244,
	2339,1,0,0,0,246,2363,1,0,0,0,248,2372,1,0,0,0,250,2374,1,0,0,0,252,2396,
	1,0,0,0,254,2398,1,0,0,0,256,2412,1,0,0,0,258,2418,1,0,0,0,260,2422,1,0,
	0,0,262,2468,1,0,0,0,264,2484,1,0,0,0,266,2490,1,0,0,0,268,2494,1,0,0,0,
	270,2500,1,0,0,0,272,2502,1,0,0,0,274,2516,1,0,0,0,276,2530,1,0,0,0,278,
	2534,1,0,0,0,280,2541,1,0,0,0,282,2546,1,0,0,0,284,2550,1,0,0,0,286,2562,
	1,0,0,0,288,2578,1,0,0,0,290,2592,1,0,0,0,292,2608,1,0,0,0,294,2610,1,0,
	0,0,296,2614,1,0,0,0,298,2618,1,0,0,0,300,2620,1,0,0,0,302,2622,1,0,0,0,
	304,2624,1,0,0,0,306,2626,1,0,0,0,308,2632,1,0,0,0,310,2635,1,0,0,0,312,
	2651,1,0,0,0,314,2658,1,0,0,0,316,2673,1,0,0,0,318,2675,1,0,0,0,320,2679,
	1,0,0,0,322,2689,1,0,0,0,324,2698,1,0,0,0,326,2700,1,0,0,0,328,2717,1,0,
	0,0,330,2729,1,0,0,0,332,2735,1,0,0,0,334,2739,1,0,0,0,336,2745,1,0,0,0,
	338,2747,1,0,0,0,340,2753,1,0,0,0,342,2758,1,0,0,0,344,2760,1,0,0,0,346,
	2771,1,0,0,0,348,2773,1,0,0,0,350,2789,1,0,0,0,352,2795,1,0,0,0,354,2797,
	1,0,0,0,356,2810,1,0,0,0,358,2823,1,0,0,0,360,2836,1,0,0,0,362,2852,1,0,
	0,0,364,2854,1,0,0,0,366,2859,1,0,0,0,368,2861,1,0,0,0,370,2872,1,0,0,0,
	372,2889,1,0,0,0,374,2901,1,0,0,0,376,2903,1,0,0,0,378,2907,1,0,0,0,380,
	2913,1,0,0,0,382,2917,1,0,0,0,384,2919,1,0,0,0,386,2930,1,0,0,0,388,2945,
	1,0,0,0,390,2949,1,0,0,0,392,2958,1,0,0,0,394,2962,1,0,0,0,396,2964,1,0,
	0,0,398,2968,1,0,0,0,400,2978,1,0,0,0,402,2992,1,0,0,0,404,3004,1,0,0,0,
	406,3013,1,0,0,0,408,3015,1,0,0,0,410,3025,1,0,0,0,412,3035,1,0,0,0,414,
	3045,1,0,0,0,416,3055,1,0,0,0,418,3065,1,0,0,0,420,3075,1,0,0,0,422,3085,
	1,0,0,0,424,3087,1,0,0,0,426,3112,1,0,0,0,428,3118,1,0,0,0,430,3122,1,0,
	0,0,432,3124,1,0,0,0,434,3141,1,0,0,0,436,3158,1,0,0,0,438,3173,1,0,0,0,
	440,3175,1,0,0,0,442,3185,1,0,0,0,444,3195,1,0,0,0,446,3217,1,0,0,0,448,
	3233,1,0,0,0,450,3235,1,0,0,0,452,3249,1,0,0,0,454,3265,1,0,0,0,456,3267,
	1,0,0,0,458,3276,1,0,0,0,460,3278,1,0,0,0,462,3280,1,0,0,0,464,3294,1,0,
	0,0,466,3296,1,0,0,0,468,3306,1,0,0,0,470,3326,1,0,0,0,472,3328,1,0,0,0,
	474,3337,1,0,0,0,476,3339,1,0,0,0,478,3349,1,0,0,0,480,3359,1,0,0,0,482,
	3369,1,0,0,0,484,3379,1,0,0,0,486,3389,1,0,0,0,488,3399,1,0,0,0,490,3412,
	1,0,0,0,492,3414,1,0,0,0,494,3428,1,0,0,0,496,3442,1,0,0,0,498,3451,1,0,
	0,0,500,3468,1,0,0,0,502,3470,1,0,0,0,504,3474,1,0,0,0,506,3479,1,0,0,0,
	508,3488,1,0,0,0,510,3490,1,0,0,0,512,3496,1,0,0,0,514,3502,1,0,0,0,516,
	3508,1,0,0,0,518,3514,1,0,0,0,520,3524,1,0,0,0,522,3534,1,0,0,0,524,3542,
	1,0,0,0,526,3544,1,0,0,0,528,3558,1,0,0,0,530,3560,1,0,0,0,532,3564,1,0,
	0,0,534,3568,1,0,0,0,536,3581,1,0,0,0,538,3587,1,0,0,0,540,3589,1,0,0,0,
	542,3592,1,0,0,0,544,3612,1,0,0,0,546,3614,1,0,0,0,548,3616,1,0,0,0,550,
	3622,1,0,0,0,552,3634,1,0,0,0,554,3636,1,0,0,0,556,3652,1,0,0,0,558,3654,
	1,0,0,0,560,3656,1,0,0,0,562,3661,1,0,0,0,564,3665,1,0,0,0,566,3667,1,0,
	0,0,568,3680,1,0,0,0,570,3691,1,0,0,0,572,3693,1,0,0,0,574,3703,1,0,0,0,
	576,3705,1,0,0,0,578,3708,1,0,0,0,580,3712,1,0,0,0,582,3716,1,0,0,0,584,
	3724,1,0,0,0,586,3734,1,0,0,0,588,3736,1,0,0,0,590,3752,1,0,0,0,592,3759,
	1,0,0,0,594,3761,1,0,0,0,596,3784,1,0,0,0,598,3786,1,0,0,0,600,3794,1,0,
	0,0,602,3796,1,0,0,0,604,3798,1,0,0,0,606,3810,1,0,0,0,608,3814,1,0,0,0,
	610,3830,1,0,0,0,612,3832,1,0,0,0,614,3840,1,0,0,0,616,3842,1,0,0,0,618,
	3844,1,0,0,0,620,3849,1,0,0,0,622,3851,1,0,0,0,624,3855,1,0,0,0,626,3859,
	1,0,0,0,628,3863,1,0,0,0,630,3873,1,0,0,0,632,3883,1,0,0,0,634,3893,1,0,
	0,0,636,3902,1,0,0,0,638,3904,1,0,0,0,640,3914,1,0,0,0,642,3924,1,0,0,0,
	644,3936,1,0,0,0,646,3959,1,0,0,0,648,3982,1,0,0,0,650,3984,1,0,0,0,652,
	3986,1,0,0,0,654,3993,1,0,0,0,656,3995,1,0,0,0,658,4013,1,0,0,0,660,4031,
	1,0,0,0,662,4049,1,0,0,0,664,4051,1,0,0,0,666,4053,1,0,0,0,668,4055,1,0,
	0,0,670,4057,1,0,0,0,672,4076,1,0,0,0,674,4078,1,0,0,0,676,4090,1,0,0,0,
	678,4104,1,0,0,0,680,4113,1,0,0,0,682,4117,1,0,0,0,684,4126,1,0,0,0,686,
	4131,1,0,0,0,688,4140,1,0,0,0,690,4142,1,0,0,0,692,4148,1,0,0,0,694,4230,
	1,0,0,0,696,4232,1,0,0,0,698,4234,1,0,0,0,700,4236,1,0,0,0,702,4240,1,0,
	0,0,704,4244,1,0,0,0,706,4248,1,0,0,0,708,4321,1,0,0,0,710,4393,1,0,0,0,
	712,4466,1,0,0,0,714,4468,1,0,0,0,716,4496,1,0,0,0,718,4498,1,0,0,0,720,
	4573,1,0,0,0,722,4577,1,0,0,0,724,4584,1,0,0,0,726,4586,1,0,0,0,728,4606,
	1,0,0,0,730,4629,1,0,0,0,732,4631,1,0,0,0,734,4655,1,0,0,0,736,4675,1,0,
	0,0,738,4677,1,0,0,0,740,4687,1,0,0,0,742,4691,1,0,0,0,744,4693,1,0,0,0,
	746,4706,1,0,0,0,748,4712,1,0,0,0,750,4720,1,0,0,0,752,4724,1,0,0,0,754,
	4732,1,0,0,0,756,4740,1,0,0,0,758,4744,1,0,0,0,760,4752,1,0,0,0,762,4760,
	1,0,0,0,764,4803,1,0,0,0,766,4807,1,0,0,0,768,4811,1,0,0,0,770,4833,1,0,
	0,0,772,4835,1,0,0,0,774,4847,1,0,0,0,776,4863,1,0,0,0,778,4865,1,0,0,0,
	780,4869,1,0,0,0,782,4875,1,0,0,0,784,4887,1,0,0,0,786,4901,1,0,0,0,788,
	4903,1,0,0,0,790,4905,1,0,0,0,792,4909,1,0,0,0,794,4919,1,0,0,0,796,4925,
	1,0,0,0,798,4927,1,0,0,0,800,4934,1,0,0,0,802,4936,1,0,0,0,804,4938,1,0,
	0,0,806,4942,1,0,0,0,808,4959,1,0,0,0,810,4970,1,0,0,0,812,4975,1,0,0,0,
	814,4979,1,0,0,0,816,4983,1,0,0,0,818,4988,1,0,0,0,820,4998,1,0,0,0,822,
	5003,1,0,0,0,824,5009,1,0,0,0,826,5014,1,0,0,0,828,5037,1,0,0,0,830,5039,
	1,0,0,0,832,5041,1,0,0,0,834,5043,1,0,0,0,836,5056,1,0,0,0,838,5058,1,0,
	0,0,840,5064,1,0,0,0,842,5076,1,0,0,0,844,5078,1,0,0,0,846,5080,1,0,0,0,
	848,5083,1,0,0,0,850,5085,1,0,0,0,852,5087,1,0,0,0,854,5090,1,0,0,0,856,
	5095,1,0,0,0,858,5097,1,0,0,0,860,5144,1,0,0,0,862,5148,1,0,0,0,864,5157,
	1,0,0,0,866,5161,1,0,0,0,868,5172,1,0,0,0,870,5176,1,0,0,0,872,5189,1,0,
	0,0,874,5193,1,0,0,0,876,5201,1,0,0,0,878,5204,1,0,0,0,880,5218,1,0,0,0,
	882,5228,1,0,0,0,884,5230,1,0,0,0,886,5232,1,0,0,0,888,5245,1,0,0,0,890,
	5257,1,0,0,0,892,5259,1,0,0,0,894,5282,1,0,0,0,896,5305,1,0,0,0,898,5326,
	1,0,0,0,900,5330,1,0,0,0,902,5334,1,0,0,0,904,5338,1,0,0,0,906,5340,1,0,
	0,0,908,5344,1,0,0,0,910,5367,1,0,0,0,912,5373,1,0,0,0,914,5384,1,0,0,0,
	916,5395,1,0,0,0,918,5397,1,0,0,0,920,5399,1,0,0,0,922,5401,1,0,0,0,924,
	5403,1,0,0,0,926,5418,1,0,0,0,928,5420,1,0,0,0,930,5433,1,0,0,0,932,5437,
	1,0,0,0,934,5449,1,0,0,0,936,5453,1,0,0,0,938,5457,1,0,0,0,940,5459,1,0,
	0,0,942,5490,1,0,0,0,944,5513,1,0,0,0,946,5516,1,0,0,0,948,5522,1,0,0,0,
	950,5526,1,0,0,0,952,5528,1,0,0,0,954,5540,1,0,0,0,956,5550,1,0,0,0,958,
	5555,1,0,0,0,960,5567,1,0,0,0,962,5572,1,0,0,0,964,5574,1,0,0,0,966,5585,
	1,0,0,0,968,5596,1,0,0,0,970,5607,1,0,0,0,972,5618,1,0,0,0,974,5637,1,0,
	0,0,976,5639,1,0,0,0,978,5641,1,0,0,0,980,5652,1,0,0,0,982,5657,1,0,0,0,
	984,5659,1,0,0,0,986,5678,1,0,0,0,988,5680,1,0,0,0,990,5682,1,0,0,0,992,
	5693,1,0,0,0,994,5704,1,0,0,0,996,5715,1,0,0,0,998,5734,1,0,0,0,1000,5736,
	1,0,0,0,1002,5738,1,0,0,0,1004,5749,1,0,0,0,1006,5760,1,0,0,0,1008,5773,
	1,0,0,0,1010,5777,1,0,0,0,1012,5779,1,0,0,0,1014,5783,1,0,0,0,1016,5787,
	1,0,0,0,1018,5791,1,0,0,0,1020,5793,1,0,0,0,1022,5797,1,0,0,0,1024,5799,
	1,0,0,0,1026,5805,1,0,0,0,1028,5810,1,0,0,0,1030,5812,1,0,0,0,1032,5825,
	1,0,0,0,1034,5827,1,0,0,0,1036,5838,1,0,0,0,1038,5870,1,0,0,0,1040,5874,
	1,0,0,0,1042,5876,1,0,0,0,1044,5878,1,0,0,0,1046,5880,1,0,0,0,1048,5900,
	1,0,0,0,1050,5902,1,0,0,0,1052,5904,1,0,0,0,1054,5927,1,0,0,0,1056,5931,
	1,0,0,0,1058,5933,1,0,0,0,1060,5935,1,0,0,0,1062,5943,1,0,0,0,1064,5956,
	1,0,0,0,1066,5958,1,0,0,0,1068,5962,1,0,0,0,1070,5969,1,0,0,0,1072,5984,
	1,0,0,0,1074,5999,1,0,0,0,1076,6001,1,0,0,0,1078,6028,1,0,0,0,1080,6043,
	1,0,0,0,1082,6047,1,0,0,0,1084,6051,1,0,0,0,1086,6055,1,0,0,0,1088,6060,
	1,0,0,0,1090,6085,1,0,0,0,1092,6096,1,0,0,0,1094,6118,1,0,0,0,1096,6144,
	1,0,0,0,1098,6150,1,0,0,0,1100,6152,1,0,0,0,1102,6154,1,0,0,0,1104,6156,
	1,0,0,0,1106,6158,1,0,0,0,1108,6160,1,0,0,0,1110,6164,1,0,0,0,1112,6166,
	1,0,0,0,1114,6179,1,0,0,0,1116,6181,1,0,0,0,1118,6192,1,0,0,0,1120,6194,
	1,0,0,0,1122,6206,1,0,0,0,1124,6208,1,0,0,0,1126,6214,1,0,0,0,1128,6233,
	1,0,0,0,1130,6244,1,0,0,0,1132,6246,1,0,0,0,1134,6265,1,0,0,0,1136,6279,
	1,0,0,0,1138,6283,1,0,0,0,1140,6287,1,0,0,0,1142,6299,1,0,0,0,1144,6313,
	1,0,0,0,1146,6325,1,0,0,0,1148,6327,1,0,0,0,1150,6337,1,0,0,0,1152,6339,
	1,0,0,0,1154,6341,1,0,0,0,1156,6352,1,0,0,0,1158,6358,1,0,0,0,1160,6360,
	1,0,0,0,1162,6374,1,0,0,0,1164,6381,1,0,0,0,1166,6383,1,0,0,0,1168,6391,
	1,0,0,0,1170,6436,1,0,0,0,1172,6440,1,0,0,0,1174,6442,1,0,0,0,1176,6455,
	1,0,0,0,1178,6466,1,0,0,0,1180,6474,1,0,0,0,1182,6482,1,0,0,0,1184,6487,
	1,0,0,0,1186,6489,1,0,0,0,1188,6511,1,0,0,0,1190,6515,1,0,0,0,1192,6517,
	1,0,0,0,1194,6519,1,0,0,0,1196,6534,1,0,0,0,1198,6536,1,0,0,0,1200,6538,
	1,0,0,0,1202,6549,1,0,0,0,1204,6569,1,0,0,0,1206,6574,1,0,0,0,1208,6582,
	1,0,0,0,1210,6586,1,0,0,0,1212,6588,1,0,0,0,1214,6593,1,0,0,0,1216,6603,
	1,0,0,0,1218,6606,1,0,0,0,1220,6623,1,0,0,0,1222,6640,1,0,0,0,1224,6656,
	1,0,0,0,1226,6658,1,0,0,0,1228,6660,1,0,0,0,1230,6662,1,0,0,0,1232,6668,
	1,0,0,0,1234,6670,1,0,0,0,1236,6674,1,0,0,0,1238,6686,1,0,0,0,1240,6688,
	1,0,0,0,1242,6690,1,0,0,0,1244,6692,1,0,0,0,1246,6746,1,0,0,0,1248,6753,
	1,0,0,0,1250,6755,1,0,0,0,1252,6757,1,0,0,0,1254,6763,1,0,0,0,1256,6765,
	1,0,0,0,1258,6767,1,0,0,0,1260,6769,1,0,0,0,1262,6771,1,0,0,0,1264,6773,
	1,0,0,0,1266,6775,1,0,0,0,1268,6777,1,0,0,0,1270,6781,1,0,0,0,1272,6783,
	1,0,0,0,1274,6785,1,0,0,0,1276,6787,1,0,0,0,1278,6791,1,0,0,0,1280,6793,
	1,0,0,0,1282,6795,1,0,0,0,1284,6797,1,0,0,0,1286,6799,1,0,0,0,1288,6801,
	1,0,0,0,1290,6803,1,0,0,0,1292,6811,1,0,0,0,1294,6813,1,0,0,0,1296,6817,
	1,0,0,0,1298,6821,1,0,0,0,1300,6823,1,0,0,0,1302,6825,1,0,0,0,1304,6827,
	1,0,0,0,1306,6829,1,0,0,0,1308,6831,1,0,0,0,1310,6833,1,0,0,0,1312,6837,
	1,0,0,0,1314,6845,1,0,0,0,1316,6849,1,0,0,0,1318,6853,1,0,0,0,1320,6855,
	1,0,0,0,1322,6859,1,0,0,0,1324,6863,1,0,0,0,1326,7082,1,0,0,0,1328,7084,
	1,0,0,0,1330,7086,1,0,0,0,1332,7125,1,0,0,0,1334,7129,1,0,0,0,1336,7131,
	1,0,0,0,1338,7133,1,0,0,0,1340,7135,1,0,0,0,1342,7137,1,0,0,0,1344,1346,
	3,1334,667,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,1346,1347,1,0,0,0,1347,
	1349,3,2,1,0,1348,1350,3,1334,667,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,
	1350,1352,1,0,0,0,1351,1353,5,47,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,
	0,1353,1355,1,0,0,0,1354,1356,3,1334,667,0,1355,1354,1,0,0,0,1355,1356,
	1,0,0,0,1356,1358,1,0,0,0,1357,1345,1,0,0,0,1358,1361,1,0,0,0,1359,1357,
	1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,1359,1,0,0,0,1362,1363,
	5,0,0,1,1363,1,1,0,0,0,1364,1368,3,4,2,0,1365,1366,3,1334,667,0,1366,1367,
	3,32,16,0,1367,1369,1,0,0,0,1368,1365,1,0,0,0,1368,1369,1,0,0,0,1369,3,
	1,0,0,0,1370,1373,3,6,3,0,1371,1373,3,34,17,0,1372,1370,1,0,0,0,1372,1371,
	1,0,0,0,1373,5,1,0,0,0,1374,1377,3,8,4,0,1375,1377,3,28,14,0,1376,1374,
	1,0,0,0,1376,1375,1,0,0,0,1377,7,1,0,0,0,1378,1379,5,226,0,0,1379,1380,
	3,1334,667,0,1380,1381,5,227,0,0,1381,1386,3,1334,667,0,1382,1387,3,10,
	5,0,1383,1387,3,12,6,0,1384,1387,3,14,7,0,1385,1387,3,18,9,0,1386,1382,
	1,0,0,0,1386,1383,1,0,0,0,1386,1384,1,0,0,0,1386,1385,1,0,0,0,1387,9,1,
	0,0,0,1388,1389,5,223,0,0,1389,1390,3,1334,667,0,1390,1391,3,794,397,0,
	1391,11,1,0,0,0,1392,1393,5,339,0,0,1393,1395,3,1334,667,0,1394,1392,1,
	0,0,0,1394,1395,1,0,0,0,1395,1396,1,0,0,0,1396,1397,5,323,0,0,1397,1398,
	3,1334,667,0,1398,1399,3,86,43,0,1399,13,1,0,0,0,1400,1401,5,243,0,0,1401,
	1402,3,1334,667,0,1402,1403,5,359,0,0,1403,1404,3,1334,667,0,1404,1405,
	3,16,8,0,1405,15,1,0,0,0,1406,1407,3,1008,504,0,1407,17,1,0,0,0,1408,1412,
	3,20,10,0,1409,1412,3,22,11,0,1410,1412,3,24,12,0,1411,1408,1,0,0,0,1411,
	1409,1,0,0,0,1411,1410,1,0,0,0,1412,19,1,0,0,0,1413,1414,5,339,0,0,1414,
	1416,3,1334,667,0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,0,0,
	1417,1418,5,323,0,0,1418,1419,3,1334,667,0,1419,1421,3,26,13,0,1420,1422,
	3,1334,667,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,0,0,1423,
	1424,3,70,35,0,1424,21,1,0,0,0,1425,1426,5,312,0,0,1426,1428,3,1334,667,
	0,1427,1425,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1430,5,347,
	0,0,1430,1431,3,1334,667,0,1431,1433,3,26,13,0,1432,1434,3,1334,667,0,1433,
	1432,1,0,0,0,1433,1434,1,0,0,0,1434,1435,1,0,0,0,1435,1436,3,76,38,0,1436,
	23,1,0,0,0,1437,1438,5,263,0,0,1438,1439,3,1334,667,0,1439,1441,3,26,13,
	0,1440,1442,3,1334,667,0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,1443,
	1,0,0,0,1443,1444,3,82,41,0,1444,25,1,0,0,0,1445,1446,5,364,0,0,1446,1448,
	3,1334,667,0,1447,1445,1,0,0,0,1447,1448,1,0,0,0,1448,1449,1,0,0,0,1449,
	1450,3,1290,645,0,1450,27,1,0,0,0,1451,1452,5,226,0,0,1452,1454,3,1334,
	667,0,1453,1451,1,0,0,0,1453,1454,1,0,0,0,1454,1455,1,0,0,0,1455,1456,5,
	218,0,0,1456,1457,3,1334,667,0,1457,1458,3,30,15,0,1458,29,1,0,0,0,1459,
	1460,5,62,0,0,1460,1462,3,1334,667,0,1461,1459,1,0,0,0,1461,1462,1,0,0,
	0,1462,1463,1,0,0,0,1463,1479,7,0,0,0,1464,1479,5,223,0,0,1465,1466,5,339,
	0,0,1466,1468,3,1334,667,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,1469,
	1,0,0,0,1469,1479,5,323,0,0,1470,1471,5,243,0,0,1471,1472,3,1334,667,0,
	1472,1473,5,359,0,0,1473,1479,1,0,0,0,1474,1475,5,203,0,0,1475,1476,3,1334,
	667,0,1476,1477,3,1290,645,0,1477,1479,1,0,0,0,1478,1461,1,0,0,0,1478,1464,
	1,0,0,0,1478,1467,1,0,0,0,1478,1470,1,0,0,0,1478,1474,1,0,0,0,1479,31,1,
	0,0,0,1480,1482,5,226,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,
	1,0,0,0,1483,1484,3,1334,667,0,1484,1485,5,92,0,0,1485,33,1,0,0,0,1486,
	1494,3,36,18,0,1487,1488,3,1334,667,0,1488,1492,3,50,25,0,1489,1490,3,1334,
	667,0,1490,1491,3,38,19,0,1491,1493,1,0,0,0,1492,1489,1,0,0,0,1492,1493,
	1,0,0,0,1493,1495,1,0,0,0,1494,1487,1,0,0,0,1494,1495,1,0,0,0,1495,1504,
	1,0,0,0,1496,1500,3,50,25,0,1497,1498,3,1334,667,0,1498,1499,3,38,19,0,
	1499,1501,1,0,0,0,1500,1497,1,0,0,0,1500,1501,1,0,0,0,1501,1504,1,0,0,0,
	1502,1504,3,38,19,0,1503,1486,1,0,0,0,1503,1496,1,0,0,0,1503,1502,1,0,0,
	0,1504,35,1,0,0,0,1505,1506,5,235,0,0,1506,1507,3,1334,667,0,1507,1511,
	5,352,0,0,1508,1509,3,1334,667,0,1509,1510,3,40,20,0,1510,1512,1,0,0,0,
	1511,1508,1,0,0,0,1511,1512,1,0,0,0,1512,37,1,0,0,0,1513,1514,7,1,0,0,1514,
	39,1,0,0,0,1515,1526,3,42,21,0,1516,1518,3,1334,667,0,1517,1516,1,0,0,0,
	1517,1518,1,0,0,0,1518,1519,1,0,0,0,1519,1521,5,34,0,0,1520,1522,3,1334,
	667,0,1521,1520,1,0,0,0,1521,1522,1,0,0,0,1522,1523,1,0,0,0,1523,1525,3,
	42,21,0,1524,1517,1,0,0,0,1525,1528,1,0,0,0,1526,1524,1,0,0,0,1526,1527,
	1,0,0,0,1527,41,1,0,0,0,1528,1526,1,0,0,0,1529,1532,3,44,22,0,1530,1532,
	3,46,23,0,1531,1529,1,0,0,0,1531,1530,1,0,0,0,1532,43,1,0,0,0,1533,1534,
	5,340,0,0,1534,1535,3,1334,667,0,1535,1536,5,337,0,0,1536,1542,1,0,0,0,
	1537,1538,5,340,0,0,1538,1539,3,1334,667,0,1539,1540,5,358,0,0,1540,1542,
	1,0,0,0,1541,1533,1,0,0,0,1541,1537,1,0,0,0,1542,45,1,0,0,0,1543,1544,1,
	0,0,0,1544,47,1,0,0,0,1545,1547,5,40,0,0,1546,1548,3,1334,667,0,1547,1546,
	1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1551,3,50,25,0,1550,1552,
	3,1334,667,0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,
	1554,5,41,0,0,1554,49,1,0,0,0,1555,1556,3,56,28,0,1556,51,1,0,0,0,1557,
	1559,5,40,0,0,1558,1560,3,1334,667,0,1559,1558,1,0,0,0,1559,1560,1,0,0,
	0,1560,1561,1,0,0,0,1561,1563,3,56,28,0,1562,1564,3,1334,667,0,1563,1562,
	1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,0,0,1565,1566,5,41,0,0,1566,53,
	1,0,0,0,1567,1569,5,40,0,0,1568,1570,3,1334,667,0,1569,1568,1,0,0,0,1569,
	1570,1,0,0,0,1570,1571,1,0,0,0,1571,1573,3,56,28,0,1572,1574,3,1334,667,
	0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,5,41,
	0,0,1576,55,1,0,0,0,1577,1578,3,296,148,0,1578,1579,3,1334,667,0,1579,1581,
	1,0,0,0,1580,1577,1,0,0,0,1580,1581,1,0,0,0,1581,1585,1,0,0,0,1582,1583,
	3,58,29,0,1583,1584,3,1334,667,0,1584,1586,1,0,0,0,1585,1582,1,0,0,0,1585,
	1586,1,0,0,0,1586,1587,1,0,0,0,1587,1588,3,62,31,0,1588,57,1,0,0,0,1589,
	1591,3,60,30,0,1590,1592,3,1334,667,0,1591,1590,1,0,0,0,1591,1592,1,0,0,
	0,1592,1594,1,0,0,0,1593,1589,1,0,0,0,1594,1595,1,0,0,0,1595,1593,1,0,0,
	0,1595,1596,1,0,0,0,1596,59,1,0,0,0,1597,1601,3,68,34,0,1598,1601,3,74,
	37,0,1599,1601,3,80,40,0,1600,1597,1,0,0,0,1600,1598,1,0,0,0,1600,1599,
	1,0,0,0,1601,61,1,0,0,0,1602,1608,3,64,32,0,1603,1604,3,1334,667,0,1604,
	1605,3,66,33,0,1605,1607,1,0,0,0,1606,1603,1,0,0,0,1607,1610,1,0,0,0,1608,
	1606,1,0,0,0,1608,1609,1,0,0,0,1609,63,1,0,0,0,1610,1608,1,0,0,0,1611,1615,
	3,98,49,0,1612,1615,3,134,67,0,1613,1615,3,188,94,0,1614,1611,1,0,0,0,1614,
	1612,1,0,0,0,1614,1613,1,0,0,0,1615,65,1,0,0,0,1616,1620,5,188,0,0,1617,
	1618,3,1334,667,0,1618,1619,3,532,266,0,1619,1621,1,0,0,0,1620,1617,1,0,
	0,0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,1623,3,1334,667,0,1623,1624,
	3,64,32,0,1624,67,1,0,0,0,1625,1626,5,339,0,0,1626,1628,3,1334,667,0,1627,
	1625,1,0,0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1630,5,323,0,0,1630,
	1631,3,1334,667,0,1631,1632,3,1294,647,0,1632,1633,3,70,35,0,1633,69,1,
	0,0,0,1634,1635,3,686,343,0,1635,1636,3,1334,667,0,1636,1638,1,0,0,0,1637,
	1634,1,0,0,0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1640,3,742,371,0,
	1640,1641,1,0,0,0,1641,1642,3,1334,667,0,1642,1644,1,0,0,0,1643,1637,1,
	0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,1646,3,72,36,0,1646,71,1,
	0,0,0,1647,1649,5,36,0,0,1648,1650,3,1334,667,0,1649,1648,1,0,0,0,1649,
	1650,1,0,0,0,1650,1651,1,0,0,0,1651,1652,3,86,43,0,1652,73,1,0,0,0,1653,
	1654,5,312,0,0,1654,1656,3,1334,667,0,1655,1653,1,0,0,0,1655,1656,1,0,0,
	0,1656,1657,1,0,0,0,1657,1658,5,347,0,0,1658,1659,3,1334,667,0,1659,1660,
	3,1306,653,0,1660,1661,3,1334,667,0,1661,1662,3,76,38,0,1662,75,1,0,0,0,
	1663,1664,3,686,343,0,1664,1665,3,1334,667,0,1665,1667,1,0,0,0,1666,1663,
	1,0,0,0,1666,1667,1,0,0,0,1667,1668,1,0,0,0,1668,1669,3,748,374,0,1669,
	1670,1,0,0,0,1670,1671,3,1334,667,0,1671,1673,1,0,0,0,1672,1666,1,0,0,0,
	1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1675,3,78,39,0,1675,77,1,0,0,0,
	1676,1678,5,36,0,0,1677,1679,3,1334,667,0,1678,1677,1,0,0,0,1678,1679,1,
	0,0,0,1679,1680,1,0,0,0,1680,1681,3,92,46,0,1681,79,1,0,0,0,1682,1683,5,
	263,0,0,1683,1684,3,1334,667,0,1684,1685,3,1308,654,0,1685,1686,3,1334,
	667,0,1686,1687,3,82,41,0,1687,81,1,0,0,0,1688,1689,3,686,343,0,1689,1690,
	3,1334,667,0,1690,1692,1,0,0,0,1691,1688,1,0,0,0,1691,1692,1,0,0,0,1692,
	1693,1,0,0,0,1693,1694,3,684,342,0,1694,1695,1,0,0,0,1695,1696,3,1334,667,
	0,1696,1698,1,0,0,0,1697,1691,1,0,0,0,1697,1698,1,0,0,0,1698,1699,1,0,0,
	0,1699,1700,3,84,42,0,1700,83,1,0,0,0,1701,1703,5,36,0,0,1702,1704,3,1334,
	667,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1705,1,0,0,0,1705,1706,3,
	908,454,0,1706,85,1,0,0,0,1707,1713,3,90,45,0,1708,1713,3,96,48,0,1709,
	1713,3,810,405,0,1710,1713,3,1264,632,0,1711,1713,3,88,44,0,1712,1707,1,
	0,0,0,1712,1708,1,0,0,0,1712,1709,1,0,0,0,1712,1710,1,0,0,0,1712,1711,1,
	0,0,0,1713,87,1,0,0,0,1714,1715,7,2,0,0,1715,89,1,0,0,0,1716,1717,3,54,
	27,0,1717,91,1,0,0,0,1718,1723,3,94,47,0,1719,1723,3,96,48,0,1720,1723,
	3,820,410,0,1721,1723,3,1264,632,0,1722,1718,1,0,0,0,1722,1719,1,0,0,0,
	1722,1720,1,0,0,0,1722,1721,1,0,0,0,1723,93,1,0,0,0,1724,1725,3,54,27,0,
	1725,95,1,0,0,0,1726,1727,5,266,0,0,1727,1728,3,1334,667,0,1728,1729,3,
	950,475,0,1729,1738,1,0,0,0,1730,1738,3,952,476,0,1731,1738,3,1162,581,
	0,1732,1738,3,900,450,0,1733,1738,3,552,276,0,1734,1738,3,958,479,0,1735,
	1738,3,1166,583,0,1736,1738,3,1168,584,0,1737,1726,1,0,0,0,1737,1730,1,
	0,0,0,1737,1731,1,0,0,0,1737,1732,1,0,0,0,1737,1733,1,0,0,0,1737,1734,1,
	0,0,0,1737,1735,1,0,0,0,1737,1736,1,0,0,0,1738,97,1,0,0,0,1739,1741,3,100,
	50,0,1740,1739,1,0,0,0,1741,1742,1,0,0,0,1742,1740,1,0,0,0,1742,1743,1,
	0,0,0,1743,99,1,0,0,0,1744,1747,3,102,51,0,1745,1747,3,132,66,0,1746,1744,
	1,0,0,0,1746,1745,1,0,0,0,1747,101,1,0,0,0,1748,1755,3,104,52,0,1749,1755,
	3,108,54,0,1750,1755,3,124,62,0,1751,1755,3,106,53,0,1752,1755,3,122,61,
	0,1753,1755,3,130,65,0,1754,1748,1,0,0,0,1754,1749,1,0,0,0,1754,1750,1,
	0,0,0,1754,1751,1,0,0,0,1754,1752,1,0,0,0,1754,1753,1,0,0,0,1755,103,1,
	0,0,0,1756,1757,5,101,0,0,1757,1758,3,1334,667,0,1758,1762,5,223,0,0,1759,
	1760,3,1334,667,0,1760,1761,5,364,0,0,1761,1763,1,0,0,0,1762,1759,1,0,0,
	0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,1765,3,1334,667,0,1765,1766,
	3,798,399,0,1766,105,1,0,0,0,1767,1768,5,121,0,0,1768,1769,3,1334,667,0,
	1769,1773,5,223,0,0,1770,1771,3,1334,667,0,1771,1772,5,365,0,0,1772,1774,
	1,0,0,0,1773,1770,1,0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,1776,
	3,1334,667,0,1776,1777,3,798,399,0,1777,107,1,0,0,0,1778,1781,3,110,55,
	0,1779,1781,3,112,56,0,1780,1778,1,0,0,0,1780,1779,1,0,0,0,1781,109,1,0,
	0,0,1782,1783,5,101,0,0,1783,1786,3,1334,667,0,1784,1785,5,339,0,0,1785,
	1787,3,1334,667,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,1788,1,0,0,0,
	1788,1792,5,323,0,0,1789,1790,3,1334,667,0,1790,1791,5,364,0,0,1791,1793,
	1,0,0,0,1792,1789,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,1795,
	3,1334,667,0,1795,1796,3,812,406,0,1796,1799,3,1334,667,0,1797,1800,3,114,
	57,0,1798,1800,3,116,58,0,1799,1797,1,0,0,0,1799,1798,1,0,0,0,1800,1804,
	1,0,0,0,1801,1802,3,1334,667,0,1802,1803,3,120,60,0,1803,1805,1,0,0,0,1804,
	1801,1,0,0,0,1804,1805,1,0,0,0,1805,111,1,0,0,0,1806,1807,5,101,0,0,1807,
	1808,3,1334,667,0,1808,1809,5,200,0,0,1809,1810,3,1334,667,0,1810,1814,
	5,217,0,0,1811,1812,3,1334,667,0,1812,1813,5,339,0,0,1813,1815,1,0,0,0,
	1814,1811,1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,3,1334,
	667,0,1817,1818,5,323,0,0,1818,1819,3,1334,667,0,1819,1820,3,812,406,0,
	1820,1823,3,1334,667,0,1821,1824,3,114,57,0,1822,1824,3,116,58,0,1823,1821,
	1,0,0,0,1823,1822,1,0,0,0,1824,1828,1,0,0,0,1825,1826,3,1334,667,0,1826,
	1827,3,120,60,0,1827,1829,1,0,0,0,1828,1825,1,0,0,0,1828,1829,1,0,0,0,1829,
	113,1,0,0,0,1830,1839,5,198,0,0,1831,1832,3,1334,667,0,1832,1833,5,339,
	0,0,1833,1835,1,0,0,0,1834,1831,1,0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,
	0,0,1836,1837,3,1334,667,0,1837,1838,5,323,0,0,1838,1840,1,0,0,0,1839,1834,
	1,0,0,0,1839,1840,1,0,0,0,1840,1841,1,0,0,0,1841,1842,3,1334,667,0,1842,
	1843,5,353,0,0,1843,115,1,0,0,0,1844,1854,3,118,59,0,1845,1847,3,686,343,
	0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1854,3,816,
	408,0,1849,1851,3,686,343,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1852,
	1,0,0,0,1852,1854,3,584,292,0,1853,1844,1,0,0,0,1853,1846,1,0,0,0,1853,
	1850,1,0,0,0,1854,117,1,0,0,0,1855,1856,5,170,0,0,1856,1857,3,1334,667,
	0,1857,1858,3,86,43,0,1858,119,1,0,0,0,1859,1860,5,67,0,0,1860,1861,3,1334,
	667,0,1861,1862,5,96,0,0,1862,1863,3,1334,667,0,1863,1864,5,196,0,0,1864,
	1865,3,1334,667,0,1865,1866,3,86,43,0,1866,121,1,0,0,0,1867,1871,5,121,
	0,0,1868,1869,3,1334,667,0,1869,1870,5,339,0,0,1870,1872,1,0,0,0,1871,1868,
	1,0,0,0,1871,1872,1,0,0,0,1872,1873,1,0,0,0,1873,1874,3,1334,667,0,1874,
	1878,5,323,0,0,1875,1876,3,1334,667,0,1876,1877,5,365,0,0,1877,1879,1,0,
	0,0,1878,1875,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1881,3,1334,
	667,0,1881,1882,3,812,406,0,1882,123,1,0,0,0,1883,1884,5,101,0,0,1884,1910,
	3,1334,667,0,1885,1886,5,339,0,0,1886,1888,3,1334,667,0,1887,1885,1,0,0,
	0,1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,1890,5,323,0,0,1890,1891,3,1334,
	667,0,1891,1895,5,353,0,0,1892,1893,3,1334,667,0,1893,1894,5,364,0,0,1894,
	1896,1,0,0,0,1895,1892,1,0,0,0,1895,1896,1,0,0,0,1896,1911,1,0,0,0,1897,
	1898,5,200,0,0,1898,1899,3,1334,667,0,1899,1903,5,217,0,0,1900,1901,3,1334,
	667,0,1901,1902,5,339,0,0,1902,1904,1,0,0,0,1903,1900,1,0,0,0,1903,1904,
	1,0,0,0,1904,1905,1,0,0,0,1905,1906,3,1334,667,0,1906,1907,5,323,0,0,1907,
	1908,3,1334,667,0,1908,1909,5,353,0,0,1909,1911,1,0,0,0,1910,1887,1,0,0,
	0,1910,1897,1,0,0,0,1911,1912,1,0,0,0,1912,1913,3,1334,667,0,1913,1914,
	3,818,409,0,1914,1915,3,1334,667,0,1915,1916,3,126,63,0,1916,125,1,0,0,
	0,1917,1918,5,67,0,0,1918,1920,3,1334,667,0,1919,1917,1,0,0,0,1919,1920,
	1,0,0,0,1920,1921,1,0,0,0,1921,1929,3,128,64,0,1922,1929,3,118,59,0,1923,
	1924,5,67,0,0,1924,1926,3,1334,667,0,1925,1923,1,0,0,0,1925,1926,1,0,0,
	0,1926,1927,1,0,0,0,1927,1929,3,584,292,0,1928,1919,1,0,0,0,1928,1922,1,
	0,0,0,1928,1925,1,0,0,0,1929,127,1,0,0,0,1930,1931,5,96,0,0,1931,1932,3,
	1334,667,0,1932,1933,5,196,0,0,1933,1936,3,1334,667,0,1934,1937,3,816,408,
	0,1935,1937,3,832,416,0,1936,1934,1,0,0,0,1936,1935,1,0,0,0,1937,129,1,
	0,0,0,1938,1942,5,121,0,0,1939,1940,3,1334,667,0,1940,1941,5,339,0,0,1941,
	1943,1,0,0,0,1942,1939,1,0,0,0,1942,1943,1,0,0,0,1943,1944,1,0,0,0,1944,
	1945,3,1334,667,0,1945,1946,5,323,0,0,1946,1947,3,1334,667,0,1947,1951,
	5,353,0,0,1948,1949,3,1334,667,0,1949,1950,5,365,0,0,1950,1952,1,0,0,0,
	1951,1948,1,0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1954,3,1334,
	667,0,1954,1955,3,818,409,0,1955,131,1,0,0,0,1956,1957,3,278,139,0,1957,
	133,1,0,0,0,1958,1961,3,136,68,0,1959,1961,3,142,71,0,1960,1958,1,0,0,0,
	1960,1959,1,0,0,0,1961,135,1,0,0,0,1962,1965,3,138,69,0,1963,1965,3,140,
	70,0,1964,1962,1,0,0,0,1964,1963,1,0,0,0,1965,137,1,0,0,0,1966,1967,3,294,
	147,0,1967,1968,3,1334,667,0,1968,1972,3,146,73,0,1969,1970,3,1334,667,
	0,1970,1971,3,248,124,0,1971,1973,1,0,0,0,1972,1969,1,0,0,0,1972,1973,1,
	0,0,0,1973,139,1,0,0,0,1974,1975,3,294,147,0,1975,1976,3,1334,667,0,1976,
	1977,3,52,26,0,1977,141,1,0,0,0,1978,1981,3,144,72,0,1979,1981,3,52,26,
	0,1980,1978,1,0,0,0,1980,1979,1,0,0,0,1981,143,1,0,0,0,1982,1986,3,146,
	73,0,1983,1984,3,1334,667,0,1984,1985,3,248,124,0,1985,1987,1,0,0,0,1986,
	1983,1,0,0,0,1986,1987,1,0,0,0,1987,145,1,0,0,0,1988,1990,3,148,74,0,1989,
	1988,1,0,0,0,1990,1991,1,0,0,0,1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,
	147,1,0,0,0,1993,1996,3,214,107,0,1994,1996,3,150,75,0,1995,1993,1,0,0,
	0,1995,1994,1,0,0,0,1996,149,1,0,0,0,1997,2000,3,152,76,0,1998,2000,3,186,
	93,0,1999,1997,1,0,0,0,1999,1998,1,0,0,0,2000,151,1,0,0,0,2001,2006,3,154,
	77,0,2002,2006,3,156,78,0,2003,2006,3,170,85,0,2004,2006,3,180,90,0,2005,
	2001,1,0,0,0,2005,2002,1,0,0,0,2005,2003,1,0,0,0,2005,2004,1,0,0,0,2006,
	153,1,0,0,0,2007,2008,5,150,0,0,2008,2009,3,1334,667,0,2009,2010,3,430,
	215,0,2010,155,1,0,0,0,2011,2012,5,227,0,0,2012,2013,3,1334,667,0,2013,
	2014,3,158,79,0,2014,157,1,0,0,0,2015,2017,3,160,80,0,2016,2018,3,1334,
	667,0,2017,2016,1,0,0,0,2017,2018,1,0,0,0,2018,2027,1,0,0,0,2019,2021,5,
	34,0,0,2020,2022,3,1334,667,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,
	2023,1,0,0,0,2023,2025,3,160,80,0,2024,2026,3,1334,667,0,2025,2024,1,0,
	0,0,2025,2026,1,0,0,0,2026,2028,1,0,0,0,2027,2019,1,0,0,0,2028,2029,1,0,
	0,0,2029,2027,1,0,0,0,2029,2030,1,0,0,0,2030,159,1,0,0,0,2031,2035,3,162,
	81,0,2032,2035,3,164,82,0,2033,2035,3,166,83,0,2034,2031,1,0,0,0,2034,2032,
	1,0,0,0,2034,2033,1,0,0,0,2035,161,1,0,0,0,2036,2038,3,298,149,0,2037,2039,
	3,1334,667,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,2040,1,0,0,0,2040,
	2042,5,54,0,0,2041,2043,3,1334,667,0,2042,2041,1,0,0,0,2042,2043,1,0,0,
	0,2043,2044,1,0,0,0,2044,2046,3,1286,643,0,2045,2047,3,1334,667,0,2046,
	2045,1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2050,5,36,0,0,2049,
	2051,3,1334,667,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,2051,2052,1,0,0,0,
	2052,2053,3,908,454,0,2053,163,1,0,0,0,2054,2056,3,298,149,0,2055,2057,
	3,1334,667,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2058,1,0,0,0,2058,
	2059,5,36,0,0,2059,2060,3,1334,667,0,2060,2064,5,40,0,0,2061,2062,3,1334,
	667,0,2062,2063,3,400,200,0,2063,2065,1,0,0,0,2064,2061,1,0,0,0,2064,2065,
	1,0,0,0,2065,2067,1,0,0,0,2066,2068,3,1334,667,0,2067,2066,1,0,0,0,2067,
	2068,1,0,0,0,2068,2069,1,0,0,0,2069,2070,5,41,0,0,2070,165,1,0,0,0,2071,
	2072,3,298,149,0,2072,2073,3,1334,667,0,2073,2074,3,392,196,0,2074,2075,
	3,168,84,0,2075,167,1,0,0,0,2076,2087,3,1284,642,0,2077,2079,3,1334,667,
	0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,5,29,
	0,0,2081,2083,3,1334,667,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,
	1,0,0,0,2084,2086,3,1284,642,0,2085,2078,1,0,0,0,2086,2089,1,0,0,0,2087,
	2085,1,0,0,0,2087,2088,1,0,0,0,2088,169,1,0,0,0,2089,2087,1,0,0,0,2090,
	2091,5,216,0,0,2091,2092,3,1334,667,0,2092,2093,3,172,86,0,2093,171,1,0,
	0,0,2094,2095,3,174,87,0,2095,2104,3,1334,667,0,2096,2098,5,34,0,0,2097,
	2099,3,1334,667,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2100,1,0,0,0,
	2100,2102,3,174,87,0,2101,2103,3,1334,667,0,2102,2101,1,0,0,0,2102,2103,
	1,0,0,0,2103,2105,1,0,0,0,2104,2096,1,0,0,0,2105,2106,1,0,0,0,2106,2104,
	1,0,0,0,2106,2107,1,0,0,0,2107,173,1,0,0,0,2108,2111,3,176,88,0,2109,2111,
	3,178,89,0,2110,2108,1,0,0,0,2110,2109,1,0,0,0,2111,175,1,0,0,0,2112,2113,
	3,298,149,0,2113,2114,5,54,0,0,2114,2115,3,1286,643,0,2115,177,1,0,0,0,
	2116,2117,3,298,149,0,2117,2118,3,1334,667,0,2118,2119,3,392,196,0,2119,
	2120,3,168,84,0,2120,179,1,0,0,0,2121,2122,7,3,0,0,2122,2123,3,1334,667,
	0,2123,2124,5,115,0,0,2124,2125,3,1334,667,0,2125,2126,3,182,91,0,2126,
	181,1,0,0,0,2127,2129,3,184,92,0,2128,2130,3,1334,667,0,2129,2128,1,0,0,
	0,2129,2130,1,0,0,0,2130,2139,1,0,0,0,2131,2133,5,34,0,0,2132,2134,3,1334,
	667,0,2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,2135,1,0,0,0,2135,2137,3,
	184,92,0,2136,2138,3,1334,667,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,
	2140,1,0,0,0,2139,2131,1,0,0,0,2140,2141,1,0,0,0,2141,2139,1,0,0,0,2141,
	2142,1,0,0,0,2142,183,1,0,0,0,2143,2144,3,908,454,0,2144,185,1,0,0,0,2145,
	2146,3,278,139,0,2146,187,1,0,0,0,2147,2148,3,190,95,0,2148,189,1,0,0,0,
	2149,2150,6,95,-1,0,2150,2151,3,196,98,0,2151,2160,1,0,0,0,2152,2153,10,
	2,0,0,2153,2154,3,1334,667,0,2154,2155,3,192,96,0,2155,2156,3,1334,667,
	0,2156,2157,3,196,98,0,2157,2159,1,0,0,0,2158,2152,1,0,0,0,2159,2162,1,
	0,0,0,2160,2158,1,0,0,0,2160,2161,1,0,0,0,2161,191,1,0,0,0,2162,2160,1,
	0,0,0,2163,2166,3,194,97,0,2164,2166,5,202,0,0,2165,2163,1,0,0,0,2165,2164,
	1,0,0,0,2166,193,1,0,0,0,2167,2168,7,4,0,0,2168,2169,3,1334,667,0,2169,
	2170,3,558,279,0,2170,195,1,0,0,0,2171,2172,3,198,99,0,2172,197,1,0,0,0,
	2173,2176,3,200,100,0,2174,2176,3,210,105,0,2175,2173,1,0,0,0,2175,2174,
	1,0,0,0,2176,199,1,0,0,0,2177,2178,3,202,101,0,2178,2179,3,1334,667,0,2179,
	2181,1,0,0,0,2180,2177,1,0,0,0,2181,2182,1,0,0,0,2182,2180,1,0,0,0,2182,
	2183,1,0,0,0,2183,2184,1,0,0,0,2184,2185,3,204,102,0,2185,2190,1,0,0,0,
	2186,2190,3,206,103,0,2187,2190,3,208,104,0,2188,2190,3,260,130,0,2189,
	2180,1,0,0,0,2189,2186,1,0,0,0,2189,2187,1,0,0,0,2189,2188,1,0,0,0,2190,
	201,1,0,0,0,2191,2192,3,294,147,0,2192,2193,3,1334,667,0,2193,2194,3,212,
	106,0,2194,203,1,0,0,0,2195,2196,3,294,147,0,2196,2197,3,1334,667,0,2197,
	2198,3,212,106,0,2198,2199,3,1334,667,0,2199,2200,3,248,124,0,2200,205,
	1,0,0,0,2201,2202,3,294,147,0,2202,2203,3,1334,667,0,2203,2204,3,248,124,
	0,2204,207,1,0,0,0,2205,2206,3,294,147,0,2206,2207,3,1334,667,0,2207,2208,
	3,54,27,0,2208,209,1,0,0,0,2209,2210,3,212,106,0,2210,2211,3,1334,667,0,
	2211,2213,1,0,0,0,2212,2209,1,0,0,0,2212,2213,1,0,0,0,2213,2214,1,0,0,0,
	2214,2217,3,248,124,0,2215,2217,3,54,27,0,2216,2212,1,0,0,0,2216,2215,1,
	0,0,0,2217,211,1,0,0,0,2218,2224,3,214,107,0,2219,2220,3,1334,667,0,2220,
	2221,3,214,107,0,2221,2223,1,0,0,0,2222,2219,1,0,0,0,2223,2226,1,0,0,0,
	2224,2222,1,0,0,0,2224,2225,1,0,0,0,2225,213,1,0,0,0,2226,2224,1,0,0,0,
	2227,2230,3,216,108,0,2228,2230,3,228,114,0,2229,2227,1,0,0,0,2229,2228,
	1,0,0,0,2230,215,1,0,0,0,2231,2237,3,218,109,0,2232,2237,3,232,116,0,2233,
	2237,3,238,119,0,2234,2237,3,230,115,0,2235,2237,3,246,123,0,2236,2231,
	1,0,0,0,2236,2232,1,0,0,0,2236,2233,1,0,0,0,2236,2234,1,0,0,0,2236,2235,
	1,0,0,0,2237,217,1,0,0,0,2238,2241,3,220,110,0,2239,2241,3,222,111,0,2240,
	2238,1,0,0,0,2240,2239,1,0,0,0,2241,219,1,0,0,0,2242,2243,5,182,0,0,2243,
	2244,3,1334,667,0,2244,2245,3,306,153,0,2245,221,1,0,0,0,2246,2247,5,199,
	0,0,2247,2248,3,1334,667,0,2248,2249,3,224,112,0,2249,223,1,0,0,0,2250,
	2272,3,220,110,0,2251,2253,5,40,0,0,2252,2254,3,1334,667,0,2253,2252,1,
	0,0,0,2253,2254,1,0,0,0,2254,2255,1,0,0,0,2255,2257,3,226,113,0,2256,2258,
	3,1334,667,0,2257,2256,1,0,0,0,2257,2258,1,0,0,0,2258,2259,1,0,0,0,2259,
	2260,5,41,0,0,2260,2272,1,0,0,0,2261,2263,5,44,0,0,2262,2264,3,1334,667,
	0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2267,3,226,
	113,0,2266,2268,3,1334,667,0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,2268,2269,
	1,0,0,0,2269,2270,5,45,0,0,2270,2272,1,0,0,0,2271,2250,1,0,0,0,2271,2251,
	1,0,0,0,2271,2261,1,0,0,0,2272,225,1,0,0,0,2273,2275,3,1334,667,0,2274,
	2273,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,0,0,0,2276,2278,3,218,109,0,
	2277,2274,1,0,0,0,2278,2279,1,0,0,0,2279,2277,1,0,0,0,2279,2280,1,0,0,0,
	2280,227,1,0,0,0,2281,2282,3,278,139,0,2282,229,1,0,0,0,2283,2284,5,131,
	0,0,2284,2287,3,1334,667,0,2285,2288,3,530,265,0,2286,2288,3,834,417,0,
	2287,2285,1,0,0,0,2287,2286,1,0,0,0,2288,231,1,0,0,0,2289,2290,5,169,0,
	0,2290,2291,3,1334,667,0,2291,2292,3,234,117,0,2292,233,1,0,0,0,2293,2295,
	3,236,118,0,2294,2296,3,1334,667,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,
	2296,2305,1,0,0,0,2297,2299,5,34,0,0,2298,2300,3,1334,667,0,2299,2298,1,
	0,0,0,2299,2300,1,0,0,0,2300,2301,1,0,0,0,2301,2303,3,236,118,0,2302,2304,
	3,1334,667,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2306,1,0,0,0,2305,
	2297,1,0,0,0,2306,2307,1,0,0,0,2307,2305,1,0,0,0,2307,2308,1,0,0,0,2308,
	235,1,0,0,0,2309,2321,3,80,40,0,2310,2312,3,1308,654,0,2311,2313,3,1334,
	667,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,0,0,0,2314,2316,5,
	36,0,0,2315,2317,3,1334,667,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,
	2318,1,0,0,0,2318,2319,3,908,454,0,2319,2321,1,0,0,0,2320,2309,1,0,0,0,
	2320,2310,1,0,0,0,2321,237,1,0,0,0,2322,2323,5,140,0,0,2323,2324,3,1334,
	667,0,2324,2326,3,240,120,0,2325,2327,3,1334,667,0,2326,2325,1,0,0,0,2326,
	2327,1,0,0,0,2327,2329,1,0,0,0,2328,2330,3,244,122,0,2329,2328,1,0,0,0,
	2329,2330,1,0,0,0,2330,239,1,0,0,0,2331,2332,3,242,121,0,2332,2333,3,1334,
	667,0,2333,2334,3,1118,559,0,2334,241,1,0,0,0,2335,2336,3,1316,658,0,2336,
	2337,3,1334,667,0,2337,2338,5,149,0,0,2338,243,1,0,0,0,2339,2340,5,269,
	0,0,2340,2341,3,1334,667,0,2341,2342,7,5,0,0,2342,2343,3,1334,667,0,2343,
	2344,3,1316,658,0,2344,245,1,0,0,0,2345,2349,3,550,275,0,2346,2347,3,1334,
	667,0,2347,2348,3,578,289,0,2348,2350,1,0,0,0,2349,2346,1,0,0,0,2349,2350,
	1,0,0,0,2350,2354,1,0,0,0,2351,2352,3,1334,667,0,2352,2353,3,576,288,0,
	2353,2355,1,0,0,0,2354,2351,1,0,0,0,2354,2355,1,0,0,0,2355,2364,1,0,0,0,
	2356,2360,3,578,289,0,2357,2358,3,1334,667,0,2358,2359,3,576,288,0,2359,
	2361,1,0,0,0,2360,2357,1,0,0,0,2360,2361,1,0,0,0,2361,2364,1,0,0,0,2362,
	2364,3,576,288,0,2363,2345,1,0,0,0,2363,2356,1,0,0,0,2363,2362,1,0,0,0,
	2364,247,1,0,0,0,2365,2369,3,250,125,0,2366,2367,3,1334,667,0,2367,2368,
	3,246,123,0,2368,2370,1,0,0,0,2369,2366,1,0,0,0,2369,2370,1,0,0,0,2370,
	2373,1,0,0,0,2371,2373,5,132,0,0,2372,2365,1,0,0,0,2372,2371,1,0,0,0,2373,
	249,1,0,0,0,2374,2375,5,219,0,0,2375,2376,3,1334,667,0,2376,2377,3,252,
	126,0,2377,251,1,0,0,0,2378,2379,3,558,279,0,2379,2380,3,1334,667,0,2380,
	2382,1,0,0,0,2381,2378,1,0,0,0,2381,2382,1,0,0,0,2382,2385,1,0,0,0,2383,
	2386,5,30,0,0,2384,2386,3,254,127,0,2385,2383,1,0,0,0,2385,2384,1,0,0,0,
	2386,2390,1,0,0,0,2387,2388,3,1334,667,0,2388,2389,3,542,271,0,2389,2391,
	1,0,0,0,2390,2387,1,0,0,0,2390,2391,1,0,0,0,2391,2397,1,0,0,0,2392,2393,
	5,334,0,0,2393,2394,3,1334,667,0,2394,2395,5,313,0,0,2395,2397,1,0,0,0,
	2396,2381,1,0,0,0,2396,2392,1,0,0,0,2397,253,1,0,0,0,2398,2409,3,256,128,
	0,2399,2401,3,1334,667,0,2400,2399,1,0,0,0,2400,2401,1,0,0,0,2401,2402,
	1,0,0,0,2402,2404,5,34,0,0,2403,2405,3,1334,667,0,2404,2403,1,0,0,0,2404,
	2405,1,0,0,0,2405,2406,1,0,0,0,2406,2408,3,256,128,0,2407,2400,1,0,0,0,
	2408,2411,1,0,0,0,2409,2407,1,0,0,0,2409,2410,1,0,0,0,2410,255,1,0,0,0,
	2411,2409,1,0,0,0,2412,2416,3,924,462,0,2413,2414,3,1334,667,0,2414,2415,
	3,258,129,0,2415,2417,1,0,0,0,2416,2413,1,0,0,0,2416,2417,1,0,0,0,2417,
	257,1,0,0,0,2418,2419,5,67,0,0,2419,2420,3,1334,667,0,2420,2421,3,1316,
	658,0,2421,259,1,0,0,0,2422,2424,5,225,0,0,2423,2425,3,1334,667,0,2424,
	2423,1,0,0,0,2424,2425,1,0,0,0,2425,2427,1,0,0,0,2426,2428,3,558,279,0,
	2427,2426,1,0,0,0,2427,2428,1,0,0,0,2428,2429,1,0,0,0,2429,2432,3,1334,
	667,0,2430,2433,3,262,131,0,2431,2433,5,30,0,0,2432,2430,1,0,0,0,2432,2431,
	1,0,0,0,2433,2466,1,0,0,0,2434,2435,3,1334,667,0,2435,2439,3,270,135,0,
	2436,2437,3,1334,667,0,2437,2438,3,530,265,0,2438,2440,1,0,0,0,2439,2436,
	1,0,0,0,2439,2440,1,0,0,0,2440,2444,1,0,0,0,2441,2442,3,1334,667,0,2442,
	2443,3,542,271,0,2443,2445,1,0,0,0,2444,2441,1,0,0,0,2444,2445,1,0,0,0,
	2445,2449,1,0,0,0,2446,2447,3,1334,667,0,2447,2448,3,268,134,0,2448,2450,
	1,0,0,0,2449,2446,1,0,0,0,2449,2450,1,0,0,0,2450,2454,1,0,0,0,2451,2452,
	3,1334,667,0,2452,2453,3,550,275,0,2453,2455,1,0,0,0,2454,2451,1,0,0,0,
	2454,2455,1,0,0,0,2455,2459,1,0,0,0,2456,2457,3,1334,667,0,2457,2458,3,
	578,289,0,2458,2460,1,0,0,0,2459,2456,1,0,0,0,2459,2460,1,0,0,0,2460,2464,
	1,0,0,0,2461,2462,3,1334,667,0,2462,2463,3,576,288,0,2463,2465,1,0,0,0,
	2464,2461,1,0,0,0,2464,2465,1,0,0,0,2465,2467,1,0,0,0,2466,2434,1,0,0,0,
	2466,2467,1,0,0,0,2467,261,1,0,0,0,2468,2470,3,264,132,0,2469,2471,3,1334,
	667,0,2470,2469,1,0,0,0,2470,2471,1,0,0,0,2471,2480,1,0,0,0,2472,2474,5,
	34,0,0,2473,2475,3,1334,667,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,
	2476,1,0,0,0,2476,2478,3,264,132,0,2477,2479,3,1334,667,0,2478,2477,1,0,
	0,0,2478,2479,1,0,0,0,2479,2481,1,0,0,0,2480,2472,1,0,0,0,2481,2482,1,0,
	0,0,2482,2480,1,0,0,0,2482,2483,1,0,0,0,2483,263,1,0,0,0,2484,2488,3,924,
	462,0,2485,2486,3,1334,667,0,2486,2487,3,266,133,0,2487,2489,1,0,0,0,2488,
	2485,1,0,0,0,2488,2489,1,0,0,0,2489,265,1,0,0,0,2490,2491,5,67,0,0,2491,
	2492,3,1334,667,0,2492,2493,3,1316,658,0,2493,267,1,0,0,0,2494,2495,5,143,
	0,0,2495,2496,3,834,417,0,2496,269,1,0,0,0,2497,2498,5,141,0,0,2498,2501,
	3,272,136,0,2499,2501,3,276,138,0,2500,2497,1,0,0,0,2500,2499,1,0,0,0,2501,
	271,1,0,0,0,2502,2513,3,274,137,0,2503,2505,3,1334,667,0,2504,2503,1,0,
	0,0,2504,2505,1,0,0,0,2505,2506,1,0,0,0,2506,2508,5,34,0,0,2507,2509,3,
	1334,667,0,2508,2507,1,0,0,0,2508,2509,1,0,0,0,2509,2510,1,0,0,0,2510,2512,
	3,274,137,0,2511,2504,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,
	2514,1,0,0,0,2514,273,1,0,0,0,2515,2513,1,0,0,0,2516,2517,3,86,43,0,2517,
	2518,3,1334,667,0,2518,2519,3,218,109,0,2519,275,1,0,0,0,2520,2521,5,141,
	0,0,2521,2522,3,1334,667,0,2522,2523,3,54,27,0,2523,2531,1,0,0,0,2524,2525,
	5,141,0,0,2525,2526,3,1334,667,0,2526,2527,3,86,43,0,2527,2528,3,1334,667,
	0,2528,2529,3,54,27,0,2529,2531,1,0,0,0,2530,2520,1,0,0,0,2530,2524,1,0,
	0,0,2531,277,1,0,0,0,2532,2533,5,199,0,0,2533,2535,3,1334,667,0,2534,2532,
	1,0,0,0,2534,2535,1,0,0,0,2535,2536,1,0,0,0,2536,2537,5,84,0,0,2537,2538,
	3,280,140,0,2538,279,1,0,0,0,2539,2542,3,282,141,0,2540,2542,3,288,144,
	0,2541,2539,1,0,0,0,2541,2540,1,0,0,0,2542,281,1,0,0,0,2543,2544,3,284,
	142,0,2544,2545,3,1334,667,0,2545,2547,1,0,0,0,2546,2543,1,0,0,0,2546,2547,
	1,0,0,0,2547,2548,1,0,0,0,2548,2549,3,48,24,0,2549,283,1,0,0,0,2550,2552,
	5,44,0,0,2551,2553,3,1334,667,0,2552,2551,1,0,0,0,2552,2553,1,0,0,0,2553,
	2555,1,0,0,0,2554,2556,3,286,143,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,
	2556,2558,1,0,0,0,2557,2559,3,1334,667,0,2558,2557,1,0,0,0,2558,2559,1,
	0,0,0,2559,2560,1,0,0,0,2560,2561,5,45,0,0,2561,285,1,0,0,0,2562,2564,3,
	298,149,0,2563,2565,3,1334,667,0,2564,2563,1,0,0,0,2564,2565,1,0,0,0,2565,
	2574,1,0,0,0,2566,2568,5,34,0,0,2567,2569,3,1334,667,0,2568,2567,1,0,0,
	0,2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,2572,3,298,149,0,2571,2573,3,
	1334,667,0,2572,2571,1,0,0,0,2572,2573,1,0,0,0,2573,2575,1,0,0,0,2574,2566,
	1,0,0,0,2575,2576,1,0,0,0,2576,2574,1,0,0,0,2576,2577,1,0,0,0,2577,287,
	1,0,0,0,2578,2579,3,824,412,0,2579,2580,3,1334,667,0,2580,2582,5,44,0,0,
	2581,2583,3,1334,667,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2585,1,
	0,0,0,2584,2586,3,290,145,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2588,
	1,0,0,0,2587,2589,3,1334,667,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,2589,
	2590,1,0,0,0,2590,2591,5,45,0,0,2591,289,1,0,0,0,2592,2594,3,292,146,0,
	2593,2595,3,1334,667,0,2594,2593,1,0,0,0,2594,2595,1,0,0,0,2595,2604,1,
	0,0,0,2596,2598,5,34,0,0,2597,2599,3,1334,667,0,2598,2597,1,0,0,0,2598,
	2599,1,0,0,0,2599,2600,1,0,0,0,2600,2602,3,292,146,0,2601,2603,3,1334,667,
	0,2602,2601,1,0,0,0,2602,2603,1,0,0,0,2603,2605,1,0,0,0,2604,2596,1,0,0,
	0,2605,2606,1,0,0,0,2606,2604,1,0,0,0,2606,2607,1,0,0,0,2607,291,1,0,0,
	0,2608,2609,3,908,454,0,2609,293,1,0,0,0,2610,2611,5,261,0,0,2611,2612,
	3,1334,667,0,2612,2613,3,86,43,0,2613,295,1,0,0,0,2614,2615,5,71,0,0,2615,
	2616,3,1334,667,0,2616,2617,3,794,397,0,2617,297,1,0,0,0,2618,2619,3,1310,
	655,0,2619,299,1,0,0,0,2620,2621,3,298,149,0,2621,301,1,0,0,0,2622,2623,
	3,298,149,0,2623,303,1,0,0,0,2624,2625,3,1290,645,0,2625,305,1,0,0,0,2626,
	2630,3,314,157,0,2627,2628,3,1334,667,0,2628,2629,3,308,154,0,2629,2631,
	1,0,0,0,2630,2627,1,0,0,0,2630,2631,1,0,0,0,2631,307,1,0,0,0,2632,2633,
	5,272,0,0,2633,2634,3,310,155,0,2634,309,1,0,0,0,2635,2637,3,312,156,0,
	2636,2638,3,1334,667,0,2637,2636,1,0,0,0,2637,2638,1,0,0,0,2638,2647,1,
	0,0,0,2639,2641,5,34,0,0,2640,2642,3,1334,667,0,2641,2640,1,0,0,0,2641,
	2642,1,0,0,0,2642,2643,1,0,0,0,2643,2645,3,312,156,0,2644,2646,3,1334,667,
	0,2645,2644,1,0,0,0,2645,2646,1,0,0,0,2646,2648,1,0,0,0,2647,2639,1,0,0,
	0,2648,2649,1,0,0,0,2649,2647,1,0,0,0,2649,2650,1,0,0,0,2650,311,1,0,0,
	0,2651,2652,3,300,150,0,2652,2653,3,1334,667,0,2653,2654,3,302,151,0,2654,
	313,1,0,0,0,2655,2656,3,316,158,0,2656,2657,3,1334,667,0,2657,2659,1,0,
	0,0,2658,2655,1,0,0,0,2658,2659,1,0,0,0,2659,2660,1,0,0,0,2660,2664,3,326,
	163,0,2661,2662,3,1334,667,0,2662,2663,3,332,166,0,2663,2665,1,0,0,0,2664,
	2661,1,0,0,0,2664,2665,1,0,0,0,2665,2669,1,0,0,0,2666,2667,3,1334,667,0,
	2667,2668,3,334,167,0,2668,2670,1,0,0,0,2669,2666,1,0,0,0,2669,2670,1,0,
	0,0,2670,315,1,0,0,0,2671,2674,3,318,159,0,2672,2674,3,320,160,0,2673,2671,
	1,0,0,0,2673,2672,1,0,0,0,2674,317,1,0,0,0,2675,2676,5,343,0,0,2676,2677,
	3,1334,667,0,2677,2678,3,322,161,0,2678,319,1,0,0,0,2679,2680,5,316,0,0,
	2680,2681,3,324,162,0,2681,321,1,0,0,0,2682,2686,5,320,0,0,2683,2684,3,
	1334,667,0,2684,2685,5,313,0,0,2685,2687,1,0,0,0,2686,2683,1,0,0,0,2686,
	2687,1,0,0,0,2687,2690,1,0,0,0,2688,2690,5,321,0,0,2689,2682,1,0,0,0,2689,
	2688,1,0,0,0,2690,323,1,0,0,0,2691,2695,3,1338,669,0,2692,2693,3,1334,667,
	0,2693,2694,5,313,0,0,2694,2696,1,0,0,0,2695,2692,1,0,0,0,2695,2696,1,0,
	0,0,2696,2699,1,0,0,0,2697,2699,3,1340,670,0,2698,2691,1,0,0,0,2698,2697,
	1,0,0,0,2699,325,1,0,0,0,2700,2711,3,328,164,0,2701,2703,3,1334,667,0,2702,
	2701,1,0,0,0,2702,2703,1,0,0,0,2703,2704,1,0,0,0,2704,2706,5,34,0,0,2705,
	2707,3,1334,667,0,2706,2705,1,0,0,0,2706,2707,1,0,0,0,2707,2708,1,0,0,0,
	2708,2710,3,328,164,0,2709,2702,1,0,0,0,2710,2713,1,0,0,0,2711,2709,1,0,
	0,0,2711,2712,1,0,0,0,2712,327,1,0,0,0,2713,2711,1,0,0,0,2714,2715,3,330,
	165,0,2715,2716,3,1334,667,0,2716,2718,1,0,0,0,2717,2714,1,0,0,0,2717,2718,
	1,0,0,0,2718,2722,1,0,0,0,2719,2720,3,336,168,0,2720,2721,3,1334,667,0,
	2721,2723,1,0,0,0,2722,2719,1,0,0,0,2722,2723,1,0,0,0,2723,2725,1,0,0,0,
	2724,2726,3,366,183,0,2725,2724,1,0,0,0,2726,2727,1,0,0,0,2727,2725,1,0,
	0,0,2727,2728,1,0,0,0,2728,329,1,0,0,0,2729,2731,3,1302,651,0,2730,2732,
	3,1334,667,0,2731,2730,1,0,0,0,2731,2732,1,0,0,0,2732,2733,1,0,0,0,2733,
	2734,5,36,0,0,2734,331,1,0,0,0,2735,2736,5,325,0,0,2736,2737,3,1334,667,
	0,2737,2738,3,336,168,0,2738,333,1,0,0,0,2739,2740,5,268,0,0,2740,2741,
	3,1334,667,0,2741,2742,3,834,417,0,2742,335,1,0,0,0,2743,2746,3,338,169,
	0,2744,2746,3,342,171,0,2745,2743,1,0,0,0,2745,2744,1,0,0,0,2746,337,1,
	0,0,0,2747,2751,3,340,170,0,2748,2749,3,1334,667,0,2749,2750,3,346,173,
	0,2750,2752,1,0,0,0,2751,2748,1,0,0,0,2751,2752,1,0,0,0,2752,339,1,0,0,
	0,2753,2754,7,6,0,0,2754,341,1,0,0,0,2755,2759,3,344,172,0,2756,2759,3,
	348,174,0,2757,2759,3,352,176,0,2758,2755,1,0,0,0,2758,2756,1,0,0,0,2758,
	2757,1,0,0,0,2759,343,1,0,0,0,2760,2764,5,62,0,0,2761,2762,3,1334,667,0,
	2762,2763,3,340,170,0,2763,2765,1,0,0,0,2764,2761,1,0,0,0,2764,2765,1,0,
	0,0,2765,2769,1,0,0,0,2766,2767,3,1334,667,0,2767,2768,3,346,173,0,2768,
	2770,1,0,0,0,2769,2766,1,0,0,0,2769,2770,1,0,0,0,2770,345,1,0,0,0,2771,
	2772,7,7,0,0,2772,347,1,0,0,0,2773,2777,5,65,0,0,2774,2775,3,1334,667,0,
	2775,2776,3,350,175,0,2776,2778,1,0,0,0,2777,2774,1,0,0,0,2777,2778,1,0,
	0,0,2778,2782,1,0,0,0,2779,2780,3,1334,667,0,2780,2781,3,340,170,0,2781,
	2783,1,0,0,0,2782,2779,1,0,0,0,2782,2783,1,0,0,0,2783,2787,1,0,0,0,2784,
	2785,3,1334,667,0,2785,2786,3,346,173,0,2786,2788,1,0,0,0,2787,2784,1,0,
	0,0,2787,2788,1,0,0,0,2788,349,1,0,0,0,2789,2790,3,902,451,0,2790,351,1,
	0,0,0,2791,2796,3,354,177,0,2792,2796,3,356,178,0,2793,2796,3,358,179,0,
	2794,2796,3,360,180,0,2795,2791,1,0,0,0,2795,2792,1,0,0,0,2795,2793,1,0,
	0,0,2795,2794,1,0,0,0,2796,353,1,0,0,0,2797,2798,5,62,0,0,2798,2799,3,1334,
	667,0,2799,2803,5,344,0,0,2800,2801,3,1334,667,0,2801,2802,3,340,170,0,
	2802,2804,1,0,0,0,2803,2800,1,0,0,0,2803,2804,1,0,0,0,2804,2808,1,0,0,0,
	2805,2806,3,1334,667,0,2806,2807,3,346,173,0,2807,2809,1,0,0,0,2808,2805,
	1,0,0,0,2808,2809,1,0,0,0,2809,355,1,0,0,0,2810,2811,5,65,0,0,2811,2812,
	3,1334,667,0,2812,2816,5,344,0,0,2813,2814,3,1334,667,0,2814,2815,3,340,
	170,0,2815,2817,1,0,0,0,2816,2813,1,0,0,0,2816,2817,1,0,0,0,2817,2821,1,
	0,0,0,2818,2819,3,1334,667,0,2819,2820,3,346,173,0,2820,2822,1,0,0,0,2821,
	2818,1,0,0,0,2821,2822,1,0,0,0,2822,357,1,0,0,0,2823,2824,5,344,0,0,2824,
	2825,3,1334,667,0,2825,2829,3,350,175,0,2826,2827,3,1334,667,0,2827,2828,
	3,340,170,0,2828,2830,1,0,0,0,2829,2826,1,0,0,0,2829,2830,1,0,0,0,2830,
	2834,1,0,0,0,2831,2832,3,1334,667,0,2832,2833,3,346,173,0,2833,2835,1,0,
	0,0,2834,2831,1,0,0,0,2834,2835,1,0,0,0,2835,359,1,0,0,0,2836,2837,5,344,
	0,0,2837,2838,3,1334,667,0,2838,2842,3,364,182,0,2839,2840,3,1334,667,0,
	2840,2841,3,340,170,0,2841,2843,1,0,0,0,2842,2839,1,0,0,0,2842,2843,1,0,
	0,0,2843,2847,1,0,0,0,2844,2845,3,1334,667,0,2845,2846,3,346,173,0,2846,
	2848,1,0,0,0,2847,2844,1,0,0,0,2847,2848,1,0,0,0,2848,2849,1,0,0,0,2849,
	2850,3,1334,667,0,2850,2851,3,362,181,0,2851,361,1,0,0,0,2852,2853,7,8,
	0,0,2853,363,1,0,0,0,2854,2855,3,902,451,0,2855,365,1,0,0,0,2856,2860,3,
	372,186,0,2857,2860,3,368,184,0,2858,2860,3,370,185,0,2859,2856,1,0,0,0,
	2859,2857,1,0,0,0,2859,2858,1,0,0,0,2860,367,1,0,0,0,2861,2869,3,372,186,
	0,2862,2863,3,1334,667,0,2863,2864,5,58,0,0,2864,2865,3,1334,667,0,2865,
	2866,3,372,186,0,2866,2868,1,0,0,0,2867,2862,1,0,0,0,2868,2871,1,0,0,0,
	2869,2867,1,0,0,0,2869,2870,1,0,0,0,2870,369,1,0,0,0,2871,2869,1,0,0,0,
	2872,2874,3,372,186,0,2873,2875,3,1334,667,0,2874,2873,1,0,0,0,2874,2875,
	1,0,0,0,2875,2886,1,0,0,0,2876,2878,5,52,0,0,2877,2879,3,1334,667,0,2878,
	2877,1,0,0,0,2878,2879,1,0,0,0,2879,2880,1,0,0,0,2880,2882,3,372,186,0,
	2881,2883,3,1334,667,0,2882,2881,1,0,0,0,2882,2883,1,0,0,0,2883,2885,1,
	0,0,0,2884,2876,1,0,0,0,2885,2888,1,0,0,0,2886,2884,1,0,0,0,2886,2887,1,
	0,0,0,2887,371,1,0,0,0,2888,2886,1,0,0,0,2889,2895,3,374,187,0,2890,2891,
	3,1334,667,0,2891,2892,3,374,187,0,2892,2894,1,0,0,0,2893,2890,1,0,0,0,
	2894,2897,1,0,0,0,2895,2893,1,0,0,0,2895,2896,1,0,0,0,2896,373,1,0,0,0,
	2897,2895,1,0,0,0,2898,2902,3,380,190,0,2899,2902,3,376,188,0,2900,2902,
	3,378,189,0,2901,2898,1,0,0,0,2901,2899,1,0,0,0,2901,2900,1,0,0,0,2902,
	375,1,0,0,0,2903,2904,3,380,190,0,2904,2905,3,1334,667,0,2905,2906,3,464,
	232,0,2906,377,1,0,0,0,2907,2908,3,380,190,0,2908,2909,5,46,0,0,2909,379,
	1,0,0,0,2910,2914,3,382,191,0,2911,2914,3,424,212,0,2912,2914,3,474,237,
	0,2913,2910,1,0,0,0,2913,2911,1,0,0,0,2913,2912,1,0,0,0,2914,381,1,0,0,
	0,2915,2918,3,384,192,0,2916,2918,3,404,202,0,2917,2915,1,0,0,0,2917,2916,
	1,0,0,0,2918,383,1,0,0,0,2919,2921,5,44,0,0,2920,2922,3,1334,667,0,2921,
	2920,1,0,0,0,2921,2922,1,0,0,0,2922,2923,1,0,0,0,2923,2925,3,386,193,0,
	2924,2926,3,1334,667,0,2925,2924,1,0,0,0,2925,2926,1,0,0,0,2926,2927,1,
	0,0,0,2927,2928,5,45,0,0,2928,385,1,0,0,0,2929,2931,3,388,194,0,2930,2929,
	1,0,0,0,2930,2931,1,0,0,0,2931,2936,1,0,0,0,2932,2934,3,1334,667,0,2933,
	2932,1,0,0,0,2933,2934,1,0,0,0,2934,2935,1,0,0,0,2935,2937,3,390,195,0,
	2936,2933,1,0,0,0,2936,2937,1,0,0,0,2937,2941,1,0,0,0,2938,2939,3,1334,
	667,0,2939,2940,3,394,197,0,2940,2942,1,0,0,0,2941,2938,1,0,0,0,2941,2942,
	1,0,0,0,2942,387,1,0,0,0,2943,2944,5,348,0,0,2944,2946,3,1334,667,0,2945,
	2943,1,0,0,0,2945,2946,1,0,0,0,2946,2947,1,0,0,0,2947,2948,3,1300,650,0,
	2948,389,1,0,0,0,2949,2950,3,392,196,0,2950,2951,3,450,225,0,2951,391,1,
	0,0,0,2952,2953,5,167,0,0,2953,2959,3,1334,667,0,2954,2956,5,32,0,0,2955,
	2957,3,1334,667,0,2956,2955,1,0,0,0,2956,2957,1,0,0,0,2957,2959,1,0,0,0,
	2958,2952,1,0,0,0,2958,2954,1,0,0,0,2959,393,1,0,0,0,2960,2963,3,396,198,
	0,2961,2963,3,398,199,0,2962,2960,1,0,0,0,2962,2961,1,0,0,0,2963,395,1,
	0,0,0,2964,2965,5,268,0,0,2965,2966,3,1334,667,0,2966,2967,3,834,417,0,
	2967,397,1,0,0,0,2968,2970,5,40,0,0,2969,2971,3,1334,667,0,2970,2969,1,
	0,0,0,2970,2971,1,0,0,0,2971,2972,1,0,0,0,2972,2974,3,400,200,0,2973,2975,
	3,1334,667,0,2974,2973,1,0,0,0,2974,2975,1,0,0,0,2975,2976,1,0,0,0,2976,
	2977,5,41,0,0,2977,399,1,0,0,0,2978,2989,3,402,201,0,2979,2981,3,1334,667,
	0,2980,2979,1,0,0,0,2980,2981,1,0,0,0,2981,2982,1,0,0,0,2982,2984,5,34,
	0,0,2983,2985,3,1334,667,0,2984,2983,1,0,0,0,2984,2985,1,0,0,0,2985,2986,
	1,0,0,0,2986,2988,3,402,201,0,2987,2980,1,0,0,0,2988,2991,1,0,0,0,2989,
	2987,1,0,0,0,2989,2990,1,0,0,0,2990,401,1,0,0,0,2991,2989,1,0,0,0,2992,
	2994,3,1286,643,0,2993,2995,3,1334,667,0,2994,2993,1,0,0,0,2994,2995,1,
	0,0,0,2995,2996,1,0,0,0,2996,2998,5,32,0,0,2997,2999,3,1334,667,0,2998,
	2997,1,0,0,0,2998,2999,1,0,0,0,2999,3000,1,0,0,0,3000,3001,3,908,454,0,
	3001,403,1,0,0,0,3002,3005,3,406,203,0,3003,3005,3,422,211,0,3004,3002,
	1,0,0,0,3004,3003,1,0,0,0,3005,405,1,0,0,0,3006,3014,3,408,204,0,3007,3014,
	3,410,205,0,3008,3014,3,412,206,0,3009,3014,3,414,207,0,3010,3014,3,416,
	208,0,3011,3014,3,418,209,0,3012,3014,3,420,210,0,3013,3006,1,0,0,0,3013,
	3007,1,0,0,0,3013,3008,1,0,0,0,3013,3009,1,0,0,0,3013,3010,1,0,0,0,3013,
	3011,1,0,0,0,3013,3012,1,0,0,0,3014,407,1,0,0,0,3015,3017,5,3,0,0,3016,
	3018,3,1334,667,0,3017,3016,1,0,0,0,3017,3018,1,0,0,0,3018,3019,1,0,0,0,
	3019,3021,3,386,193,0,3020,3022,3,1334,667,0,3021,3020,1,0,0,0,3021,3022,
	1,0,0,0,3022,3023,1,0,0,0,3023,3024,5,11,0,0,3024,409,1,0,0,0,3025,3027,
	5,19,0,0,3026,3028,3,1334,667,0,3027,3026,1,0,0,0,3027,3028,1,0,0,0,3028,
	3029,1,0,0,0,3029,3031,3,386,193,0,3030,3032,3,1334,667,0,3031,3030,1,0,
	0,0,3031,3032,1,0,0,0,3032,3033,1,0,0,0,3033,3034,5,12,0,0,3034,411,1,0,
	0,0,3035,3037,5,8,0,0,3036,3038,3,1334,667,0,3037,3036,1,0,0,0,3037,3038,
	1,0,0,0,3038,3039,1,0,0,0,3039,3041,3,386,193,0,3040,3042,3,1334,667,0,
	3041,3040,1,0,0,0,3041,3042,1,0,0,0,3042,3043,1,0,0,0,3043,3044,5,13,0,
	0,3044,413,1,0,0,0,3045,3047,5,4,0,0,3046,3048,3,1334,667,0,3047,3046,1,
	0,0,0,3047,3048,1,0,0,0,3048,3049,1,0,0,0,3049,3051,3,386,193,0,3050,3052,
	3,1334,667,0,3051,3050,1,0,0,0,3051,3052,1,0,0,0,3052,3053,1,0,0,0,3053,
	3054,5,12,0,0,3054,415,1,0,0,0,3055,3057,5,19,0,0,3056,3058,3,1334,667,
	0,3057,3056,1,0,0,0,3057,3058,1,0,0,0,3058,3059,1,0,0,0,3059,3061,3,386,
	193,0,3060,3062,3,1334,667,0,3061,3060,1,0,0,0,3061,3062,1,0,0,0,3062,3063,
	1,0,0,0,3063,3064,5,13,0,0,3064,417,1,0,0,0,3065,3067,5,3,0,0,3066,3068,
	3,1334,667,0,3067,3066,1,0,0,0,3067,3068,1,0,0,0,3068,3069,1,0,0,0,3069,
	3071,3,386,193,0,3070,3072,3,1334,667,0,3071,3070,1,0,0,0,3071,3072,1,0,
	0,0,3072,3073,1,0,0,0,3073,3074,5,13,0,0,3074,419,1,0,0,0,3075,3077,5,8,
	0,0,3076,3078,3,1334,667,0,3077,3076,1,0,0,0,3077,3078,1,0,0,0,3078,3079,
	1,0,0,0,3079,3081,3,386,193,0,3080,3082,3,1334,667,0,3081,3080,1,0,0,0,
	3081,3082,1,0,0,0,3082,3083,1,0,0,0,3083,3084,5,11,0,0,3084,421,1,0,0,0,
	3085,3086,7,9,0,0,3086,423,1,0,0,0,3087,3089,5,44,0,0,3088,3090,3,1334,
	667,0,3089,3088,1,0,0,0,3089,3090,1,0,0,0,3090,3094,1,0,0,0,3091,3092,3,
	426,213,0,3092,3093,3,1334,667,0,3093,3095,1,0,0,0,3094,3091,1,0,0,0,3094,
	3095,1,0,0,0,3095,3099,1,0,0,0,3096,3097,3,338,169,0,3097,3098,3,1334,667,
	0,3098,3100,1,0,0,0,3099,3096,1,0,0,0,3099,3100,1,0,0,0,3100,3101,1,0,0,
	0,3101,3105,3,366,183,0,3102,3103,3,1334,667,0,3103,3104,3,428,214,0,3104,
	3106,1,0,0,0,3105,3102,1,0,0,0,3105,3106,1,0,0,0,3106,3108,1,0,0,0,3107,
	3109,3,1334,667,0,3108,3107,1,0,0,0,3108,3109,1,0,0,0,3109,3110,1,0,0,0,
	3110,3111,5,45,0,0,3111,425,1,0,0,0,3112,3114,3,1304,652,0,3113,3115,3,
	1334,667,0,3114,3113,1,0,0,0,3114,3115,1,0,0,0,3115,3116,1,0,0,0,3116,3117,
	5,36,0,0,3117,427,1,0,0,0,3118,3119,5,268,0,0,3119,3120,3,1334,667,0,3120,
	3121,3,834,417,0,3121,429,1,0,0,0,3122,3123,3,432,216,0,3123,431,1,0,0,
	0,3124,3138,3,434,217,0,3125,3127,3,1334,667,0,3126,3125,1,0,0,0,3126,3127,
	1,0,0,0,3127,3128,1,0,0,0,3128,3130,5,34,0,0,3129,3131,3,1334,667,0,3130,
	3129,1,0,0,0,3130,3131,1,0,0,0,3131,3132,1,0,0,0,3132,3134,3,434,217,0,
	3133,3135,3,1334,667,0,3134,3133,1,0,0,0,3134,3135,1,0,0,0,3135,3137,1,
	0,0,0,3136,3126,1,0,0,0,3137,3140,1,0,0,0,3138,3136,1,0,0,0,3138,3139,1,
	0,0,0,3139,433,1,0,0,0,3140,3138,1,0,0,0,3141,3155,3,436,218,0,3142,3144,
	3,1334,667,0,3143,3142,1,0,0,0,3143,3144,1,0,0,0,3144,3145,1,0,0,0,3145,
	3147,3,438,219,0,3146,3148,3,1334,667,0,3147,3146,1,0,0,0,3147,3148,1,0,
	0,0,3148,3149,1,0,0,0,3149,3151,3,436,218,0,3150,3152,3,1334,667,0,3151,
	3150,1,0,0,0,3151,3152,1,0,0,0,3152,3154,1,0,0,0,3153,3143,1,0,0,0,3154,
	3157,1,0,0,0,3155,3153,1,0,0,0,3155,3156,1,0,0,0,3156,435,1,0,0,0,3157,
	3155,1,0,0,0,3158,3160,5,44,0,0,3159,3161,3,1334,667,0,3160,3159,1,0,0,
	0,3160,3161,1,0,0,0,3161,3163,1,0,0,0,3162,3164,3,446,223,0,3163,3162,1,
	0,0,0,3163,3164,1,0,0,0,3164,3166,1,0,0,0,3165,3167,3,1334,667,0,3166,3165,
	1,0,0,0,3166,3167,1,0,0,0,3167,3168,1,0,0,0,3168,3169,5,45,0,0,3169,437,
	1,0,0,0,3170,3174,3,440,220,0,3171,3174,3,442,221,0,3172,3174,3,444,222,
	0,3173,3170,1,0,0,0,3173,3171,1,0,0,0,3173,3172,1,0,0,0,3174,439,1,0,0,
	0,3175,3177,5,3,0,0,3176,3178,3,1334,667,0,3177,3176,1,0,0,0,3177,3178,
	1,0,0,0,3178,3179,1,0,0,0,3179,3181,3,446,223,0,3180,3182,3,1334,667,0,
	3181,3180,1,0,0,0,3181,3182,1,0,0,0,3182,3183,1,0,0,0,3183,3184,5,11,0,
	0,3184,441,1,0,0,0,3185,3187,5,8,0,0,3186,3188,3,1334,667,0,3187,3186,1,
	0,0,0,3187,3188,1,0,0,0,3188,3189,1,0,0,0,3189,3191,3,446,223,0,3190,3192,
	3,1334,667,0,3191,3190,1,0,0,0,3191,3192,1,0,0,0,3192,3193,1,0,0,0,3193,
	3194,5,13,0,0,3194,443,1,0,0,0,3195,3197,5,19,0,0,3196,3198,3,1334,667,
	0,3197,3196,1,0,0,0,3197,3198,1,0,0,0,3198,3199,1,0,0,0,3199,3201,3,446,
	223,0,3200,3202,3,1334,667,0,3201,3200,1,0,0,0,3201,3202,1,0,0,0,3202,3203,
	1,0,0,0,3203,3204,5,12,0,0,3204,445,1,0,0,0,3205,3209,3,388,194,0,3206,
	3207,3,1334,667,0,3207,3208,3,448,224,0,3208,3210,1,0,0,0,3209,3206,1,0,
	0,0,3209,3210,1,0,0,0,3210,3218,1,0,0,0,3211,3212,3,388,194,0,3212,3213,
	3,1334,667,0,3213,3215,1,0,0,0,3214,3211,1,0,0,0,3214,3215,1,0,0,0,3215,
	3216,1,0,0,0,3216,3218,3,448,224,0,3217,3205,1,0,0,0,3217,3214,1,0,0,0,
	3218,447,1,0,0,0,3219,3220,3,392,196,0,3220,3224,3,168,84,0,3221,3222,3,
	1334,667,0,3222,3223,3,398,199,0,3223,3225,1,0,0,0,3224,3221,1,0,0,0,3224,
	3225,1,0,0,0,3225,3234,1,0,0,0,3226,3227,3,392,196,0,3227,3228,3,168,84,
	0,3228,3229,3,1334,667,0,3229,3231,1,0,0,0,3230,3226,1,0,0,0,3230,3231,
	1,0,0,0,3231,3232,1,0,0,0,3232,3234,3,398,199,0,3233,3219,1,0,0,0,3233,
	3230,1,0,0,0,3234,449,1,0,0,0,3235,3246,3,452,226,0,3236,3238,3,1334,667,
	0,3237,3236,1,0,0,0,3237,3238,1,0,0,0,3238,3239,1,0,0,0,3239,3241,5,52,
	0,0,3240,3242,3,1334,667,0,3241,3240,1,0,0,0,3241,3242,1,0,0,0,3242,3243,
	1,0,0,0,3243,3245,3,452,226,0,3244,3237,1,0,0,0,3245,3248,1,0,0,0,3246,
	3244,1,0,0,0,3246,3247,1,0,0,0,3247,451,1,0,0,0,3248,3246,1,0,0,0,3249,
	3260,3,454,227,0,3250,3252,3,1334,667,0,3251,3250,1,0,0,0,3251,3252,1,0,
	0,0,3252,3253,1,0,0,0,3253,3255,5,29,0,0,3254,3256,3,1334,667,0,3255,3254,
	1,0,0,0,3255,3256,1,0,0,0,3256,3257,1,0,0,0,3257,3259,3,454,227,0,3258,
	3251,1,0,0,0,3259,3262,1,0,0,0,3260,3258,1,0,0,0,3260,3261,1,0,0,0,3261,
	453,1,0,0,0,3262,3260,1,0,0,0,3263,3266,3,458,229,0,3264,3266,3,456,228,
	0,3265,3263,1,0,0,0,3265,3264,1,0,0,0,3266,455,1,0,0,0,3267,3269,5,37,0,
	0,3268,3270,3,1334,667,0,3269,3268,1,0,0,0,3269,3270,1,0,0,0,3270,3271,
	1,0,0,0,3271,3272,3,458,229,0,3272,457,1,0,0,0,3273,3277,3,1284,642,0,3274,
	3277,3,460,230,0,3275,3277,3,462,231,0,3276,3273,1,0,0,0,3276,3274,1,0,
	0,0,3276,3275,1,0,0,0,3277,459,1,0,0,0,3278,3279,5,53,0,0,3279,461,1,0,
	0,0,3280,3282,5,44,0,0,3281,3283,3,1334,667,0,3282,3281,1,0,0,0,3282,3283,
	1,0,0,0,3283,3284,1,0,0,0,3284,3286,3,450,225,0,3285,3287,3,1334,667,0,
	3286,3285,1,0,0,0,3286,3287,1,0,0,0,3287,3288,1,0,0,0,3288,3289,5,45,0,
	0,3289,463,1,0,0,0,3290,3295,5,30,0,0,3291,3295,5,26,0,0,3292,3295,3,466,
	233,0,3293,3295,3,468,234,0,3294,3290,1,0,0,0,3294,3291,1,0,0,0,3294,3292,
	1,0,0,0,3294,3293,1,0,0,0,3295,465,1,0,0,0,3296,3298,5,40,0,0,3297,3299,
	3,1334,667,0,3298,3297,1,0,0,0,3298,3299,1,0,0,0,3299,3300,1,0,0,0,3300,
	3302,5,379,0,0,3301,3303,3,1334,667,0,3302,3301,1,0,0,0,3302,3303,1,0,0,
	0,3303,3304,1,0,0,0,3304,3305,5,41,0,0,3305,467,1,0,0,0,3306,3308,5,40,
	0,0,3307,3309,3,1334,667,0,3308,3307,1,0,0,0,3308,3309,1,0,0,0,3309,3313,
	1,0,0,0,3310,3311,3,470,235,0,3311,3312,3,1334,667,0,3312,3314,1,0,0,0,
	3313,3310,1,0,0,0,3313,3314,1,0,0,0,3314,3315,1,0,0,0,3315,3319,5,34,0,
	0,3316,3317,3,1334,667,0,3317,3318,3,472,236,0,3318,3320,1,0,0,0,3319,3316,
	1,0,0,0,3319,3320,1,0,0,0,3320,3322,1,0,0,0,3321,3323,3,1334,667,0,3322,
	3321,1,0,0,0,3322,3323,1,0,0,0,3323,3324,1,0,0,0,3324,3325,5,41,0,0,3325,
	469,1,0,0,0,3326,3327,5,379,0,0,3327,471,1,0,0,0,3328,3329,5,379,0,0,3329,
	473,1,0,0,0,3330,3338,3,476,238,0,3331,3338,3,478,239,0,3332,3338,3,480,
	240,0,3333,3338,3,482,241,0,3334,3338,3,484,242,0,3335,3338,3,486,243,0,
	3336,3338,3,488,244,0,3337,3330,1,0,0,0,3337,3331,1,0,0,0,3337,3332,1,0,
	0,0,3337,3333,1,0,0,0,3337,3334,1,0,0,0,3337,3335,1,0,0,0,3337,3336,1,0,
	0,0,3338,475,1,0,0,0,3339,3341,5,6,0,0,3340,3342,3,1334,667,0,3341,3340,
	1,0,0,0,3341,3342,1,0,0,0,3342,3343,1,0,0,0,3343,3345,3,490,245,0,3344,
	3346,3,1334,667,0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,3346,3347,1,0,0,0,
	3347,3348,5,15,0,0,3348,477,1,0,0,0,3349,3351,5,21,0,0,3350,3352,3,1334,
	667,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3353,1,0,0,0,3353,3355,3,
	490,245,0,3354,3356,3,1334,667,0,3355,3354,1,0,0,0,3355,3356,1,0,0,0,3356,
	3357,1,0,0,0,3357,3358,5,17,0,0,3358,479,1,0,0,0,3359,3361,5,9,0,0,3360,
	3362,3,1334,667,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,3363,1,0,0,0,
	3363,3365,3,490,245,0,3364,3366,3,1334,667,0,3365,3364,1,0,0,0,3365,3366,
	1,0,0,0,3366,3367,1,0,0,0,3367,3368,5,16,0,0,3368,481,1,0,0,0,3369,3371,
	5,7,0,0,3370,3372,3,1334,667,0,3371,3370,1,0,0,0,3371,3372,1,0,0,0,3372,
	3373,1,0,0,0,3373,3375,3,490,245,0,3374,3376,3,1334,667,0,3375,3374,1,0,
	0,0,3375,3376,1,0,0,0,3376,3377,1,0,0,0,3377,3378,5,17,0,0,3378,483,1,0,
	0,0,3379,3381,5,21,0,0,3380,3382,3,1334,667,0,3381,3380,1,0,0,0,3381,3382,
	1,0,0,0,3382,3383,1,0,0,0,3383,3385,3,490,245,0,3384,3386,3,1334,667,0,
	3385,3384,1,0,0,0,3385,3386,1,0,0,0,3386,3387,1,0,0,0,3387,3388,5,18,0,
	0,3388,485,1,0,0,0,3389,3391,5,6,0,0,3390,3392,3,1334,667,0,3391,3390,1,
	0,0,0,3391,3392,1,0,0,0,3392,3393,1,0,0,0,3393,3395,3,490,245,0,3394,3396,
	3,1334,667,0,3395,3394,1,0,0,0,3395,3396,1,0,0,0,3396,3397,1,0,0,0,3397,
	3398,5,16,0,0,3398,487,1,0,0,0,3399,3401,5,9,0,0,3400,3402,3,1334,667,0,
	3401,3400,1,0,0,0,3401,3402,1,0,0,0,3402,3403,1,0,0,0,3403,3405,3,490,245,
	0,3404,3406,3,1334,667,0,3405,3404,1,0,0,0,3405,3406,1,0,0,0,3406,3407,
	1,0,0,0,3407,3408,5,15,0,0,3408,489,1,0,0,0,3409,3413,3,496,248,0,3410,
	3413,3,492,246,0,3411,3413,3,494,247,0,3412,3409,1,0,0,0,3412,3410,1,0,
	0,0,3412,3411,1,0,0,0,3413,491,1,0,0,0,3414,3425,3,496,248,0,3415,3417,
	3,1334,667,0,3416,3415,1,0,0,0,3416,3417,1,0,0,0,3417,3418,1,0,0,0,3418,
	3420,5,52,0,0,3419,3421,3,1334,667,0,3420,3419,1,0,0,0,3420,3421,1,0,0,
	0,3421,3422,1,0,0,0,3422,3424,3,496,248,0,3423,3416,1,0,0,0,3424,3427,1,
	0,0,0,3425,3423,1,0,0,0,3425,3426,1,0,0,0,3426,493,1,0,0,0,3427,3425,1,
	0,0,0,3428,3439,3,496,248,0,3429,3431,3,1334,667,0,3430,3429,1,0,0,0,3430,
	3431,1,0,0,0,3431,3432,1,0,0,0,3432,3434,5,58,0,0,3433,3435,3,1334,667,
	0,3434,3433,1,0,0,0,3434,3435,1,0,0,0,3435,3436,1,0,0,0,3436,3438,3,496,
	248,0,3437,3430,1,0,0,0,3438,3441,1,0,0,0,3439,3437,1,0,0,0,3439,3440,1,
	0,0,0,3440,495,1,0,0,0,3441,3439,1,0,0,0,3442,3448,3,498,249,0,3443,3444,
	3,1334,667,0,3444,3445,3,498,249,0,3445,3447,1,0,0,0,3446,3443,1,0,0,0,
	3447,3450,1,0,0,0,3448,3446,1,0,0,0,3448,3449,1,0,0,0,3449,497,1,0,0,0,
	3450,3448,1,0,0,0,3451,3462,3,500,250,0,3452,3454,3,1334,667,0,3453,3452,
	1,0,0,0,3453,3454,1,0,0,0,3454,3455,1,0,0,0,3455,3457,5,29,0,0,3456,3458,
	3,1334,667,0,3457,3456,1,0,0,0,3457,3458,1,0,0,0,3458,3459,1,0,0,0,3459,
	3461,3,500,250,0,3460,3453,1,0,0,0,3461,3464,1,0,0,0,3462,3460,1,0,0,0,
	3462,3463,1,0,0,0,3463,499,1,0,0,0,3464,3462,1,0,0,0,3465,3469,3,506,253,
	0,3466,3469,3,502,251,0,3467,3469,3,504,252,0,3468,3465,1,0,0,0,3468,3466,
	1,0,0,0,3468,3467,1,0,0,0,3469,501,1,0,0,0,3470,3471,3,506,253,0,3471,3472,
	3,1334,667,0,3472,3473,3,464,232,0,3473,503,1,0,0,0,3474,3475,3,506,253,
	0,3475,3476,5,46,0,0,3476,505,1,0,0,0,3477,3480,3,508,254,0,3478,3480,3,
	524,262,0,3479,3477,1,0,0,0,3479,3478,1,0,0,0,3480,507,1,0,0,0,3481,3489,
	3,510,255,0,3482,3489,3,512,256,0,3483,3489,3,514,257,0,3484,3489,3,516,
	258,0,3485,3489,3,518,259,0,3486,3489,3,520,260,0,3487,3489,3,522,261,0,
	3488,3481,1,0,0,0,3488,3482,1,0,0,0,3488,3483,1,0,0,0,3488,3484,1,0,0,0,
	3488,3485,1,0,0,0,3488,3486,1,0,0,0,3488,3487,1,0,0,0,3489,509,1,0,0,0,
	3490,3492,5,38,0,0,3491,3493,3,1334,667,0,3492,3491,1,0,0,0,3492,3493,1,
	0,0,0,3493,3494,1,0,0,0,3494,3495,3,524,262,0,3495,511,1,0,0,0,3496,3498,
	5,50,0,0,3497,3499,3,1334,667,0,3498,3497,1,0,0,0,3498,3499,1,0,0,0,3499,
	3500,1,0,0,0,3500,3501,3,524,262,0,3501,513,1,0,0,0,3502,3504,3,524,262,
	0,3503,3505,3,1334,667,0,3504,3503,1,0,0,0,3504,3505,1,0,0,0,3505,3506,
	1,0,0,0,3506,3507,5,39,0,0,3507,515,1,0,0,0,3508,3510,5,2,0,0,3509,3511,
	3,1334,667,0,3510,3509,1,0,0,0,3510,3511,1,0,0,0,3511,3512,1,0,0,0,3512,
	3513,3,524,262,0,3513,517,1,0,0,0,3514,3516,5,50,0,0,3515,3517,3,1334,667,
	0,3516,3515,1,0,0,0,3516,3517,1,0,0,0,3517,3518,1,0,0,0,3518,3520,3,524,
	262,0,3519,3521,3,1334,667,0,3520,3519,1,0,0,0,3520,3521,1,0,0,0,3521,3522,
	1,0,0,0,3522,3523,5,39,0,0,3523,519,1,0,0,0,3524,3526,5,38,0,0,3525,3527,
	3,1334,667,0,3526,3525,1,0,0,0,3526,3527,1,0,0,0,3527,3528,1,0,0,0,3528,
	3530,3,524,262,0,3529,3531,3,1334,667,0,3530,3529,1,0,0,0,3530,3531,1,0,
	0,0,3531,3532,1,0,0,0,3532,3533,5,39,0,0,3533,521,1,0,0,0,3534,3536,5,27,
	0,0,3535,3537,3,1334,667,0,3536,3535,1,0,0,0,3536,3537,1,0,0,0,3537,3538,
	1,0,0,0,3538,3539,3,524,262,0,3539,523,1,0,0,0,3540,3543,3,528,264,0,3541,
	3543,3,526,263,0,3542,3540,1,0,0,0,3542,3541,1,0,0,0,3543,525,1,0,0,0,3544,
	3545,5,37,0,0,3545,3546,3,528,264,0,3546,527,1,0,0,0,3547,3559,3,1284,642,
	0,3548,3550,5,44,0,0,3549,3551,3,1334,667,0,3550,3549,1,0,0,0,3550,3551,
	1,0,0,0,3551,3552,1,0,0,0,3552,3554,3,490,245,0,3553,3555,3,1334,667,0,
	3554,3553,1,0,0,0,3554,3555,1,0,0,0,3555,3556,1,0,0,0,3556,3557,5,45,0,
	0,3557,3559,1,0,0,0,3558,3547,1,0,0,0,3558,3548,1,0,0,0,3559,529,1,0,0,
	0,3560,3561,5,268,0,0,3561,3562,3,1334,667,0,3562,3563,3,834,417,0,3563,
	531,1,0,0,0,3564,3565,5,272,0,0,3565,3566,3,1334,667,0,3566,3567,3,534,
	267,0,3567,533,1,0,0,0,3568,3577,3,536,268,0,3569,3571,3,1334,667,0,3570,
	3569,1,0,0,0,3570,3571,1,0,0,0,3571,3572,1,0,0,0,3572,3574,5,34,0,0,3573,
	3575,3,1334,667,0,3574,3573,1,0,0,0,3574,3575,1,0,0,0,3575,3576,1,0,0,0,
	3576,3578,3,536,268,0,3577,3570,1,0,0,0,3578,3579,1,0,0,0,3579,3577,1,0,
	0,0,3579,3580,1,0,0,0,3580,535,1,0,0,0,3581,3585,3,538,269,0,3582,3583,
	3,1334,667,0,3583,3584,3,540,270,0,3584,3586,1,0,0,0,3585,3582,1,0,0,0,
	3585,3586,1,0,0,0,3586,537,1,0,0,0,3587,3588,3,1288,644,0,3588,539,1,0,
	0,0,3589,3590,5,67,0,0,3590,3591,3,1310,655,0,3591,541,1,0,0,0,3592,3593,
	5,142,0,0,3593,3594,3,1334,667,0,3594,3595,5,81,0,0,3595,3596,3,1334,667,
	0,3596,3597,3,544,272,0,3597,543,1,0,0,0,3598,3607,3,546,273,0,3599,3601,
	3,1334,667,0,3600,3599,1,0,0,0,3600,3601,1,0,0,0,3601,3602,1,0,0,0,3602,
	3604,5,34,0,0,3603,3605,3,1334,667,0,3604,3603,1,0,0,0,3604,3605,1,0,0,
	0,3605,3606,1,0,0,0,3606,3608,3,546,273,0,3607,3600,1,0,0,0,3608,3609,1,
	0,0,0,3609,3607,1,0,0,0,3609,3610,1,0,0,0,3610,3613,1,0,0,0,3611,3613,3,
	548,274,0,3612,3598,1,0,0,0,3612,3611,1,0,0,0,3613,545,1,0,0,0,3614,3615,
	3,298,149,0,3615,547,1,0,0,0,3616,3618,5,44,0,0,3617,3619,3,1334,667,0,
	3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,3620,1,0,0,0,3620,3621,5,45,0,
	0,3621,549,1,0,0,0,3622,3623,5,201,0,0,3623,3624,3,1334,667,0,3624,3625,
	5,81,0,0,3625,3626,3,1334,667,0,3626,3627,3,566,283,0,3627,551,1,0,0,0,
	3628,3629,5,100,0,0,3629,3630,5,44,0,0,3630,3631,5,30,0,0,3631,3635,5,45,
	0,0,3632,3635,3,554,277,0,3633,3635,3,560,280,0,3634,3628,1,0,0,0,3634,
	3632,1,0,0,0,3634,3633,1,0,0,0,3635,553,1,0,0,0,3636,3637,3,556,278,0,3637,
	3639,5,44,0,0,3638,3640,3,1334,667,0,3639,3638,1,0,0,0,3639,3640,1,0,0,
	0,3640,3644,1,0,0,0,3641,3642,3,558,279,0,3642,3643,3,1334,667,0,3643,3645,
	1,0,0,0,3644,3641,1,0,0,0,3644,3645,1,0,0,0,3645,3646,1,0,0,0,3646,3648,
	3,908,454,0,3647,3649,3,1334,667,0,3648,3647,1,0,0,0,3648,3649,1,0,0,0,
	3649,3650,1,0,0,0,3650,3651,5,45,0,0,3651,555,1,0,0,0,3652,3653,7,10,0,
	0,3653,557,1,0,0,0,3654,3655,7,11,0,0,3655,559,1,0,0,0,3656,3657,7,12,0,
	0,3657,561,1,0,0,0,3658,3659,3,558,279,0,3659,3660,3,1334,667,0,3660,3662,
	1,0,0,0,3661,3658,1,0,0,0,3661,3662,1,0,0,0,3662,3663,1,0,0,0,3663,3664,
	3,942,471,0,3664,563,1,0,0,0,3665,3666,3,942,471,0,3666,565,1,0,0,0,3667,
	3676,3,568,284,0,3668,3670,3,1334,667,0,3669,3668,1,0,0,0,3669,3670,1,0,
	0,0,3670,3671,1,0,0,0,3671,3673,5,34,0,0,3672,3674,3,1334,667,0,3673,3672,
	1,0,0,0,3673,3674,1,0,0,0,3674,3675,1,0,0,0,3675,3677,3,568,284,0,3676,
	3669,1,0,0,0,3677,3678,1,0,0,0,3678,3676,1,0,0,0,3678,3679,1,0,0,0,3679,
	567,1,0,0,0,3680,3684,3,570,285,0,3681,3682,3,1334,667,0,3682,3683,3,572,
	286,0,3683,3685,1,0,0,0,3684,3681,1,0,0,0,3684,3685,1,0,0,0,3685,3689,1,
	0,0,0,3686,3687,3,1334,667,0,3687,3688,3,574,287,0,3688,3690,1,0,0,0,3689,
	3686,1,0,0,0,3689,3690,1,0,0,0,3690,569,1,0,0,0,3691,3692,3,924,462,0,3692,
	571,1,0,0,0,3693,3694,7,13,0,0,3694,573,1,0,0,0,3695,3696,5,193,0,0,3696,
	3697,3,1334,667,0,3697,3698,5,322,0,0,3698,3704,1,0,0,0,3699,3700,5,193,
	0,0,3700,3701,3,1334,667,0,3701,3702,5,329,0,0,3702,3704,1,0,0,0,3703,3695,
	1,0,0,0,3703,3699,1,0,0,0,3704,575,1,0,0,0,3705,3706,5,171,0,0,3706,3707,
	3,902,451,0,3707,577,1,0,0,0,3708,3709,3,580,290,0,3709,3710,3,1334,667,
	0,3710,3711,3,902,451,0,3711,579,1,0,0,0,3712,3713,7,14,0,0,3713,581,1,
	0,0,0,3714,3715,5,339,0,0,3715,3717,3,1334,667,0,3716,3714,1,0,0,0,3716,
	3717,1,0,0,0,3717,3718,1,0,0,0,3718,3719,5,323,0,0,3719,3720,3,1334,667,
	0,3720,3721,5,353,0,0,3721,3722,3,1334,667,0,3722,3723,3,584,292,0,3723,
	583,1,0,0,0,3724,3726,5,40,0,0,3725,3727,3,1334,667,0,3726,3725,1,0,0,0,
	3726,3727,1,0,0,0,3727,3728,1,0,0,0,3728,3730,3,586,293,0,3729,3731,3,1334,
	667,0,3730,3729,1,0,0,0,3730,3731,1,0,0,0,3731,3732,1,0,0,0,3732,3733,5,
	41,0,0,3733,585,1,0,0,0,3734,3735,3,588,294,0,3735,587,1,0,0,0,3736,3747,
	3,590,295,0,3737,3739,3,1334,667,0,3738,3737,1,0,0,0,3738,3739,1,0,0,0,
	3739,3740,1,0,0,0,3740,3742,5,34,0,0,3741,3743,3,1334,667,0,3742,3741,1,
	0,0,0,3742,3743,1,0,0,0,3743,3744,1,0,0,0,3744,3746,3,590,295,0,3745,3738,
	1,0,0,0,3746,3749,1,0,0,0,3747,3745,1,0,0,0,3747,3748,1,0,0,0,3748,589,
	1,0,0,0,3749,3747,1,0,0,0,3750,3753,3,592,296,0,3751,3753,3,606,303,0,3752,
	3750,1,0,0,0,3752,3751,1,0,0,0,3753,591,1,0,0,0,3754,3760,3,594,297,0,3755,
	3756,3,1342,671,0,3756,3757,3,1334,667,0,3757,3758,3,596,298,0,3758,3760,
	1,0,0,0,3759,3754,1,0,0,0,3759,3755,1,0,0,0,3760,593,1,0,0,0,3761,3763,
	5,44,0,0,3762,3764,3,1334,667,0,3763,3762,1,0,0,0,3763,3764,1,0,0,0,3764,
	3765,1,0,0,0,3765,3766,3,598,299,0,3766,3767,3,1334,667,0,3767,3769,3,600,
	300,0,3768,3770,3,1334,667,0,3769,3768,1,0,0,0,3769,3770,1,0,0,0,3770,3771,
	1,0,0,0,3771,3772,5,45,0,0,3772,595,1,0,0,0,3773,3774,5,353,0,0,3774,3776,
	3,1334,667,0,3775,3773,1,0,0,0,3775,3776,1,0,0,0,3776,3777,1,0,0,0,3777,
	3781,3,598,299,0,3778,3779,3,1334,667,0,3779,3780,3,600,300,0,3780,3782,
	1,0,0,0,3781,3778,1,0,0,0,3781,3782,1,0,0,0,3782,3785,1,0,0,0,3783,3785,
	3,600,300,0,3784,3775,1,0,0,0,3784,3783,1,0,0,0,3785,597,1,0,0,0,3786,3787,
	3,1276,638,0,3787,599,1,0,0,0,3788,3795,3,602,301,0,3789,3795,3,604,302,
	0,3790,3791,3,602,301,0,3791,3792,3,1334,667,0,3792,3793,3,604,302,0,3793,
	3795,1,0,0,0,3794,3788,1,0,0,0,3794,3789,1,0,0,0,3794,3790,1,0,0,0,3795,
	601,1,0,0,0,3796,3797,3,672,336,0,3797,603,1,0,0,0,3798,3799,3,674,337,
	0,3799,605,1,0,0,0,3800,3811,3,608,304,0,3801,3802,3,650,325,0,3802,3803,
	3,1334,667,0,3803,3805,1,0,0,0,3804,3801,1,0,0,0,3804,3805,1,0,0,0,3805,
	3806,1,0,0,0,3806,3807,3,1338,669,0,3807,3808,3,1334,667,0,3808,3809,3,
	610,305,0,3809,3811,1,0,0,0,3810,3800,1,0,0,0,3810,3804,1,0,0,0,3811,607,
	1,0,0,0,3812,3815,3,620,310,0,3813,3815,3,636,318,0,3814,3812,1,0,0,0,3814,
	3813,1,0,0,0,3815,609,1,0,0,0,3816,3817,5,353,0,0,3817,3819,3,1334,667,
	0,3818,3816,1,0,0,0,3818,3819,1,0,0,0,3819,3820,1,0,0,0,3820,3821,3,612,
	306,0,3821,3822,3,1334,667,0,3822,3823,3,614,307,0,3823,3824,3,1334,667,
	0,3824,3825,3,652,326,0,3825,3831,1,0,0,0,3826,3827,3,614,307,0,3827,3828,
	3,1334,667,0,3828,3829,3,652,326,0,3829,3831,1,0,0,0,3830,3818,1,0,0,0,
	3830,3826,1,0,0,0,3831,611,1,0,0,0,3832,3833,3,1276,638,0,3833,613,1,0,
	0,0,3834,3841,3,616,308,0,3835,3841,3,618,309,0,3836,3837,3,616,308,0,3837,
	3838,3,1334,667,0,3838,3839,3,618,309,0,3839,3841,1,0,0,0,3840,3834,1,0,
	0,0,3840,3835,1,0,0,0,3840,3836,1,0,0,0,3841,615,1,0,0,0,3842,3843,3,672,
	336,0,3843,617,1,0,0,0,3844,3845,3,674,337,0,3845,619,1,0,0,0,3846,3850,
	3,622,311,0,3847,3850,3,624,312,0,3848,3850,3,626,313,0,3849,3846,1,0,0,
	0,3849,3847,1,0,0,0,3849,3848,1,0,0,0,3850,621,1,0,0,0,3851,3852,3,646,
	323,0,3852,3853,3,628,314,0,3853,3854,3,648,324,0,3854,623,1,0,0,0,3855,
	3856,3,648,324,0,3856,3857,3,630,315,0,3857,3858,3,646,323,0,3858,625,1,
	0,0,0,3859,3860,3,646,323,0,3860,3861,3,632,316,0,3861,3862,3,648,324,0,
	3862,627,1,0,0,0,3863,3865,5,8,0,0,3864,3866,3,1334,667,0,3865,3864,1,0,
	0,0,3865,3866,1,0,0,0,3866,3867,1,0,0,0,3867,3869,3,634,317,0,3868,3870,
	3,1334,667,0,3869,3868,1,0,0,0,3869,3870,1,0,0,0,3870,3871,1,0,0,0,3871,
	3872,5,13,0,0,3872,629,1,0,0,0,3873,3875,5,3,0,0,3874,3876,3,1334,667,0,
	3875,3874,1,0,0,0,3875,3876,1,0,0,0,3876,3877,1,0,0,0,3877,3879,3,634,317,
	0,3878,3880,3,1334,667,0,3879,3878,1,0,0,0,3879,3880,1,0,0,0,3880,3881,
	1,0,0,0,3881,3882,5,11,0,0,3882,631,1,0,0,0,3883,3885,5,19,0,0,3884,3886,
	3,1334,667,0,3885,3884,1,0,0,0,3885,3886,1,0,0,0,3886,3887,1,0,0,0,3887,
	3889,3,634,317,0,3888,3890,3,1334,667,0,3889,3888,1,0,0,0,3889,3890,1,0,
	0,0,3890,3891,1,0,0,0,3891,3892,5,12,0,0,3892,633,1,0,0,0,3893,3895,3,612,
	306,0,3894,3896,3,1334,667,0,3895,3894,1,0,0,0,3895,3896,1,0,0,0,3896,3897,
	1,0,0,0,3897,3898,3,614,307,0,3898,635,1,0,0,0,3899,3903,3,638,319,0,3900,
	3903,3,640,320,0,3901,3903,3,642,321,0,3902,3899,1,0,0,0,3902,3900,1,0,
	0,0,3902,3901,1,0,0,0,3903,637,1,0,0,0,3904,3906,3,646,323,0,3905,3907,
	3,1334,667,0,3906,3905,1,0,0,0,3906,3907,1,0,0,0,3907,3908,1,0,0,0,3908,
	3910,5,10,0,0,3909,3911,3,1334,667,0,3910,3909,1,0,0,0,3910,3911,1,0,0,
	0,3911,3912,1,0,0,0,3912,3913,3,648,324,0,3913,639,1,0,0,0,3914,3916,3,
	648,324,0,3915,3917,3,1334,667,0,3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,
	3918,1,0,0,0,3918,3920,5,1,0,0,3919,3921,3,1334,667,0,3920,3919,1,0,0,0,
	3920,3921,1,0,0,0,3921,3922,1,0,0,0,3922,3923,3,646,323,0,3923,641,1,0,
	0,0,3924,3926,3,646,323,0,3925,3927,3,1334,667,0,3926,3925,1,0,0,0,3926,
	3927,1,0,0,0,3927,3928,1,0,0,0,3928,3930,5,50,0,0,3929,3931,3,1334,667,
	0,3930,3929,1,0,0,0,3930,3931,1,0,0,0,3931,3932,1,0,0,0,3932,3933,3,648,
	324,0,3933,643,1,0,0,0,3934,3937,3,646,323,0,3935,3937,3,648,324,0,3936,
	3934,1,0,0,0,3936,3935,1,0,0,0,3937,645,1,0,0,0,3938,3940,5,44,0,0,3939,
	3941,3,1334,667,0,3940,3939,1,0,0,0,3940,3941,1,0,0,0,3941,3942,1,0,0,0,
	3942,3944,3,668,334,0,3943,3945,3,1334,667,0,3944,3943,1,0,0,0,3944,3945,
	1,0,0,0,3945,3946,1,0,0,0,3946,3947,5,45,0,0,3947,3960,1,0,0,0,3948,3950,
	5,44,0,0,3949,3951,3,1334,667,0,3950,3949,1,0,0,0,3950,3951,1,0,0,0,3951,
	3953,1,0,0,0,3952,3954,3,600,300,0,3953,3952,1,0,0,0,3953,3954,1,0,0,0,
	3954,3956,1,0,0,0,3955,3957,3,1334,667,0,3956,3955,1,0,0,0,3956,3957,1,
	0,0,0,3957,3958,1,0,0,0,3958,3960,5,45,0,0,3959,3938,1,0,0,0,3959,3948,
	1,0,0,0,3960,647,1,0,0,0,3961,3963,5,44,0,0,3962,3964,3,1334,667,0,3963,
	3962,1,0,0,0,3963,3964,1,0,0,0,3964,3965,1,0,0,0,3965,3967,3,670,335,0,
	3966,3968,3,1334,667,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,
	0,0,0,3969,3970,5,45,0,0,3970,3983,1,0,0,0,3971,3973,5,44,0,0,3972,3974,
	3,1334,667,0,3973,3972,1,0,0,0,3973,3974,1,0,0,0,3974,3976,1,0,0,0,3975,
	3977,3,600,300,0,3976,3975,1,0,0,0,3976,3977,1,0,0,0,3977,3979,1,0,0,0,
	3978,3980,3,1334,667,0,3979,3978,1,0,0,0,3979,3980,1,0,0,0,3980,3981,1,
	0,0,0,3981,3983,5,45,0,0,3982,3961,1,0,0,0,3982,3971,1,0,0,0,3983,649,1,
	0,0,0,3984,3985,7,15,0,0,3985,651,1,0,0,0,3986,3987,5,314,0,0,3987,3988,
	3,654,327,0,3988,653,1,0,0,0,3989,3994,3,656,328,0,3990,3994,3,658,329,
	0,3991,3994,3,660,330,0,3992,3994,3,636,318,0,3993,3989,1,0,0,0,3993,3990,
	1,0,0,0,3993,3991,1,0,0,0,3993,3992,1,0,0,0,3994,655,1,0,0,0,3995,3997,
	5,44,0,0,3996,3998,3,1334,667,0,3997,3996,1,0,0,0,3997,3998,1,0,0,0,3998,
	3999,1,0,0,0,3999,4001,3,668,334,0,4000,4002,3,1334,667,0,4001,4000,1,0,
	0,0,4001,4002,1,0,0,0,4002,4003,1,0,0,0,4003,4005,3,662,331,0,4004,4006,
	3,1334,667,0,4005,4004,1,0,0,0,4005,4006,1,0,0,0,4006,4007,1,0,0,0,4007,
	4009,3,670,335,0,4008,4010,3,1334,667,0,4009,4008,1,0,0,0,4009,4010,1,0,
	0,0,4010,4011,1,0,0,0,4011,4012,5,45,0,0,4012,657,1,0,0,0,4013,4015,5,44,
	0,0,4014,4016,3,1334,667,0,4015,4014,1,0,0,0,4015,4016,1,0,0,0,4016,4017,
	1,0,0,0,4017,4019,3,670,335,0,4018,4020,3,1334,667,0,4019,4018,1,0,0,0,
	4019,4020,1,0,0,0,4020,4021,1,0,0,0,4021,4023,3,664,332,0,4022,4024,3,1334,
	667,0,4023,4022,1,0,0,0,4023,4024,1,0,0,0,4024,4025,1,0,0,0,4025,4027,3,
	668,334,0,4026,4028,3,1334,667,0,4027,4026,1,0,0,0,4027,4028,1,0,0,0,4028,
	4029,1,0,0,0,4029,4030,5,45,0,0,4030,659,1,0,0,0,4031,4033,5,44,0,0,4032,
	4034,3,1334,667,0,4033,4032,1,0,0,0,4033,4034,1,0,0,0,4034,4035,1,0,0,0,
	4035,4037,3,668,334,0,4036,4038,3,1334,667,0,4037,4036,1,0,0,0,4037,4038,
	1,0,0,0,4038,4039,1,0,0,0,4039,4041,3,666,333,0,4040,4042,3,1334,667,0,
	4041,4040,1,0,0,0,4041,4042,1,0,0,0,4042,4043,1,0,0,0,4043,4045,3,670,335,
	0,4044,4046,3,1334,667,0,4045,4044,1,0,0,0,4045,4046,1,0,0,0,4046,4047,
	1,0,0,0,4047,4048,5,45,0,0,4048,661,1,0,0,0,4049,4050,7,16,0,0,4050,663,
	1,0,0,0,4051,4052,5,1,0,0,4052,665,1,0,0,0,4053,4054,7,17,0,0,4054,667,
	1,0,0,0,4055,4056,3,1276,638,0,4056,669,1,0,0,0,4057,4058,3,1276,638,0,
	4058,671,1,0,0,0,4059,4060,5,326,0,0,4060,4061,3,1334,667,0,4061,4062,3,
	1284,642,0,4062,4077,1,0,0,0,4063,4064,5,328,0,0,4064,4065,3,1334,667,0,
	4065,4066,3,168,84,0,4066,4077,1,0,0,0,4067,4068,5,167,0,0,4068,4069,3,
	1334,667,0,4069,4070,3,168,84,0,4070,4077,1,0,0,0,4071,4073,5,32,0,0,4072,
	4074,3,1334,667,0,4073,4072,1,0,0,0,4073,4074,1,0,0,0,4074,4075,1,0,0,0,
	4075,4077,3,168,84,0,4076,4059,1,0,0,0,4076,4063,1,0,0,0,4076,4067,1,0,
	0,0,4076,4071,1,0,0,0,4077,673,1,0,0,0,4078,4080,5,40,0,0,4079,4081,3,1334,
	667,0,4080,4079,1,0,0,0,4080,4081,1,0,0,0,4081,4083,1,0,0,0,4082,4084,3,
	676,338,0,4083,4082,1,0,0,0,4083,4084,1,0,0,0,4084,4086,1,0,0,0,4085,4087,
	3,1334,667,0,4086,4085,1,0,0,0,4086,4087,1,0,0,0,4087,4088,1,0,0,0,4088,
	4089,5,41,0,0,4089,675,1,0,0,0,4090,4101,3,678,339,0,4091,4093,3,1334,667,
	0,4092,4091,1,0,0,0,4092,4093,1,0,0,0,4093,4094,1,0,0,0,4094,4096,5,34,
	0,0,4095,4097,3,1334,667,0,4096,4095,1,0,0,0,4096,4097,1,0,0,0,4097,4098,
	1,0,0,0,4098,4100,3,678,339,0,4099,4092,1,0,0,0,4100,4103,1,0,0,0,4101,
	4099,1,0,0,0,4101,4102,1,0,0,0,4102,677,1,0,0,0,4103,4101,1,0,0,0,4104,
	4108,3,1286,643,0,4105,4106,3,1334,667,0,4106,4107,3,686,343,0,4107,4109,
	1,0,0,0,4108,4105,1,0,0,0,4108,4109,1,0,0,0,4109,4110,1,0,0,0,4110,4111,
	3,1334,667,0,4111,4112,3,680,340,0,4112,679,1,0,0,0,4113,4114,3,684,342,
	0,4114,681,1,0,0,0,4115,4116,5,312,0,0,4116,4118,3,1334,667,0,4117,4115,
	1,0,0,0,4117,4118,1,0,0,0,4118,4119,1,0,0,0,4119,4120,5,347,0,0,4120,4121,
	3,1334,667,0,4121,4122,3,772,386,0,4122,683,1,0,0,0,4123,4127,3,688,344,
	0,4124,4127,3,762,381,0,4125,4127,3,776,388,0,4126,4123,1,0,0,0,4126,4124,
	1,0,0,0,4126,4125,1,0,0,0,4127,685,1,0,0,0,4128,4132,5,33,0,0,4129,4130,
	5,248,0,0,4130,4132,3,1334,667,0,4131,4128,1,0,0,0,4131,4129,1,0,0,0,4132,
	687,1,0,0,0,4133,4141,3,690,345,0,4134,4141,3,692,346,0,4135,4141,3,694,
	347,0,4136,4141,3,702,351,0,4137,4141,3,722,361,0,4138,4141,3,740,370,0,
	4139,4141,3,788,394,0,4140,4133,1,0,0,0,4140,4134,1,0,0,0,4140,4135,1,0,
	0,0,4140,4136,1,0,0,0,4140,4137,1,0,0,0,4140,4138,1,0,0,0,4140,4139,1,0,
	0,0,4141,689,1,0,0,0,4142,4146,7,18,0,0,4143,4144,3,1334,667,0,4144,4145,
	3,790,395,0,4145,4147,1,0,0,0,4146,4143,1,0,0,0,4146,4147,1,0,0,0,4147,
	691,1,0,0,0,4148,4159,7,19,0,0,4149,4151,5,44,0,0,4150,4152,3,1334,667,
	0,4151,4150,1,0,0,0,4151,4152,1,0,0,0,4152,4153,1,0,0,0,4153,4155,3,698,
	349,0,4154,4156,3,1334,667,0,4155,4154,1,0,0,0,4155,4156,1,0,0,0,4156,4157,
	1,0,0,0,4157,4158,5,45,0,0,4158,4160,1,0,0,0,4159,4149,1,0,0,0,4159,4160,
	1,0,0,0,4160,4164,1,0,0,0,4161,4162,3,1334,667,0,4162,4163,3,790,395,0,
	4163,4165,1,0,0,0,4164,4161,1,0,0,0,4164,4165,1,0,0,0,4165,693,1,0,0,0,
	4166,4187,5,83,0,0,4167,4169,5,44,0,0,4168,4170,3,1334,667,0,4169,4168,
	1,0,0,0,4169,4170,1,0,0,0,4170,4179,1,0,0,0,4171,4173,3,696,348,0,4172,
	4174,3,1334,667,0,4173,4172,1,0,0,0,4173,4174,1,0,0,0,4174,4175,1,0,0,0,
	4175,4177,5,34,0,0,4176,4178,3,1334,667,0,4177,4176,1,0,0,0,4177,4178,1,
	0,0,0,4178,4180,1,0,0,0,4179,4171,1,0,0,0,4179,4180,1,0,0,0,4180,4181,1,
	0,0,0,4181,4183,3,698,349,0,4182,4184,3,1334,667,0,4183,4182,1,0,0,0,4183,
	4184,1,0,0,0,4184,4185,1,0,0,0,4185,4186,5,45,0,0,4186,4188,1,0,0,0,4187,
	4167,1,0,0,0,4187,4188,1,0,0,0,4188,4192,1,0,0,0,4189,4190,3,1334,667,0,
	4190,4191,3,790,395,0,4191,4193,1,0,0,0,4192,4189,1,0,0,0,4192,4193,1,0,
	0,0,4193,4231,1,0,0,0,4194,4205,5,76,0,0,4195,4197,5,44,0,0,4196,4198,3,
	1334,667,0,4197,4196,1,0,0,0,4197,4198,1,0,0,0,4198,4199,1,0,0,0,4199,4201,
	3,700,350,0,4200,4202,3,1334,667,0,4201,4200,1,0,0,0,4201,4202,1,0,0,0,
	4202,4203,1,0,0,0,4203,4204,5,45,0,0,4204,4206,1,0,0,0,4205,4195,1,0,0,
	0,4205,4206,1,0,0,0,4206,4210,1,0,0,0,4207,4208,3,1334,667,0,4208,4209,
	3,790,395,0,4209,4211,1,0,0,0,4210,4207,1,0,0,0,4210,4211,1,0,0,0,4211,
	4231,1,0,0,0,4212,4223,5,264,0,0,4213,4215,5,44,0,0,4214,4216,3,1334,667,
	0,4215,4214,1,0,0,0,4215,4216,1,0,0,0,4216,4217,1,0,0,0,4217,4219,3,698,
	349,0,4218,4220,3,1334,667,0,4219,4218,1,0,0,0,4219,4220,1,0,0,0,4220,4221,
	1,0,0,0,4221,4222,5,45,0,0,4222,4224,1,0,0,0,4223,4213,1,0,0,0,4223,4224,
	1,0,0,0,4224,4228,1,0,0,0,4225,4226,3,1334,667,0,4226,4227,3,790,395,0,
	4227,4229,1,0,0,0,4228,4225,1,0,0,0,4228,4229,1,0,0,0,4229,4231,1,0,0,0,
	4230,4166,1,0,0,0,4230,4194,1,0,0,0,4230,4212,1,0,0,0,4231,695,1,0,0,0,
	4232,4233,5,379,0,0,4233,697,1,0,0,0,4234,4235,5,379,0,0,4235,699,1,0,0,
	0,4236,4237,5,379,0,0,4237,701,1,0,0,0,4238,4241,3,704,352,0,4239,4241,
	3,720,360,0,4240,4238,1,0,0,0,4240,4239,1,0,0,0,4241,703,1,0,0,0,4242,4245,
	3,706,353,0,4243,4245,3,714,357,0,4244,4242,1,0,0,0,4244,4243,1,0,0,0,4245,
	705,1,0,0,0,4246,4249,3,708,354,0,4247,4249,3,710,355,0,4248,4246,1,0,0,
	0,4248,4247,1,0,0,0,4249,707,1,0,0,0,4250,4254,5,153,0,0,4251,4252,3,1334,
	667,0,4252,4253,3,790,395,0,4253,4255,1,0,0,0,4254,4251,1,0,0,0,4254,4255,
	1,0,0,0,4255,4322,1,0,0,0,4256,4260,5,155,0,0,4257,4258,3,1334,667,0,4258,
	4259,3,790,395,0,4259,4261,1,0,0,0,4260,4257,1,0,0,0,4260,4261,1,0,0,0,
	4261,4322,1,0,0,0,4262,4266,5,157,0,0,4263,4264,3,1334,667,0,4264,4265,
	3,790,395,0,4265,4267,1,0,0,0,4266,4263,1,0,0,0,4266,4267,1,0,0,0,4267,
	4322,1,0,0,0,4268,4272,5,159,0,0,4269,4270,3,1334,667,0,4270,4271,3,790,
	395,0,4271,4273,1,0,0,0,4272,4269,1,0,0,0,4272,4273,1,0,0,0,4273,4322,1,
	0,0,0,4274,4278,5,161,0,0,4275,4276,3,1334,667,0,4276,4277,3,790,395,0,
	4277,4279,1,0,0,0,4278,4275,1,0,0,0,4278,4279,1,0,0,0,4279,4322,1,0,0,0,
	4280,4284,5,163,0,0,4281,4282,3,1334,667,0,4282,4283,3,790,395,0,4283,4285,
	1,0,0,0,4284,4281,1,0,0,0,4284,4285,1,0,0,0,4285,4322,1,0,0,0,4286,4290,
	5,233,0,0,4287,4288,3,1334,667,0,4288,4289,3,790,395,0,4289,4291,1,0,0,
	0,4290,4287,1,0,0,0,4290,4291,1,0,0,0,4291,4322,1,0,0,0,4292,4303,5,151,
	0,0,4293,4295,5,44,0,0,4294,4296,3,1334,667,0,4295,4294,1,0,0,0,4295,4296,
	1,0,0,0,4296,4297,1,0,0,0,4297,4299,3,716,358,0,4298,4300,3,1334,667,0,
	4299,4298,1,0,0,0,4299,4300,1,0,0,0,4300,4301,1,0,0,0,4301,4302,5,45,0,
	0,4302,4304,1,0,0,0,4303,4293,1,0,0,0,4303,4304,1,0,0,0,4304,4308,1,0,0,
	0,4305,4306,3,1334,667,0,4306,4307,3,790,395,0,4307,4309,1,0,0,0,4308,4305,
	1,0,0,0,4308,4309,1,0,0,0,4309,4322,1,0,0,0,4310,4314,5,75,0,0,4311,4312,
	3,1334,667,0,4312,4313,3,790,395,0,4313,4315,1,0,0,0,4314,4311,1,0,0,0,
	4314,4315,1,0,0,0,4315,4322,1,0,0,0,4316,4317,5,228,0,0,4317,4319,3,1334,
	667,0,4318,4316,1,0,0,0,4318,4319,1,0,0,0,4319,4320,1,0,0,0,4320,4322,3,
	712,356,0,4321,4250,1,0,0,0,4321,4256,1,0,0,0,4321,4262,1,0,0,0,4321,4268,
	1,0,0,0,4321,4274,1,0,0,0,4321,4280,1,0,0,0,4321,4286,1,0,0,0,4321,4292,
	1,0,0,0,4321,4310,1,0,0,0,4321,4318,1,0,0,0,4322,709,1,0,0,0,4323,4327,
	5,251,0,0,4324,4325,3,1334,667,0,4325,4326,3,790,395,0,4326,4328,1,0,0,
	0,4327,4324,1,0,0,0,4327,4328,1,0,0,0,4328,4394,1,0,0,0,4329,4333,5,252,
	0,0,4330,4331,3,1334,667,0,4331,4332,3,790,395,0,4332,4334,1,0,0,0,4333,
	4330,1,0,0,0,4333,4334,1,0,0,0,4334,4394,1,0,0,0,4335,4339,5,253,0,0,4336,
	4337,3,1334,667,0,4337,4338,3,790,395,0,4338,4340,1,0,0,0,4339,4336,1,0,
	0,0,4339,4340,1,0,0,0,4340,4394,1,0,0,0,4341,4345,5,254,0,0,4342,4343,3,
	1334,667,0,4343,4344,3,790,395,0,4344,4346,1,0,0,0,4345,4342,1,0,0,0,4345,
	4346,1,0,0,0,4346,4394,1,0,0,0,4347,4351,5,255,0,0,4348,4349,3,1334,667,
	0,4349,4350,3,790,395,0,4350,4352,1,0,0,0,4351,4348,1,0,0,0,4351,4352,1,
	0,0,0,4352,4394,1,0,0,0,4353,4357,5,256,0,0,4354,4355,3,1334,667,0,4355,
	4356,3,790,395,0,4356,4358,1,0,0,0,4357,4354,1,0,0,0,4357,4358,1,0,0,0,
	4358,4394,1,0,0,0,4359,4363,5,262,0,0,4360,4361,3,1334,667,0,4361,4362,
	3,790,395,0,4362,4364,1,0,0,0,4363,4360,1,0,0,0,4363,4364,1,0,0,0,4364,
	4394,1,0,0,0,4365,4376,5,250,0,0,4366,4368,5,44,0,0,4367,4369,3,1334,667,
	0,4368,4367,1,0,0,0,4368,4369,1,0,0,0,4369,4370,1,0,0,0,4370,4372,3,716,
	358,0,4371,4373,3,1334,667,0,4372,4371,1,0,0,0,4372,4373,1,0,0,0,4373,4374,
	1,0,0,0,4374,4375,5,45,0,0,4375,4377,1,0,0,0,4376,4366,1,0,0,0,4376,4377,
	1,0,0,0,4377,4381,1,0,0,0,4378,4379,3,1334,667,0,4379,4380,3,790,395,0,
	4380,4382,1,0,0,0,4381,4378,1,0,0,0,4381,4382,1,0,0,0,4382,4394,1,0,0,0,
	4383,4387,5,249,0,0,4384,4385,3,1334,667,0,4385,4386,3,790,395,0,4386,4388,
	1,0,0,0,4387,4384,1,0,0,0,4387,4388,1,0,0,0,4388,4394,1,0,0,0,4389,4390,
	5,259,0,0,4390,4391,3,1334,667,0,4391,4392,3,712,356,0,4392,4394,1,0,0,
	0,4393,4323,1,0,0,0,4393,4329,1,0,0,0,4393,4335,1,0,0,0,4393,4341,1,0,0,
	0,4393,4347,1,0,0,0,4393,4353,1,0,0,0,4393,4359,1,0,0,0,4393,4365,1,0,0,
	0,4393,4383,1,0,0,0,4393,4389,1,0,0,0,4394,711,1,0,0,0,4395,4399,5,154,
	0,0,4396,4397,3,1334,667,0,4397,4398,3,790,395,0,4398,4400,1,0,0,0,4399,
	4396,1,0,0,0,4399,4400,1,0,0,0,4400,4467,1,0,0,0,4401,4405,5,156,0,0,4402,
	4403,3,1334,667,0,4403,4404,3,790,395,0,4404,4406,1,0,0,0,4405,4402,1,0,
	0,0,4405,4406,1,0,0,0,4406,4467,1,0,0,0,4407,4411,5,158,0,0,4408,4409,3,
	1334,667,0,4409,4410,3,790,395,0,4410,4412,1,0,0,0,4411,4408,1,0,0,0,4411,
	4412,1,0,0,0,4412,4467,1,0,0,0,4413,4417,5,160,0,0,4414,4415,3,1334,667,
	0,4415,4416,3,790,395,0,4416,4418,1,0,0,0,4417,4414,1,0,0,0,4417,4418,1,
	0,0,0,4418,4467,1,0,0,0,4419,4423,5,162,0,0,4420,4421,3,1334,667,0,4421,
	4422,3,790,395,0,4422,4424,1,0,0,0,4423,4420,1,0,0,0,4423,4424,1,0,0,0,
	4424,4467,1,0,0,0,4425,4429,5,164,0,0,4426,4427,3,1334,667,0,4427,4428,
	3,790,395,0,4428,4430,1,0,0,0,4429,4426,1,0,0,0,4429,4430,1,0,0,0,4430,
	4467,1,0,0,0,4431,4432,5,232,0,0,4432,4433,3,1334,667,0,4433,4437,5,152,
	0,0,4434,4435,3,1334,667,0,4435,4436,3,790,395,0,4436,4438,1,0,0,0,4437,
	4434,1,0,0,0,4437,4438,1,0,0,0,4438,4467,1,0,0,0,4439,4450,5,152,0,0,4440,
	4442,5,44,0,0,4441,4443,3,1334,667,0,4442,4441,1,0,0,0,4442,4443,1,0,0,
	0,4443,4444,1,0,0,0,4444,4446,3,716,358,0,4445,4447,3,1334,667,0,4446,4445,
	1,0,0,0,4446,4447,1,0,0,0,4447,4448,1,0,0,0,4448,4449,5,45,0,0,4449,4451,
	1,0,0,0,4450,4440,1,0,0,0,4450,4451,1,0,0,0,4451,4455,1,0,0,0,4452,4453,
	3,1334,667,0,4453,4454,3,790,395,0,4454,4456,1,0,0,0,4455,4452,1,0,0,0,
	4455,4456,1,0,0,0,4456,4467,1,0,0,0,4457,4458,5,74,0,0,4458,4459,3,1334,
	667,0,4459,4464,5,152,0,0,4460,4462,3,1334,667,0,4461,4460,1,0,0,0,4461,
	4462,1,0,0,0,4462,4463,1,0,0,0,4463,4465,3,790,395,0,4464,4461,1,0,0,0,
	4464,4465,1,0,0,0,4465,4467,1,0,0,0,4466,4395,1,0,0,0,4466,4401,1,0,0,0,
	4466,4407,1,0,0,0,4466,4413,1,0,0,0,4466,4419,1,0,0,0,4466,4425,1,0,0,0,
	4466,4431,1,0,0,0,4466,4439,1,0,0,0,4466,4457,1,0,0,0,4467,713,1,0,0,0,
	4468,4489,7,20,0,0,4469,4471,5,44,0,0,4470,4472,3,1334,667,0,4471,4470,
	1,0,0,0,4471,4472,1,0,0,0,4472,4473,1,0,0,0,4473,4482,3,716,358,0,4474,
	4476,3,1334,667,0,4475,4474,1,0,0,0,4475,4476,1,0,0,0,4476,4477,1,0,0,0,
	4477,4479,5,34,0,0,4478,4480,3,1334,667,0,4479,4478,1,0,0,0,4479,4480,1,
	0,0,0,4480,4481,1,0,0,0,4481,4483,3,718,359,0,4482,4475,1,0,0,0,4482,4483,
	1,0,0,0,4483,4485,1,0,0,0,4484,4486,3,1334,667,0,4485,4484,1,0,0,0,4485,
	4486,1,0,0,0,4486,4487,1,0,0,0,4487,4488,5,45,0,0,4488,4490,1,0,0,0,4489,
	4469,1,0,0,0,4489,4490,1,0,0,0,4490,4494,1,0,0,0,4491,4492,3,1334,667,0,
	4492,4493,3,790,395,0,4493,4495,1,0,0,0,4494,4491,1,0,0,0,4494,4495,1,0,
	0,0,4495,715,1,0,0,0,4496,4497,5,380,0,0,4497,717,1,0,0,0,4498,4499,5,380,
	0,0,4499,719,1,0,0,0,4500,4504,5,134,0,0,4501,4502,3,1334,667,0,4502,4503,
	3,790,395,0,4503,4505,1,0,0,0,4504,4501,1,0,0,0,4504,4505,1,0,0,0,4505,
	4574,1,0,0,0,4506,4510,5,135,0,0,4507,4508,3,1334,667,0,4508,4509,3,790,
	395,0,4509,4511,1,0,0,0,4510,4507,1,0,0,0,4510,4511,1,0,0,0,4511,4574,1,
	0,0,0,4512,4516,5,136,0,0,4513,4514,3,1334,667,0,4514,4515,3,790,395,0,
	4515,4517,1,0,0,0,4516,4513,1,0,0,0,4516,4517,1,0,0,0,4517,4574,1,0,0,0,
	4518,4522,5,137,0,0,4519,4520,3,1334,667,0,4520,4521,3,790,395,0,4521,4523,
	1,0,0,0,4522,4519,1,0,0,0,4522,4523,1,0,0,0,4523,4574,1,0,0,0,4524,4528,
	5,138,0,0,4525,4526,3,1334,667,0,4526,4527,3,790,395,0,4527,4529,1,0,0,
	0,4528,4525,1,0,0,0,4528,4529,1,0,0,0,4529,4574,1,0,0,0,4530,4551,5,133,
	0,0,4531,4533,5,44,0,0,4532,4534,3,1334,667,0,4533,4532,1,0,0,0,4533,4534,
	1,0,0,0,4534,4535,1,0,0,0,4535,4544,3,716,358,0,4536,4538,3,1334,667,0,
	4537,4536,1,0,0,0,4537,4538,1,0,0,0,4538,4539,1,0,0,0,4539,4541,5,34,0,
	0,4540,4542,3,1334,667,0,4541,4540,1,0,0,0,4541,4542,1,0,0,0,4542,4543,
	1,0,0,0,4543,4545,3,718,359,0,4544,4537,1,0,0,0,4544,4545,1,0,0,0,4545,
	4547,1,0,0,0,4546,4548,3,1334,667,0,4547,4546,1,0,0,0,4547,4548,1,0,0,0,
	4548,4549,1,0,0,0,4549,4550,5,45,0,0,4550,4552,1,0,0,0,4551,4531,1,0,0,
	0,4551,4552,1,0,0,0,4552,4556,1,0,0,0,4553,4554,3,1334,667,0,4554,4555,
	3,790,395,0,4555,4557,1,0,0,0,4556,4553,1,0,0,0,4556,4557,1,0,0,0,4557,
	4574,1,0,0,0,4558,4562,5,214,0,0,4559,4560,3,1334,667,0,4560,4561,3,790,
	395,0,4561,4563,1,0,0,0,4562,4559,1,0,0,0,4562,4563,1,0,0,0,4563,4574,1,
	0,0,0,4564,4568,5,120,0,0,4565,4566,3,1334,667,0,4566,4567,5,211,0,0,4567,
	4569,1,0,0,0,4568,4565,1,0,0,0,4568,4569,1,0,0,0,4569,4570,1,0,0,0,4570,
	4571,3,1334,667,0,4571,4572,3,790,395,0,4572,4574,1,0,0,0,4573,4500,1,0,
	0,0,4573,4506,1,0,0,0,4573,4512,1,0,0,0,4573,4518,1,0,0,0,4573,4524,1,0,
	0,0,4573,4530,1,0,0,0,4573,4558,1,0,0,0,4573,4564,1,0,0,0,4574,721,1,0,
	0,0,4575,4578,3,724,362,0,4576,4578,3,726,363,0,4577,4575,1,0,0,0,4577,
	4576,1,0,0,0,4578,723,1,0,0,0,4579,4585,3,728,364,0,4580,4585,3,730,365,
	0,4581,4585,3,732,366,0,4582,4585,3,734,367,0,4583,4585,3,736,368,0,4584,
	4579,1,0,0,0,4584,4580,1,0,0,0,4584,4581,1,0,0,0,4584,4582,1,0,0,0,4584,
	4583,1,0,0,0,4585,725,1,0,0,0,4586,4587,3,738,369,0,4587,727,1,0,0,0,4588,
	4589,5,273,0,0,4589,4590,3,1334,667,0,4590,4594,5,110,0,0,4591,4592,3,1334,
	667,0,4592,4593,3,790,395,0,4593,4595,1,0,0,0,4594,4591,1,0,0,0,4594,4595,
	1,0,0,0,4595,4607,1,0,0,0,4596,4597,5,244,0,0,4597,4598,3,1334,667,0,4598,
	4599,5,269,0,0,4599,4600,3,1334,667,0,4600,4604,5,349,0,0,4601,4602,3,1334,
	667,0,4602,4603,3,790,395,0,4603,4605,1,0,0,0,4604,4601,1,0,0,0,4604,4605,
	1,0,0,0,4605,4607,1,0,0,0,4606,4588,1,0,0,0,4606,4596,1,0,0,0,4607,729,
	1,0,0,0,4608,4609,5,174,0,0,4609,4610,3,1334,667,0,4610,4614,5,110,0,0,
	4611,4612,3,1334,667,0,4612,4613,3,790,395,0,4613,4615,1,0,0,0,4614,4611,
	1,0,0,0,4614,4615,1,0,0,0,4615,4630,1,0,0,0,4616,4618,5,244,0,0,4617,4619,
	3,1334,667,0,4618,4617,1,0,0,0,4618,4619,1,0,0,0,4619,4620,1,0,0,0,4620,
	4621,5,357,0,0,4621,4622,3,1334,667,0,4622,4623,5,349,0,0,4623,4627,1,0,
	0,0,4624,4625,3,1334,667,0,4625,4626,3,790,395,0,4626,4628,1,0,0,0,4627,
	4624,1,0,0,0,4627,4628,1,0,0,0,4628,4630,1,0,0,0,4629,4608,1,0,0,0,4629,
	4616,1,0,0,0,4630,731,1,0,0,0,4631,4635,5,109,0,0,4632,4633,3,1334,667,
	0,4633,4634,3,790,395,0,4634,4636,1,0,0,0,4635,4632,1,0,0,0,4635,4636,1,
	0,0,0,4636,733,1,0,0,0,4637,4638,5,273,0,0,4638,4639,3,1334,667,0,4639,
	4643,5,243,0,0,4640,4641,3,1334,667,0,4641,4642,3,790,395,0,4642,4644,1,
	0,0,0,4643,4640,1,0,0,0,4643,4644,1,0,0,0,4644,4656,1,0,0,0,4645,4646,5,
	243,0,0,4646,4647,3,1334,667,0,4647,4648,5,269,0,0,4648,4649,3,1334,667,
	0,4649,4653,5,349,0,0,4650,4651,3,1334,667,0,4651,4652,3,790,395,0,4652,
	4654,1,0,0,0,4653,4650,1,0,0,0,4653,4654,1,0,0,0,4654,4656,1,0,0,0,4655,
	4637,1,0,0,0,4655,4645,1,0,0,0,4656,735,1,0,0,0,4657,4658,5,174,0,0,4658,
	4659,3,1334,667,0,4659,4663,5,243,0,0,4660,4661,3,1334,667,0,4661,4662,
	3,790,395,0,4662,4664,1,0,0,0,4663,4660,1,0,0,0,4663,4664,1,0,0,0,4664,
	4676,1,0,0,0,4665,4666,5,243,0,0,4666,4667,3,1334,667,0,4667,4668,5,357,
	0,0,4668,4669,3,1334,667,0,4669,4673,5,349,0,0,4670,4671,3,1334,667,0,4671,
	4672,3,790,395,0,4672,4674,1,0,0,0,4673,4670,1,0,0,0,4673,4674,1,0,0,0,
	4674,4676,1,0,0,0,4675,4657,1,0,0,0,4675,4665,1,0,0,0,4676,737,1,0,0,0,
	4677,4681,5,122,0,0,4678,4679,3,1334,667,0,4679,4680,3,790,395,0,4680,4682,
	1,0,0,0,4681,4678,1,0,0,0,4681,4682,1,0,0,0,4682,739,1,0,0,0,4683,4688,
	3,742,371,0,4684,4688,3,748,374,0,4685,4688,3,750,375,0,4686,4688,3,756,
	378,0,4687,4683,1,0,0,0,4687,4684,1,0,0,0,4687,4685,1,0,0,0,4687,4686,1,
	0,0,0,4688,741,1,0,0,0,4689,4692,3,744,372,0,4690,4692,3,746,373,0,4691,
	4689,1,0,0,0,4691,4690,1,0,0,0,4692,743,1,0,0,0,4693,4697,5,198,0,0,4694,
	4695,3,1334,667,0,4695,4696,5,339,0,0,4696,4698,1,0,0,0,4697,4694,1,0,0,
	0,4697,4698,1,0,0,0,4698,4699,1,0,0,0,4699,4700,3,1334,667,0,4700,4704,
	5,323,0,0,4701,4702,3,1334,667,0,4702,4703,3,790,395,0,4703,4705,1,0,0,
	0,4704,4701,1,0,0,0,4704,4705,1,0,0,0,4705,745,1,0,0,0,4706,4710,3,582,
	291,0,4707,4708,3,1334,667,0,4708,4709,3,790,395,0,4709,4711,1,0,0,0,4710,
	4707,1,0,0,0,4710,4711,1,0,0,0,4711,747,1,0,0,0,4712,4716,3,682,341,0,4713,
	4714,3,1334,667,0,4714,4715,3,790,395,0,4715,4717,1,0,0,0,4716,4713,1,0,
	0,0,4716,4717,1,0,0,0,4717,749,1,0,0,0,4718,4721,3,752,376,0,4719,4721,
	3,754,377,0,4720,4718,1,0,0,0,4720,4719,1,0,0,0,4721,751,1,0,0,0,4722,4723,
	5,198,0,0,4723,4725,3,1334,667,0,4724,4722,1,0,0,0,4724,4725,1,0,0,0,4725,
	4726,1,0,0,0,4726,4730,3,1342,671,0,4727,4728,3,1334,667,0,4728,4729,3,
	790,395,0,4729,4731,1,0,0,0,4730,4727,1,0,0,0,4730,4731,1,0,0,0,4731,753,
	1,0,0,0,4732,4736,3,606,303,0,4733,4734,3,1334,667,0,4734,4735,3,790,395,
	0,4735,4737,1,0,0,0,4736,4733,1,0,0,0,4736,4737,1,0,0,0,4737,755,1,0,0,
	0,4738,4741,3,758,379,0,4739,4741,3,760,380,0,4740,4738,1,0,0,0,4740,4739,
	1,0,0,0,4741,757,1,0,0,0,4742,4743,5,198,0,0,4743,4745,3,1334,667,0,4744,
	4742,1,0,0,0,4744,4745,1,0,0,0,4745,4746,1,0,0,0,4746,4750,3,1338,669,0,
	4747,4748,3,1334,667,0,4748,4749,3,790,395,0,4749,4751,1,0,0,0,4750,4747,
	1,0,0,0,4750,4751,1,0,0,0,4751,759,1,0,0,0,4752,4756,3,606,303,0,4753,4754,
	3,1334,667,0,4754,4755,3,790,395,0,4755,4757,1,0,0,0,4756,4753,1,0,0,0,
	4756,4757,1,0,0,0,4757,761,1,0,0,0,4758,4761,3,764,382,0,4759,4761,3,770,
	385,0,4760,4758,1,0,0,0,4760,4759,1,0,0,0,4761,763,1,0,0,0,4762,4763,3,
	766,383,0,4763,4764,5,38,0,0,4764,4765,3,688,344,0,4765,4776,5,39,0,0,4766,
	4768,5,42,0,0,4767,4769,3,1334,667,0,4768,4767,1,0,0,0,4768,4769,1,0,0,
	0,4769,4770,1,0,0,0,4770,4772,3,698,349,0,4771,4773,3,1334,667,0,4772,4771,
	1,0,0,0,4772,4773,1,0,0,0,4773,4774,1,0,0,0,4774,4775,5,43,0,0,4775,4777,
	1,0,0,0,4776,4766,1,0,0,0,4776,4777,1,0,0,0,4777,4781,1,0,0,0,4778,4779,
	3,1334,667,0,4779,4780,3,790,395,0,4780,4782,1,0,0,0,4781,4778,1,0,0,0,
	4781,4782,1,0,0,0,4782,4804,1,0,0,0,4783,4784,3,688,344,0,4784,4785,3,1334,
	667,0,4785,4796,3,766,383,0,4786,4788,5,42,0,0,4787,4789,3,1334,667,0,4788,
	4787,1,0,0,0,4788,4789,1,0,0,0,4789,4790,1,0,0,0,4790,4792,3,698,349,0,
	4791,4793,3,1334,667,0,4792,4791,1,0,0,0,4792,4793,1,0,0,0,4793,4794,1,
	0,0,0,4794,4795,5,43,0,0,4795,4797,1,0,0,0,4796,4786,1,0,0,0,4796,4797,
	1,0,0,0,4797,4801,1,0,0,0,4798,4799,3,1334,667,0,4799,4800,3,790,395,0,
	4800,4802,1,0,0,0,4801,4798,1,0,0,0,4801,4802,1,0,0,0,4802,4804,1,0,0,0,
	4803,4762,1,0,0,0,4803,4783,1,0,0,0,4804,765,1,0,0,0,4805,4806,5,142,0,
	0,4806,4808,3,1334,667,0,4807,4805,1,0,0,0,4807,4808,1,0,0,0,4808,4809,
	1,0,0,0,4809,4810,3,768,384,0,4810,767,1,0,0,0,4811,4812,7,21,0,0,4812,
	769,1,0,0,0,4813,4814,5,198,0,0,4814,4816,3,1334,667,0,4815,4813,1,0,0,
	0,4815,4816,1,0,0,0,4816,4817,1,0,0,0,4817,4821,5,215,0,0,4818,4819,3,1334,
	667,0,4819,4820,3,790,395,0,4820,4822,1,0,0,0,4821,4818,1,0,0,0,4821,4822,
	1,0,0,0,4822,4834,1,0,0,0,4823,4824,5,215,0,0,4824,4826,3,1334,667,0,4825,
	4823,1,0,0,0,4825,4826,1,0,0,0,4826,4827,1,0,0,0,4827,4831,3,772,386,0,
	4828,4829,3,1334,667,0,4829,4830,3,790,395,0,4830,4832,1,0,0,0,4831,4828,
	1,0,0,0,4831,4832,1,0,0,0,4832,4834,1,0,0,0,4833,4815,1,0,0,0,4833,4825,
	1,0,0,0,4834,771,1,0,0,0,4835,4837,5,40,0,0,4836,4838,3,1334,667,0,4837,
	4836,1,0,0,0,4837,4838,1,0,0,0,4838,4840,1,0,0,0,4839,4841,3,774,387,0,
	4840,4839,1,0,0,0,4840,4841,1,0,0,0,4841,4843,1,0,0,0,4842,4844,3,1334,
	667,0,4843,4842,1,0,0,0,4843,4844,1,0,0,0,4844,4845,1,0,0,0,4845,4846,5,
	41,0,0,4846,773,1,0,0,0,4847,4856,3,792,396,0,4848,4850,3,1334,667,0,4849,
	4848,1,0,0,0,4849,4850,1,0,0,0,4850,4851,1,0,0,0,4851,4853,5,34,0,0,4852,
	4854,3,1334,667,0,4853,4852,1,0,0,0,4853,4854,1,0,0,0,4854,4855,1,0,0,0,
	4855,4857,3,792,396,0,4856,4849,1,0,0,0,4857,4858,1,0,0,0,4858,4856,1,0,
	0,0,4858,4859,1,0,0,0,4859,775,1,0,0,0,4860,4864,3,778,389,0,4861,4864,
	3,780,390,0,4862,4864,3,782,391,0,4863,4860,1,0,0,0,4863,4861,1,0,0,0,4863,
	4862,1,0,0,0,4864,777,1,0,0,0,4865,4866,5,65,0,0,4866,779,1,0,0,0,4867,
	4868,5,65,0,0,4868,4870,3,1334,667,0,4869,4867,1,0,0,0,4869,4870,1,0,0,
	0,4870,4871,1,0,0,0,4871,4872,5,339,0,0,4872,4873,3,1334,667,0,4873,4874,
	5,263,0,0,4874,781,1,0,0,0,4875,4876,5,65,0,0,4876,4877,3,1334,667,0,4877,
	4879,5,38,0,0,4878,4880,3,1334,667,0,4879,4878,1,0,0,0,4879,4880,1,0,0,
	0,4880,4881,1,0,0,0,4881,4883,3,784,392,0,4882,4884,3,1334,667,0,4883,4882,
	1,0,0,0,4883,4884,1,0,0,0,4884,4885,1,0,0,0,4885,4886,5,39,0,0,4886,783,
	1,0,0,0,4887,4898,3,786,393,0,4888,4890,3,1334,667,0,4889,4888,1,0,0,0,
	4889,4890,1,0,0,0,4890,4891,1,0,0,0,4891,4893,5,52,0,0,4892,4894,3,1334,
	667,0,4893,4892,1,0,0,0,4893,4894,1,0,0,0,4894,4895,1,0,0,0,4895,4897,3,
	786,393,0,4896,4889,1,0,0,0,4897,4900,1,0,0,0,4898,4896,1,0,0,0,4898,4899,
	1,0,0,0,4899,785,1,0,0,0,4900,4898,1,0,0,0,4901,4902,3,684,342,0,4902,787,
	1,0,0,0,4903,4904,5,205,0,0,4904,789,1,0,0,0,4905,4906,5,191,0,0,4906,4907,
	3,1334,667,0,4907,4908,5,192,0,0,4908,791,1,0,0,0,4909,4910,3,1288,644,
	0,4910,4911,3,1334,667,0,4911,4912,3,686,343,0,4912,4913,1,0,0,0,4913,4914,
	3,1334,667,0,4914,4915,3,684,342,0,4915,793,1,0,0,0,4916,4920,3,796,398,
	0,4917,4920,3,800,400,0,4918,4920,3,830,415,0,4919,4916,1,0,0,0,4919,4917,
	1,0,0,0,4919,4918,1,0,0,0,4920,795,1,0,0,0,4921,4926,5,48,0,0,4922,4923,
	3,804,402,0,4923,4924,3,1268,634,0,4924,4926,1,0,0,0,4925,4921,1,0,0,0,
	4925,4922,1,0,0,0,4926,797,1,0,0,0,4927,4928,3,804,402,0,4928,4929,3,1268,
	634,0,4929,799,1,0,0,0,4930,4935,3,802,401,0,4931,4932,3,806,403,0,4932,
	4933,3,1268,634,0,4933,4935,1,0,0,0,4934,4930,1,0,0,0,4934,4931,1,0,0,0,
	4935,801,1,0,0,0,4936,4937,7,22,0,0,4937,803,1,0,0,0,4938,4940,5,48,0,0,
	4939,4941,3,808,404,0,4940,4939,1,0,0,0,4940,4941,1,0,0,0,4941,805,1,0,
	0,0,4942,4954,5,55,0,0,4943,4944,5,48,0,0,4944,4946,5,55,0,0,4945,4943,
	1,0,0,0,4946,4949,1,0,0,0,4947,4945,1,0,0,0,4947,4948,1,0,0,0,4948,4950,
	1,0,0,0,4949,4947,1,0,0,0,4950,4952,5,48,0,0,4951,4953,3,808,404,0,4952,
	4951,1,0,0,0,4952,4953,1,0,0,0,4953,4955,1,0,0,0,4954,4947,1,0,0,0,4954,
	4955,1,0,0,0,4955,807,1,0,0,0,4956,4957,3,1266,633,0,4957,4958,5,48,0,0,
	4958,4960,1,0,0,0,4959,4956,1,0,0,0,4960,4961,1,0,0,0,4961,4959,1,0,0,0,
	4961,4962,1,0,0,0,4962,809,1,0,0,0,4963,4964,3,828,414,0,4964,4965,3,1334,
	667,0,4965,4966,3,1270,635,0,4966,4971,1,0,0,0,4967,4971,3,1272,636,0,4968,
	4971,3,814,407,0,4969,4971,3,830,415,0,4970,4963,1,0,0,0,4970,4967,1,0,
	0,0,4970,4968,1,0,0,0,4970,4969,1,0,0,0,4971,811,1,0,0,0,4972,4973,3,828,
	414,0,4973,4974,3,1334,667,0,4974,4976,1,0,0,0,4975,4972,1,0,0,0,4975,4976,
	1,0,0,0,4976,4977,1,0,0,0,4977,4978,3,1270,635,0,4978,813,1,0,0,0,4979,
	4980,7,23,0,0,4980,815,1,0,0,0,4981,4984,3,818,409,0,4982,4984,3,830,415,
	0,4983,4981,1,0,0,0,4983,4982,1,0,0,0,4984,817,1,0,0,0,4985,4986,3,828,
	414,0,4986,4987,3,1334,667,0,4987,4989,1,0,0,0,4988,4985,1,0,0,0,4988,4989,
	1,0,0,0,4989,4990,1,0,0,0,4990,4991,3,1274,637,0,4991,819,1,0,0,0,4992,
	4993,3,828,414,0,4993,4994,3,1334,667,0,4994,4995,3,1278,639,0,4995,4999,
	1,0,0,0,4996,4999,3,1280,640,0,4997,4999,3,830,415,0,4998,4992,1,0,0,0,
	4998,4996,1,0,0,0,4998,4997,1,0,0,0,4999,821,1,0,0,0,5000,5001,3,828,414,
	0,5001,5002,3,1334,667,0,5002,5004,1,0,0,0,5003,5000,1,0,0,0,5003,5004,
	1,0,0,0,5004,5005,1,0,0,0,5005,5006,3,1278,639,0,5006,823,1,0,0,0,5007,
	5010,3,826,413,0,5008,5010,3,830,415,0,5009,5007,1,0,0,0,5009,5008,1,0,
	0,0,5010,825,1,0,0,0,5011,5012,3,828,414,0,5012,5013,3,1334,667,0,5013,
	5015,1,0,0,0,5014,5011,1,0,0,0,5014,5015,1,0,0,0,5015,5016,1,0,0,0,5016,
	5017,3,1282,641,0,5017,827,1,0,0,0,5018,5020,3,794,397,0,5019,5021,5,48,
	0,0,5020,5019,1,0,0,0,5020,5021,1,0,0,0,5021,5027,1,0,0,0,5022,5023,3,1262,
	631,0,5023,5024,5,54,0,0,5024,5026,1,0,0,0,5025,5022,1,0,0,0,5026,5029,
	1,0,0,0,5027,5025,1,0,0,0,5027,5028,1,0,0,0,5028,5038,1,0,0,0,5029,5027,
	1,0,0,0,5030,5031,3,1262,631,0,5031,5032,5,54,0,0,5032,5034,1,0,0,0,5033,
	5030,1,0,0,0,5034,5035,1,0,0,0,5035,5033,1,0,0,0,5035,5036,1,0,0,0,5036,
	5038,1,0,0,0,5037,5018,1,0,0,0,5037,5033,1,0,0,0,5038,829,1,0,0,0,5039,
	5040,3,304,152,0,5040,831,1,0,0,0,5041,5042,1,0,0,0,5042,833,1,0,0,0,5043,
	5044,3,926,463,0,5044,835,1,0,0,0,5045,5057,3,838,419,0,5046,5057,3,858,
	429,0,5047,5057,3,860,430,0,5048,5057,3,864,432,0,5049,5057,3,868,434,0,
	5050,5057,3,872,436,0,5051,5057,3,876,438,0,5052,5057,3,882,441,0,5053,
	5057,3,892,446,0,5054,5057,3,894,447,0,5055,5057,3,896,448,0,5056,5045,
	1,0,0,0,5056,5046,1,0,0,0,5056,5047,1,0,0,0,5056,5048,1,0,0,0,5056,5049,
	1,0,0,0,5056,5050,1,0,0,0,5056,5051,1,0,0,0,5056,5052,1,0,0,0,5056,5053,
	1,0,0,0,5056,5054,1,0,0,0,5056,5055,1,0,0,0,5057,837,1,0,0,0,5058,5060,
	3,856,428,0,5059,5061,3,1334,667,0,5060,5059,1,0,0,0,5060,5061,1,0,0,0,
	5061,5062,1,0,0,0,5062,5063,3,840,420,0,5063,839,1,0,0,0,5064,5066,3,842,
	421,0,5065,5067,3,1334,667,0,5066,5065,1,0,0,0,5066,5067,1,0,0,0,5067,5068,
	1,0,0,0,5068,5069,3,856,428,0,5069,841,1,0,0,0,5070,5077,3,844,422,0,5071,
	5077,3,846,423,0,5072,5077,3,848,424,0,5073,5077,3,850,425,0,5074,5077,
	3,852,426,0,5075,5077,3,854,427,0,5076,5070,1,0,0,0,5076,5071,1,0,0,0,5076,
	5072,1,0,0,0,5076,5073,1,0,0,0,5076,5074,1,0,0,0,5076,5075,1,0,0,0,5077,
	843,1,0,0,0,5078,5079,5,36,0,0,5079,845,1,0,0,0,5080,5081,5,38,0,0,5081,
	5082,5,39,0,0,5082,847,1,0,0,0,5083,5084,5,38,0,0,5084,849,1,0,0,0,5085,
	5086,5,39,0,0,5086,851,1,0,0,0,5087,5088,5,38,0,0,5088,5089,5,36,0,0,5089,
	853,1,0,0,0,5090,5091,5,39,0,0,5091,5092,5,36,0,0,5092,855,1,0,0,0,5093,
	5096,3,910,455,0,5094,5096,3,938,469,0,5095,5093,1,0,0,0,5095,5094,1,0,
	0,0,5096,857,1,0,0,0,5097,5099,5,128,0,0,5098,5100,3,1334,667,0,5099,5098,
	1,0,0,0,5099,5100,1,0,0,0,5100,5142,1,0,0,0,5101,5103,5,40,0,0,5102,5104,
	3,1334,667,0,5103,5102,1,0,0,0,5103,5104,1,0,0,0,5104,5105,1,0,0,0,5105,
	5107,3,314,157,0,5106,5108,3,1334,667,0,5107,5106,1,0,0,0,5107,5108,1,0,
	0,0,5108,5109,1,0,0,0,5109,5110,5,41,0,0,5110,5143,1,0,0,0,5111,5113,5,
	44,0,0,5112,5114,3,1334,667,0,5113,5112,1,0,0,0,5113,5114,1,0,0,0,5114,
	5115,1,0,0,0,5115,5117,3,314,157,0,5116,5118,3,1334,667,0,5117,5116,1,0,
	0,0,5117,5118,1,0,0,0,5118,5119,1,0,0,0,5119,5120,5,45,0,0,5120,5143,1,
	0,0,0,5121,5123,5,40,0,0,5122,5124,3,1334,667,0,5123,5122,1,0,0,0,5123,
	5124,1,0,0,0,5124,5125,1,0,0,0,5125,5127,3,226,113,0,5126,5128,3,1334,667,
	0,5127,5126,1,0,0,0,5127,5128,1,0,0,0,5128,5129,1,0,0,0,5129,5130,5,41,
	0,0,5130,5143,1,0,0,0,5131,5133,5,44,0,0,5132,5134,3,1334,667,0,5133,5132,
	1,0,0,0,5133,5134,1,0,0,0,5134,5135,1,0,0,0,5135,5137,3,226,113,0,5136,
	5138,3,1334,667,0,5137,5136,1,0,0,0,5137,5138,1,0,0,0,5138,5139,1,0,0,0,
	5139,5140,5,45,0,0,5140,5143,1,0,0,0,5141,5143,3,54,27,0,5142,5101,1,0,
	0,0,5142,5111,1,0,0,0,5142,5121,1,0,0,0,5142,5131,1,0,0,0,5142,5141,1,0,
	0,0,5143,859,1,0,0,0,5144,5145,3,950,475,0,5145,5146,3,1334,667,0,5146,
	5147,3,862,431,0,5147,861,1,0,0,0,5148,5152,5,167,0,0,5149,5150,3,1334,
	667,0,5150,5151,5,191,0,0,5151,5153,1,0,0,0,5152,5149,1,0,0,0,5152,5153,
	1,0,0,0,5153,5154,1,0,0,0,5154,5155,3,1334,667,0,5155,5156,5,192,0,0,5156,
	863,1,0,0,0,5157,5158,3,950,475,0,5158,5159,3,1334,667,0,5159,5160,3,866,
	433,0,5160,865,1,0,0,0,5161,5165,5,167,0,0,5162,5163,3,1334,667,0,5163,
	5164,5,191,0,0,5164,5166,1,0,0,0,5165,5162,1,0,0,0,5165,5166,1,0,0,0,5166,
	5167,1,0,0,0,5167,5168,3,1334,667,0,5168,5169,3,686,343,0,5169,5170,3,1334,
	667,0,5170,5171,3,684,342,0,5171,867,1,0,0,0,5172,5173,3,1008,504,0,5173,
	5174,3,1334,667,0,5174,5175,3,870,435,0,5175,869,1,0,0,0,5176,5180,5,167,
	0,0,5177,5178,3,1334,667,0,5178,5179,5,191,0,0,5179,5181,1,0,0,0,5180,5177,
	1,0,0,0,5180,5181,1,0,0,0,5181,5185,1,0,0,0,5182,5183,3,1334,667,0,5183,
	5184,3,1048,524,0,5184,5186,1,0,0,0,5185,5182,1,0,0,0,5185,5186,1,0,0,0,
	5186,5187,1,0,0,0,5187,5188,5,336,0,0,5188,871,1,0,0,0,5189,5190,3,300,
	150,0,5190,5191,3,1334,667,0,5191,5192,3,872,436,0,5192,873,1,0,0,0,5193,
	5197,5,167,0,0,5194,5195,3,1334,667,0,5195,5196,5,191,0,0,5196,5198,1,0,
	0,0,5197,5194,1,0,0,0,5197,5198,1,0,0,0,5198,5199,1,0,0,0,5199,5200,5,317,
	0,0,5200,875,1,0,0,0,5201,5202,3,300,150,0,5202,5203,3,1334,667,0,5203,
	877,1,0,0,0,5204,5205,3,880,440,0,5205,5206,3,1334,667,0,5206,5207,3,450,
	225,0,5207,879,1,0,0,0,5208,5212,5,167,0,0,5209,5210,3,1334,667,0,5210,
	5211,5,191,0,0,5211,5213,1,0,0,0,5212,5209,1,0,0,0,5212,5213,1,0,0,0,5213,
	5214,1,0,0,0,5214,5215,3,1334,667,0,5215,5216,5,327,0,0,5216,5219,1,0,0,
	0,5217,5219,5,32,0,0,5218,5208,1,0,0,0,5218,5217,1,0,0,0,5219,881,1,0,0,
	0,5220,5221,3,884,442,0,5221,5222,3,1334,667,0,5222,5223,3,886,443,0,5223,
	5229,1,0,0,0,5224,5225,3,884,442,0,5225,5226,3,1334,667,0,5226,5227,3,888,
	444,0,5227,5229,1,0,0,0,5228,5220,1,0,0,0,5228,5224,1,0,0,0,5229,883,1,
	0,0,0,5230,5231,3,300,150,0,5231,885,1,0,0,0,5232,5236,5,167,0,0,5233,5234,
	3,1334,667,0,5234,5235,5,191,0,0,5235,5237,1,0,0,0,5236,5233,1,0,0,0,5236,
	5237,1,0,0,0,5237,5238,1,0,0,0,5238,5239,3,1334,667,0,5239,5240,5,346,0,
	0,5240,5241,3,1334,667,0,5241,5242,5,196,0,0,5242,5243,3,1334,667,0,5243,
	5244,3,890,445,0,5244,887,1,0,0,0,5245,5249,5,167,0,0,5246,5247,3,1334,
	667,0,5247,5248,5,191,0,0,5248,5250,1,0,0,0,5249,5246,1,0,0,0,5249,5250,
	1,0,0,0,5250,5251,1,0,0,0,5251,5252,3,1334,667,0,5252,5253,5,315,0,0,5253,
	5254,5,196,0,0,5254,5255,3,1334,667,0,5255,5256,3,890,445,0,5256,889,1,
	0,0,0,5257,5258,3,300,150,0,5258,891,1,0,0,0,5259,5260,5,63,0,0,5260,5262,
	5,44,0,0,5261,5263,3,1334,667,0,5262,5261,1,0,0,0,5262,5263,1,0,0,0,5263,
	5264,1,0,0,0,5264,5273,3,300,150,0,5265,5267,3,1334,667,0,5266,5265,1,0,
	0,0,5266,5267,1,0,0,0,5267,5268,1,0,0,0,5268,5270,5,34,0,0,5269,5271,3,
	1334,667,0,5270,5269,1,0,0,0,5270,5271,1,0,0,0,5271,5272,1,0,0,0,5272,5274,
	3,300,150,0,5273,5266,1,0,0,0,5274,5275,1,0,0,0,5275,5273,1,0,0,0,5275,
	5276,1,0,0,0,5276,5278,1,0,0,0,5277,5279,3,1334,667,0,5278,5277,1,0,0,0,
	5278,5279,1,0,0,0,5279,5280,1,0,0,0,5280,5281,5,45,0,0,5281,893,1,0,0,0,
	5282,5283,5,222,0,0,5283,5285,5,44,0,0,5284,5286,3,1334,667,0,5285,5284,
	1,0,0,0,5285,5286,1,0,0,0,5286,5287,1,0,0,0,5287,5296,3,300,150,0,5288,
	5290,3,1334,667,0,5289,5288,1,0,0,0,5289,5290,1,0,0,0,5290,5291,1,0,0,0,
	5291,5293,5,34,0,0,5292,5294,3,1334,667,0,5293,5292,1,0,0,0,5293,5294,1,
	0,0,0,5294,5295,1,0,0,0,5295,5297,3,300,150,0,5296,5289,1,0,0,0,5297,5298,
	1,0,0,0,5298,5296,1,0,0,0,5298,5299,1,0,0,0,5299,5301,1,0,0,0,5300,5302,
	3,1334,667,0,5301,5300,1,0,0,0,5301,5302,1,0,0,0,5302,5303,1,0,0,0,5303,
	5304,5,45,0,0,5304,895,1,0,0,0,5305,5306,5,212,0,0,5306,5308,5,44,0,0,5307,
	5309,3,1334,667,0,5308,5307,1,0,0,0,5308,5309,1,0,0,0,5309,5310,1,0,0,0,
	5310,5312,3,300,150,0,5311,5313,3,1334,667,0,5312,5311,1,0,0,0,5312,5313,
	1,0,0,0,5313,5314,1,0,0,0,5314,5316,5,34,0,0,5315,5317,3,1334,667,0,5316,
	5315,1,0,0,0,5316,5317,1,0,0,0,5317,5318,1,0,0,0,5318,5320,3,1286,643,0,
	5319,5321,3,1334,667,0,5320,5319,1,0,0,0,5320,5321,1,0,0,0,5321,5322,1,
	0,0,0,5322,5323,5,45,0,0,5323,897,1,0,0,0,5324,5327,3,1204,602,0,5325,5327,
	3,904,452,0,5326,5324,1,0,0,0,5326,5325,1,0,0,0,5327,899,1,0,0,0,5328,5331,
	3,1210,605,0,5329,5331,3,904,452,0,5330,5328,1,0,0,0,5330,5329,1,0,0,0,
	5331,901,1,0,0,0,5332,5335,5,379,0,0,5333,5335,3,304,152,0,5334,5332,1,
	0,0,0,5334,5333,1,0,0,0,5335,903,1,0,0,0,5336,5339,3,304,152,0,5337,5339,
	3,906,453,0,5338,5336,1,0,0,0,5338,5337,1,0,0,0,5339,905,1,0,0,0,5340,5341,
	5,108,0,0,5341,907,1,0,0,0,5342,5345,3,910,455,0,5343,5345,3,926,463,0,
	5344,5342,1,0,0,0,5344,5343,1,0,0,0,5345,909,1,0,0,0,5346,5368,3,942,471,
	0,5347,5368,3,1008,504,0,5348,5368,3,1062,531,0,5349,5368,3,1088,544,0,
	5350,5368,3,1118,559,0,5351,5368,3,922,461,0,5352,5368,3,1146,573,0,5353,
	5368,3,912,456,0,5354,5363,3,1286,643,0,5355,5357,3,1334,667,0,5356,5355,
	1,0,0,0,5356,5357,1,0,0,0,5357,5358,1,0,0,0,5358,5360,5,54,0,0,5359,5361,
	3,1334,667,0,5360,5359,1,0,0,0,5360,5361,1,0,0,0,5361,5362,1,0,0,0,5362,
	5364,3,1286,643,0,5363,5356,1,0,0,0,5364,5365,1,0,0,0,5365,5363,1,0,0,0,
	5365,5366,1,0,0,0,5366,5368,1,0,0,0,5367,5346,1,0,0,0,5367,5347,1,0,0,0,
	5367,5348,1,0,0,0,5367,5349,1,0,0,0,5367,5350,1,0,0,0,5367,5351,1,0,0,0,
	5367,5352,1,0,0,0,5367,5353,1,0,0,0,5367,5354,1,0,0,0,5368,911,1,0,0,0,
	5369,5374,3,914,457,0,5370,5374,3,916,458,0,5371,5374,3,918,459,0,5372,
	5374,3,920,460,0,5373,5369,1,0,0,0,5373,5370,1,0,0,0,5373,5371,1,0,0,0,
	5373,5372,1,0,0,0,5374,913,1,0,0,0,5375,5376,5,339,0,0,5376,5378,3,1334,
	667,0,5377,5375,1,0,0,0,5377,5378,1,0,0,0,5378,5379,1,0,0,0,5379,5380,5,
	323,0,0,5380,5381,3,1334,667,0,5381,5382,3,86,43,0,5382,5385,1,0,0,0,5383,
	5385,3,950,475,0,5384,5377,1,0,0,0,5384,5383,1,0,0,0,5385,915,1,0,0,0,5386,
	5387,5,312,0,0,5387,5389,3,1334,667,0,5388,5386,1,0,0,0,5388,5389,1,0,0,
	0,5389,5390,1,0,0,0,5390,5391,5,347,0,0,5391,5392,3,1334,667,0,5392,5393,
	3,92,46,0,5393,5396,1,0,0,0,5394,5396,3,950,475,0,5395,5388,1,0,0,0,5395,
	5394,1,0,0,0,5396,917,1,0,0,0,5397,5398,3,950,475,0,5398,919,1,0,0,0,5399,
	5400,3,950,475,0,5400,921,1,0,0,0,5401,5402,3,950,475,0,5402,923,1,0,0,
	0,5403,5404,3,908,454,0,5404,925,1,0,0,0,5405,5419,3,928,464,0,5406,5407,
	3,928,464,0,5407,5408,3,1334,667,0,5408,5409,5,200,0,0,5409,5410,3,1334,
	667,0,5410,5411,3,926,463,0,5411,5419,1,0,0,0,5412,5413,3,928,464,0,5413,
	5414,3,1334,667,0,5414,5415,5,270,0,0,5415,5416,3,1334,667,0,5416,5417,
	3,926,463,0,5417,5419,1,0,0,0,5418,5405,1,0,0,0,5418,5406,1,0,0,0,5418,
	5412,1,0,0,0,5419,927,1,0,0,0,5420,5421,6,464,-1,0,5421,5422,3,930,465,
	0,5422,5428,1,0,0,0,5423,5424,10,1,0,0,5424,5425,5,64,0,0,5425,5427,3,930,
	465,0,5426,5423,1,0,0,0,5427,5430,1,0,0,0,5428,5426,1,0,0,0,5428,5429,1,
	0,0,0,5429,929,1,0,0,0,5430,5428,1,0,0,0,5431,5432,5,191,0,0,5432,5434,
	3,1334,667,0,5433,5431,1,0,0,0,5433,5434,1,0,0,0,5434,5435,1,0,0,0,5435,
	5436,3,932,466,0,5436,931,1,0,0,0,5437,5447,3,936,468,0,5438,5439,3,1334,
	667,0,5439,5443,5,167,0,0,5440,5441,3,1334,667,0,5441,5442,5,191,0,0,5442,
	5444,1,0,0,0,5443,5440,1,0,0,0,5443,5444,1,0,0,0,5444,5445,1,0,0,0,5445,
	5446,3,934,467,0,5446,5448,1,0,0,0,5447,5438,1,0,0,0,5447,5448,1,0,0,0,
	5448,933,1,0,0,0,5449,5450,7,24,0,0,5450,935,1,0,0,0,5451,5454,3,836,418,
	0,5452,5454,3,938,469,0,5453,5451,1,0,0,0,5453,5452,1,0,0,0,5454,937,1,
	0,0,0,5455,5458,3,940,470,0,5456,5458,3,954,477,0,5457,5455,1,0,0,0,5457,
	5456,1,0,0,0,5458,939,1,0,0,0,5459,5461,5,44,0,0,5460,5462,3,1334,667,0,
	5461,5460,1,0,0,0,5461,5462,1,0,0,0,5462,5463,1,0,0,0,5463,5465,3,926,463,
	0,5464,5466,3,1334,667,0,5465,5464,1,0,0,0,5465,5466,1,0,0,0,5466,5467,
	1,0,0,0,5467,5468,5,45,0,0,5468,941,1,0,0,0,5469,5491,3,944,472,0,5470,
	5472,3,944,472,0,5471,5473,3,1334,667,0,5472,5471,1,0,0,0,5472,5473,1,0,
	0,0,5473,5474,1,0,0,0,5474,5476,5,26,0,0,5475,5477,3,1334,667,0,5476,5475,
	1,0,0,0,5476,5477,1,0,0,0,5477,5478,1,0,0,0,5478,5479,3,942,471,0,5479,
	5491,1,0,0,0,5480,5482,3,944,472,0,5481,5483,3,1334,667,0,5482,5481,1,0,
	0,0,5482,5483,1,0,0,0,5483,5484,1,0,0,0,5484,5486,5,27,0,0,5485,5487,3,
	1334,667,0,5486,5485,1,0,0,0,5486,5487,1,0,0,0,5487,5488,1,0,0,0,5488,5489,
	3,942,471,0,5489,5491,1,0,0,0,5490,5469,1,0,0,0,5490,5470,1,0,0,0,5490,
	5480,1,0,0,0,5491,943,1,0,0,0,5492,5514,3,946,473,0,5493,5495,3,946,473,
	0,5494,5496,3,1334,667,0,5495,5494,1,0,0,0,5495,5496,1,0,0,0,5496,5497,
	1,0,0,0,5497,5499,5,30,0,0,5498,5500,3,1334,667,0,5499,5498,1,0,0,0,5499,
	5500,1,0,0,0,5500,5501,1,0,0,0,5501,5502,3,944,472,0,5502,5514,1,0,0,0,
	5503,5505,3,946,473,0,5504,5506,3,1334,667,0,5505,5504,1,0,0,0,5505,5506,
	1,0,0,0,5506,5507,1,0,0,0,5507,5509,5,48,0,0,5508,5510,3,1334,667,0,5509,
	5508,1,0,0,0,5509,5510,1,0,0,0,5510,5511,1,0,0,0,5511,5512,3,944,472,0,
	5512,5514,1,0,0,0,5513,5492,1,0,0,0,5513,5493,1,0,0,0,5513,5503,1,0,0,0,
	5514,945,1,0,0,0,5515,5517,5,368,0,0,5516,5515,1,0,0,0,5516,5517,1,0,0,
	0,5517,5518,1,0,0,0,5518,5519,3,948,474,0,5519,947,1,0,0,0,5520,5523,3,
	950,475,0,5521,5523,3,960,480,0,5522,5520,1,0,0,0,5522,5521,1,0,0,0,5523,
	949,1,0,0,0,5524,5527,3,952,476,0,5525,5527,3,954,477,0,5526,5524,1,0,0,
	0,5526,5525,1,0,0,0,5527,951,1,0,0,0,5528,5530,5,44,0,0,5529,5531,3,1334,
	667,0,5530,5529,1,0,0,0,5530,5531,1,0,0,0,5531,5532,1,0,0,0,5532,5534,3,
	908,454,0,5533,5535,3,1334,667,0,5534,5533,1,0,0,0,5534,5535,1,0,0,0,5535,
	5536,1,0,0,0,5536,5537,5,45,0,0,5537,953,1,0,0,0,5538,5541,3,956,478,0,
	5539,5541,3,298,149,0,5540,5538,1,0,0,0,5540,5539,1,0,0,0,5541,955,1,0,
	0,0,5542,5551,3,900,450,0,5543,5551,3,552,276,0,5544,5551,3,958,479,0,5545,
	5551,3,1166,583,0,5546,5551,3,1168,584,0,5547,5551,3,1202,601,0,5548,5551,
	3,1194,597,0,5549,5551,3,1200,600,0,5550,5542,1,0,0,0,5550,5543,1,0,0,0,
	5550,5544,1,0,0,0,5550,5545,1,0,0,0,5550,5546,1,0,0,0,5550,5547,1,0,0,0,
	5550,5548,1,0,0,0,5550,5549,1,0,0,0,5551,957,1,0,0,0,5552,5556,3,1130,565,
	0,5553,5556,3,1138,569,0,5554,5556,3,1152,576,0,5555,5552,1,0,0,0,5555,
	5553,1,0,0,0,5555,5554,1,0,0,0,5556,959,1,0,0,0,5557,5568,3,962,481,0,5558,
	5568,3,970,485,0,5559,5568,3,972,486,0,5560,5568,3,978,489,0,5561,5568,
	3,982,491,0,5562,5568,3,994,497,0,5563,5568,3,996,498,0,5564,5568,3,1002,
	501,0,5565,5568,3,1004,502,0,5566,5568,3,1006,503,0,5567,5557,1,0,0,0,5567,
	5558,1,0,0,0,5567,5559,1,0,0,0,5567,5560,1,0,0,0,5567,5561,1,0,0,0,5567,
	5562,1,0,0,0,5567,5563,1,0,0,0,5567,5564,1,0,0,0,5567,5565,1,0,0,0,5567,
	5566,1,0,0,0,5568,961,1,0,0,0,5569,5573,3,964,482,0,5570,5573,3,966,483,
	0,5571,5573,3,968,484,0,5572,5569,1,0,0,0,5572,5570,1,0,0,0,5572,5571,1,
	0,0,0,5573,963,1,0,0,0,5574,5575,7,25,0,0,5575,5577,5,44,0,0,5576,5578,
	3,1334,667,0,5577,5576,1,0,0,0,5577,5578,1,0,0,0,5578,5579,1,0,0,0,5579,
	5581,3,1010,505,0,5580,5582,3,1334,667,0,5581,5580,1,0,0,0,5581,5582,1,
	0,0,0,5582,5583,1,0,0,0,5583,5584,5,45,0,0,5584,965,1,0,0,0,5585,5586,7,
	26,0,0,5586,5588,5,44,0,0,5587,5589,3,1334,667,0,5588,5587,1,0,0,0,5588,
	5589,1,0,0,0,5589,5590,1,0,0,0,5590,5592,3,1018,509,0,5591,5593,3,1334,
	667,0,5592,5591,1,0,0,0,5592,5593,1,0,0,0,5593,5594,1,0,0,0,5594,5595,5,
	45,0,0,5595,967,1,0,0,0,5596,5597,5,206,0,0,5597,5599,5,44,0,0,5598,5600,
	3,1334,667,0,5599,5598,1,0,0,0,5599,5600,1,0,0,0,5600,5601,1,0,0,0,5601,
	5603,3,1146,573,0,5602,5604,3,1334,667,0,5603,5602,1,0,0,0,5603,5604,1,
	0,0,0,5604,5605,1,0,0,0,5605,5606,5,45,0,0,5606,969,1,0,0,0,5607,5608,5,
	60,0,0,5608,5610,5,44,0,0,5609,5611,3,1334,667,0,5610,5609,1,0,0,0,5610,
	5611,1,0,0,0,5611,5612,1,0,0,0,5612,5614,3,942,471,0,5613,5615,3,1334,667,
	0,5614,5613,1,0,0,0,5614,5615,1,0,0,0,5615,5616,1,0,0,0,5616,5617,5,45,
	0,0,5617,971,1,0,0,0,5618,5619,5,186,0,0,5619,5621,5,44,0,0,5620,5622,3,
	1334,667,0,5621,5620,1,0,0,0,5621,5622,1,0,0,0,5622,5623,1,0,0,0,5623,5625,
	3,974,487,0,5624,5626,3,1334,667,0,5625,5624,1,0,0,0,5625,5626,1,0,0,0,
	5626,5627,1,0,0,0,5627,5629,5,34,0,0,5628,5630,3,1334,667,0,5629,5628,1,
	0,0,0,5629,5630,1,0,0,0,5630,5631,1,0,0,0,5631,5633,3,976,488,0,5632,5634,
	3,1334,667,0,5633,5632,1,0,0,0,5633,5634,1,0,0,0,5634,5635,1,0,0,0,5635,
	5636,5,45,0,0,5636,973,1,0,0,0,5637,5638,3,942,471,0,5638,975,1,0,0,0,5639,
	5640,3,942,471,0,5640,977,1,0,0,0,5641,5642,3,980,490,0,5642,5644,5,44,
	0,0,5643,5645,3,1334,667,0,5644,5643,1,0,0,0,5644,5645,1,0,0,0,5645,5646,
	1,0,0,0,5646,5648,3,942,471,0,5647,5649,3,1334,667,0,5648,5647,1,0,0,0,
	5648,5649,1,0,0,0,5649,5650,1,0,0,0,5650,5651,5,45,0,0,5651,979,1,0,0,0,
	5652,5653,7,27,0,0,5653,981,1,0,0,0,5654,5658,3,984,492,0,5655,5658,3,990,
	495,0,5656,5658,3,992,496,0,5657,5654,1,0,0,0,5657,5655,1,0,0,0,5657,5656,
	1,0,0,0,5658,983,1,0,0,0,5659,5660,5,186,0,0,5660,5662,5,44,0,0,5661,5663,
	3,1334,667,0,5662,5661,1,0,0,0,5662,5663,1,0,0,0,5663,5664,1,0,0,0,5664,
	5666,3,986,493,0,5665,5667,3,1334,667,0,5666,5665,1,0,0,0,5666,5667,1,0,
	0,0,5667,5668,1,0,0,0,5668,5670,5,34,0,0,5669,5671,3,1334,667,0,5670,5669,
	1,0,0,0,5670,5671,1,0,0,0,5671,5672,1,0,0,0,5672,5674,3,988,494,0,5673,
	5675,3,1334,667,0,5674,5673,1,0,0,0,5674,5675,1,0,0,0,5675,5676,1,0,0,0,
	5676,5677,5,45,0,0,5677,985,1,0,0,0,5678,5679,3,942,471,0,5679,987,1,0,
	0,0,5680,5681,3,942,471,0,5681,989,1,0,0,0,5682,5683,5,179,0,0,5683,5685,
	5,44,0,0,5684,5686,3,1334,667,0,5685,5684,1,0,0,0,5685,5686,1,0,0,0,5686,
	5687,1,0,0,0,5687,5689,3,942,471,0,5688,5690,3,1334,667,0,5689,5688,1,0,
	0,0,5689,5690,1,0,0,0,5690,5691,1,0,0,0,5691,5692,5,45,0,0,5692,991,1,0,
	0,0,5693,5694,5,173,0,0,5694,5696,5,44,0,0,5695,5697,3,1334,667,0,5696,
	5695,1,0,0,0,5696,5697,1,0,0,0,5697,5698,1,0,0,0,5698,5700,3,942,471,0,
	5699,5701,3,1334,667,0,5700,5699,1,0,0,0,5700,5701,1,0,0,0,5701,5702,1,
	0,0,0,5702,5703,5,45,0,0,5703,993,1,0,0,0,5704,5705,5,129,0,0,5705,5707,
	5,44,0,0,5706,5708,3,1334,667,0,5707,5706,1,0,0,0,5707,5708,1,0,0,0,5708,
	5709,1,0,0,0,5709,5711,3,942,471,0,5710,5712,3,1334,667,0,5711,5710,1,0,
	0,0,5711,5712,1,0,0,0,5712,5713,1,0,0,0,5713,5714,5,45,0,0,5714,995,1,0,
	0,0,5715,5716,5,210,0,0,5716,5718,5,44,0,0,5717,5719,3,1334,667,0,5718,
	5717,1,0,0,0,5718,5719,1,0,0,0,5719,5720,1,0,0,0,5720,5722,3,998,499,0,
	5721,5723,3,1334,667,0,5722,5721,1,0,0,0,5722,5723,1,0,0,0,5723,5724,1,
	0,0,0,5724,5726,5,34,0,0,5725,5727,3,1334,667,0,5726,5725,1,0,0,0,5726,
	5727,1,0,0,0,5727,5728,1,0,0,0,5728,5730,3,1000,500,0,5729,5731,3,1334,
	667,0,5730,5729,1,0,0,0,5730,5731,1,0,0,0,5731,5732,1,0,0,0,5732,5733,5,
	45,0,0,5733,997,1,0,0,0,5734,5735,3,942,471,0,5735,999,1,0,0,0,5736,5737,
	3,942,471,0,5737,1001,1,0,0,0,5738,5739,5,234,0,0,5739,5741,5,44,0,0,5740,
	5742,3,1334,667,0,5741,5740,1,0,0,0,5741,5742,1,0,0,0,5742,5743,1,0,0,0,
	5743,5745,3,942,471,0,5744,5746,3,1334,667,0,5745,5744,1,0,0,0,5745,5746,
	1,0,0,0,5746,5747,1,0,0,0,5747,5748,5,45,0,0,5748,1003,1,0,0,0,5749,5750,
	5,139,0,0,5750,5752,5,44,0,0,5751,5753,3,1334,667,0,5752,5751,1,0,0,0,5752,
	5753,1,0,0,0,5753,5754,1,0,0,0,5754,5756,3,942,471,0,5755,5757,3,1334,667,
	0,5756,5755,1,0,0,0,5756,5757,1,0,0,0,5757,5758,1,0,0,0,5758,5759,5,45,
	0,0,5759,1005,1,0,0,0,5760,5761,7,28,0,0,5761,5763,5,44,0,0,5762,5764,3,
	1334,667,0,5763,5762,1,0,0,0,5763,5764,1,0,0,0,5764,5765,1,0,0,0,5765,5767,
	3,942,471,0,5766,5768,3,1334,667,0,5767,5766,1,0,0,0,5767,5768,1,0,0,0,
	5768,5769,1,0,0,0,5769,5770,5,45,0,0,5770,1007,1,0,0,0,5771,5774,3,1010,
	505,0,5772,5774,3,1018,509,0,5773,5771,1,0,0,0,5773,5772,1,0,0,0,5774,1009,
	1,0,0,0,5775,5778,3,1012,506,0,5776,5778,3,1014,507,0,5777,5775,1,0,0,0,
	5777,5776,1,0,0,0,5778,1011,1,0,0,0,5779,5780,3,1014,507,0,5780,5781,5,
	59,0,0,5781,5782,3,1010,505,0,5782,1013,1,0,0,0,5783,5784,3,1016,508,0,
	5784,1015,1,0,0,0,5785,5788,3,950,475,0,5786,5788,3,1026,513,0,5787,5785,
	1,0,0,0,5787,5786,1,0,0,0,5788,1017,1,0,0,0,5789,5792,3,1024,512,0,5790,
	5792,3,1020,510,0,5791,5789,1,0,0,0,5791,5790,1,0,0,0,5792,1019,1,0,0,0,
	5793,5794,3,1022,511,0,5794,1021,1,0,0,0,5795,5798,3,950,475,0,5796,5798,
	3,1026,513,0,5797,5795,1,0,0,0,5797,5796,1,0,0,0,5798,1023,1,0,0,0,5799,
	5800,3,1020,510,0,5800,5801,5,59,0,0,5801,5802,3,1018,509,0,5802,1025,1,
	0,0,0,5803,5806,3,1028,514,0,5804,5806,3,1050,525,0,5805,5803,1,0,0,0,5805,
	5804,1,0,0,0,5806,1027,1,0,0,0,5807,5811,3,1030,515,0,5808,5811,3,1032,
	516,0,5809,5811,3,1046,523,0,5810,5807,1,0,0,0,5810,5808,1,0,0,0,5810,5809,
	1,0,0,0,5811,1029,1,0,0,0,5812,5813,7,29,0,0,5813,5815,5,44,0,0,5814,5816,
	3,1334,667,0,5815,5814,1,0,0,0,5815,5816,1,0,0,0,5816,5817,1,0,0,0,5817,
	5819,3,1010,505,0,5818,5820,3,1334,667,0,5819,5818,1,0,0,0,5819,5820,1,
	0,0,0,5820,5821,1,0,0,0,5821,5822,5,45,0,0,5822,1031,1,0,0,0,5823,5826,
	3,1034,517,0,5824,5826,3,1036,518,0,5825,5823,1,0,0,0,5825,5824,1,0,0,0,
	5826,1033,1,0,0,0,5827,5828,5,246,0,0,5828,5830,5,44,0,0,5829,5831,3,1334,
	667,0,5830,5829,1,0,0,0,5830,5831,1,0,0,0,5831,5832,1,0,0,0,5832,5834,3,
	1038,519,0,5833,5835,3,1334,667,0,5834,5833,1,0,0,0,5834,5835,1,0,0,0,5835,
	5836,1,0,0,0,5836,5837,5,45,0,0,5837,1035,1,0,0,0,5838,5839,7,30,0,0,5839,
	5841,5,44,0,0,5840,5842,3,1334,667,0,5841,5840,1,0,0,0,5841,5842,1,0,0,
	0,5842,5843,1,0,0,0,5843,5845,3,1040,520,0,5844,5846,3,1334,667,0,5845,
	5844,1,0,0,0,5845,5846,1,0,0,0,5846,5847,1,0,0,0,5847,5849,5,34,0,0,5848,
	5850,3,1334,667,0,5849,5848,1,0,0,0,5849,5850,1,0,0,0,5850,5851,1,0,0,0,
	5851,5852,3,1044,522,0,5852,5854,1,0,0,0,5853,5855,3,1334,667,0,5854,5853,
	1,0,0,0,5854,5855,1,0,0,0,5855,5856,1,0,0,0,5856,5857,5,45,0,0,5857,1037,
	1,0,0,0,5858,5859,3,1042,521,0,5859,5860,3,1334,667,0,5860,5862,1,0,0,0,
	5861,5858,1,0,0,0,5861,5862,1,0,0,0,5862,5866,1,0,0,0,5863,5864,3,1044,
	522,0,5864,5865,3,1334,667,0,5865,5867,1,0,0,0,5866,5863,1,0,0,0,5866,5867,
	1,0,0,0,5867,5868,1,0,0,0,5868,5869,5,141,0,0,5869,5871,3,1334,667,0,5870,
	5861,1,0,0,0,5870,5871,1,0,0,0,5871,5872,1,0,0,0,5872,5873,3,1040,520,0,
	5873,1039,1,0,0,0,5874,5875,3,1010,505,0,5875,1041,1,0,0,0,5876,5877,7,
	31,0,0,5877,1043,1,0,0,0,5878,5879,3,1010,505,0,5879,1045,1,0,0,0,5880,
	5881,5,190,0,0,5881,5883,5,44,0,0,5882,5884,3,1334,667,0,5883,5882,1,0,
	0,0,5883,5884,1,0,0,0,5884,5885,1,0,0,0,5885,5887,3,1010,505,0,5886,5888,
	3,1334,667,0,5887,5886,1,0,0,0,5887,5888,1,0,0,0,5888,5889,1,0,0,0,5889,
	5891,5,34,0,0,5890,5892,3,1334,667,0,5891,5890,1,0,0,0,5891,5892,1,0,0,
	0,5892,5893,1,0,0,0,5893,5894,3,1048,524,0,5894,5896,1,0,0,0,5895,5897,
	3,1334,667,0,5896,5895,1,0,0,0,5896,5897,1,0,0,0,5897,5898,1,0,0,0,5898,
	5899,5,45,0,0,5899,1047,1,0,0,0,5900,5901,7,32,0,0,5901,1049,1,0,0,0,5902,
	5903,3,1052,526,0,5903,1051,1,0,0,0,5904,5905,5,246,0,0,5905,5907,5,44,
	0,0,5906,5908,3,1334,667,0,5907,5906,1,0,0,0,5907,5908,1,0,0,0,5908,5909,
	1,0,0,0,5909,5911,3,1054,527,0,5910,5912,3,1334,667,0,5911,5910,1,0,0,0,
	5911,5912,1,0,0,0,5912,5913,1,0,0,0,5913,5914,5,45,0,0,5914,1053,1,0,0,
	0,5915,5916,3,1042,521,0,5916,5917,3,1334,667,0,5917,5919,1,0,0,0,5918,
	5915,1,0,0,0,5918,5919,1,0,0,0,5919,5923,1,0,0,0,5920,5921,3,1058,529,0,
	5921,5922,3,1334,667,0,5922,5924,1,0,0,0,5923,5920,1,0,0,0,5923,5924,1,
	0,0,0,5924,5925,1,0,0,0,5925,5926,5,141,0,0,5926,5928,3,1334,667,0,5927,
	5918,1,0,0,0,5927,5928,1,0,0,0,5928,5929,1,0,0,0,5929,5930,3,1056,528,0,
	5930,1055,1,0,0,0,5931,5932,3,1018,509,0,5932,1057,1,0,0,0,5933,5934,3,
	1018,509,0,5934,1059,1,0,0,0,5935,5936,3,942,471,0,5936,1061,1,0,0,0,5937,
	5938,6,531,-1,0,5938,5944,3,1064,532,0,5939,5940,3,1088,544,0,5940,5941,
	5,26,0,0,5941,5942,3,1064,532,0,5942,5944,1,0,0,0,5943,5937,1,0,0,0,5943,
	5939,1,0,0,0,5944,5953,1,0,0,0,5945,5946,10,2,0,0,5946,5947,5,26,0,0,5947,
	5952,3,1094,547,0,5948,5949,10,1,0,0,5949,5950,5,27,0,0,5950,5952,3,1094,
	547,0,5951,5945,1,0,0,0,5951,5948,1,0,0,0,5952,5955,1,0,0,0,5953,5951,1,
	0,0,0,5953,5954,1,0,0,0,5954,1063,1,0,0,0,5955,5953,1,0,0,0,5956,5957,3,
	1066,533,0,5957,1065,1,0,0,0,5958,5959,3,1068,534,0,5959,1067,1,0,0,0,5960,
	5963,3,950,475,0,5961,5963,3,1070,535,0,5962,5960,1,0,0,0,5962,5961,1,0,
	0,0,5963,1069,1,0,0,0,5964,5970,3,1072,536,0,5965,5970,3,1074,537,0,5966,
	5970,3,1078,539,0,5967,5970,3,1076,538,0,5968,5970,3,1080,540,0,5969,5964,
	1,0,0,0,5969,5965,1,0,0,0,5969,5966,1,0,0,0,5969,5967,1,0,0,0,5969,5968,
	1,0,0,0,5970,1071,1,0,0,0,5971,5985,5,102,0,0,5972,5973,5,109,0,0,5973,
	5975,5,44,0,0,5974,5976,3,1334,667,0,5975,5974,1,0,0,0,5975,5976,1,0,0,
	0,5976,5978,1,0,0,0,5977,5979,3,1082,541,0,5978,5977,1,0,0,0,5978,5979,
	1,0,0,0,5979,5981,1,0,0,0,5980,5982,3,1334,667,0,5981,5980,1,0,0,0,5981,
	5982,1,0,0,0,5982,5983,1,0,0,0,5983,5985,5,45,0,0,5984,5971,1,0,0,0,5984,
	5972,1,0,0,0,5985,1073,1,0,0,0,5986,6000,5,106,0,0,5987,5988,5,275,0,0,
	5988,5990,5,44,0,0,5989,5991,3,1334,667,0,5990,5989,1,0,0,0,5990,5991,1,
	0,0,0,5991,5993,1,0,0,0,5992,5994,3,1084,542,0,5993,5992,1,0,0,0,5993,5994,
	1,0,0,0,5994,5996,1,0,0,0,5995,5997,3,1334,667,0,5996,5995,1,0,0,0,5996,
	5997,1,0,0,0,5997,5998,1,0,0,0,5998,6000,5,45,0,0,5999,5986,1,0,0,0,5999,
	5987,1,0,0,0,6000,1075,1,0,0,0,6001,6002,5,176,0,0,6002,6004,5,44,0,0,6003,
	6005,3,1334,667,0,6004,6003,1,0,0,0,6004,6005,1,0,0,0,6005,6007,1,0,0,0,
	6006,6008,3,1084,542,0,6007,6006,1,0,0,0,6007,6008,1,0,0,0,6008,6010,1,
	0,0,0,6009,6011,3,1334,667,0,6010,6009,1,0,0,0,6010,6011,1,0,0,0,6011,6013,
	1,0,0,0,6012,6014,5,45,0,0,6013,6012,1,0,0,0,6013,6014,1,0,0,0,6014,1077,
	1,0,0,0,6015,6029,5,107,0,0,6016,6017,5,274,0,0,6017,6019,5,44,0,0,6018,
	6020,3,1334,667,0,6019,6018,1,0,0,0,6019,6020,1,0,0,0,6020,6022,1,0,0,0,
	6021,6023,3,1086,543,0,6022,6021,1,0,0,0,6022,6023,1,0,0,0,6023,6025,1,
	0,0,0,6024,6026,3,1334,667,0,6025,6024,1,0,0,0,6025,6026,1,0,0,0,6026,6027,
	1,0,0,0,6027,6029,5,45,0,0,6028,6015,1,0,0,0,6028,6016,1,0,0,0,6029,1079,
	1,0,0,0,6030,6044,5,177,0,0,6031,6032,5,175,0,0,6032,6034,5,44,0,0,6033,
	6035,3,1334,667,0,6034,6033,1,0,0,0,6034,6035,1,0,0,0,6035,6037,1,0,0,0,
	6036,6038,3,1086,543,0,6037,6036,1,0,0,0,6037,6038,1,0,0,0,6038,6040,1,
	0,0,0,6039,6041,3,1334,667,0,6040,6039,1,0,0,0,6040,6041,1,0,0,0,6041,6042,
	1,0,0,0,6042,6044,5,45,0,0,6043,6030,1,0,0,0,6043,6031,1,0,0,0,6044,1081,
	1,0,0,0,6045,6048,3,1240,620,0,6046,6048,3,1138,569,0,6047,6045,1,0,0,0,
	6047,6046,1,0,0,0,6048,1083,1,0,0,0,6049,6052,3,1242,621,0,6050,6052,3,
	1138,569,0,6051,6049,1,0,0,0,6051,6050,1,0,0,0,6052,1085,1,0,0,0,6053,6056,
	3,1244,622,0,6054,6056,3,1138,569,0,6055,6053,1,0,0,0,6055,6054,1,0,0,0,
	6056,1087,1,0,0,0,6057,6058,6,544,-1,0,6058,6061,3,1094,547,0,6059,6061,
	3,1090,545,0,6060,6057,1,0,0,0,6060,6059,1,0,0,0,6061,6082,1,0,0,0,6062,
	6064,10,3,0,0,6063,6065,3,1334,667,0,6064,6063,1,0,0,0,6064,6065,1,0,0,
	0,6065,6066,1,0,0,0,6066,6068,5,26,0,0,6067,6069,3,1334,667,0,6068,6067,
	1,0,0,0,6068,6069,1,0,0,0,6069,6070,1,0,0,0,6070,6081,3,1094,547,0,6071,
	6073,10,2,0,0,6072,6074,3,1334,667,0,6073,6072,1,0,0,0,6073,6074,1,0,0,
	0,6074,6075,1,0,0,0,6075,6077,5,27,0,0,6076,6078,3,1334,667,0,6077,6076,
	1,0,0,0,6077,6078,1,0,0,0,6078,6079,1,0,0,0,6079,6081,3,1094,547,0,6080,
	6062,1,0,0,0,6080,6071,1,0,0,0,6081,6084,1,0,0,0,6082,6080,1,0,0,0,6082,
	6083,1,0,0,0,6083,1089,1,0,0,0,6084,6082,1,0,0,0,6085,6086,5,123,0,0,6086,
	6088,5,44,0,0,6087,6089,3,1334,667,0,6088,6087,1,0,0,0,6088,6089,1,0,0,
	0,6089,6090,1,0,0,0,6090,6092,3,1092,546,0,6091,6093,3,1334,667,0,6092,
	6091,1,0,0,0,6092,6093,1,0,0,0,6093,6094,1,0,0,0,6094,6095,5,45,0,0,6095,
	1091,1,0,0,0,6096,6098,3,1062,531,0,6097,6099,3,1334,667,0,6098,6097,1,
	0,0,0,6098,6099,1,0,0,0,6099,6100,1,0,0,0,6100,6102,5,34,0,0,6101,6103,
	3,1334,667,0,6102,6101,1,0,0,0,6102,6103,1,0,0,0,6103,6104,1,0,0,0,6104,
	6105,3,1062,531,0,6105,1093,1,0,0,0,6106,6107,6,547,-1,0,6107,6119,3,1096,
	548,0,6108,6110,3,944,472,0,6109,6111,3,1334,667,0,6110,6109,1,0,0,0,6110,
	6111,1,0,0,0,6111,6112,1,0,0,0,6112,6114,5,30,0,0,6113,6115,3,1334,667,
	0,6114,6113,1,0,0,0,6114,6115,1,0,0,0,6115,6116,1,0,0,0,6116,6117,3,1096,
	548,0,6117,6119,1,0,0,0,6118,6106,1,0,0,0,6118,6108,1,0,0,0,6119,6140,1,
	0,0,0,6120,6122,10,3,0,0,6121,6123,3,1334,667,0,6122,6121,1,0,0,0,6122,
	6123,1,0,0,0,6123,6124,1,0,0,0,6124,6126,5,30,0,0,6125,6127,3,1334,667,
	0,6126,6125,1,0,0,0,6126,6127,1,0,0,0,6127,6128,1,0,0,0,6128,6139,3,946,
	473,0,6129,6131,10,2,0,0,6130,6132,3,1334,667,0,6131,6130,1,0,0,0,6131,
	6132,1,0,0,0,6132,6133,1,0,0,0,6133,6135,5,48,0,0,6134,6136,3,1334,667,
	0,6135,6134,1,0,0,0,6135,6136,1,0,0,0,6136,6137,1,0,0,0,6137,6139,3,946,
	473,0,6138,6120,1,0,0,0,6138,6129,1,0,0,0,6139,6142,1,0,0,0,6140,6138,1,
	0,0,0,6140,6141,1,0,0,0,6141,1095,1,0,0,0,6142,6140,1,0,0,0,6143,6145,5,
	368,0,0,6144,6143,1,0,0,0,6144,6145,1,0,0,0,6145,6146,1,0,0,0,6146,6147,
	3,1098,549,0,6147,1097,1,0,0,0,6148,6151,3,950,475,0,6149,6151,3,1110,555,
	0,6150,6148,1,0,0,0,6150,6149,1,0,0,0,6151,1099,1,0,0,0,6152,6153,3,1088,
	544,0,6153,1101,1,0,0,0,6154,6155,3,1094,547,0,6155,1103,1,0,0,0,6156,6157,
	3,1094,547,0,6157,1105,1,0,0,0,6158,6159,3,1062,531,0,6159,1107,1,0,0,0,
	6160,6161,3,1062,531,0,6161,1109,1,0,0,0,6162,6165,3,1112,556,0,6163,6165,
	3,1116,558,0,6164,6162,1,0,0,0,6164,6163,1,0,0,0,6165,1111,1,0,0,0,6166,
	6167,5,122,0,0,6167,6169,5,44,0,0,6168,6170,3,1334,667,0,6169,6168,1,0,
	0,0,6169,6170,1,0,0,0,6170,6171,1,0,0,0,6171,6173,3,1114,557,0,6172,6174,
	3,1334,667,0,6173,6172,1,0,0,0,6173,6174,1,0,0,0,6174,6175,1,0,0,0,6175,
	6176,5,45,0,0,6176,1113,1,0,0,0,6177,6180,3,1250,625,0,6178,6180,3,1138,
	569,0,6179,6177,1,0,0,0,6179,6178,1,0,0,0,6180,1115,1,0,0,0,6181,6182,5,
	60,0,0,6182,6184,5,44,0,0,6183,6185,3,1334,667,0,6184,6183,1,0,0,0,6184,
	6185,1,0,0,0,6185,6186,1,0,0,0,6186,6187,3,1088,544,0,6187,6188,3,1334,
	667,0,6188,6189,5,45,0,0,6189,1117,1,0,0,0,6190,6193,3,1120,560,0,6191,
	6193,3,1122,561,0,6192,6190,1,0,0,0,6192,6191,1,0,0,0,6193,1119,1,0,0,0,
	6194,6196,3,1122,561,0,6195,6197,3,1334,667,0,6196,6195,1,0,0,0,6196,6197,
	1,0,0,0,6197,6198,1,0,0,0,6198,6200,5,59,0,0,6199,6201,3,1334,667,0,6200,
	6199,1,0,0,0,6200,6201,1,0,0,0,6201,6202,1,0,0,0,6202,6203,3,1118,559,0,
	6203,1121,1,0,0,0,6204,6207,3,1124,562,0,6205,6207,3,950,475,0,6206,6204,
	1,0,0,0,6206,6205,1,0,0,0,6207,1123,1,0,0,0,6208,6210,3,1126,563,0,6209,
	6211,3,1334,667,0,6210,6209,1,0,0,0,6210,6211,1,0,0,0,6211,6212,1,0,0,0,
	6212,6213,3,1128,564,0,6213,1125,1,0,0,0,6214,6215,5,246,0,0,6215,6217,
	5,44,0,0,6216,6218,3,1334,667,0,6217,6216,1,0,0,0,6217,6218,1,0,0,0,6218,
	6219,1,0,0,0,6219,6221,3,1118,559,0,6220,6222,3,1334,667,0,6221,6220,1,
	0,0,0,6221,6222,1,0,0,0,6222,6223,1,0,0,0,6223,6225,5,34,0,0,6224,6226,
	3,1334,667,0,6225,6224,1,0,0,0,6225,6226,1,0,0,0,6226,6227,1,0,0,0,6227,
	6229,3,942,471,0,6228,6230,3,1334,667,0,6229,6228,1,0,0,0,6229,6230,1,0,
	0,0,6230,6231,1,0,0,0,6231,6232,5,45,0,0,6232,1127,1,0,0,0,6233,6234,5,
	321,0,0,6234,6236,5,44,0,0,6235,6237,3,1334,667,0,6236,6235,1,0,0,0,6236,
	6237,1,0,0,0,6237,6238,1,0,0,0,6238,6240,3,1146,573,0,6239,6241,3,1334,
	667,0,6240,6239,1,0,0,0,6240,6241,1,0,0,0,6241,6242,1,0,0,0,6242,6243,5,
	45,0,0,6243,1129,1,0,0,0,6244,6245,3,1132,566,0,6245,1131,1,0,0,0,6246,
	6248,5,42,0,0,6247,6249,3,1334,667,0,6248,6247,1,0,0,0,6248,6249,1,0,0,
	0,6249,6250,1,0,0,0,6250,6252,3,766,383,0,6251,6253,3,1334,667,0,6252,6251,
	1,0,0,0,6252,6253,1,0,0,0,6253,6254,1,0,0,0,6254,6255,5,43,0,0,6255,6257,
	5,42,0,0,6256,6258,3,1334,667,0,6257,6256,1,0,0,0,6257,6258,1,0,0,0,6258,
	6259,1,0,0,0,6259,6261,3,1134,567,0,6260,6262,3,1334,667,0,6261,6260,1,
	0,0,0,6261,6262,1,0,0,0,6262,6263,1,0,0,0,6263,6264,5,43,0,0,6264,1133,
	1,0,0,0,6265,6276,3,1136,568,0,6266,6268,3,1334,667,0,6267,6266,1,0,0,0,
	6267,6268,1,0,0,0,6268,6269,1,0,0,0,6269,6271,5,34,0,0,6270,6272,3,1334,
	667,0,6271,6270,1,0,0,0,6271,6272,1,0,0,0,6272,6273,1,0,0,0,6273,6275,3,
	1136,568,0,6274,6267,1,0,0,0,6275,6278,1,0,0,0,6276,6274,1,0,0,0,6276,6277,
	1,0,0,0,6277,1135,1,0,0,0,6278,6276,1,0,0,0,6279,6280,3,908,454,0,6280,
	1137,1,0,0,0,6281,6282,5,215,0,0,6282,6284,3,1334,667,0,6283,6281,1,0,0,
	0,6283,6284,1,0,0,0,6284,6285,1,0,0,0,6285,6286,3,1140,570,0,6286,1139,
	1,0,0,0,6287,6289,5,40,0,0,6288,6290,3,1334,667,0,6289,6288,1,0,0,0,6289,
	6290,1,0,0,0,6290,6292,1,0,0,0,6291,6293,3,1142,571,0,6292,6291,1,0,0,0,
	6292,6293,1,0,0,0,6293,6295,1,0,0,0,6294,6296,3,1334,667,0,6295,6294,1,
	0,0,0,6295,6296,1,0,0,0,6296,6297,1,0,0,0,6297,6298,5,41,0,0,6298,1141,
	1,0,0,0,6299,6310,3,1144,572,0,6300,6302,3,1334,667,0,6301,6300,1,0,0,0,
	6301,6302,1,0,0,0,6302,6303,1,0,0,0,6303,6305,5,34,0,0,6304,6306,3,1334,
	667,0,6305,6304,1,0,0,0,6305,6306,1,0,0,0,6306,6307,1,0,0,0,6307,6309,3,
	1144,572,0,6308,6301,1,0,0,0,6309,6312,1,0,0,0,6310,6308,1,0,0,0,6310,6311,
	1,0,0,0,6311,1143,1,0,0,0,6312,6310,1,0,0,0,6313,6315,3,1288,644,0,6314,
	6316,3,1334,667,0,6315,6314,1,0,0,0,6315,6316,1,0,0,0,6316,6317,1,0,0,0,
	6317,6319,5,32,0,0,6318,6320,3,1334,667,0,6319,6318,1,0,0,0,6319,6320,1,
	0,0,0,6320,6321,1,0,0,0,6321,6322,3,908,454,0,6322,1145,1,0,0,0,6323,6326,
	3,1148,574,0,6324,6326,3,1150,575,0,6325,6323,1,0,0,0,6325,6324,1,0,0,0,
	6326,1147,1,0,0,0,6327,6329,3,1150,575,0,6328,6330,3,1334,667,0,6329,6328,
	1,0,0,0,6329,6330,1,0,0,0,6330,6331,1,0,0,0,6331,6333,5,59,0,0,6332,6334,
	3,1334,667,0,6333,6332,1,0,0,0,6333,6334,1,0,0,0,6334,6335,1,0,0,0,6335,
	6336,3,1146,573,0,6336,1149,1,0,0,0,6337,6338,3,950,475,0,6338,1151,1,0,
	0,0,6339,6340,3,1154,577,0,6340,1153,1,0,0,0,6341,6342,5,205,0,0,6342,6344,
	5,44,0,0,6343,6345,3,1334,667,0,6344,6343,1,0,0,0,6344,6345,1,0,0,0,6345,
	6346,1,0,0,0,6346,6348,3,1156,578,0,6347,6349,3,1334,667,0,6348,6347,1,
	0,0,0,6348,6349,1,0,0,0,6349,6350,1,0,0,0,6350,6351,5,45,0,0,6351,1155,
	1,0,0,0,6352,6356,3,1158,579,0,6353,6354,3,1334,667,0,6354,6355,3,1160,
	580,0,6355,6357,1,0,0,0,6356,6353,1,0,0,0,6356,6357,1,0,0,0,6357,1157,1,
	0,0,0,6358,6359,3,918,459,0,6359,1159,1,0,0,0,6360,6362,5,34,0,0,6361,6363,
	3,1334,667,0,6362,6361,1,0,0,0,6362,6363,1,0,0,0,6363,6364,1,0,0,0,6364,
	6366,3,920,460,0,6365,6367,3,1334,667,0,6366,6365,1,0,0,0,6366,6367,1,0,
	0,0,6367,6368,1,0,0,0,6368,6370,5,34,0,0,6369,6371,3,1334,667,0,6370,6369,
	1,0,0,0,6370,6371,1,0,0,0,6371,6372,1,0,0,0,6372,6373,3,918,459,0,6373,
	1161,1,0,0,0,6374,6375,3,1164,582,0,6375,6376,5,54,0,0,6376,6377,3,1286,
	643,0,6377,1163,1,0,0,0,6378,6382,3,918,459,0,6379,6382,3,920,460,0,6380,
	6382,3,922,461,0,6381,6378,1,0,0,0,6381,6379,1,0,0,0,6381,6380,1,0,0,0,
	6382,1165,1,0,0,0,6383,6385,5,263,0,0,6384,6386,3,1334,667,0,6385,6384,
	1,0,0,0,6385,6386,1,0,0,0,6386,6387,1,0,0,0,6387,6388,3,54,27,0,6388,1167,
	1,0,0,0,6389,6392,3,1170,585,0,6390,6392,3,1172,586,0,6391,6389,1,0,0,0,
	6391,6390,1,0,0,0,6392,1169,1,0,0,0,6393,6394,5,194,0,0,6394,6396,5,44,
	0,0,6395,6397,3,1334,667,0,6396,6395,1,0,0,0,6396,6397,1,0,0,0,6397,6398,
	1,0,0,0,6398,6400,3,908,454,0,6399,6401,3,1334,667,0,6400,6399,1,0,0,0,
	6400,6401,1,0,0,0,6401,6402,1,0,0,0,6402,6404,5,34,0,0,6403,6405,3,1334,
	667,0,6404,6403,1,0,0,0,6404,6405,1,0,0,0,6405,6406,1,0,0,0,6406,6408,3,
	908,454,0,6407,6409,3,1334,667,0,6408,6407,1,0,0,0,6408,6409,1,0,0,0,6409,
	6410,1,0,0,0,6410,6411,5,45,0,0,6411,6437,1,0,0,0,6412,6413,5,93,0,0,6413,
	6415,5,44,0,0,6414,6416,3,1334,667,0,6415,6414,1,0,0,0,6415,6416,1,0,0,
	0,6416,6417,1,0,0,0,6417,6428,3,908,454,0,6418,6420,3,1334,667,0,6419,6418,
	1,0,0,0,6419,6420,1,0,0,0,6420,6421,1,0,0,0,6421,6423,5,34,0,0,6422,6424,
	3,1334,667,0,6423,6422,1,0,0,0,6423,6424,1,0,0,0,6424,6425,1,0,0,0,6425,
	6427,3,908,454,0,6426,6419,1,0,0,0,6427,6430,1,0,0,0,6428,6426,1,0,0,0,
	6428,6429,1,0,0,0,6429,6432,1,0,0,0,6430,6428,1,0,0,0,6431,6433,3,1334,
	667,0,6432,6431,1,0,0,0,6432,6433,1,0,0,0,6433,6434,1,0,0,0,6434,6435,5,
	45,0,0,6435,6437,1,0,0,0,6436,6393,1,0,0,0,6436,6412,1,0,0,0,6437,1171,
	1,0,0,0,6438,6441,3,1174,587,0,6439,6441,3,1176,588,0,6440,6438,1,0,0,0,
	6440,6439,1,0,0,0,6441,1173,1,0,0,0,6442,6443,5,85,0,0,6443,6444,3,1334,
	667,0,6444,6445,3,1184,592,0,6445,6446,3,1334,667,0,6446,6450,3,1178,589,
	0,6447,6448,3,1334,667,0,6448,6449,3,1182,591,0,6449,6451,1,0,0,0,6450,
	6447,1,0,0,0,6450,6451,1,0,0,0,6451,6452,1,0,0,0,6452,6453,3,1334,667,0,
	6453,6454,5,126,0,0,6454,1175,1,0,0,0,6455,6456,5,85,0,0,6456,6457,3,1334,
	667,0,6457,6461,3,1180,590,0,6458,6459,3,1334,667,0,6459,6460,3,1182,591,
	0,6460,6462,1,0,0,0,6461,6458,1,0,0,0,6461,6462,1,0,0,0,6462,6463,1,0,0,
	0,6463,6464,3,1334,667,0,6464,6465,5,126,0,0,6465,1177,1,0,0,0,6466,6467,
	5,267,0,0,6467,6468,3,1334,667,0,6468,6469,3,1186,593,0,6469,6470,3,1334,
	667,0,6470,6471,5,242,0,0,6471,6472,3,1334,667,0,6472,6473,3,1190,595,0,
	6473,1179,1,0,0,0,6474,6475,5,267,0,0,6475,6476,3,1334,667,0,6476,6477,
	3,834,417,0,6477,6478,3,1334,667,0,6478,6479,5,242,0,0,6479,6480,3,1334,
	667,0,6480,6481,3,1190,595,0,6481,1181,1,0,0,0,6482,6483,5,125,0,0,6483,
	6484,3,1190,595,0,6484,1183,1,0,0,0,6485,6488,3,954,477,0,6486,6488,3,300,
	150,0,6487,6485,1,0,0,0,6487,6486,1,0,0,0,6488,1185,1,0,0,0,6489,6500,3,
	1188,594,0,6490,6492,3,1334,667,0,6491,6490,1,0,0,0,6491,6492,1,0,0,0,6492,
	6493,1,0,0,0,6493,6495,5,34,0,0,6494,6496,3,1334,667,0,6495,6494,1,0,0,
	0,6495,6496,1,0,0,0,6496,6497,1,0,0,0,6497,6499,3,1188,594,0,6498,6491,
	1,0,0,0,6499,6502,1,0,0,0,6500,6498,1,0,0,0,6500,6501,1,0,0,0,6501,1187,
	1,0,0,0,6502,6500,1,0,0,0,6503,6512,3,954,477,0,6504,6512,3,840,420,0,6505,
	6512,3,862,431,0,6506,6512,3,866,433,0,6507,6512,3,874,437,0,6508,6512,
	3,878,439,0,6509,6512,3,886,443,0,6510,6512,3,888,444,0,6511,6503,1,0,0,
	0,6511,6504,1,0,0,0,6511,6505,1,0,0,0,6511,6506,1,0,0,0,6511,6507,1,0,0,
	0,6511,6508,1,0,0,0,6511,6509,1,0,0,0,6511,6510,1,0,0,0,6512,1189,1,0,0,
	0,6513,6516,3,1192,596,0,6514,6516,5,192,0,0,6515,6513,1,0,0,0,6515,6514,
	1,0,0,0,6516,1191,1,0,0,0,6517,6518,3,908,454,0,6518,1193,1,0,0,0,6519,
	6520,5,86,0,0,6520,6522,5,44,0,0,6521,6523,3,1334,667,0,6522,6521,1,0,0,
	0,6522,6523,1,0,0,0,6523,6524,1,0,0,0,6524,6525,3,1196,598,0,6525,6526,
	3,1334,667,0,6526,6527,5,67,0,0,6527,6528,3,1334,667,0,6528,6530,3,1198,
	599,0,6529,6531,3,1334,667,0,6530,6529,1,0,0,0,6530,6531,1,0,0,0,6531,6532,
	1,0,0,0,6532,6533,5,45,0,0,6533,1195,1,0,0,0,6534,6535,3,908,454,0,6535,
	1197,1,0,0,0,6536,6537,3,684,342,0,6537,1199,1,0,0,0,6538,6539,5,124,0,
	0,6539,6541,5,44,0,0,6540,6542,3,1334,667,0,6541,6540,1,0,0,0,6541,6542,
	1,0,0,0,6542,6543,1,0,0,0,6543,6545,3,300,150,0,6544,6546,3,1334,667,0,
	6545,6544,1,0,0,0,6545,6546,1,0,0,0,6546,6547,1,0,0,0,6547,6548,5,45,0,
	0,6548,1201,1,0,0,0,6549,6551,5,169,0,0,6550,6552,3,1334,667,0,6551,6550,
	1,0,0,0,6551,6552,1,0,0,0,6552,6553,1,0,0,0,6553,6555,3,234,117,0,6554,
	6556,3,1334,667,0,6555,6554,1,0,0,0,6555,6556,1,0,0,0,6556,6557,1,0,0,0,
	6557,6559,5,149,0,0,6558,6560,3,1334,667,0,6559,6558,1,0,0,0,6559,6560,
	1,0,0,0,6560,6561,1,0,0,0,6561,6563,3,908,454,0,6562,6564,3,1334,667,0,
	6563,6562,1,0,0,0,6563,6564,1,0,0,0,6564,6565,1,0,0,0,6565,6566,5,126,0,
	0,6566,1203,1,0,0,0,6567,6570,5,367,0,0,6568,6570,3,1206,603,0,6569,6567,
	1,0,0,0,6569,6568,1,0,0,0,6570,1205,1,0,0,0,6571,6575,3,1208,604,0,6572,
	6575,3,1258,629,0,6573,6575,3,1260,630,0,6574,6571,1,0,0,0,6574,6572,1,
	0,0,0,6574,6573,1,0,0,0,6575,1207,1,0,0,0,6576,6583,3,1212,606,0,6577,6583,
	3,1214,607,0,6578,6583,5,384,0,0,6579,6583,3,1232,616,0,6580,6583,3,1248,
	624,0,6581,6583,3,1256,628,0,6582,6576,1,0,0,0,6582,6577,1,0,0,0,6582,6578,
	1,0,0,0,6582,6579,1,0,0,0,6582,6580,1,0,0,0,6582,6581,1,0,0,0,6583,1209,
	1,0,0,0,6584,6587,5,366,0,0,6585,6587,3,1206,603,0,6586,6584,1,0,0,0,6586,
	6585,1,0,0,0,6587,1211,1,0,0,0,6588,6589,7,24,0,0,6589,1213,1,0,0,0,6590,
	6594,3,1218,609,0,6591,6594,3,1220,610,0,6592,6594,3,1222,611,0,6593,6590,
	1,0,0,0,6593,6591,1,0,0,0,6593,6592,1,0,0,0,6594,1215,1,0,0,0,6595,6597,
	3,1224,612,0,6596,6595,1,0,0,0,6596,6597,1,0,0,0,6597,6598,1,0,0,0,6598,
	6604,3,1226,613,0,6599,6601,3,1224,612,0,6600,6599,1,0,0,0,6600,6601,1,
	0,0,0,6601,6602,1,0,0,0,6602,6604,3,1228,614,0,6603,6596,1,0,0,0,6603,6600,
	1,0,0,0,6604,1217,1,0,0,0,6605,6607,3,1224,612,0,6606,6605,1,0,0,0,6606,
	6607,1,0,0,0,6607,6608,1,0,0,0,6608,6619,3,1226,613,0,6609,6611,3,1334,
	667,0,6610,6609,1,0,0,0,6610,6611,1,0,0,0,6611,6612,1,0,0,0,6612,6614,5,
	52,0,0,6613,6615,3,1334,667,0,6614,6613,1,0,0,0,6614,6615,1,0,0,0,6615,
	6616,1,0,0,0,6616,6618,3,1226,613,0,6617,6610,1,0,0,0,6618,6621,1,0,0,0,
	6619,6617,1,0,0,0,6619,6620,1,0,0,0,6620,1219,1,0,0,0,6621,6619,1,0,0,0,
	6622,6624,3,1224,612,0,6623,6622,1,0,0,0,6623,6624,1,0,0,0,6624,6625,1,
	0,0,0,6625,6636,3,1228,614,0,6626,6628,3,1334,667,0,6627,6626,1,0,0,0,6627,
	6628,1,0,0,0,6628,6629,1,0,0,0,6629,6631,5,52,0,0,6630,6632,3,1334,667,
	0,6631,6630,1,0,0,0,6631,6632,1,0,0,0,6632,6633,1,0,0,0,6633,6635,3,1228,
	614,0,6634,6627,1,0,0,0,6635,6638,1,0,0,0,6636,6634,1,0,0,0,6636,6637,1,
	0,0,0,6637,1221,1,0,0,0,6638,6636,1,0,0,0,6639,6641,3,1224,612,0,6640,6639,
	1,0,0,0,6640,6641,1,0,0,0,6641,6642,1,0,0,0,6642,6653,3,1230,615,0,6643,
	6645,3,1334,667,0,6644,6643,1,0,0,0,6644,6645,1,0,0,0,6645,6646,1,0,0,0,
	6646,6648,5,52,0,0,6647,6649,3,1334,667,0,6648,6647,1,0,0,0,6648,6649,1,
	0,0,0,6649,6650,1,0,0,0,6650,6652,3,1230,615,0,6651,6644,1,0,0,0,6652,6655,
	1,0,0,0,6653,6651,1,0,0,0,6653,6654,1,0,0,0,6654,1223,1,0,0,0,6655,6653,
	1,0,0,0,6656,6657,5,56,0,0,6657,1225,1,0,0,0,6658,6659,5,385,0,0,6659,1227,
	1,0,0,0,6660,6661,5,386,0,0,6661,1229,1,0,0,0,6662,6663,5,387,0,0,6663,
	1231,1,0,0,0,6664,6669,3,1234,617,0,6665,6669,3,1236,618,0,6666,6669,3,
	1238,619,0,6667,6669,3,1246,623,0,6668,6664,1,0,0,0,6668,6665,1,0,0,0,6668,
	6666,1,0,0,0,6668,6667,1,0,0,0,6669,1233,1,0,0,0,6670,6671,5,109,0,0,6671,
	6672,3,1334,667,0,6672,6673,3,1216,608,0,6673,1235,1,0,0,0,6674,6675,5,
	243,0,0,6675,6676,3,1334,667,0,6676,6677,3,1216,608,0,6677,1237,1,0,0,0,
	6678,6679,5,110,0,0,6679,6680,3,1334,667,0,6680,6681,3,1216,608,0,6681,
	6687,1,0,0,0,6682,6683,5,244,0,0,6683,6684,3,1334,667,0,6684,6685,3,1216,
	608,0,6685,6687,1,0,0,0,6686,6678,1,0,0,0,6686,6682,1,0,0,0,6687,1239,1,
	0,0,0,6688,6689,3,1216,608,0,6689,1241,1,0,0,0,6690,6691,3,1216,608,0,6691,
	1243,1,0,0,0,6692,6693,3,1216,608,0,6693,1245,1,0,0,0,6694,6695,5,109,0,
	0,6695,6696,3,1334,667,0,6696,6697,5,22,0,0,6697,6698,5,377,0,0,6698,6699,
	5,27,0,0,6699,6700,5,378,0,0,6700,6701,5,27,0,0,6701,6702,5,378,0,0,6702,
	6703,5,22,0,0,6703,6747,1,0,0,0,6704,6705,5,243,0,0,6705,6706,3,1334,667,
	0,6706,6707,5,22,0,0,6707,6708,5,378,0,0,6708,6709,5,32,0,0,6709,6710,5,
	378,0,0,6710,6711,5,32,0,0,6711,6712,5,378,0,0,6712,6713,5,22,0,0,6713,
	6747,1,0,0,0,6714,6715,5,244,0,0,6715,6716,3,1334,667,0,6716,6717,5,22,
	0,0,6717,6718,5,377,0,0,6718,6719,5,27,0,0,6719,6720,5,378,0,0,6720,6721,
	5,27,0,0,6721,6722,5,378,0,0,6722,6723,3,1334,667,0,6723,6724,5,378,0,0,
	6724,6725,5,32,0,0,6725,6726,5,378,0,0,6726,6727,5,32,0,0,6727,6728,5,378,
	0,0,6728,6729,5,22,0,0,6729,6747,1,0,0,0,6730,6731,5,110,0,0,6731,6732,
	3,1334,667,0,6732,6733,5,22,0,0,6733,6734,5,377,0,0,6734,6735,5,27,0,0,
	6735,6736,5,378,0,0,6736,6737,5,27,0,0,6737,6738,5,378,0,0,6738,6739,3,
	1334,667,0,6739,6740,5,378,0,0,6740,6741,5,32,0,0,6741,6742,5,378,0,0,6742,
	6743,5,32,0,0,6743,6744,5,378,0,0,6744,6745,5,22,0,0,6745,6747,1,0,0,0,
	6746,6694,1,0,0,0,6746,6704,1,0,0,0,6746,6714,1,0,0,0,6746,6730,1,0,0,0,
	6747,1247,1,0,0,0,6748,6749,5,122,0,0,6749,6750,3,1334,667,0,6750,6751,
	3,1250,625,0,6751,6754,1,0,0,0,6752,6754,3,1252,626,0,6753,6748,1,0,0,0,
	6753,6752,1,0,0,0,6754,1249,1,0,0,0,6755,6756,3,1216,608,0,6756,1251,1,
	0,0,0,6757,6759,5,379,0,0,6758,6760,3,1334,667,0,6759,6758,1,0,0,0,6759,
	6760,1,0,0,0,6760,6761,1,0,0,0,6761,6762,3,1254,627,0,6762,1253,1,0,0,0,
	6763,6764,7,33,0,0,6764,1255,1,0,0,0,6765,6766,5,192,0,0,6766,1257,1,0,
	0,0,6767,6768,3,1132,566,0,6768,1259,1,0,0,0,6769,6770,3,1138,569,0,6770,
	1261,1,0,0,0,6771,6772,3,1316,658,0,6772,1263,1,0,0,0,6773,6774,5,395,0,
	0,6774,1265,1,0,0,0,6775,6776,3,1316,658,0,6776,1267,1,0,0,0,6777,6778,
	3,1316,658,0,6778,1269,1,0,0,0,6779,6782,5,395,0,0,6780,6782,3,1272,636,
	0,6781,6779,1,0,0,0,6781,6780,1,0,0,0,6782,1271,1,0,0,0,6783,6784,3,1322,
	661,0,6784,1273,1,0,0,0,6785,6786,3,1316,658,0,6786,1275,1,0,0,0,6787,6788,
	3,1316,658,0,6788,1277,1,0,0,0,6789,6792,5,395,0,0,6790,6792,3,1280,640,
	0,6791,6789,1,0,0,0,6791,6790,1,0,0,0,6792,1279,1,0,0,0,6793,6794,3,1322,
	661,0,6794,1281,1,0,0,0,6795,6796,3,1316,658,0,6796,1283,1,0,0,0,6797,6798,
	3,1316,658,0,6798,1285,1,0,0,0,6799,6800,3,1316,658,0,6800,1287,1,0,0,0,
	6801,6802,3,1316,658,0,6802,1289,1,0,0,0,6803,6804,5,35,0,0,6804,6805,3,
	1318,659,0,6805,1291,1,0,0,0,6806,6812,3,1294,647,0,6807,6812,3,1296,648,
	0,6808,6812,3,1306,653,0,6809,6812,3,1308,654,0,6810,6812,3,1310,655,0,
	6811,6806,1,0,0,0,6811,6807,1,0,0,0,6811,6808,1,0,0,0,6811,6809,1,0,0,0,
	6811,6810,1,0,0,0,6812,1293,1,0,0,0,6813,6814,3,1310,655,0,6814,1295,1,
	0,0,0,6815,6818,3,1300,650,0,6816,6818,3,1298,649,0,6817,6815,1,0,0,0,6817,
	6816,1,0,0,0,6818,1297,1,0,0,0,6819,6822,3,1302,651,0,6820,6822,3,1304,
	652,0,6821,6819,1,0,0,0,6821,6820,1,0,0,0,6822,1299,1,0,0,0,6823,6824,3,
	1310,655,0,6824,1301,1,0,0,0,6825,6826,3,1310,655,0,6826,1303,1,0,0,0,6827,
	6828,5,395,0,0,6828,1305,1,0,0,0,6829,6830,3,1310,655,0,6830,1307,1,0,0,
	0,6831,6832,3,1310,655,0,6832,1309,1,0,0,0,6833,6834,5,395,0,0,6834,1311,
	1,0,0,0,6835,6838,3,1314,657,0,6836,6838,3,1332,666,0,6837,6835,1,0,0,0,
	6837,6836,1,0,0,0,6838,1313,1,0,0,0,6839,6846,5,395,0,0,6840,6846,3,1290,
	645,0,6841,6846,3,1324,662,0,6842,6846,5,366,0,0,6843,6846,5,384,0,0,6844,
	6846,5,58,0,0,6845,6839,1,0,0,0,6845,6840,1,0,0,0,6845,6841,1,0,0,0,6845,
	6842,1,0,0,0,6845,6843,1,0,0,0,6845,6844,1,0,0,0,6846,1315,1,0,0,0,6847,
	6850,5,395,0,0,6848,6850,3,1322,661,0,6849,6847,1,0,0,0,6849,6848,1,0,0,
	0,6850,1317,1,0,0,0,6851,6854,5,395,0,0,6852,6854,3,1322,661,0,6853,6851,
	1,0,0,0,6853,6852,1,0,0,0,6854,1319,1,0,0,0,6855,6856,7,34,0,0,6856,1321,
	1,0,0,0,6857,6860,3,1220,610,0,6858,6860,3,1222,611,0,6859,6857,1,0,0,0,
	6859,6858,1,0,0,0,6860,1323,1,0,0,0,6861,6864,3,1326,663,0,6862,6864,3,
	1330,665,0,6863,6861,1,0,0,0,6863,6862,1,0,0,0,6864,1325,1,0,0,0,6865,7083,
	3,1328,664,0,6866,7083,5,60,0,0,6867,7083,5,61,0,0,6868,7083,5,62,0,0,6869,
	7083,5,63,0,0,6870,7083,5,64,0,0,6871,7083,5,65,0,0,6872,7083,5,66,0,0,
	6873,7083,5,67,0,0,6874,7083,5,68,0,0,6875,7083,5,69,0,0,6876,7083,5,70,
	0,0,6877,7083,5,71,0,0,6878,7083,5,72,0,0,6879,7083,5,73,0,0,6880,7083,
	5,74,0,0,6881,7083,5,75,0,0,6882,7083,5,76,0,0,6883,7083,5,77,0,0,6884,
	7083,5,78,0,0,6885,7083,5,79,0,0,6886,7083,5,80,0,0,6887,7083,5,81,0,0,
	6888,7083,5,82,0,0,6889,7083,5,83,0,0,6890,7083,5,84,0,0,6891,7083,5,85,
	0,0,6892,7083,5,86,0,0,6893,7083,5,87,0,0,6894,7083,5,88,0,0,6895,7083,
	5,89,0,0,6896,7083,5,90,0,0,6897,7083,5,91,0,0,6898,7083,5,92,0,0,6899,
	7083,5,93,0,0,6900,7083,5,94,0,0,6901,7083,5,95,0,0,6902,7083,5,96,0,0,
	6903,7083,5,97,0,0,6904,7083,5,98,0,0,6905,7083,5,99,0,0,6906,7083,5,100,
	0,0,6907,7083,5,101,0,0,6908,7083,5,102,0,0,6909,7083,5,103,0,0,6910,7083,
	5,104,0,0,6911,7083,5,105,0,0,6912,7083,5,106,0,0,6913,7083,5,107,0,0,6914,
	7083,5,108,0,0,6915,7083,5,109,0,0,6916,7083,5,110,0,0,6917,7083,5,111,
	0,0,6918,7083,5,112,0,0,6919,7083,5,113,0,0,6920,7083,5,114,0,0,6921,7083,
	5,115,0,0,6922,7083,5,116,0,0,6923,7083,5,117,0,0,6924,7083,5,118,0,0,6925,
	7083,5,119,0,0,6926,7083,5,120,0,0,6927,7083,5,121,0,0,6928,7083,5,122,
	0,0,6929,7083,5,123,0,0,6930,7083,5,124,0,0,6931,7083,5,125,0,0,6932,7083,
	5,126,0,0,6933,7083,5,127,0,0,6934,7083,5,128,0,0,6935,7083,5,129,0,0,6936,
	7083,5,130,0,0,6937,7083,5,131,0,0,6938,7083,5,132,0,0,6939,7083,5,133,
	0,0,6940,7083,5,134,0,0,6941,7083,5,135,0,0,6942,7083,5,136,0,0,6943,7083,
	5,137,0,0,6944,7083,5,138,0,0,6945,7083,5,139,0,0,6946,7083,5,140,0,0,6947,
	7083,5,141,0,0,6948,7083,5,142,0,0,6949,7083,5,143,0,0,6950,7083,5,144,
	0,0,6951,7083,5,145,0,0,6952,7083,5,146,0,0,6953,7083,5,147,0,0,6954,7083,
	5,148,0,0,6955,7083,5,149,0,0,6956,7083,5,150,0,0,6957,7083,5,151,0,0,6958,
	7083,5,152,0,0,6959,7083,5,153,0,0,6960,7083,5,154,0,0,6961,7083,5,155,
	0,0,6962,7083,5,156,0,0,6963,7083,5,157,0,0,6964,7083,5,158,0,0,6965,7083,
	5,159,0,0,6966,7083,5,160,0,0,6967,7083,5,161,0,0,6968,7083,5,162,0,0,6969,
	7083,5,163,0,0,6970,7083,5,164,0,0,6971,7083,5,165,0,0,6972,7083,5,166,
	0,0,6973,7083,5,167,0,0,6974,7083,5,168,0,0,6975,7083,5,169,0,0,6976,7083,
	5,170,0,0,6977,7083,5,171,0,0,6978,7083,5,172,0,0,6979,7083,5,173,0,0,6980,
	7083,5,174,0,0,6981,7083,5,175,0,0,6982,7083,5,176,0,0,6983,7083,5,177,
	0,0,6984,7083,5,178,0,0,6985,7083,5,179,0,0,6986,7083,5,180,0,0,6987,7083,
	5,181,0,0,6988,7083,5,182,0,0,6989,7083,5,183,0,0,6990,7083,5,184,0,0,6991,
	7083,5,185,0,0,6992,7083,5,186,0,0,6993,7083,5,187,0,0,6994,7083,5,188,
	0,0,6995,7083,5,189,0,0,6996,7083,5,190,0,0,6997,7083,5,191,0,0,6998,7083,
	5,192,0,0,6999,7083,5,193,0,0,7000,7083,5,194,0,0,7001,7083,5,195,0,0,7002,
	7083,5,196,0,0,7003,7083,5,197,0,0,7004,7083,5,198,0,0,7005,7083,5,199,
	0,0,7006,7083,5,200,0,0,7007,7083,5,201,0,0,7008,7083,5,202,0,0,7009,7083,
	5,203,0,0,7010,7083,5,204,0,0,7011,7083,5,205,0,0,7012,7083,5,206,0,0,7013,
	7083,5,207,0,0,7014,7083,5,208,0,0,7015,7083,5,209,0,0,7016,7083,5,210,
	0,0,7017,7083,5,211,0,0,7018,7083,5,212,0,0,7019,7083,5,213,0,0,7020,7083,
	5,214,0,0,7021,7083,5,215,0,0,7022,7083,5,216,0,0,7023,7083,5,217,0,0,7024,
	7083,5,218,0,0,7025,7083,5,219,0,0,7026,7083,5,220,0,0,7027,7083,5,221,
	0,0,7028,7083,5,222,0,0,7029,7083,5,223,0,0,7030,7083,5,224,0,0,7031,7083,
	5,225,0,0,7032,7083,5,226,0,0,7033,7083,5,227,0,0,7034,7083,5,228,0,0,7035,
	7083,5,229,0,0,7036,7083,5,230,0,0,7037,7083,5,231,0,0,7038,7083,5,232,
	0,0,7039,7083,5,233,0,0,7040,7083,5,234,0,0,7041,7083,5,235,0,0,7042,7083,
	5,236,0,0,7043,7083,5,237,0,0,7044,7083,5,238,0,0,7045,7083,5,239,0,0,7046,
	7083,5,240,0,0,7047,7083,5,241,0,0,7048,7083,5,242,0,0,7049,7083,5,243,
	0,0,7050,7083,5,244,0,0,7051,7083,5,245,0,0,7052,7083,5,246,0,0,7053,7083,
	5,247,0,0,7054,7083,5,248,0,0,7055,7083,5,249,0,0,7056,7083,5,250,0,0,7057,
	7083,5,251,0,0,7058,7083,5,252,0,0,7059,7083,5,253,0,0,7060,7083,5,254,
	0,0,7061,7083,5,255,0,0,7062,7083,5,256,0,0,7063,7083,5,257,0,0,7064,7083,
	5,258,0,0,7065,7083,5,259,0,0,7066,7083,5,260,0,0,7067,7083,5,261,0,0,7068,
	7083,5,262,0,0,7069,7083,5,263,0,0,7070,7083,5,264,0,0,7071,7083,5,265,
	0,0,7072,7083,5,266,0,0,7073,7083,5,267,0,0,7074,7083,5,268,0,0,7075,7083,
	5,269,0,0,7076,7083,5,270,0,0,7077,7083,5,271,0,0,7078,7083,5,272,0,0,7079,
	7083,5,273,0,0,7080,7083,5,274,0,0,7081,7083,5,275,0,0,7082,6865,1,0,0,
	0,7082,6866,1,0,0,0,7082,6867,1,0,0,0,7082,6868,1,0,0,0,7082,6869,1,0,0,
	0,7082,6870,1,0,0,0,7082,6871,1,0,0,0,7082,6872,1,0,0,0,7082,6873,1,0,0,
	0,7082,6874,1,0,0,0,7082,6875,1,0,0,0,7082,6876,1,0,0,0,7082,6877,1,0,0,
	0,7082,6878,1,0,0,0,7082,6879,1,0,0,0,7082,6880,1,0,0,0,7082,6881,1,0,0,
	0,7082,6882,1,0,0,0,7082,6883,1,0,0,0,7082,6884,1,0,0,0,7082,6885,1,0,0,
	0,7082,6886,1,0,0,0,7082,6887,1,0,0,0,7082,6888,1,0,0,0,7082,6889,1,0,0,
	0,7082,6890,1,0,0,0,7082,6891,1,0,0,0,7082,6892,1,0,0,0,7082,6893,1,0,0,
	0,7082,6894,1,0,0,0,7082,6895,1,0,0,0,7082,6896,1,0,0,0,7082,6897,1,0,0,
	0,7082,6898,1,0,0,0,7082,6899,1,0,0,0,7082,6900,1,0,0,0,7082,6901,1,0,0,
	0,7082,6902,1,0,0,0,7082,6903,1,0,0,0,7082,6904,1,0,0,0,7082,6905,1,0,0,
	0,7082,6906,1,0,0,0,7082,6907,1,0,0,0,7082,6908,1,0,0,0,7082,6909,1,0,0,
	0,7082,6910,1,0,0,0,7082,6911,1,0,0,0,7082,6912,1,0,0,0,7082,6913,1,0,0,
	0,7082,6914,1,0,0,0,7082,6915,1,0,0,0,7082,6916,1,0,0,0,7082,6917,1,0,0,
	0,7082,6918,1,0,0,0,7082,6919,1,0,0,0,7082,6920,1,0,0,0,7082,6921,1,0,0,
	0,7082,6922,1,0,0,0,7082,6923,1,0,0,0,7082,6924,1,0,0,0,7082,6925,1,0,0,
	0,7082,6926,1,0,0,0,7082,6927,1,0,0,0,7082,6928,1,0,0,0,7082,6929,1,0,0,
	0,7082,6930,1,0,0,0,7082,6931,1,0,0,0,7082,6932,1,0,0,0,7082,6933,1,0,0,
	0,7082,6934,1,0,0,0,7082,6935,1,0,0,0,7082,6936,1,0,0,0,7082,6937,1,0,0,
	0,7082,6938,1,0,0,0,7082,6939,1,0,0,0,7082,6940,1,0,0,0,7082,6941,1,0,0,
	0,7082,6942,1,0,0,0,7082,6943,1,0,0,0,7082,6944,1,0,0,0,7082,6945,1,0,0,
	0,7082,6946,1,0,0,0,7082,6947,1,0,0,0,7082,6948,1,0,0,0,7082,6949,1,0,0,
	0,7082,6950,1,0,0,0,7082,6951,1,0,0,0,7082,6952,1,0,0,0,7082,6953,1,0,0,
	0,7082,6954,1,0,0,0,7082,6955,1,0,0,0,7082,6956,1,0,0,0,7082,6957,1,0,0,
	0,7082,6958,1,0,0,0,7082,6959,1,0,0,0,7082,6960,1,0,0,0,7082,6961,1,0,0,
	0,7082,6962,1,0,0,0,7082,6963,1,0,0,0,7082,6964,1,0,0,0,7082,6965,1,0,0,
	0,7082,6966,1,0,0,0,7082,6967,1,0,0,0,7082,6968,1,0,0,0,7082,6969,1,0,0,
	0,7082,6970,1,0,0,0,7082,6971,1,0,0,0,7082,6972,1,0,0,0,7082,6973,1,0,0,
	0,7082,6974,1,0,0,0,7082,6975,1,0,0,0,7082,6976,1,0,0,0,7082,6977,1,0,0,
	0,7082,6978,1,0,0,0,7082,6979,1,0,0,0,7082,6980,1,0,0,0,7082,6981,1,0,0,
	0,7082,6982,1,0,0,0,7082,6983,1,0,0,0,7082,6984,1,0,0,0,7082,6985,1,0,0,
	0,7082,6986,1,0,0,0,7082,6987,1,0,0,0,7082,6988,1,0,0,0,7082,6989,1,0,0,
	0,7082,6990,1,0,0,0,7082,6991,1,0,0,0,7082,6992,1,0,0,0,7082,6993,1,0,0,
	0,7082,6994,1,0,0,0,7082,6995,1,0,0,0,7082,6996,1,0,0,0,7082,6997,1,0,0,
	0,7082,6998,1,0,0,0,7082,6999,1,0,0,0,7082,7000,1,0,0,0,7082,7001,1,0,0,
	0,7082,7002,1,0,0,0,7082,7003,1,0,0,0,7082,7004,1,0,0,0,7082,7005,1,0,0,
	0,7082,7006,1,0,0,0,7082,7007,1,0,0,0,7082,7008,1,0,0,0,7082,7009,1,0,0,
	0,7082,7010,1,0,0,0,7082,7011,1,0,0,0,7082,7012,1,0,0,0,7082,7013,1,0,0,
	0,7082,7014,1,0,0,0,7082,7015,1,0,0,0,7082,7016,1,0,0,0,7082,7017,1,0,0,
	0,7082,7018,1,0,0,0,7082,7019,1,0,0,0,7082,7020,1,0,0,0,7082,7021,1,0,0,
	0,7082,7022,1,0,0,0,7082,7023,1,0,0,0,7082,7024,1,0,0,0,7082,7025,1,0,0,
	0,7082,7026,1,0,0,0,7082,7027,1,0,0,0,7082,7028,1,0,0,0,7082,7029,1,0,0,
	0,7082,7030,1,0,0,0,7082,7031,1,0,0,0,7082,7032,1,0,0,0,7082,7033,1,0,0,
	0,7082,7034,1,0,0,0,7082,7035,1,0,0,0,7082,7036,1,0,0,0,7082,7037,1,0,0,
	0,7082,7038,1,0,0,0,7082,7039,1,0,0,0,7082,7040,1,0,0,0,7082,7041,1,0,0,
	0,7082,7042,1,0,0,0,7082,7043,1,0,0,0,7082,7044,1,0,0,0,7082,7045,1,0,0,
	0,7082,7046,1,0,0,0,7082,7047,1,0,0,0,7082,7048,1,0,0,0,7082,7049,1,0,0,
	0,7082,7050,1,0,0,0,7082,7051,1,0,0,0,7082,7052,1,0,0,0,7082,7053,1,0,0,
	0,7082,7054,1,0,0,0,7082,7055,1,0,0,0,7082,7056,1,0,0,0,7082,7057,1,0,0,
	0,7082,7058,1,0,0,0,7082,7059,1,0,0,0,7082,7060,1,0,0,0,7082,7061,1,0,0,
	0,7082,7062,1,0,0,0,7082,7063,1,0,0,0,7082,7064,1,0,0,0,7082,7065,1,0,0,
	0,7082,7066,1,0,0,0,7082,7067,1,0,0,0,7082,7068,1,0,0,0,7082,7069,1,0,0,
	0,7082,7070,1,0,0,0,7082,7071,1,0,0,0,7082,7072,1,0,0,0,7082,7073,1,0,0,
	0,7082,7074,1,0,0,0,7082,7075,1,0,0,0,7082,7076,1,0,0,0,7082,7077,1,0,0,
	0,7082,7078,1,0,0,0,7082,7079,1,0,0,0,7082,7080,1,0,0,0,7082,7081,1,0,0,
	0,7083,1327,1,0,0,0,7084,7085,7,35,0,0,7085,1329,1,0,0,0,7086,7087,7,36,
	0,0,7087,1331,1,0,0,0,7088,7126,5,413,0,0,7089,7126,3,1214,607,0,7090,7126,
	3,1240,620,0,7091,7126,3,1244,622,0,7092,7126,3,1322,661,0,7093,7126,3,
	1250,625,0,7094,7126,3,1242,621,0,7095,7126,5,59,0,0,7096,7126,5,33,0,0,
	7097,7126,5,28,0,0,7098,7126,5,55,0,0,7099,7126,3,846,423,0,7100,7126,3,
	848,424,0,7101,7126,3,854,427,0,7102,7126,3,852,426,0,7103,7126,3,854,427,
	0,7104,7126,5,1,0,0,7105,7126,5,2,0,0,7106,7126,5,3,0,0,7107,7126,5,4,0,
	0,7108,7126,5,5,0,0,7109,7126,5,6,0,0,7110,7126,5,7,0,0,7111,7126,5,8,0,
	0,7112,7126,5,9,0,0,7113,7126,5,10,0,0,7114,7126,5,11,0,0,7115,7126,5,12,
	0,0,7116,7126,5,13,0,0,7117,7126,5,14,0,0,7118,7126,5,15,0,0,7119,7126,
	5,16,0,0,7120,7126,5,17,0,0,7121,7126,5,18,0,0,7122,7126,5,19,0,0,7123,
	7126,5,20,0,0,7124,7126,5,21,0,0,7125,7088,1,0,0,0,7125,7089,1,0,0,0,7125,
	7090,1,0,0,0,7125,7091,1,0,0,0,7125,7092,1,0,0,0,7125,7093,1,0,0,0,7125,
	7094,1,0,0,0,7125,7095,1,0,0,0,7125,7096,1,0,0,0,7125,7097,1,0,0,0,7125,
	7098,1,0,0,0,7125,7099,1,0,0,0,7125,7100,1,0,0,0,7125,7101,1,0,0,0,7125,
	7102,1,0,0,0,7125,7103,1,0,0,0,7125,7104,1,0,0,0,7125,7105,1,0,0,0,7125,
	7106,1,0,0,0,7125,7107,1,0,0,0,7125,7108,1,0,0,0,7125,7109,1,0,0,0,7125,
	7110,1,0,0,0,7125,7111,1,0,0,0,7125,7112,1,0,0,0,7125,7113,1,0,0,0,7125,
	7114,1,0,0,0,7125,7115,1,0,0,0,7125,7116,1,0,0,0,7125,7117,1,0,0,0,7125,
	7118,1,0,0,0,7125,7119,1,0,0,0,7125,7120,1,0,0,0,7125,7121,1,0,0,0,7125,
	7122,1,0,0,0,7125,7123,1,0,0,0,7125,7124,1,0,0,0,7126,1333,1,0,0,0,7127,
	7130,3,1336,668,0,7128,7130,5,390,0,0,7129,7127,1,0,0,0,7129,7128,1,0,0,
	0,7130,1335,1,0,0,0,7131,7132,7,37,0,0,7132,1337,1,0,0,0,7133,7134,7,38,
	0,0,7134,1339,1,0,0,0,7135,7136,7,39,0,0,7136,1341,1,0,0,0,7137,7138,7,
	40,0,0,7138,1343,1,0,0,0,937,1345,1349,1352,1355,1359,1368,1372,1376,1386,
	1394,1411,1415,1421,1427,1433,1441,1447,1453,1461,1467,1478,1481,1492,1494,
	1500,1503,1511,1517,1521,1526,1531,1541,1547,1551,1559,1563,1569,1573,1580,
	1585,1591,1595,1600,1608,1614,1620,1627,1637,1643,1649,1655,1666,1672,1678,
	1691,1697,1703,1712,1722,1737,1742,1746,1754,1762,1773,1780,1786,1792,1799,
	1804,1814,1823,1828,1834,1839,1846,1850,1853,1871,1878,1887,1895,1903,1910,
	1919,1925,1928,1936,1942,1951,1960,1964,1972,1980,1986,1991,1995,1999,2005,
	2017,2021,2025,2029,2034,2038,2042,2046,2050,2056,2064,2067,2078,2082,2087,
	2098,2102,2106,2110,2129,2133,2137,2141,2160,2165,2175,2182,2189,2212,2216,
	2224,2229,2236,2240,2253,2257,2263,2267,2271,2274,2279,2287,2295,2299,2303,
	2307,2312,2316,2320,2326,2329,2349,2354,2360,2363,2369,2372,2381,2385,2390,
	2396,2400,2404,2409,2416,2424,2427,2432,2439,2444,2449,2454,2459,2464,2466,
	2470,2474,2478,2482,2488,2500,2504,2508,2513,2530,2534,2541,2546,2552,2555,
	2558,2564,2568,2572,2576,2582,2585,2588,2594,2598,2602,2606,2630,2637,2641,
	2645,2649,2658,2664,2669,2673,2686,2689,2695,2698,2702,2706,2711,2717,2722,
	2727,2731,2745,2751,2758,2764,2769,2777,2782,2787,2795,2803,2808,2816,2821,
	2829,2834,2842,2847,2859,2869,2874,2878,2882,2886,2895,2901,2913,2917,2921,
	2925,2930,2933,2936,2941,2945,2956,2958,2962,2970,2974,2980,2984,2989,2994,
	2998,3004,3013,3017,3021,3027,3031,3037,3041,3047,3051,3057,3061,3067,3071,
	3077,3081,3089,3094,3099,3105,3108,3114,3126,3130,3134,3138,3143,3147,3151,
	3155,3160,3163,3166,3173,3177,3181,3187,3191,3197,3201,3209,3214,3217,3224,
	3230,3233,3237,3241,3246,3251,3255,3260,3265,3269,3276,3282,3286,3294,3298,
	3302,3308,3313,3319,3322,3337,3341,3345,3351,3355,3361,3365,3371,3375,3381,
	3385,3391,3395,3401,3405,3412,3416,3420,3425,3430,3434,3439,3448,3453,3457,
	3462,3468,3479,3488,3492,3498,3504,3510,3516,3520,3526,3530,3536,3542,3550,
	3554,3558,3570,3574,3579,3585,3600,3604,3609,3612,3618,3634,3639,3644,3648,
	3661,3669,3673,3678,3684,3689,3703,3716,3726,3730,3738,3742,3747,3752,3759,
	3763,3769,3775,3781,3784,3794,3804,3810,3814,3818,3830,3840,3849,3865,3869,
	3875,3879,3885,3889,3895,3902,3906,3910,3916,3920,3926,3930,3936,3940,3944,
	3950,3953,3956,3959,3963,3967,3973,3976,3979,3982,3993,3997,4001,4005,4009,
	4015,4019,4023,4027,4033,4037,4041,4045,4073,4076,4080,4083,4086,4092,4096,
	4101,4108,4117,4126,4131,4140,4146,4151,4155,4159,4164,4169,4173,4177,4179,
	4183,4187,4192,4197,4201,4205,4210,4215,4219,4223,4228,4230,4240,4244,4248,
	4254,4260,4266,4272,4278,4284,4290,4295,4299,4303,4308,4314,4318,4321,4327,
	4333,4339,4345,4351,4357,4363,4368,4372,4376,4381,4387,4393,4399,4405,4411,
	4417,4423,4429,4437,4442,4446,4450,4455,4461,4464,4466,4471,4475,4479,4482,
	4485,4489,4494,4504,4510,4516,4522,4528,4533,4537,4541,4544,4547,4551,4556,
	4562,4568,4573,4577,4584,4594,4604,4606,4614,4618,4627,4629,4635,4643,4653,
	4655,4663,4673,4675,4681,4687,4691,4697,4704,4710,4716,4720,4724,4730,4736,
	4740,4744,4750,4756,4760,4768,4772,4776,4781,4788,4792,4796,4801,4803,4807,
	4815,4821,4825,4831,4833,4837,4840,4843,4849,4853,4858,4863,4869,4879,4883,
	4889,4893,4898,4919,4925,4934,4940,4947,4952,4954,4961,4970,4975,4983,4988,
	4998,5003,5009,5014,5020,5027,5035,5037,5056,5060,5066,5076,5095,5099,5103,
	5107,5113,5117,5123,5127,5133,5137,5142,5152,5165,5180,5185,5197,5212,5218,
	5228,5236,5249,5262,5266,5270,5275,5278,5285,5289,5293,5298,5301,5308,5312,
	5316,5320,5326,5330,5334,5338,5344,5356,5360,5365,5367,5373,5377,5384,5388,
	5395,5418,5428,5433,5443,5447,5453,5457,5461,5465,5472,5476,5482,5486,5490,
	5495,5499,5505,5509,5513,5516,5522,5526,5530,5534,5540,5550,5555,5567,5572,
	5577,5581,5588,5592,5599,5603,5610,5614,5621,5625,5629,5633,5644,5648,5657,
	5662,5666,5670,5674,5685,5689,5696,5700,5707,5711,5718,5722,5726,5730,5741,
	5745,5752,5756,5763,5767,5773,5777,5787,5791,5797,5805,5810,5815,5819,5825,
	5830,5834,5841,5845,5849,5854,5861,5866,5870,5883,5887,5891,5896,5907,5911,
	5918,5923,5927,5943,5951,5953,5962,5969,5975,5978,5981,5984,5990,5993,5996,
	5999,6004,6007,6010,6013,6019,6022,6025,6028,6034,6037,6040,6043,6047,6051,
	6055,6060,6064,6068,6073,6077,6080,6082,6088,6092,6098,6102,6110,6114,6118,
	6122,6126,6131,6135,6138,6140,6144,6150,6164,6169,6173,6179,6184,6192,6196,
	6200,6206,6210,6217,6221,6225,6229,6236,6240,6248,6252,6257,6261,6267,6271,
	6276,6283,6289,6292,6295,6301,6305,6310,6315,6319,6325,6329,6333,6344,6348,
	6356,6362,6366,6370,6381,6385,6391,6396,6400,6404,6408,6415,6419,6423,6428,
	6432,6436,6440,6450,6461,6487,6491,6495,6500,6511,6515,6522,6530,6541,6545,
	6551,6555,6559,6563,6569,6574,6582,6586,6593,6596,6600,6603,6606,6610,6614,
	6619,6623,6627,6631,6636,6640,6644,6648,6653,6668,6686,6746,6753,6759,6781,
	6791,6811,6817,6821,6837,6845,6849,6853,6859,6863,7082,7125,7129];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GqlParser.__ATN) {
			GqlParser.__ATN = new ATNDeserializer().deserialize(GqlParser._serializedATN);
		}

		return GqlParser.__ATN;
	}


	static DecisionsToDFA = GqlParser._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );

}

export class GqlProgramContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EOF(): TerminalNode {
		return this.getToken(GqlParser.EOF, 0);
	}
	public activity_list(): ActivityContext[] {
		return this.getTypedRuleContexts(ActivityContext) as ActivityContext[];
	}
	public activity(i: number): ActivityContext {
		return this.getTypedRuleContext(ActivityContext, i) as ActivityContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SEMICOLON_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.SEMICOLON);
	}
	public SEMICOLON(i: number): TerminalNode {
		return this.getToken(GqlParser.SEMICOLON, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_gqlProgram;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGqlProgram) {
	 		listener.enterGqlProgram(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGqlProgram) {
	 		listener.exitGqlProgram(this);
		}
	}
}


export class ActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public programActivity(): ProgramActivityContext {
		return this.getTypedRuleContext(ProgramActivityContext, 0) as ProgramActivityContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public sessionCloseCommand(): SessionCloseCommandContext {
		return this.getTypedRuleContext(SessionCloseCommandContext, 0) as SessionCloseCommandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_activity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterActivity) {
	 		listener.enterActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitActivity) {
	 		listener.exitActivity(this);
		}
	}
}


export class ProgramActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sessionActivity(): SessionActivityContext {
		return this.getTypedRuleContext(SessionActivityContext, 0) as SessionActivityContext;
	}
	public transactionActivity(): TransactionActivityContext {
		return this.getTypedRuleContext(TransactionActivityContext, 0) as TransactionActivityContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_programActivity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProgramActivity) {
	 		listener.enterProgramActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProgramActivity) {
	 		listener.exitProgramActivity(this);
		}
	}
}


export class SessionActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sessionSetCommand(): SessionSetCommandContext {
		return this.getTypedRuleContext(SessionSetCommandContext, 0) as SessionSetCommandContext;
	}
	public sessionResetCommand(): SessionResetCommandContext {
		return this.getTypedRuleContext(SessionResetCommandContext, 0) as SessionResetCommandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionActivity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionActivity) {
	 		listener.enterSessionActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionActivity) {
	 		listener.exitSessionActivity(this);
		}
	}
}


export class SessionSetCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SET(): TerminalNode {
		return this.getToken(GqlParser.SET, 0);
	}
	public sessionSetSchemaClause(): SessionSetSchemaClauseContext {
		return this.getTypedRuleContext(SessionSetSchemaClauseContext, 0) as SessionSetSchemaClauseContext;
	}
	public sessionSetGraphClause(): SessionSetGraphClauseContext {
		return this.getTypedRuleContext(SessionSetGraphClauseContext, 0) as SessionSetGraphClauseContext;
	}
	public sessionSetTimeZoneClause(): SessionSetTimeZoneClauseContext {
		return this.getTypedRuleContext(SessionSetTimeZoneClauseContext, 0) as SessionSetTimeZoneClauseContext;
	}
	public sessionSetParameterClause(): SessionSetParameterClauseContext {
		return this.getTypedRuleContext(SessionSetParameterClauseContext, 0) as SessionSetParameterClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetCommand) {
	 		listener.enterSessionSetCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetCommand) {
	 		listener.exitSessionSetCommand(this);
		}
	}
}


export class SessionSetSchemaClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetSchemaClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetSchemaClause) {
	 		listener.enterSessionSetSchemaClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetSchemaClause) {
	 		listener.exitSessionSetSchemaClause(this);
		}
	}
}


export class SessionSetGraphClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetGraphClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetGraphClause) {
	 		listener.enterSessionSetGraphClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetGraphClause) {
	 		listener.exitSessionSetGraphClause(this);
		}
	}
}


export class SessionSetTimeZoneClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public ZONE(): TerminalNode {
		return this.getToken(GqlParser.ZONE, 0);
	}
	public setTimeZoneValue(): SetTimeZoneValueContext {
		return this.getTypedRuleContext(SetTimeZoneValueContext, 0) as SetTimeZoneValueContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetTimeZoneClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetTimeZoneClause) {
	 		listener.enterSessionSetTimeZoneClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetTimeZoneClause) {
	 		listener.exitSessionSetTimeZoneClause(this);
		}
	}
}


export class SetTimeZoneValueContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public stringValueExpr(): StringValueExprContext {
		return this.getTypedRuleContext(StringValueExprContext, 0) as StringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setTimeZoneValue;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetTimeZoneValue) {
	 		listener.enterSetTimeZoneValue(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetTimeZoneValue) {
	 		listener.exitSetTimeZoneValue(this);
		}
	}
}


export class SessionSetParameterClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sessionSetGraphParameterClause(): SessionSetGraphParameterClauseContext {
		return this.getTypedRuleContext(SessionSetGraphParameterClauseContext, 0) as SessionSetGraphParameterClauseContext;
	}
	public sessionSetBindingTableParameterCalues(): SessionSetBindingTableParameterCaluesContext {
		return this.getTypedRuleContext(SessionSetBindingTableParameterCaluesContext, 0) as SessionSetBindingTableParameterCaluesContext;
	}
	public sessionSetValuesParameterClause(): SessionSetValuesParameterClauseContext {
		return this.getTypedRuleContext(SessionSetValuesParameterClauseContext, 0) as SessionSetValuesParameterClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetParameterClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetParameterClause) {
	 		listener.enterSessionSetParameterClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetParameterClause) {
	 		listener.exitSessionSetParameterClause(this);
		}
	}
}


export class SessionSetGraphParameterClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public sessionSetParameterName(): SessionSetParameterNameContext {
		return this.getTypedRuleContext(SessionSetParameterNameContext, 0) as SessionSetParameterNameContext;
	}
	public optTypedGraphInit(): OptTypedGraphInitContext {
		return this.getTypedRuleContext(OptTypedGraphInitContext, 0) as OptTypedGraphInitContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetGraphParameterClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetGraphParameterClause) {
	 		listener.enterSessionSetGraphParameterClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetGraphParameterClause) {
	 		listener.exitSessionSetGraphParameterClause(this);
		}
	}
}


export class SessionSetBindingTableParameterCaluesContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public sessionSetParameterName(): SessionSetParameterNameContext {
		return this.getTypedRuleContext(SessionSetParameterNameContext, 0) as SessionSetParameterNameContext;
	}
	public optTypedBindingTableInit(): OptTypedBindingTableInitContext {
		return this.getTypedRuleContext(OptTypedBindingTableInitContext, 0) as OptTypedBindingTableInitContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetBindingTableParameterCalues;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetBindingTableParameterCalues) {
	 		listener.enterSessionSetBindingTableParameterCalues(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetBindingTableParameterCalues) {
	 		listener.exitSessionSetBindingTableParameterCalues(this);
		}
	}
}


export class SessionSetValuesParameterClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public sessionSetParameterName(): SessionSetParameterNameContext {
		return this.getTypedRuleContext(SessionSetParameterNameContext, 0) as SessionSetParameterNameContext;
	}
	public optTypedValueInit(): OptTypedValueInitContext {
		return this.getTypedRuleContext(OptTypedValueInitContext, 0) as OptTypedValueInitContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetValuesParameterClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetValuesParameterClause) {
	 		listener.enterSessionSetValuesParameterClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetValuesParameterClause) {
	 		listener.exitSessionSetValuesParameterClause(this);
		}
	}
}


export class SessionSetParameterNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionSetParameterName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionSetParameterName) {
	 		listener.enterSessionSetParameterName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionSetParameterName) {
	 		listener.exitSessionSetParameterName(this);
		}
	}
}


export class SessionResetCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESET(): TerminalNode {
		return this.getToken(GqlParser.RESET, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public sessionResetArguments(): SessionResetArgumentsContext {
		return this.getTypedRuleContext(SessionResetArgumentsContext, 0) as SessionResetArgumentsContext;
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionResetCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionResetCommand) {
	 		listener.enterSessionResetCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionResetCommand) {
	 		listener.exitSessionResetCommand(this);
		}
	}
}


export class SessionResetArgumentsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARAMETERS(): TerminalNode {
		return this.getToken(GqlParser.PARAMETERS, 0);
	}
	public CHARACTERISTICS(): TerminalNode {
		return this.getToken(GqlParser.CHARACTERISTICS, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public ZONE(): TerminalNode {
		return this.getToken(GqlParser.ZONE, 0);
	}
	public PARAMETER(): TerminalNode {
		return this.getToken(GqlParser.PARAMETER, 0);
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionResetArguments;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionResetArguments) {
	 		listener.enterSessionResetArguments(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionResetArguments) {
	 		listener.exitSessionResetArguments(this);
		}
	}
}


export class SessionCloseCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public CLOSE(): TerminalNode {
		return this.getToken(GqlParser.CLOSE, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sessionCloseCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSessionCloseCommand) {
	 		listener.enterSessionCloseCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSessionCloseCommand) {
	 		listener.exitSessionCloseCommand(this);
		}
	}
}


export class TransactionActivityContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionStartCommand(): TransactionStartCommandContext {
		return this.getTypedRuleContext(TransactionStartCommandContext, 0) as TransactionStartCommandContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public procedureSpec(): ProcedureSpecContext {
		return this.getTypedRuleContext(ProcedureSpecContext, 0) as ProcedureSpecContext;
	}
	public transactionEndCommand(): TransactionEndCommandContext {
		return this.getTypedRuleContext(TransactionEndCommandContext, 0) as TransactionEndCommandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionActivity;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionActivity) {
	 		listener.enterTransactionActivity(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionActivity) {
	 		listener.exitTransactionActivity(this);
		}
	}
}


export class TransactionStartCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public START(): TerminalNode {
		return this.getToken(GqlParser.START, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(GqlParser.TRANSACTION, 0);
	}
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		return this.getTypedRuleContext(TransactionCharacteristicsContext, 0) as TransactionCharacteristicsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionStartCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionStartCommand) {
	 		listener.enterTransactionStartCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionStartCommand) {
	 		listener.exitTransactionStartCommand(this);
		}
	}
}


export class TransactionEndCommandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(GqlParser.ROLLBACK, 0);
	}
	public COMMIT(): TerminalNode {
		return this.getToken(GqlParser.COMMIT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionEndCommand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionEndCommand) {
	 		listener.enterTransactionEndCommand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionEndCommand) {
	 		listener.exitTransactionEndCommand(this);
		}
	}
}


export class TransactionCharacteristicsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionMode_list(): TransactionModeContext[] {
		return this.getTypedRuleContexts(TransactionModeContext) as TransactionModeContext[];
	}
	public transactionMode(i: number): TransactionModeContext {
		return this.getTypedRuleContext(TransactionModeContext, i) as TransactionModeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionCharacteristics;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionCharacteristics) {
	 		listener.enterTransactionCharacteristics(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionCharacteristics) {
	 		listener.exitTransactionCharacteristics(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionAccessMode(): TransactionAccessModeContext {
		return this.getTypedRuleContext(TransactionAccessModeContext, 0) as TransactionAccessModeContext;
	}
	public implDefinedAccessMode(): ImplDefinedAccessModeContext {
		return this.getTypedRuleContext(ImplDefinedAccessModeContext, 0) as ImplDefinedAccessModeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionMode) {
	 		listener.enterTransactionMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionMode) {
	 		listener.exitTransactionMode(this);
		}
	}
}


export class TransactionAccessModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ(): TerminalNode {
		return this.getToken(GqlParser.READ, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public ONLY(): TerminalNode {
		return this.getToken(GqlParser.ONLY, 0);
	}
	public WRITE(): TerminalNode {
		return this.getToken(GqlParser.WRITE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_transactionAccessMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTransactionAccessMode) {
	 		listener.enterTransactionAccessMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTransactionAccessMode) {
	 		listener.exitTransactionAccessMode(this);
		}
	}
}


export class ImplDefinedAccessModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_implDefinedAccessMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterImplDefinedAccessMode) {
	 		listener.enterImplDefinedAccessMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitImplDefinedAccessMode) {
	 		listener.exitImplDefinedAccessMode(this);
		}
	}
}


export class NestedProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public procedureSpec(): ProcedureSpecContext {
		return this.getTypedRuleContext(ProcedureSpecContext, 0) as ProcedureSpecContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedProcedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedProcedureSpec) {
	 		listener.enterNestedProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedProcedureSpec) {
	 		listener.exitNestedProcedureSpec(this);
		}
	}
}


export class ProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureBody(): ProcedureBodyContext {
		return this.getTypedRuleContext(ProcedureBodyContext, 0) as ProcedureBodyContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureSpec) {
	 		listener.enterProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureSpec) {
	 		listener.exitProcedureSpec(this);
		}
	}
}


export class NestedDataModProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public procedureBody(): ProcedureBodyContext {
		return this.getTypedRuleContext(ProcedureBodyContext, 0) as ProcedureBodyContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedDataModProcedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedDataModProcedureSpec) {
	 		listener.enterNestedDataModProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedDataModProcedureSpec) {
	 		listener.exitNestedDataModProcedureSpec(this);
		}
	}
}


export class NestedQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public procedureBody(): ProcedureBodyContext {
		return this.getTypedRuleContext(ProcedureBodyContext, 0) as ProcedureBodyContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedQuerySpec) {
	 		listener.enterNestedQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedQuerySpec) {
	 		listener.exitNestedQuerySpec(this);
		}
	}
}


export class ProcedureBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public statmentBlock(): StatmentBlockContext {
		return this.getTypedRuleContext(StatmentBlockContext, 0) as StatmentBlockContext;
	}
	public atSchemaClause(): AtSchemaClauseContext {
		return this.getTypedRuleContext(AtSchemaClauseContext, 0) as AtSchemaClauseContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public bindingVarDefBlock(): BindingVarDefBlockContext {
		return this.getTypedRuleContext(BindingVarDefBlockContext, 0) as BindingVarDefBlockContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureBody) {
	 		listener.enterProcedureBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureBody) {
	 		listener.exitProcedureBody(this);
		}
	}
}


export class BindingVarDefBlockContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarDef_list(): BindingVarDefContext[] {
		return this.getTypedRuleContexts(BindingVarDefContext) as BindingVarDefContext[];
	}
	public bindingVarDef(i: number): BindingVarDefContext {
		return this.getTypedRuleContext(BindingVarDefContext, i) as BindingVarDefContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarDefBlock;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarDefBlock) {
	 		listener.enterBindingVarDefBlock(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarDefBlock) {
	 		listener.exitBindingVarDefBlock(this);
		}
	}
}


export class BindingVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphVarDef(): GraphVarDefContext {
		return this.getTypedRuleContext(GraphVarDefContext, 0) as GraphVarDefContext;
	}
	public bindingTableVarDef(): BindingTableVarDefContext {
		return this.getTypedRuleContext(BindingTableVarDefContext, 0) as BindingTableVarDefContext;
	}
	public valueVarDef(): ValueVarDefContext {
		return this.getTypedRuleContext(ValueVarDefContext, 0) as ValueVarDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarDef) {
	 		listener.enterBindingVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarDef) {
	 		listener.exitBindingVarDef(this);
		}
	}
}


export class StatmentBlockContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public statement(): StatementContext {
		return this.getTypedRuleContext(StatementContext, 0) as StatementContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public nextStatment_list(): NextStatmentContext[] {
		return this.getTypedRuleContexts(NextStatmentContext) as NextStatmentContext[];
	}
	public nextStatment(i: number): NextStatmentContext {
		return this.getTypedRuleContext(NextStatmentContext, i) as NextStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_statmentBlock;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStatmentBlock) {
	 		listener.enterStatmentBlock(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStatmentBlock) {
	 		listener.exitStatmentBlock(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public linearCatalogModStatment(): LinearCatalogModStatmentContext {
		return this.getTypedRuleContext(LinearCatalogModStatmentContext, 0) as LinearCatalogModStatmentContext;
	}
	public linearDataModStatment(): LinearDataModStatmentContext {
		return this.getTypedRuleContext(LinearDataModStatmentContext, 0) as LinearDataModStatmentContext;
	}
	public compositeQueryStatment(): CompositeQueryStatmentContext {
		return this.getTypedRuleContext(CompositeQueryStatmentContext, 0) as CompositeQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_statement;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStatement) {
	 		listener.enterStatement(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStatement) {
	 		listener.exitStatement(this);
		}
	}
}


export class NextStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NEXT(): TerminalNode {
		return this.getToken(GqlParser.NEXT, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public statement(): StatementContext {
		return this.getTypedRuleContext(StatementContext, 0) as StatementContext;
	}
	public yieldClause(): YieldClauseContext {
		return this.getTypedRuleContext(YieldClauseContext, 0) as YieldClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nextStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNextStatment) {
	 		listener.enterNextStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNextStatment) {
	 		listener.exitNextStatment(this);
		}
	}
}


export class GraphVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public graphVar(): GraphVarContext {
		return this.getTypedRuleContext(GraphVarContext, 0) as GraphVarContext;
	}
	public optTypedGraphInit(): OptTypedGraphInitContext {
		return this.getTypedRuleContext(OptTypedGraphInitContext, 0) as OptTypedGraphInitContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphVarDef) {
	 		listener.enterGraphVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphVarDef) {
	 		listener.exitGraphVarDef(this);
		}
	}
}


export class OptTypedGraphInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphInit(): GraphInitContext {
		return this.getTypedRuleContext(GraphInitContext, 0) as GraphInitContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public graphRefValueType(): GraphRefValueTypeContext {
		return this.getTypedRuleContext(GraphRefValueTypeContext, 0) as GraphRefValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optTypedGraphInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptTypedGraphInit) {
	 		listener.enterOptTypedGraphInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptTypedGraphInit) {
	 		listener.exitOptTypedGraphInit(this);
		}
	}
}


export class GraphInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphInit) {
	 		listener.enterGraphInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphInit) {
	 		listener.exitGraphInit(this);
		}
	}
}


export class BindingTableVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public bindingTableVar(): BindingTableVarContext {
		return this.getTypedRuleContext(BindingTableVarContext, 0) as BindingTableVarContext;
	}
	public optTypedBindingTableInit(): OptTypedBindingTableInitContext {
		return this.getTypedRuleContext(OptTypedBindingTableInitContext, 0) as OptTypedBindingTableInitContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableVarDef) {
	 		listener.enterBindingTableVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableVarDef) {
	 		listener.exitBindingTableVarDef(this);
		}
	}
}


export class OptTypedBindingTableInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingTableInit(): BindingTableInitContext {
		return this.getTypedRuleContext(BindingTableInitContext, 0) as BindingTableInitContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public bindingTableRefValueType(): BindingTableRefValueTypeContext {
		return this.getTypedRuleContext(BindingTableRefValueTypeContext, 0) as BindingTableRefValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optTypedBindingTableInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptTypedBindingTableInit) {
	 		listener.enterOptTypedBindingTableInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptTypedBindingTableInit) {
	 		listener.exitOptTypedBindingTableInit(this);
		}
	}
}


export class BindingTableInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public bindingTableExpr(): BindingTableExprContext {
		return this.getTypedRuleContext(BindingTableExprContext, 0) as BindingTableExprContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableInit) {
	 		listener.enterBindingTableInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableInit) {
	 		listener.exitBindingTableInit(this);
		}
	}
}


export class ValueVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public valueVar(): ValueVarContext {
		return this.getTypedRuleContext(ValueVarContext, 0) as ValueVarContext;
	}
	public optTypedValueInit(): OptTypedValueInitContext {
		return this.getTypedRuleContext(OptTypedValueInitContext, 0) as OptTypedValueInitContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueVarDef) {
	 		listener.enterValueVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueVarDef) {
	 		listener.exitValueVarDef(this);
		}
	}
}


export class OptTypedValueInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueInit(): ValueInitContext {
		return this.getTypedRuleContext(ValueInitContext, 0) as ValueInitContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optTypedValueInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptTypedValueInit) {
	 		listener.enterOptTypedValueInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptTypedValueInit) {
	 		listener.exitOptTypedValueInit(this);
		}
	}
}


export class ValueInitContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueInit;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueInit) {
	 		listener.enterValueInit(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueInit) {
	 		listener.exitValueInit(this);
		}
	}
}


export class GraphExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedGraphQuerySpec(): NestedGraphQuerySpecContext {
		return this.getTypedRuleContext(NestedGraphQuerySpecContext, 0) as NestedGraphQuerySpecContext;
	}
	public objectExprPrimary(): ObjectExprPrimaryContext {
		return this.getTypedRuleContext(ObjectExprPrimaryContext, 0) as ObjectExprPrimaryContext;
	}
	public graphRef(): GraphRefContext {
		return this.getTypedRuleContext(GraphRefContext, 0) as GraphRefContext;
	}
	public objectNameOrBindingVar(): ObjectNameOrBindingVarContext {
		return this.getTypedRuleContext(ObjectNameOrBindingVarContext, 0) as ObjectNameOrBindingVarContext;
	}
	public currentGraph(): CurrentGraphContext {
		return this.getTypedRuleContext(CurrentGraphContext, 0) as CurrentGraphContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphExpr) {
	 		listener.enterGraphExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphExpr) {
	 		listener.exitGraphExpr(this);
		}
	}
}


export class CurrentGraphContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0);
	}
	public CURRENT_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_GRAPH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_currentGraph;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCurrentGraph) {
	 		listener.enterCurrentGraph(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCurrentGraph) {
	 		listener.exitCurrentGraph(this);
		}
	}
}


export class NestedGraphQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedGraphQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedGraphQuerySpec) {
	 		listener.enterNestedGraphQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedGraphQuerySpec) {
	 		listener.exitNestedGraphQuerySpec(this);
		}
	}
}


export class BindingTableExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedBindingTableQuerySpec(): NestedBindingTableQuerySpecContext {
		return this.getTypedRuleContext(NestedBindingTableQuerySpecContext, 0) as NestedBindingTableQuerySpecContext;
	}
	public objectExprPrimary(): ObjectExprPrimaryContext {
		return this.getTypedRuleContext(ObjectExprPrimaryContext, 0) as ObjectExprPrimaryContext;
	}
	public bindingTableRef(): BindingTableRefContext {
		return this.getTypedRuleContext(BindingTableRefContext, 0) as BindingTableRefContext;
	}
	public objectNameOrBindingVar(): ObjectNameOrBindingVarContext {
		return this.getTypedRuleContext(ObjectNameOrBindingVarContext, 0) as ObjectNameOrBindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableExpr) {
	 		listener.enterBindingTableExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableExpr) {
	 		listener.exitBindingTableExpr(this);
		}
	}
}


export class NestedBindingTableQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedBindingTableQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedBindingTableQuerySpec) {
	 		listener.enterNestedBindingTableQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedBindingTableQuerySpec) {
	 		listener.exitNestedBindingTableQuerySpec(this);
		}
	}
}


export class ObjectExprPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE(): TerminalNode {
		return this.getToken(GqlParser.VARIABLE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public parenthesizedValueExpr(): ParenthesizedValueExprContext {
		return this.getTypedRuleContext(ParenthesizedValueExprContext, 0) as ParenthesizedValueExprContext;
	}
	public propertyRef(): PropertyRefContext {
		return this.getTypedRuleContext(PropertyRefContext, 0) as PropertyRefContext;
	}
	public unsignedValueSpec(): UnsignedValueSpecContext {
		return this.getTypedRuleContext(UnsignedValueSpecContext, 0) as UnsignedValueSpecContext;
	}
	public aggregateFunction(): AggregateFunctionContext {
		return this.getTypedRuleContext(AggregateFunctionContext, 0) as AggregateFunctionContext;
	}
	public collectionValueConstructor(): CollectionValueConstructorContext {
		return this.getTypedRuleContext(CollectionValueConstructorContext, 0) as CollectionValueConstructorContext;
	}
	public valueQueryExpr(): ValueQueryExprContext {
		return this.getTypedRuleContext(ValueQueryExprContext, 0) as ValueQueryExprContext;
	}
	public caseExpr(): CaseExprContext {
		return this.getTypedRuleContext(CaseExprContext, 0) as CaseExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_objectExprPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterObjectExprPrimary) {
	 		listener.enterObjectExprPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitObjectExprPrimary) {
	 		listener.exitObjectExprPrimary(this);
		}
	}
}


export class LinearCatalogModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleCatalogModStatment_list(): SimpleCatalogModStatmentContext[] {
		return this.getTypedRuleContexts(SimpleCatalogModStatmentContext) as SimpleCatalogModStatmentContext[];
	}
	public simpleCatalogModStatment(i: number): SimpleCatalogModStatmentContext {
		return this.getTypedRuleContext(SimpleCatalogModStatmentContext, i) as SimpleCatalogModStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_linearCatalogModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLinearCatalogModStatment) {
	 		listener.enterLinearCatalogModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLinearCatalogModStatment) {
	 		listener.exitLinearCatalogModStatment(this);
		}
	}
}


export class SimpleCatalogModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveCatalogModStatment(): PrimitiveCatalogModStatmentContext {
		return this.getTypedRuleContext(PrimitiveCatalogModStatmentContext, 0) as PrimitiveCatalogModStatmentContext;
	}
	public callCatalogModProcedureStatment(): CallCatalogModProcedureStatmentContext {
		return this.getTypedRuleContext(CallCatalogModProcedureStatmentContext, 0) as CallCatalogModProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleCatalogModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleCatalogModStatment) {
	 		listener.enterSimpleCatalogModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleCatalogModStatment) {
	 		listener.exitSimpleCatalogModStatment(this);
		}
	}
}


export class PrimitiveCatalogModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createSchemeStatment(): CreateSchemeStatmentContext {
		return this.getTypedRuleContext(CreateSchemeStatmentContext, 0) as CreateSchemeStatmentContext;
	}
	public createGraphStatment(): CreateGraphStatmentContext {
		return this.getTypedRuleContext(CreateGraphStatmentContext, 0) as CreateGraphStatmentContext;
	}
	public createGraphTypeStatment(): CreateGraphTypeStatmentContext {
		return this.getTypedRuleContext(CreateGraphTypeStatmentContext, 0) as CreateGraphTypeStatmentContext;
	}
	public dropSchemeStatment(): DropSchemeStatmentContext {
		return this.getTypedRuleContext(DropSchemeStatmentContext, 0) as DropSchemeStatmentContext;
	}
	public dropGraphStatment(): DropGraphStatmentContext {
		return this.getTypedRuleContext(DropGraphStatmentContext, 0) as DropGraphStatmentContext;
	}
	public dropGraphTypeStatment(): DropGraphTypeStatmentContext {
		return this.getTypedRuleContext(DropGraphTypeStatmentContext, 0) as DropGraphTypeStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveCatalogModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveCatalogModStatment) {
	 		listener.enterPrimitiveCatalogModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveCatalogModStatment) {
	 		listener.exitPrimitiveCatalogModStatment(this);
		}
	}
}


export class CreateSchemeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
		return this.getTypedRuleContext(CatalogSchemaParentAndNameContext, 0) as CatalogSchemaParentAndNameContext;
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createSchemeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateSchemeStatment) {
	 		listener.enterCreateSchemeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateSchemeStatment) {
	 		listener.exitCreateSchemeStatment(this);
		}
	}
}


export class DropSchemeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
		return this.getTypedRuleContext(CatalogSchemaParentAndNameContext, 0) as CatalogSchemaParentAndNameContext;
	}
	public IF_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dropSchemeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDropSchemeStatment) {
	 		listener.enterDropSchemeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDropSchemeStatment) {
	 		listener.exitDropSchemeStatment(this);
		}
	}
}


export class CreateGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createOnlyGraphStatment(): CreateOnlyGraphStatmentContext {
		return this.getTypedRuleContext(CreateOnlyGraphStatmentContext, 0) as CreateOnlyGraphStatmentContext;
	}
	public createOrReplaceGraphStatment(): CreateOrReplaceGraphStatmentContext {
		return this.getTypedRuleContext(CreateOrReplaceGraphStatmentContext, 0) as CreateOrReplaceGraphStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateGraphStatment) {
	 		listener.enterCreateGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateGraphStatment) {
	 		listener.exitCreateGraphStatment(this);
		}
	}
}


export class CreateOnlyGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphParentAndNameContext, 0) as CatalogGraphParentAndNameContext;
	}
	public openGraphType(): OpenGraphTypeContext {
		return this.getTypedRuleContext(OpenGraphTypeContext, 0) as OpenGraphTypeContext;
	}
	public ofGraphType(): OfGraphTypeContext {
		return this.getTypedRuleContext(OfGraphTypeContext, 0) as OfGraphTypeContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
	public graphSource(): GraphSourceContext {
		return this.getTypedRuleContext(GraphSourceContext, 0) as GraphSourceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createOnlyGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateOnlyGraphStatment) {
	 		listener.enterCreateOnlyGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateOnlyGraphStatment) {
	 		listener.exitCreateOnlyGraphStatment(this);
		}
	}
}


export class CreateOrReplaceGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(GqlParser.REPLACE, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphParentAndNameContext, 0) as CatalogGraphParentAndNameContext;
	}
	public openGraphType(): OpenGraphTypeContext {
		return this.getTypedRuleContext(OpenGraphTypeContext, 0) as OpenGraphTypeContext;
	}
	public ofGraphType(): OfGraphTypeContext {
		return this.getTypedRuleContext(OfGraphTypeContext, 0) as OfGraphTypeContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public graphSource(): GraphSourceContext {
		return this.getTypedRuleContext(GraphSourceContext, 0) as GraphSourceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createOrReplaceGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateOrReplaceGraphStatment) {
	 		listener.enterCreateOrReplaceGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateOrReplaceGraphStatment) {
	 		listener.exitCreateOrReplaceGraphStatment(this);
		}
	}
}


export class OpenGraphTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openGraphType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenGraphType) {
	 		listener.enterOpenGraphType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenGraphType) {
	 		listener.exitOpenGraphType(this);
		}
	}
}


export class OfGraphTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphTypeLikeGraph(): GraphTypeLikeGraphContext {
		return this.getTypedRuleContext(GraphTypeLikeGraphContext, 0) as GraphTypeLikeGraphContext;
	}
	public graphTypeRef(): GraphTypeRefContext {
		return this.getTypedRuleContext(GraphTypeRefContext, 0) as GraphTypeRefContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		return this.getTypedRuleContext(NestedGraphTypeSpecContext, 0) as NestedGraphTypeSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ofGraphType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOfGraphType) {
	 		listener.enterOfGraphType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOfGraphType) {
	 		listener.exitOfGraphType(this);
		}
	}
}


export class GraphTypeLikeGraphContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIKE(): TerminalNode {
		return this.getToken(GqlParser.LIKE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeLikeGraph;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeLikeGraph) {
	 		listener.enterGraphTypeLikeGraph(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeLikeGraph) {
	 		listener.exitGraphTypeLikeGraph(this);
		}
	}
}


export class GraphSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COPY(): TerminalNode {
		return this.getToken(GqlParser.COPY, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphSource) {
	 		listener.enterGraphSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphSource) {
	 		listener.exitGraphSource(this);
		}
	}
}


export class DropGraphStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphParentAndNameContext, 0) as CatalogGraphParentAndNameContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dropGraphStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDropGraphStatment) {
	 		listener.enterDropGraphStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDropGraphStatment) {
	 		listener.exitDropGraphStatment(this);
		}
	}
}


export class CreateGraphTypeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext, 0) as CatalogGraphTypeParentAndNameContext;
	}
	public graphTypeSource(): GraphTypeSourceContext {
		return this.getTypedRuleContext(GraphTypeSourceContext, 0) as GraphTypeSourceContext;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(GqlParser.REPLACE, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_NOT_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_NOT_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_createGraphTypeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCreateGraphTypeStatment) {
	 		listener.enterCreateGraphTypeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCreateGraphTypeStatment) {
	 		listener.exitCreateGraphTypeStatment(this);
		}
	}
}


export class GraphTypeSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public copyOfGraphType(): CopyOfGraphTypeContext {
		return this.getTypedRuleContext(CopyOfGraphTypeContext, 0) as CopyOfGraphTypeContext;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphTypeLikeGraph(): GraphTypeLikeGraphContext {
		return this.getTypedRuleContext(GraphTypeLikeGraphContext, 0) as GraphTypeLikeGraphContext;
	}
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		return this.getTypedRuleContext(NestedGraphTypeSpecContext, 0) as NestedGraphTypeSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeSource) {
	 		listener.enterGraphTypeSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeSource) {
	 		listener.exitGraphTypeSource(this);
		}
	}
}


export class CopyOfGraphTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COPY(): TerminalNode {
		return this.getToken(GqlParser.COPY, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public graphTypeRef(): GraphTypeRefContext {
		return this.getTypedRuleContext(GraphTypeRefContext, 0) as GraphTypeRefContext;
	}
	public externalObjectRef(): ExternalObjectRefContext {
		return this.getTypedRuleContext(ExternalObjectRefContext, 0) as ExternalObjectRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_copyOfGraphType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCopyOfGraphType) {
	 		listener.enterCopyOfGraphType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCopyOfGraphType) {
	 		listener.exitCopyOfGraphType(this);
		}
	}
}


export class DropGraphTypeStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext, 0) as CatalogGraphTypeParentAndNameContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public IF_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.IF_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dropGraphTypeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDropGraphTypeStatment) {
	 		listener.enterDropGraphTypeStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDropGraphTypeStatment) {
	 		listener.exitDropGraphTypeStatment(this);
		}
	}
}


export class CallCatalogModProcedureStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public callProcedureStatment(): CallProcedureStatmentContext {
		return this.getTypedRuleContext(CallProcedureStatmentContext, 0) as CallProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callCatalogModProcedureStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallCatalogModProcedureStatment) {
	 		listener.enterCallCatalogModProcedureStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallCatalogModProcedureStatment) {
	 		listener.exitCallCatalogModProcedureStatment(this);
		}
	}
}


export class LinearDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearDataModStatment(): FocusedLinearDataModStatmentContext {
		return this.getTypedRuleContext(FocusedLinearDataModStatmentContext, 0) as FocusedLinearDataModStatmentContext;
	}
	public ambientLinearDataModStatment(): AmbientLinearDataModStatmentContext {
		return this.getTypedRuleContext(AmbientLinearDataModStatmentContext, 0) as AmbientLinearDataModStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_linearDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLinearDataModStatment) {
	 		listener.enterLinearDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLinearDataModStatment) {
	 		listener.exitLinearDataModStatment(this);
		}
	}
}


export class FocusedLinearDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearDataModStatmentBody(): FocusedLinearDataModStatmentBodyContext {
		return this.getTypedRuleContext(FocusedLinearDataModStatmentBodyContext, 0) as FocusedLinearDataModStatmentBodyContext;
	}
	public focusedNestedDataModProcedureSpec(): FocusedNestedDataModProcedureSpecContext {
		return this.getTypedRuleContext(FocusedNestedDataModProcedureSpecContext, 0) as FocusedNestedDataModProcedureSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearDataModStatment) {
	 		listener.enterFocusedLinearDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearDataModStatment) {
	 		listener.exitFocusedLinearDataModStatment(this);
		}
	}
}


export class FocusedLinearDataModStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public simpleLinearDataAccessingStatment(): SimpleLinearDataAccessingStatmentContext {
		return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext, 0) as SimpleLinearDataAccessingStatmentContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearDataModStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearDataModStatmentBody) {
	 		listener.enterFocusedLinearDataModStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearDataModStatmentBody) {
	 		listener.exitFocusedLinearDataModStatmentBody(this);
		}
	}
}


export class FocusedNestedDataModProcedureSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public nestedDataModProcedureSpec(): NestedDataModProcedureSpecContext {
		return this.getTypedRuleContext(NestedDataModProcedureSpecContext, 0) as NestedDataModProcedureSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedNestedDataModProcedureSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedNestedDataModProcedureSpec) {
	 		listener.enterFocusedNestedDataModProcedureSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedNestedDataModProcedureSpec) {
	 		listener.exitFocusedNestedDataModProcedureSpec(this);
		}
	}
}


export class AmbientLinearDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ambientLinearDataModStatmentBody(): AmbientLinearDataModStatmentBodyContext {
		return this.getTypedRuleContext(AmbientLinearDataModStatmentBodyContext, 0) as AmbientLinearDataModStatmentBodyContext;
	}
	public nestedDataModProcedureSpec(): NestedDataModProcedureSpecContext {
		return this.getTypedRuleContext(NestedDataModProcedureSpecContext, 0) as NestedDataModProcedureSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ambientLinearDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAmbientLinearDataModStatment) {
	 		listener.enterAmbientLinearDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAmbientLinearDataModStatment) {
	 		listener.exitAmbientLinearDataModStatment(this);
		}
	}
}


export class AmbientLinearDataModStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleLinearDataAccessingStatment(): SimpleLinearDataAccessingStatmentContext {
		return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext, 0) as SimpleLinearDataAccessingStatmentContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ambientLinearDataModStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAmbientLinearDataModStatmentBody) {
	 		listener.enterAmbientLinearDataModStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAmbientLinearDataModStatmentBody) {
	 		listener.exitAmbientLinearDataModStatmentBody(this);
		}
	}
}


export class SimpleLinearDataAccessingStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleDataAccessingStatment_list(): SimpleDataAccessingStatmentContext[] {
		return this.getTypedRuleContexts(SimpleDataAccessingStatmentContext) as SimpleDataAccessingStatmentContext[];
	}
	public simpleDataAccessingStatment(i: number): SimpleDataAccessingStatmentContext {
		return this.getTypedRuleContext(SimpleDataAccessingStatmentContext, i) as SimpleDataAccessingStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleLinearDataAccessingStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleLinearDataAccessingStatment) {
	 		listener.enterSimpleLinearDataAccessingStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleLinearDataAccessingStatment) {
	 		listener.exitSimpleLinearDataAccessingStatment(this);
		}
	}
}


export class SimpleDataAccessingStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleQueryStatment(): SimpleQueryStatmentContext {
		return this.getTypedRuleContext(SimpleQueryStatmentContext, 0) as SimpleQueryStatmentContext;
	}
	public simpleDataModStatment(): SimpleDataModStatmentContext {
		return this.getTypedRuleContext(SimpleDataModStatmentContext, 0) as SimpleDataModStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleDataAccessingStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleDataAccessingStatment) {
	 		listener.enterSimpleDataAccessingStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleDataAccessingStatment) {
	 		listener.exitSimpleDataAccessingStatment(this);
		}
	}
}


export class SimpleDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveDataModStatment(): PrimitiveDataModStatmentContext {
		return this.getTypedRuleContext(PrimitiveDataModStatmentContext, 0) as PrimitiveDataModStatmentContext;
	}
	public callDataModProcedureStatment(): CallDataModProcedureStatmentContext {
		return this.getTypedRuleContext(CallDataModProcedureStatmentContext, 0) as CallDataModProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleDataModStatment) {
	 		listener.enterSimpleDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleDataModStatment) {
	 		listener.exitSimpleDataModStatment(this);
		}
	}
}


export class PrimitiveDataModStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertStatment(): InsertStatmentContext {
		return this.getTypedRuleContext(InsertStatmentContext, 0) as InsertStatmentContext;
	}
	public setStatment(): SetStatmentContext {
		return this.getTypedRuleContext(SetStatmentContext, 0) as SetStatmentContext;
	}
	public removeStatment(): RemoveStatmentContext {
		return this.getTypedRuleContext(RemoveStatmentContext, 0) as RemoveStatmentContext;
	}
	public deleteStatment(): DeleteStatmentContext {
		return this.getTypedRuleContext(DeleteStatmentContext, 0) as DeleteStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveDataModStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveDataModStatment) {
	 		listener.enterPrimitiveDataModStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveDataModStatment) {
	 		listener.exitPrimitiveDataModStatment(this);
		}
	}
}


export class InsertStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INSERT(): TerminalNode {
		return this.getToken(GqlParser.INSERT, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public insertGraphPattern(): InsertGraphPatternContext {
		return this.getTypedRuleContext(InsertGraphPatternContext, 0) as InsertGraphPatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertStatment) {
	 		listener.enterInsertStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertStatment) {
	 		listener.exitInsertStatment(this);
		}
	}
}


export class SetStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET(): TerminalNode {
		return this.getToken(GqlParser.SET, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public setItemList(): SetItemListContext {
		return this.getTypedRuleContext(SetItemListContext, 0) as SetItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetStatment) {
	 		listener.enterSetStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetStatment) {
	 		listener.exitSetStatment(this);
		}
	}
}


export class SetItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setItem_list(): SetItemContext[] {
		return this.getTypedRuleContexts(SetItemContext) as SetItemContext[];
	}
	public setItem(i: number): SetItemContext {
		return this.getTypedRuleContext(SetItemContext, i) as SetItemContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetItemList) {
	 		listener.enterSetItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetItemList) {
	 		listener.exitSetItemList(this);
		}
	}
}


export class SetItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setPropertyItem(): SetPropertyItemContext {
		return this.getTypedRuleContext(SetPropertyItemContext, 0) as SetPropertyItemContext;
	}
	public setAllPropertiesItem(): SetAllPropertiesItemContext {
		return this.getTypedRuleContext(SetAllPropertiesItemContext, 0) as SetAllPropertiesItemContext;
	}
	public setLabelItem(): SetLabelItemContext {
		return this.getTypedRuleContext(SetLabelItemContext, 0) as SetLabelItemContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetItem) {
	 		listener.enterSetItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetItem) {
	 		listener.exitSetItem(this);
		}
	}
}


export class SetPropertyItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setPropertyItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetPropertyItem) {
	 		listener.enterSetPropertyItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetPropertyItem) {
	 		listener.exitSetPropertyItem(this);
		}
	}
}


export class SetAllPropertiesItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
		return this.getTypedRuleContext(PropertyKeyValuePairListContext, 0) as PropertyKeyValuePairListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setAllPropertiesItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetAllPropertiesItem) {
	 		listener.enterSetAllPropertiesItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetAllPropertiesItem) {
	 		listener.exitSetAllPropertiesItem(this);
		}
	}
}


export class SetLabelItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setLabelItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetLabelItem) {
	 		listener.enterSetLabelItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetLabelItem) {
	 		listener.exitSetLabelItem(this);
		}
	}
}


export class LabelSetSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelName_list(): LabelNameContext[] {
		return this.getTypedRuleContexts(LabelNameContext) as LabelNameContext[];
	}
	public labelName(i: number): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, i) as LabelNameContext;
	}
	public AMPERSAND_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.AMPERSAND);
	}
	public AMPERSAND(i: number): TerminalNode {
		return this.getToken(GqlParser.AMPERSAND, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelSetSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelSetSpec) {
	 		listener.enterLabelSetSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelSetSpec) {
	 		listener.exitLabelSetSpec(this);
		}
	}
}


export class RemoveStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REMOVE(): TerminalNode {
		return this.getToken(GqlParser.REMOVE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public removeItemList(): RemoveItemListContext {
		return this.getTypedRuleContext(RemoveItemListContext, 0) as RemoveItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveStatment) {
	 		listener.enterRemoveStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveStatment) {
	 		listener.exitRemoveStatment(this);
		}
	}
}


export class RemoveItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public removeItem_list(): RemoveItemContext[] {
		return this.getTypedRuleContexts(RemoveItemContext) as RemoveItemContext[];
	}
	public removeItem(i: number): RemoveItemContext {
		return this.getTypedRuleContext(RemoveItemContext, i) as RemoveItemContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveItemList) {
	 		listener.enterRemoveItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveItemList) {
	 		listener.exitRemoveItemList(this);
		}
	}
}


export class RemoveItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public removePropertyItem(): RemovePropertyItemContext {
		return this.getTypedRuleContext(RemovePropertyItemContext, 0) as RemovePropertyItemContext;
	}
	public removeLabelItem(): RemoveLabelItemContext {
		return this.getTypedRuleContext(RemoveLabelItemContext, 0) as RemoveLabelItemContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveItem) {
	 		listener.enterRemoveItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveItem) {
	 		listener.exitRemoveItem(this);
		}
	}
}


export class RemovePropertyItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removePropertyItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemovePropertyItem) {
	 		listener.enterRemovePropertyItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemovePropertyItem) {
	 		listener.exitRemovePropertyItem(this);
		}
	}
}


export class RemoveLabelItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_removeLabelItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRemoveLabelItem) {
	 		listener.enterRemoveLabelItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRemoveLabelItem) {
	 		listener.exitRemoveLabelItem(this);
		}
	}
}


export class DeleteStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public DELETE(): TerminalNode {
		return this.getToken(GqlParser.DELETE, 0);
	}
	public deleteItemList(): DeleteItemListContext {
		return this.getTypedRuleContext(DeleteItemListContext, 0) as DeleteItemListContext;
	}
	public DETACH(): TerminalNode {
		return this.getToken(GqlParser.DETACH, 0);
	}
	public NODETACH(): TerminalNode {
		return this.getToken(GqlParser.NODETACH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_deleteStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDeleteStatment) {
	 		listener.enterDeleteStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDeleteStatment) {
	 		listener.exitDeleteStatment(this);
		}
	}
}


export class DeleteItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public deleteItem_list(): DeleteItemContext[] {
		return this.getTypedRuleContexts(DeleteItemContext) as DeleteItemContext[];
	}
	public deleteItem(i: number): DeleteItemContext {
		return this.getTypedRuleContext(DeleteItemContext, i) as DeleteItemContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_deleteItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDeleteItemList) {
	 		listener.enterDeleteItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDeleteItemList) {
	 		listener.exitDeleteItemList(this);
		}
	}
}


export class DeleteItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_deleteItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDeleteItem) {
	 		listener.enterDeleteItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDeleteItem) {
	 		listener.exitDeleteItem(this);
		}
	}
}


export class CallDataModProcedureStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public callProcedureStatment(): CallProcedureStatmentContext {
		return this.getTypedRuleContext(CallProcedureStatmentContext, 0) as CallProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callDataModProcedureStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallDataModProcedureStatment) {
	 		listener.enterCallDataModProcedureStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallDataModProcedureStatment) {
	 		listener.exitCallDataModProcedureStatment(this);
		}
	}
}


export class CompositeQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public compositeQueryExpr(): CompositeQueryExprContext {
		return this.getTypedRuleContext(CompositeQueryExprContext, 0) as CompositeQueryExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_compositeQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCompositeQueryStatment) {
	 		listener.enterCompositeQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCompositeQueryStatment) {
	 		listener.exitCompositeQueryStatment(this);
		}
	}
}


export class CompositeQueryExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public compositeQueryPrimary(): CompositeQueryPrimaryContext {
		return this.getTypedRuleContext(CompositeQueryPrimaryContext, 0) as CompositeQueryPrimaryContext;
	}
	public compositeQueryExpr(): CompositeQueryExprContext {
		return this.getTypedRuleContext(CompositeQueryExprContext, 0) as CompositeQueryExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public queryConjunction(): QueryConjunctionContext {
		return this.getTypedRuleContext(QueryConjunctionContext, 0) as QueryConjunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_compositeQueryExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCompositeQueryExpr) {
	 		listener.enterCompositeQueryExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCompositeQueryExpr) {
	 		listener.exitCompositeQueryExpr(this);
		}
	}
}


export class QueryConjunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setOperator(): SetOperatorContext {
		return this.getTypedRuleContext(SetOperatorContext, 0) as SetOperatorContext;
	}
	public OTHERWISE(): TerminalNode {
		return this.getToken(GqlParser.OTHERWISE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_queryConjunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterQueryConjunction) {
	 		listener.enterQueryConjunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitQueryConjunction) {
	 		listener.exitQueryConjunction(this);
		}
	}
}


export class SetOperatorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
	public UNION(): TerminalNode {
		return this.getToken(GqlParser.UNION, 0);
	}
	public EXCEPT(): TerminalNode {
		return this.getToken(GqlParser.EXCEPT, 0);
	}
	public INTERSECT(): TerminalNode {
		return this.getToken(GqlParser.INTERSECT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setOperator;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetOperator) {
	 		listener.enterSetOperator(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetOperator) {
	 		listener.exitSetOperator(this);
		}
	}
}


export class CompositeQueryPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public linearQueryStatment(): LinearQueryStatmentContext {
		return this.getTypedRuleContext(LinearQueryStatmentContext, 0) as LinearQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_compositeQueryPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCompositeQueryPrimary) {
	 		listener.enterCompositeQueryPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCompositeQueryPrimary) {
	 		listener.exitCompositeQueryPrimary(this);
		}
	}
}


export class LinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearQueryStatment(): FocusedLinearQueryStatmentContext {
		return this.getTypedRuleContext(FocusedLinearQueryStatmentContext, 0) as FocusedLinearQueryStatmentContext;
	}
	public ambientLinearQueryStatment(): AmbientLinearQueryStatmentContext {
		return this.getTypedRuleContext(AmbientLinearQueryStatmentContext, 0) as AmbientLinearQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_linearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLinearQueryStatment) {
	 		listener.enterLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLinearQueryStatment) {
	 		listener.exitLinearQueryStatment(this);
		}
	}
}


export class FocusedLinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public focusedLinearQueryAndPrimitiveResultStatmentPart(): FocusedLinearQueryAndPrimitiveResultStatmentPartContext {
		return this.getTypedRuleContext(FocusedLinearQueryAndPrimitiveResultStatmentPartContext, 0) as FocusedLinearQueryAndPrimitiveResultStatmentPartContext;
	}
	public focusedLinearQueryStatmentPart_list(): FocusedLinearQueryStatmentPartContext[] {
		return this.getTypedRuleContexts(FocusedLinearQueryStatmentPartContext) as FocusedLinearQueryStatmentPartContext[];
	}
	public focusedLinearQueryStatmentPart(i: number): FocusedLinearQueryStatmentPartContext {
		return this.getTypedRuleContext(FocusedLinearQueryStatmentPartContext, i) as FocusedLinearQueryStatmentPartContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public focusedPrimitiveResultStatment(): FocusedPrimitiveResultStatmentContext {
		return this.getTypedRuleContext(FocusedPrimitiveResultStatmentContext, 0) as FocusedPrimitiveResultStatmentContext;
	}
	public focusedNestedQuerySpec(): FocusedNestedQuerySpecContext {
		return this.getTypedRuleContext(FocusedNestedQuerySpecContext, 0) as FocusedNestedQuerySpecContext;
	}
	public selectStatment(): SelectStatmentContext {
		return this.getTypedRuleContext(SelectStatmentContext, 0) as SelectStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearQueryStatment) {
	 		listener.enterFocusedLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearQueryStatment) {
	 		listener.exitFocusedLinearQueryStatment(this);
		}
	}
}


export class FocusedLinearQueryStatmentPartContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		return this.getTypedRuleContext(SimpleLinearQueryStatmentContext, 0) as SimpleLinearQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearQueryStatmentPart;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearQueryStatmentPart) {
	 		listener.enterFocusedLinearQueryStatmentPart(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearQueryStatmentPart) {
	 		listener.exitFocusedLinearQueryStatmentPart(this);
		}
	}
}


export class FocusedLinearQueryAndPrimitiveResultStatmentPartContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		return this.getTypedRuleContext(SimpleLinearQueryStatmentContext, 0) as SimpleLinearQueryStatmentContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedLinearQueryAndPrimitiveResultStatmentPart) {
	 		listener.enterFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedLinearQueryAndPrimitiveResultStatmentPart) {
	 		listener.exitFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}
}


export class FocusedPrimitiveResultStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedPrimitiveResultStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedPrimitiveResultStatment) {
	 		listener.enterFocusedPrimitiveResultStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedPrimitiveResultStatment) {
	 		listener.exitFocusedPrimitiveResultStatment(this);
		}
	}
}


export class FocusedNestedQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public useGraphClause(): UseGraphClauseContext {
		return this.getTypedRuleContext(UseGraphClauseContext, 0) as UseGraphClauseContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_focusedNestedQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFocusedNestedQuerySpec) {
	 		listener.enterFocusedNestedQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFocusedNestedQuerySpec) {
	 		listener.exitFocusedNestedQuerySpec(this);
		}
	}
}


export class AmbientLinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveResultStatment(): PrimitiveResultStatmentContext {
		return this.getTypedRuleContext(PrimitiveResultStatmentContext, 0) as PrimitiveResultStatmentContext;
	}
	public simpleLinearQueryStatment(): SimpleLinearQueryStatmentContext {
		return this.getTypedRuleContext(SimpleLinearQueryStatmentContext, 0) as SimpleLinearQueryStatmentContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ambientLinearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAmbientLinearQueryStatment) {
	 		listener.enterAmbientLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAmbientLinearQueryStatment) {
	 		listener.exitAmbientLinearQueryStatment(this);
		}
	}
}


export class SimpleLinearQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleQueryStatment_list(): SimpleQueryStatmentContext[] {
		return this.getTypedRuleContexts(SimpleQueryStatmentContext) as SimpleQueryStatmentContext[];
	}
	public simpleQueryStatment(i: number): SimpleQueryStatmentContext {
		return this.getTypedRuleContext(SimpleQueryStatmentContext, i) as SimpleQueryStatmentContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleLinearQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleLinearQueryStatment) {
	 		listener.enterSimpleLinearQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleLinearQueryStatment) {
	 		listener.exitSimpleLinearQueryStatment(this);
		}
	}
}


export class SimpleQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveQueryStatment(): PrimitiveQueryStatmentContext {
		return this.getTypedRuleContext(PrimitiveQueryStatmentContext, 0) as PrimitiveQueryStatmentContext;
	}
	public callQueryStatment(): CallQueryStatmentContext {
		return this.getTypedRuleContext(CallQueryStatmentContext, 0) as CallQueryStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleQueryStatment) {
	 		listener.enterSimpleQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleQueryStatment) {
	 		listener.exitSimpleQueryStatment(this);
		}
	}
}


export class PrimitiveQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public matchStatment(): MatchStatmentContext {
		return this.getTypedRuleContext(MatchStatmentContext, 0) as MatchStatmentContext;
	}
	public letStatment(): LetStatmentContext {
		return this.getTypedRuleContext(LetStatmentContext, 0) as LetStatmentContext;
	}
	public forStatment(): ForStatmentContext {
		return this.getTypedRuleContext(ForStatmentContext, 0) as ForStatmentContext;
	}
	public filterStatment(): FilterStatmentContext {
		return this.getTypedRuleContext(FilterStatmentContext, 0) as FilterStatmentContext;
	}
	public orderByAndPageStatment(): OrderByAndPageStatmentContext {
		return this.getTypedRuleContext(OrderByAndPageStatmentContext, 0) as OrderByAndPageStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveQueryStatment) {
	 		listener.enterPrimitiveQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveQueryStatment) {
	 		listener.exitPrimitiveQueryStatment(this);
		}
	}
}


export class MatchStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleMatchStatment(): SimpleMatchStatmentContext {
		return this.getTypedRuleContext(SimpleMatchStatmentContext, 0) as SimpleMatchStatmentContext;
	}
	public optionalMatchStatment(): OptionalMatchStatmentContext {
		return this.getTypedRuleContext(OptionalMatchStatmentContext, 0) as OptionalMatchStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_matchStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMatchStatment) {
	 		listener.enterMatchStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMatchStatment) {
	 		listener.exitMatchStatment(this);
		}
	}
}


export class SimpleMatchStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MATCH(): TerminalNode {
		return this.getToken(GqlParser.MATCH, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphPatternBindingTable(): GraphPatternBindingTableContext {
		return this.getTypedRuleContext(GraphPatternBindingTableContext, 0) as GraphPatternBindingTableContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleMatchStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleMatchStatment) {
	 		listener.enterSimpleMatchStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleMatchStatment) {
	 		listener.exitSimpleMatchStatment(this);
		}
	}
}


export class OptionalMatchStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(GqlParser.OPTIONAL, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public optionalOperand(): OptionalOperandContext {
		return this.getTypedRuleContext(OptionalOperandContext, 0) as OptionalOperandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optionalMatchStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptionalMatchStatment) {
	 		listener.enterOptionalMatchStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptionalMatchStatment) {
	 		listener.exitOptionalMatchStatment(this);
		}
	}
}


export class OptionalOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleMatchStatment(): SimpleMatchStatmentContext {
		return this.getTypedRuleContext(SimpleMatchStatmentContext, 0) as SimpleMatchStatmentContext;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public matchStatmentBlock(): MatchStatmentBlockContext {
		return this.getTypedRuleContext(MatchStatmentBlockContext, 0) as MatchStatmentBlockContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_optionalOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOptionalOperand) {
	 		listener.enterOptionalOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOptionalOperand) {
	 		listener.exitOptionalOperand(this);
		}
	}
}


export class MatchStatmentBlockContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public matchStatment_list(): MatchStatmentContext[] {
		return this.getTypedRuleContexts(MatchStatmentContext) as MatchStatmentContext[];
	}
	public matchStatment(i: number): MatchStatmentContext {
		return this.getTypedRuleContext(MatchStatmentContext, i) as MatchStatmentContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_matchStatmentBlock;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMatchStatmentBlock) {
	 		listener.enterMatchStatmentBlock(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMatchStatmentBlock) {
	 		listener.exitMatchStatmentBlock(this);
		}
	}
}


export class CallQueryStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public callProcedureStatment(): CallProcedureStatmentContext {
		return this.getTypedRuleContext(CallProcedureStatmentContext, 0) as CallProcedureStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callQueryStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallQueryStatment) {
	 		listener.enterCallQueryStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallQueryStatment) {
	 		listener.exitCallQueryStatment(this);
		}
	}
}


export class FilterStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FILTER(): TerminalNode {
		return this.getToken(GqlParser.FILTER, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_filterStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFilterStatment) {
	 		listener.enterFilterStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFilterStatment) {
	 		listener.exitFilterStatment(this);
		}
	}
}


export class LetStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LET(): TerminalNode {
		return this.getToken(GqlParser.LET, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public letVarDefList(): LetVarDefListContext {
		return this.getTypedRuleContext(LetVarDefListContext, 0) as LetVarDefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetStatment) {
	 		listener.enterLetStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetStatment) {
	 		listener.exitLetStatment(this);
		}
	}
}


export class LetVarDefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public letVarDef_list(): LetVarDefContext[] {
		return this.getTypedRuleContexts(LetVarDefContext) as LetVarDefContext[];
	}
	public letVarDef(i: number): LetVarDefContext {
		return this.getTypedRuleContext(LetVarDefContext, i) as LetVarDefContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letVarDefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetVarDefList) {
	 		listener.enterLetVarDefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetVarDefList) {
	 		listener.exitLetVarDefList(this);
		}
	}
}


export class LetVarDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueVarDef(): ValueVarDefContext {
		return this.getTypedRuleContext(ValueVarDefContext, 0) as ValueVarDefContext;
	}
	public valueVar(): ValueVarContext {
		return this.getTypedRuleContext(ValueVarContext, 0) as ValueVarContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letVarDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetVarDef) {
	 		listener.enterLetVarDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetVarDef) {
	 		listener.exitLetVarDef(this);
		}
	}
}


export class ForStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR(): TerminalNode {
		return this.getToken(GqlParser.FOR, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public forItem(): ForItemContext {
		return this.getTypedRuleContext(ForItemContext, 0) as ForItemContext;
	}
	public forOrdinalityOrOffset(): ForOrdinalityOrOffsetContext {
		return this.getTypedRuleContext(ForOrdinalityOrOffsetContext, 0) as ForOrdinalityOrOffsetContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForStatment) {
	 		listener.enterForStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForStatment) {
	 		listener.exitForStatment(this);
		}
	}
}


export class ForItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public forItemAlias(): ForItemAliasContext {
		return this.getTypedRuleContext(ForItemAliasContext, 0) as ForItemAliasContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForItem) {
	 		listener.enterForItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForItem) {
	 		listener.exitForItem(this);
		}
	}
}


export class ForItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public IN(): TerminalNode {
		return this.getToken(GqlParser.IN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForItemAlias) {
	 		listener.enterForItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForItemAlias) {
	 		listener.exitForItemAlias(this);
		}
	}
}


export class ForOrdinalityOrOffsetContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public ORDINALITY(): TerminalNode {
		return this.getToken(GqlParser.ORDINALITY, 0);
	}
	public OFFSET(): TerminalNode {
		return this.getToken(GqlParser.OFFSET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_forOrdinalityOrOffset;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterForOrdinalityOrOffset) {
	 		listener.enterForOrdinalityOrOffset(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitForOrdinalityOrOffset) {
	 		listener.exitForOrdinalityOrOffset(this);
		}
	}
}


export class OrderByAndPageStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public offsetClause(): OffsetClauseContext {
		return this.getTypedRuleContext(OffsetClauseContext, 0) as OffsetClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_orderByAndPageStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOrderByAndPageStatment) {
	 		listener.enterOrderByAndPageStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOrderByAndPageStatment) {
	 		listener.exitOrderByAndPageStatment(this);
		}
	}
}


export class PrimitiveResultStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public returnStatment(): ReturnStatmentContext {
		return this.getTypedRuleContext(ReturnStatmentContext, 0) as ReturnStatmentContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public orderByAndPageStatment(): OrderByAndPageStatmentContext {
		return this.getTypedRuleContext(OrderByAndPageStatmentContext, 0) as OrderByAndPageStatmentContext;
	}
	public FINISH(): TerminalNode {
		return this.getToken(GqlParser.FINISH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_primitiveResultStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrimitiveResultStatment) {
	 		listener.enterPrimitiveResultStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrimitiveResultStatment) {
	 		listener.exitPrimitiveResultStatment(this);
		}
	}
}


export class ReturnStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RETURN(): TerminalNode {
		return this.getToken(GqlParser.RETURN, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public returnStatmentBody(): ReturnStatmentBodyContext {
		return this.getTypedRuleContext(ReturnStatmentBodyContext, 0) as ReturnStatmentBodyContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnStatment) {
	 		listener.enterReturnStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnStatment) {
	 		listener.exitReturnStatment(this);
		}
	}
}


export class ReturnStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public returnItemList(): ReturnItemListContext {
		return this.getTypedRuleContext(ReturnItemListContext, 0) as ReturnItemListContext;
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public NO(): TerminalNode {
		return this.getToken(GqlParser.NO, 0);
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnStatmentBody) {
	 		listener.enterReturnStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnStatmentBody) {
	 		listener.exitReturnStatmentBody(this);
		}
	}
}


export class ReturnItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public returnItem_list(): ReturnItemContext[] {
		return this.getTypedRuleContexts(ReturnItemContext) as ReturnItemContext[];
	}
	public returnItem(i: number): ReturnItemContext {
		return this.getTypedRuleContext(ReturnItemContext, i) as ReturnItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnItemList) {
	 		listener.enterReturnItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnItemList) {
	 		listener.exitReturnItemList(this);
		}
	}
}


export class ReturnItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public aggregatingValueExpr(): AggregatingValueExprContext {
		return this.getTypedRuleContext(AggregatingValueExprContext, 0) as AggregatingValueExprContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public returnItemAlias(): ReturnItemAliasContext {
		return this.getTypedRuleContext(ReturnItemAliasContext, 0) as ReturnItemAliasContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnItem) {
	 		listener.enterReturnItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnItem) {
	 		listener.exitReturnItem(this);
		}
	}
}


export class ReturnItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_returnItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReturnItemAlias) {
	 		listener.enterReturnItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReturnItemAlias) {
	 		listener.exitReturnItemAlias(this);
		}
	}
}


export class SelectStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SELECT(): TerminalNode {
		return this.getToken(GqlParser.SELECT, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public selectItemList(): SelectItemListContext {
		return this.getTypedRuleContext(SelectItemListContext, 0) as SelectItemListContext;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
	public selectStatmentBody(): SelectStatmentBodyContext {
		return this.getTypedRuleContext(SelectStatmentBodyContext, 0) as SelectStatmentBodyContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public havingClause(): HavingClauseContext {
		return this.getTypedRuleContext(HavingClauseContext, 0) as HavingClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public offsetClause(): OffsetClauseContext {
		return this.getTypedRuleContext(OffsetClauseContext, 0) as OffsetClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectStatment) {
	 		listener.enterSelectStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectStatment) {
	 		listener.exitSelectStatment(this);
		}
	}
}


export class SelectItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectItem_list(): SelectItemContext[] {
		return this.getTypedRuleContexts(SelectItemContext) as SelectItemContext[];
	}
	public selectItem(i: number): SelectItemContext {
		return this.getTypedRuleContext(SelectItemContext, i) as SelectItemContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectItemList) {
	 		listener.enterSelectItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectItemList) {
	 		listener.exitSelectItemList(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public aggregatingValueExpr(): AggregatingValueExprContext {
		return this.getTypedRuleContext(AggregatingValueExprContext, 0) as AggregatingValueExprContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public selectItemAlias(): SelectItemAliasContext {
		return this.getTypedRuleContext(SelectItemAliasContext, 0) as SelectItemAliasContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectItem) {
	 		listener.enterSelectItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectItem) {
	 		listener.exitSelectItem(this);
		}
	}
}


export class SelectItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectItemAlias) {
	 		listener.enterSelectItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectItemAlias) {
	 		listener.exitSelectItemAlias(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HAVING(): TerminalNode {
		return this.getToken(GqlParser.HAVING, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_havingClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterHavingClause) {
	 		listener.enterHavingClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitHavingClause) {
	 		listener.exitHavingClause(this);
		}
	}
}


export class SelectStatmentBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public selectGraphMatchList(): SelectGraphMatchListContext {
		return this.getTypedRuleContext(SelectGraphMatchListContext, 0) as SelectGraphMatchListContext;
	}
	public selectQuerySpec(): SelectQuerySpecContext {
		return this.getTypedRuleContext(SelectQuerySpecContext, 0) as SelectQuerySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectStatmentBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectStatmentBody) {
	 		listener.enterSelectStatmentBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectStatmentBody) {
	 		listener.exitSelectStatmentBody(this);
		}
	}
}


export class SelectGraphMatchListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectGraphMatch_list(): SelectGraphMatchContext[] {
		return this.getTypedRuleContexts(SelectGraphMatchContext) as SelectGraphMatchContext[];
	}
	public selectGraphMatch(i: number): SelectGraphMatchContext {
		return this.getTypedRuleContext(SelectGraphMatchContext, i) as SelectGraphMatchContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectGraphMatchList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectGraphMatchList) {
	 		listener.enterSelectGraphMatchList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectGraphMatchList) {
	 		listener.exitSelectGraphMatchList(this);
		}
	}
}


export class SelectGraphMatchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public matchStatment(): MatchStatmentContext {
		return this.getTypedRuleContext(MatchStatmentContext, 0) as MatchStatmentContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectGraphMatch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectGraphMatch) {
	 		listener.enterSelectGraphMatch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectGraphMatch) {
	 		listener.exitSelectGraphMatch(this);
		}
	}
}


export class SelectQuerySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_selectQuerySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSelectQuerySpec) {
	 		listener.enterSelectQuerySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSelectQuerySpec) {
	 		listener.exitSelectQuerySpec(this);
		}
	}
}


export class CallProcedureStatmentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CALL(): TerminalNode {
		return this.getToken(GqlParser.CALL, 0);
	}
	public procedureCall(): ProcedureCallContext {
		return this.getTypedRuleContext(ProcedureCallContext, 0) as ProcedureCallContext;
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(GqlParser.OPTIONAL, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_callProcedureStatment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCallProcedureStatment) {
	 		listener.enterCallProcedureStatment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCallProcedureStatment) {
	 		listener.exitCallProcedureStatment(this);
		}
	}
}


export class ProcedureCallContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public inlineProcedureCall(): InlineProcedureCallContext {
		return this.getTypedRuleContext(InlineProcedureCallContext, 0) as InlineProcedureCallContext;
	}
	public namedProcedureCall(): NamedProcedureCallContext {
		return this.getTypedRuleContext(NamedProcedureCallContext, 0) as NamedProcedureCallContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureCall;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureCall) {
	 		listener.enterProcedureCall(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureCall) {
	 		listener.exitProcedureCall(this);
		}
	}
}


export class InlineProcedureCallContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nestedProcedureSpec(): NestedProcedureSpecContext {
		return this.getTypedRuleContext(NestedProcedureSpecContext, 0) as NestedProcedureSpecContext;
	}
	public varScopeClause(): VarScopeClauseContext {
		return this.getTypedRuleContext(VarScopeClauseContext, 0) as VarScopeClauseContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_inlineProcedureCall;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInlineProcedureCall) {
	 		listener.enterInlineProcedureCall(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInlineProcedureCall) {
	 		listener.exitInlineProcedureCall(this);
		}
	}
}


export class VarScopeClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public bindingVarRefList(): BindingVarRefListContext {
		return this.getTypedRuleContext(BindingVarRefListContext, 0) as BindingVarRefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_varScopeClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterVarScopeClause) {
	 		listener.enterVarScopeClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitVarScopeClause) {
	 		listener.exitVarScopeClause(this);
		}
	}
}


export class BindingVarRefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef_list(): BindingVarRefContext[] {
		return this.getTypedRuleContexts(BindingVarRefContext) as BindingVarRefContext[];
	}
	public bindingVarRef(i: number): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, i) as BindingVarRefContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarRefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarRefList) {
	 		listener.enterBindingVarRefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarRefList) {
	 		listener.exitBindingVarRefList(this);
		}
	}
}


export class NamedProcedureCallContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureRef(): ProcedureRefContext {
		return this.getTypedRuleContext(ProcedureRefContext, 0) as ProcedureRefContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public procedureArgList(): ProcedureArgListContext {
		return this.getTypedRuleContext(ProcedureArgListContext, 0) as ProcedureArgListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_namedProcedureCall;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNamedProcedureCall) {
	 		listener.enterNamedProcedureCall(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNamedProcedureCall) {
	 		listener.exitNamedProcedureCall(this);
		}
	}
}


export class ProcedureArgListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureArg_list(): ProcedureArgContext[] {
		return this.getTypedRuleContexts(ProcedureArgContext) as ProcedureArgContext[];
	}
	public procedureArg(i: number): ProcedureArgContext {
		return this.getTypedRuleContext(ProcedureArgContext, i) as ProcedureArgContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureArgList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureArgList) {
	 		listener.enterProcedureArgList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureArgList) {
	 		listener.exitProcedureArgList(this);
		}
	}
}


export class ProcedureArgContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureArg;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureArg) {
	 		listener.enterProcedureArg(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureArg) {
	 		listener.exitProcedureArg(this);
		}
	}
}


export class UseGraphClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public USE(): TerminalNode {
		return this.getToken(GqlParser.USE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_useGraphClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUseGraphClause) {
	 		listener.enterUseGraphClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUseGraphClause) {
	 		listener.exitUseGraphClause(this);
		}
	}
}


export class AtSchemaClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AT(): TerminalNode {
		return this.getToken(GqlParser.AT, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_atSchemaClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAtSchemaClause) {
	 		listener.enterAtSchemaClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAtSchemaClause) {
	 		listener.exitAtSchemaClause(this);
		}
	}
}


export class BindingVarRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVarRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVarRef) {
	 		listener.enterBindingVarRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVarRef) {
	 		listener.exitBindingVarRef(this);
		}
	}
}


export class ElementVarRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementVarRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementVarRef) {
	 		listener.enterElementVarRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementVarRef) {
	 		listener.exitElementVarRef(this);
		}
	}
}


export class PathVarRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathVarRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathVarRef) {
	 		listener.enterPathVarRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathVarRef) {
	 		listener.exitPathVarRef(this);
		}
	}
}


export class ParameterContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parameter;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParameter) {
	 		listener.enterParameter(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParameter) {
	 		listener.exitParameter(this);
		}
	}
}


export class GraphPatternBindingTableContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphPattern(): GraphPatternContext {
		return this.getTypedRuleContext(GraphPatternContext, 0) as GraphPatternContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphPatternYieldClause(): GraphPatternYieldClauseContext {
		return this.getTypedRuleContext(GraphPatternYieldClauseContext, 0) as GraphPatternYieldClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternBindingTable;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternBindingTable) {
	 		listener.enterGraphPatternBindingTable(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternBindingTable) {
	 		listener.exitGraphPatternBindingTable(this);
		}
	}
}


export class GraphPatternYieldClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public YIELD(): TerminalNode {
		return this.getToken(GqlParser.YIELD, 0);
	}
	public graphPatternYieldItemList(): GraphPatternYieldItemListContext {
		return this.getTypedRuleContext(GraphPatternYieldItemListContext, 0) as GraphPatternYieldItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternYieldClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternYieldClause) {
	 		listener.enterGraphPatternYieldClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternYieldClause) {
	 		listener.exitGraphPatternYieldClause(this);
		}
	}
}


export class GraphPatternYieldItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphPatternYieldItem_list(): GraphPatternYieldItemContext[] {
		return this.getTypedRuleContexts(GraphPatternYieldItemContext) as GraphPatternYieldItemContext[];
	}
	public graphPatternYieldItem(i: number): GraphPatternYieldItemContext {
		return this.getTypedRuleContext(GraphPatternYieldItemContext, i) as GraphPatternYieldItemContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternYieldItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternYieldItemList) {
	 		listener.enterGraphPatternYieldItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternYieldItemList) {
	 		listener.exitGraphPatternYieldItemList(this);
		}
	}
}


export class GraphPatternYieldItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public pathVarRef(): PathVarRefContext {
		return this.getTypedRuleContext(PathVarRefContext, 0) as PathVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternYieldItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternYieldItem) {
	 		listener.enterGraphPatternYieldItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternYieldItem) {
	 		listener.exitGraphPatternYieldItem(this);
		}
	}
}


export class GraphPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPatternList(): PathPatternListContext {
		return this.getTypedRuleContext(PathPatternListContext, 0) as PathPatternListContext;
	}
	public matchMode(): MatchModeContext {
		return this.getTypedRuleContext(MatchModeContext, 0) as MatchModeContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public keepClause(): KeepClauseContext {
		return this.getTypedRuleContext(KeepClauseContext, 0) as KeepClauseContext;
	}
	public graphPatternWhereClause(): GraphPatternWhereClauseContext {
		return this.getTypedRuleContext(GraphPatternWhereClauseContext, 0) as GraphPatternWhereClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPattern) {
	 		listener.enterGraphPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPattern) {
	 		listener.exitGraphPattern(this);
		}
	}
}


export class MatchModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public repeatableElementsMatchMode(): RepeatableElementsMatchModeContext {
		return this.getTypedRuleContext(RepeatableElementsMatchModeContext, 0) as RepeatableElementsMatchModeContext;
	}
	public differentEdgesMatchMode(): DifferentEdgesMatchModeContext {
		return this.getTypedRuleContext(DifferentEdgesMatchModeContext, 0) as DifferentEdgesMatchModeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_matchMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMatchMode) {
	 		listener.enterMatchMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMatchMode) {
	 		listener.exitMatchMode(this);
		}
	}
}


export class RepeatableElementsMatchModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPEATABLE(): TerminalNode {
		return this.getToken(GqlParser.REPEATABLE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public elementBindingsOrElements(): ElementBindingsOrElementsContext {
		return this.getTypedRuleContext(ElementBindingsOrElementsContext, 0) as ElementBindingsOrElementsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_repeatableElementsMatchMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRepeatableElementsMatchMode) {
	 		listener.enterRepeatableElementsMatchMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRepeatableElementsMatchMode) {
	 		listener.exitRepeatableElementsMatchMode(this);
		}
	}
}


export class DifferentEdgesMatchModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.DIFFERENT, 0);
	}
	public edgeBindingsOrEdges(): EdgeBindingsOrEdgesContext {
		return this.getTypedRuleContext(EdgeBindingsOrEdgesContext, 0) as EdgeBindingsOrEdgesContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_differentEdgesMatchMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDifferentEdgesMatchMode) {
	 		listener.enterDifferentEdgesMatchMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDifferentEdgesMatchMode) {
	 		listener.exitDifferentEdgesMatchMode(this);
		}
	}
}


export class ElementBindingsOrElementsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELEMENT(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
	public ELEMENTS(): TerminalNode {
		return this.getToken(GqlParser.ELEMENTS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementBindingsOrElements;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementBindingsOrElements) {
	 		listener.enterElementBindingsOrElements(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementBindingsOrElements) {
	 		listener.exitElementBindingsOrElements(this);
		}
	}
}


export class EdgeBindingsOrEdgesContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeSynonym(): EdgeSynonymContext {
		return this.getTypedRuleContext(EdgeSynonymContext, 0) as EdgeSynonymContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
	public edgesSynonym(): EdgesSynonymContext {
		return this.getTypedRuleContext(EdgesSynonymContext, 0) as EdgesSynonymContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeBindingsOrEdges;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeBindingsOrEdges) {
	 		listener.enterEdgeBindingsOrEdges(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeBindingsOrEdges) {
	 		listener.exitEdgeBindingsOrEdges(this);
		}
	}
}


export class PathPatternListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPattern_list(): PathPatternContext[] {
		return this.getTypedRuleContexts(PathPatternContext) as PathPatternContext[];
	}
	public pathPattern(i: number): PathPatternContext {
		return this.getTypedRuleContext(PathPatternContext, i) as PathPatternContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternList) {
	 		listener.enterPathPatternList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternList) {
	 		listener.exitPathPatternList(this);
		}
	}
}


export class PathPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathVarDeclaration(): PathVarDeclarationContext {
		return this.getTypedRuleContext(PathVarDeclarationContext, 0) as PathVarDeclarationContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public pathPatternPrefix(): PathPatternPrefixContext {
		return this.getTypedRuleContext(PathPatternPrefixContext, 0) as PathPatternPrefixContext;
	}
	public pathPatternExpr_list(): PathPatternExprContext[] {
		return this.getTypedRuleContexts(PathPatternExprContext) as PathPatternExprContext[];
	}
	public pathPatternExpr(i: number): PathPatternExprContext {
		return this.getTypedRuleContext(PathPatternExprContext, i) as PathPatternExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPattern) {
	 		listener.enterPathPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPattern) {
	 		listener.exitPathPattern(this);
		}
	}
}


export class PathVarDeclarationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathVar(): PathVarContext {
		return this.getTypedRuleContext(PathVarContext, 0) as PathVarContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathVarDeclaration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathVarDeclaration) {
	 		listener.enterPathVarDeclaration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathVarDeclaration) {
	 		listener.exitPathVarDeclaration(this);
		}
	}
}


export class KeepClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KEEP(): TerminalNode {
		return this.getToken(GqlParser.KEEP, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public pathPatternPrefix(): PathPatternPrefixContext {
		return this.getTypedRuleContext(PathPatternPrefixContext, 0) as PathPatternPrefixContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_keepClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterKeepClause) {
	 		listener.enterKeepClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitKeepClause) {
	 		listener.exitKeepClause(this);
		}
	}
}


export class GraphPatternWhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternWhereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternWhereClause) {
	 		listener.enterGraphPatternWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternWhereClause) {
	 		listener.exitGraphPatternWhereClause(this);
		}
	}
}


export class PathPatternPrefixContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathModePrefix(): PathModePrefixContext {
		return this.getTypedRuleContext(PathModePrefixContext, 0) as PathModePrefixContext;
	}
	public pathSearchPrefix(): PathSearchPrefixContext {
		return this.getTypedRuleContext(PathSearchPrefixContext, 0) as PathSearchPrefixContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternPrefix;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternPrefix) {
	 		listener.enterPathPatternPrefix(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternPrefix) {
	 		listener.exitPathPatternPrefix(this);
		}
	}
}


export class PathModePrefixContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathModePrefix;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathModePrefix) {
	 		listener.enterPathModePrefix(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathModePrefix) {
	 		listener.exitPathModePrefix(this);
		}
	}
}


export class PathModeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WALK(): TerminalNode {
		return this.getToken(GqlParser.WALK, 0);
	}
	public TRAIL(): TerminalNode {
		return this.getToken(GqlParser.TRAIL, 0);
	}
	public SIMPLE(): TerminalNode {
		return this.getToken(GqlParser.SIMPLE, 0);
	}
	public ACYCLIC(): TerminalNode {
		return this.getToken(GqlParser.ACYCLIC, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathMode;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathMode) {
	 		listener.enterPathMode(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathMode) {
	 		listener.exitPathMode(this);
		}
	}
}


export class PathSearchPrefixContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public allPathSearch(): AllPathSearchContext {
		return this.getTypedRuleContext(AllPathSearchContext, 0) as AllPathSearchContext;
	}
	public anyPathSearch(): AnyPathSearchContext {
		return this.getTypedRuleContext(AnyPathSearchContext, 0) as AnyPathSearchContext;
	}
	public shortestPathSearch(): ShortestPathSearchContext {
		return this.getTypedRuleContext(ShortestPathSearchContext, 0) as ShortestPathSearchContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathSearchPrefix;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathSearchPrefix) {
	 		listener.enterPathSearchPrefix(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathSearchPrefix) {
	 		listener.exitPathSearchPrefix(this);
		}
	}
}


export class AllPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_allPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAllPathSearch) {
	 		listener.enterAllPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAllPathSearch) {
	 		listener.exitAllPathSearch(this);
		}
	}
}


export class PathOrPathsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
	public PATHS(): TerminalNode {
		return this.getToken(GqlParser.PATHS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathOrPaths;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathOrPaths) {
	 		listener.enterPathOrPaths(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathOrPaths) {
	 		listener.exitPathOrPaths(this);
		}
	}
}


export class AnyPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public numberOfPaths(): NumberOfPathsContext {
		return this.getTypedRuleContext(NumberOfPathsContext, 0) as NumberOfPathsContext;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_anyPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAnyPathSearch) {
	 		listener.enterAnyPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAnyPathSearch) {
	 		listener.exitAnyPathSearch(this);
		}
	}
}


export class NumberOfPathsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numberOfPaths;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumberOfPaths) {
	 		listener.enterNumberOfPaths(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumberOfPaths) {
	 		listener.exitNumberOfPaths(this);
		}
	}
}


export class ShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public allShortestPathSearch(): AllShortestPathSearchContext {
		return this.getTypedRuleContext(AllShortestPathSearchContext, 0) as AllShortestPathSearchContext;
	}
	public anyShortestPathSearch(): AnyShortestPathSearchContext {
		return this.getTypedRuleContext(AnyShortestPathSearchContext, 0) as AnyShortestPathSearchContext;
	}
	public countedShortestPathSearch(): CountedShortestPathSearchContext {
		return this.getTypedRuleContext(CountedShortestPathSearchContext, 0) as CountedShortestPathSearchContext;
	}
	public countedShortestGroupSearch(): CountedShortestGroupSearchContext {
		return this.getTypedRuleContext(CountedShortestGroupSearchContext, 0) as CountedShortestGroupSearchContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_shortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterShortestPathSearch) {
	 		listener.enterShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitShortestPathSearch) {
	 		listener.exitShortestPathSearch(this);
		}
	}
}


export class AllShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_allShortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAllShortestPathSearch) {
	 		listener.enterAllShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAllShortestPathSearch) {
	 		listener.exitAllShortestPathSearch(this);
		}
	}
}


export class AnyShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_anyShortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAnyShortestPathSearch) {
	 		listener.enterAnyShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAnyShortestPathSearch) {
	 		listener.exitAnyShortestPathSearch(this);
		}
	}
}


export class CountedShortestPathSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public numberOfPaths(): NumberOfPathsContext {
		return this.getTypedRuleContext(NumberOfPathsContext, 0) as NumberOfPathsContext;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_countedShortestPathSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCountedShortestPathSearch) {
	 		listener.enterCountedShortestPathSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCountedShortestPathSearch) {
	 		listener.exitCountedShortestPathSearch(this);
		}
	}
}


export class CountedShortestGroupSearchContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public numberOfGroups(): NumberOfGroupsContext {
		return this.getTypedRuleContext(NumberOfGroupsContext, 0) as NumberOfGroupsContext;
	}
	public groupOrGroups(): GroupOrGroupsContext {
		return this.getTypedRuleContext(GroupOrGroupsContext, 0) as GroupOrGroupsContext;
	}
	public pathMode(): PathModeContext {
		return this.getTypedRuleContext(PathModeContext, 0) as PathModeContext;
	}
	public pathOrPaths(): PathOrPathsContext {
		return this.getTypedRuleContext(PathOrPathsContext, 0) as PathOrPathsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_countedShortestGroupSearch;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCountedShortestGroupSearch) {
	 		listener.enterCountedShortestGroupSearch(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCountedShortestGroupSearch) {
	 		listener.exitCountedShortestGroupSearch(this);
		}
	}
}


export class GroupOrGroupsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
	public GROUPS(): TerminalNode {
		return this.getToken(GqlParser.GROUPS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupOrGroups;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupOrGroups) {
	 		listener.enterGroupOrGroups(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupOrGroups) {
	 		listener.exitGroupOrGroups(this);
		}
	}
}


export class NumberOfGroupsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numberOfGroups;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumberOfGroups) {
	 		listener.enterNumberOfGroups(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumberOfGroups) {
	 		listener.exitNumberOfGroups(this);
		}
	}
}


export class PathPatternExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathTerm(): PathTermContext {
		return this.getTypedRuleContext(PathTermContext, 0) as PathTermContext;
	}
	public pathMultisetAlternation(): PathMultisetAlternationContext {
		return this.getTypedRuleContext(PathMultisetAlternationContext, 0) as PathMultisetAlternationContext;
	}
	public pathPatternUnion(): PathPatternUnionContext {
		return this.getTypedRuleContext(PathPatternUnionContext, 0) as PathPatternUnionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternExpr) {
	 		listener.enterPathPatternExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternExpr) {
	 		listener.exitPathPatternExpr(this);
		}
	}
}


export class PathMultisetAlternationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathTerm_list(): PathTermContext[] {
		return this.getTypedRuleContexts(PathTermContext) as PathTermContext[];
	}
	public pathTerm(i: number): PathTermContext {
		return this.getTypedRuleContext(PathTermContext, i) as PathTermContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public MULTISET_ALTERNATION_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.MULTISET_ALTERNATION);
	}
	public MULTISET_ALTERNATION(i: number): TerminalNode {
		return this.getToken(GqlParser.MULTISET_ALTERNATION, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathMultisetAlternation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathMultisetAlternation) {
	 		listener.enterPathMultisetAlternation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathMultisetAlternation) {
	 		listener.exitPathMultisetAlternation(this);
		}
	}
}


export class PathPatternUnionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathTerm_list(): PathTermContext[] {
		return this.getTypedRuleContexts(PathTermContext) as PathTermContext[];
	}
	public pathTerm(i: number): PathTermContext {
		return this.getTypedRuleContext(PathTermContext, i) as PathTermContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPatternUnion;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPatternUnion) {
	 		listener.enterPathPatternUnion(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPatternUnion) {
	 		listener.exitPathPatternUnion(this);
		}
	}
}


export class PathTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathFactor_list(): PathFactorContext[] {
		return this.getTypedRuleContexts(PathFactorContext) as PathFactorContext[];
	}
	public pathFactor(i: number): PathFactorContext {
		return this.getTypedRuleContext(PathFactorContext, i) as PathFactorContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathTerm) {
	 		listener.enterPathTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathTerm) {
	 		listener.exitPathTerm(this);
		}
	}
}


export class PathFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPrimary(): PathPrimaryContext {
		return this.getTypedRuleContext(PathPrimaryContext, 0) as PathPrimaryContext;
	}
	public quantifiedPathPrimary(): QuantifiedPathPrimaryContext {
		return this.getTypedRuleContext(QuantifiedPathPrimaryContext, 0) as QuantifiedPathPrimaryContext;
	}
	public questionedPathPrimary(): QuestionedPathPrimaryContext {
		return this.getTypedRuleContext(QuestionedPathPrimaryContext, 0) as QuestionedPathPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathFactor) {
	 		listener.enterPathFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathFactor) {
	 		listener.exitPathFactor(this);
		}
	}
}


export class QuantifiedPathPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPrimary(): PathPrimaryContext {
		return this.getTypedRuleContext(PathPrimaryContext, 0) as PathPrimaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphPatternQuantifier(): GraphPatternQuantifierContext {
		return this.getTypedRuleContext(GraphPatternQuantifierContext, 0) as GraphPatternQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_quantifiedPathPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterQuantifiedPathPrimary) {
	 		listener.enterQuantifiedPathPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitQuantifiedPathPrimary) {
	 		listener.exitQuantifiedPathPrimary(this);
		}
	}
}


export class QuestionedPathPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathPrimary(): PathPrimaryContext {
		return this.getTypedRuleContext(PathPrimaryContext, 0) as PathPrimaryContext;
	}
	public QUESTION_MARK(): TerminalNode {
		return this.getToken(GqlParser.QUESTION_MARK, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_questionedPathPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterQuestionedPathPrimary) {
	 		listener.enterQuestionedPathPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitQuestionedPathPrimary) {
	 		listener.exitQuestionedPathPrimary(this);
		}
	}
}


export class PathPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementPattern(): ElementPatternContext {
		return this.getTypedRuleContext(ElementPatternContext, 0) as ElementPatternContext;
	}
	public parenthesizedPathPatternExpr(): ParenthesizedPathPatternExprContext {
		return this.getTypedRuleContext(ParenthesizedPathPatternExprContext, 0) as ParenthesizedPathPatternExprContext;
	}
	public simplifiedPathPatternExpr(): SimplifiedPathPatternExprContext {
		return this.getTypedRuleContext(SimplifiedPathPatternExprContext, 0) as SimplifiedPathPatternExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathPrimary) {
	 		listener.enterPathPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathPrimary) {
	 		listener.exitPathPrimary(this);
		}
	}
}


export class ElementPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodePattern(): NodePatternContext {
		return this.getTypedRuleContext(NodePatternContext, 0) as NodePatternContext;
	}
	public edgePattern(): EdgePatternContext {
		return this.getTypedRuleContext(EdgePatternContext, 0) as EdgePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPattern) {
	 		listener.enterElementPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPattern) {
	 		listener.exitElementPattern(this);
		}
	}
}


export class NodePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodePattern) {
	 		listener.enterNodePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodePattern) {
	 		listener.exitNodePattern(this);
		}
	}
}


export class ElementPatternFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarDeclaration(): ElementVarDeclarationContext {
		return this.getTypedRuleContext(ElementVarDeclarationContext, 0) as ElementVarDeclarationContext;
	}
	public isLabelExpr(): IsLabelExprContext {
		return this.getTypedRuleContext(IsLabelExprContext, 0) as IsLabelExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public elementPatternPredicate(): ElementPatternPredicateContext {
		return this.getTypedRuleContext(ElementPatternPredicateContext, 0) as ElementPatternPredicateContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPatternFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPatternFiller) {
	 		listener.enterElementPatternFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPatternFiller) {
	 		listener.exitElementPatternFiller(this);
		}
	}
}


export class ElementVarDeclarationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVar(): ElementVarContext {
		return this.getTypedRuleContext(ElementVarContext, 0) as ElementVarContext;
	}
	public TEMP(): TerminalNode {
		return this.getToken(GqlParser.TEMP, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementVarDeclaration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementVarDeclaration) {
	 		listener.enterElementVarDeclaration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementVarDeclaration) {
	 		listener.exitElementVarDeclaration(this);
		}
	}
}


export class IsLabelExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelExpr(): LabelExprContext {
		return this.getTypedRuleContext(LabelExprContext, 0) as LabelExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_isLabelExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIsLabelExpr) {
	 		listener.enterIsLabelExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIsLabelExpr) {
	 		listener.exitIsLabelExpr(this);
		}
	}
}


export class IsOrColonContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_isOrColon;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIsOrColon) {
	 		listener.enterIsOrColon(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIsOrColon) {
	 		listener.exitIsOrColon(this);
		}
	}
}


export class ElementPatternPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementPatternWhereClause(): ElementPatternWhereClauseContext {
		return this.getTypedRuleContext(ElementPatternWhereClauseContext, 0) as ElementPatternWhereClauseContext;
	}
	public elementPropertySpec(): ElementPropertySpecContext {
		return this.getTypedRuleContext(ElementPropertySpecContext, 0) as ElementPropertySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPatternPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPatternPredicate) {
	 		listener.enterElementPatternPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPatternPredicate) {
	 		listener.exitElementPatternPredicate(this);
		}
	}
}


export class ElementPatternWhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPatternWhereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPatternWhereClause) {
	 		listener.enterElementPatternWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPatternWhereClause) {
	 		listener.exitElementPatternWhereClause(this);
		}
	}
}


export class ElementPropertySpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
		return this.getTypedRuleContext(PropertyKeyValuePairListContext, 0) as PropertyKeyValuePairListContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementPropertySpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementPropertySpec) {
	 		listener.enterElementPropertySpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementPropertySpec) {
	 		listener.exitElementPropertySpec(this);
		}
	}
}


export class PropertyKeyValuePairListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyKeyValuePair_list(): PropertyKeyValuePairContext[] {
		return this.getTypedRuleContexts(PropertyKeyValuePairContext) as PropertyKeyValuePairContext[];
	}
	public propertyKeyValuePair(i: number): PropertyKeyValuePairContext {
		return this.getTypedRuleContext(PropertyKeyValuePairContext, i) as PropertyKeyValuePairContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyKeyValuePairList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyKeyValuePairList) {
	 		listener.enterPropertyKeyValuePairList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyKeyValuePairList) {
	 		listener.exitPropertyKeyValuePairList(this);
		}
	}
}


export class PropertyKeyValuePairContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyKeyValuePair;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyKeyValuePair) {
	 		listener.enterPropertyKeyValuePair(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyKeyValuePair) {
	 		listener.exitPropertyKeyValuePair(this);
		}
	}
}


export class EdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgePattern(): FullEdgePatternContext {
		return this.getTypedRuleContext(FullEdgePatternContext, 0) as FullEdgePatternContext;
	}
	public abbreviatedEdgePattern(): AbbreviatedEdgePatternContext {
		return this.getTypedRuleContext(AbbreviatedEdgePatternContext, 0) as AbbreviatedEdgePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgePattern) {
	 		listener.enterEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgePattern) {
	 		listener.exitEdgePattern(this);
		}
	}
}


export class FullEdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgePointingLeft(): FullEdgePointingLeftContext {
		return this.getTypedRuleContext(FullEdgePointingLeftContext, 0) as FullEdgePointingLeftContext;
	}
	public fullEdgeUndirected(): FullEdgeUndirectedContext {
		return this.getTypedRuleContext(FullEdgeUndirectedContext, 0) as FullEdgeUndirectedContext;
	}
	public fullEdgePointingRight(): FullEdgePointingRightContext {
		return this.getTypedRuleContext(FullEdgePointingRightContext, 0) as FullEdgePointingRightContext;
	}
	public fullEdgeLeftOrUndirected(): FullEdgeLeftOrUndirectedContext {
		return this.getTypedRuleContext(FullEdgeLeftOrUndirectedContext, 0) as FullEdgeLeftOrUndirectedContext;
	}
	public fullEdgeUndirectedOrRight(): FullEdgeUndirectedOrRightContext {
		return this.getTypedRuleContext(FullEdgeUndirectedOrRightContext, 0) as FullEdgeUndirectedOrRightContext;
	}
	public fullEdgeLeftOrRight(): FullEdgeLeftOrRightContext {
		return this.getTypedRuleContext(FullEdgeLeftOrRightContext, 0) as FullEdgeLeftOrRightContext;
	}
	public fullEdgeAnyDirection(): FullEdgeAnyDirectionContext {
		return this.getTypedRuleContext(FullEdgeAnyDirectionContext, 0) as FullEdgeAnyDirectionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgePattern) {
	 		listener.enterFullEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgePattern) {
	 		listener.exitFullEdgePattern(this);
		}
	}
}


export class FullEdgePointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgePointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgePointingLeft) {
	 		listener.enterFullEdgePointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgePointingLeft) {
	 		listener.exitFullEdgePointingLeft(this);
		}
	}
}


export class FullEdgeUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeUndirected) {
	 		listener.enterFullEdgeUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeUndirected) {
	 		listener.exitFullEdgeUndirected(this);
		}
	}
}


export class FullEdgePointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgePointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgePointingRight) {
	 		listener.enterFullEdgePointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgePointingRight) {
	 		listener.exitFullEdgePointingRight(this);
		}
	}
}


export class FullEdgeLeftOrUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_TILDE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeLeftOrUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeLeftOrUndirected) {
	 		listener.enterFullEdgeLeftOrUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeLeftOrUndirected) {
	 		listener.exitFullEdgeLeftOrUndirected(this);
		}
	}
}


export class FullEdgeUndirectedOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeUndirectedOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeUndirectedOrRight) {
	 		listener.enterFullEdgeUndirectedOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeUndirectedOrRight) {
	 		listener.exitFullEdgeUndirectedOrRight(this);
		}
	}
}


export class FullEdgeLeftOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeLeftOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeLeftOrRight) {
	 		listener.enterFullEdgeLeftOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeLeftOrRight) {
	 		listener.exitFullEdgeLeftOrRight(this);
		}
	}
}


export class FullEdgeAnyDirectionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public elementPatternFiller(): ElementPatternFillerContext {
		return this.getTypedRuleContext(ElementPatternFillerContext, 0) as ElementPatternFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeAnyDirection;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeAnyDirection) {
	 		listener.enterFullEdgeAnyDirection(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeAnyDirection) {
	 		listener.exitFullEdgeAnyDirection(this);
		}
	}
}


export class AbbreviatedEdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
	public LEFT_ARROW_TILDE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	}
	public TILDE_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	}
	public LEFT_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_RIGHT, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgePattern) {
	 		listener.enterAbbreviatedEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgePattern) {
	 		listener.exitAbbreviatedEdgePattern(this);
		}
	}
}


export class ParenthesizedPathPatternExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathPatternExpr(): PathPatternExprContext {
		return this.getTypedRuleContext(PathPatternExprContext, 0) as PathPatternExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public subpathVarDeclaration(): SubpathVarDeclarationContext {
		return this.getTypedRuleContext(SubpathVarDeclarationContext, 0) as SubpathVarDeclarationContext;
	}
	public pathModePrefix(): PathModePrefixContext {
		return this.getTypedRuleContext(PathModePrefixContext, 0) as PathModePrefixContext;
	}
	public parenthesizedPathPatternWhereClause(): ParenthesizedPathPatternWhereClauseContext {
		return this.getTypedRuleContext(ParenthesizedPathPatternWhereClauseContext, 0) as ParenthesizedPathPatternWhereClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedPathPatternExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedPathPatternExpr) {
	 		listener.enterParenthesizedPathPatternExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedPathPatternExpr) {
	 		listener.exitParenthesizedPathPatternExpr(this);
		}
	}
}


export class SubpathVarDeclarationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public subpathVar(): SubpathVarContext {
		return this.getTypedRuleContext(SubpathVarContext, 0) as SubpathVarContext;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_subpathVarDeclaration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSubpathVarDeclaration) {
	 		listener.enterSubpathVarDeclaration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSubpathVarDeclaration) {
	 		listener.exitSubpathVarDeclaration(this);
		}
	}
}


export class ParenthesizedPathPatternWhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedPathPatternWhereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedPathPatternWhereClause) {
	 		listener.enterParenthesizedPathPatternWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedPathPatternWhereClause) {
	 		listener.exitParenthesizedPathPatternWhereClause(this);
		}
	}
}


export class InsertGraphPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertGraphPatternList(): InsertGraphPatternListContext {
		return this.getTypedRuleContext(InsertGraphPatternListContext, 0) as InsertGraphPatternListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertGraphPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertGraphPattern) {
	 		listener.enterInsertGraphPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertGraphPattern) {
	 		listener.exitInsertGraphPattern(this);
		}
	}
}


export class InsertGraphPatternListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertPathPattern_list(): InsertPathPatternContext[] {
		return this.getTypedRuleContexts(InsertPathPatternContext) as InsertPathPatternContext[];
	}
	public insertPathPattern(i: number): InsertPathPatternContext {
		return this.getTypedRuleContext(InsertPathPatternContext, i) as InsertPathPatternContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertGraphPatternList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertGraphPatternList) {
	 		listener.enterInsertGraphPatternList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertGraphPatternList) {
	 		listener.exitInsertGraphPatternList(this);
		}
	}
}


export class InsertPathPatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertNodePattern_list(): InsertNodePatternContext[] {
		return this.getTypedRuleContexts(InsertNodePatternContext) as InsertNodePatternContext[];
	}
	public insertNodePattern(i: number): InsertNodePatternContext {
		return this.getTypedRuleContext(InsertNodePatternContext, i) as InsertNodePatternContext;
	}
	public insertEdgePattern_list(): InsertEdgePatternContext[] {
		return this.getTypedRuleContexts(InsertEdgePatternContext) as InsertEdgePatternContext[];
	}
	public insertEdgePattern(i: number): InsertEdgePatternContext {
		return this.getTypedRuleContext(InsertEdgePatternContext, i) as InsertEdgePatternContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertPathPattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertPathPattern) {
	 		listener.enterInsertPathPattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertPathPattern) {
	 		listener.exitInsertPathPattern(this);
		}
	}
}


export class InsertNodePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertNodePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertNodePattern) {
	 		listener.enterInsertNodePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertNodePattern) {
	 		listener.exitInsertNodePattern(this);
		}
	}
}


export class InsertEdgePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertEdgePointingLeft(): InsertEdgePointingLeftContext {
		return this.getTypedRuleContext(InsertEdgePointingLeftContext, 0) as InsertEdgePointingLeftContext;
	}
	public insertEdgePointingRight(): InsertEdgePointingRightContext {
		return this.getTypedRuleContext(InsertEdgePointingRightContext, 0) as InsertEdgePointingRightContext;
	}
	public insertEdgeUndirected(): InsertEdgeUndirectedContext {
		return this.getTypedRuleContext(InsertEdgeUndirectedContext, 0) as InsertEdgeUndirectedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgePattern) {
	 		listener.enterInsertEdgePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgePattern) {
	 		listener.exitInsertEdgePattern(this);
		}
	}
}


export class InsertEdgePointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgePointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgePointingLeft) {
	 		listener.enterInsertEdgePointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgePointingLeft) {
	 		listener.exitInsertEdgePointingLeft(this);
		}
	}
}


export class InsertEdgePointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgePointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgePointingRight) {
	 		listener.enterInsertEdgePointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgePointingRight) {
	 		listener.exitInsertEdgePointingRight(this);
		}
	}
}


export class InsertEdgeUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public insertElementPatternFiller(): InsertElementPatternFillerContext {
		return this.getTypedRuleContext(InsertElementPatternFillerContext, 0) as InsertElementPatternFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertEdgeUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertEdgeUndirected) {
	 		listener.enterInsertEdgeUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertEdgeUndirected) {
	 		listener.exitInsertEdgeUndirected(this);
		}
	}
}


export class InsertElementPatternFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarDeclaration(): ElementVarDeclarationContext {
		return this.getTypedRuleContext(ElementVarDeclarationContext, 0) as ElementVarDeclarationContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public labelAndPropertySetSpec(): LabelAndPropertySetSpecContext {
		return this.getTypedRuleContext(LabelAndPropertySetSpecContext, 0) as LabelAndPropertySetSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_insertElementPatternFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterInsertElementPatternFiller) {
	 		listener.enterInsertElementPatternFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitInsertElementPatternFiller) {
	 		listener.exitInsertElementPatternFiller(this);
		}
	}
}


export class LabelAndPropertySetSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public isOrColon(): IsOrColonContext {
		return this.getTypedRuleContext(IsOrColonContext, 0) as IsOrColonContext;
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public elementPropertySpec(): ElementPropertySpecContext {
		return this.getTypedRuleContext(ElementPropertySpecContext, 0) as ElementPropertySpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelAndPropertySetSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelAndPropertySetSpec) {
	 		listener.enterLabelAndPropertySetSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelAndPropertySetSpec) {
	 		listener.exitLabelAndPropertySetSpec(this);
		}
	}
}


export class LabelExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelTerm_list(): LabelTermContext[] {
		return this.getTypedRuleContexts(LabelTermContext) as LabelTermContext[];
	}
	public labelTerm(i: number): LabelTermContext {
		return this.getTypedRuleContext(LabelTermContext, i) as LabelTermContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelExpr) {
	 		listener.enterLabelExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelExpr) {
	 		listener.exitLabelExpr(this);
		}
	}
}


export class LabelTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelFactor_list(): LabelFactorContext[] {
		return this.getTypedRuleContexts(LabelFactorContext) as LabelFactorContext[];
	}
	public labelFactor(i: number): LabelFactorContext {
		return this.getTypedRuleContext(LabelFactorContext, i) as LabelFactorContext;
	}
	public AMPERSAND_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.AMPERSAND);
	}
	public AMPERSAND(i: number): TerminalNode {
		return this.getToken(GqlParser.AMPERSAND, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelTerm) {
	 		listener.enterLabelTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelTerm) {
	 		listener.exitLabelTerm(this);
		}
	}
}


export class LabelFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelPrimary(): LabelPrimaryContext {
		return this.getTypedRuleContext(LabelPrimaryContext, 0) as LabelPrimaryContext;
	}
	public labelNegation(): LabelNegationContext {
		return this.getTypedRuleContext(LabelNegationContext, 0) as LabelNegationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelFactor) {
	 		listener.enterLabelFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelFactor) {
	 		listener.exitLabelFactor(this);
		}
	}
}


export class LabelNegationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXCLAMATION(): TerminalNode {
		return this.getToken(GqlParser.EXCLAMATION, 0);
	}
	public labelPrimary(): LabelPrimaryContext {
		return this.getTypedRuleContext(LabelPrimaryContext, 0) as LabelPrimaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelNegation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelNegation) {
	 		listener.enterLabelNegation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelNegation) {
	 		listener.exitLabelNegation(this);
		}
	}
}


export class LabelPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelName(): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, 0) as LabelNameContext;
	}
	public wildcardLabel(): WildcardLabelContext {
		return this.getTypedRuleContext(WildcardLabelContext, 0) as WildcardLabelContext;
	}
	public parenthesizedLabelExpr(): ParenthesizedLabelExprContext {
		return this.getTypedRuleContext(ParenthesizedLabelExprContext, 0) as ParenthesizedLabelExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelPrimary) {
	 		listener.enterLabelPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelPrimary) {
	 		listener.exitLabelPrimary(this);
		}
	}
}


export class WildcardLabelContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PERCENT(): TerminalNode {
		return this.getToken(GqlParser.PERCENT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_wildcardLabel;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWildcardLabel) {
	 		listener.enterWildcardLabel(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWildcardLabel) {
	 		listener.exitWildcardLabel(this);
		}
	}
}


export class ParenthesizedLabelExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public labelExpr(): LabelExprContext {
		return this.getTypedRuleContext(LabelExprContext, 0) as LabelExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedLabelExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedLabelExpr) {
	 		listener.enterParenthesizedLabelExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedLabelExpr) {
	 		listener.exitParenthesizedLabelExpr(this);
		}
	}
}


export class GraphPatternQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public fixedQuantifier(): FixedQuantifierContext {
		return this.getTypedRuleContext(FixedQuantifierContext, 0) as FixedQuantifierContext;
	}
	public generalQuantifier(): GeneralQuantifierContext {
		return this.getTypedRuleContext(GeneralQuantifierContext, 0) as GeneralQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternQuantifier) {
	 		listener.enterGraphPatternQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternQuantifier) {
	 		listener.exitGraphPatternQuantifier(this);
		}
	}
}


export class FixedQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fixedQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFixedQuantifier) {
	 		listener.enterFixedQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFixedQuantifier) {
	 		listener.exitFixedQuantifier(this);
		}
	}
}


export class GeneralQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public lowerBound(): LowerBoundContext {
		return this.getTypedRuleContext(LowerBoundContext, 0) as LowerBoundContext;
	}
	public upperBound(): UpperBoundContext {
		return this.getTypedRuleContext(UpperBoundContext, 0) as UpperBoundContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralQuantifier) {
	 		listener.enterGeneralQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralQuantifier) {
	 		listener.exitGeneralQuantifier(this);
		}
	}
}


export class LowerBoundContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lowerBound;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLowerBound) {
	 		listener.enterLowerBound(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLowerBound) {
	 		listener.exitLowerBound(this);
		}
	}
}


export class UpperBoundContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_upperBound;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUpperBound) {
	 		listener.enterUpperBound(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUpperBound) {
	 		listener.exitUpperBound(this);
		}
	}
}


export class SimplifiedPathPatternExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedDefaultingLeft(): SimplifiedDefaultingLeftContext {
		return this.getTypedRuleContext(SimplifiedDefaultingLeftContext, 0) as SimplifiedDefaultingLeftContext;
	}
	public simplifiedDefaultingUndirected(): SimplifiedDefaultingUndirectedContext {
		return this.getTypedRuleContext(SimplifiedDefaultingUndirectedContext, 0) as SimplifiedDefaultingUndirectedContext;
	}
	public simplifiedDefaultingRight(): SimplifiedDefaultingRightContext {
		return this.getTypedRuleContext(SimplifiedDefaultingRightContext, 0) as SimplifiedDefaultingRightContext;
	}
	public simplifiedDefaultingLeftOrUndirected(): SimplifiedDefaultingLeftOrUndirectedContext {
		return this.getTypedRuleContext(SimplifiedDefaultingLeftOrUndirectedContext, 0) as SimplifiedDefaultingLeftOrUndirectedContext;
	}
	public simplifiedDefaultingUndirectedOrRight(): SimplifiedDefaultingUndirectedOrRightContext {
		return this.getTypedRuleContext(SimplifiedDefaultingUndirectedOrRightContext, 0) as SimplifiedDefaultingUndirectedOrRightContext;
	}
	public simplifiedDefaultingLeftOrRight(): SimplifiedDefaultingLeftOrRightContext {
		return this.getTypedRuleContext(SimplifiedDefaultingLeftOrRightContext, 0) as SimplifiedDefaultingLeftOrRightContext;
	}
	public simplifiedDefaultingAnyDirection(): SimplifiedDefaultingAnyDirectionContext {
		return this.getTypedRuleContext(SimplifiedDefaultingAnyDirectionContext, 0) as SimplifiedDefaultingAnyDirectionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedPathPatternExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedPathPatternExpr) {
	 		listener.enterSimplifiedPathPatternExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedPathPatternExpr) {
	 		listener.exitSimplifiedPathPatternExpr(this);
		}
	}
}


export class SimplifiedDefaultingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingLeft) {
	 		listener.enterSimplifiedDefaultingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingLeft) {
	 		listener.exitSimplifiedDefaultingLeft(this);
		}
	}
}


export class SimplifiedDefaultingUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.TILDE_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_TILDE(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingUndirected) {
	 		listener.enterSimplifiedDefaultingUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingUndirected) {
	 		listener.exitSimplifiedDefaultingUndirected(this);
		}
	}
}


export class SimplifiedDefaultingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingRight) {
	 		listener.enterSimplifiedDefaultingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingRight) {
	 		listener.exitSimplifiedDefaultingRight(this);
		}
	}
}


export class SimplifiedDefaultingLeftOrUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_TILDE_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_TILDE(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingLeftOrUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingLeftOrUndirected) {
	 		listener.enterSimplifiedDefaultingLeftOrUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingLeftOrUndirected) {
	 		listener.exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}
}


export class SimplifiedDefaultingUndirectedOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.TILDE_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_TILDE_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE_RIGHT, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingUndirectedOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingUndirectedOrRight) {
	 		listener.enterSimplifiedDefaultingUndirectedOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingUndirectedOrRight) {
	 		listener.exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}
}


export class SimplifiedDefaultingLeftOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingLeftOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingLeftOrRight) {
	 		listener.enterSimplifiedDefaultingLeftOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingLeftOrRight) {
	 		listener.exitSimplifiedDefaultingLeftOrRight(this);
		}
	}
}


export class SimplifiedDefaultingAnyDirectionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.MINUS_SLASH, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public SLASH_MINUS(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDefaultingAnyDirection;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDefaultingAnyDirection) {
	 		listener.enterSimplifiedDefaultingAnyDirection(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDefaultingAnyDirection) {
	 		listener.exitSimplifiedDefaultingAnyDirection(this);
		}
	}
}


export class SimplifiedContentsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTerm(): SimplifiedTermContext {
		return this.getTypedRuleContext(SimplifiedTermContext, 0) as SimplifiedTermContext;
	}
	public simplifiedPathUnion(): SimplifiedPathUnionContext {
		return this.getTypedRuleContext(SimplifiedPathUnionContext, 0) as SimplifiedPathUnionContext;
	}
	public simplifiedMultisetAlternation(): SimplifiedMultisetAlternationContext {
		return this.getTypedRuleContext(SimplifiedMultisetAlternationContext, 0) as SimplifiedMultisetAlternationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedContents;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedContents) {
	 		listener.enterSimplifiedContents(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedContents) {
	 		listener.exitSimplifiedContents(this);
		}
	}
}


export class SimplifiedPathUnionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTerm_list(): SimplifiedTermContext[] {
		return this.getTypedRuleContexts(SimplifiedTermContext) as SimplifiedTermContext[];
	}
	public simplifiedTerm(i: number): SimplifiedTermContext {
		return this.getTypedRuleContext(SimplifiedTermContext, i) as SimplifiedTermContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedPathUnion;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedPathUnion) {
	 		listener.enterSimplifiedPathUnion(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedPathUnion) {
	 		listener.exitSimplifiedPathUnion(this);
		}
	}
}


export class SimplifiedMultisetAlternationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTerm_list(): SimplifiedTermContext[] {
		return this.getTypedRuleContexts(SimplifiedTermContext) as SimplifiedTermContext[];
	}
	public simplifiedTerm(i: number): SimplifiedTermContext {
		return this.getTypedRuleContext(SimplifiedTermContext, i) as SimplifiedTermContext;
	}
	public MULTISET_ALTERNATION_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.MULTISET_ALTERNATION);
	}
	public MULTISET_ALTERNATION(i: number): TerminalNode {
		return this.getToken(GqlParser.MULTISET_ALTERNATION, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedMultisetAlternation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedMultisetAlternation) {
	 		listener.enterSimplifiedMultisetAlternation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedMultisetAlternation) {
	 		listener.exitSimplifiedMultisetAlternation(this);
		}
	}
}


export class SimplifiedTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedFactorLow_list(): SimplifiedFactorLowContext[] {
		return this.getTypedRuleContexts(SimplifiedFactorLowContext) as SimplifiedFactorLowContext[];
	}
	public simplifiedFactorLow(i: number): SimplifiedFactorLowContext {
		return this.getTypedRuleContext(SimplifiedFactorLowContext, i) as SimplifiedFactorLowContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedTerm) {
	 		listener.enterSimplifiedTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedTerm) {
	 		listener.exitSimplifiedTerm(this);
		}
	}
}


export class SimplifiedFactorLowContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedFactorHigh_list(): SimplifiedFactorHighContext[] {
		return this.getTypedRuleContexts(SimplifiedFactorHighContext) as SimplifiedFactorHighContext[];
	}
	public simplifiedFactorHigh(i: number): SimplifiedFactorHighContext {
		return this.getTypedRuleContext(SimplifiedFactorHighContext, i) as SimplifiedFactorHighContext;
	}
	public AMPERSAND_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.AMPERSAND);
	}
	public AMPERSAND(i: number): TerminalNode {
		return this.getToken(GqlParser.AMPERSAND, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedFactorLow;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedFactorLow) {
	 		listener.enterSimplifiedFactorLow(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedFactorLow) {
	 		listener.exitSimplifiedFactorLow(this);
		}
	}
}


export class SimplifiedFactorHighContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		return this.getTypedRuleContext(SimplifiedTertiaryContext, 0) as SimplifiedTertiaryContext;
	}
	public simplifiedQuntified(): SimplifiedQuntifiedContext {
		return this.getTypedRuleContext(SimplifiedQuntifiedContext, 0) as SimplifiedQuntifiedContext;
	}
	public simplifiedQuestioned(): SimplifiedQuestionedContext {
		return this.getTypedRuleContext(SimplifiedQuestionedContext, 0) as SimplifiedQuestionedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedFactorHigh;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedFactorHigh) {
	 		listener.enterSimplifiedFactorHigh(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedFactorHigh) {
	 		listener.exitSimplifiedFactorHigh(this);
		}
	}
}


export class SimplifiedQuntifiedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		return this.getTypedRuleContext(SimplifiedTertiaryContext, 0) as SimplifiedTertiaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphPatternQuantifier(): GraphPatternQuantifierContext {
		return this.getTypedRuleContext(GraphPatternQuantifierContext, 0) as GraphPatternQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedQuntified;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedQuntified) {
	 		listener.enterSimplifiedQuntified(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedQuntified) {
	 		listener.exitSimplifiedQuntified(this);
		}
	}
}


export class SimplifiedQuestionedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedTertiary(): SimplifiedTertiaryContext {
		return this.getTypedRuleContext(SimplifiedTertiaryContext, 0) as SimplifiedTertiaryContext;
	}
	public QUESTION_MARK(): TerminalNode {
		return this.getToken(GqlParser.QUESTION_MARK, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedQuestioned;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedQuestioned) {
	 		listener.enterSimplifiedQuestioned(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedQuestioned) {
	 		listener.exitSimplifiedQuestioned(this);
		}
	}
}


export class SimplifiedTertiaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedDirectionOverride(): SimplifiedDirectionOverrideContext {
		return this.getTypedRuleContext(SimplifiedDirectionOverrideContext, 0) as SimplifiedDirectionOverrideContext;
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedTertiary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedTertiary) {
	 		listener.enterSimplifiedTertiary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedTertiary) {
	 		listener.exitSimplifiedTertiary(this);
		}
	}
}


export class SimplifiedDirectionOverrideContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedOverrideLeft(): SimplifiedOverrideLeftContext {
		return this.getTypedRuleContext(SimplifiedOverrideLeftContext, 0) as SimplifiedOverrideLeftContext;
	}
	public simplifiedOverrideUndirected(): SimplifiedOverrideUndirectedContext {
		return this.getTypedRuleContext(SimplifiedOverrideUndirectedContext, 0) as SimplifiedOverrideUndirectedContext;
	}
	public simplifiedOverrideRight(): SimplifiedOverrideRightContext {
		return this.getTypedRuleContext(SimplifiedOverrideRightContext, 0) as SimplifiedOverrideRightContext;
	}
	public simplifiedOverrideLeftOrUndirected(): SimplifiedOverrideLeftOrUndirectedContext {
		return this.getTypedRuleContext(SimplifiedOverrideLeftOrUndirectedContext, 0) as SimplifiedOverrideLeftOrUndirectedContext;
	}
	public simplifiedOverrideUndirectedOrRight(): SimplifiedOverrideUndirectedOrRightContext {
		return this.getTypedRuleContext(SimplifiedOverrideUndirectedOrRightContext, 0) as SimplifiedOverrideUndirectedOrRightContext;
	}
	public simplifiedOverrideLeftOrRight(): SimplifiedOverrideLeftOrRightContext {
		return this.getTypedRuleContext(SimplifiedOverrideLeftOrRightContext, 0) as SimplifiedOverrideLeftOrRightContext;
	}
	public simplifiedOverrideAnyDirection(): SimplifiedOverrideAnyDirectionContext {
		return this.getTypedRuleContext(SimplifiedOverrideAnyDirectionContext, 0) as SimplifiedOverrideAnyDirectionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedDirectionOverride;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedDirectionOverride) {
	 		listener.enterSimplifiedDirectionOverride(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedDirectionOverride) {
	 		listener.exitSimplifiedDirectionOverride(this);
		}
	}
}


export class SimplifiedOverrideLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideLeft) {
	 		listener.enterSimplifiedOverrideLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideLeft) {
	 		listener.exitSimplifiedOverrideLeft(this);
		}
	}
}


export class SimplifiedOverrideUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideUndirected) {
	 		listener.enterSimplifiedOverrideUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideUndirected) {
	 		listener.exitSimplifiedOverrideUndirected(this);
		}
	}
}


export class SimplifiedOverrideRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideRight) {
	 		listener.enterSimplifiedOverrideRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideRight) {
	 		listener.exitSimplifiedOverrideRight(this);
		}
	}
}


export class SimplifiedOverrideLeftOrUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_TILDE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideLeftOrUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideLeftOrUndirected) {
	 		listener.enterSimplifiedOverrideLeftOrUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideLeftOrUndirected) {
	 		listener.exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}
}


export class SimplifiedOverrideUndirectedOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideUndirectedOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideUndirectedOrRight) {
	 		listener.enterSimplifiedOverrideUndirectedOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideUndirectedOrRight) {
	 		listener.exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}
}


export class SimplifiedOverrideLeftOrRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideLeftOrRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideLeftOrRight) {
	 		listener.enterSimplifiedOverrideLeftOrRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideLeftOrRight) {
	 		listener.exitSimplifiedOverrideLeftOrRight(this);
		}
	}
}


export class SimplifiedOverrideAnyDirectionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
	public simplifiedSecondary(): SimplifiedSecondaryContext {
		return this.getTypedRuleContext(SimplifiedSecondaryContext, 0) as SimplifiedSecondaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedOverrideAnyDirection;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedOverrideAnyDirection) {
	 		listener.enterSimplifiedOverrideAnyDirection(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedOverrideAnyDirection) {
	 		listener.exitSimplifiedOverrideAnyDirection(this);
		}
	}
}


export class SimplifiedSecondaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simplifiedPrimary(): SimplifiedPrimaryContext {
		return this.getTypedRuleContext(SimplifiedPrimaryContext, 0) as SimplifiedPrimaryContext;
	}
	public simplifiedNegation(): SimplifiedNegationContext {
		return this.getTypedRuleContext(SimplifiedNegationContext, 0) as SimplifiedNegationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedSecondary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedSecondary) {
	 		listener.enterSimplifiedSecondary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedSecondary) {
	 		listener.exitSimplifiedSecondary(this);
		}
	}
}


export class SimplifiedNegationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXCLAMATION(): TerminalNode {
		return this.getToken(GqlParser.EXCLAMATION, 0);
	}
	public simplifiedPrimary(): SimplifiedPrimaryContext {
		return this.getTypedRuleContext(SimplifiedPrimaryContext, 0) as SimplifiedPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedNegation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedNegation) {
	 		listener.enterSimplifiedNegation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedNegation) {
	 		listener.exitSimplifiedNegation(this);
		}
	}
}


export class SimplifiedPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelName(): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, 0) as LabelNameContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public simplifiedContents(): SimplifiedContentsContext {
		return this.getTypedRuleContext(SimplifiedContentsContext, 0) as SimplifiedContentsContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simplifiedPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimplifiedPrimary) {
	 		listener.enterSimplifiedPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimplifiedPrimary) {
	 		listener.exitSimplifiedPrimary(this);
		}
	}
}


export class WhereClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_whereClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWhereClause) {
	 		listener.enterWhereClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWhereClause) {
	 		listener.exitWhereClause(this);
		}
	}
}


export class YieldClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public YIELD(): TerminalNode {
		return this.getToken(GqlParser.YIELD, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public yieldItemList(): YieldItemListContext {
		return this.getTypedRuleContext(YieldItemListContext, 0) as YieldItemListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldClause) {
	 		listener.enterYieldClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldClause) {
	 		listener.exitYieldClause(this);
		}
	}
}


export class YieldItemListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public yieldItem_list(): YieldItemContext[] {
		return this.getTypedRuleContexts(YieldItemContext) as YieldItemContext[];
	}
	public yieldItem(i: number): YieldItemContext {
		return this.getTypedRuleContext(YieldItemContext, i) as YieldItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItemList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItemList) {
	 		listener.enterYieldItemList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItemList) {
	 		listener.exitYieldItemList(this);
		}
	}
}


export class YieldItemContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public yieldItemName(): YieldItemNameContext {
		return this.getTypedRuleContext(YieldItemNameContext, 0) as YieldItemNameContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public yieldItemAlias(): YieldItemAliasContext {
		return this.getTypedRuleContext(YieldItemAliasContext, 0) as YieldItemAliasContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItem;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItem) {
	 		listener.enterYieldItem(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItem) {
	 		listener.exitYieldItem(this);
		}
	}
}


export class YieldItemNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldName(): FieldNameContext {
		return this.getTypedRuleContext(FieldNameContext, 0) as FieldNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItemName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItemName) {
	 		listener.enterYieldItemName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItemName) {
	 		listener.exitYieldItemName(this);
		}
	}
}


export class YieldItemAliasContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_yieldItemAlias;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterYieldItemAlias) {
	 		listener.enterYieldItemAlias(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitYieldItemAlias) {
	 		listener.exitYieldItemAlias(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public BY(): TerminalNode {
		return this.getToken(GqlParser.BY, 0);
	}
	public groupingElementList(): GroupingElementListContext {
		return this.getTypedRuleContext(GroupingElementListContext, 0) as GroupingElementListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupByClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupByClause) {
	 		listener.enterGroupByClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupByClause) {
	 		listener.exitGroupByClause(this);
		}
	}
}


export class GroupingElementListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public groupingElement_list(): GroupingElementContext[] {
		return this.getTypedRuleContexts(GroupingElementContext) as GroupingElementContext[];
	}
	public groupingElement(i: number): GroupingElementContext {
		return this.getTypedRuleContext(GroupingElementContext, i) as GroupingElementContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public emptyGroupingSet(): EmptyGroupingSetContext {
		return this.getTypedRuleContext(EmptyGroupingSetContext, 0) as EmptyGroupingSetContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupingElementList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupingElementList) {
	 		listener.enterGroupingElementList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupingElementList) {
	 		listener.exitGroupingElementList(this);
		}
	}
}


export class GroupingElementContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_groupingElement;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGroupingElement) {
	 		listener.enterGroupingElement(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGroupingElement) {
	 		listener.exitGroupingElement(this);
		}
	}
}


export class EmptyGroupingSetContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_emptyGroupingSet;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEmptyGroupingSet) {
	 		listener.enterEmptyGroupingSet(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEmptyGroupingSet) {
	 		listener.exitEmptyGroupingSet(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ORDER(): TerminalNode {
		return this.getToken(GqlParser.ORDER, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public BY(): TerminalNode {
		return this.getToken(GqlParser.BY, 0);
	}
	public sortSpecList(): SortSpecListContext {
		return this.getTypedRuleContext(SortSpecListContext, 0) as SortSpecListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_orderByClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOrderByClause) {
	 		listener.enterOrderByClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOrderByClause) {
	 		listener.exitOrderByClause(this);
		}
	}
}


export class AggregateFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COUNT(): TerminalNode {
		return this.getToken(GqlParser.COUNT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public generalSetFunction(): GeneralSetFunctionContext {
		return this.getTypedRuleContext(GeneralSetFunctionContext, 0) as GeneralSetFunctionContext;
	}
	public binarySetFunction(): BinarySetFunctionContext {
		return this.getTypedRuleContext(BinarySetFunctionContext, 0) as BinarySetFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_aggregateFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAggregateFunction) {
	 		listener.enterAggregateFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAggregateFunction) {
	 		listener.exitAggregateFunction(this);
		}
	}
}


export class GeneralSetFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public generalSetFunctionType(): GeneralSetFunctionTypeContext {
		return this.getTypedRuleContext(GeneralSetFunctionTypeContext, 0) as GeneralSetFunctionTypeContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalSetFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralSetFunction) {
	 		listener.enterGeneralSetFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralSetFunction) {
	 		listener.exitGeneralSetFunction(this);
		}
	}
}


export class GeneralSetFunctionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AVG(): TerminalNode {
		return this.getToken(GqlParser.AVG, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(GqlParser.COUNT, 0);
	}
	public MAX(): TerminalNode {
		return this.getToken(GqlParser.MAX, 0);
	}
	public MIN(): TerminalNode {
		return this.getToken(GqlParser.MIN, 0);
	}
	public SUM(): TerminalNode {
		return this.getToken(GqlParser.SUM, 0);
	}
	public COLLECT(): TerminalNode {
		return this.getToken(GqlParser.COLLECT, 0);
	}
	public STDDEV_SAMP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_SAMP, 0);
	}
	public STDDEV_POP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_POP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalSetFunctionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralSetFunctionType) {
	 		listener.enterGeneralSetFunctionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralSetFunctionType) {
	 		listener.exitGeneralSetFunctionType(this);
		}
	}
}


export class SetQuantifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(GqlParser.DISTINCT, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_setQuantifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSetQuantifier) {
	 		listener.enterSetQuantifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSetQuantifier) {
	 		listener.exitSetQuantifier(this);
		}
	}
}


export class BinarySetFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PERCENTILE_CONT(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_CONT, 0);
	}
	public PERCENTILE_DISC(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_DISC, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_binarySetFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBinarySetFunction) {
	 		listener.enterBinarySetFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBinarySetFunction) {
	 		listener.exitBinarySetFunction(this);
		}
	}
}


export class DependantValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public setQuantifier(): SetQuantifierContext {
		return this.getTypedRuleContext(SetQuantifierContext, 0) as SetQuantifierContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dependantValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDependantValueExpr) {
	 		listener.enterDependantValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDependantValueExpr) {
	 		listener.exitDependantValueExpr(this);
		}
	}
}


export class IndependentValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_independentValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIndependentValueExpr) {
	 		listener.enterIndependentValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIndependentValueExpr) {
	 		listener.exitIndependentValueExpr(this);
		}
	}
}


export class SortSpecListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sortSpec_list(): SortSpecContext[] {
		return this.getTypedRuleContexts(SortSpecContext) as SortSpecContext[];
	}
	public sortSpec(i: number): SortSpecContext {
		return this.getTypedRuleContext(SortSpecContext, i) as SortSpecContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sortSpecList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSortSpecList) {
	 		listener.enterSortSpecList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSortSpecList) {
	 		listener.exitSortSpecList(this);
		}
	}
}


export class SortSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sortKey(): SortKeyContext {
		return this.getTypedRuleContext(SortKeyContext, 0) as SortKeyContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public orderingSpec(): OrderingSpecContext {
		return this.getTypedRuleContext(OrderingSpecContext, 0) as OrderingSpecContext;
	}
	public nullOrdering(): NullOrderingContext {
		return this.getTypedRuleContext(NullOrderingContext, 0) as NullOrderingContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sortSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSortSpec) {
	 		listener.enterSortSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSortSpec) {
	 		listener.exitSortSpec(this);
		}
	}
}


export class SortKeyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public aggregatingValueExpr(): AggregatingValueExprContext {
		return this.getTypedRuleContext(AggregatingValueExprContext, 0) as AggregatingValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sortKey;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSortKey) {
	 		listener.enterSortKey(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSortKey) {
	 		listener.exitSortKey(this);
		}
	}
}


export class OrderingSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASC(): TerminalNode {
		return this.getToken(GqlParser.ASC, 0);
	}
	public ASCENDING(): TerminalNode {
		return this.getToken(GqlParser.ASCENDING, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(GqlParser.DESC, 0);
	}
	public DESCENDING(): TerminalNode {
		return this.getToken(GqlParser.DESCENDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_orderingSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOrderingSpec) {
	 		listener.enterOrderingSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOrderingSpec) {
	 		listener.exitOrderingSpec(this);
		}
	}
}


export class NullOrderingContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULLS(): TerminalNode {
		return this.getToken(GqlParser.NULLS, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public FIRST(): TerminalNode {
		return this.getToken(GqlParser.FIRST, 0);
	}
	public LAST(): TerminalNode {
		return this.getToken(GqlParser.LAST, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullOrdering;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullOrdering) {
	 		listener.enterNullOrdering(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullOrdering) {
	 		listener.exitNullOrdering(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIMIT(): TerminalNode {
		return this.getToken(GqlParser.LIMIT, 0);
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_limitClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLimitClause) {
	 		listener.enterLimitClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLimitClause) {
	 		listener.exitLimitClause(this);
		}
	}
}


export class OffsetClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public offsetSynonym(): OffsetSynonymContext {
		return this.getTypedRuleContext(OffsetSynonymContext, 0) as OffsetSynonymContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public unsignedIntSpec(): UnsignedIntSpecContext {
		return this.getTypedRuleContext(UnsignedIntSpecContext, 0) as UnsignedIntSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_offsetClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOffsetClause) {
	 		listener.enterOffsetClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOffsetClause) {
	 		listener.exitOffsetClause(this);
		}
	}
}


export class OffsetSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OFFSET(): TerminalNode {
		return this.getToken(GqlParser.OFFSET, 0);
	}
	public SKIP_(): TerminalNode {
		return this.getToken(GqlParser.SKIP_, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_offsetSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOffsetSynonym) {
	 		listener.enterOffsetSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOffsetSynonym) {
	 		listener.exitOffsetSynonym(this);
		}
	}
}


export class GraphTypeSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public nestedGraphTypeSpec(): NestedGraphTypeSpecContext {
		return this.getTypedRuleContext(NestedGraphTypeSpecContext, 0) as NestedGraphTypeSpecContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeSpec) {
	 		listener.enterGraphTypeSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeSpec) {
	 		listener.exitGraphTypeSpec(this);
		}
	}
}


export class NestedGraphTypeSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public graphTypeSpecBody(): GraphTypeSpecBodyContext {
		return this.getTypedRuleContext(GraphTypeSpecBodyContext, 0) as GraphTypeSpecBodyContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nestedGraphTypeSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNestedGraphTypeSpec) {
	 		listener.enterNestedGraphTypeSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNestedGraphTypeSpec) {
	 		listener.exitNestedGraphTypeSpec(this);
		}
	}
}


export class GraphTypeSpecBodyContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeDefList(): ElementTypeDefListContext {
		return this.getTypedRuleContext(ElementTypeDefListContext, 0) as ElementTypeDefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeSpecBody;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeSpecBody) {
	 		listener.enterGraphTypeSpecBody(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeSpecBody) {
	 		listener.exitGraphTypeSpecBody(this);
		}
	}
}


export class ElementTypeDefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeDef_list(): ElementTypeDefContext[] {
		return this.getTypedRuleContexts(ElementTypeDefContext) as ElementTypeDefContext[];
	}
	public elementTypeDef(i: number): ElementTypeDefContext {
		return this.getTypedRuleContext(ElementTypeDefContext, i) as ElementTypeDefContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementTypeDefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementTypeDefList) {
	 		listener.enterElementTypeDefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementTypeDefList) {
	 		listener.exitElementTypeDefList(this);
		}
	}
}


export class ElementTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypeDef(): NodeTypeDefContext {
		return this.getTypedRuleContext(NodeTypeDefContext, 0) as NodeTypeDefContext;
	}
	public edgeTypeDef(): EdgeTypeDefContext {
		return this.getTypedRuleContext(EdgeTypeDefContext, 0) as EdgeTypeDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementTypeDef) {
	 		listener.enterElementTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementTypeDef) {
	 		listener.exitElementTypeDef(this);
		}
	}
}


export class NodeTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypePattern(): NodeTypePatternContext {
		return this.getTypedRuleContext(NodeTypePatternContext, 0) as NodeTypePatternContext;
	}
	public nodeSynonym(): NodeSynonymContext {
		return this.getTypedRuleContext(NodeSynonymContext, 0) as NodeSynonymContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public nodeTypePhrase(): NodeTypePhraseContext {
		return this.getTypedRuleContext(NodeTypePhraseContext, 0) as NodeTypePhraseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeDef) {
	 		listener.enterNodeTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeDef) {
	 		listener.exitNodeTypeDef(this);
		}
	}
}


export class NodeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public nodeTypeName(): NodeTypeNameContext {
		return this.getTypedRuleContext(NodeTypeNameContext, 0) as NodeTypeNameContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypePattern) {
	 		listener.enterNodeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypePattern) {
	 		listener.exitNodeTypePattern(this);
		}
	}
}


export class NodeTypePhraseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypeName(): NodeTypeNameContext {
		return this.getTypedRuleContext(NodeTypeNameContext, 0) as NodeTypeNameContext;
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypePhrase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypePhrase) {
	 		listener.enterNodeTypePhrase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypePhrase) {
	 		listener.exitNodeTypePhrase(this);
		}
	}
}


export class NodeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeName) {
	 		listener.enterNodeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeName) {
	 		listener.exitNodeTypeName(this);
		}
	}
}


export class NodeTypeFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeTypeLabelSetDef(): NodeTypeLabelSetDefContext {
		return this.getTypedRuleContext(NodeTypeLabelSetDefContext, 0) as NodeTypeLabelSetDefContext;
	}
	public nodeTypePropertyTypeSetDef(): NodeTypePropertyTypeSetDefContext {
		return this.getTypedRuleContext(NodeTypePropertyTypeSetDefContext, 0) as NodeTypePropertyTypeSetDefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeFiller) {
	 		listener.enterNodeTypeFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeFiller) {
	 		listener.exitNodeTypeFiller(this);
		}
	}
}


export class NodeTypeLabelSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelSetDef(): LabelSetDefContext {
		return this.getTypedRuleContext(LabelSetDefContext, 0) as LabelSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeLabelSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeLabelSetDef) {
	 		listener.enterNodeTypeLabelSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeLabelSetDef) {
	 		listener.exitNodeTypeLabelSetDef(this);
		}
	}
}


export class NodeTypePropertyTypeSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyTypeSetDef(): PropertyTypeSetDefContext {
		return this.getTypedRuleContext(PropertyTypeSetDefContext, 0) as PropertyTypeSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypePropertyTypeSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypePropertyTypeSetDef) {
	 		listener.enterNodeTypePropertyTypeSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypePropertyTypeSetDef) {
	 		listener.exitNodeTypePropertyTypeSetDef(this);
		}
	}
}


export class EdgeTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypePattern(): EdgeTypePatternContext {
		return this.getTypedRuleContext(EdgeTypePatternContext, 0) as EdgeTypePatternContext;
	}
	public edgeSynonym(): EdgeSynonymContext {
		return this.getTypedRuleContext(EdgeSynonymContext, 0) as EdgeSynonymContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public edgeTypePhrase(): EdgeTypePhraseContext {
		return this.getTypedRuleContext(EdgeTypePhraseContext, 0) as EdgeTypePhraseContext;
	}
	public edgeKind(): EdgeKindContext {
		return this.getTypedRuleContext(EdgeKindContext, 0) as EdgeKindContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeDef) {
	 		listener.enterEdgeTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeDef) {
	 		listener.exitEdgeTypeDef(this);
		}
	}
}


export class EdgeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgeTypePattern(): FullEdgeTypePatternContext {
		return this.getTypedRuleContext(FullEdgeTypePatternContext, 0) as FullEdgeTypePatternContext;
	}
	public abbreviatedEdgeTypePattern(): AbbreviatedEdgeTypePatternContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext, 0) as AbbreviatedEdgeTypePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypePattern) {
	 		listener.enterEdgeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypePattern) {
	 		listener.exitEdgeTypePattern(this);
		}
	}
}


export class EdgeTypePhraseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeName(): EdgeTypeNameContext {
		return this.getTypedRuleContext(EdgeTypeNameContext, 0) as EdgeTypeNameContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public edgeTypeFiller(): EdgeTypeFillerContext {
		return this.getTypedRuleContext(EdgeTypeFillerContext, 0) as EdgeTypeFillerContext;
	}
	public endpointDef(): EndpointDefContext {
		return this.getTypedRuleContext(EndpointDefContext, 0) as EndpointDefContext;
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypePhrase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypePhrase) {
	 		listener.enterEdgeTypePhrase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypePhrase) {
	 		listener.exitEdgeTypePhrase(this);
		}
	}
}


export class EdgeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeName) {
	 		listener.enterEdgeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeName) {
	 		listener.exitEdgeTypeName(this);
		}
	}
}


export class EdgeTypeFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeLabelSetDef(): EdgeTypeLabelSetDefContext {
		return this.getTypedRuleContext(EdgeTypeLabelSetDefContext, 0) as EdgeTypeLabelSetDefContext;
	}
	public edgeTypePropertyTypeSetDef(): EdgeTypePropertyTypeSetDefContext {
		return this.getTypedRuleContext(EdgeTypePropertyTypeSetDefContext, 0) as EdgeTypePropertyTypeSetDefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeFiller) {
	 		listener.enterEdgeTypeFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeFiller) {
	 		listener.exitEdgeTypeFiller(this);
		}
	}
}


export class EdgeTypeLabelSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelSetDef(): LabelSetDefContext {
		return this.getTypedRuleContext(LabelSetDefContext, 0) as LabelSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypeLabelSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypeLabelSetDef) {
	 		listener.enterEdgeTypeLabelSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypeLabelSetDef) {
	 		listener.exitEdgeTypeLabelSetDef(this);
		}
	}
}


export class EdgeTypePropertyTypeSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyTypeSetDef(): PropertyTypeSetDefContext {
		return this.getTypedRuleContext(PropertyTypeSetDefContext, 0) as PropertyTypeSetDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeTypePropertyTypeSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeTypePropertyTypeSetDef) {
	 		listener.enterEdgeTypePropertyTypeSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeTypePropertyTypeSetDef) {
	 		listener.exitEdgeTypePropertyTypeSetDef(this);
		}
	}
}


export class FullEdgeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullEdgeTypePatternPointingRight(): FullEdgeTypePatternPointingRightContext {
		return this.getTypedRuleContext(FullEdgeTypePatternPointingRightContext, 0) as FullEdgeTypePatternPointingRightContext;
	}
	public fullEdgeTypePatternPointingLeft(): FullEdgeTypePatternPointingLeftContext {
		return this.getTypedRuleContext(FullEdgeTypePatternPointingLeftContext, 0) as FullEdgeTypePatternPointingLeftContext;
	}
	public fullEdgeTypePatternUndirected(): FullEdgeTypePatternUndirectedContext {
		return this.getTypedRuleContext(FullEdgeTypePatternUndirectedContext, 0) as FullEdgeTypePatternUndirectedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePattern) {
	 		listener.enterFullEdgeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePattern) {
	 		listener.exitFullEdgeTypePattern(this);
		}
	}
}


export class FullEdgeTypePatternPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public arcTypePointingRight(): ArcTypePointingRightContext {
		return this.getTypedRuleContext(ArcTypePointingRightContext, 0) as ArcTypePointingRightContext;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePatternPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePatternPointingRight) {
	 		listener.enterFullEdgeTypePatternPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePatternPointingRight) {
	 		listener.exitFullEdgeTypePatternPointingRight(this);
		}
	}
}


export class FullEdgeTypePatternPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
	public arcTypePointingLeft(): ArcTypePointingLeftContext {
		return this.getTypedRuleContext(ArcTypePointingLeftContext, 0) as ArcTypePointingLeftContext;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePatternPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePatternPointingLeft) {
	 		listener.enterFullEdgeTypePatternPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePatternPointingLeft) {
	 		listener.exitFullEdgeTypePatternPointingLeft(this);
		}
	}
}


export class FullEdgeTypePatternUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public arcTypeUndirected(): ArcTypeUndirectedContext {
		return this.getTypedRuleContext(ArcTypeUndirectedContext, 0) as ArcTypeUndirectedContext;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fullEdgeTypePatternUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFullEdgeTypePatternUndirected) {
	 		listener.enterFullEdgeTypePatternUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFullEdgeTypePatternUndirected) {
	 		listener.exitFullEdgeTypePatternUndirected(this);
		}
	}
}


export class ArcTypePointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public arcTypeFiller(): ArcTypeFillerContext {
		return this.getTypedRuleContext(ArcTypeFillerContext, 0) as ArcTypeFillerContext;
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypePointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypePointingRight) {
	 		listener.enterArcTypePointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypePointingRight) {
	 		listener.exitArcTypePointingRight(this);
		}
	}
}


export class ArcTypePointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public arcTypeFiller(): ArcTypeFillerContext {
		return this.getTypedRuleContext(ArcTypeFillerContext, 0) as ArcTypeFillerContext;
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypePointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypePointingLeft) {
	 		listener.enterArcTypePointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypePointingLeft) {
	 		listener.exitArcTypePointingLeft(this);
		}
	}
}


export class ArcTypeUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public arcTypeFiller(): ArcTypeFillerContext {
		return this.getTypedRuleContext(ArcTypeFillerContext, 0) as ArcTypeFillerContext;
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypeUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypeUndirected) {
	 		listener.enterArcTypeUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypeUndirected) {
	 		listener.exitArcTypeUndirected(this);
		}
	}
}


export class ArcTypeFillerContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeName(): EdgeTypeNameContext {
		return this.getTypedRuleContext(EdgeTypeNameContext, 0) as EdgeTypeNameContext;
	}
	public edgeTypeFiller(): EdgeTypeFillerContext {
		return this.getTypedRuleContext(EdgeTypeFillerContext, 0) as EdgeTypeFillerContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_arcTypeFiller;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterArcTypeFiller) {
	 		listener.enterArcTypeFiller(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitArcTypeFiller) {
	 		listener.exitArcTypeFiller(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public abbreviatedEdgeTypePatternPointingRight(): AbbreviatedEdgeTypePatternPointingRightContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingRightContext, 0) as AbbreviatedEdgeTypePatternPointingRightContext;
	}
	public abbreviatedEdgeTypePatternPointingLeft(): AbbreviatedEdgeTypePatternPointingLeftContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingLeftContext, 0) as AbbreviatedEdgeTypePatternPointingLeftContext;
	}
	public abbreviatedEdgeTypePatternUndirected(): AbbreviatedEdgeTypePatternUndirectedContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternUndirectedContext, 0) as AbbreviatedEdgeTypePatternUndirectedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePattern;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePattern) {
	 		listener.enterAbbreviatedEdgeTypePattern(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePattern) {
	 		listener.exitAbbreviatedEdgeTypePattern(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePatternPointingRight) {
	 		listener.enterAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePatternPointingRight) {
	 		listener.exitAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePatternPointingLeft) {
	 		listener.enterAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePatternPointingLeft) {
	 		listener.exitAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}
}


export class AbbreviatedEdgeTypePatternUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_abbreviatedEdgeTypePatternUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbbreviatedEdgeTypePatternUndirected) {
	 		listener.enterAbbreviatedEdgeTypePatternUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbbreviatedEdgeTypePatternUndirected) {
	 		listener.exitAbbreviatedEdgeTypePatternUndirected(this);
		}
	}
}


export class NodeTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sourceNodeTypeRef(): SourceNodeTypeRefContext {
		return this.getTypedRuleContext(SourceNodeTypeRefContext, 0) as SourceNodeTypeRefContext;
	}
	public destinationNodeTypeRef(): DestinationNodeTypeRefContext {
		return this.getTypedRuleContext(DestinationNodeTypeRefContext, 0) as DestinationNodeTypeRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeTypeRef) {
	 		listener.enterNodeTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeTypeRef) {
	 		listener.exitNodeTypeRef(this);
		}
	}
}


export class SourceNodeTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourceNodeTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourceNodeTypeRef) {
	 		listener.enterSourceNodeTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourceNodeTypeRef) {
	 		listener.exitSourceNodeTypeRef(this);
		}
	}
}


export class DestinationNodeTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public nodeTypeFiller(): NodeTypeFillerContext {
		return this.getTypedRuleContext(NodeTypeFillerContext, 0) as NodeTypeFillerContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_destinationNodeTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDestinationNodeTypeRef) {
	 		listener.enterDestinationNodeTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDestinationNodeTypeRef) {
	 		listener.exitDestinationNodeTypeRef(this);
		}
	}
}


export class EdgeKindContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DIRECTED(): TerminalNode {
		return this.getToken(GqlParser.DIRECTED, 0);
	}
	public UNDIRECTED(): TerminalNode {
		return this.getToken(GqlParser.UNDIRECTED, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeKind;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeKind) {
	 		listener.enterEdgeKind(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeKind) {
	 		listener.exitEdgeKind(this);
		}
	}
}


export class EndpointDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CONNECTING(): TerminalNode {
		return this.getToken(GqlParser.CONNECTING, 0);
	}
	public enpointPairDef(): EnpointPairDefContext {
		return this.getTypedRuleContext(EnpointPairDefContext, 0) as EnpointPairDefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointDef) {
	 		listener.enterEndpointDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointDef) {
	 		listener.exitEndpointDef(this);
		}
	}
}


export class EnpointPairDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public endpointPairDefPointingRight(): EndpointPairDefPointingRightContext {
		return this.getTypedRuleContext(EndpointPairDefPointingRightContext, 0) as EndpointPairDefPointingRightContext;
	}
	public endpointPairDefPointingLeft(): EndpointPairDefPointingLeftContext {
		return this.getTypedRuleContext(EndpointPairDefPointingLeftContext, 0) as EndpointPairDefPointingLeftContext;
	}
	public endpointPairDefUndirected(): EndpointPairDefUndirectedContext {
		return this.getTypedRuleContext(EndpointPairDefUndirectedContext, 0) as EndpointPairDefUndirectedContext;
	}
	public abbreviatedEdgeTypePattern(): AbbreviatedEdgeTypePatternContext {
		return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext, 0) as AbbreviatedEdgeTypePatternContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_enpointPairDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEnpointPairDef) {
	 		listener.enterEnpointPairDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEnpointPairDef) {
	 		listener.exitEnpointPairDef(this);
		}
	}
}


export class EndpointPairDefPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public connectorPointingRight(): ConnectorPointingRightContext {
		return this.getTypedRuleContext(ConnectorPointingRightContext, 0) as ConnectorPointingRightContext;
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointPairDefPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointPairDefPointingRight) {
	 		listener.enterEndpointPairDefPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointPairDefPointingRight) {
	 		listener.exitEndpointPairDefPointingRight(this);
		}
	}
}


export class EndpointPairDefPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public connectorPointingLeft(): ConnectorPointingLeftContext {
		return this.getTypedRuleContext(ConnectorPointingLeftContext, 0) as ConnectorPointingLeftContext;
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointPairDefPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointPairDefPointingLeft) {
	 		listener.enterEndpointPairDefPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointPairDefPointingLeft) {
	 		listener.exitEndpointPairDefPointingLeft(this);
		}
	}
}


export class EndpointPairDefUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public sourceNodeTypeName(): SourceNodeTypeNameContext {
		return this.getTypedRuleContext(SourceNodeTypeNameContext, 0) as SourceNodeTypeNameContext;
	}
	public connectorUndirected(): ConnectorUndirectedContext {
		return this.getTypedRuleContext(ConnectorUndirectedContext, 0) as ConnectorUndirectedContext;
	}
	public destinationNodeTypeName(): DestinationNodeTypeNameContext {
		return this.getTypedRuleContext(DestinationNodeTypeNameContext, 0) as DestinationNodeTypeNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_endpointPairDefUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEndpointPairDefUndirected) {
	 		listener.enterEndpointPairDefUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEndpointPairDefUndirected) {
	 		listener.exitEndpointPairDefUndirected(this);
		}
	}
}


export class ConnectorPointingRightContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TO(): TerminalNode {
		return this.getToken(GqlParser.TO, 0);
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_connectorPointingRight;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConnectorPointingRight) {
	 		listener.enterConnectorPointingRight(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConnectorPointingRight) {
	 		listener.exitConnectorPointingRight(this);
		}
	}
}


export class ConnectorPointingLeftContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_connectorPointingLeft;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConnectorPointingLeft) {
	 		listener.enterConnectorPointingLeft(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConnectorPointingLeft) {
	 		listener.exitConnectorPointingLeft(this);
		}
	}
}


export class ConnectorUndirectedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TO(): TerminalNode {
		return this.getToken(GqlParser.TO, 0);
	}
	public TILDE(): TerminalNode {
		return this.getToken(GqlParser.TILDE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_connectorUndirected;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConnectorUndirected) {
	 		listener.enterConnectorUndirected(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConnectorUndirected) {
	 		listener.exitConnectorUndirected(this);
		}
	}
}


export class SourceNodeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourceNodeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourceNodeTypeName) {
	 		listener.enterSourceNodeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourceNodeTypeName) {
	 		listener.exitSourceNodeTypeName(this);
		}
	}
}


export class DestinationNodeTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementTypeName(): ElementTypeNameContext {
		return this.getTypedRuleContext(ElementTypeNameContext, 0) as ElementTypeNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_destinationNodeTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDestinationNodeTypeName) {
	 		listener.enterDestinationNodeTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDestinationNodeTypeName) {
	 		listener.exitDestinationNodeTypeName(this);
		}
	}
}


export class LabelSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LABEL(): TerminalNode {
		return this.getToken(GqlParser.LABEL, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public labelName(): LabelNameContext {
		return this.getTypedRuleContext(LabelNameContext, 0) as LabelNameContext;
	}
	public LABELS(): TerminalNode {
		return this.getToken(GqlParser.LABELS, 0);
	}
	public labelSetSpec(): LabelSetSpecContext {
		return this.getTypedRuleContext(LabelSetSpecContext, 0) as LabelSetSpecContext;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelSetDef) {
	 		listener.enterLabelSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelSetDef) {
	 		listener.exitLabelSetDef(this);
		}
	}
}


export class PropertyTypeSetDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public propertyTypeDefList(): PropertyTypeDefListContext {
		return this.getTypedRuleContext(PropertyTypeDefListContext, 0) as PropertyTypeDefListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyTypeSetDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyTypeSetDef) {
	 		listener.enterPropertyTypeSetDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyTypeSetDef) {
	 		listener.exitPropertyTypeSetDef(this);
		}
	}
}


export class PropertyTypeDefListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyTypeDef_list(): PropertyTypeDefContext[] {
		return this.getTypedRuleContexts(PropertyTypeDefContext) as PropertyTypeDefContext[];
	}
	public propertyTypeDef(i: number): PropertyTypeDefContext {
		return this.getTypedRuleContext(PropertyTypeDefContext, i) as PropertyTypeDefContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyTypeDefList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyTypeDefList) {
	 		listener.enterPropertyTypeDefList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyTypeDefList) {
	 		listener.exitPropertyTypeDefList(this);
		}
	}
}


export class PropertyTypeDefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public propertyValueType(): PropertyValueTypeContext {
		return this.getTypedRuleContext(PropertyValueTypeContext, 0) as PropertyValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyTypeDef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyTypeDef) {
	 		listener.enterPropertyTypeDef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyTypeDef) {
	 		listener.exitPropertyTypeDef(this);
		}
	}
}


export class PropertyValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyValueType) {
	 		listener.enterPropertyValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyValueType) {
	 		listener.exitPropertyValueType(this);
		}
	}
}


export class BindingTableTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public fieldTypesSpec(): FieldTypesSpecContext {
		return this.getTypedRuleContext(FieldTypesSpecContext, 0) as FieldTypesSpecContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableType) {
	 		listener.enterBindingTableType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableType) {
	 		listener.exitBindingTableType(this);
		}
	}
}


export class ValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predefinedType(): PredefinedTypeContext {
		return this.getTypedRuleContext(PredefinedTypeContext, 0) as PredefinedTypeContext;
	}
	public constructedType(): ConstructedTypeContext {
		return this.getTypedRuleContext(ConstructedTypeContext, 0) as ConstructedTypeContext;
	}
	public dynamicUnionType(): DynamicUnionTypeContext {
		return this.getTypedRuleContext(DynamicUnionTypeContext, 0) as DynamicUnionTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueType) {
	 		listener.enterValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueType) {
	 		listener.exitValueType(this);
		}
	}
}


export class TypedContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOUBLE_COLON(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_COLON, 0);
	}
	public TYPED(): TerminalNode {
		return this.getToken(GqlParser.TYPED, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_typed;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTyped) {
	 		listener.enterTyped(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTyped) {
	 		listener.exitTyped(this);
		}
	}
}


export class PredefinedTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanType(): BooleanTypeContext {
		return this.getTypedRuleContext(BooleanTypeContext, 0) as BooleanTypeContext;
	}
	public charStringType(): CharStringTypeContext {
		return this.getTypedRuleContext(CharStringTypeContext, 0) as CharStringTypeContext;
	}
	public byteStringType(): ByteStringTypeContext {
		return this.getTypedRuleContext(ByteStringTypeContext, 0) as ByteStringTypeContext;
	}
	public numericType(): NumericTypeContext {
		return this.getTypedRuleContext(NumericTypeContext, 0) as NumericTypeContext;
	}
	public temporalType(): TemporalTypeContext {
		return this.getTypedRuleContext(TemporalTypeContext, 0) as TemporalTypeContext;
	}
	public refValueType(): RefValueTypeContext {
		return this.getTypedRuleContext(RefValueTypeContext, 0) as RefValueTypeContext;
	}
	public pathValueType(): PathValueTypeContext {
		return this.getTypedRuleContext(PathValueTypeContext, 0) as PathValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedType) {
	 		listener.enterPredefinedType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedType) {
	 		listener.exitPredefinedType(this);
		}
	}
}


export class BooleanTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BOOL(): TerminalNode {
		return this.getToken(GqlParser.BOOL, 0);
	}
	public BOOLEAN(): TerminalNode {
		return this.getToken(GqlParser.BOOLEAN, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanType) {
	 		listener.enterBooleanType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanType) {
	 		listener.exitBooleanType(this);
		}
	}
}


export class CharStringTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STRING(): TerminalNode {
		return this.getToken(GqlParser.STRING, 0);
	}
	public VARCHAR(): TerminalNode {
		return this.getToken(GqlParser.VARCHAR, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public maxLength(): MaxLengthContext {
		return this.getTypedRuleContext(MaxLengthContext, 0) as MaxLengthContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringType) {
	 		listener.enterCharStringType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringType) {
	 		listener.exitCharStringType(this);
		}
	}
}


export class ByteStringTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BYTES(): TerminalNode {
		return this.getToken(GqlParser.BYTES, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public maxLength(): MaxLengthContext {
		return this.getTypedRuleContext(MaxLengthContext, 0) as MaxLengthContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public minLength(): MinLengthContext {
		return this.getTypedRuleContext(MinLengthContext, 0) as MinLengthContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(GqlParser.BINARY, 0);
	}
	public fixedLength(): FixedLengthContext {
		return this.getTypedRuleContext(FixedLengthContext, 0) as FixedLengthContext;
	}
	public VARBINARY(): TerminalNode {
		return this.getToken(GqlParser.VARBINARY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringType) {
	 		listener.enterByteStringType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringType) {
	 		listener.exitByteStringType(this);
		}
	}
}


export class MinLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_minLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMinLength) {
	 		listener.enterMinLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMinLength) {
	 		listener.exitMinLength(this);
		}
	}
}


export class MaxLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_maxLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMaxLength) {
	 		listener.enterMaxLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMaxLength) {
	 		listener.exitMaxLength(this);
		}
	}
}


export class FixedLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fixedLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFixedLength) {
	 		listener.enterFixedLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFixedLength) {
	 		listener.exitFixedLength(this);
		}
	}
}


export class NumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public exactNumericType(): ExactNumericTypeContext {
		return this.getTypedRuleContext(ExactNumericTypeContext, 0) as ExactNumericTypeContext;
	}
	public approximateNumericType(): ApproximateNumericTypeContext {
		return this.getTypedRuleContext(ApproximateNumericTypeContext, 0) as ApproximateNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericType) {
	 		listener.enterNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericType) {
	 		listener.exitNumericType(this);
		}
	}
}


export class ExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public binaryExactNumericType(): BinaryExactNumericTypeContext {
		return this.getTypedRuleContext(BinaryExactNumericTypeContext, 0) as BinaryExactNumericTypeContext;
	}
	public decimalExactNumericType(): DecimalExactNumericTypeContext {
		return this.getTypedRuleContext(DecimalExactNumericTypeContext, 0) as DecimalExactNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_exactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExactNumericType) {
	 		listener.enterExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExactNumericType) {
	 		listener.exitExactNumericType(this);
		}
	}
}


export class BinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public signedBinaryExactNumericType(): SignedBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(SignedBinaryExactNumericTypeContext, 0) as SignedBinaryExactNumericTypeContext;
	}
	public unsignedBinaryExactNumericType(): UnsignedBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(UnsignedBinaryExactNumericTypeContext, 0) as UnsignedBinaryExactNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_binaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBinaryExactNumericType) {
	 		listener.enterBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBinaryExactNumericType) {
	 		listener.exitBinaryExactNumericType(this);
		}
	}
}


export class SignedBinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT8(): TerminalNode {
		return this.getToken(GqlParser.INT8, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public INT16(): TerminalNode {
		return this.getToken(GqlParser.INT16, 0);
	}
	public INT32(): TerminalNode {
		return this.getToken(GqlParser.INT32, 0);
	}
	public INT64(): TerminalNode {
		return this.getToken(GqlParser.INT64, 0);
	}
	public INT128(): TerminalNode {
		return this.getToken(GqlParser.INT128, 0);
	}
	public INT256(): TerminalNode {
		return this.getToken(GqlParser.INT256, 0);
	}
	public SMALLINT(): TerminalNode {
		return this.getToken(GqlParser.SMALLINT, 0);
	}
	public INT(): TerminalNode {
		return this.getToken(GqlParser.INT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BIGINT(): TerminalNode {
		return this.getToken(GqlParser.BIGINT, 0);
	}
	public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext, 0) as VerboseBinaryExactNumericTypeContext;
	}
	public SIGNED(): TerminalNode {
		return this.getToken(GqlParser.SIGNED, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_signedBinaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSignedBinaryExactNumericType) {
	 		listener.enterSignedBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSignedBinaryExactNumericType) {
	 		listener.exitSignedBinaryExactNumericType(this);
		}
	}
}


export class UnsignedBinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UINT8(): TerminalNode {
		return this.getToken(GqlParser.UINT8, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public UINT16(): TerminalNode {
		return this.getToken(GqlParser.UINT16, 0);
	}
	public UINT32(): TerminalNode {
		return this.getToken(GqlParser.UINT32, 0);
	}
	public UINT64(): TerminalNode {
		return this.getToken(GqlParser.UINT64, 0);
	}
	public UINT128(): TerminalNode {
		return this.getToken(GqlParser.UINT128, 0);
	}
	public UINT256(): TerminalNode {
		return this.getToken(GqlParser.UINT256, 0);
	}
	public USMALLINT(): TerminalNode {
		return this.getToken(GqlParser.USMALLINT, 0);
	}
	public UINT(): TerminalNode {
		return this.getToken(GqlParser.UINT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public UBIGINT(): TerminalNode {
		return this.getToken(GqlParser.UBIGINT, 0);
	}
	public UNSIGNED(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED, 0);
	}
	public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext {
		return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext, 0) as VerboseBinaryExactNumericTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedBinaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedBinaryExactNumericType) {
	 		listener.enterUnsignedBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedBinaryExactNumericType) {
	 		listener.exitUnsignedBinaryExactNumericType(this);
		}
	}
}


export class VerboseBinaryExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INTEGER8(): TerminalNode {
		return this.getToken(GqlParser.INTEGER8, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public INTEGER16(): TerminalNode {
		return this.getToken(GqlParser.INTEGER16, 0);
	}
	public INTEGER32(): TerminalNode {
		return this.getToken(GqlParser.INTEGER32, 0);
	}
	public INTEGER64(): TerminalNode {
		return this.getToken(GqlParser.INTEGER64, 0);
	}
	public INTEGER128(): TerminalNode {
		return this.getToken(GqlParser.INTEGER128, 0);
	}
	public INTEGER256(): TerminalNode {
		return this.getToken(GqlParser.INTEGER256, 0);
	}
	public SMALL(): TerminalNode {
		return this.getToken(GqlParser.SMALL, 0);
	}
	public INTEGER(): TerminalNode {
		return this.getToken(GqlParser.INTEGER, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BIG(): TerminalNode {
		return this.getToken(GqlParser.BIG, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_verboseBinaryExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterVerboseBinaryExactNumericType) {
	 		listener.enterVerboseBinaryExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitVerboseBinaryExactNumericType) {
	 		listener.exitVerboseBinaryExactNumericType(this);
		}
	}
}


export class DecimalExactNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECIMAL(): TerminalNode {
		return this.getToken(GqlParser.DECIMAL, 0);
	}
	public DEC(): TerminalNode {
		return this.getToken(GqlParser.DEC, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public scale(): ScaleContext {
		return this.getTypedRuleContext(ScaleContext, 0) as ScaleContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_decimalExactNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDecimalExactNumericType) {
	 		listener.enterDecimalExactNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDecimalExactNumericType) {
	 		listener.exitDecimalExactNumericType(this);
		}
	}
}


export class PrecisionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_DECIMAL_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_DECIMAL_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_precision;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPrecision) {
	 		listener.enterPrecision(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPrecision) {
	 		listener.exitPrecision(this);
		}
	}
}


export class ScaleContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_DECIMAL_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_DECIMAL_INT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_scale;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterScale) {
	 		listener.enterScale(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitScale) {
	 		listener.exitScale(this);
		}
	}
}


export class ApproximateNumericTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FLOAT16(): TerminalNode {
		return this.getToken(GqlParser.FLOAT16, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public FLOAT32(): TerminalNode {
		return this.getToken(GqlParser.FLOAT32, 0);
	}
	public FLOAT64(): TerminalNode {
		return this.getToken(GqlParser.FLOAT64, 0);
	}
	public FLOAT128(): TerminalNode {
		return this.getToken(GqlParser.FLOAT128, 0);
	}
	public FLOAT256(): TerminalNode {
		return this.getToken(GqlParser.FLOAT256, 0);
	}
	public FLOAT(): TerminalNode {
		return this.getToken(GqlParser.FLOAT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public scale(): ScaleContext {
		return this.getTypedRuleContext(ScaleContext, 0) as ScaleContext;
	}
	public REAL(): TerminalNode {
		return this.getToken(GqlParser.REAL, 0);
	}
	public DOUBLE(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE, 0);
	}
	public PRECISION(): TerminalNode {
		return this.getToken(GqlParser.PRECISION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_approximateNumericType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterApproximateNumericType) {
	 		listener.enterApproximateNumericType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitApproximateNumericType) {
	 		listener.exitApproximateNumericType(this);
		}
	}
}


export class TemporalTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public temporalInstantType(): TemporalInstantTypeContext {
		return this.getTypedRuleContext(TemporalInstantTypeContext, 0) as TemporalInstantTypeContext;
	}
	public temporalDurationType(): TemporalDurationTypeContext {
		return this.getTypedRuleContext(TemporalDurationTypeContext, 0) as TemporalDurationTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalType) {
	 		listener.enterTemporalType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalType) {
	 		listener.exitTemporalType(this);
		}
	}
}


export class TemporalInstantTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeType(): DateTimeTypeContext {
		return this.getTypedRuleContext(DateTimeTypeContext, 0) as DateTimeTypeContext;
	}
	public localDateTimeType(): LocalDateTimeTypeContext {
		return this.getTypedRuleContext(LocalDateTimeTypeContext, 0) as LocalDateTimeTypeContext;
	}
	public dateType(): DateTypeContext {
		return this.getTypedRuleContext(DateTypeContext, 0) as DateTypeContext;
	}
	public timeType(): TimeTypeContext {
		return this.getTypedRuleContext(TimeTypeContext, 0) as TimeTypeContext;
	}
	public localTimeType(): LocalTimeTypeContext {
		return this.getTypedRuleContext(LocalTimeTypeContext, 0) as LocalTimeTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalInstantType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalInstantType) {
	 		listener.enterTemporalInstantType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalInstantType) {
	 		listener.exitTemporalInstantType(this);
		}
	}
}


export class TemporalDurationTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationType(): DurationTypeContext {
		return this.getTypedRuleContext(DurationTypeContext, 0) as DurationTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalDurationType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalDurationType) {
	 		listener.enterTemporalDurationType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalDurationType) {
	 		listener.exitTemporalDurationType(this);
		}
	}
}


export class DateTimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ZONED(): TerminalNode {
		return this.getToken(GqlParser.ZONED, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeType) {
	 		listener.enterDateTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeType) {
	 		listener.exitDateTimeType(this);
		}
	}
}


export class LocalDateTimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL(): TerminalNode {
		return this.getToken(GqlParser.LOCAL, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(GqlParser.WITHOUT, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localDateTimeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalDateTimeType) {
	 		listener.enterLocalDateTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalDateTimeType) {
	 		listener.exitLocalDateTimeType(this);
		}
	}
}


export class DateTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateType) {
	 		listener.enterDateType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateType) {
	 		listener.exitDateType(this);
		}
	}
}


export class TimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ZONED(): TerminalNode {
		return this.getToken(GqlParser.ZONED, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeType) {
	 		listener.enterTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeType) {
	 		listener.exitTimeType(this);
		}
	}
}


export class LocalTimeTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL(): TerminalNode {
		return this.getToken(GqlParser.LOCAL, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(GqlParser.WITHOUT, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localTimeType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalTimeType) {
	 		listener.enterLocalTimeType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalTimeType) {
	 		listener.exitLocalTimeType(this);
		}
	}
}


export class DurationTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationType) {
	 		listener.enterDurationType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationType) {
	 		listener.exitDurationType(this);
		}
	}
}


export class RefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphRefValueType(): GraphRefValueTypeContext {
		return this.getTypedRuleContext(GraphRefValueTypeContext, 0) as GraphRefValueTypeContext;
	}
	public bindingTableRefValueType(): BindingTableRefValueTypeContext {
		return this.getTypedRuleContext(BindingTableRefValueTypeContext, 0) as BindingTableRefValueTypeContext;
	}
	public nodeRefValueType(): NodeRefValueTypeContext {
		return this.getTypedRuleContext(NodeRefValueTypeContext, 0) as NodeRefValueTypeContext;
	}
	public edgeRefValueType(): EdgeRefValueTypeContext {
		return this.getTypedRuleContext(EdgeRefValueTypeContext, 0) as EdgeRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_refValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRefValueType) {
	 		listener.enterRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRefValueType) {
	 		listener.exitRefValueType(this);
		}
	}
}


export class GraphRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openGraphRefValueType(): OpenGraphRefValueTypeContext {
		return this.getTypedRuleContext(OpenGraphRefValueTypeContext, 0) as OpenGraphRefValueTypeContext;
	}
	public closedGraphRefValueType(): ClosedGraphRefValueTypeContext {
		return this.getTypedRuleContext(ClosedGraphRefValueTypeContext, 0) as ClosedGraphRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphRefValueType) {
	 		listener.enterGraphRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphRefValueType) {
	 		listener.exitGraphRefValueType(this);
		}
	}
}


export class OpenGraphRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openGraphRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenGraphRefValueType) {
	 		listener.enterOpenGraphRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenGraphRefValueType) {
	 		listener.exitOpenGraphRefValueType(this);
		}
	}
}


export class ClosedGraphRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphTypeSpec(): GraphTypeSpecContext {
		return this.getTypedRuleContext(GraphTypeSpecContext, 0) as GraphTypeSpecContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedGraphRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedGraphRefValueType) {
	 		listener.enterClosedGraphRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedGraphRefValueType) {
	 		listener.exitClosedGraphRefValueType(this);
		}
	}
}


export class BindingTableRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingTableType(): BindingTableTypeContext {
		return this.getTypedRuleContext(BindingTableTypeContext, 0) as BindingTableTypeContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableRefValueType) {
	 		listener.enterBindingTableRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableRefValueType) {
	 		listener.exitBindingTableRefValueType(this);
		}
	}
}


export class NodeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openNodeRefValueType(): OpenNodeRefValueTypeContext {
		return this.getTypedRuleContext(OpenNodeRefValueTypeContext, 0) as OpenNodeRefValueTypeContext;
	}
	public closedNodeRefValueType(): ClosedNodeRefValueTypeContext {
		return this.getTypedRuleContext(ClosedNodeRefValueTypeContext, 0) as ClosedNodeRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeRefValueType) {
	 		listener.enterNodeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeRefValueType) {
	 		listener.exitNodeRefValueType(this);
		}
	}
}


export class OpenNodeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeSynonym(): NodeSynonymContext {
		return this.getTypedRuleContext(NodeSynonymContext, 0) as NodeSynonymContext;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openNodeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenNodeRefValueType) {
	 		listener.enterOpenNodeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenNodeRefValueType) {
	 		listener.exitOpenNodeRefValueType(this);
		}
	}
}


export class ClosedNodeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeDef(): EdgeTypeDefContext {
		return this.getTypedRuleContext(EdgeTypeDefContext, 0) as EdgeTypeDefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedNodeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedNodeRefValueType) {
	 		listener.enterClosedNodeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedNodeRefValueType) {
	 		listener.exitClosedNodeRefValueType(this);
		}
	}
}


export class EdgeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openEdgeRefValueType(): OpenEdgeRefValueTypeContext {
		return this.getTypedRuleContext(OpenEdgeRefValueTypeContext, 0) as OpenEdgeRefValueTypeContext;
	}
	public closedEdgeRefValueType(): ClosedEdgeRefValueTypeContext {
		return this.getTypedRuleContext(ClosedEdgeRefValueTypeContext, 0) as ClosedEdgeRefValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeRefValueType) {
	 		listener.enterEdgeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeRefValueType) {
	 		listener.exitEdgeRefValueType(this);
		}
	}
}


export class OpenEdgeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeSynonym(): EdgeSynonymContext {
		return this.getTypedRuleContext(EdgeSynonymContext, 0) as EdgeSynonymContext;
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openEdgeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenEdgeRefValueType) {
	 		listener.enterOpenEdgeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenEdgeRefValueType) {
	 		listener.exitOpenEdgeRefValueType(this);
		}
	}
}


export class ClosedEdgeRefValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public edgeTypeDef(): EdgeTypeDefContext {
		return this.getTypedRuleContext(EdgeTypeDefContext, 0) as EdgeTypeDefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedEdgeRefValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedEdgeRefValueType) {
	 		listener.enterClosedEdgeRefValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedEdgeRefValueType) {
	 		listener.exitClosedEdgeRefValueType(this);
		}
	}
}


export class ConstructedTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueType(): ListValueTypeContext {
		return this.getTypedRuleContext(ListValueTypeContext, 0) as ListValueTypeContext;
	}
	public recordType(): RecordTypeContext {
		return this.getTypedRuleContext(RecordTypeContext, 0) as RecordTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_constructedType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterConstructedType) {
	 		listener.enterConstructedType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitConstructedType) {
	 		listener.exitConstructedType(this);
		}
	}
}


export class ListValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueTypeName(): ListValueTypeNameContext {
		return this.getTypedRuleContext(ListValueTypeNameContext, 0) as ListValueTypeNameContext;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public predefinedType(): PredefinedTypeContext {
		return this.getTypedRuleContext(PredefinedTypeContext, 0) as PredefinedTypeContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
	public LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACKET, 0);
	}
	public maxLength(): MaxLengthContext {
		return this.getTypedRuleContext(MaxLengthContext, 0) as MaxLengthContext;
	}
	public RIGHT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueType) {
	 		listener.enterListValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueType) {
	 		listener.exitListValueType(this);
		}
	}
}


export class ListValueTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueTypeNameSynonym(): ListValueTypeNameSynonymContext {
		return this.getTypedRuleContext(ListValueTypeNameSynonymContext, 0) as ListValueTypeNameSynonymContext;
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueTypeName) {
	 		listener.enterListValueTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueTypeName) {
	 		listener.exitListValueTypeName(this);
		}
	}
}


export class ListValueTypeNameSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIST(): TerminalNode {
		return this.getToken(GqlParser.LIST, 0);
	}
	public ARRAY(): TerminalNode {
		return this.getToken(GqlParser.ARRAY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueTypeNameSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueTypeNameSynonym) {
	 		listener.enterListValueTypeNameSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueTypeNameSynonym) {
	 		listener.exitListValueTypeNameSynonym(this);
		}
	}
}


export class RecordTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RECORD(): TerminalNode {
		return this.getToken(GqlParser.RECORD, 0);
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public notNull(): NotNullContext {
		return this.getTypedRuleContext(NotNullContext, 0) as NotNullContext;
	}
	public fieldTypesSpec(): FieldTypesSpecContext {
		return this.getTypedRuleContext(FieldTypesSpecContext, 0) as FieldTypesSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordType) {
	 		listener.enterRecordType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordType) {
	 		listener.exitRecordType(this);
		}
	}
}


export class FieldTypesSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public fieldTypeList(): FieldTypeListContext {
		return this.getTypedRuleContext(FieldTypeListContext, 0) as FieldTypeListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldTypesSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldTypesSpec) {
	 		listener.enterFieldTypesSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldTypesSpec) {
	 		listener.exitFieldTypesSpec(this);
		}
	}
}


export class FieldTypeListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldType_list(): FieldTypeContext[] {
		return this.getTypedRuleContexts(FieldTypeContext) as FieldTypeContext[];
	}
	public fieldType(i: number): FieldTypeContext {
		return this.getTypedRuleContext(FieldTypeContext, i) as FieldTypeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldTypeList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldTypeList) {
	 		listener.enterFieldTypeList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldTypeList) {
	 		listener.exitFieldTypeList(this);
		}
	}
}


export class DynamicUnionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public openDynamicUnionType(): OpenDynamicUnionTypeContext {
		return this.getTypedRuleContext(OpenDynamicUnionTypeContext, 0) as OpenDynamicUnionTypeContext;
	}
	public dynamicPropertyValueType(): DynamicPropertyValueTypeContext {
		return this.getTypedRuleContext(DynamicPropertyValueTypeContext, 0) as DynamicPropertyValueTypeContext;
	}
	public closedDynamicUnionType(): ClosedDynamicUnionTypeContext {
		return this.getTypedRuleContext(ClosedDynamicUnionTypeContext, 0) as ClosedDynamicUnionTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dynamicUnionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDynamicUnionType) {
	 		listener.enterDynamicUnionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDynamicUnionType) {
	 		listener.exitDynamicUnionType(this);
		}
	}
}


export class OpenDynamicUnionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_openDynamicUnionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterOpenDynamicUnionType) {
	 		listener.enterOpenDynamicUnionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitOpenDynamicUnionType) {
	 		listener.exitOpenDynamicUnionType(this);
		}
	}
}


export class DynamicPropertyValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dynamicPropertyValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDynamicPropertyValueType) {
	 		listener.enterDynamicPropertyValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDynamicPropertyValueType) {
	 		listener.exitDynamicPropertyValueType(this);
		}
	}
}


export class ClosedDynamicUnionTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public componentTypeList(): ComponentTypeListContext {
		return this.getTypedRuleContext(ComponentTypeListContext, 0) as ComponentTypeListContext;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_closedDynamicUnionType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterClosedDynamicUnionType) {
	 		listener.enterClosedDynamicUnionType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitClosedDynamicUnionType) {
	 		listener.exitClosedDynamicUnionType(this);
		}
	}
}


export class ComponentTypeListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public componentType_list(): ComponentTypeContext[] {
		return this.getTypedRuleContexts(ComponentTypeContext) as ComponentTypeContext[];
	}
	public componentType(i: number): ComponentTypeContext {
		return this.getTypedRuleContext(ComponentTypeContext, i) as ComponentTypeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_componentTypeList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComponentTypeList) {
	 		listener.enterComponentTypeList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComponentTypeList) {
	 		listener.exitComponentTypeList(this);
		}
	}
}


export class ComponentTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_componentType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComponentType) {
	 		listener.enterComponentType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComponentType) {
	 		listener.exitComponentType(this);
		}
	}
}


export class PathValueTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueType) {
	 		listener.enterPathValueType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueType) {
	 		listener.exitPathValueType(this);
		}
	}
}


export class NotNullContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_notNull;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNotNull) {
	 		listener.enterNotNull(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNotNull) {
	 		listener.exitNotNull(this);
		}
	}
}


export class FieldTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldName(): FieldNameContext {
		return this.getTypedRuleContext(FieldNameContext, 0) as FieldNameContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldType) {
	 		listener.enterFieldType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldType) {
	 		listener.exitFieldType(this);
		}
	}
}


export class SchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public absoluteCatalogSchemaRef(): AbsoluteCatalogSchemaRefContext {
		return this.getTypedRuleContext(AbsoluteCatalogSchemaRefContext, 0) as AbsoluteCatalogSchemaRefContext;
	}
	public relativeCatalogSchemaRef(): RelativeCatalogSchemaRefContext {
		return this.getTypedRuleContext(RelativeCatalogSchemaRefContext, 0) as RelativeCatalogSchemaRefContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_schemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSchemaRef) {
	 		listener.enterSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSchemaRef) {
	 		listener.exitSchemaRef(this);
		}
	}
}


export class AbsoluteCatalogSchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
	public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
		return this.getTypedRuleContext(AbsoluteDirectoryPathContext, 0) as AbsoluteDirectoryPathContext;
	}
	public schemaName(): SchemaNameContext {
		return this.getTypedRuleContext(SchemaNameContext, 0) as SchemaNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_absoluteCatalogSchemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbsoluteCatalogSchemaRef) {
	 		listener.enterAbsoluteCatalogSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbsoluteCatalogSchemaRef) {
	 		listener.exitAbsoluteCatalogSchemaRef(this);
		}
	}
}


export class CatalogSchemaParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
		return this.getTypedRuleContext(AbsoluteDirectoryPathContext, 0) as AbsoluteDirectoryPathContext;
	}
	public schemaName(): SchemaNameContext {
		return this.getTypedRuleContext(SchemaNameContext, 0) as SchemaNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogSchemaParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogSchemaParentAndName) {
	 		listener.enterCatalogSchemaParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogSchemaParentAndName) {
	 		listener.exitCatalogSchemaParentAndName(this);
		}
	}
}


export class RelativeCatalogSchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predefinedSchemaRef(): PredefinedSchemaRefContext {
		return this.getTypedRuleContext(PredefinedSchemaRefContext, 0) as PredefinedSchemaRefContext;
	}
	public relativeDirectoryPath(): RelativeDirectoryPathContext {
		return this.getTypedRuleContext(RelativeDirectoryPathContext, 0) as RelativeDirectoryPathContext;
	}
	public schemaName(): SchemaNameContext {
		return this.getTypedRuleContext(SchemaNameContext, 0) as SchemaNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_relativeCatalogSchemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRelativeCatalogSchemaRef) {
	 		listener.enterRelativeCatalogSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRelativeCatalogSchemaRef) {
	 		listener.exitRelativeCatalogSchemaRef(this);
		}
	}
}


export class PredefinedSchemaRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HOME_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.HOME_SCHEMA, 0);
	}
	public CURRENT_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_SCHEMA, 0);
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedSchemaRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedSchemaRef) {
	 		listener.enterPredefinedSchemaRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedSchemaRef) {
	 		listener.exitPredefinedSchemaRef(this);
		}
	}
}


export class AbsoluteDirectoryPathContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
	public simpleDirectoryPath(): SimpleDirectoryPathContext {
		return this.getTypedRuleContext(SimpleDirectoryPathContext, 0) as SimpleDirectoryPathContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_absoluteDirectoryPath;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbsoluteDirectoryPath) {
	 		listener.enterAbsoluteDirectoryPath(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbsoluteDirectoryPath) {
	 		listener.exitAbsoluteDirectoryPath(this);
		}
	}
}


export class RelativeDirectoryPathContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOUBLE_PERIOD_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.DOUBLE_PERIOD);
	}
	public DOUBLE_PERIOD(i: number): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_PERIOD, i);
	}
	public SOLIDUS_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.SOLIDUS);
	}
	public SOLIDUS(i: number): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, i);
	}
	public simpleDirectoryPath(): SimpleDirectoryPathContext {
		return this.getTypedRuleContext(SimpleDirectoryPathContext, 0) as SimpleDirectoryPathContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_relativeDirectoryPath;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRelativeDirectoryPath) {
	 		listener.enterRelativeDirectoryPath(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRelativeDirectoryPath) {
	 		listener.exitRelativeDirectoryPath(this);
		}
	}
}


export class SimpleDirectoryPathContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public directoryName_list(): DirectoryNameContext[] {
		return this.getTypedRuleContexts(DirectoryNameContext) as DirectoryNameContext[];
	}
	public directoryName(i: number): DirectoryNameContext {
		return this.getTypedRuleContext(DirectoryNameContext, i) as DirectoryNameContext;
	}
	public SOLIDUS_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.SOLIDUS);
	}
	public SOLIDUS(i: number): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleDirectoryPath;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleDirectoryPath) {
	 		listener.enterSimpleDirectoryPath(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleDirectoryPath) {
	 		listener.exitSimpleDirectoryPath(this);
		}
	}
}


export class GraphRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public graphName(): GraphNameContext {
		return this.getTypedRuleContext(GraphNameContext, 0) as GraphNameContext;
	}
	public delimitedGraphName(): DelimitedGraphNameContext {
		return this.getTypedRuleContext(DelimitedGraphNameContext, 0) as DelimitedGraphNameContext;
	}
	public homeGraph(): HomeGraphContext {
		return this.getTypedRuleContext(HomeGraphContext, 0) as HomeGraphContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphRef) {
	 		listener.enterGraphRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphRef) {
	 		listener.exitGraphRef(this);
		}
	}
}


export class CatalogGraphParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphName(): GraphNameContext {
		return this.getTypedRuleContext(GraphNameContext, 0) as GraphNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogGraphParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogGraphParentAndName) {
	 		listener.enterCatalogGraphParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogGraphParentAndName) {
	 		listener.exitCatalogGraphParentAndName(this);
		}
	}
}


export class HomeGraphContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HOME_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0);
	}
	public HOME_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_GRAPH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_homeGraph;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterHomeGraph) {
	 		listener.enterHomeGraph(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitHomeGraph) {
	 		listener.exitHomeGraph(this);
		}
	}
}


export class GraphTypeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
		return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext, 0) as CatalogGraphTypeParentAndNameContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeRef) {
	 		listener.enterGraphTypeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeRef) {
	 		listener.exitGraphTypeRef(this);
		}
	}
}


export class CatalogGraphTypeParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphTypeName(): GraphTypeNameContext {
		return this.getTypedRuleContext(GraphTypeNameContext, 0) as GraphTypeNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogGraphTypeParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogGraphTypeParentAndName) {
	 		listener.enterCatalogGraphTypeParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogGraphTypeParentAndName) {
	 		listener.exitCatalogGraphTypeParentAndName(this);
		}
	}
}


export class BindingTableRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public bindingTableName(): BindingTableNameContext {
		return this.getTypedRuleContext(BindingTableNameContext, 0) as BindingTableNameContext;
	}
	public delimitedBindingTableName(): DelimitedBindingTableNameContext {
		return this.getTypedRuleContext(DelimitedBindingTableNameContext, 0) as DelimitedBindingTableNameContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableRef) {
	 		listener.enterBindingTableRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableRef) {
	 		listener.exitBindingTableRef(this);
		}
	}
}


export class CatalogBindingTableParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingTableName(): BindingTableNameContext {
		return this.getTypedRuleContext(BindingTableNameContext, 0) as BindingTableNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogBindingTableParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogBindingTableParentAndName) {
	 		listener.enterCatalogBindingTableParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogBindingTableParentAndName) {
	 		listener.exitCatalogBindingTableParentAndName(this);
		}
	}
}


export class ProcedureRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catalogProcedureParentAndName(): CatalogProcedureParentAndNameContext {
		return this.getTypedRuleContext(CatalogProcedureParentAndNameContext, 0) as CatalogProcedureParentAndNameContext;
	}
	public refParameter(): RefParameterContext {
		return this.getTypedRuleContext(RefParameterContext, 0) as RefParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureRef) {
	 		listener.enterProcedureRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureRef) {
	 		listener.exitProcedureRef(this);
		}
	}
}


export class CatalogProcedureParentAndNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public procedureName(): ProcedureNameContext {
		return this.getTypedRuleContext(ProcedureNameContext, 0) as ProcedureNameContext;
	}
	public catalogObjectParentRef(): CatalogObjectParentRefContext {
		return this.getTypedRuleContext(CatalogObjectParentRefContext, 0) as CatalogObjectParentRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogProcedureParentAndName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogProcedureParentAndName) {
	 		listener.enterCatalogProcedureParentAndName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogProcedureParentAndName) {
	 		listener.exitCatalogProcedureParentAndName(this);
		}
	}
}


export class CatalogObjectParentRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
	public objectName_list(): ObjectNameContext[] {
		return this.getTypedRuleContexts(ObjectNameContext) as ObjectNameContext[];
	}
	public objectName(i: number): ObjectNameContext {
		return this.getTypedRuleContext(ObjectNameContext, i) as ObjectNameContext;
	}
	public PERIOD_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.PERIOD);
	}
	public PERIOD(i: number): TerminalNode {
		return this.getToken(GqlParser.PERIOD, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_catalogObjectParentRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCatalogObjectParentRef) {
	 		listener.enterCatalogObjectParentRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCatalogObjectParentRef) {
	 		listener.exitCatalogObjectParentRef(this);
		}
	}
}


export class RefParameterContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameter(): ParameterContext {
		return this.getTypedRuleContext(ParameterContext, 0) as ParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_refParameter;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRefParameter) {
	 		listener.enterRefParameter(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRefParameter) {
	 		listener.exitRefParameter(this);
		}
	}
}


export class ExternalObjectRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_externalObjectRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExternalObjectRef) {
	 		listener.enterExternalObjectRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExternalObjectRef) {
	 		listener.exitExternalObjectRef(this);
		}
	}
}


export class SearchConditionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_searchCondition;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSearchCondition) {
	 		listener.enterSearchCondition(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSearchCondition) {
	 		listener.exitSearchCondition(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public comparisonPredicate(): ComparisonPredicateContext {
		return this.getTypedRuleContext(ComparisonPredicateContext, 0) as ComparisonPredicateContext;
	}
	public existsPredicate(): ExistsPredicateContext {
		return this.getTypedRuleContext(ExistsPredicateContext, 0) as ExistsPredicateContext;
	}
	public nullPredicate(): NullPredicateContext {
		return this.getTypedRuleContext(NullPredicateContext, 0) as NullPredicateContext;
	}
	public valueTypePredicate(): ValueTypePredicateContext {
		return this.getTypedRuleContext(ValueTypePredicateContext, 0) as ValueTypePredicateContext;
	}
	public normalizedPredicate(): NormalizedPredicateContext {
		return this.getTypedRuleContext(NormalizedPredicateContext, 0) as NormalizedPredicateContext;
	}
	public directedPredicate(): DirectedPredicateContext {
		return this.getTypedRuleContext(DirectedPredicateContext, 0) as DirectedPredicateContext;
	}
	public labeledPredicate(): LabeledPredicateContext {
		return this.getTypedRuleContext(LabeledPredicateContext, 0) as LabeledPredicateContext;
	}
	public sourceOrDestinationPredicate(): SourceOrDestinationPredicateContext {
		return this.getTypedRuleContext(SourceOrDestinationPredicateContext, 0) as SourceOrDestinationPredicateContext;
	}
	public allDifferentPredicate(): AllDifferentPredicateContext {
		return this.getTypedRuleContext(AllDifferentPredicateContext, 0) as AllDifferentPredicateContext;
	}
	public samePredicate(): SamePredicateContext {
		return this.getTypedRuleContext(SamePredicateContext, 0) as SamePredicateContext;
	}
	public propertyExistsPredicate(): PropertyExistsPredicateContext {
		return this.getTypedRuleContext(PropertyExistsPredicateContext, 0) as PropertyExistsPredicateContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredicate) {
	 		listener.enterPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredicate) {
	 		listener.exitPredicate(this);
		}
	}
}


export class ComparisonPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public comparisonPredicand(): ComparisonPredicandContext {
		return this.getTypedRuleContext(ComparisonPredicandContext, 0) as ComparisonPredicandContext;
	}
	public comparisonPredicatePart2(): ComparisonPredicatePart2Context {
		return this.getTypedRuleContext(ComparisonPredicatePart2Context, 0) as ComparisonPredicatePart2Context;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonPredicate) {
	 		listener.enterComparisonPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonPredicate) {
	 		listener.exitComparisonPredicate(this);
		}
	}
}


export class ComparisonPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getTypedRuleContext(ComparisonOperatorContext, 0) as ComparisonOperatorContext;
	}
	public comparisonPredicand(): ComparisonPredicandContext {
		return this.getTypedRuleContext(ComparisonPredicandContext, 0) as ComparisonPredicandContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonPredicatePart2) {
	 		listener.enterComparisonPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonPredicatePart2) {
	 		listener.exitComparisonPredicatePart2(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public equals(): EqualsContext {
		return this.getTypedRuleContext(EqualsContext, 0) as EqualsContext;
	}
	public notEquals(): NotEqualsContext {
		return this.getTypedRuleContext(NotEqualsContext, 0) as NotEqualsContext;
	}
	public lessThen(): LessThenContext {
		return this.getTypedRuleContext(LessThenContext, 0) as LessThenContext;
	}
	public greaterThan(): GreaterThanContext {
		return this.getTypedRuleContext(GreaterThanContext, 0) as GreaterThanContext;
	}
	public lessThanOrEquals(): LessThanOrEqualsContext {
		return this.getTypedRuleContext(LessThanOrEqualsContext, 0) as LessThanOrEqualsContext;
	}
	public graterThanOrEquals(): GraterThanOrEqualsContext {
		return this.getTypedRuleContext(GraterThanOrEqualsContext, 0) as GraterThanOrEqualsContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonOperator;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonOperator) {
	 		listener.enterComparisonOperator(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonOperator) {
	 		listener.exitComparisonOperator(this);
		}
	}
}


export class EqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_equals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEquals) {
	 		listener.enterEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEquals) {
	 		listener.exitEquals(this);
		}
	}
}


export class NotEqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_notEquals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNotEquals) {
	 		listener.enterNotEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNotEquals) {
	 		listener.exitNotEquals(this);
		}
	}
}


export class LessThenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lessThen;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLessThen) {
	 		listener.enterLessThen(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLessThen) {
	 		listener.exitLessThen(this);
		}
	}
}


export class GreaterThanContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_greaterThan;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGreaterThan) {
	 		listener.enterGreaterThan(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGreaterThan) {
	 		listener.exitGreaterThan(this);
		}
	}
}


export class LessThanOrEqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0);
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lessThanOrEquals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLessThanOrEquals) {
	 		listener.enterLessThanOrEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLessThanOrEquals) {
	 		listener.exitLessThanOrEquals(this);
		}
	}
}


export class GraterThanOrEqualsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RIGHT_ANGLE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0);
	}
	public EQUALS(): TerminalNode {
		return this.getToken(GqlParser.EQUALS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graterThanOrEquals;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraterThanOrEquals) {
	 		listener.enterGraterThanOrEquals(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraterThanOrEquals) {
	 		listener.exitGraterThanOrEquals(this);
		}
	}
}


export class ComparisonPredicandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public commonValueExpr(): CommonValueExprContext {
		return this.getTypedRuleContext(CommonValueExprContext, 0) as CommonValueExprContext;
	}
	public booleanPredicand(): BooleanPredicandContext {
		return this.getTypedRuleContext(BooleanPredicandContext, 0) as BooleanPredicandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comparisonPredicand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComparisonPredicand) {
	 		listener.enterComparisonPredicand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComparisonPredicand) {
	 		listener.exitComparisonPredicand(this);
		}
	}
}


export class ExistsPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXISTS(): TerminalNode {
		return this.getToken(GqlParser.EXISTS, 0);
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public graphPattern(): GraphPatternContext {
		return this.getTypedRuleContext(GraphPatternContext, 0) as GraphPatternContext;
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public matchStatmentBlock(): MatchStatmentBlockContext {
		return this.getTypedRuleContext(MatchStatmentBlockContext, 0) as MatchStatmentBlockContext;
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_existsPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExistsPredicate) {
	 		listener.enterExistsPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExistsPredicate) {
	 		listener.exitExistsPredicate(this);
		}
	}
}


export class NullPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public nullPredicatePart2(): NullPredicatePart2Context {
		return this.getTypedRuleContext(NullPredicatePart2Context, 0) as NullPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullPredicate) {
	 		listener.enterNullPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullPredicate) {
	 		listener.exitNullPredicate(this);
		}
	}
}


export class NullPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullPredicatePart2) {
	 		listener.enterNullPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullPredicatePart2) {
	 		listener.exitNullPredicatePart2(this);
		}
	}
}


export class ValueTypePredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
		return this.getTypedRuleContext(ValueTypePredicatePart2Context, 0) as ValueTypePredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueTypePredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueTypePredicate) {
	 		listener.enterValueTypePredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueTypePredicate) {
	 		listener.exitValueTypePredicate(this);
		}
	}
}


export class ValueTypePredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public typed(): TypedContext {
		return this.getTypedRuleContext(TypedContext, 0) as TypedContext;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueTypePredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueTypePredicatePart2) {
	 		listener.enterValueTypePredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueTypePredicatePart2) {
	 		listener.exitValueTypePredicatePart2(this);
		}
	}
}


export class NormalizedPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public stringValueExpr(): StringValueExprContext {
		return this.getTypedRuleContext(StringValueExprContext, 0) as StringValueExprContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public normalizedPredicatePart2(): NormalizedPredicatePart2Context {
		return this.getTypedRuleContext(NormalizedPredicatePart2Context, 0) as NormalizedPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalizedPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalizedPredicate) {
	 		listener.enterNormalizedPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalizedPredicate) {
	 		listener.exitNormalizedPredicate(this);
		}
	}
}


export class NormalizedPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public NORMALIZED(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZED, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public normalForm(): NormalFormContext {
		return this.getTypedRuleContext(NormalFormContext, 0) as NormalFormContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalizedPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalizedPredicatePart2) {
	 		listener.enterNormalizedPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalizedPredicatePart2) {
	 		listener.exitNormalizedPredicatePart2(this);
		}
	}
}


export class DirectedPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public directedPredicate(): DirectedPredicateContext {
		return this.getTypedRuleContext(DirectedPredicateContext, 0) as DirectedPredicateContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_directedPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDirectedPredicate) {
	 		listener.enterDirectedPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDirectedPredicate) {
	 		listener.exitDirectedPredicate(this);
		}
	}
}


export class DirectedPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public DIRECTED(): TerminalNode {
		return this.getToken(GqlParser.DIRECTED, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_directedPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDirectedPredicatePart2) {
	 		listener.enterDirectedPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDirectedPredicatePart2) {
	 		listener.exitDirectedPredicatePart2(this);
		}
	}
}


export class LabeledPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labeledPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabeledPredicate) {
	 		listener.enterLabeledPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabeledPredicate) {
	 		listener.exitLabeledPredicate(this);
		}
	}
}


export class LabeledPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public isLabeledOrColon(): IsLabeledOrColonContext {
		return this.getTypedRuleContext(IsLabeledOrColonContext, 0) as IsLabeledOrColonContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public labelExpr(): LabelExprContext {
		return this.getTypedRuleContext(LabelExprContext, 0) as LabelExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labeledPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabeledPredicatePart2) {
	 		listener.enterLabeledPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabeledPredicatePart2) {
	 		listener.exitLabeledPredicatePart2(this);
		}
	}
}


export class IsLabeledOrColonContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public LABELED(): TerminalNode {
		return this.getToken(GqlParser.LABELED, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_isLabeledOrColon;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIsLabeledOrColon) {
	 		listener.enterIsLabeledOrColon(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIsLabeledOrColon) {
	 		listener.exitIsLabeledOrColon(this);
		}
	}
}


export class SourceOrDestinationPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeRef(): NodeRefContext {
		return this.getTypedRuleContext(NodeRefContext, 0) as NodeRefContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public sourcePredicatePart2(): SourcePredicatePart2Context {
		return this.getTypedRuleContext(SourcePredicatePart2Context, 0) as SourcePredicatePart2Context;
	}
	public destinationPredicatePart2(): DestinationPredicatePart2Context {
		return this.getTypedRuleContext(DestinationPredicatePart2Context, 0) as DestinationPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourceOrDestinationPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourceOrDestinationPredicate) {
	 		listener.enterSourceOrDestinationPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourceOrDestinationPredicate) {
	 		listener.exitSourceOrDestinationPredicate(this);
		}
	}
}


export class NodeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeRef) {
	 		listener.enterNodeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeRef) {
	 		listener.exitNodeRef(this);
		}
	}
}


export class SourcePredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SOURCE(): TerminalNode {
		return this.getToken(GqlParser.SOURCE, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public edgeRef(): EdgeRefContext {
		return this.getTypedRuleContext(EdgeRefContext, 0) as EdgeRefContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sourcePredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSourcePredicatePart2) {
	 		listener.enterSourcePredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSourcePredicatePart2) {
	 		listener.exitSourcePredicatePart2(this);
		}
	}
}


export class DestinationPredicatePart2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public DESTINATION(): TerminalNode {
		return this.getToken(GqlParser.DESTINATION, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public edgeRef(): EdgeRefContext {
		return this.getTypedRuleContext(EdgeRefContext, 0) as EdgeRefContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_destinationPredicatePart2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDestinationPredicatePart2) {
	 		listener.enterDestinationPredicatePart2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDestinationPredicatePart2) {
	 		listener.exitDestinationPredicatePart2(this);
		}
	}
}


export class EdgeRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeRef) {
	 		listener.enterEdgeRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeRef) {
	 		listener.exitEdgeRef(this);
		}
	}
}


export class AllDifferentPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL_DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.ALL_DIFFERENT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef_list(): ElementVarRefContext[] {
		return this.getTypedRuleContexts(ElementVarRefContext) as ElementVarRefContext[];
	}
	public elementVarRef(i: number): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, i) as ElementVarRefContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_allDifferentPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAllDifferentPredicate) {
	 		listener.enterAllDifferentPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAllDifferentPredicate) {
	 		listener.exitAllDifferentPredicate(this);
		}
	}
}


export class SamePredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SAME(): TerminalNode {
		return this.getToken(GqlParser.SAME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef_list(): ElementVarRefContext[] {
		return this.getTypedRuleContexts(ElementVarRefContext) as ElementVarRefContext[];
	}
	public elementVarRef(i: number): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, i) as ElementVarRefContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_samePredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSamePredicate) {
	 		listener.enterSamePredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSamePredicate) {
	 		listener.exitSamePredicate(this);
		}
	}
}


export class PropertyExistsPredicateContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PROPERTY_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY_EXISTS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyExistsPredicate;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyExistsPredicate) {
	 		listener.enterPropertyExistsPredicate(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyExistsPredicate) {
	 		listener.exitPropertyExistsPredicate(this);
		}
	}
}


export class ValueSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public literal(): LiteralContext {
		return this.getTypedRuleContext(LiteralContext, 0) as LiteralContext;
	}
	public parameterValueSpec(): ParameterValueSpecContext {
		return this.getTypedRuleContext(ParameterValueSpecContext, 0) as ParameterValueSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueSpec) {
	 		listener.enterValueSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueSpec) {
	 		listener.exitValueSpec(this);
		}
	}
}


export class UnsignedValueSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedLiteral(): UnsignedLiteralContext {
		return this.getTypedRuleContext(UnsignedLiteralContext, 0) as UnsignedLiteralContext;
	}
	public parameterValueSpec(): ParameterValueSpecContext {
		return this.getTypedRuleContext(ParameterValueSpecContext, 0) as ParameterValueSpecContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedValueSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedValueSpec) {
	 		listener.enterUnsignedValueSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedValueSpec) {
	 		listener.exitUnsignedValueSpec(this);
		}
	}
}


export class UnsignedIntSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
	public parameter(): ParameterContext {
		return this.getTypedRuleContext(ParameterContext, 0) as ParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedIntSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedIntSpec) {
	 		listener.enterUnsignedIntSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedIntSpec) {
	 		listener.exitUnsignedIntSpec(this);
		}
	}
}


export class ParameterValueSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameter(): ParameterContext {
		return this.getTypedRuleContext(ParameterContext, 0) as ParameterContext;
	}
	public predefinedParameter(): PredefinedParameterContext {
		return this.getTypedRuleContext(PredefinedParameterContext, 0) as PredefinedParameterContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parameterValueSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParameterValueSpec) {
	 		listener.enterParameterValueSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParameterValueSpec) {
	 		listener.exitParameterValueSpec(this);
		}
	}
}


export class PredefinedParameterContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_USER(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_USER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedParameter;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedParameter) {
	 		listener.enterPredefinedParameter(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedParameter) {
	 		listener.exitPredefinedParameter(this);
		}
	}
}


export class ValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public commonValueExpr(): CommonValueExprContext {
		return this.getTypedRuleContext(CommonValueExprContext, 0) as CommonValueExprContext;
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueExpr) {
	 		listener.enterValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueExpr) {
	 		listener.exitValueExpr(this);
		}
	}
}


export class CommonValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public stringValueExpr(): StringValueExprContext {
		return this.getTypedRuleContext(StringValueExprContext, 0) as StringValueExprContext;
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
	public recordValueExpr(): RecordValueExprContext {
		return this.getTypedRuleContext(RecordValueExprContext, 0) as RecordValueExprContext;
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
	public refValueExpr(): RefValueExprContext {
		return this.getTypedRuleContext(RefValueExprContext, 0) as RefValueExprContext;
	}
	public propertyName_list(): PropertyNameContext[] {
		return this.getTypedRuleContexts(PropertyNameContext) as PropertyNameContext[];
	}
	public propertyName(i: number): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, i) as PropertyNameContext;
	}
	public PERIOD_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.PERIOD);
	}
	public PERIOD(i: number): TerminalNode {
		return this.getToken(GqlParser.PERIOD, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_commonValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCommonValueExpr) {
	 		listener.enterCommonValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCommonValueExpr) {
	 		listener.exitCommonValueExpr(this);
		}
	}
}


export class RefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphRefValueExpr(): GraphRefValueExprContext {
		return this.getTypedRuleContext(GraphRefValueExprContext, 0) as GraphRefValueExprContext;
	}
	public bindingTableRefValueExpr(): BindingTableRefValueExprContext {
		return this.getTypedRuleContext(BindingTableRefValueExprContext, 0) as BindingTableRefValueExprContext;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		return this.getTypedRuleContext(EdgeRefValueExprContext, 0) as EdgeRefValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_refValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRefValueExpr) {
	 		listener.enterRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRefValueExpr) {
	 		listener.exitRefValueExpr(this);
		}
	}
}


export class GraphRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public graphExpr(): GraphExprContext {
		return this.getTypedRuleContext(GraphExprContext, 0) as GraphExprContext;
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphRefValueExpr) {
	 		listener.enterGraphRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphRefValueExpr) {
	 		listener.exitGraphRefValueExpr(this);
		}
	}
}


export class BindingTableRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public bindingTableExpr(): BindingTableExprContext {
		return this.getTypedRuleContext(BindingTableExprContext, 0) as BindingTableExprContext;
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableRefValueExpr) {
	 		listener.enterBindingTableRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableRefValueExpr) {
	 		listener.exitBindingTableRefValueExpr(this);
		}
	}
}


export class NodeRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeRefValueExpr) {
	 		listener.enterNodeRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeRefValueExpr) {
	 		listener.exitNodeRefValueExpr(this);
		}
	}
}


export class EdgeRefValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeRefValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeRefValueExpr) {
	 		listener.enterEdgeRefValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeRefValueExpr) {
	 		listener.exitEdgeRefValueExpr(this);
		}
	}
}


export class RecordValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordValueExpr) {
	 		listener.enterRecordValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordValueExpr) {
	 		listener.exitRecordValueExpr(this);
		}
	}
}


export class AggregatingValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_aggregatingValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAggregatingValueExpr) {
	 		listener.enterAggregatingValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAggregatingValueExpr) {
	 		listener.exitAggregatingValueExpr(this);
		}
	}
}


export class BooleanValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanTerm(): BooleanTermContext {
		return this.getTypedRuleContext(BooleanTermContext, 0) as BooleanTermContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
	public XOR(): TerminalNode {
		return this.getToken(GqlParser.XOR, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanValueExpr) {
	 		listener.enterBooleanValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanValueExpr) {
	 		listener.exitBooleanValueExpr(this);
		}
	}
}


export class BooleanTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanFactor(): BooleanFactorContext {
		return this.getTypedRuleContext(BooleanFactorContext, 0) as BooleanFactorContext;
	}
	public booleanTerm(): BooleanTermContext {
		return this.getTypedRuleContext(BooleanTermContext, 0) as BooleanTermContext;
	}
	public AND(): TerminalNode {
		return this.getToken(GqlParser.AND, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanTerm) {
	 		listener.enterBooleanTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanTerm) {
	 		listener.exitBooleanTerm(this);
		}
	}
}


export class BooleanFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanTest(): BooleanTestContext {
		return this.getTypedRuleContext(BooleanTestContext, 0) as BooleanTestContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanFactor) {
	 		listener.enterBooleanFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanFactor) {
	 		listener.exitBooleanFactor(this);
		}
	}
}


export class BooleanTestContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanPrimary(): BooleanPrimaryContext {
		return this.getTypedRuleContext(BooleanPrimaryContext, 0) as BooleanPrimaryContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public truthValue(): TruthValueContext {
		return this.getTypedRuleContext(TruthValueContext, 0) as TruthValueContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanTest;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanTest) {
	 		listener.enterBooleanTest(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanTest) {
	 		listener.exitBooleanTest(this);
		}
	}
}


export class TruthValueContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUE(): TerminalNode {
		return this.getToken(GqlParser.TRUE, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(GqlParser.FALSE, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(GqlParser.UNKNOWN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_truthValue;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTruthValue) {
	 		listener.enterTruthValue(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTruthValue) {
	 		listener.exitTruthValue(this);
		}
	}
}


export class BooleanPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public booleanPredicand(): BooleanPredicandContext {
		return this.getTypedRuleContext(BooleanPredicandContext, 0) as BooleanPredicandContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanPrimary) {
	 		listener.enterBooleanPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanPrimary) {
	 		listener.exitBooleanPrimary(this);
		}
	}
}


export class BooleanPredicandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public paranthisedBooleanValueExpr(): ParanthisedBooleanValueExprContext {
		return this.getTypedRuleContext(ParanthisedBooleanValueExprContext, 0) as ParanthisedBooleanValueExprContext;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanPredicand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanPredicand) {
	 		listener.enterBooleanPredicand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanPredicand) {
	 		listener.exitBooleanPredicand(this);
		}
	}
}


export class ParanthisedBooleanValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public booleanValueExpr(): BooleanValueExprContext {
		return this.getTypedRuleContext(BooleanValueExprContext, 0) as BooleanValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_paranthisedBooleanValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParanthisedBooleanValueExpr) {
	 		listener.enterParanthisedBooleanValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParanthisedBooleanValueExpr) {
	 		listener.exitParanthisedBooleanValueExpr(this);
		}
	}
}


export class NumericValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public term(): TermContext {
		return this.getTypedRuleContext(TermContext, 0) as TermContext;
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExpr) {
	 		listener.enterNumericValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExpr) {
	 		listener.exitNumericValueExpr(this);
		}
	}
}


export class TermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public factor(): FactorContext {
		return this.getTypedRuleContext(FactorContext, 0) as FactorContext;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public term(): TermContext {
		return this.getTypedRuleContext(TermContext, 0) as TermContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_term;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTerm) {
	 		listener.enterTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTerm) {
	 		listener.exitTerm(this);
		}
	}
}


export class FactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericPrimary(): NumericPrimaryContext {
		return this.getTypedRuleContext(NumericPrimaryContext, 0) as NumericPrimaryContext;
	}
	public SIGN(): TerminalNode {
		return this.getToken(GqlParser.SIGN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_factor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFactor) {
	 		listener.enterFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFactor) {
	 		listener.exitFactor(this);
		}
	}
}


export class NumericPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public numericValueFunction(): NumericValueFunctionContext {
		return this.getTypedRuleContext(NumericValueFunctionContext, 0) as NumericValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericPrimary) {
	 		listener.enterNumericPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericPrimary) {
	 		listener.exitNumericPrimary(this);
		}
	}
}


export class ValueExprPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parenthesizedValueExpr(): ParenthesizedValueExprContext {
		return this.getTypedRuleContext(ParenthesizedValueExprContext, 0) as ParenthesizedValueExprContext;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueExprPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueExprPrimary) {
	 		listener.enterValueExprPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueExprPrimary) {
	 		listener.exitValueExprPrimary(this);
		}
	}
}


export class ParenthesizedValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parenthesizedValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParenthesizedValueExpr) {
	 		listener.enterParenthesizedValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParenthesizedValueExpr) {
	 		listener.exitParenthesizedValueExpr(this);
		}
	}
}


export class NonParenthesizedValueExprPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonParenthesizedValueExprPrimarySpecialCase(): NonParenthesizedValueExprPrimarySpecialCaseContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimarySpecialCaseContext, 0) as NonParenthesizedValueExprPrimarySpecialCaseContext;
	}
	public bindingVarRef(): BindingVarRefContext {
		return this.getTypedRuleContext(BindingVarRefContext, 0) as BindingVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonParenthesizedValueExprPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonParenthesizedValueExprPrimary) {
	 		listener.enterNonParenthesizedValueExprPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonParenthesizedValueExprPrimary) {
	 		listener.exitNonParenthesizedValueExprPrimary(this);
		}
	}
}


export class NonParenthesizedValueExprPrimarySpecialCaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unsignedValueSpec(): UnsignedValueSpecContext {
		return this.getTypedRuleContext(UnsignedValueSpecContext, 0) as UnsignedValueSpecContext;
	}
	public aggregateFunction(): AggregateFunctionContext {
		return this.getTypedRuleContext(AggregateFunctionContext, 0) as AggregateFunctionContext;
	}
	public collectionValueConstructor(): CollectionValueConstructorContext {
		return this.getTypedRuleContext(CollectionValueConstructorContext, 0) as CollectionValueConstructorContext;
	}
	public valueQueryExpr(): ValueQueryExprContext {
		return this.getTypedRuleContext(ValueQueryExprContext, 0) as ValueQueryExprContext;
	}
	public caseExpr(): CaseExprContext {
		return this.getTypedRuleContext(CaseExprContext, 0) as CaseExprContext;
	}
	public letValueExpr(): LetValueExprContext {
		return this.getTypedRuleContext(LetValueExprContext, 0) as LetValueExprContext;
	}
	public castSpec(): CastSpecContext {
		return this.getTypedRuleContext(CastSpecContext, 0) as CastSpecContext;
	}
	public elementIdFunction(): ElementIdFunctionContext {
		return this.getTypedRuleContext(ElementIdFunctionContext, 0) as ElementIdFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonParenthesizedValueExprPrimarySpecialCase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonParenthesizedValueExprPrimarySpecialCase) {
	 		listener.enterNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonParenthesizedValueExprPrimarySpecialCase) {
	 		listener.exitNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}
}


export class CollectionValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueConstructor(): ListValueConstructorContext {
		return this.getTypedRuleContext(ListValueConstructorContext, 0) as ListValueConstructorContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
	public pathValueConstructor(): PathValueConstructorContext {
		return this.getTypedRuleContext(PathValueConstructorContext, 0) as PathValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_collectionValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCollectionValueConstructor) {
	 		listener.enterCollectionValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCollectionValueConstructor) {
	 		listener.exitCollectionValueConstructor(this);
		}
	}
}


export class NumericValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public lengthExpr(): LengthExprContext {
		return this.getTypedRuleContext(LengthExprContext, 0) as LengthExprContext;
	}
	public absoluteValueExpr(): AbsoluteValueExprContext {
		return this.getTypedRuleContext(AbsoluteValueExprContext, 0) as AbsoluteValueExprContext;
	}
	public modulusExpr(): ModulusExprContext {
		return this.getTypedRuleContext(ModulusExprContext, 0) as ModulusExprContext;
	}
	public trigonometricFunction(): TrigonometricFunctionContext {
		return this.getTypedRuleContext(TrigonometricFunctionContext, 0) as TrigonometricFunctionContext;
	}
	public logarithmFunction(): LogarithmFunctionContext {
		return this.getTypedRuleContext(LogarithmFunctionContext, 0) as LogarithmFunctionContext;
	}
	public exponentialFunction(): ExponentialFunctionContext {
		return this.getTypedRuleContext(ExponentialFunctionContext, 0) as ExponentialFunctionContext;
	}
	public powerFunction(): PowerFunctionContext {
		return this.getTypedRuleContext(PowerFunctionContext, 0) as PowerFunctionContext;
	}
	public squareRootFunciton(): SquareRootFuncitonContext {
		return this.getTypedRuleContext(SquareRootFuncitonContext, 0) as SquareRootFuncitonContext;
	}
	public floorFunction(): FloorFunctionContext {
		return this.getTypedRuleContext(FloorFunctionContext, 0) as FloorFunctionContext;
	}
	public ceilingFunction(): CeilingFunctionContext {
		return this.getTypedRuleContext(CeilingFunctionContext, 0) as CeilingFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueFunction) {
	 		listener.enterNumericValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueFunction) {
	 		listener.exitNumericValueFunction(this);
		}
	}
}


export class LengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charLengthExpr(): CharLengthExprContext {
		return this.getTypedRuleContext(CharLengthExprContext, 0) as CharLengthExprContext;
	}
	public byteLengthExpr(): ByteLengthExprContext {
		return this.getTypedRuleContext(ByteLengthExprContext, 0) as ByteLengthExprContext;
	}
	public pathLengthExpr(): PathLengthExprContext {
		return this.getTypedRuleContext(PathLengthExprContext, 0) as PathLengthExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_lengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLengthExpr) {
	 		listener.enterLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLengthExpr) {
	 		listener.exitLengthExpr(this);
		}
	}
}


export class CharLengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public CHAR_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHAR_LENGTH, 0);
	}
	public CHARACTER_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHARACTER_LENGTH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charLengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharLengthExpr) {
	 		listener.enterCharLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharLengthExpr) {
	 		listener.exitCharLengthExpr(this);
		}
	}
}


export class ByteLengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BYTE_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.BYTE_LENGTH, 0);
	}
	public OCTET_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.OCTET_LENGTH, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteLengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteLengthExpr) {
	 		listener.enterByteLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteLengthExpr) {
	 		listener.exitByteLengthExpr(this);
		}
	}
}


export class PathLengthExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.PATH_LENGTH, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathLengthExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathLengthExpr) {
	 		listener.enterPathLengthExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathLengthExpr) {
	 		listener.exitPathLengthExpr(this);
		}
	}
}


export class AbsoluteValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ABS(): TerminalNode {
		return this.getToken(GqlParser.ABS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_absoluteValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAbsoluteValueExpr) {
	 		listener.enterAbsoluteValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAbsoluteValueExpr) {
	 		listener.exitAbsoluteValueExpr(this);
		}
	}
}


export class ModulusExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MOD(): TerminalNode {
		return this.getToken(GqlParser.MOD, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExprDividen(): NumericValueExprDividenContext {
		return this.getTypedRuleContext(NumericValueExprDividenContext, 0) as NumericValueExprDividenContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public numericValueExprDivisor(): NumericValueExprDivisorContext {
		return this.getTypedRuleContext(NumericValueExprDivisorContext, 0) as NumericValueExprDivisorContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_modulusExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterModulusExpr) {
	 		listener.enterModulusExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitModulusExpr) {
	 		listener.exitModulusExpr(this);
		}
	}
}


export class NumericValueExprDividenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprDividen;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprDividen) {
	 		listener.enterNumericValueExprDividen(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprDividen) {
	 		listener.exitNumericValueExprDividen(this);
		}
	}
}


export class NumericValueExprDivisorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprDivisor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprDivisor) {
	 		listener.enterNumericValueExprDivisor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprDivisor) {
	 		listener.exitNumericValueExprDivisor(this);
		}
	}
}


export class TrigonometricFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public trigonometricFunctionName(): TrigonometricFunctionNameContext {
		return this.getTypedRuleContext(TrigonometricFunctionNameContext, 0) as TrigonometricFunctionNameContext;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trigonometricFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrigonometricFunction) {
	 		listener.enterTrigonometricFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrigonometricFunction) {
	 		listener.exitTrigonometricFunction(this);
		}
	}
}


export class TrigonometricFunctionNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIN(): TerminalNode {
		return this.getToken(GqlParser.SIN, 0);
	}
	public COS(): TerminalNode {
		return this.getToken(GqlParser.COS, 0);
	}
	public TAN(): TerminalNode {
		return this.getToken(GqlParser.TAN, 0);
	}
	public COT(): TerminalNode {
		return this.getToken(GqlParser.COT, 0);
	}
	public SINH(): TerminalNode {
		return this.getToken(GqlParser.SINH, 0);
	}
	public COSH(): TerminalNode {
		return this.getToken(GqlParser.COSH, 0);
	}
	public TANH(): TerminalNode {
		return this.getToken(GqlParser.TANH, 0);
	}
	public ASIN(): TerminalNode {
		return this.getToken(GqlParser.ASIN, 0);
	}
	public ACOS(): TerminalNode {
		return this.getToken(GqlParser.ACOS, 0);
	}
	public ATAN(): TerminalNode {
		return this.getToken(GqlParser.ATAN, 0);
	}
	public DEGREES(): TerminalNode {
		return this.getToken(GqlParser.DEGREES, 0);
	}
	public RADIANS(): TerminalNode {
		return this.getToken(GqlParser.RADIANS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trigonometricFunctionName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrigonometricFunctionName) {
	 		listener.enterTrigonometricFunctionName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrigonometricFunctionName) {
	 		listener.exitTrigonometricFunctionName(this);
		}
	}
}


export class LogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public generalLogarithmFunction(): GeneralLogarithmFunctionContext {
		return this.getTypedRuleContext(GeneralLogarithmFunctionContext, 0) as GeneralLogarithmFunctionContext;
	}
	public commonLogarithmFunction(): CommonLogarithmFunctionContext {
		return this.getTypedRuleContext(CommonLogarithmFunctionContext, 0) as CommonLogarithmFunctionContext;
	}
	public naturalLogarithmFunction(): NaturalLogarithmFunctionContext {
		return this.getTypedRuleContext(NaturalLogarithmFunctionContext, 0) as NaturalLogarithmFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_logarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLogarithmFunction) {
	 		listener.enterLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLogarithmFunction) {
	 		listener.exitLogarithmFunction(this);
		}
	}
}


export class GeneralLogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MOD(): TerminalNode {
		return this.getToken(GqlParser.MOD, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public generalLogarithmBase(): GeneralLogarithmBaseContext {
		return this.getTypedRuleContext(GeneralLogarithmBaseContext, 0) as GeneralLogarithmBaseContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public generalLogarithmArgument(): GeneralLogarithmArgumentContext {
		return this.getTypedRuleContext(GeneralLogarithmArgumentContext, 0) as GeneralLogarithmArgumentContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLogarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLogarithmFunction) {
	 		listener.enterGeneralLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLogarithmFunction) {
	 		listener.exitGeneralLogarithmFunction(this);
		}
	}
}


export class GeneralLogarithmBaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLogarithmBase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLogarithmBase) {
	 		listener.enterGeneralLogarithmBase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLogarithmBase) {
	 		listener.exitGeneralLogarithmBase(this);
		}
	}
}


export class GeneralLogarithmArgumentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLogarithmArgument;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLogarithmArgument) {
	 		listener.enterGeneralLogarithmArgument(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLogarithmArgument) {
	 		listener.exitGeneralLogarithmArgument(this);
		}
	}
}


export class CommonLogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOG10(): TerminalNode {
		return this.getToken(GqlParser.LOG10, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_commonLogarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCommonLogarithmFunction) {
	 		listener.enterCommonLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCommonLogarithmFunction) {
	 		listener.exitCommonLogarithmFunction(this);
		}
	}
}


export class NaturalLogarithmFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LN(): TerminalNode {
		return this.getToken(GqlParser.LN, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_naturalLogarithmFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNaturalLogarithmFunction) {
	 		listener.enterNaturalLogarithmFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNaturalLogarithmFunction) {
	 		listener.exitNaturalLogarithmFunction(this);
		}
	}
}


export class ExponentialFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXP(): TerminalNode {
		return this.getToken(GqlParser.EXP, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_exponentialFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterExponentialFunction) {
	 		listener.enterExponentialFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitExponentialFunction) {
	 		listener.exitExponentialFunction(this);
		}
	}
}


export class PowerFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public POWER(): TerminalNode {
		return this.getToken(GqlParser.POWER, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExprBase(): NumericValueExprBaseContext {
		return this.getTypedRuleContext(NumericValueExprBaseContext, 0) as NumericValueExprBaseContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public numericValueExprExponent(): NumericValueExprExponentContext {
		return this.getTypedRuleContext(NumericValueExprExponentContext, 0) as NumericValueExprExponentContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_powerFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPowerFunction) {
	 		listener.enterPowerFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPowerFunction) {
	 		listener.exitPowerFunction(this);
		}
	}
}


export class NumericValueExprBaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprBase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprBase) {
	 		listener.enterNumericValueExprBase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprBase) {
	 		listener.exitNumericValueExprBase(this);
		}
	}
}


export class NumericValueExprExponentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_numericValueExprExponent;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNumericValueExprExponent) {
	 		listener.enterNumericValueExprExponent(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNumericValueExprExponent) {
	 		listener.exitNumericValueExprExponent(this);
		}
	}
}


export class SquareRootFuncitonContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SQRT(): TerminalNode {
		return this.getToken(GqlParser.SQRT, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_squareRootFunciton;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSquareRootFunciton) {
	 		listener.enterSquareRootFunciton(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSquareRootFunciton) {
	 		listener.exitSquareRootFunciton(this);
		}
	}
}


export class FloorFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FLOOR(): TerminalNode {
		return this.getToken(GqlParser.FLOOR, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_floorFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFloorFunction) {
	 		listener.enterFloorFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFloorFunction) {
	 		listener.exitFloorFunction(this);
		}
	}
}


export class CeilingFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public CEIL(): TerminalNode {
		return this.getToken(GqlParser.CEIL, 0);
	}
	public CEILING(): TerminalNode {
		return this.getToken(GqlParser.CEILING, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_ceilingFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCeilingFunction) {
	 		listener.enterCeilingFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCeilingFunction) {
	 		listener.exitCeilingFunction(this);
		}
	}
}


export class StringValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_stringValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStringValueExpr) {
	 		listener.enterStringValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStringValueExpr) {
	 		listener.exitStringValueExpr(this);
		}
	}
}


export class CharStringValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringConcatenation(): CharStringConcatenationContext {
		return this.getTypedRuleContext(CharStringConcatenationContext, 0) as CharStringConcatenationContext;
	}
	public charStringFactor(): CharStringFactorContext {
		return this.getTypedRuleContext(CharStringFactorContext, 0) as CharStringFactorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringValueExpr) {
	 		listener.enterCharStringValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringValueExpr) {
	 		listener.exitCharStringValueExpr(this);
		}
	}
}


export class CharStringConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringFactor(): CharStringFactorContext {
		return this.getTypedRuleContext(CharStringFactorContext, 0) as CharStringFactorContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringConcatenation) {
	 		listener.enterCharStringConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringConcatenation) {
	 		listener.exitCharStringConcatenation(this);
		}
	}
}


export class CharStringFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringPrimary(): CharStringPrimaryContext {
		return this.getTypedRuleContext(CharStringPrimaryContext, 0) as CharStringPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringFactor) {
	 		listener.enterCharStringFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringFactor) {
	 		listener.exitCharStringFactor(this);
		}
	}
}


export class CharStringPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public stringValueFunction(): StringValueFunctionContext {
		return this.getTypedRuleContext(StringValueFunctionContext, 0) as StringValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringPrimary) {
	 		listener.enterCharStringPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringPrimary) {
	 		listener.exitCharStringPrimary(this);
		}
	}
}


export class ByteStringValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringConcatenation(): ByteStringConcatenationContext {
		return this.getTypedRuleContext(ByteStringConcatenationContext, 0) as ByteStringConcatenationContext;
	}
	public byteStringFactor(): ByteStringFactorContext {
		return this.getTypedRuleContext(ByteStringFactorContext, 0) as ByteStringFactorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringValueExpr) {
	 		listener.enterByteStringValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringValueExpr) {
	 		listener.exitByteStringValueExpr(this);
		}
	}
}


export class ByteStringFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringPrimary(): ByteStringPrimaryContext {
		return this.getTypedRuleContext(ByteStringPrimaryContext, 0) as ByteStringPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringFactor) {
	 		listener.enterByteStringFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringFactor) {
	 		listener.exitByteStringFactor(this);
		}
	}
}


export class ByteStringPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public stringValueFunction(): StringValueFunctionContext {
		return this.getTypedRuleContext(StringValueFunctionContext, 0) as StringValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringPrimary) {
	 		listener.enterByteStringPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringPrimary) {
	 		listener.exitByteStringPrimary(this);
		}
	}
}


export class ByteStringConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringFactor(): ByteStringFactorContext {
		return this.getTypedRuleContext(ByteStringFactorContext, 0) as ByteStringFactorContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringConcatenation) {
	 		listener.enterByteStringConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringConcatenation) {
	 		listener.exitByteStringConcatenation(this);
		}
	}
}


export class StringValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringFunction(): CharStringFunctionContext {
		return this.getTypedRuleContext(CharStringFunctionContext, 0) as CharStringFunctionContext;
	}
	public byteStringFunction(): ByteStringFunctionContext {
		return this.getTypedRuleContext(ByteStringFunctionContext, 0) as ByteStringFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_stringValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStringValueFunction) {
	 		listener.enterStringValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStringValueFunction) {
	 		listener.exitStringValueFunction(this);
		}
	}
}


export class CharStringFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public foldFunction(): FoldFunctionContext {
		return this.getTypedRuleContext(FoldFunctionContext, 0) as FoldFunctionContext;
	}
	public trimFunction(): TrimFunctionContext {
		return this.getTypedRuleContext(TrimFunctionContext, 0) as TrimFunctionContext;
	}
	public normalizeFunction(): NormalizeFunctionContext {
		return this.getTypedRuleContext(NormalizeFunctionContext, 0) as NormalizeFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_charStringFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharStringFunction) {
	 		listener.enterCharStringFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharStringFunction) {
	 		listener.exitCharStringFunction(this);
		}
	}
}


export class FoldFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public UPPER(): TerminalNode {
		return this.getToken(GqlParser.UPPER, 0);
	}
	public LOWER(): TerminalNode {
		return this.getToken(GqlParser.LOWER, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_foldFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFoldFunction) {
	 		listener.enterFoldFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFoldFunction) {
	 		listener.exitFoldFunction(this);
		}
	}
}


export class TrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleCharTrimFunction(): SingleCharTrimFunctionContext {
		return this.getTypedRuleContext(SingleCharTrimFunctionContext, 0) as SingleCharTrimFunctionContext;
	}
	public multiCharTrimFunction(): MultiCharTrimFunctionContext {
		return this.getTypedRuleContext(MultiCharTrimFunctionContext, 0) as MultiCharTrimFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimFunction) {
	 		listener.enterTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimFunction) {
	 		listener.exitTrimFunction(this);
		}
	}
}


export class SingleCharTrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public trimOperands(): TrimOperandsContext {
		return this.getTypedRuleContext(TrimOperandsContext, 0) as TrimOperandsContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_singleCharTrimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSingleCharTrimFunction) {
	 		listener.enterSingleCharTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSingleCharTrimFunction) {
	 		listener.exitSingleCharTrimFunction(this);
		}
	}
}


export class MultiCharTrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public trimSource(): TrimSourceContext {
		return this.getTypedRuleContext(TrimSourceContext, 0) as TrimSourceContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public BTRIM(): TerminalNode {
		return this.getToken(GqlParser.BTRIM, 0);
	}
	public LTRIM(): TerminalNode {
		return this.getToken(GqlParser.LTRIM, 0);
	}
	public RTRIM(): TerminalNode {
		return this.getToken(GqlParser.RTRIM, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public trimCharString(): TrimCharStringContext {
		return this.getTypedRuleContext(TrimCharStringContext, 0) as TrimCharStringContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_multiCharTrimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterMultiCharTrimFunction) {
	 		listener.enterMultiCharTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitMultiCharTrimFunction) {
	 		listener.exitMultiCharTrimFunction(this);
		}
	}
}


export class TrimOperandsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public trimSource(): TrimSourceContext {
		return this.getTypedRuleContext(TrimSourceContext, 0) as TrimSourceContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public trimSpec(): TrimSpecContext {
		return this.getTypedRuleContext(TrimSpecContext, 0) as TrimSpecContext;
	}
	public trimCharString(): TrimCharStringContext {
		return this.getTypedRuleContext(TrimCharStringContext, 0) as TrimCharStringContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimOperands;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimOperands) {
	 		listener.enterTrimOperands(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimOperands) {
	 		listener.exitTrimOperands(this);
		}
	}
}


export class TrimSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimSource) {
	 		listener.enterTrimSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimSource) {
	 		listener.exitTrimSource(this);
		}
	}
}


export class TrimSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEADING(): TerminalNode {
		return this.getToken(GqlParser.LEADING, 0);
	}
	public TRAILING(): TerminalNode {
		return this.getToken(GqlParser.TRAILING, 0);
	}
	public BOTH(): TerminalNode {
		return this.getToken(GqlParser.BOTH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimSpec) {
	 		listener.enterTrimSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimSpec) {
	 		listener.exitTrimSpec(this);
		}
	}
}


export class TrimCharStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimCharString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimCharString) {
	 		listener.enterTrimCharString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimCharString) {
	 		listener.exitTrimCharString(this);
		}
	}
}


export class NormalizeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NORMALIZE(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZE, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public charStringValueExpr(): CharStringValueExprContext {
		return this.getTypedRuleContext(CharStringValueExprContext, 0) as CharStringValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public normalForm(): NormalFormContext {
		return this.getTypedRuleContext(NormalFormContext, 0) as NormalFormContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalizeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalizeFunction) {
	 		listener.enterNormalizeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalizeFunction) {
	 		listener.exitNormalizeFunction(this);
		}
	}
}


export class NormalFormContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NFC(): TerminalNode {
		return this.getToken(GqlParser.NFC, 0);
	}
	public NFD(): TerminalNode {
		return this.getToken(GqlParser.NFD, 0);
	}
	public NFKC(): TerminalNode {
		return this.getToken(GqlParser.NFKC, 0);
	}
	public NFKD(): TerminalNode {
		return this.getToken(GqlParser.NFKD, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_normalForm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNormalForm) {
	 		listener.enterNormalForm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNormalForm) {
	 		listener.exitNormalForm(this);
		}
	}
}


export class ByteStringFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStrinTrimFunction(): ByteStrinTrimFunctionContext {
		return this.getTypedRuleContext(ByteStrinTrimFunctionContext, 0) as ByteStrinTrimFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringFunction) {
	 		listener.enterByteStringFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringFunction) {
	 		listener.exitByteStringFunction(this);
		}
	}
}


export class ByteStrinTrimFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public byteStringTrimOperands(): ByteStringTrimOperandsContext {
		return this.getTypedRuleContext(ByteStringTrimOperandsContext, 0) as ByteStringTrimOperandsContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStrinTrimFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStrinTrimFunction) {
	 		listener.enterByteStrinTrimFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStrinTrimFunction) {
	 		listener.exitByteStrinTrimFunction(this);
		}
	}
}


export class ByteStringTrimOperandsContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringTrimSource(): ByteStringTrimSourceContext {
		return this.getTypedRuleContext(ByteStringTrimSourceContext, 0) as ByteStringTrimSourceContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public trimSpec(): TrimSpecContext {
		return this.getTypedRuleContext(TrimSpecContext, 0) as TrimSpecContext;
	}
	public trimByteString(): TrimByteStringContext {
		return this.getTypedRuleContext(TrimByteStringContext, 0) as TrimByteStringContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringTrimOperands;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringTrimOperands) {
	 		listener.enterByteStringTrimOperands(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringTrimOperands) {
	 		listener.exitByteStringTrimOperands(this);
		}
	}
}


export class ByteStringTrimSourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_byteStringTrimSource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterByteStringTrimSource) {
	 		listener.enterByteStringTrimSource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitByteStringTrimSource) {
	 		listener.exitByteStringTrimSource(this);
		}
	}
}


export class TrimByteStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public byteStringValueExpr(): ByteStringValueExprContext {
		return this.getTypedRuleContext(ByteStringValueExprContext, 0) as ByteStringValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimByteString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimByteString) {
	 		listener.enterTrimByteString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimByteString) {
	 		listener.exitTrimByteString(this);
		}
	}
}


export class StringLengthContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_stringLength;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterStringLength) {
	 		listener.enterStringLength(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitStringLength) {
	 		listener.exitStringLength(this);
		}
	}
}


export class DateTimeValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeTerm(): DateTimeTermContext {
		return this.getTypedRuleContext(DateTimeTermContext, 0) as DateTimeTermContext;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueExpr) {
	 		listener.enterDateTimeValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueExpr) {
	 		listener.exitDateTimeValueExpr(this);
		}
	}
}


export class DateTimeTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeFactor(): DateTimeFactorContext {
		return this.getTypedRuleContext(DateTimeFactorContext, 0) as DateTimeFactorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeTerm) {
	 		listener.enterDateTimeTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeTerm) {
	 		listener.exitDateTimeTerm(this);
		}
	}
}


export class DateTimeFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimePrimary(): DateTimePrimaryContext {
		return this.getTypedRuleContext(DateTimePrimaryContext, 0) as DateTimePrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeFactor) {
	 		listener.enterDateTimeFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeFactor) {
	 		listener.exitDateTimeFactor(this);
		}
	}
}


export class DateTimePrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public dateTimeValueFunction(): DateTimeValueFunctionContext {
		return this.getTypedRuleContext(DateTimeValueFunctionContext, 0) as DateTimeValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimePrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimePrimary) {
	 		listener.enterDateTimePrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimePrimary) {
	 		listener.exitDateTimePrimary(this);
		}
	}
}


export class DateTimeValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateFunction(): DateFunctionContext {
		return this.getTypedRuleContext(DateFunctionContext, 0) as DateFunctionContext;
	}
	public timeFunction(): TimeFunctionContext {
		return this.getTypedRuleContext(TimeFunctionContext, 0) as TimeFunctionContext;
	}
	public dateTimeFunction(): DateTimeFunctionContext {
		return this.getTypedRuleContext(DateTimeFunctionContext, 0) as DateTimeFunctionContext;
	}
	public localTimeFunction(): LocalTimeFunctionContext {
		return this.getTypedRuleContext(LocalTimeFunctionContext, 0) as LocalTimeFunctionContext;
	}
	public localDatetimeFunction(): LocalDatetimeFunctionContext {
		return this.getTypedRuleContext(LocalDatetimeFunctionContext, 0) as LocalDatetimeFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueFunction) {
	 		listener.enterDateTimeValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueFunction) {
	 		listener.exitDateTimeValueFunction(this);
		}
	}
}


export class DateFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_DATE(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_DATE, 0);
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public dateFunctionParameters(): DateFunctionParametersContext {
		return this.getTypedRuleContext(DateFunctionParametersContext, 0) as DateFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateFunction) {
	 		listener.enterDateFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateFunction) {
	 		listener.exitDateFunction(this);
		}
	}
}


export class TimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_TIME(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIME, 0);
	}
	public ZONED_TIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_TIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public timeFunctionParameters(): TimeFunctionParametersContext {
		return this.getTypedRuleContext(TimeFunctionParametersContext, 0) as TimeFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeFunction) {
	 		listener.enterTimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeFunction) {
	 		listener.exitTimeFunction(this);
		}
	}
}


export class LocalTimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_TIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public timeFunctionParameters(): TimeFunctionParametersContext {
		return this.getTypedRuleContext(TimeFunctionParametersContext, 0) as TimeFunctionParametersContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localTimeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalTimeFunction) {
	 		listener.enterLocalTimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalTimeFunction) {
	 		listener.exitLocalTimeFunction(this);
		}
	}
}


export class DateTimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIMESTAMP, 0);
	}
	public ZONED_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_DATETIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public dateTimeFunctionParameters(): DateTimeFunctionParametersContext {
		return this.getTypedRuleContext(DateTimeFunctionParametersContext, 0) as DateTimeFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeFunction) {
	 		listener.enterDateTimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeFunction) {
	 		listener.exitDateTimeFunction(this);
		}
	}
}


export class LocalDatetimeFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIMESTAMP, 0);
	}
	public LOCAL_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_DATETIME, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public dateTimeFunctionParameters(): DateTimeFunctionParametersContext {
		return this.getTypedRuleContext(DateTimeFunctionParametersContext, 0) as DateTimeFunctionParametersContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_localDatetimeFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLocalDatetimeFunction) {
	 		listener.enterLocalDatetimeFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLocalDatetimeFunction) {
	 		listener.exitLocalDatetimeFunction(this);
		}
	}
}


export class DateFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateString(): DateStringContext {
		return this.getTypedRuleContext(DateStringContext, 0) as DateStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateFunctionParameters) {
	 		listener.enterDateFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateFunctionParameters) {
	 		listener.exitDateFunctionParameters(this);
		}
	}
}


export class TimeFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public timeString(): TimeStringContext {
		return this.getTypedRuleContext(TimeStringContext, 0) as TimeStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeFunctionParameters) {
	 		listener.enterTimeFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeFunctionParameters) {
	 		listener.exitTimeFunctionParameters(this);
		}
	}
}


export class DateTimeFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeString(): DateTimeStringContext {
		return this.getTypedRuleContext(DateTimeStringContext, 0) as DateTimeStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeFunctionParameters) {
	 		listener.enterDateTimeFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeFunctionParameters) {
	 		listener.exitDateTimeFunctionParameters(this);
		}
	}
}


export class DurationValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
	public dateTimeSubtraction(): DateTimeSubtractionContext {
		return this.getTypedRuleContext(DateTimeSubtractionContext, 0) as DateTimeSubtractionContext;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public PLUS(): TerminalNode {
		return this.getToken(GqlParser.PLUS, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public MINUS(): TerminalNode {
		return this.getToken(GqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationValueExpr) {
	 		listener.enterDurationValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationValueExpr) {
	 		listener.exitDurationValueExpr(this);
		}
	}
}


export class DateTimeSubtractionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION_BETWEEN(): TerminalNode {
		return this.getToken(GqlParser.DURATION_BETWEEN, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public dateTimeSubtractionParameters(): DateTimeSubtractionParametersContext {
		return this.getTypedRuleContext(DateTimeSubtractionParametersContext, 0) as DateTimeSubtractionParametersContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeSubtraction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeSubtraction) {
	 		listener.enterDateTimeSubtraction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeSubtraction) {
	 		listener.exitDateTimeSubtraction(this);
		}
	}
}


export class DateTimeSubtractionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeValueExpr_list(): DateTimeValueExprContext[] {
		return this.getTypedRuleContexts(DateTimeValueExprContext) as DateTimeValueExprContext[];
	}
	public dateTimeValueExpr(i: number): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, i) as DateTimeValueExprContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeSubtractionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeSubtractionParameters) {
	 		listener.enterDateTimeSubtractionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeSubtractionParameters) {
	 		listener.exitDateTimeSubtractionParameters(this);
		}
	}
}


export class DurationTermContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationFactor(): DurationFactorContext {
		return this.getTypedRuleContext(DurationFactorContext, 0) as DurationFactorContext;
	}
	public term(): TermContext {
		return this.getTypedRuleContext(TermContext, 0) as TermContext;
	}
	public ASTERISK(): TerminalNode {
		return this.getToken(GqlParser.ASTERISK, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
	public factor(): FactorContext {
		return this.getTypedRuleContext(FactorContext, 0) as FactorContext;
	}
	public SOLIDUS(): TerminalNode {
		return this.getToken(GqlParser.SOLIDUS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationTerm;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationTerm) {
	 		listener.enterDurationTerm(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationTerm) {
	 		listener.exitDurationTerm(this);
		}
	}
}


export class DurationFactorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationPrimary(): DurationPrimaryContext {
		return this.getTypedRuleContext(DurationPrimaryContext, 0) as DurationPrimaryContext;
	}
	public SIGN(): TerminalNode {
		return this.getToken(GqlParser.SIGN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationFactor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationFactor) {
	 		listener.enterDurationFactor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationFactor) {
	 		listener.exitDurationFactor(this);
		}
	}
}


export class DurationPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
	public durationValueFunction(): DurationValueFunctionContext {
		return this.getTypedRuleContext(DurationValueFunctionContext, 0) as DurationValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationPrimary) {
	 		listener.enterDurationPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationPrimary) {
	 		listener.exitDurationPrimary(this);
		}
	}
}


export class DurationValueExpr1Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationValueExpr1;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationValueExpr1) {
	 		listener.enterDurationValueExpr1(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationValueExpr1) {
	 		listener.exitDurationValueExpr1(this);
		}
	}
}


export class DurationTerm1Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationTerm1;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationTerm1) {
	 		listener.enterDurationTerm1(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationTerm1) {
	 		listener.exitDurationTerm1(this);
		}
	}
}


export class DurationTerm2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationTerm(): DurationTermContext {
		return this.getTypedRuleContext(DurationTermContext, 0) as DurationTermContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationTerm2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationTerm2) {
	 		listener.enterDurationTerm2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationTerm2) {
	 		listener.exitDurationTerm2(this);
		}
	}
}


export class DateTimeValueExpr1Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueExpr1;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueExpr1) {
	 		listener.enterDateTimeValueExpr1(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueExpr1) {
	 		listener.exitDateTimeValueExpr1(this);
		}
	}
}


export class DateTimeValueExpr2Context extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateTimeValueExpr(): DateTimeValueExprContext {
		return this.getTypedRuleContext(DateTimeValueExprContext, 0) as DateTimeValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeValueExpr2;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeValueExpr2) {
	 		listener.enterDateTimeValueExpr2(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeValueExpr2) {
	 		listener.exitDateTimeValueExpr2(this);
		}
	}
}


export class DurationValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationFunction(): DurationFunctionContext {
		return this.getTypedRuleContext(DurationFunctionContext, 0) as DurationFunctionContext;
	}
	public durationAbsoluteValueFunction(): DurationAbsoluteValueFunctionContext {
		return this.getTypedRuleContext(DurationAbsoluteValueFunctionContext, 0) as DurationAbsoluteValueFunctionContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationValueFunction) {
	 		listener.enterDurationValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationValueFunction) {
	 		listener.exitDurationValueFunction(this);
		}
	}
}


export class DurationFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public durationFunctionParameters(): DurationFunctionParametersContext {
		return this.getTypedRuleContext(DurationFunctionParametersContext, 0) as DurationFunctionParametersContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationFunction) {
	 		listener.enterDurationFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationFunction) {
	 		listener.exitDurationFunction(this);
		}
	}
}


export class DurationFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public durationString(): DurationStringContext {
		return this.getTypedRuleContext(DurationStringContext, 0) as DurationStringContext;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationFunctionParameters;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationFunctionParameters) {
	 		listener.enterDurationFunctionParameters(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationFunctionParameters) {
	 		listener.exitDurationFunctionParameters(this);
		}
	}
}


export class DurationAbsoluteValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ABS(): TerminalNode {
		return this.getToken(GqlParser.ABS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public durationValueExpr(): DurationValueExprContext {
		return this.getTypedRuleContext(DurationValueExprContext, 0) as DurationValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationAbsoluteValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationAbsoluteValueFunction) {
	 		listener.enterDurationAbsoluteValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationAbsoluteValueFunction) {
	 		listener.exitDurationAbsoluteValueFunction(this);
		}
	}
}


export class ListValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listConcatenation(): ListConcatenationContext {
		return this.getTypedRuleContext(ListConcatenationContext, 0) as ListConcatenationContext;
	}
	public listPrimary(): ListPrimaryContext {
		return this.getTypedRuleContext(ListPrimaryContext, 0) as ListPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueExpr) {
	 		listener.enterListValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueExpr) {
	 		listener.exitListValueExpr(this);
		}
	}
}


export class ListConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listPrimary(): ListPrimaryContext {
		return this.getTypedRuleContext(ListPrimaryContext, 0) as ListPrimaryContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListConcatenation) {
	 		listener.enterListConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListConcatenation) {
	 		listener.exitListConcatenation(this);
		}
	}
}


export class ListPrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueFunction(): ListValueFunctionContext {
		return this.getTypedRuleContext(ListValueFunctionContext, 0) as ListValueFunctionContext;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listPrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListPrimary) {
	 		listener.enterListPrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListPrimary) {
	 		listener.exitListPrimary(this);
		}
	}
}


export class ListValueFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public trimListFunction(): TrimListFunctionContext {
		return this.getTypedRuleContext(TrimListFunctionContext, 0) as TrimListFunctionContext;
	}
	public elementsFunction(): ElementsFunctionContext {
		return this.getTypedRuleContext(ElementsFunctionContext, 0) as ElementsFunctionContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueFunction) {
	 		listener.enterListValueFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueFunction) {
	 		listener.exitListValueFunction(this);
		}
	}
}


export class TrimListFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public listValueExpr(): ListValueExprContext {
		return this.getTypedRuleContext(ListValueExprContext, 0) as ListValueExprContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(GqlParser.COMMA, 0);
	}
	public numericValueExpr(): NumericValueExprContext {
		return this.getTypedRuleContext(NumericValueExprContext, 0) as NumericValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_trimListFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTrimListFunction) {
	 		listener.enterTrimListFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTrimListFunction) {
	 		listener.exitTrimListFunction(this);
		}
	}
}


export class ElementsFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELEMENTS(): TerminalNode {
		return this.getToken(GqlParser.ELEMENTS, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementsFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementsFunction) {
	 		listener.enterElementsFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementsFunction) {
	 		listener.exitElementsFunction(this);
		}
	}
}


export class ListValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
		return this.getTypedRuleContext(ListValueConstructorByEnumerationContext, 0) as ListValueConstructorByEnumerationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueConstructor) {
	 		listener.enterListValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueConstructor) {
	 		listener.exitListValueConstructor(this);
		}
	}
}


export class ListValueConstructorByEnumerationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.LEFT_BRACKET);
	}
	public LEFT_BRACKET(i: number): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACKET, i);
	}
	public listValueTypeName(): ListValueTypeNameContext {
		return this.getTypedRuleContext(ListValueTypeNameContext, 0) as ListValueTypeNameContext;
	}
	public RIGHT_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.RIGHT_BRACKET);
	}
	public RIGHT_BRACKET(i: number): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET, i);
	}
	public listElementList(): ListElementListContext {
		return this.getTypedRuleContext(ListElementListContext, 0) as ListElementListContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listValueConstructorByEnumeration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListValueConstructorByEnumeration) {
	 		listener.enterListValueConstructorByEnumeration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListValueConstructorByEnumeration) {
	 		listener.exitListValueConstructorByEnumeration(this);
		}
	}
}


export class ListElementListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listElement_list(): ListElementContext[] {
		return this.getTypedRuleContexts(ListElementContext) as ListElementContext[];
	}
	public listElement(i: number): ListElementContext {
		return this.getTypedRuleContext(ListElementContext, i) as ListElementContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listElementList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListElementList) {
	 		listener.enterListElementList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListElementList) {
	 		listener.exitListElementList(this);
		}
	}
}


export class ListElementContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listElement;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListElement) {
	 		listener.enterListElement(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListElement) {
	 		listener.exitListElement(this);
		}
	}
}


export class RecordValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldsSpec(): FieldsSpecContext {
		return this.getTypedRuleContext(FieldsSpecContext, 0) as FieldsSpecContext;
	}
	public RECORD(): TerminalNode {
		return this.getToken(GqlParser.RECORD, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordValueConstructor) {
	 		listener.enterRecordValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordValueConstructor) {
	 		listener.exitRecordValueConstructor(this);
		}
	}
}


export class FieldsSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEFT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_BRACE, 0);
	}
	public RIGHT_BRACE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public fieldList(): FieldListContext {
		return this.getTypedRuleContext(FieldListContext, 0) as FieldListContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldsSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldsSpec) {
	 		listener.enterFieldsSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldsSpec) {
	 		listener.exitFieldsSpec(this);
		}
	}
}


export class FieldListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public field_list(): FieldContext[] {
		return this.getTypedRuleContexts(FieldContext) as FieldContext[];
	}
	public field(i: number): FieldContext {
		return this.getTypedRuleContext(FieldContext, i) as FieldContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldList) {
	 		listener.enterFieldList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldList) {
	 		listener.exitFieldList(this);
		}
	}
}


export class FieldContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldName(): FieldNameContext {
		return this.getTypedRuleContext(FieldNameContext, 0) as FieldNameContext;
	}
	public COLON(): TerminalNode {
		return this.getToken(GqlParser.COLON, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_field;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterField) {
	 		listener.enterField(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitField) {
	 		listener.exitField(this);
		}
	}
}


export class PathValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathValueConcatenation(): PathValueConcatenationContext {
		return this.getTypedRuleContext(PathValueConcatenationContext, 0) as PathValueConcatenationContext;
	}
	public pathValuePrimary(): PathValuePrimaryContext {
		return this.getTypedRuleContext(PathValuePrimaryContext, 0) as PathValuePrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueExpr) {
	 		listener.enterPathValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueExpr) {
	 		listener.exitPathValueExpr(this);
		}
	}
}


export class PathValueConcatenationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathValuePrimary(): PathValuePrimaryContext {
		return this.getTypedRuleContext(PathValuePrimaryContext, 0) as PathValuePrimaryContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public pathValueExpr(): PathValueExprContext {
		return this.getTypedRuleContext(PathValueExprContext, 0) as PathValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueConcatenation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueConcatenation) {
	 		listener.enterPathValueConcatenation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueConcatenation) {
	 		listener.exitPathValueConcatenation(this);
		}
	}
}


export class PathValuePrimaryContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExprPrimary(): ValueExprPrimaryContext {
		return this.getTypedRuleContext(ValueExprPrimaryContext, 0) as ValueExprPrimaryContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValuePrimary;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValuePrimary) {
	 		listener.enterPathValuePrimary(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValuePrimary) {
	 		listener.exitPathValuePrimary(this);
		}
	}
}


export class PathValueConstructorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathValueConstructorByEnumeration(): PathValueConstructorByEnumerationContext {
		return this.getTypedRuleContext(PathValueConstructorByEnumerationContext, 0) as PathValueConstructorByEnumerationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueConstructor;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueConstructor) {
	 		listener.enterPathValueConstructor(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueConstructor) {
	 		listener.exitPathValueConstructor(this);
		}
	}
}


export class PathValueConstructorByEnumerationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public pathElementList(): PathElementListContext {
		return this.getTypedRuleContext(PathElementListContext, 0) as PathElementListContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathValueConstructorByEnumeration;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathValueConstructorByEnumeration) {
	 		listener.enterPathValueConstructorByEnumeration(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathValueConstructorByEnumeration) {
	 		listener.exitPathValueConstructorByEnumeration(this);
		}
	}
}


export class PathElementListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathElementListStart(): PathElementListStartContext {
		return this.getTypedRuleContext(PathElementListStartContext, 0) as PathElementListStartContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public pathElementListStep(): PathElementListStepContext {
		return this.getTypedRuleContext(PathElementListStepContext, 0) as PathElementListStepContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathElementList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathElementList) {
	 		listener.enterPathElementList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathElementList) {
	 		listener.exitPathElementList(this);
		}
	}
}


export class PathElementListStartContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathElementListStart;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathElementListStart) {
	 		listener.enterPathElementListStart(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathElementListStart) {
	 		listener.exitPathElementListStart(this);
		}
	}
}


export class PathElementListStepContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		return this.getTypedRuleContext(EdgeRefValueExprContext, 0) as EdgeRefValueExprContext;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathElementListStep;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathElementListStep) {
	 		listener.enterPathElementListStep(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathElementListStep) {
	 		listener.exitPathElementListStep(this);
		}
	}
}


export class PropertyRefContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public propertySource(): PropertySourceContext {
		return this.getTypedRuleContext(PropertySourceContext, 0) as PropertySourceContext;
	}
	public PERIOD(): TerminalNode {
		return this.getToken(GqlParser.PERIOD, 0);
	}
	public propertyName(): PropertyNameContext {
		return this.getTypedRuleContext(PropertyNameContext, 0) as PropertyNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyRef;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyRef) {
	 		listener.enterPropertyRef(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyRef) {
	 		listener.exitPropertyRef(this);
		}
	}
}


export class PropertySourceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nodeRefValueExpr(): NodeRefValueExprContext {
		return this.getTypedRuleContext(NodeRefValueExprContext, 0) as NodeRefValueExprContext;
	}
	public edgeRefValueExpr(): EdgeRefValueExprContext {
		return this.getTypedRuleContext(EdgeRefValueExprContext, 0) as EdgeRefValueExprContext;
	}
	public recordValueExpr(): RecordValueExprContext {
		return this.getTypedRuleContext(RecordValueExprContext, 0) as RecordValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertySource;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertySource) {
	 		listener.enterPropertySource(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertySource) {
	 		listener.exitPropertySource(this);
		}
	}
}


export class ValueQueryExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public nestedQuerySpec(): NestedQuerySpecContext {
		return this.getTypedRuleContext(NestedQuerySpecContext, 0) as NestedQuerySpecContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueQueryExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueQueryExpr) {
	 		listener.enterValueQueryExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueQueryExpr) {
	 		listener.exitValueQueryExpr(this);
		}
	}
}


export class CaseExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public caseAbbreviation(): CaseAbbreviationContext {
		return this.getTypedRuleContext(CaseAbbreviationContext, 0) as CaseAbbreviationContext;
	}
	public caseSpecification(): CaseSpecificationContext {
		return this.getTypedRuleContext(CaseSpecificationContext, 0) as CaseSpecificationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseExpr) {
	 		listener.enterCaseExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseExpr) {
	 		listener.exitCaseExpr(this);
		}
	}
}


export class CaseAbbreviationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULLIF(): TerminalNode {
		return this.getToken(GqlParser.NULLIF, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public valueExpr_list(): ValueExprContext[] {
		return this.getTypedRuleContexts(ValueExprContext) as ValueExprContext[];
	}
	public valueExpr(i: number): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, i) as ValueExprContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public COALESCE(): TerminalNode {
		return this.getToken(GqlParser.COALESCE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseAbbreviation;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseAbbreviation) {
	 		listener.enterCaseAbbreviation(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseAbbreviation) {
	 		listener.exitCaseAbbreviation(this);
		}
	}
}


export class CaseSpecificationContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleCase(): SimpleCaseContext {
		return this.getTypedRuleContext(SimpleCaseContext, 0) as SimpleCaseContext;
	}
	public searchedCase(): SearchedCaseContext {
		return this.getTypedRuleContext(SearchedCaseContext, 0) as SearchedCaseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseSpecification;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseSpecification) {
	 		listener.enterCaseSpecification(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseSpecification) {
	 		listener.exitCaseSpecification(this);
		}
	}
}


export class SimpleCaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CASE(): TerminalNode {
		return this.getToken(GqlParser.CASE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public caseOperand(): CaseOperandContext {
		return this.getTypedRuleContext(CaseOperandContext, 0) as CaseOperandContext;
	}
	public simpleWhenClause(): SimpleWhenClauseContext {
		return this.getTypedRuleContext(SimpleWhenClauseContext, 0) as SimpleWhenClauseContext;
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
	public elseClause(): ElseClauseContext {
		return this.getTypedRuleContext(ElseClauseContext, 0) as ElseClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleCase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleCase) {
	 		listener.enterSimpleCase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleCase) {
	 		listener.exitSimpleCase(this);
		}
	}
}


export class SearchedCaseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CASE(): TerminalNode {
		return this.getToken(GqlParser.CASE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public searchedWhenClause(): SearchedWhenClauseContext {
		return this.getTypedRuleContext(SearchedWhenClauseContext, 0) as SearchedWhenClauseContext;
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
	public elseClause(): ElseClauseContext {
		return this.getTypedRuleContext(ElseClauseContext, 0) as ElseClauseContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_searchedCase;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSearchedCase) {
	 		listener.enterSearchedCase(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSearchedCase) {
	 		listener.exitSearchedCase(this);
		}
	}
}


export class SimpleWhenClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHEN(): TerminalNode {
		return this.getToken(GqlParser.WHEN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public whenOperandList(): WhenOperandListContext {
		return this.getTypedRuleContext(WhenOperandListContext, 0) as WhenOperandListContext;
	}
	public THEN(): TerminalNode {
		return this.getToken(GqlParser.THEN, 0);
	}
	public result(): ResultContext {
		return this.getTypedRuleContext(ResultContext, 0) as ResultContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_simpleWhenClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSimpleWhenClause) {
	 		listener.enterSimpleWhenClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSimpleWhenClause) {
	 		listener.exitSimpleWhenClause(this);
		}
	}
}


export class SearchedWhenClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHEN(): TerminalNode {
		return this.getToken(GqlParser.WHEN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
	public THEN(): TerminalNode {
		return this.getToken(GqlParser.THEN, 0);
	}
	public result(): ResultContext {
		return this.getTypedRuleContext(ResultContext, 0) as ResultContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_searchedWhenClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSearchedWhenClause) {
	 		listener.enterSearchedWhenClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSearchedWhenClause) {
	 		listener.exitSearchedWhenClause(this);
		}
	}
}


export class ElseClauseContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELSE(): TerminalNode {
		return this.getToken(GqlParser.ELSE, 0);
	}
	public result(): ResultContext {
		return this.getTypedRuleContext(ResultContext, 0) as ResultContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elseClause;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElseClause) {
	 		listener.enterElseClause(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElseClause) {
	 		listener.exitElseClause(this);
		}
	}
}


export class CaseOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_caseOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCaseOperand) {
	 		listener.enterCaseOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCaseOperand) {
	 		listener.exitCaseOperand(this);
		}
	}
}


export class WhenOperandListContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public whenOperand_list(): WhenOperandContext[] {
		return this.getTypedRuleContexts(WhenOperandContext) as WhenOperandContext[];
	}
	public whenOperand(i: number): WhenOperandContext {
		return this.getTypedRuleContext(WhenOperandContext, i) as WhenOperandContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(GqlParser.COMMA, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_whenOperandList;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWhenOperandList) {
	 		listener.enterWhenOperandList(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWhenOperandList) {
	 		listener.exitWhenOperandList(this);
		}
	}
}


export class WhenOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonParenthesizedValueExprPrimary(): NonParenthesizedValueExprPrimaryContext {
		return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext, 0) as NonParenthesizedValueExprPrimaryContext;
	}
	public comparisonPredicatePart2(): ComparisonPredicatePart2Context {
		return this.getTypedRuleContext(ComparisonPredicatePart2Context, 0) as ComparisonPredicatePart2Context;
	}
	public nullPredicatePart2(): NullPredicatePart2Context {
		return this.getTypedRuleContext(NullPredicatePart2Context, 0) as NullPredicatePart2Context;
	}
	public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
		return this.getTypedRuleContext(ValueTypePredicatePart2Context, 0) as ValueTypePredicatePart2Context;
	}
	public directedPredicatePart2(): DirectedPredicatePart2Context {
		return this.getTypedRuleContext(DirectedPredicatePart2Context, 0) as DirectedPredicatePart2Context;
	}
	public labeledPredicatePart2(): LabeledPredicatePart2Context {
		return this.getTypedRuleContext(LabeledPredicatePart2Context, 0) as LabeledPredicatePart2Context;
	}
	public sourcePredicatePart2(): SourcePredicatePart2Context {
		return this.getTypedRuleContext(SourcePredicatePart2Context, 0) as SourcePredicatePart2Context;
	}
	public destinationPredicatePart2(): DestinationPredicatePart2Context {
		return this.getTypedRuleContext(DestinationPredicatePart2Context, 0) as DestinationPredicatePart2Context;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_whenOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterWhenOperand) {
	 		listener.enterWhenOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitWhenOperand) {
	 		listener.exitWhenOperand(this);
		}
	}
}


export class ResultContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public resultExpr(): ResultExprContext {
		return this.getTypedRuleContext(ResultExprContext, 0) as ResultExprContext;
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_result;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterResult) {
	 		listener.enterResult(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitResult) {
	 		listener.exitResult(this);
		}
	}
}


export class ResultExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_resultExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterResultExpr) {
	 		listener.enterResultExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitResultExpr) {
	 		listener.exitResultExpr(this);
		}
	}
}


export class CastSpecContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CAST(): TerminalNode {
		return this.getToken(GqlParser.CAST, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public castOperand(): CastOperandContext {
		return this.getTypedRuleContext(CastOperandContext, 0) as CastOperandContext;
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public castTarget(): CastTargetContext {
		return this.getTypedRuleContext(CastTargetContext, 0) as CastTargetContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_castSpec;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCastSpec) {
	 		listener.enterCastSpec(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCastSpec) {
	 		listener.exitCastSpec(this);
		}
	}
}


export class CastOperandContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_castOperand;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCastOperand) {
	 		listener.enterCastOperand(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCastOperand) {
	 		listener.exitCastOperand(this);
		}
	}
}


export class CastTargetContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueType(): ValueTypeContext {
		return this.getTypedRuleContext(ValueTypeContext, 0) as ValueTypeContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_castTarget;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCastTarget) {
	 		listener.enterCastTarget(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCastTarget) {
	 		listener.exitCastTarget(this);
		}
	}
}


export class ElementIdFunctionContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELEMENT_ID(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT_ID, 0);
	}
	public LEFT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.LEFT_PAREN, 0);
	}
	public elementVarRef(): ElementVarRefContext {
		return this.getTypedRuleContext(ElementVarRefContext, 0) as ElementVarRefContext;
	}
	public RIGHT_PAREN(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_PAREN, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementIdFunction;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementIdFunction) {
	 		listener.enterElementIdFunction(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementIdFunction) {
	 		listener.exitElementIdFunction(this);
		}
	}
}


export class LetValueExprContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LET(): TerminalNode {
		return this.getToken(GqlParser.LET, 0);
	}
	public letVarDefList(): LetVarDefListContext {
		return this.getTypedRuleContext(LetVarDefListContext, 0) as LetVarDefListContext;
	}
	public IN(): TerminalNode {
		return this.getToken(GqlParser.IN, 0);
	}
	public valueExpr(): ValueExprContext {
		return this.getTypedRuleContext(ValueExprContext, 0) as ValueExprContext;
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_letValueExpr;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLetValueExpr) {
	 		listener.enterLetValueExpr(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLetValueExpr) {
	 		listener.exitLetValueExpr(this);
		}
	}
}


export class LiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIGNED_NUMERIC_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.SIGNED_NUMERIC_LITERAL, 0);
	}
	public generalLiteral(): GeneralLiteralContext {
		return this.getTypedRuleContext(GeneralLiteralContext, 0) as GeneralLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_literal;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLiteral) {
	 		listener.enterLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLiteral) {
	 		listener.exitLiteral(this);
		}
	}
}


export class GeneralLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public predefinedTypeLiteral(): PredefinedTypeLiteralContext {
		return this.getTypedRuleContext(PredefinedTypeLiteralContext, 0) as PredefinedTypeLiteralContext;
	}
	public listLiteral(): ListLiteralContext {
		return this.getTypedRuleContext(ListLiteralContext, 0) as ListLiteralContext;
	}
	public recordLiteral(): RecordLiteralContext {
		return this.getTypedRuleContext(RecordLiteralContext, 0) as RecordLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_generalLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGeneralLiteral) {
	 		listener.enterGeneralLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGeneralLiteral) {
	 		listener.exitGeneralLiteral(this);
		}
	}
}


export class PredefinedTypeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public booleanLiteral(): BooleanLiteralContext {
		return this.getTypedRuleContext(BooleanLiteralContext, 0) as BooleanLiteralContext;
	}
	public characterStringLiteral(): CharacterStringLiteralContext {
		return this.getTypedRuleContext(CharacterStringLiteralContext, 0) as CharacterStringLiteralContext;
	}
	public BYTE_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.BYTE_STRING_LITERAL, 0);
	}
	public temporalLiteral(): TemporalLiteralContext {
		return this.getTypedRuleContext(TemporalLiteralContext, 0) as TemporalLiteralContext;
	}
	public durationLiteral(): DurationLiteralContext {
		return this.getTypedRuleContext(DurationLiteralContext, 0) as DurationLiteralContext;
	}
	public nullLiteral(): NullLiteralContext {
		return this.getTypedRuleContext(NullLiteralContext, 0) as NullLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_predefinedTypeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPredefinedTypeLiteral) {
	 		listener.enterPredefinedTypeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPredefinedTypeLiteral) {
	 		listener.exitPredefinedTypeLiteral(this);
		}
	}
}


export class UnsignedLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_NUMERIC_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_NUMERIC_LITERAL, 0);
	}
	public generalLiteral(): GeneralLiteralContext {
		return this.getTypedRuleContext(GeneralLiteralContext, 0) as GeneralLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unsignedLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnsignedLiteral) {
	 		listener.enterUnsignedLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnsignedLiteral) {
	 		listener.exitUnsignedLiteral(this);
		}
	}
}


export class BooleanLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUE(): TerminalNode {
		return this.getToken(GqlParser.TRUE, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(GqlParser.FALSE, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(GqlParser.UNKNOWN, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_booleanLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBooleanLiteral) {
	 		listener.enterBooleanLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBooleanLiteral) {
	 		listener.exitBooleanLiteral(this);
		}
	}
}


export class CharacterStringLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleQuotedCharacterSequence(): SingleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(SingleQuotedCharacterSequenceContext, 0) as SingleQuotedCharacterSequenceContext;
	}
	public doubleQuotedCharacterSequence(): DoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext, 0) as DoubleQuotedCharacterSequenceContext;
	}
	public accentQuotedCharacterSequence(): AccentQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext, 0) as AccentQuotedCharacterSequenceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_characterStringLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterCharacterStringLiteral) {
	 		listener.enterCharacterStringLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitCharacterStringLiteral) {
	 		listener.exitCharacterStringLiteral(this);
		}
	}
}


export class UnbrokenCharacterStringLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenSingleQuotedCharacterSequence(): UnbrokenSingleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext, 0) as UnbrokenSingleQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public unbrokenDoubleQuotedCharacterSequence(): UnbrokenDoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext, 0) as UnbrokenDoubleQuotedCharacterSequenceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenCharacterStringLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenCharacterStringLiteral) {
	 		listener.enterUnbrokenCharacterStringLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenCharacterStringLiteral) {
	 		listener.exitUnbrokenCharacterStringLiteral(this);
		}
	}
}


export class SingleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenSingleQuotedCharacterSequence_list(): UnbrokenSingleQuotedCharacterSequenceContext[] {
		return this.getTypedRuleContexts(UnbrokenSingleQuotedCharacterSequenceContext) as UnbrokenSingleQuotedCharacterSequenceContext[];
	}
	public unbrokenSingleQuotedCharacterSequence(i: number): UnbrokenSingleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext, i) as UnbrokenSingleQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_singleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSingleQuotedCharacterSequence) {
	 		listener.enterSingleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSingleQuotedCharacterSequence) {
	 		listener.exitSingleQuotedCharacterSequence(this);
		}
	}
}


export class DoubleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenDoubleQuotedCharacterSequence_list(): UnbrokenDoubleQuotedCharacterSequenceContext[] {
		return this.getTypedRuleContexts(UnbrokenDoubleQuotedCharacterSequenceContext) as UnbrokenDoubleQuotedCharacterSequenceContext[];
	}
	public unbrokenDoubleQuotedCharacterSequence(i: number): UnbrokenDoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext, i) as UnbrokenDoubleQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_doubleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDoubleQuotedCharacterSequence) {
	 		listener.enterDoubleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDoubleQuotedCharacterSequence) {
	 		listener.exitDoubleQuotedCharacterSequence(this);
		}
	}
}


export class AccentQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenAccentQuotedCharacterSequence_list(): UnbrokenAccentQuotedCharacterSequenceContext[] {
		return this.getTypedRuleContexts(UnbrokenAccentQuotedCharacterSequenceContext) as UnbrokenAccentQuotedCharacterSequenceContext[];
	}
	public unbrokenAccentQuotedCharacterSequence(i: number): UnbrokenAccentQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(UnbrokenAccentQuotedCharacterSequenceContext, i) as UnbrokenAccentQuotedCharacterSequenceContext;
	}
	public noEscape(): NoEscapeContext {
		return this.getTypedRuleContext(NoEscapeContext, 0) as NoEscapeContext;
	}
	public VERTICAL_BAR_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.VERTICAL_BAR);
	}
	public VERTICAL_BAR(i: number): TerminalNode {
		return this.getToken(GqlParser.VERTICAL_BAR, i);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_accentQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterAccentQuotedCharacterSequence) {
	 		listener.enterAccentQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitAccentQuotedCharacterSequence) {
	 		listener.exitAccentQuotedCharacterSequence(this);
		}
	}
}


export class NoEscapeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMERCIAL_AT(): TerminalNode {
		return this.getToken(GqlParser.COMMERCIAL_AT, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_noEscape;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNoEscape) {
	 		listener.enterNoEscape(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNoEscape) {
	 		listener.exitNoEscape(this);
		}
	}
}


export class UnbrokenSingleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SINGLE_QUOTED_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.SINGLE_QUOTED_STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenSingleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenSingleQuotedCharacterSequence) {
	 		listener.enterUnbrokenSingleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenSingleQuotedCharacterSequence) {
	 		listener.exitUnbrokenSingleQuotedCharacterSequence(this);
		}
	}
}


export class UnbrokenDoubleQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOUBLE_QUOTED_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_QUOTED_STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenDoubleQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenDoubleQuotedCharacterSequence) {
	 		listener.enterUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenDoubleQuotedCharacterSequence) {
	 		listener.exitUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}
}


export class UnbrokenAccentQuotedCharacterSequenceContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACCENT_QUOTED_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.ACCENT_QUOTED_STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_unbrokenAccentQuotedCharacterSequence;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterUnbrokenAccentQuotedCharacterSequence) {
	 		listener.enterUnbrokenAccentQuotedCharacterSequence(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitUnbrokenAccentQuotedCharacterSequence) {
	 		listener.exitUnbrokenAccentQuotedCharacterSequence(this);
		}
	}
}


export class TemporalLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dateLiteral(): DateLiteralContext {
		return this.getTypedRuleContext(DateLiteralContext, 0) as DateLiteralContext;
	}
	public timeLiteral(): TimeLiteralContext {
		return this.getTypedRuleContext(TimeLiteralContext, 0) as TimeLiteralContext;
	}
	public dateTimeLiteral(): DateTimeLiteralContext {
		return this.getTypedRuleContext(DateTimeLiteralContext, 0) as DateTimeLiteralContext;
	}
	public sqlDateTimeLiteral(): SqlDateTimeLiteralContext {
		return this.getTypedRuleContext(SqlDateTimeLiteralContext, 0) as SqlDateTimeLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_temporalLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTemporalLiteral) {
	 		listener.enterTemporalLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTemporalLiteral) {
	 		listener.exitTemporalLiteral(this);
		}
	}
}


export class DateLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateLiteral) {
	 		listener.enterDateLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateLiteral) {
	 		listener.exitDateLiteral(this);
		}
	}
}


export class TimeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeLiteral) {
	 		listener.enterTimeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeLiteral) {
	 		listener.exitTimeLiteral(this);
		}
	}
}


export class DateTimeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeLiteral) {
	 		listener.enterDateTimeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeLiteral) {
	 		listener.exitDateTimeLiteral(this);
		}
	}
}


export class DateStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateString) {
	 		listener.enterDateString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateString) {
	 		listener.exitDateString(this);
		}
	}
}


export class TimeStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_timeString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterTimeString) {
	 		listener.enterTimeString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitTimeString) {
	 		listener.exitTimeString(this);
		}
	}
}


export class DateTimeStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_dateTimeString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDateTimeString) {
	 		listener.enterDateTimeString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDateTimeString) {
	 		listener.exitDateTimeString(this);
		}
	}
}


export class SqlDateTimeLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public separator_list(): SeparatorContext[] {
		return this.getTypedRuleContexts(SeparatorContext) as SeparatorContext[];
	}
	public separator(i: number): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, i) as SeparatorContext;
	}
	public QUOTE_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.QUOTE);
	}
	public QUOTE(i: number): TerminalNode {
		return this.getToken(GqlParser.QUOTE, i);
	}
	public FOUR_DIGIT(): TerminalNode {
		return this.getToken(GqlParser.FOUR_DIGIT, 0);
	}
	public MINUS_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.MINUS);
	}
	public MINUS(i: number): TerminalNode {
		return this.getToken(GqlParser.MINUS, i);
	}
	public DOUBLE_DIGIT_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.DOUBLE_DIGIT);
	}
	public DOUBLE_DIGIT(i: number): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_DIGIT, i);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public COLON_list(): TerminalNode[] {
	    	return this.getTokens(GqlParser.COLON);
	}
	public COLON(i: number): TerminalNode {
		return this.getToken(GqlParser.COLON, i);
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sqlDateTimeLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSqlDateTimeLiteral) {
	 		listener.enterSqlDateTimeLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSqlDateTimeLiteral) {
	 		listener.exitSqlDateTimeLiteral(this);
		}
	}
}


export class DurationLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
	public durationString(): DurationStringContext {
		return this.getTypedRuleContext(DurationStringContext, 0) as DurationStringContext;
	}
	public sqlIntervalLiteral(): SqlIntervalLiteralContext {
		return this.getTypedRuleContext(SqlIntervalLiteralContext, 0) as SqlIntervalLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationLiteral) {
	 		listener.enterDurationLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationLiteral) {
	 		listener.exitDurationLiteral(this);
		}
	}
}


export class DurationStringContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public unbrokenCharacterStringLiteral(): UnbrokenCharacterStringLiteralContext {
		return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext, 0) as UnbrokenCharacterStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_durationString;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDurationString) {
	 		listener.enterDurationString(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDurationString) {
	 		listener.exitDurationString(this);
		}
	}
}


export class SqlIntervalLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNSIGNED_INT(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_INT, 0);
	}
	public sqlIntervalType(): SqlIntervalTypeContext {
		return this.getTypedRuleContext(SqlIntervalTypeContext, 0) as SqlIntervalTypeContext;
	}
	public separator(): SeparatorContext {
		return this.getTypedRuleContext(SeparatorContext, 0) as SeparatorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sqlIntervalLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSqlIntervalLiteral) {
	 		listener.enterSqlIntervalLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSqlIntervalLiteral) {
	 		listener.exitSqlIntervalLiteral(this);
		}
	}
}


export class SqlIntervalTypeContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INTERVAL_DAY(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_DAY, 0);
	}
	public INTERVAL_WEEK(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_WEEK, 0);
	}
	public INTERVAL_MONTH(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_MONTH, 0);
	}
	public INTERVAL_YEAR(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL_YEAR, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_sqlIntervalType;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSqlIntervalType) {
	 		listener.enterSqlIntervalType(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSqlIntervalType) {
	 		listener.exitSqlIntervalType(this);
		}
	}
}


export class NullLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nullLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNullLiteral) {
	 		listener.enterNullLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNullLiteral) {
	 		listener.exitNullLiteral(this);
		}
	}
}


export class ListLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
		return this.getTypedRuleContext(ListValueConstructorByEnumerationContext, 0) as ListValueConstructorByEnumerationContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_listLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterListLiteral) {
	 		listener.enterListLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitListLiteral) {
	 		listener.exitListLiteral(this);
		}
	}
}


export class RecordLiteralContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public recordValueConstructor(): RecordValueConstructorContext {
		return this.getTypedRuleContext(RecordValueConstructorContext, 0) as RecordValueConstructorContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_recordLiteral;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterRecordLiteral) {
	 		listener.enterRecordLiteral(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitRecordLiteral) {
	 		listener.exitRecordLiteral(this);
		}
	}
}


export class ObjectNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_objectName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterObjectName) {
	 		listener.enterObjectName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitObjectName) {
	 		listener.exitObjectName(this);
		}
	}
}


export class ObjectNameOrBindingVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_objectNameOrBindingVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterObjectNameOrBindingVar) {
	 		listener.enterObjectNameOrBindingVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitObjectNameOrBindingVar) {
	 		listener.exitObjectNameOrBindingVar(this);
		}
	}
}


export class DirectoryNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_directoryName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDirectoryName) {
	 		listener.enterDirectoryName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDirectoryName) {
	 		listener.exitDirectoryName(this);
		}
	}
}


export class SchemaNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_schemaName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSchemaName) {
	 		listener.enterSchemaName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSchemaName) {
	 		listener.exitSchemaName(this);
		}
	}
}


export class GraphNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedGraphName(): DelimitedGraphNameContext {
		return this.getTypedRuleContext(DelimitedGraphNameContext, 0) as DelimitedGraphNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphName) {
	 		listener.enterGraphName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphName) {
	 		listener.exitGraphName(this);
		}
	}
}


export class DelimitedGraphNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimitedGraphName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimitedGraphName) {
	 		listener.enterDelimitedGraphName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimitedGraphName) {
	 		listener.exitDelimitedGraphName(this);
		}
	}
}


export class GraphTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphTypeName) {
	 		listener.enterGraphTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphTypeName) {
	 		listener.exitGraphTypeName(this);
		}
	}
}


export class ElementTypeNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementTypeName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementTypeName) {
	 		listener.enterElementTypeName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementTypeName) {
	 		listener.exitElementTypeName(this);
		}
	}
}


export class BindingTableNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedBindingTableName(): DelimitedBindingTableNameContext {
		return this.getTypedRuleContext(DelimitedBindingTableNameContext, 0) as DelimitedBindingTableNameContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableName) {
	 		listener.enterBindingTableName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableName) {
	 		listener.exitBindingTableName(this);
		}
	}
}


export class DelimitedBindingTableNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimitedBindingTableName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimitedBindingTableName) {
	 		listener.enterDelimitedBindingTableName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimitedBindingTableName) {
	 		listener.exitDelimitedBindingTableName(this);
		}
	}
}


export class ProcedureNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_procedureName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterProcedureName) {
	 		listener.enterProcedureName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitProcedureName) {
	 		listener.exitProcedureName(this);
		}
	}
}


export class LabelNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_labelName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterLabelName) {
	 		listener.enterLabelName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitLabelName) {
	 		listener.exitLabelName(this);
		}
	}
}


export class PropertyNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_propertyName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPropertyName) {
	 		listener.enterPropertyName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPropertyName) {
	 		listener.exitPropertyName(this);
		}
	}
}


export class FieldNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_fieldName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterFieldName) {
	 		listener.enterFieldName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitFieldName) {
	 		listener.exitFieldName(this);
		}
	}
}


export class ParameterNameContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOLLAR(): TerminalNode {
		return this.getToken(GqlParser.DOLLAR, 0);
	}
	public separatedIdentifier(): SeparatedIdentifierContext {
		return this.getTypedRuleContext(SeparatedIdentifierContext, 0) as SeparatedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_parameterName;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterParameterName) {
	 		listener.enterParameterName(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitParameterName) {
	 		listener.exitParameterName(this);
		}
	}
}


export class VarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public graphVar(): GraphVarContext {
		return this.getTypedRuleContext(GraphVarContext, 0) as GraphVarContext;
	}
	public graphPatternVar(): GraphPatternVarContext {
		return this.getTypedRuleContext(GraphPatternVarContext, 0) as GraphPatternVarContext;
	}
	public bindingTableVar(): BindingTableVarContext {
		return this.getTypedRuleContext(BindingTableVarContext, 0) as BindingTableVarContext;
	}
	public valueVar(): ValueVarContext {
		return this.getTypedRuleContext(ValueVarContext, 0) as ValueVarContext;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_var;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterVar) {
	 		listener.enterVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitVar) {
	 		listener.exitVar(this);
		}
	}
}


export class GraphVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphVar) {
	 		listener.enterGraphVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphVar) {
	 		listener.exitGraphVar(this);
		}
	}
}


export class GraphPatternVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public elementVar(): ElementVarContext {
		return this.getTypedRuleContext(ElementVarContext, 0) as ElementVarContext;
	}
	public pathOrSubpathVar(): PathOrSubpathVarContext {
		return this.getTypedRuleContext(PathOrSubpathVarContext, 0) as PathOrSubpathVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_graphPatternVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterGraphPatternVar) {
	 		listener.enterGraphPatternVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitGraphPatternVar) {
	 		listener.exitGraphPatternVar(this);
		}
	}
}


export class PathOrSubpathVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pathVar(): PathVarContext {
		return this.getTypedRuleContext(PathVarContext, 0) as PathVarContext;
	}
	public subpathVar(): SubpathVarContext {
		return this.getTypedRuleContext(SubpathVarContext, 0) as SubpathVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathOrSubpathVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathOrSubpathVar) {
	 		listener.enterPathOrSubpathVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathOrSubpathVar) {
	 		listener.exitPathOrSubpathVar(this);
		}
	}
}


export class ElementVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_elementVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterElementVar) {
	 		listener.enterElementVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitElementVar) {
	 		listener.exitElementVar(this);
		}
	}
}


export class PathVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_pathVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPathVar) {
	 		listener.enterPathVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPathVar) {
	 		listener.exitPathVar(this);
		}
	}
}


export class SubpathVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_subpathVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSubpathVar) {
	 		listener.enterSubpathVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSubpathVar) {
	 		listener.exitSubpathVar(this);
		}
	}
}


export class BindingTableVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingTableVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingTableVar) {
	 		listener.enterBindingTableVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingTableVar) {
	 		listener.exitBindingTableVar(this);
		}
	}
}


export class ValueVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bindingVar(): BindingVarContext {
		return this.getTypedRuleContext(BindingVarContext, 0) as BindingVarContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_valueVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterValueVar) {
	 		listener.enterValueVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitValueVar) {
	 		listener.exitValueVar(this);
		}
	}
}


export class BindingVarContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_bindingVar;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterBindingVar) {
	 		listener.enterBindingVar(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitBindingVar) {
	 		listener.exitBindingVar(this);
		}
	}
}


export class TokenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nonDelimiterToken(): NonDelimiterTokenContext {
		return this.getTypedRuleContext(NonDelimiterTokenContext, 0) as NonDelimiterTokenContext;
	}
	public delimiterToken(): DelimiterTokenContext {
		return this.getTypedRuleContext(DelimiterTokenContext, 0) as DelimiterTokenContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_token;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterToken) {
	 		listener.enterToken(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitToken) {
	 		listener.exitToken(this);
		}
	}
}


export class NonDelimiterTokenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
	public keyWord(): KeyWordContext {
		return this.getTypedRuleContext(KeyWordContext, 0) as KeyWordContext;
	}
	public UNSIGNED_NUMERIC_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED_NUMERIC_LITERAL, 0);
	}
	public BYTE_STRING_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.BYTE_STRING_LITERAL, 0);
	}
	public MULTISET_ALTERNATION(): TerminalNode {
		return this.getToken(GqlParser.MULTISET_ALTERNATION, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonDelimiterToken;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonDelimiterToken) {
	 		listener.enterNonDelimiterToken(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonDelimiterToken) {
	 		listener.exitNonDelimiterToken(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_identifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterIdentifier) {
	 		listener.enterIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitIdentifier) {
	 		listener.exitIdentifier(this);
		}
	}
}


export class SeparatedIdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_separatedIdentifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSeparatedIdentifier) {
	 		listener.enterSeparatedIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSeparatedIdentifier) {
	 		listener.exitSeparatedIdentifier(this);
		}
	}
}


export class NonDelimitedIdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REGULAR_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.REGULAR_IDENTIFIER, 0);
	}
	public EXTENDED_IDENTIFIER(): TerminalNode {
		return this.getToken(GqlParser.EXTENDED_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonDelimitedIdentifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonDelimitedIdentifier) {
	 		listener.enterNonDelimitedIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonDelimitedIdentifier) {
	 		listener.exitNonDelimitedIdentifier(this);
		}
	}
}


export class DelimitedIdentifierContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public doubleQuotedCharacterSequence(): DoubleQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext, 0) as DoubleQuotedCharacterSequenceContext;
	}
	public accentQuotedCharacterSequence(): AccentQuotedCharacterSequenceContext {
		return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext, 0) as AccentQuotedCharacterSequenceContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimitedIdentifier;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimitedIdentifier) {
	 		listener.enterDelimitedIdentifier(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimitedIdentifier) {
	 		listener.exitDelimitedIdentifier(this);
		}
	}
}


export class KeyWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public reservedWord(): ReservedWordContext {
		return this.getTypedRuleContext(ReservedWordContext, 0) as ReservedWordContext;
	}
	public nonReservedWord(): NonReservedWordContext {
		return this.getTypedRuleContext(NonReservedWordContext, 0) as NonReservedWordContext;
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_keyWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterKeyWord) {
	 		listener.enterKeyWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitKeyWord) {
	 		listener.exitKeyWord(this);
		}
	}
}


export class ReservedWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public preReservedWord(): PreReservedWordContext {
		return this.getTypedRuleContext(PreReservedWordContext, 0) as PreReservedWordContext;
	}
	public ABS(): TerminalNode {
		return this.getToken(GqlParser.ABS, 0);
	}
	public ACOS(): TerminalNode {
		return this.getToken(GqlParser.ACOS, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(GqlParser.ALL, 0);
	}
	public ALL_DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.ALL_DIFFERENT, 0);
	}
	public AND(): TerminalNode {
		return this.getToken(GqlParser.AND, 0);
	}
	public ANY(): TerminalNode {
		return this.getToken(GqlParser.ANY, 0);
	}
	public ARRAY(): TerminalNode {
		return this.getToken(GqlParser.ARRAY, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(GqlParser.AS, 0);
	}
	public ASC(): TerminalNode {
		return this.getToken(GqlParser.ASC, 0);
	}
	public ASCENDING(): TerminalNode {
		return this.getToken(GqlParser.ASCENDING, 0);
	}
	public ASIN(): TerminalNode {
		return this.getToken(GqlParser.ASIN, 0);
	}
	public AT(): TerminalNode {
		return this.getToken(GqlParser.AT, 0);
	}
	public ATAN(): TerminalNode {
		return this.getToken(GqlParser.ATAN, 0);
	}
	public AVG(): TerminalNode {
		return this.getToken(GqlParser.AVG, 0);
	}
	public BIG(): TerminalNode {
		return this.getToken(GqlParser.BIG, 0);
	}
	public BIGINT(): TerminalNode {
		return this.getToken(GqlParser.BIGINT, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(GqlParser.BINARY, 0);
	}
	public BOOL(): TerminalNode {
		return this.getToken(GqlParser.BOOL, 0);
	}
	public BOOLEAN(): TerminalNode {
		return this.getToken(GqlParser.BOOLEAN, 0);
	}
	public BOTH(): TerminalNode {
		return this.getToken(GqlParser.BOTH, 0);
	}
	public BTRIM(): TerminalNode {
		return this.getToken(GqlParser.BTRIM, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(GqlParser.BY, 0);
	}
	public BYTE_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.BYTE_LENGTH, 0);
	}
	public BYTES(): TerminalNode {
		return this.getToken(GqlParser.BYTES, 0);
	}
	public CALL(): TerminalNode {
		return this.getToken(GqlParser.CALL, 0);
	}
	public CASE(): TerminalNode {
		return this.getToken(GqlParser.CASE, 0);
	}
	public CAST(): TerminalNode {
		return this.getToken(GqlParser.CAST, 0);
	}
	public CEIL(): TerminalNode {
		return this.getToken(GqlParser.CEIL, 0);
	}
	public CEILING(): TerminalNode {
		return this.getToken(GqlParser.CEILING, 0);
	}
	public CHAR_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHAR_LENGTH, 0);
	}
	public CHARACTER_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.CHARACTER_LENGTH, 0);
	}
	public CHARACTERISTICS(): TerminalNode {
		return this.getToken(GqlParser.CHARACTERISTICS, 0);
	}
	public CLOSE(): TerminalNode {
		return this.getToken(GqlParser.CLOSE, 0);
	}
	public COALESCE(): TerminalNode {
		return this.getToken(GqlParser.COALESCE, 0);
	}
	public COLLECT(): TerminalNode {
		return this.getToken(GqlParser.COLLECT, 0);
	}
	public COMMIT(): TerminalNode {
		return this.getToken(GqlParser.COMMIT, 0);
	}
	public COPY(): TerminalNode {
		return this.getToken(GqlParser.COPY, 0);
	}
	public COS(): TerminalNode {
		return this.getToken(GqlParser.COS, 0);
	}
	public COSH(): TerminalNode {
		return this.getToken(GqlParser.COSH, 0);
	}
	public COT(): TerminalNode {
		return this.getToken(GqlParser.COT, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(GqlParser.COUNT, 0);
	}
	public CREATE(): TerminalNode {
		return this.getToken(GqlParser.CREATE, 0);
	}
	public CURRENT_DATE(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_DATE, 0);
	}
	public CURRENT_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_GRAPH, 0);
	}
	public CURRENT_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0);
	}
	public CURRENT_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_SCHEMA, 0);
	}
	public CURRENT_TIME(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIME, 0);
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_TIMESTAMP, 0);
	}
	public CURRENT_USER(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_USER, 0);
	}
	public DATE(): TerminalNode {
		return this.getToken(GqlParser.DATE, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(GqlParser.DATETIME, 0);
	}
	public DAY(): TerminalNode {
		return this.getToken(GqlParser.DAY, 0);
	}
	public DEC(): TerminalNode {
		return this.getToken(GqlParser.DEC, 0);
	}
	public DECIMAL(): TerminalNode {
		return this.getToken(GqlParser.DECIMAL, 0);
	}
	public DEGREES(): TerminalNode {
		return this.getToken(GqlParser.DEGREES, 0);
	}
	public DELETE(): TerminalNode {
		return this.getToken(GqlParser.DELETE, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(GqlParser.DESC, 0);
	}
	public DESCENDING(): TerminalNode {
		return this.getToken(GqlParser.DESCENDING, 0);
	}
	public DETACH(): TerminalNode {
		return this.getToken(GqlParser.DETACH, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(GqlParser.DISTINCT, 0);
	}
	public DOUBLE(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE, 0);
	}
	public DROP(): TerminalNode {
		return this.getToken(GqlParser.DROP, 0);
	}
	public DURATION(): TerminalNode {
		return this.getToken(GqlParser.DURATION, 0);
	}
	public DURATION_BETWEEN(): TerminalNode {
		return this.getToken(GqlParser.DURATION_BETWEEN, 0);
	}
	public ELEMENT_ID(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT_ID, 0);
	}
	public ELSE(): TerminalNode {
		return this.getToken(GqlParser.ELSE, 0);
	}
	public END(): TerminalNode {
		return this.getToken(GqlParser.END, 0);
	}
	public EXCEPT(): TerminalNode {
		return this.getToken(GqlParser.EXCEPT, 0);
	}
	public EXISTS(): TerminalNode {
		return this.getToken(GqlParser.EXISTS, 0);
	}
	public EXP(): TerminalNode {
		return this.getToken(GqlParser.EXP, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(GqlParser.FALSE, 0);
	}
	public FILTER(): TerminalNode {
		return this.getToken(GqlParser.FILTER, 0);
	}
	public FINISH(): TerminalNode {
		return this.getToken(GqlParser.FINISH, 0);
	}
	public FLOAT(): TerminalNode {
		return this.getToken(GqlParser.FLOAT, 0);
	}
	public FLOAT16(): TerminalNode {
		return this.getToken(GqlParser.FLOAT16, 0);
	}
	public FLOAT32(): TerminalNode {
		return this.getToken(GqlParser.FLOAT32, 0);
	}
	public FLOAT64(): TerminalNode {
		return this.getToken(GqlParser.FLOAT64, 0);
	}
	public FLOAT128(): TerminalNode {
		return this.getToken(GqlParser.FLOAT128, 0);
	}
	public FLOAT256(): TerminalNode {
		return this.getToken(GqlParser.FLOAT256, 0);
	}
	public FLOOR(): TerminalNode {
		return this.getToken(GqlParser.FLOOR, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(GqlParser.FOR, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(GqlParser.FROM, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(GqlParser.GROUP, 0);
	}
	public HAVING(): TerminalNode {
		return this.getToken(GqlParser.HAVING, 0);
	}
	public HOME_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_GRAPH, 0);
	}
	public HOME_PROPERTY_GRAPH(): TerminalNode {
		return this.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0);
	}
	public HOME_SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.HOME_SCHEMA, 0);
	}
	public HOUR(): TerminalNode {
		return this.getToken(GqlParser.HOUR, 0);
	}
	public IF(): TerminalNode {
		return this.getToken(GqlParser.IF, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(GqlParser.IN, 0);
	}
	public INSERT(): TerminalNode {
		return this.getToken(GqlParser.INSERT, 0);
	}
	public INT(): TerminalNode {
		return this.getToken(GqlParser.INT, 0);
	}
	public INTEGER(): TerminalNode {
		return this.getToken(GqlParser.INTEGER, 0);
	}
	public INT8(): TerminalNode {
		return this.getToken(GqlParser.INT8, 0);
	}
	public INTEGER8(): TerminalNode {
		return this.getToken(GqlParser.INTEGER8, 0);
	}
	public INT16(): TerminalNode {
		return this.getToken(GqlParser.INT16, 0);
	}
	public INTEGER16(): TerminalNode {
		return this.getToken(GqlParser.INTEGER16, 0);
	}
	public INT32(): TerminalNode {
		return this.getToken(GqlParser.INT32, 0);
	}
	public INTEGER32(): TerminalNode {
		return this.getToken(GqlParser.INTEGER32, 0);
	}
	public INT64(): TerminalNode {
		return this.getToken(GqlParser.INT64, 0);
	}
	public INTEGER64(): TerminalNode {
		return this.getToken(GqlParser.INTEGER64, 0);
	}
	public INT128(): TerminalNode {
		return this.getToken(GqlParser.INT128, 0);
	}
	public INTEGER128(): TerminalNode {
		return this.getToken(GqlParser.INTEGER128, 0);
	}
	public INT256(): TerminalNode {
		return this.getToken(GqlParser.INT256, 0);
	}
	public INTEGER256(): TerminalNode {
		return this.getToken(GqlParser.INTEGER256, 0);
	}
	public INTERSECT(): TerminalNode {
		return this.getToken(GqlParser.INTERSECT, 0);
	}
	public INTERVAL(): TerminalNode {
		return this.getToken(GqlParser.INTERVAL, 0);
	}
	public IS(): TerminalNode {
		return this.getToken(GqlParser.IS, 0);
	}
	public LEADING(): TerminalNode {
		return this.getToken(GqlParser.LEADING, 0);
	}
	public LET(): TerminalNode {
		return this.getToken(GqlParser.LET, 0);
	}
	public LIKE(): TerminalNode {
		return this.getToken(GqlParser.LIKE, 0);
	}
	public LIMIT(): TerminalNode {
		return this.getToken(GqlParser.LIMIT, 0);
	}
	public LIST(): TerminalNode {
		return this.getToken(GqlParser.LIST, 0);
	}
	public LN(): TerminalNode {
		return this.getToken(GqlParser.LN, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(GqlParser.LOCAL, 0);
	}
	public LOCAL_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_DATETIME, 0);
	}
	public LOCAL_TIME(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIME, 0);
	}
	public LOCAL_TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.LOCAL_TIMESTAMP, 0);
	}
	public LOG(): TerminalNode {
		return this.getToken(GqlParser.LOG, 0);
	}
	public LOG10(): TerminalNode {
		return this.getToken(GqlParser.LOG10, 0);
	}
	public LOWER(): TerminalNode {
		return this.getToken(GqlParser.LOWER, 0);
	}
	public LTRIM(): TerminalNode {
		return this.getToken(GqlParser.LTRIM, 0);
	}
	public MATCH(): TerminalNode {
		return this.getToken(GqlParser.MATCH, 0);
	}
	public MAX(): TerminalNode {
		return this.getToken(GqlParser.MAX, 0);
	}
	public MIN(): TerminalNode {
		return this.getToken(GqlParser.MIN, 0);
	}
	public MINUTE(): TerminalNode {
		return this.getToken(GqlParser.MINUTE, 0);
	}
	public MOD(): TerminalNode {
		return this.getToken(GqlParser.MOD, 0);
	}
	public MONTH(): TerminalNode {
		return this.getToken(GqlParser.MONTH, 0);
	}
	public NEXT(): TerminalNode {
		return this.getToken(GqlParser.NEXT, 0);
	}
	public NODETACH(): TerminalNode {
		return this.getToken(GqlParser.NODETACH, 0);
	}
	public NORMALIZE(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZE, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(GqlParser.NOT, 0);
	}
	public NULL(): TerminalNode {
		return this.getToken(GqlParser.NULL, 0);
	}
	public NULLS(): TerminalNode {
		return this.getToken(GqlParser.NULLS, 0);
	}
	public NULLIF(): TerminalNode {
		return this.getToken(GqlParser.NULLIF, 0);
	}
	public OCTET_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.OCTET_LENGTH, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(GqlParser.OF, 0);
	}
	public OFFSET(): TerminalNode {
		return this.getToken(GqlParser.OFFSET, 0);
	}
	public OPEN(): TerminalNode {
		return this.getToken(GqlParser.OPEN, 0);
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(GqlParser.OPTIONAL, 0);
	}
	public OR(): TerminalNode {
		return this.getToken(GqlParser.OR, 0);
	}
	public ORDER(): TerminalNode {
		return this.getToken(GqlParser.ORDER, 0);
	}
	public OTHERWISE(): TerminalNode {
		return this.getToken(GqlParser.OTHERWISE, 0);
	}
	public PARAMETER(): TerminalNode {
		return this.getToken(GqlParser.PARAMETER, 0);
	}
	public PARAMETERS(): TerminalNode {
		return this.getToken(GqlParser.PARAMETERS, 0);
	}
	public PATH(): TerminalNode {
		return this.getToken(GqlParser.PATH, 0);
	}
	public PATH_LENGTH(): TerminalNode {
		return this.getToken(GqlParser.PATH_LENGTH, 0);
	}
	public PATHS(): TerminalNode {
		return this.getToken(GqlParser.PATHS, 0);
	}
	public PERCENTILE_CONT(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_CONT, 0);
	}
	public PERCENTILE_DISC(): TerminalNode {
		return this.getToken(GqlParser.PERCENTILE_DISC, 0);
	}
	public POWER(): TerminalNode {
		return this.getToken(GqlParser.POWER, 0);
	}
	public PRECISION(): TerminalNode {
		return this.getToken(GqlParser.PRECISION, 0);
	}
	public PROPERTY_EXISTS(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY_EXISTS, 0);
	}
	public RADIANS(): TerminalNode {
		return this.getToken(GqlParser.RADIANS, 0);
	}
	public REAL(): TerminalNode {
		return this.getToken(GqlParser.REAL, 0);
	}
	public RECORD(): TerminalNode {
		return this.getToken(GqlParser.RECORD, 0);
	}
	public REMOVE(): TerminalNode {
		return this.getToken(GqlParser.REMOVE, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(GqlParser.REPLACE, 0);
	}
	public RESET(): TerminalNode {
		return this.getToken(GqlParser.RESET, 0);
	}
	public RETURN(): TerminalNode {
		return this.getToken(GqlParser.RETURN, 0);
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(GqlParser.ROLLBACK, 0);
	}
	public RTRIM(): TerminalNode {
		return this.getToken(GqlParser.RTRIM, 0);
	}
	public SAME(): TerminalNode {
		return this.getToken(GqlParser.SAME, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(GqlParser.SCHEMA, 0);
	}
	public SECOND(): TerminalNode {
		return this.getToken(GqlParser.SECOND, 0);
	}
	public SELECT(): TerminalNode {
		return this.getToken(GqlParser.SELECT, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(GqlParser.SESSION, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(GqlParser.SET, 0);
	}
	public SIGNED(): TerminalNode {
		return this.getToken(GqlParser.SIGNED, 0);
	}
	public SIN(): TerminalNode {
		return this.getToken(GqlParser.SIN, 0);
	}
	public SINH(): TerminalNode {
		return this.getToken(GqlParser.SINH, 0);
	}
	public SKIP_(): TerminalNode {
		return this.getToken(GqlParser.SKIP_, 0);
	}
	public SMALL(): TerminalNode {
		return this.getToken(GqlParser.SMALL, 0);
	}
	public SMALLINT(): TerminalNode {
		return this.getToken(GqlParser.SMALLINT, 0);
	}
	public SQRT(): TerminalNode {
		return this.getToken(GqlParser.SQRT, 0);
	}
	public START(): TerminalNode {
		return this.getToken(GqlParser.START, 0);
	}
	public STDDEV_POP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_POP, 0);
	}
	public STDDEV_SAMP(): TerminalNode {
		return this.getToken(GqlParser.STDDEV_SAMP, 0);
	}
	public STRING(): TerminalNode {
		return this.getToken(GqlParser.STRING, 0);
	}
	public SUM(): TerminalNode {
		return this.getToken(GqlParser.SUM, 0);
	}
	public TAN(): TerminalNode {
		return this.getToken(GqlParser.TAN, 0);
	}
	public TANH(): TerminalNode {
		return this.getToken(GqlParser.TANH, 0);
	}
	public THEN(): TerminalNode {
		return this.getToken(GqlParser.THEN, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(GqlParser.TIME, 0);
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(GqlParser.TIMESTAMP, 0);
	}
	public TRAILING(): TerminalNode {
		return this.getToken(GqlParser.TRAILING, 0);
	}
	public TRIM(): TerminalNode {
		return this.getToken(GqlParser.TRIM, 0);
	}
	public TRUE(): TerminalNode {
		return this.getToken(GqlParser.TRUE, 0);
	}
	public TYPED(): TerminalNode {
		return this.getToken(GqlParser.TYPED, 0);
	}
	public UBIGINT(): TerminalNode {
		return this.getToken(GqlParser.UBIGINT, 0);
	}
	public UINT(): TerminalNode {
		return this.getToken(GqlParser.UINT, 0);
	}
	public UINT8(): TerminalNode {
		return this.getToken(GqlParser.UINT8, 0);
	}
	public UINT16(): TerminalNode {
		return this.getToken(GqlParser.UINT16, 0);
	}
	public UINT32(): TerminalNode {
		return this.getToken(GqlParser.UINT32, 0);
	}
	public UINT64(): TerminalNode {
		return this.getToken(GqlParser.UINT64, 0);
	}
	public UINT128(): TerminalNode {
		return this.getToken(GqlParser.UINT128, 0);
	}
	public UINT256(): TerminalNode {
		return this.getToken(GqlParser.UINT256, 0);
	}
	public UNION(): TerminalNode {
		return this.getToken(GqlParser.UNION, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(GqlParser.UNKNOWN, 0);
	}
	public UNSIGNED(): TerminalNode {
		return this.getToken(GqlParser.UNSIGNED, 0);
	}
	public UPPER(): TerminalNode {
		return this.getToken(GqlParser.UPPER, 0);
	}
	public USE(): TerminalNode {
		return this.getToken(GqlParser.USE, 0);
	}
	public USMALLINT(): TerminalNode {
		return this.getToken(GqlParser.USMALLINT, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(GqlParser.VALUE, 0);
	}
	public VARBINARY(): TerminalNode {
		return this.getToken(GqlParser.VARBINARY, 0);
	}
	public VARCHAR(): TerminalNode {
		return this.getToken(GqlParser.VARCHAR, 0);
	}
	public VARIABLE(): TerminalNode {
		return this.getToken(GqlParser.VARIABLE, 0);
	}
	public WHEN(): TerminalNode {
		return this.getToken(GqlParser.WHEN, 0);
	}
	public WHERE(): TerminalNode {
		return this.getToken(GqlParser.WHERE, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(GqlParser.WITH, 0);
	}
	public XOR(): TerminalNode {
		return this.getToken(GqlParser.XOR, 0);
	}
	public YEAR(): TerminalNode {
		return this.getToken(GqlParser.YEAR, 0);
	}
	public YIELD(): TerminalNode {
		return this.getToken(GqlParser.YIELD, 0);
	}
	public ZONED(): TerminalNode {
		return this.getToken(GqlParser.ZONED, 0);
	}
	public ZONED_DATETIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_DATETIME, 0);
	}
	public ZONED_TIME(): TerminalNode {
		return this.getToken(GqlParser.ZONED_TIME, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_reservedWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterReservedWord) {
	 		listener.enterReservedWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitReservedWord) {
	 		listener.exitReservedWord(this);
		}
	}
}


export class PreReservedWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AGGREGATE(): TerminalNode {
		return this.getToken(GqlParser.AGGREGATE, 0);
	}
	public AGGREGATES(): TerminalNode {
		return this.getToken(GqlParser.AGGREGATES, 0);
	}
	public ALTER(): TerminalNode {
		return this.getToken(GqlParser.ALTER, 0);
	}
	public CATALOG(): TerminalNode {
		return this.getToken(GqlParser.CATALOG, 0);
	}
	public CLEAR(): TerminalNode {
		return this.getToken(GqlParser.CLEAR, 0);
	}
	public CLONE(): TerminalNode {
		return this.getToken(GqlParser.CLONE, 0);
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(GqlParser.CONSTRAINT, 0);
	}
	public CURRENT_ROLE(): TerminalNode {
		return this.getToken(GqlParser.CURRENT_ROLE, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(GqlParser.DATA, 0);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(GqlParser.DIRECTORY, 0);
	}
	public EXACT(): TerminalNode {
		return this.getToken(GqlParser.EXACT, 0);
	}
	public EXISTING(): TerminalNode {
		return this.getToken(GqlParser.EXISTING, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(GqlParser.FUNCTION, 0);
	}
	public GQLSTATUS(): TerminalNode {
		return this.getToken(GqlParser.GQLSTATUS, 0);
	}
	public GRANT(): TerminalNode {
		return this.getToken(GqlParser.GRANT, 0);
	}
	public INSTANT(): TerminalNode {
		return this.getToken(GqlParser.INSTANT, 0);
	}
	public LEFT(): TerminalNode {
		return this.getToken(GqlParser.LEFT, 0);
	}
	public NOTHING(): TerminalNode {
		return this.getToken(GqlParser.NOTHING, 0);
	}
	public NUMERIC(): TerminalNode {
		return this.getToken(GqlParser.NUMERIC, 0);
	}
	public ON(): TerminalNode {
		return this.getToken(GqlParser.ON, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(GqlParser.PARTITION, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(GqlParser.PROCEDURE, 0);
	}
	public PRODUCT(): TerminalNode {
		return this.getToken(GqlParser.PRODUCT, 0);
	}
	public PROJECT(): TerminalNode {
		return this.getToken(GqlParser.PROJECT, 0);
	}
	public QUERY(): TerminalNode {
		return this.getToken(GqlParser.QUERY, 0);
	}
	public RECORDS(): TerminalNode {
		return this.getToken(GqlParser.RECORDS, 0);
	}
	public REFERENCE(): TerminalNode {
		return this.getToken(GqlParser.REFERENCE, 0);
	}
	public RENAME(): TerminalNode {
		return this.getToken(GqlParser.RENAME, 0);
	}
	public REVOKE(): TerminalNode {
		return this.getToken(GqlParser.REVOKE, 0);
	}
	public RIGHT(): TerminalNode {
		return this.getToken(GqlParser.RIGHT, 0);
	}
	public SUBSTRING(): TerminalNode {
		return this.getToken(GqlParser.SUBSTRING, 0);
	}
	public TEMPORAL(): TerminalNode {
		return this.getToken(GqlParser.TEMPORAL, 0);
	}
	public UNIQUE(): TerminalNode {
		return this.getToken(GqlParser.UNIQUE, 0);
	}
	public UNIT(): TerminalNode {
		return this.getToken(GqlParser.UNIT, 0);
	}
	public VALUES(): TerminalNode {
		return this.getToken(GqlParser.VALUES, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_preReservedWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterPreReservedWord) {
	 		listener.enterPreReservedWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitPreReservedWord) {
	 		listener.exitPreReservedWord(this);
		}
	}
}


export class NonReservedWordContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACYCLIC(): TerminalNode {
		return this.getToken(GqlParser.ACYCLIC, 0);
	}
	public BINDING(): TerminalNode {
		return this.getToken(GqlParser.BINDING, 0);
	}
	public BINDINGS(): TerminalNode {
		return this.getToken(GqlParser.BINDINGS, 0);
	}
	public CONNECTING(): TerminalNode {
		return this.getToken(GqlParser.CONNECTING, 0);
	}
	public DESTINATION(): TerminalNode {
		return this.getToken(GqlParser.DESTINATION, 0);
	}
	public DIFFERENT(): TerminalNode {
		return this.getToken(GqlParser.DIFFERENT, 0);
	}
	public DIRECTED(): TerminalNode {
		return this.getToken(GqlParser.DIRECTED, 0);
	}
	public EDGE(): TerminalNode {
		return this.getToken(GqlParser.EDGE, 0);
	}
	public EDGES(): TerminalNode {
		return this.getToken(GqlParser.EDGES, 0);
	}
	public ELEMENT(): TerminalNode {
		return this.getToken(GqlParser.ELEMENT, 0);
	}
	public ELEMENTS(): TerminalNode {
		return this.getToken(GqlParser.ELEMENTS, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(GqlParser.FIRST, 0);
	}
	public GRAPH(): TerminalNode {
		return this.getToken(GqlParser.GRAPH, 0);
	}
	public GROUPS(): TerminalNode {
		return this.getToken(GqlParser.GROUPS, 0);
	}
	public KEEP(): TerminalNode {
		return this.getToken(GqlParser.KEEP, 0);
	}
	public LABEL(): TerminalNode {
		return this.getToken(GqlParser.LABEL, 0);
	}
	public LABELED(): TerminalNode {
		return this.getToken(GqlParser.LABELED, 0);
	}
	public LABELS(): TerminalNode {
		return this.getToken(GqlParser.LABELS, 0);
	}
	public LAST(): TerminalNode {
		return this.getToken(GqlParser.LAST, 0);
	}
	public NFC(): TerminalNode {
		return this.getToken(GqlParser.NFC, 0);
	}
	public NFD(): TerminalNode {
		return this.getToken(GqlParser.NFD, 0);
	}
	public NFKC(): TerminalNode {
		return this.getToken(GqlParser.NFKC, 0);
	}
	public NFKD(): TerminalNode {
		return this.getToken(GqlParser.NFKD, 0);
	}
	public NO(): TerminalNode {
		return this.getToken(GqlParser.NO, 0);
	}
	public NODE(): TerminalNode {
		return this.getToken(GqlParser.NODE, 0);
	}
	public NORMALIZED(): TerminalNode {
		return this.getToken(GqlParser.NORMALIZED, 0);
	}
	public ONLY(): TerminalNode {
		return this.getToken(GqlParser.ONLY, 0);
	}
	public ORDINALITY(): TerminalNode {
		return this.getToken(GqlParser.ORDINALITY, 0);
	}
	public PROPERTY(): TerminalNode {
		return this.getToken(GqlParser.PROPERTY, 0);
	}
	public READ(): TerminalNode {
		return this.getToken(GqlParser.READ, 0);
	}
	public RELATIONSHIP(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIP, 0);
	}
	public RELATIONSHIPS(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIPS, 0);
	}
	public REPEATABLE(): TerminalNode {
		return this.getToken(GqlParser.REPEATABLE, 0);
	}
	public SHORTEST(): TerminalNode {
		return this.getToken(GqlParser.SHORTEST, 0);
	}
	public SIMPLE(): TerminalNode {
		return this.getToken(GqlParser.SIMPLE, 0);
	}
	public SOURCE(): TerminalNode {
		return this.getToken(GqlParser.SOURCE, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(GqlParser.TABLE, 0);
	}
	public TEMP(): TerminalNode {
		return this.getToken(GqlParser.TEMP, 0);
	}
	public TIMEZONE(): TerminalNode {
		return this.getToken(GqlParser.TIMEZONE, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(GqlParser.TO, 0);
	}
	public TRAIL(): TerminalNode {
		return this.getToken(GqlParser.TRAIL, 0);
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(GqlParser.TRANSACTION, 0);
	}
	public TYPE(): TerminalNode {
		return this.getToken(GqlParser.TYPE, 0);
	}
	public UNDIRECTED(): TerminalNode {
		return this.getToken(GqlParser.UNDIRECTED, 0);
	}
	public VERTEX(): TerminalNode {
		return this.getToken(GqlParser.VERTEX, 0);
	}
	public WALK(): TerminalNode {
		return this.getToken(GqlParser.WALK, 0);
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(GqlParser.WITHOUT, 0);
	}
	public WRITE(): TerminalNode {
		return this.getToken(GqlParser.WRITE, 0);
	}
	public ZONE(): TerminalNode {
		return this.getToken(GqlParser.ZONE, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nonReservedWord;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNonReservedWord) {
	 		listener.enterNonReservedWord(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNonReservedWord) {
	 		listener.exitNonReservedWord(this);
		}
	}
}


export class DelimiterTokenContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GQL_SPECIAL_CHAR(): TerminalNode {
		return this.getToken(GqlParser.GQL_SPECIAL_CHAR, 0);
	}
	public characterStringLiteral(): CharacterStringLiteralContext {
		return this.getTypedRuleContext(CharacterStringLiteralContext, 0) as CharacterStringLiteralContext;
	}
	public dateString(): DateStringContext {
		return this.getTypedRuleContext(DateStringContext, 0) as DateStringContext;
	}
	public dateTimeString(): DateTimeStringContext {
		return this.getTypedRuleContext(DateTimeStringContext, 0) as DateTimeStringContext;
	}
	public delimitedIdentifier(): DelimitedIdentifierContext {
		return this.getTypedRuleContext(DelimitedIdentifierContext, 0) as DelimitedIdentifierContext;
	}
	public durationString(): DurationStringContext {
		return this.getTypedRuleContext(DurationStringContext, 0) as DurationStringContext;
	}
	public timeString(): TimeStringContext {
		return this.getTypedRuleContext(TimeStringContext, 0) as TimeStringContext;
	}
	public CONCATENATION(): TerminalNode {
		return this.getToken(GqlParser.CONCATENATION, 0);
	}
	public DOUBLE_COLON(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_COLON, 0);
	}
	public DOUBLE_MINUS(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_MINUS, 0);
	}
	public DOUBLE_PERIOD(): TerminalNode {
		return this.getToken(GqlParser.DOUBLE_PERIOD, 0);
	}
	public notEquals(): NotEqualsContext {
		return this.getTypedRuleContext(NotEqualsContext, 0) as NotEqualsContext;
	}
	public lessThen(): LessThenContext {
		return this.getTypedRuleContext(LessThenContext, 0) as LessThenContext;
	}
	public graterThanOrEquals(): GraterThanOrEqualsContext {
		return this.getTypedRuleContext(GraterThanOrEqualsContext, 0) as GraterThanOrEqualsContext;
	}
	public lessThanOrEquals(): LessThanOrEqualsContext {
		return this.getTypedRuleContext(LessThanOrEqualsContext, 0) as LessThanOrEqualsContext;
	}
	public LEFT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW, 0);
	}
	public LEFT_ARROW_TILDE(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE, 0);
	}
	public LEFT_ARROW_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_BRACKET, 0);
	}
	public LEFT_ARROW_TILDE_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.LEFT_ARROW_TILDE_BRACKET, 0);
	}
	public LEFT_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_RIGHT, 0);
	}
	public LEFT_MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_MINUS_SLASH, 0);
	}
	public LEFT_TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.LEFT_TILDE_SLASH, 0);
	}
	public MINUS_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.MINUS_LEFT_BRACKET, 0);
	}
	public MINUS_SLASH(): TerminalNode {
		return this.getToken(GqlParser.MINUS_SLASH, 0);
	}
	public RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_ARROW, 0);
	}
	public RIGHT_BRACKET_MINUS(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_MINUS, 0);
	}
	public RIGHT_BRACKET_TILDE(): TerminalNode {
		return this.getToken(GqlParser.RIGHT_BRACKET_TILDE, 0);
	}
	public BRACKET_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_RIGHT_ARROW, 0);
	}
	public BRACKET_TILDE_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.BRACKET_TILDE_RIGHT_ARROW, 0);
	}
	public SLASH_MINUS(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS, 0);
	}
	public SLASH_MINUS_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_MINUS_RIGHT, 0);
	}
	public SLASH_TILDE(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE, 0);
	}
	public SLASH_TILDE_RIGHT(): TerminalNode {
		return this.getToken(GqlParser.SLASH_TILDE_RIGHT, 0);
	}
	public TILDE_LEFT_BRACKET(): TerminalNode {
		return this.getToken(GqlParser.TILDE_LEFT_BRACKET, 0);
	}
	public TILDE_RIGHT_ARROW(): TerminalNode {
		return this.getToken(GqlParser.TILDE_RIGHT_ARROW, 0);
	}
	public TILDE_SLASH(): TerminalNode {
		return this.getToken(GqlParser.TILDE_SLASH, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_delimiterToken;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterDelimiterToken) {
	 		listener.enterDelimiterToken(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitDelimiterToken) {
	 		listener.exitDelimiterToken(this);
		}
	}
}


export class SeparatorContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public comment(): CommentContext {
		return this.getTypedRuleContext(CommentContext, 0) as CommentContext;
	}
	public WS(): TerminalNode {
		return this.getToken(GqlParser.WS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_separator;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterSeparator) {
	 		listener.enterSeparator(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitSeparator) {
	 		listener.exitSeparator(this);
		}
	}
}


export class CommentContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIMPLE_COMMENT_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.SIMPLE_COMMENT_LITERAL, 0);
	}
	public BRACKETED_COMMNET_LITERAL(): TerminalNode {
		return this.getToken(GqlParser.BRACKETED_COMMNET_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_comment;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterComment) {
	 		listener.enterComment(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitComment) {
	 		listener.exitComment(this);
		}
	}
}


export class EdgeSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EDGE(): TerminalNode {
		return this.getToken(GqlParser.EDGE, 0);
	}
	public RELATIONSHIP(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIP, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgeSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgeSynonym) {
	 		listener.enterEdgeSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgeSynonym) {
	 		listener.exitEdgeSynonym(this);
		}
	}
}


export class EdgesSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EDGES(): TerminalNode {
		return this.getToken(GqlParser.EDGES, 0);
	}
	public RELATIONSHIPS(): TerminalNode {
		return this.getToken(GqlParser.RELATIONSHIPS, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_edgesSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterEdgesSynonym) {
	 		listener.enterEdgesSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitEdgesSynonym) {
	 		listener.exitEdgesSynonym(this);
		}
	}
}


export class NodeSynonymContext extends ParserRuleContext {
	constructor(parser?: GqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NODE(): TerminalNode {
		return this.getToken(GqlParser.NODE, 0);
	}
	public VERTEX(): TerminalNode {
		return this.getToken(GqlParser.VERTEX, 0);
	}
    public get ruleIndex(): number {
    	return GqlParser.RULE_nodeSynonym;
	}
	public enterRule(listener: GqlParserListener): void {
	    if(listener.enterNodeSynonym) {
	 		listener.enterNodeSynonym(this);
		}
	}
	public exitRule(listener: GqlParserListener): void {
	    if(listener.exitNodeSynonym) {
	 		listener.exitNodeSynonym(this);
		}
	}
}
